[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 161174999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553018399
    },
    {
        "content": "<p>btw <a href=\"#narrow/stream/131828-t-compiler/topic/place.202.2E0\" title=\"#narrow/stream/131828-t-compiler/topic/place.202.2E0\">link to previous discussion</a></p>",
        "id": 161175083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553018433
    },
    {
        "content": "<p>saw this <a href=\"https://github.com/rust-lang/rust/pull/59232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59232\">https://github.com/rust-lang/rust/pull/59232</a> and I guess we are going to have a lot of conflicts between this one and the Place struct thing</p>",
        "id": 161175130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553018477
    },
    {
        "content": "<p>wondering what should we do exactly?</p>",
        "id": 161175138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553018482
    },
    {
        "content": "<p>i'll be here in 30 mins</p>",
        "id": 161175239,
        "sender_full_name": "oli",
        "timestamp": 1553018554
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 161175299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553018592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I think the conflicts are going to be benign, but yes, they are definitely going to happen</p>",
        "id": 161177126,
        "sender_full_name": "oli",
        "timestamp": 1553019906
    },
    {
        "content": "<p>ok</p>",
        "id": 161177579,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553020212
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> back to OSS life :)</p>",
        "id": 162559246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405698
    },
    {
        "content": "<p>my idea is to do the struct change now</p>",
        "id": 162559264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405720
    },
    {
        "content": "<p>and then do the iterator thing, which I opened a WIP some time ago</p>",
        "id": 162559315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405730
    },
    {
        "content": "<p>does that sound correct?</p>",
        "id": 162559320,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405735
    },
    {
        "content": "<p>I need to start remembering what I was doing :P</p>",
        "id": 162559329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> for the sake of understanding a bit why is this question there <a href=\"https://github.com/rust-lang/rust/pull/59232/files#r269485022\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59232/files#r269485022\">https://github.com/rust-lang/rust/pull/59232/files#r269485022</a> ?</p>",
        "id": 162564316,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554409136
    },
    {
        "content": "<p>oh hey I was gonna ask you what the status of this refactor is, but I couldn't find you on here because Zulip makes people use their full names (which is IMO silly for a chat platform like this but nevermind)</p>",
        "id": 162564514,
        "sender_full_name": "eddyb",
        "timestamp": 1554409272
    },
    {
        "content": "<p>that question is regarding the <code>ty</code> field</p>",
        "id": 162564524,
        "sender_full_name": "eddyb",
        "timestamp": 1554409281
    },
    {
        "content": "<p>those <code>Ty</code>s (there's another one on field projections) are there for performance reasons, as I understand it</p>",
        "id": 162564560,
        "sender_full_name": "eddyb",
        "timestamp": 1554409304
    },
    {
        "content": "<p>since you can always get the type if you have a <code>TyCtxt</code></p>",
        "id": 162564570,
        "sender_full_name": "eddyb",
        "timestamp": 1554409315
    },
    {
        "content": "<p>NLL uses them to store a version with all of the lifetimes replaced with inference variables. I'm not sure how necessary this is.</p>",
        "id": 162564718,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1554409406
    },
    {
        "content": "<p>you never need that</p>",
        "id": 162564799,
        "sender_full_name": "eddyb",
        "timestamp": 1554409449
    },
    {
        "content": "<p><code>static</code> can't be parameterized</p>",
        "id": 162564815,
        "sender_full_name": "eddyb",
        "timestamp": 1554409457
    },
    {
        "content": "<p>and for fields, the type is the one you get by substituting the definition type with the substitiions of the ADT</p>",
        "id": 162564830,
        "sender_full_name": "eddyb",
        "timestamp": 1554409474
    },
    {
        "content": "<p>NLL replaces the lifetimes in those substitutions, so they would naturally propagate to the field type</p>",
        "id": 162564847,
        "sender_full_name": "eddyb",
        "timestamp": 1554409492
    },
    {
        "content": "<p>like, if you think about it, lifetimes have to come from somewhere, those <code>Ty</code>s are just caches</p>",
        "id": 162564878,
        "sender_full_name": "eddyb",
        "timestamp": 1554409520
    },
    {
        "content": "<blockquote>\n<p>oh hey I was gonna ask you what the status of this refactor is, but I couldn't find you on here because Zulip makes people use their full names (which is IMO silly for a chat platform like this but nevermind)</p>\n</blockquote>\n<p>I was not working on this thing because I was running Rust Latam</p>",
        "id": 162565214,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554409767
    },
    {
        "content": "<p>back to this :)</p>",
        "id": 162565218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554409776
    },
    {
        "content": "<p>tomorrow I'm going to start spending more time on time and the first couple of changes should be fairly easy to do I think</p>",
        "id": 162565237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554409800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 162631488,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476925
    },
    {
        "content": "<p>I was wondering in this code ...</p>",
        "id": 162631517,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">projection</span>: <span class=\"nc\">PlaceProjection</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">PlaceProjection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Index</span><span class=\"p\">(..),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162631527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476946
    },
    {
        "content": "<p>what do we want to do with the generic definition we previously had of the <code>Projection</code></p>",
        "id": 162631566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476967
    },
    {
        "content": "<p>I guess if we want <code>PlaceProjection</code> that's not generic anymore</p>",
        "id": 162631595,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476983
    },
    {
        "content": "<p>but I guess we want to have some generic definition?</p>",
        "id": 162631683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554477007
    },
    {
        "content": "<p>maybe something like ...</p>",
        "id": 162631689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554477013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">projection</span>: <span class=\"nc\">PlaceProjection</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">PlaceProjection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GenericProjection</span><span class=\"o\">&lt;</span><span class=\"n\">Place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">GenericProjection</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">GenericProjection</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Index</span><span class=\"p\">(..),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162631951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554477140
    },
    {
        "content": "<p>I guess we want something like that?</p>",
        "id": 162631987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554477159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thoughts? ^^^</p>",
        "id": 162636714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554480731
    },
    {
        "content": "<p>anyway, I'm working on it regardless, asking just in case you want to do something different than I'm doing :)</p>",
        "id": 162636764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554480784
    },
    {
        "content": "<p>you should  keep it as generic as possible, I think</p>",
        "id": 162697317,
        "sender_full_name": "eddyb",
        "timestamp": 1554549264
    },
    {
        "content": "<p>and as aliased as today</p>",
        "id": 162697322,
        "sender_full_name": "eddyb",
        "timestamp": 1554549294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to start with before diving into zillions of changes</p>",
        "id": 162857778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554759727
    },
    {
        "content": "<p>do we want <a href=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\" target=\"_blank\" title=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\">this changes in the structures</a>?</p>",
        "id": 162857807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554759762
    },
    {
        "content": "<p>check out a couple of FIXME that are there</p>",
        "id": 162857817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554759778
    },
    {
        "content": "<p>I think we don't want <code>ProjectionElem</code> and neither <code>PlaceElem</code> given that with the new structures there's no separate concept of an projection elem</p>",
        "id": 162857865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554759837
    },
    {
        "content": "<p>there's base and elem altogether</p>",
        "id": 162857941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554759880
    },
    {
        "content": "<p>I left them still, maybe is worth to make that change compile and then removing those structs and adapt them to use, instead of the <code>ProjectionElem</code> that has the FIXME we want to adapt the code and use the new <code>Projection</code> both are generic and instead of the <code>PlaceElem</code> that has the FIXME we want to adapt the code and use the new <code>PlaceProjection</code> both are concrete</p>",
        "id": 162858148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554760054
    },
    {
        "content": "<p>tomorrow I will probably be able to finish this part, your pointers would be nice so I don't dive into a nightmare of changes that go in the wrong direction :)</p>",
        "id": 162858209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554760092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that change doesn't work until we actually get rid of the recursion</p>",
        "id": 162883842,
        "sender_full_name": "oli",
        "timestamp": 1554789932
    },
    {
        "content": "<p>you'll need to keep <code>Projection</code> and <code>ProjectionElem</code> around. Your new <code>Projection</code> variant is just direct recursion without any metadata.</p>",
        "id": 162883907,
        "sender_full_name": "oli",
        "timestamp": 1554789986
    },
    {
        "content": "<p>The <code>base</code> field could just be <code>Option&lt;Box&lt;Projection&lt;B, V, T&gt;&gt;</code> and <code>None</code> for the leaf-situation</p>",
        "id": 162884017,
        "sender_full_name": "oli",
        "timestamp": 1554790144
    },
    {
        "content": "<p>then the <code>ProjectionElem</code> enum doesn't need any changes</p>",
        "id": 162884023,
        "sender_full_name": "oli",
        "timestamp": 1554790160
    },
    {
        "content": "<p>Sorry about misleading you there, I didn't think that through</p>",
        "id": 162884030,
        "sender_full_name": "oli",
        "timestamp": 1554790175
    },
    {
        "content": "<p>You're right, once we move to slices, the <code>Projection</code> type can be removed and we'll just have <code>ProjectionElem</code>, which can then be renamed to <code>Projection</code></p>",
        "id": 162884104,
        "sender_full_name": "oli",
        "timestamp": 1554790235
    },
    {
        "content": "<p>so ... I'm now trying to understand exactly what this step is about</p>",
        "id": 162918778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so you meant to leave <code>Projection</code> and <code>ProjectionElem</code> as they are currently in the code?</p>",
        "id": 162918860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822131
    },
    {
        "content": "<p>and just change <code>Place</code> from enum to struct?</p>",
        "id": 162918877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822144
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 162918887,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822151
    },
    {
        "content": "<p>trying to understand the step from the doc that says ...</p>",
        "id": 162918919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822180
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Change Place to</li>\n</ul>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">projection</span>: <span class=\"nc\">PlaceProjection</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">enum</span> <span class=\"nc\">PlaceProjection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Base</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Index</span><span class=\"p\">(..),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>..</p>",
        "id": 162918952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822192
    },
    {
        "content": "<p>I'm lacking a lot of context, sorry</p>",
        "id": 162918956,
        "sender_full_name": "eddyb",
        "timestamp": 1554822196
    },
    {
        "content": "<p>the <code>Projection</code> variant there is obviously wrong</p>",
        "id": 162918996,
        "sender_full_name": "eddyb",
        "timestamp": 1554822220
    },
    {
        "content": "<p>it's just an unary encoding</p>",
        "id": 162919009,
        "sender_full_name": "eddyb",
        "timestamp": 1554822228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm just talking about <a href=\"https://paper.dropbox.com/doc/Place-2.0-current-PR-status--Aa4SgFPQ34YAIfVjdc_oBL7DAg-vmbnFv8VkCEuL57QfWWMH\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Place-2.0-current-PR-status--Aa4SgFPQ34YAIfVjdc_oBL7DAg-vmbnFv8VkCEuL57QfWWMH\">https://paper.dropbox.com/doc/Place-2.0-current-PR-status--Aa4SgFPQ34YAIfVjdc_oBL7DAg-vmbnFv8VkCEuL57QfWWMH</a> that step that says <code>change Place to</code></p>",
        "id": 162919073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822249
    },
    {
        "content": "<p><code>Projection(Projection(Projection(Base)))</code> is the number 3 with no other information :P</p>",
        "id": 162919077,
        "sender_full_name": "eddyb",
        "timestamp": 1554822250
    },
    {
        "content": "<p>yes</p>",
        "id": 162919090,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822258
    },
    {
        "content": "<p>that's wrong</p>",
        "id": 162919091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822259
    },
    {
        "content": "<p>it should be a list</p>",
        "id": 162919109,
        "sender_full_name": "eddyb",
        "timestamp": 1554822276
    },
    {
        "content": "<p>I'm more trying to understand what you wanted to do with the code more than what I'd do :)</p>",
        "id": 162919129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822292
    },
    {
        "content": "<p>which means you just want a linked list an enum that's very much like today for the actual elem</p>",
        "id": 162919133,
        "sender_full_name": "eddyb",
        "timestamp": 1554822295
    },
    {
        "content": "<p>I mean, you know way more than me about the compiler so my ideas may miss a lot of things</p>",
        "id": 162919148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822306
    },
    {
        "content": "<p>me? I don't know, I didn't come up with this linked list form</p>",
        "id": 162919150,
        "sender_full_name": "eddyb",
        "timestamp": 1554822306
    },
    {
        "content": "<p>when I've said you I was referring to the compiler team members that come with this idea</p>",
        "id": 162919212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822346
    },
    {
        "content": "<p>I thought those were you and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> :)</p>",
        "id": 162919217,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822351
    },
    {
        "content": "<p>but whatever</p>",
        "id": 162919220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822354
    },
    {
        "content": "<p>I wasn't involved, sorry :(</p>",
        "id": 162919228,
        "sender_full_name": "eddyb",
        "timestamp": 1554822359
    },
    {
        "content": "<p>no worries</p>",
        "id": 162919280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822372
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 162919314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822390
    },
    {
        "content": "<p>I guess this <a href=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\" target=\"_blank\" title=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\">https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9</a> is what you're talking about</p>",
        "id": 162919727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822663
    },
    {
        "content": "<p>mmmmaybe?</p>",
        "id": 162919837,
        "sender_full_name": "eddyb",
        "timestamp": 1554822723
    },
    {
        "content": "<p>hehe, yes</p>",
        "id": 162919856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822738
    },
    {
        "content": "<p><code>projection: Option&lt;Box&lt;PlaceProjection&lt;'tcx&gt;&gt;&gt;,</code></p>",
        "id": 162919867,
        "sender_full_name": "eddyb",
        "timestamp": 1554822748
    },
    {
        "content": "<p>I think this would make it equivalent</p>",
        "id": 162919886,
        "sender_full_name": "eddyb",
        "timestamp": 1554822763
    },
    {
        "content": "<p>to get rid of base in projection?</p>",
        "id": 162919934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822800
    },
    {
        "content": "<p>no</p>",
        "id": 162920026,
        "sender_full_name": "eddyb",
        "timestamp": 1554822853
    },
    {
        "content": "<p>to allow no projections, like <code>Place::Base</code> today</p>",
        "id": 162920038,
        "sender_full_name": "eddyb",
        "timestamp": 1554822867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah, true added that but you still need the option in base</p>",
        "id": 162921028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554823516
    },
    {
        "content": "<p>yeah you need both</p>",
        "id": 162921127,
        "sender_full_name": "eddyb",
        "timestamp": 1554823568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> please when you are around confirm what do we want to do exactly :)</p>",
        "id": 162969044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864384
    },
    {
        "content": "<p>I'm a bit confused</p>",
        "id": 162969045,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864389
    },
    {
        "content": "<p>my guess is that we want something like ...</p>",
        "id": 162969049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">8424</span><span class=\"n\">c096e88</span><span class=\"p\">..</span><span class=\"mf\">2120e741452</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1900</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1900</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Statement</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"sd\">/// A path to a value; something that can be evaluated without</span>\n<span class=\"w\"> </span><span class=\"sd\">/// changing or disturbing program state.</span>\n<span class=\"w\"> </span><span class=\"cp\">#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, HashStable)]</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"sd\">/// projection out of a place (access a field, deref a pointer, etc)</span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">projection</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"cp\">#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, HashStable)]</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1941</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1941</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">impl_stable_hash_for</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">Static</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"cp\">#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord,</span>\n<span class=\"cp\">          Hash, RustcEncodable, RustcDecodable, HashStable)]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Projection</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">next</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">elem</span>: <span class=\"nc\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162969050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864410
    },
    {
        "content": "<p>the current <code>Place</code> is a thing that goes backwards</p>",
        "id": 162969064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864434
    },
    {
        "content": "<p><code>a.b.c</code> is represented as <code>.c -&gt; .b -&gt; .a</code></p>",
        "id": 162969077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864457
    },
    {
        "content": "<p>if we now have a base and projection at the same time I guess we have</p>",
        "id": 162969086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864474
    },
    {
        "content": "<p><code>a</code> as the base</p>",
        "id": 162969088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864480
    },
    {
        "content": "<p>and in the projection we want <code>.b</code> to be the elem and the next to be the <code>.c</code> part, is that right?</p>",
        "id": 162969140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864506
    },
    {
        "content": "<p>if we want the new thing in this particular step to be backwards I don't know what represents to have first both base and projection, projection would be <code>.c</code> and base <code>a</code>? what would be that useful for?</p>",
        "id": 162969243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864655
    },
    {
        "content": "<p>what needs to be done is easy but I'm kind of stucked trying to understand what do we want to accomplish :/</p>",
        "id": 162969260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554864688
    },
    {
        "content": "<p>btw, this is what I meant <a href=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\" target=\"_blank\" title=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\">https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9</a> with the from left to right idea</p>",
        "id": 162971563,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554868135
    },
    {
        "content": "<p>or it could even be a list of projections and stop that silly recursion</p>",
        "id": 162971668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554868285
    },
    {
        "content": "<p>but I guess <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> had reasons to make a step that somehow resembles the current code</p>",
        "id": 162971717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554868324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I was thinking that we'd end up with <code>(a, .c -&gt; .b)</code> as a first step</p>",
        "id": 162986899,
        "sender_full_name": "oli",
        "timestamp": 1554887169
    },
    {
        "content": "<p>having an intermediate step where the order is <code>(a, .b -&gt; .c)</code> is unnecessary I think, at that point we can go to the slice directly</p>",
        "id": 162986946,
        "sender_full_name": "oli",
        "timestamp": 1554887233
    },
    {
        "content": "<p>so essentially what you had in <a href=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\" target=\"_blank\" title=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9\">https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9</a></p>",
        "id": 162986956,
        "sender_full_name": "oli",
        "timestamp": 1554887258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I guess you meant this <a href=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9/ce2b1c8d7017d49938921d5ea2dcccac899c7fe7\" target=\"_blank\" title=\"https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9/ce2b1c8d7017d49938921d5ea2dcccac899c7fe7\">https://gist.github.com/spastorino/f5b88513e866cf7e0acf23cef8e507c9/ce2b1c8d7017d49938921d5ea2dcccac899c7fe7</a> specific revision</p>",
        "id": 162994348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894667
    },
    {
        "content": "<p>yes</p>",
        "id": 162994364,
        "sender_full_name": "oli",
        "timestamp": 1554894695
    },
    {
        "content": "<p>the weird thing there is the option in <code>base</code>'s <code>Projection</code> field</p>",
        "id": 162994371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894714
    },
    {
        "content": "<p>so ... that's None in the <code>.b</code> case?</p>",
        "id": 162994417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894724
    },
    {
        "content": "<p>I meant, if we want this <code>(a, .c -&gt; .b)</code>, <code>.c</code> base would be <code>.b</code> and <code>.b</code> base would be <code>None</code></p>",
        "id": 162994623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894906
    },
    {
        "content": "<p>which is a bit weird</p>",
        "id": 162994640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894925
    },
    {
        "content": "<p>that in the case <code>base</code> is a <code>Projection</code></p>",
        "id": 162994714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554894966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> but you yeah, you could handle that considering that when the <code>base</code> of a <code>Projection</code> is <code>None</code> you just go to the original <code>Place</code>, <code>a</code> in this case</p>",
        "id": 162994941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895158
    },
    {
        "content": "<p>yea, it's weird because we need two <code>Option</code>s</p>",
        "id": 162994956,
        "sender_full_name": "oli",
        "timestamp": 1554895182
    },
    {
        "content": "<p>ok</p>",
        "id": 162994959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895192
    },
    {
        "content": "<p>my main question now is ... what are you foreseen exactly by using this structured in this way?</p>",
        "id": 162995017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895225
    },
    {
        "content": "<p>I honestly did not see this when I was thinking about this transformation originally</p>",
        "id": 162995020,
        "sender_full_name": "oli",
        "timestamp": 1554895234
    },
    {
        "content": "<p>instead of going just straight to use a <code>Vec</code></p>",
        "id": 162995024,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895245
    },
    {
        "content": "<p>the important part of this transformation is the <code>base</code> field on <code>Place</code></p>",
        "id": 162995032,
        "sender_full_name": "oli",
        "timestamp": 1554895254
    },
    {
        "content": "<p>ok</p>",
        "id": 162995037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895263
    },
    {
        "content": "<p>many algorithms just want that and don't care about the projections</p>",
        "id": 162995046,
        "sender_full_name": "oli",
        "timestamp": 1554895271
    },
    {
        "content": "<p>you just want to transform to use a base and don't care about the rest</p>",
        "id": 162995051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895287
    },
    {
        "content": "<p>that's more or less the idea</p>",
        "id": 162995057,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895291
    },
    {
        "content": "<p>If we do the <code>base</code> field change and the <code>slice</code> change in two PRs, then we have fewer places to modify at once</p>",
        "id": 162995062,
        "sender_full_name": "oli",
        "timestamp": 1554895301
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 162995063,
        "sender_full_name": "oli",
        "timestamp": 1554895310
    },
    {
        "content": "<p>perfect</p>",
        "id": 162995065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895312
    },
    {
        "content": "<blockquote>\n<p>I honestly did not see this when I was thinking about this transformation originally</p>\n</blockquote>\n<p>you did not see what? sorry</p>",
        "id": 162995088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895322
    },
    {
        "content": "<p>that you'd end up needing options and whatnot</p>",
        "id": 162995120,
        "sender_full_name": "oli",
        "timestamp": 1554895336
    },
    {
        "content": "<p>the fact that we needed <code>Option</code> in ... :)</p>",
        "id": 162995124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895340
    },
    {
        "content": "<p>ok, thanks for the info</p>",
        "id": 162995133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895353
    },
    {
        "content": "<p>need to leave for a bit and a bit later going to do this</p>",
        "id": 162995143,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895368
    },
    {
        "content": "<p>but may be back and start to read your proposal to see what's coming next and may ask questions</p>",
        "id": 162995158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895385
    },
    {
        "content": "<p>so I have a better picture of the rest of the work</p>",
        "id": 162995168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554895393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> the structure we come up with is wrong :)</p>",
        "id": 163009315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906534
    },
    {
        "content": "<p>at least I think it is</p>",
        "id": 163009326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906542
    },
    {
        "content": "<p>for instance</p>",
        "id": 163009330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906544
    },
    {
        "content": "<p>sorry got distracted</p>",
        "id": 163009693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906748
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"sd\">/// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or</span>\n<span class=\"w\">    </span><span class=\"sd\">/// a single deref of a local.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME: can we safely swap the semantics of `fn base_local` below in here instead?</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">local</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Local</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">base</span>: <span class=\"nc\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">elem</span>: <span class=\"nc\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163009695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in order to implement this exactly what do you do?</p>",
        "id": 163009726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906770
    },
    {
        "content": "<p>you match on <code>self.base</code> I presume (<code>Self</code> is <code>Place</code>, right?)</p>",
        "id": 163009785,
        "sender_full_name": "oli",
        "timestamp": 1554906813
    },
    {
        "content": "<p>yes</p>",
        "id": 163009791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906820
    },
    {
        "content": "<p>irgnore all projections</p>",
        "id": 163009794,
        "sender_full_name": "oli",
        "timestamp": 1554906821
    },
    {
        "content": "<p>oh</p>",
        "id": 163009796,
        "sender_full_name": "oli",
        "timestamp": 1554906828
    },
    {
        "content": "<p>I misread</p>",
        "id": 163009798,
        "sender_full_name": "oli",
        "timestamp": 1554906831
    },
    {
        "content": "<p>but well, the code is saying ... :)</p>",
        "id": 163009802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906835
    },
    {
        "content": "<p>yes</p>",
        "id": 163009807,
        "sender_full_name": "oli",
        "timestamp": 1554906839
    },
    {
        "content": "<p>I meant, we need a way in projections a way to go to the base place as a <code>PlaceBase</code></p>",
        "id": 163009863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906857
    },
    {
        "content": "<p>so, checking for a local is the first step, and then check that the projections are either empty, or contain just a deref projection</p>",
        "id": 163009868,
        "sender_full_name": "oli",
        "timestamp": 1554906864
    },
    {
        "content": "<p>the projections don't need to know about the base</p>",
        "id": 163009890,
        "sender_full_name": "oli",
        "timestamp": 1554906880
    },
    {
        "content": "<p>hmmm in the way I was reading the idea was ...</p>",
        "id": 163009938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906917
    },
    {
        "content": "<p>if you want you can also do <code>match (self.base, self.projection)</code> to get back almost the same code that shows up here, now</p>",
        "id": 163009952,
        "sender_full_name": "oli",
        "timestamp": 1554906927
    },
    {
        "content": "<p>but according to what I've said earlier (in case I was right) <code>self.base</code> is not really the base of the <code>self.projection</code> element</p>",
        "id": 163010068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906985
    },
    {
        "content": "<p>is the top base</p>",
        "id": 163010072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906989
    },
    {
        "content": "<p>so</p>",
        "id": 163010075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906990
    },
    {
        "content": "<p><code>a.b.c</code></p>",
        "id": 163010079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554906995
    },
    {
        "content": "<p>the first arm would be <code>(PlaceBase::Local(local), None) | (PlaceBase::Local(local), Some(box Projection { base: None, elem: ProjectionElem::Deref }))</code></p>",
        "id": 163010104,
        "sender_full_name": "oli",
        "timestamp": 1554907006
    },
    {
        "content": "<p>I have <code>c</code> in the projection and <code>a</code> in base</p>",
        "id": 163010113,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907011
    },
    {
        "content": "<p>the old code was <code>c</code> in the projection and <code>b</code> in base</p>",
        "id": 163010136,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907024
    },
    {
        "content": "<p>so it was checking that <code>c</code> was a <code>Deref</code> and <code>b</code> was a <code>Local</code></p>",
        "id": 163010152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907042
    },
    {
        "content": "<p>I don't have any way to do that now</p>",
        "id": 163010161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907049
    },
    {
        "content": "<p>right, but all this function cares about is having either a local or a deref projeciton on a local</p>",
        "id": 163010211,
        "sender_full_name": "oli",
        "timestamp": 1554907079
    },
    {
        "content": "<p>right <code>a.b.c</code> is not a <code>Deref</code></p>",
        "id": 163010307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907123
    },
    {
        "content": "<p>you're right</p>",
        "id": 163010322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907135
    },
    {
        "content": "<p>thanks</p>",
        "id": 163010325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907136
    },
    {
        "content": "<p>we either have <code>local</code> or <code>local.deref</code></p>",
        "id": 163010329,
        "sender_full_name": "oli",
        "timestamp": 1554907140
    },
    {
        "content": "<p>all other cases are irrelevant for this function</p>",
        "id": 163010354,
        "sender_full_name": "oli",
        "timestamp": 1554907148
    },
    {
        "content": "<p>yes yes</p>",
        "id": 163010382,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907175
    },
    {
        "content": "<p>I was more thinking about fields</p>",
        "id": 163010390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907179
    },
    {
        "content": "<p>I still have some notes from the all hands that we'll want to nuke <code>Deref</code> at some point anyway. Your changes will make that so much easier!</p>",
        "id": 163010400,
        "sender_full_name": "oli",
        "timestamp": 1554907190
    },
    {
        "content": "<p>then this function becomes nonexistant</p>",
        "id": 163010413,
        "sender_full_name": "oli",
        "timestamp": 1554907198
    },
    {
        "content": "<p>:)</p>",
        "id": 163010469,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907206
    },
    {
        "content": "<p>ok ok, gonna keep this going</p>",
        "id": 163010479,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907211
    },
    {
        "content": "<p>after a couple of changes I may push something for you to check just in case everything feels in the right direction</p>",
        "id": 163010532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907244
    },
    {
        "content": "<p>I can have a look immediately if you want</p>",
        "id": 163010563,
        "sender_full_name": "oli",
        "timestamp": 1554907259
    },
    {
        "content": "<p>there are so many changes to do that I don't want to end with 2.000 lines changes but have done the wrong thing :')</p>",
        "id": 163010599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907280
    },
    {
        "content": "<blockquote>\n<p>I can have a look immediately if you want</p>\n</blockquote>\n<p>cool, gonna try to push something in a couple of minutes</p>",
        "id": 163010611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907294
    },
    {
        "content": "<p>is going to lack a lot of things but at least fix this file and see if everything looks more or less ok</p>",
        "id": 163010638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554907311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I've figured that you probably want to check this <a href=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45\">https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45</a></p>",
        "id": 163015403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554910267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> mostly some nits on the pattern matches which can be simpler now</p>",
        "id": 163015958,
        "sender_full_name": "oli",
        "timestamp": 1554910616
    },
    {
        "content": "<p>the changes in the datastructure lgtm</p>",
        "id": 163015991,
        "sender_full_name": "oli",
        "timestamp": 1554910634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> your comments are right</p>",
        "id": 163017793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554911871
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 163017862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554911890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ...</p>",
        "id": 163056212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939409
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Field</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_closure</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_generator</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">by_ref</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">upvar_decls</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()].</span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163056230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939428
    },
    {
        "content": "<p>this suggests that what we talked earlier is not ok?</p>",
        "id": 163056236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939445
    },
    {
        "content": "<p>I mean, there place can be ... first a Deref and then a Field</p>",
        "id": 163056242,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939464
    },
    {
        "content": "<p>otherwise the code doesn't make a lot of sense</p>",
        "id": 163056248,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939474
    },
    {
        "content": "<p>wonder a couple of things</p>",
        "id": 163056297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939518
    },
    {
        "content": "<p>first what to do there</p>",
        "id": 163056299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939522
    },
    {
        "content": "<p>and second what are the possible combination of <code>Place</code>s, unsure if I'm properly understanding all the mixtures that can happen</p>",
        "id": 163056315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939545
    },
    {
        "content": "<p>my guess is that what we talked earlier is fine but unsure how this code is possible</p>",
        "id": 163056477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939773
    },
    {
        "content": "<p>I mean, how you can have a <code>Place</code> that is a projection deref, and it's base is a <code>Field</code></p>",
        "id": 163056500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939807
    },
    {
        "content": "<p><code>a.b</code> and <code>b</code> being <code>Box</code>?</p>",
        "id": 163056512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554939840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> basically any code that matched on <code>place</code> before, should now match on <code>place.projection</code></p>",
        "id": 163075741,
        "sender_full_name": "oli",
        "timestamp": 1554966480
    },
    {
        "content": "<p>you should not need to change anything structurally</p>",
        "id": 163075788,
        "sender_full_name": "oli",
        "timestamp": 1554966491
    },
    {
        "content": "<p>where you used to match on <code>place</code> and checked for a <code>Place::Base</code> variant, you don't need to match but can access <code>place.base</code></p>",
        "id": 163075811,
        "sender_full_name": "oli",
        "timestamp": 1554966537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm a bit confused</p>",
        "id": 163090035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980872
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\">https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043</a></p>",
        "id": 163090039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980881
    },
    {
        "content": "<p>maybe asking a more general question than the code there</p>",
        "id": 163090092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980913
    },
    {
        "content": "<p>I'm not sure about all the possibilities you can have on all place</p>",
        "id": 163090108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980944
    },
    {
        "content": "<p>for instance, is possible to have something like <code>a -&gt; b -&gt; c</code> and c being a projection which is a Deref and b being a Field?</p>",
        "id": 163090136,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980981
    },
    {
        "content": "<p>or something like that</p>",
        "id": 163090137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554980985
    },
    {
        "content": "<p>yes</p>",
        "id": 163090138,
        "sender_full_name": "oli",
        "timestamp": 1554980989
    },
    {
        "content": "<p>what code produces that?</p>",
        "id": 163090161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981002
    },
    {
        "content": "<p>if c is box?</p>",
        "id": 163090192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981015
    },
    {
        "content": "<p>I'm asking this because from yesterday I thought you were saying that that's not possible</p>",
        "id": 163090213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981084
    },
    {
        "content": "<p>in particular <a href=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\">https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043</a> this code is not equivalent</p>",
        "id": 163090221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981107
    },
    {
        "content": "<p>that would be <code>Place { base: a, projection: Some(Box::new(PlaceProjection { projection ProjectionKind::Deref, base: Some(Box::new(PlaceProjection { base: None, Projection: ProjectionKind::Field }</code> (plus some closing brackets</p>",
        "id": 163090252,
        "sender_full_name": "oli",
        "timestamp": 1554981123
    },
    {
        "content": "<p>yes, but I meant, what user code produces that structure?</p>",
        "id": 163090279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981157
    },
    {
        "content": "<p><code>*a.b</code> I think</p>",
        "id": 163090285,
        "sender_full_name": "oli",
        "timestamp": 1554981181
    },
    {
        "content": "<p>so the AST is <code>Deref(Field(a))</code></p>",
        "id": 163090296,
        "sender_full_name": "oli",
        "timestamp": 1554981193
    },
    {
        "content": "<p>ok</p>",
        "id": 163090297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981200
    },
    {
        "content": "<p>so as I was saying ...</p>",
        "id": 163090299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981206
    },
    {
        "content": "<blockquote>\n<p>in particular <a href=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043\">https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdL2043</a> this code is not equivalent</p>\n</blockquote>\n<p>this ^^^ seems wrong</p>",
        "id": 163090302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981219
    },
    {
        "content": "<p>what part about it? It looks like the correct transformation from master to your datastructures</p>",
        "id": 163090353,
        "sender_full_name": "oli",
        "timestamp": 1554981261
    },
    {
        "content": "<p>so if you have something like a -&gt; b -&gt; c</p>",
        "id": 163090381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981347
    },
    {
        "content": "<p>c is the projection which is a Field</p>",
        "id": 163090386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981355
    },
    {
        "content": "<p>b is a Deref</p>",
        "id": 163090387,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981358
    },
    {
        "content": "<p>and a is something else</p>",
        "id": 163090405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981363
    },
    {
        "content": "<p>in the old code c is the deref and it's base is b</p>",
        "id": 163090439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981377
    },
    {
        "content": "<p>now when I use base I'm going straight to the top</p>",
        "id": 163090443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981387
    },
    {
        "content": "<p>which is a</p>",
        "id": 163090446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981392
    },
    {
        "content": "<p>so I'm skipping b entirely</p>",
        "id": 163090449,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981401
    },
    {
        "content": "<p>sorry my example is bad</p>",
        "id": 163090530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981485
    },
    {
        "content": "<p>let me fix that</p>",
        "id": 163090536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981488
    },
    {
        "content": "<p>but you ensured there's no <code>b</code> via the <code>None</code></p>",
        "id": 163090537,
        "sender_full_name": "oli",
        "timestamp": 1554981490
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdR2057\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdR2057\">https://github.com/spastorino/rust/commit/e8b4b773e421b8c1feb01c59817a2962f5ab3d45#diff-f0577ac900ffbd36d3bb3421a928cbbdR2057</a></p>",
        "id": 163090543,
        "sender_full_name": "oli",
        "timestamp": 1554981510
    },
    {
        "content": "<p>yes, the code seems correct</p>",
        "id": 163090556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981542
    },
    {
        "content": "<p>I was confused by something else in this example</p>",
        "id": 163090569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981549
    },
    {
        "content": "<p>because Local can't be in the middle</p>",
        "id": 163090575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981569
    },
    {
        "content": "<p>I meant, is not a projection</p>",
        "id": 163090578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981573
    },
    {
        "content": "<p>so the None plus using a base Local is enough in this case</p>",
        "id": 163090581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981586
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> basically any code that matched on <code>place</code> before, should now match on <code>place.projection</code></p>\n</blockquote>\n<p>anyway, I don't think this is that simple</p>",
        "id": 163090674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981673
    },
    {
        "content": "<p>:P</p>",
        "id": 163090679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981677
    },
    {
        "content": "<p>you can't ever have a local in the middle</p>",
        "id": 163090680,
        "sender_full_name": "oli",
        "timestamp": 1554981678
    },
    {
        "content": "<p>yes</p>",
        "id": 163090689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981693
    },
    {
        "content": "<p>I mean, you can't :)</p>",
        "id": 163090692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981701
    },
    {
        "content": "<p>/me is confused</p>",
        "id": 163090697,
        "sender_full_name": "oli",
        "timestamp": 1554981717
    },
    {
        "content": "<p>sorry, I meant you can't have a local in the middle</p>",
        "id": 163090745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981735
    },
    {
        "content": "<p>I'm very sure it is as simple as just matching on <code>place.projection</code></p>",
        "id": 163090747,
        "sender_full_name": "oli",
        "timestamp": 1554981740
    },
    {
        "content": "<p>oh I got that</p>",
        "id": 163090749,
        "sender_full_name": "oli",
        "timestamp": 1554981744
    },
    {
        "content": "<p>I was agreeing with you</p>",
        "id": 163090750,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981744
    },
    {
        "content": "<p>I'm wondering whether you have encountered situations where you can't just match on <code>place.projection</code></p>",
        "id": 163090758,
        "sender_full_name": "oli",
        "timestamp": 1554981765
    },
    {
        "content": "<p>I was thinking about Deref and Field but saw that the example I was pointing at you was about Local</p>",
        "id": 163090763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981776
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Field</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_closure</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_generator</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">by_ref</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">upvar_decls</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()].</span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>for instance, in this case ^^^</p>",
        "id": 163090780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981803
    },
    {
        "content": "<p>see the first <code>place</code> binding</p>",
        "id": 163090794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981818
    },
    {
        "content": "<p>that's = to self or self.base</p>",
        "id": 163090800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981831
    },
    {
        "content": "<p>those with the new code are a <code>Place</code> or a <code>PlaceBase</code></p>",
        "id": 163090839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981843
    },
    {
        "content": "<p>different types</p>",
        "id": 163090847,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981847
    },
    {
        "content": "<p>I meant, is not that hard to fix that but it's not just matching in self.projection :P</p>",
        "id": 163090857,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981867
    },
    {
        "content": "<p>that's what I meant</p>",
        "id": 163090859,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554981870
    },
    {
        "content": "<p>oh, that still works</p>",
        "id": 163091077,
        "sender_full_name": "oli",
        "timestamp": 1554982153
    },
    {
        "content": "<p>you match on <code>place.projection</code> and either return <code>place.projection</code> or <code>proj.base</code></p>",
        "id": 163091140,
        "sender_full_name": "oli",
        "timestamp": 1554982207
    },
    {
        "content": "<p>All this code does is eat one <code>Deref</code> if there was one</p>",
        "id": 163091151,
        "sender_full_name": "oli",
        "timestamp": 1554982227
    },
    {
        "content": "<p>In fact this is even easier, since the outer <code>if let</code> can be removed and you can just use <code>let proj = self.projection?;</code></p>",
        "id": 163091201,
        "sender_full_name": "oli",
        "timestamp": 1554982306
    },
    {
        "content": "<p>which will save you the redundant <code>match place</code> below.</p>",
        "id": 163091260,
        "sender_full_name": "oli",
        "timestamp": 1554982346
    },
    {
        "content": "<p>You should probably rename the <code>place</code> variable to <code>proj</code> though</p>",
        "id": 163091268,
        "sender_full_name": "oli",
        "timestamp": 1554982357
    },
    {
        "content": "<p>I sincerely hope my ramblings make any sense at all</p>",
        "id": 163091292,
        "sender_full_name": "oli",
        "timestamp": 1554982390
    },
    {
        "content": "<p>basically this entire function does not care about <code>self.base</code></p>",
        "id": 163091316,
        "sender_full_name": "oli",
        "timestamp": 1554982436
    },
    {
        "content": "<p>hey back</p>",
        "id": 163093998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554985483
    },
    {
        "content": "<p>ohh yes, your comments make a lot of sense</p>",
        "id": 163094006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554985495
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 163094007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554985497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Field</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">opt_proj</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">projection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opt_proj</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">place_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">place_ty</span><span class=\"p\">.</span><span class=\"n\">projection_ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"p\">).</span><span class=\"n\">ty</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">ty</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_closure</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_generator</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">by_ref</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">upvar_decls</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()].</span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163104187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> back to this thing :)</p>",
        "id": 163104196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992722
    },
    {
        "content": "<p>this would be the straightforward way to translate that method</p>",
        "id": 163104207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992733
    },
    {
        "content": "<p>which sucks a lot</p>",
        "id": 163104211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992736
    },
    {
        "content": "<p>well actually the original method had a lot to improve</p>",
        "id": 163104235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992758
    },
    {
        "content": "<p>but I guess it's not wise to refactor methods meanwhile doing this</p>",
        "id": 163104297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992772
    },
    {
        "content": "<p>that's not too bad</p>",
        "id": 163104579,
        "sender_full_name": "oli",
        "timestamp": 1554992990
    },
    {
        "content": "<p>a bad part about the new thing is that is not that direct to get the ty of a <code>PlaceProjection</code> self.base was before a <code>Place</code> so we could just call ty</p>",
        "id": 163104583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554992994
    },
    {
        "content": "<p>add a FIXME about cleaning it up?</p>",
        "id": 163104591,
        "sender_full_name": "oli",
        "timestamp": 1554992999
    },
    {
        "content": "<p>now we need to do the dance I've done</p>",
        "id": 163104635,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993004
    },
    {
        "content": "<p>yes</p>",
        "id": 163104642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993006
    },
    {
        "content": "<p>let me push again what I have</p>",
        "id": 163104647,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993010
    },
    {
        "content": "<p>I'm going to be pushing WIP 1/2/3 etc so it's easier for you to review</p>",
        "id": 163104658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993023
    },
    {
        "content": "<p>oh, that type extraction... hmm</p>",
        "id": 163104669,
        "sender_full_name": "oli",
        "timestamp": 1554993036
    },
    {
        "content": "<p>the thing I'm going to push has amended already what I've pushed yesterday</p>",
        "id": 163104692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993060
    },
    {
        "content": "<p>I've just realized that would be easier if I keep pushing things and at the end I do a huge squash</p>",
        "id": 163104723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993080
    },
    {
        "content": "<p>just to simplify you following up the discussions and changes</p>",
        "id": 163104732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993093
    },
    {
        "content": "<blockquote>\n<p>oh, that type extraction... hmm</p>\n</blockquote>\n<p>I thought about adding a <code>ty</code> method to <code>PlaceProjection</code></p>",
        "id": 163104756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993114
    },
    {
        "content": "<p>the problem is that I need <code>PlaceBase</code> :)</p>",
        "id": 163104772,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993121
    },
    {
        "content": "<p>or maybe better to add a base_ty to Place</p>",
        "id": 163104865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993173
    },
    {
        "content": "<p>or super_ty</p>",
        "id": 163104872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993176
    },
    {
        "content": "<p>which goes one step up and if there's a base projection it uses that otherwise goes to <code>PlaceBase</code></p>",
        "id": 163104942,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993221
    },
    {
        "content": "<p>I'm not liking that much to talk about base in both cases</p>",
        "id": 163104960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993232
    },
    {
        "content": "<p>yea, it's weird</p>",
        "id": 163104984,
        "sender_full_name": "oli",
        "timestamp": 1554993243
    },
    {
        "content": "<p>there's <code>PlaceBase</code> root base and there's the <code>base</code> field in <code>PlaceProjection</code></p>",
        "id": 163105024,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993253
    },
    {
        "content": "<blockquote>\n<p>yea, it's weird</p>\n</blockquote>\n<p>what's weird from all that I've said? :P, everything :P</p>",
        "id": 163105056,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993271
    },
    {
        "content": "<p>the one in the projection is less <code>base</code> and more <code>outer_projection</code> or sth</p>",
        "id": 163105153,
        "sender_full_name": "oli",
        "timestamp": 1554993330
    },
    {
        "content": "<p>yes</p>",
        "id": 163105165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993344
    },
    {
        "content": "<p>I guess I can add a rename this fixme</p>",
        "id": 163105235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993364
    },
    {
        "content": "<p>I think doing that now will cause some pain?</p>",
        "id": 163105250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993375
    },
    {
        "content": "<p>hmmm do you think it worth?</p>",
        "id": 163105259,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993383
    },
    {
        "content": "<p>maybe it does to do all now</p>",
        "id": 163105265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993386
    },
    {
        "content": "<p>yea, either do it now or never</p>",
        "id": 163105507,
        "sender_full_name": "oli",
        "timestamp": 1554993559
    },
    {
        "content": "<p>ok, gonna change that</p>",
        "id": 163105527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993572
    },
    {
        "content": "<p>that field won't exist for long</p>",
        "id": 163105528,
        "sender_full_name": "oli",
        "timestamp": 1554993572
    },
    {
        "content": "<p>ahh right, so it doesn't worth then</p>",
        "id": 163105541,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993586
    },
    {
        "content": "<blockquote>\n<p>or maybe better to add a base_ty to Place</p>\n</blockquote>\n<p>does this worth?</p>",
        "id": 163105613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993606
    },
    {
        "content": "<p>it's not technically base</p>",
        "id": 163105633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-                    let base_ty = proj.base.ty(mir, *tcx).ty;\n+                    let base_ty = if let Some(box base) = proj.base {\n+                        let mut place_ty = self.base.ty(mir, *tcx);\n+                        place_ty.projection_ty(*tcx, &amp;base.elem).ty\n+                    } else {\n+                        self.base.ty(mir, *tcx).ty\n+                    };\n</pre></div>",
        "id": 163105657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993637
    },
    {
        "content": "<p>it's a method that solves that if stuff</p>",
        "id": 163105670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993652
    },
    {
        "content": "<p>basically getting the ty of one level up</p>",
        "id": 163105684,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993660
    },
    {
        "content": "<p>so outer_projection or base</p>",
        "id": 163105704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that's what it is for now <a href=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\">https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3</a></p>",
        "id": 163106042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554993871
    },
    {
        "content": "<p>hmm... what if you made it <code>let mut base_ty = self.base.ty(mir, *tcx); if let Some(base) = &amp;proj.base { base_ty = base_ty.projection_ty(*tcx, &amp;base.elem); }</code>?</p>",
        "id": 163106331,
        "sender_full_name": "oli",
        "timestamp": 1554994056
    },
    {
        "content": "<p>not sure what the return type of <code>projection_ty</code> is</p>",
        "id": 163106344,
        "sender_full_name": "oli",
        "timestamp": 1554994073
    },
    {
        "content": "<p>yeah that works</p>",
        "id": 163107434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554994730
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> that's what it is for now <a href=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\">https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3</a></p>\n</blockquote>\n<p>on top of this for you to review, I've pushed that change here <a href=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\">https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1</a></p>",
        "id": 163107697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554994918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> another similar thing ...</p>",
        "id": 163115435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">super_projection</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">proj</span>: <span class=\"kp\">&amp;</span> <span class=\"cp\">$($mutability</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">context</span>: <span class=\"nc\">PlaceContext</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">is_mutating_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">PlaceContext</span>::<span class=\"n\">MutatingUse</span><span class=\"p\">(</span><span class=\"n\">MutatingUseContext</span>::<span class=\"n\">Projection</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">PlaceContext</span>::<span class=\"n\">NonMutatingUse</span><span class=\"p\">(</span><span class=\"n\">NonMutatingUseContext</span>::<span class=\"n\">Projection</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_place</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_projection_elem</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163115482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000149
    },
    {
        "content": "<p><code>visit_place</code> takes base which is not a <code>Place</code> anymore, right now it's a <code>PlaceProjection</code></p>",
        "id": 163115530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000192
    },
    {
        "content": "<p>I'm not sure how did you envision to play with this stuff</p>",
        "id": 163115608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000213
    },
    {
        "content": "<p>should I just have visit_place_projection thing?</p>",
        "id": 163115624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000239
    },
    {
        "content": "<p>well there's already one, going to play with this for a bit to see if things end in an equivalent way :)</p>",
        "id": 163115709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555000321
    },
    {
        "content": "<p>depends on the users...</p>",
        "id": 163125128,
        "sender_full_name": "oli",
        "timestamp": 1555007181
    },
    {
        "content": "<p>can we get away with not calling <code>visit_place</code> here?</p>",
        "id": 163125162,
        "sender_full_name": "oli",
        "timestamp": 1555007213
    },
    {
        "content": "<p>if the users don't care about order, just completeness, we can easily reshuffle this</p>",
        "id": 163125231,
        "sender_full_name": "oli",
        "timestamp": 1555007256
    },
    {
        "content": "<p>basically replace the <code>self.visit_place</code> call with <code>if let Some(proj) = proj.base { self.visit_projection(proj, context, location); }</code></p>",
        "id": 163125334,
        "sender_full_name": "oli",
        "timestamp": 1555007314
    },
    {
        "content": "<p>The only situation where we'd call <code>visit_place</code> would be wherever the visitor is processing the actual <code>Place</code> type and then we call it on the <code>PlaceBase</code> there</p>",
        "id": 163125397,
        "sender_full_name": "oli",
        "timestamp": 1555007368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in that particular place I've added a visit_place_base</p>",
        "id": 163126058,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007803
    },
    {
        "content": "<p>made visit_place adapt to that</p>",
        "id": 163126074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007822
    },
    {
        "content": "<p>ah, that makes sense</p>",
        "id": 163126087,
        "sender_full_name": "oli",
        "timestamp": 1555007830
    },
    {
        "content": "<p>maybe better if I push this :)</p>",
        "id": 163126090,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007831
    },
    {
        "content": "<p>ok</p>",
        "id": 163126091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@@ -725,19 +732,27 @@ macro_rules! make_mir_visitor {\n                             place: &amp; $($mutability)? Place&lt;&#39;tcx&gt;,\n                             context: PlaceContext&lt;&#39;tcx&gt;,\n                             location: Location) {\n+                let Place { base, projection } = place;\n+\n+                self.visit_place_base(base, context, location);\n+\n+                if let Some(proj) = projection {\n+                    self.visit_projection(proj, context, location);\n+                }\n+            }\n</pre></div>",
        "id": 163126105,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007860
    },
    {
        "content": "<p>that's visit_place</p>",
        "id": 163126114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007870
    },
    {
        "content": "<p>well super_place, but you got what I meant :P</p>",
        "id": 163126176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007899
    },
    {
        "content": "<p>the default implementation of visit_place</p>",
        "id": 163126181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007905
    },
    {
        "content": "<p>found weird that, that's called super :)</p>",
        "id": 163126189,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555007914
    },
    {
        "content": "<p>heh, half the compiler uses <code>super_*</code> the other half uses <code>walk_*</code></p>",
        "id": 163127125,
        "sender_full_name": "oli",
        "timestamp": 1555008607
    },
    {
        "content": "<p>:)</p>",
        "id": 163129531,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> as soon as you have time to review something let me know and I can push</p>",
        "id": 163129561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010632
    },
    {
        "content": "<p>there are already two WIP X commits up and I have a bunch of things in locally</p>",
        "id": 163129629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010663
    },
    {
        "content": "<p>btw ...</p>",
        "id": 163129696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>         &amp;mut self,\n         mir_place: &amp;mir::Place&lt;&#39;tcx&gt;\n     ) -&gt; EvalResult&lt;&#39;tcx, PlaceTy&lt;&#39;tcx, M::PointerTag&gt;&gt; {\n-        use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n         let place = match *mir_place {\n-            Base(PlaceBase::Local(mir::RETURN_PLACE)) =&gt; match self.frame().return_place {\n+            Place {\n+                base: PlaceBase::Local(mir::RETURN_PLACE),\n+                projection: None,\n+            } =&gt; match self.frame().return_place {\n                 Some(return_place) =&gt;\n                     // We use our layout to verify our assumption; caller will validate\n                     // their layout on return.\n@@ -638,7 +645,10 @@ where\n                     },\n                 None =&gt; return err!(InvalidNullPointerUsage),\n             },\n-            Base(PlaceBase::Local(local)) =&gt; PlaceTy {\n+            Place {\n+                base: PlaceBase::Local(local),\n+                projection: None,\n+            } =&gt; PlaceTy {\n                 place: Place::Local {\n                     frame: self.cur_frame(),\n                     local,\n@@ -646,7 +656,10 @@ where\n                 layout: self.layout_of_local(self.frame(), local, None)?,\n             },\n\n-            Projection(ref proj) =&gt; {\n+            Place {\n+                base: _,\n+                projection: Some(ref proj),\n+            } =&gt; {\n                 let place = self.eval_place(&amp;proj.base)?;\n                 self.place_projection(place, &amp;proj.elem)?\n             }\n</pre></div>",
        "id": 163129711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010734
    },
    {
        "content": "<p>I hate this kind of changes :P</p>",
        "id": 163129712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010734
    },
    {
        "content": "<p>I could match on place.base and place.projection and make some things simpler but some other things worser :/</p>",
        "id": 163129728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010756
    },
    {
        "content": "<p>I guess if I were trying to write better code on this design I'd split everything into something_place_base and something_projection methods but I don't think that worth given that this is going to be also changed ... so ... I guess the kind of diff I've pasted above is ok</p>",
        "id": 163129814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010820
    },
    {
        "content": "<p>anyway, let me know if it's not :)</p>",
        "id": 163129830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555010828
    },
    {
        "content": "<p>yea, lgtm</p>",
        "id": 163132079,
        "sender_full_name": "oli",
        "timestamp": 1555012859
    },
    {
        "content": "<p>I won't be able to review a lot until monday</p>",
        "id": 163132100,
        "sender_full_name": "oli",
        "timestamp": 1555012871
    },
    {
        "content": "<p>I'll try to find some time though, will be async most likely, so feel free to commit stuff and link me to it</p>",
        "id": 163132116,
        "sender_full_name": "oli",
        "timestamp": 1555012892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 163133234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013683
    },
    {
        "content": "<p>unsure if you've already seen but ...</p>",
        "id": 163133244,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013690
    },
    {
        "content": "<p>1. <a href=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\">https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3</a><br>\n2. <a href=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\">https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1</a><br>\n3. <a href=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\">https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271</a></p>",
        "id": 163133294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013732
    },
    {
        "content": "<p>the first two are things that I've shared already, 3 just pushed</p>",
        "id": 163133324,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013761
    },
    {
        "content": "<p>anyway, now on I think most changes are mechanical</p>",
        "id": 163133384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013780
    },
    {
        "content": "<p>a LOT though :P</p>",
        "id": 163133396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555013795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 163380515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555335995
    },
    {
        "content": "<blockquote>\n<p>1. <a href=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\">https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3</a><br>\n2. <a href=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\">https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1</a><br>\n3. <a href=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\">https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271</a></p>\n</blockquote>\n<p>were you able to check all these?</p>",
        "id": 163380569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336026
    },
    {
        "content": "<p>I have more stuff locally</p>",
        "id": 163380577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336031
    },
    {
        "content": "<p>sorry, didn't see it and I gotta run in a minute</p>",
        "id": 163380756,
        "sender_full_name": "oli",
        "timestamp": 1555336131
    },
    {
        "content": "<p>no worries</p>",
        "id": 163380770,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336142
    },
    {
        "content": "<p>when you can let me know</p>",
        "id": 163380783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336146
    },
    {
        "content": "<p>I'm not blocked or anything like that</p>",
        "id": 163380810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336173
    },
    {
        "content": "<p>1. <a href=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3\">https://github.com/spastorino/rust/commit/38e66f7397599d48a78aebcf23e2d4fb3485a9a3</a><br>\n2. <a href=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1\">https://github.com/spastorino/rust/commit/fc3faa5d7def51227fae05ae43e1de0e397a05c1</a><br>\n3. <a href=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271\">https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271</a><br>\n4. <a href=\"https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464\">https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464</a></p>",
        "id": 163381296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336492
    },
    {
        "content": "<p>I think you've already checked <code>1</code></p>",
        "id": 163381327,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> one question ...</p>",
        "id": 163403254,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352444
    },
    {
        "content": "<p>I'm getting a lot of <code>Place</code> expected <code>Option</code> found errors</p>",
        "id": 163403272,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352457
    },
    {
        "content": "<p>thing is when you are in a projection and do base to go up</p>",
        "id": 163403303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352475
    },
    {
        "content": "<p>but the problem with that is that I need the base inside projection if it's <code>Some(..)</code></p>",
        "id": 163403335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352503
    },
    {
        "content": "<p>otherwise I need the <code>PlaceBase</code></p>",
        "id": 163403343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352512
    },
    {
        "content": "<p>I was thinking about doing a method for that but the problem is that those are different types</p>",
        "id": 163403408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352541
    },
    {
        "content": "<p>and if I don't solve that in this way I'd need to check if base is <code>Some</code> otherwise go to the top base</p>",
        "id": 163403482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352606
    },
    {
        "content": "<p>gonna do that for now but those may end being a lot of changes to rollback :/</p>",
        "id": 163403500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352624
    },
    {
        "content": "<p>for instance base here <a href=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757\">https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757</a></p>",
        "id": 163403766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352792
    },
    {
        "content": "<p>and on top of that, next problem is that <a href=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1751\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1751\">https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1751</a> takes a Place but I don't have a Place anymore</p>",
        "id": 163403807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352827
    },
    {
        "content": "<p>I wonder if we need to define a trait to solve that</p>",
        "id": 163403839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555352867
    },
    {
        "content": "<p>hmm... I was thinking that we should pass down the <code>PlaceBase</code> wherever the final <code>None</code> needs a <code>PlaceBase</code></p>",
        "id": 163404258,
        "sender_full_name": "oli",
        "timestamp": 1555353141
    },
    {
        "content": "<p>(or convert whatever is happening to use the <code>unroll</code> code)</p>",
        "id": 163404293,
        "sender_full_name": "oli",
        "timestamp": 1555353162
    },
    {
        "content": "<p>didn't understand what you meant</p>",
        "id": 163404313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353181
    },
    {
        "content": "<p>you were thinking that instead of passing down base, we should pass everything? included the <code>PlaceBase</code>?</p>",
        "id": 163404367,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353221
    },
    {
        "content": "<p>So if I understand you correctly, after traversing the \"Projection-Linked-List\", when you end up with the <code>None</code>, that's where you used to have the <code>Place::Base</code> instead of another <code>Place::Projection</code></p>",
        "id": 163404455,
        "sender_full_name": "oli",
        "timestamp": 1555353279
    },
    {
        "content": "<p>let me explain it simpler</p>",
        "id": 163404485,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353305
    },
    {
        "content": "<p>In order to achieve the same behaviour, whatever code matches on the <code>proj.base</code> field, needs to also know about the actual <code>PlaceBase</code> that the <code>Place</code> has</p>",
        "id": 163404501,
        "sender_full_name": "oli",
        "timestamp": 1555353321
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757\">https://github.com/rust-lang/rust/blob/2d800f96b43dded0484a68f9703cd056c8e06464/src/librustc_mir/borrow_check/mod.rs#L1750-L1757</a></p>",
        "id": 163404515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353330
    },
    {
        "content": "<p>ok, so you meant that I should pass to those methods both things?</p>",
        "id": 163404537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                             </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_if_full_path_is_moved</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                 </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">InitializationRequiringAction</span>::<span class=\"n\">Use</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                 </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163404634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353410
    },
    {
        "content": "<p>something like this?</p>",
        "id": 163404637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353415
    },
    {
        "content": "<p>yes that. It's essentially what was passed down before</p>",
        "id": 163404693,
        "sender_full_name": "oli",
        "timestamp": 1555353480
    },
    {
        "content": "<p>yep</p>",
        "id": 163404759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353491
    },
    {
        "content": "<p>ok</p>",
        "id": 163404777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353502
    },
    {
        "content": "<p><code>place.base</code> is private :(</p>",
        "id": 163405016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353676
    },
    {
        "content": "<p>wonder if I should do those crate visible or just expose methods</p>",
        "id": 163405034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555353699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I wonder what about ...</p>",
        "id": 163405825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555354243
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_if_full_path_is_moved</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">InitializationRequiringAction</span>::<span class=\"n\">Use</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">projection</span>: <span class=\"o\">*</span><span class=\"n\">proj_base</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163405850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555354265
    },
    {
        "content": "<p>that constructs new places, which is probably very expensive (boxes and such)</p>",
        "id": 163406795,
        "sender_full_name": "oli",
        "timestamp": 1555354966
    },
    {
        "content": "<p>Most of this stuff will in the future get a base and a slice of the rest of the projections</p>",
        "id": 163406855,
        "sender_full_name": "oli",
        "timestamp": 1555355013
    },
    {
        "content": "<p>so right now it needs the base and the \"linked list\" of projections</p>",
        "id": 163406874,
        "sender_full_name": "oli",
        "timestamp": 1555355027
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 163407011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555355139
    },
    {
        "content": "<p>the other kind of recurrent thing I'm seeing is the thing with the type</p>",
        "id": 163407126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555355214
    },
    {
        "content": "<p>getting the type of the projection or the type of the base if the proj is <code>None</code></p>",
        "id": 163407158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555355234
    },
    {
        "content": "<p>I guess I can add those 4 or 5 lines of code everywhere but ... hmmm</p>",
        "id": 163407181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555355254
    },
    {
        "content": "<p>hmm... maybe make the <code>ProjectionElem::ty</code> method take a <code>PlaceBase</code>, too?</p>",
        "id": 163410636,
        "sender_full_name": "oli",
        "timestamp": 1555358036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that's weird from my point of view</p>",
        "id": 163421816,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555367265
    },
    {
        "content": "<p>wouldn't be better to have something like <code>Place::ty(base: &amp;PlaceBase, elem: &amp;ProjectionElem)</code>?</p>",
        "id": 163421984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555367414
    },
    {
        "content": "<p>sgtm</p>",
        "id": 163447794,
        "sender_full_name": "oli",
        "timestamp": 1555400389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> one thing that I wonder is ... we are going to start passing down as we said yesterday <code>PlaceBase</code> and <code>PlaceProjection</code></p>",
        "id": 163492241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555437910
    },
    {
        "content": "<p>I guess we need to pass down <code>Option&lt;Box&lt;PlaceProjection&gt;&gt;</code> really</p>",
        "id": 163492271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555437930
    },
    {
        "content": "<p>and wonder if we should have a type alias for that or something</p>",
        "id": 163492284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555437948
    },
    {
        "content": "<p>I'm probably going to take one path and see how goes but if you know beforehand you could save me some time :D</p>",
        "id": 163492370,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555437983
    },
    {
        "content": "<p>going to pass the <code>Option&lt;Box&lt;PlaceProjection&gt;&gt;</code> down</p>",
        "id": 163492397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555438004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I also keep wordering if it's not easier to build a <code>Place</code> back</p>",
        "id": 163495737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440352
    },
    {
        "content": "<p>I know it's problematic because of performance</p>",
        "id": 163495800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440369
    },
    {
        "content": "<p>yea, I'd rather not do that</p>",
        "id": 163495816,
        "sender_full_name": "oli",
        "timestamp": 1555440378
    },
    {
        "content": "<p>but I think it may be easier as an intermediate step</p>",
        "id": 163495821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440381
    },
    {
        "content": "<p>I mean, just a previous commit in the same PR</p>",
        "id": 163495831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440389
    },
    {
        "content": "<p>if you can get rid of it within the same PR, sure</p>",
        "id": 163495867,
        "sender_full_name": "oli",
        "timestamp": 1555440416
    },
    {
        "content": "<p>this is a massive change</p>",
        "id": 163495868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440417
    },
    {
        "content": "<p>what do you think? :)</p>",
        "id": 163495891,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440427
    },
    {
        "content": "<p>your idea was ... as I saw saying a bit before, to pass <code>PlaceBase</code> and <code>Option&lt;Box&lt;PlaceProjection&gt;&gt;</code> all the way down?</p>",
        "id": 163495927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440461
    },
    {
        "content": "<p>as long as at the end of the PR we don't have any temporary Places and allocations that are created and thrown away, as an intermediate step that's perfectly alright</p>",
        "id": 163495930,
        "sender_full_name": "oli",
        "timestamp": 1555440462
    },
    {
        "content": "<p>ok</p>",
        "id": 163496003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440500
    },
    {
        "content": "<p>and if I follow the other approach</p>",
        "id": 163496011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440508
    },
    {
        "content": "<blockquote>\n<p>your idea was ... as I saw saying a bit before, to pass <code>PlaceBase</code> and <code>Option&lt;Box&lt;PlaceProjection&gt;&gt;</code> all the way down?</p>\n</blockquote>\n<p>this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> was the idea, right?</p>",
        "id": 163496019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555440517
    },
    {
        "content": "<p>yes</p>",
        "id": 163496092,
        "sender_full_name": "oli",
        "timestamp": 1555440592
    },
    {
        "content": "<p>I mean you can use a type alias or a new type or even make <code>Place</code> generic over <code>AsRef&lt;PlaceProjection&gt;</code> or sth if that is more usable</p>",
        "id": 163496184,
        "sender_full_name": "oli",
        "timestamp": 1555440653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was going over your review</p>",
        "id": 163565357,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555511185
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271#commitcomment-33214690\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271#commitcomment-33214690\">https://github.com/spastorino/rust/commit/d308b77860c6fced35cf43b7417b12648e503271#commitcomment-33214690</a></p>",
        "id": 163565358,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555511185
    },
    {
        "content": "<p>I guess <code>PlaceBase</code> can't be <code>Copy</code> because we want the <code>Box</code></p>",
        "id": 163565384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555511208
    },
    {
        "content": "<p>oh right</p>",
        "id": 163565477,
        "sender_full_name": "oli",
        "timestamp": 1555511261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about <a href=\"https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464#r33209896\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464#r33209896\">https://github.com/spastorino/rust/commit/2d800f96b43dded0484a68f9703cd056c8e06464#r33209896</a></p>",
        "id": 163578186,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555519071
    },
    {
        "content": "<p>I think we need to merge the iter thing first, right?</p>",
        "id": 163578247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555519094
    },
    {
        "content": "<p>seems like we are in the need of iterating over in several parts</p>",
        "id": 163578273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555519124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in case you agree we need to merge the iterator thing first, here is the thing <a href=\"https://github.com/rust-lang/rust/pull/60063\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60063\">https://github.com/rust-lang/rust/pull/60063</a></p>",
        "id": 163615161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555550297
    },
    {
        "content": "<p>don't remember if you wanted something else in that PR</p>",
        "id": 163615165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555550306
    },
    {
        "content": "<p>we could migrate more things to use iter(), implement things in terms of that and then in the struct thing just change the iter() impl and get along with it</p>",
        "id": 163615188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555550356
    },
    {
        "content": "<p>that was your idea?</p>",
        "id": 163615190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555550360
    },
    {
        "content": "<p>can you give one example of how that would look like?</p>",
        "id": 163615196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555550371
    },
    {
        "content": "<p>The iterator PR lgtm, we can merge that as it is. I was thinking of the <code>Debug</code> impl of <code>Place</code>, the original code recursed on <code>Place::Projection</code>, basically the idea is to get rid of the recursion and use your new <code>iterate</code> method</p>",
        "id": 163645177,
        "sender_full_name": "oli",
        "timestamp": 1555589616
    },
    {
        "content": "<p>r=me on the PR or if you want you can already experiment with porting the <code>Debug</code> impl in the same PR, but I'm fine with it either way</p>",
        "id": 163645242,
        "sender_full_name": "oli",
        "timestamp": 1555589656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I guess is better if you merge that</p>",
        "id": 163647973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591883
    },
    {
        "content": "<p>so I can rebase the other branch on top</p>",
        "id": 163647980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591890
    },
    {
        "content": "<p>and do that in the next PR</p>",
        "id": 163647985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591900
    },
    {
        "content": "<p>the best thing of that is meanwhile I'm on vacations that is going to land</p>",
        "id": 163648063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591935
    },
    {
        "content": "<p>unsure what do you mean by <code>r=me</code></p>",
        "id": 163648077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591955
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/60063\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60063\">https://github.com/rust-lang/rust/pull/60063</a></p>",
        "id": 163648079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591958
    },
    {
        "content": "<p>isn't what I did enough?</p>",
        "id": 163648086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555591964
    },
    {
        "content": "<blockquote>\n<p>unsure what do you mean by <code>r=me</code></p>\n</blockquote>\n<p>That's bors-speak for anyone with bors powers may write <code>@bors r=oli-obk</code> so the PR gets merged but is marked as approved by me</p>",
        "id": 163720455,
        "sender_full_name": "oli",
        "timestamp": 1555660440
    },
    {
        "content": "<p>ahh yeah I don’t have bors rights, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> told me that I should have 😊</p>",
        "id": 163728507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555672131
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 164055186,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1556083794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you were planning to implement Debug for Place using iterate if I'm correct</p>",
        "id": 164144157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169225
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L2157-L2215\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L2157-L2215\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L2157-L2215</a></p>",
        "id": 164144159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169227
    },
    {
        "content": "<p>how were you planning to do so?</p>",
        "id": 164144162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169237
    },
    {
        "content": "<p>quickly looking at the code the only way I can think of is using a Stack</p>",
        "id": 164144214,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169267
    },
    {
        "content": "<p>because for each projection I need to print a starting part, then continue to the next projection and then when I'm back I print the last part</p>",
        "id": 164144370,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169498
    },
    {
        "content": "<p>or I guess I could iterate forward, print the opening part, go to base print it and iterate again in reverse to print the closing parts</p>",
        "id": 164144402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556169587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you there?</p>",
        "id": 164165502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195381
    },
    {
        "content": "<p>jup</p>",
        "id": 164165506,
        "sender_full_name": "oli",
        "timestamp": 1556195389
    },
    {
        "content": "<p>can you explain why this <a href=\"https://github.com/rust-lang/rust/pull/60247/files#r278458354\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60247/files#r278458354\">https://github.com/rust-lang/rust/pull/60247/files#r278458354</a> ?</p>",
        "id": 164165540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195402
    },
    {
        "content": "<p>first thing</p>",
        "id": 164165582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195422
    },
    {
        "content": "<p>for instance for a.b.c</p>",
        "id": 164165585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195428
    },
    {
        "content": "<p>old repr was .c -&gt; .b -&gt; .a</p>",
        "id": 164165594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195442
    },
    {
        "content": "<p>isn't the new one the same?</p>",
        "id": 164165607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556195458
    },
    {
        "content": "<p>the new one is <code>(a, .c -&gt; .b -&gt; None)</code>, but the iterator specifically exists to iterate in \"reverse\" order (reverse when lookng at the recursive datastructure). so iterating you kinda get <code>(a, [.b, .c])</code> (assuming the slice in here is an iterator)</p>",
        "id": 164165703,
        "sender_full_name": "oli",
        "timestamp": 1556195545
    },
    {
        "content": "<p>yeah, so by doing iterating directly, then going to base and then iterating backwards I'm doing .c -&gt; .b -&gt; .a -&gt; .b -&gt; .c</p>",
        "id": 164166408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196265
    },
    {
        "content": "<p>isn't that an exact replica of the recursion?</p>",
        "id": 164166414,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196279
    },
    {
        "content": "<p>yes, but we're trying to replicate the output here in a way that once the recursive datastructure is gone, will require minimal changes</p>",
        "id": 164166462,
        "sender_full_name": "oli",
        "timestamp": 1556196334
    },
    {
        "content": "<p>Basically your PR that turns <code>Place</code> into a <code>struct</code> should not have to touch the <code>Debug</code> impl after this change</p>",
        "id": 164166537,
        "sender_full_name": "oli",
        "timestamp": 1556196377
    },
    {
        "content": "<p>oh I misunderstdood your question</p>",
        "id": 164166566,
        "sender_full_name": "oli",
        "timestamp": 1556196405
    },
    {
        "content": "<p>ahh sorry, I think the iterator gives you .b -&gt; .c</p>",
        "id": 164166578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196415
    },
    {
        "content": "<p>not .c -&gt; .b</p>",
        "id": 164166583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196418
    },
    {
        "content": "<p>right?</p>",
        "id": 164166586,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196420
    },
    {
        "content": "<p>yes, that's what I was failing to explain</p>",
        "id": 164166605,
        "sender_full_name": "oli",
        "timestamp": 1556196431
    },
    {
        "content": "<p>I'm not looking at the code and didn't look at the playing by memory</p>",
        "id": 164166610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196434
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164166613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196440
    },
    {
        "content": "<p>just force pushed</p>",
        "id": 164166620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196446
    },
    {
        "content": "<p>jup, that looks right to me now</p>",
        "id": 164166729,
        "sender_full_name": "oli",
        "timestamp": 1556196515
    },
    {
        "content": "<p>as soon as the ci is happy is ready to merge then</p>",
        "id": 164166730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196515
    },
    {
        "content": "<p>yesterday after a some days off this work come back to it and rebased on top of the iterate changes</p>",
        "id": 164166945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196689
    },
    {
        "content": "<p>now did this and going to sit the WIP thing we have been talking about on top of also this PR</p>",
        "id": 164166964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196713
    },
    {
        "content": "<p>so I can continue with the rest</p>",
        "id": 164166968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556196715
    },
    {
        "content": "<p>It's so cool that you're doing all this work. I hope to soonish have more time, so that mir-opt actually starts deserving the term working <strong>group</strong></p>",
        "id": 164167297,
        "sender_full_name": "oli",
        "timestamp": 1556196973
    },
    {
        "content": "<p>:)</p>",
        "id": 164167455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556197135
    },
    {
        "content": "<p>I wish I can finish this quickly so I can involve in other things too</p>",
        "id": 164167476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556197149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/60247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60247\">https://github.com/rust-lang/rust/pull/60247</a> ready to r+ :)</p>",
        "id": 164176524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556203474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I've rebased the struct thing a while ago</p>",
        "id": 164465898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556554945
    },
    {
        "content": "<p>squashed everything</p>",
        "id": 164465903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556554951
    },
    {
        "content": "<p>and continued the work going</p>",
        "id": 164465907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556554958
    },
    {
        "content": "<p>I'm not sure if I should keep going and provide a huge commit or do you want to keep seeing this WIP X commits</p>",
        "id": 164465923,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556554976
    },
    {
        "content": "<p>anyway right now everything is amended with more stuff but I can do a <code>WIP 1</code> thing and keep that going until this compiles</p>",
        "id": 164465952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556555002
    },
    {
        "content": "<p>I'm fine with you squashing it</p>",
        "id": 164474799,
        "sender_full_name": "oli",
        "timestamp": 1556561439
    },
    {
        "content": "<p>ok</p>",
        "id": 164475101,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561644
    },
    {
        "content": "<p>man it's a lot of work</p>",
        "id": 164475115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561657
    },
    {
        "content": "<p>I mean, it's easy but it's a lot of stuff :P</p>",
        "id": 164475121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561664
    },
    {
        "content": "<p>I'm right now seeing 322 errors</p>",
        "id": 164475127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561672
    },
    {
        "content": "<p>changes are not that mechanical really</p>",
        "id": 164475134,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561684
    },
    {
        "content": "<p>maybe we can set a checkpoint at some given time so you can do a review</p>",
        "id": 164475160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561704
    },
    {
        "content": "<p>I'm afraid of spending a huge amount of hours doing something that is not exactly what you imagined</p>",
        "id": 164475192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561726
    },
    {
        "content": "<p>I'm sitting on a train right now</p>",
        "id": 164475195,
        "sender_full_name": "oli",
        "timestamp": 1556561728
    },
    {
        "content": "<p>throw stuff at me</p>",
        "id": 164475199,
        "sender_full_name": "oli",
        "timestamp": 1556561734
    },
    {
        "content": "<p>ok</p>",
        "id": 164475202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561738
    },
    {
        "content": "<p>can push what I have now</p>",
        "id": 164475212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561747
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164475217,
        "sender_full_name": "oli",
        "timestamp": 1556561752
    },
    {
        "content": "<p>I think there were already some pending comments on your side</p>",
        "id": 164475227,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561761
    },
    {
        "content": "<p>have those written down</p>",
        "id": 164475284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561770
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748\">https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748</a></p>",
        "id": 164475322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^^, a couple of comments before you doing a review :)</p>",
        "id": 164475340,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561825
    },
    {
        "content": "<p>there's Place::ty_from, I've added that but didn't make all the code use that</p>",
        "id": 164475359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561840
    },
    {
        "content": "<p>I'd need to remove the repetitions and replace with a call to this</p>",
        "id": 164475369,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561850
    },
    {
        "content": "<p>and there's also a lot of <code>&amp;Place { }</code> I was going to add a FIXME before each of those but didn't do that yet neither</p>",
        "id": 164475398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561872
    },
    {
        "content": "<p>I'm not even sure if doing that is possible or a good idea yet</p>",
        "id": 164475457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561889
    },
    {
        "content": "<p>will see</p>",
        "id": 164475461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561892
    },
    {
        "content": "<p>I fear I may end in a lot of used of moved value errors</p>",
        "id": 164475486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561911
    },
    {
        "content": "<p>I may need to clone things that are inside</p>",
        "id": 164475492,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561918
    },
    {
        "content": "<p>can you elaborate on the clone thing?</p>",
        "id": 164475517,
        "sender_full_name": "oli",
        "timestamp": 1556561938
    },
    {
        "content": "<p>anyway, it's a temporary hack to avoid changing all the signatures of the functions I'm calling</p>",
        "id": 164475518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561938
    },
    {
        "content": "<p>temporary as in will be gone by the end of the PR?</p>",
        "id": 164475539,
        "sender_full_name": "oli",
        "timestamp": 1556561954
    },
    {
        "content": "<p>yes</p>",
        "id": 164475545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561961
    },
    {
        "content": "<p>I want to have something as minimal as possible compiling</p>",
        "id": 164475553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561972
    },
    {
        "content": "<p>ah, ok, that's fine then</p>",
        "id": 164475558,
        "sender_full_name": "oli",
        "timestamp": 1556561975
    },
    {
        "content": "<p>so I can run tests and be sure</p>",
        "id": 164475560,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561977
    },
    {
        "content": "<p>changing all the functions signatures to receive base and projection instead of place would be a lot of work I think</p>",
        "id": 164475582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556561996
    },
    {
        "content": "<p>so more changes all over the place that may introduce changes</p>",
        "id": 164475643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562008
    },
    {
        "content": "<p>right</p>",
        "id": 164475701,
        "sender_full_name": "oli",
        "timestamp": 1556562069
    },
    {
        "content": "<p>so at first you're just creating a new <code>Place</code>?</p>",
        "id": 164475735,
        "sender_full_name": "oli",
        "timestamp": 1556562114
    },
    {
        "content": "<p>unsure what do you meant</p>",
        "id": 164475902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562239
    },
    {
        "content": "<p>if you're talking about those cases, yeah, I'm creating a new place out of a <code>PlaceBase</code> and a <code>PlaceProjection</code></p>",
        "id": 164475986,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562283
    },
    {
        "content": "<p>you clone <code>Place</code>s, modify the projection and then call the appropriate method, compared to what used to be just fetching the inner projection's place?</p>",
        "id": 164475997,
        "sender_full_name": "oli",
        "timestamp": 1556562293
    },
    {
        "content": "<p>gotcha</p>",
        "id": 164476003,
        "sender_full_name": "oli",
        "timestamp": 1556562297
    },
    {
        "content": "<p>do you think it would be less work to make <code>Place</code> generic and use a <code>Place&lt;Box&lt;Projection&gt;&gt;</code> vs a <code>Place&lt;&amp;Projection&gt;</code> depending on the use case?</p>",
        "id": 164476004,
        "sender_full_name": "oli",
        "timestamp": 1556562299
    },
    {
        "content": "<p>the generic parameter could still default to <code>Place&lt;Box&lt;Projection&gt;&gt;</code> so most code doesn't have to be changed</p>",
        "id": 164476056,
        "sender_full_name": "oli",
        "timestamp": 1556562331
    },
    {
        "content": "<p>sorry but I'm having a hard time following you :P</p>",
        "id": 164476095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562361
    },
    {
        "content": "<blockquote>\n<p>you clone <code>Place</code>s, modify the projection and then call the appropriate method, compared to what used to be just fetching the inner projection's place?</p>\n</blockquote>\n<p>unsure what do you meant :)</p>",
        "id": 164476138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562369
    },
    {
        "content": "<blockquote>\n<p>do you think it would be less work to make <code>Place</code> generic and use a <code>Place&lt;Box&lt;Projection&gt;&gt;</code> vs a <code>Place&lt;&amp;Projection&gt;</code> depending on the use case?</p>\n</blockquote>\n<p>unsure either</p>",
        "id": 164476148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562387
    },
    {
        "content": "<p>so when the old code was recursing on a <code>&amp;Place</code>, that was easy. You match on the variant, if it's a <code>Projection</code>, you get the inner <code>Place</code> and recurse</p>",
        "id": 164476215,
        "sender_full_name": "oli",
        "timestamp": 1556562441
    },
    {
        "content": "<p>yes</p>",
        "id": 164476241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562457
    },
    {
        "content": "<p>now, when you recurse, what you do is you fetch the <code>projection</code> field, match on that, build a new <code>Place</code> with the inner projection and the original base</p>",
        "id": 164476267,
        "sender_full_name": "oli",
        "timestamp": 1556562477
    },
    {
        "content": "<p>yes</p>",
        "id": 164476319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562491
    },
    {
        "content": "<p>this requires cloning the <code>Box&lt;Projection&gt;</code>, because you only have borrowed access</p>",
        "id": 164476324,
        "sender_full_name": "oli",
        "timestamp": 1556562493
    },
    {
        "content": "<p>yes</p>",
        "id": 164476333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562503
    },
    {
        "content": "<p>So instead of passing down the <code>base</code> and <code>projection</code> field separately, you could have a type almost like <code>Place</code>, but instead of the <code>projection</code> field being <code>Box&lt;Projection&gt;</code> it's <code>&amp;Projection</code></p>",
        "id": 164476549,
        "sender_full_name": "oli",
        "timestamp": 1556562634
    },
    {
        "content": "<p>in order to reduce code duplication, we can make <code>Place</code> generic over the <code>projection</code> field's type and either use <code>Box&lt;Projection&gt;</code> or <code>&amp;Projection</code> depending on what the code does</p>",
        "id": 164476606,
        "sender_full_name": "oli",
        "timestamp": 1556562683
    },
    {
        "content": "<p>ahh yes, I see what you meant</p>",
        "id": 164476638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562706
    },
    {
        "content": "<p>so my question to you is: do you think this would help or is that even more churn?</p>",
        "id": 164476652,
        "sender_full_name": "oli",
        "timestamp": 1556562721
    },
    {
        "content": "<p>especially since we'll essentially be undoing it once we go to interned slices</p>",
        "id": 164476720,
        "sender_full_name": "oli",
        "timestamp": 1556562745
    },
    {
        "content": "<p>yeah, I'm wondering about it</p>",
        "id": 164476738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562761
    },
    {
        "content": "<p>unsure</p>",
        "id": 164476740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562762
    },
    {
        "content": "<p>what do you think?</p>",
        "id": 164476785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562800
    },
    {
        "content": "<p>about the approach you have proposed</p>",
        "id": 164476791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562806
    },
    {
        "content": "<p>vs</p>",
        "id": 164476793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562807
    },
    {
        "content": "<p>just doing clone and keep passing Place</p>",
        "id": 164476805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562815
    },
    {
        "content": "<p>and then changing all the involved functions to receive both things</p>",
        "id": 164476828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562834
    },
    {
        "content": "<p>with your new approach you also want to avoid the functions receive both things?</p>",
        "id": 164476888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562848
    },
    {
        "content": "<p>well, they'll still change the type of the argument they take, but the rest of the code should stay mostly unaffected</p>",
        "id": 164476921,
        "sender_full_name": "oli",
        "timestamp": 1556562875
    },
    {
        "content": "<p>but once we go to interned slices, wouldn't we also need to receive both things in most of the functions?</p>",
        "id": 164476926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562878
    },
    {
        "content": "<p>you could have a sort of <code>as_ref</code> method on <code>Place</code> that gives the \"borrowed view\"</p>",
        "id": 164476943,
        "sender_full_name": "oli",
        "timestamp": 1556562892
    },
    {
        "content": "<p>but I don't need the borrowed view of an existing place</p>",
        "id": 164476987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562938
    },
    {
        "content": "<p>well, yes, but if you have a <code>Place</code> you have both <code>PlaceBase</code> and <code>&amp;[Projection]</code> and you can cheaply create a new place because slices (and subslices) are <code>Copy</code></p>",
        "id": 164476992,
        "sender_full_name": "oli",
        "timestamp": 1556562941
    },
    {
        "content": "<p>I need to strip the head projections and form a place from there</p>",
        "id": 164477001,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562951
    },
    {
        "content": "<blockquote>\n<p>well, yes, but if you have a <code>Place</code> you have both <code>PlaceBase</code> and <code>&amp;[Projection]</code> and you can cheaply create a new place because slices (and subslices) are <code>Copy</code></p>\n</blockquote>\n<p>true</p>",
        "id": 164477054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562969
    },
    {
        "content": "<p>which would just be <code>Place { base: old.base, proj: &amp;old.proj[1..] }</code></p>",
        "id": 164477059,
        "sender_full_name": "oli",
        "timestamp": 1556562974
    },
    {
        "content": "<p>so better to avoid changing all the signatures</p>",
        "id": 164477066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562990
    },
    {
        "content": "<p>hmm well seems like your idea is better then</p>",
        "id": 164477072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556562999
    },
    {
        "content": "<p>you'd still somewhat change the signatures</p>",
        "id": 164477081,
        "sender_full_name": "oli",
        "timestamp": 1556563010
    },
    {
        "content": "<p>yes</p>",
        "id": 164477087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556563016
    },
    {
        "content": "<p>but it's a minor change</p>",
        "id": 164477103,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556563025
    },
    {
        "content": "<p>since you need to use <code>Place&lt;'tcx, &amp;'a Projection&gt;</code> instead of <code>Place&lt;'tcx&gt;</code></p>",
        "id": 164477118,
        "sender_full_name": "oli",
        "timestamp": 1556563039
    },
    {
        "content": "<p>yep, agree but that changes is easier and simpler than receiving two things</p>",
        "id": 164477135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556563063
    },
    {
        "content": "<p>and impls could stay the same</p>",
        "id": 164477198,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556563084
    },
    {
        "content": "<p>and in my case I need to adapt everything</p>",
        "id": 164477210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556563093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I saw you left <a href=\"https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748#r33350775\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748#r33350775\">https://github.com/spastorino/rust/commit/8b96364a4caf4280c3ab02d539644d557a4ba748#r33350775</a></p>",
        "id": 164482741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567308
    },
    {
        "content": "<p>did you reviewed the thing completely?</p>",
        "id": 164482754,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567323
    },
    {
        "content": "<p>that's the only comment? :)</p>",
        "id": 164482755,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567330
    },
    {
        "content": "<p>yea, and immediately realized I wasn't sure if you wanted me to start reviewing and thus stopped</p>",
        "id": 164482757,
        "sender_full_name": "oli",
        "timestamp": 1556567331
    },
    {
        "content": "<p>then I forgot to tell you about that</p>",
        "id": 164482770,
        "sender_full_name": "oli",
        "timestamp": 1556567340
    },
    {
        "content": "<p>hehe</p>",
        "id": 164482780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567344
    },
    {
        "content": "<p>so about that comment in particular, is wrong :)</p>",
        "id": 164482791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567357
    },
    {
        "content": "<p>I guess you confused something?</p>",
        "id": 164482799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567363
    },
    {
        "content": "<p>guess you want *projection</p>",
        "id": 164482806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567370
    },
    {
        "content": "<p>but mainly you wanted me to remove the ref?</p>",
        "id": 164482817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567385
    },
    {
        "content": "<p>ah</p>",
        "id": 164482821,
        "sender_full_name": "oli",
        "timestamp": 1556567389
    },
    {
        "content": "<p>also, about the review, please do so</p>",
        "id": 164482824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567393
    },
    {
        "content": "<p>no, just don't do anything to <code>projection</code></p>",
        "id": 164482827,
        "sender_full_name": "oli",
        "timestamp": 1556567398
    },
    {
        "content": "<p>if you match on a reference, you automatically get <code>ref</code> patterns</p>",
        "id": 164482882,
        "sender_full_name": "oli",
        "timestamp": 1556567412
    },
    {
        "content": "<p>match ergonomics are cool like that</p>",
        "id": 164482895,
        "sender_full_name": "oli",
        "timestamp": 1556567420
    },
    {
        "content": "<p>I just didn't realize you already had a reference</p>",
        "id": 164482900,
        "sender_full_name": "oli",
        "timestamp": 1556567427
    },
    {
        "content": "<p>ahh yeah</p>",
        "id": 164482921,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567447
    },
    {
        "content": "<p>I guess I need to check that RFC again</p>",
        "id": 164482930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567456
    },
    {
        "content": "<p>I'm never sure when that happens</p>",
        "id": 164482934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567461
    },
    {
        "content": "<p>maybe, let me push what I have now after this change and I guess you can review</p>",
        "id": 164483020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81</a></p>",
        "id": 164483193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567689
    },
    {
        "content": "<p>I guess what I'm going to do now is trying to do Place's Projection generic</p>",
        "id": 164483220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556567708
    },
    {
        "content": "<blockquote>\n<p>the generic parameter could still default to <code>Place&lt;Box&lt;Projection&gt;&gt;</code> so most code doesn't have to be changed</p>\n</blockquote>\n<p>what do you mean by this?</p>",
        "id": 164484610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556568766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how can I make a generic parameter default to a specific type?</p>",
        "id": 164484642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556568787
    },
    {
        "content": "<p><code>struct Foo&lt;T = Bar&gt;</code></p>",
        "id": 164484659,
        "sender_full_name": "oli",
        "timestamp": 1556568808
    },
    {
        "content": "<p>might need feature gates (if not already on)</p>",
        "id": 164484662,
        "sender_full_name": "oli",
        "timestamp": 1556568813
    },
    {
        "content": "<p>ahh ok ok</p>",
        "id": 164484670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556568821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 164487087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570679
    },
    {
        "content": "<p>about this <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352321\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352321\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352321</a></p>",
        "id": 164487092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570688
    },
    {
        "content": "<p>wouldn't we want to use iterate?</p>",
        "id": 164487099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570699
    },
    {
        "content": "<p>in particular I was debating in a lot of places how much to change the code in the first commit</p>",
        "id": 164487124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570717
    },
    {
        "content": "<p>or just make the minimal changes as a low risk of getting failures and then refactor the methods</p>",
        "id": 164487158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570746
    },
    {
        "content": "<p>but yeah I guess I can do everything at once :P</p>",
        "id": 164487165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570755
    },
    {
        "content": "<p>hmm... good point</p>",
        "id": 164487222,
        "sender_full_name": "oli",
        "timestamp": 1556570773
    },
    {
        "content": "<p>about iterate?</p>",
        "id": 164487231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570781
    },
    {
        "content": "<p>about not changing too much</p>",
        "id": 164487235,
        "sender_full_name": "oli",
        "timestamp": 1556570790
    },
    {
        "content": "<p>ahh  ya</p>",
        "id": 164487237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570794
    },
    {
        "content": "<p>that's why most of the code may look very bad :P</p>",
        "id": 164487247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570812
    },
    {
        "content": "<p>that's fine</p>",
        "id": 164487251,
        "sender_full_name": "oli",
        "timestamp": 1556570819
    },
    {
        "content": "<p>you're right</p>",
        "id": 164487254,
        "sender_full_name": "oli",
        "timestamp": 1556570820
    },
    {
        "content": "<p>it's much easier to review this way</p>",
        "id": 164487268,
        "sender_full_name": "oli",
        "timestamp": 1556570829
    },
    {
        "content": "<p>I'll still leave the comments, but just keep them for addressing after everything works in the current way</p>",
        "id": 164487287,
        "sender_full_name": "oli",
        "timestamp": 1556570857
    },
    {
        "content": "<p>I guess I should add a lot of FIXME SOMECODE and message</p>",
        "id": 164487431,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570963
    },
    {
        "content": "<p>like</p>",
        "id": 164487433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570965
    },
    {
        "content": "<p><code>// FIXME PLACE2 Make this code use iterate</code></p>",
        "id": 164487456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570980
    },
    {
        "content": "<p>something like that</p>",
        "id": 164487462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556570982
    },
    {
        "content": "<p>in particular, now I was thinking, should that code use <code>iterate</code>?</p>",
        "id": 164487533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556571006
    },
    {
        "content": "<p>the problem is that iterate gives me the thing in the normal order but I need it in the reverse order</p>",
        "id": 164487653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556571095
    },
    {
        "content": "<p>actually, most of the time I need the stuff in reverse order, right?</p>",
        "id": 164487668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556571112
    },
    {
        "content": "<p>I'm not sure why iterate is giving the thing in the straight order</p>",
        "id": 164487700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556571123
    },
    {
        "content": "<p>it's 50/50</p>",
        "id": 164488739,
        "sender_full_name": "oli",
        "timestamp": 1556571909
    },
    {
        "content": "<p>you can create a second <code>iterate_rev</code> function that iterates directly for the cases that iterate in the reverse order and implement these algorithms on top of that if you want, but as a first step using a <code>loop</code> should work out well enough</p>",
        "id": 164488874,
        "sender_full_name": "oli",
        "timestamp": 1556572006
    },
    {
        "content": "<p>yeah, so with this current impl we can't make a DoubleEndedIterator we could when we use the sliced version</p>",
        "id": 164489048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572184
    },
    {
        "content": "<p>we need to have a complete separate implementation of the reverse iterator</p>",
        "id": 164489063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572200
    },
    {
        "content": "<p>yea</p>",
        "id": 164489133,
        "sender_full_name": "oli",
        "timestamp": 1556572226
    },
    {
        "content": "<p>btw: <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352504\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352504\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352504</a></p>",
        "id": 164489138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572248
    },
    {
        "content": "<p>unfortunate, but as you said, we can fix that in the future</p>",
        "id": 164489140,
        "sender_full_name": "oli",
        "timestamp": 1556572249
    },
    {
        "content": "<p>what do you want me to do there?</p>",
        "id": 164489149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572261
    },
    {
        "content": "<p>ah ups, answered on the comment</p>",
        "id": 164489269,
        "sender_full_name": "oli",
        "timestamp": 1556572332
    },
    {
        "content": "<p>I don't see how the methods are ever more concise than directly accessing the field</p>",
        "id": 164489287,
        "sender_full_name": "oli",
        "timestamp": 1556572358
    },
    {
        "content": "<p>I also have some doubts about this <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803</a></p>",
        "id": 164489452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572506
    },
    {
        "content": "<blockquote>\n<p>I don't see how the methods are ever more concise than directly accessing the field</p>\n</blockquote>\n<p>I can't access the fields, unless we want to make them public</p>",
        "id": 164489534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572570
    },
    {
        "content": "<p>which may make sense :)</p>",
        "id": 164489539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572574
    },
    {
        "content": "<p>oh lol</p>",
        "id": 164489591,
        "sender_full_name": "oli",
        "timestamp": 1556572632
    },
    {
        "content": "<p>I did not see that</p>",
        "id": 164489593,
        "sender_full_name": "oli",
        "timestamp": 1556572638
    },
    {
        "content": "<p>and about this <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803</a></p>",
        "id": 164489598,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572644
    },
    {
        "content": "<p>yea, just make them public, the enum variants were public, too</p>",
        "id": 164489601,
        "sender_full_name": "oli",
        "timestamp": 1556572647
    },
    {
        "content": "<p>yes</p>",
        "id": 164489606,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572651
    },
    {
        "content": "<p>agreed</p>",
        "id": 164489610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572653
    },
    {
        "content": "<p>about this <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352803</a></p>",
        "id": 164489614,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572657
    },
    {
        "content": "<p>it's wrong yeah</p>",
        "id": 164489620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572662
    },
    {
        "content": "<p>we want projection be none and base be local</p>",
        "id": 164489628,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572671
    },
    {
        "content": "<p>that's not equivalent</p>",
        "id": 164489636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572676
    },
    {
        "content": "<p>seems like an easy footgun, maybe just remove the method in favour of a method on <code>PlaceBase</code>?</p>",
        "id": 164489723,
        "sender_full_name": "oli",
        "timestamp": 1556572734
    },
    {
        "content": "<p>the <code>local</code> function is \"similar\" but it considers Deref too</p>",
        "id": 164489724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572734
    },
    {
        "content": "<p>yea, but that one was preexisting, right?</p>",
        "id": 164489745,
        "sender_full_name": "oli",
        "timestamp": 1556572745
    },
    {
        "content": "<p>yes</p>",
        "id": 164489759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572756
    },
    {
        "content": "<p>and yes</p>",
        "id": 164489761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572759
    },
    {
        "content": "<p>place.base.local()</p>",
        "id": 164489767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572763
    },
    {
        "content": "<p>seems better</p>",
        "id": 164489768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572765
    },
    {
        "content": "<p>so I'm done with my review pass</p>",
        "id": 164489983,
        "sender_full_name": "oli",
        "timestamp": 1556572939
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164489989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572949
    },
    {
        "content": "<p>I'm probably going to stop for today</p>",
        "id": 164490002,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572961
    },
    {
        "content": "<p>next steps I'm going to fix your comments and migrate to a generic Place</p>",
        "id": 164490022,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572978
    },
    {
        "content": "<p>then keep fixing errors</p>",
        "id": 164490053,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556572989
    },
    {
        "content": "<p>when I see the amount of errors to fix I want cry :P</p>",
        "id": 164490070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556573009
    },
    {
        "content": "<p>I feel you. The fallout from touching omnipresent datatypes like that is insane</p>",
        "id": 164490660,
        "sender_full_name": "oli",
        "timestamp": 1556573463
    },
    {
        "content": "<p>hehe, no worries :)</p>",
        "id": 164491077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556573839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> back to this</p>",
        "id": 164542864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634093
    },
    {
        "content": "<p>about your comment here <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352380\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352380\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352380</a></p>",
        "id": 164542868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634098
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 164542871,
        "sender_full_name": "oli",
        "timestamp": 1556634101
    },
    {
        "content": "<p>we are using base to return <code>StorageDeadOrDrop::LocalStorageDead</code></p>",
        "id": 164542948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634131
    },
    {
        "content": "<p>but you don't care which base</p>",
        "id": 164542979,
        "sender_full_name": "oli",
        "timestamp": 1556634162
    },
    {
        "content": "<p>you just want to use if let else?</p>",
        "id": 164542988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634173
    },
    {
        "content": "<p>this is just the <code>projections: None</code> case</p>",
        "id": 164542990,
        "sender_full_name": "oli",
        "timestamp": 1556634174
    },
    {
        "content": "<p>is that what you meant?</p>",
        "id": 164542991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634176
    },
    {
        "content": "<p>no, literally just do <code>match place.projection</code></p>",
        "id": 164543037,
        "sender_full_name": "oli",
        "timestamp": 1556634207
    },
    {
        "content": "<p>if you look at the patterns, the <code>base</code> field is pretty much ignored (there's an exhaustive match for a single arm)</p>",
        "id": 164543199,
        "sender_full_name": "oli",
        "timestamp": 1556634334
    },
    {
        "content": "<p>this is a preexisting issue, just amplified by your change</p>",
        "id": 164543215,
        "sender_full_name": "oli",
        "timestamp": 1556634345
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 164543373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634444
    },
    {
        "content": "<p>I was doing an if let Some(...) = place.projection {} else {}</p>",
        "id": 164543394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634472
    },
    {
        "content": "<p>but match is better :)</p>",
        "id": 164543397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634478
    },
    {
        "content": "<p>ah, that's what you meant. yea either is fine, but match has less churn since you don't need to swap the arms</p>",
        "id": 164543507,
        "sender_full_name": "oli",
        "timestamp": 1556634556
    },
    {
        "content": "<p>yep <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164543514,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634567
    },
    {
        "content": "<p>as you have probably seen I've been putting zero attention to the implementation of things</p>",
        "id": 164543651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634680
    },
    {
        "content": "<p>was more into make the minimal changes to make this compile and work</p>",
        "id": 164543659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634693
    },
    {
        "content": "<p>planned another pass over to refactor</p>",
        "id": 164543667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634701
    },
    {
        "content": "<p>but anyway, both ways work :)</p>",
        "id": 164543673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634706
    },
    {
        "content": "<p>just using the opportunity given that you gave some feedback to improve things in this same commit :)</p>",
        "id": 164543748,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556634730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about <a href=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352587\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352587\">https://github.com/spastorino/rust/commit/1a0142ca44944d6b624bc1bd9908304f34ce2f81#r33352587</a></p>",
        "id": 164545439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556635921
    },
    {
        "content": "<p>most of the changes are related to indentation</p>",
        "id": 164545490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556635930
    },
    {
        "content": "<p>anyway, I think your changes look better</p>",
        "id": 164545507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556635948
    },
    {
        "content": "<p>probably better to do a while let</p>",
        "id": 164545585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556636005
    },
    {
        "content": "<p>yea, I should have probably made github ignore whitespace</p>",
        "id": 164547837,
        "sender_full_name": "oli",
        "timestamp": 1556637545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> opened a very simple PR <a href=\"https://github.com/rust-lang/rust/pull/60486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60486\">https://github.com/rust-lang/rust/pull/60486</a> with things that I've found along the way and had on my place 2.0 branch</p>",
        "id": 164745277,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556831082
    },
    {
        "content": "<p>but I think it's easier if we just merge that stuff using a separate PR</p>",
        "id": 164745291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556831099
    },
    {
        "content": "<p>good idea, easier to merge, easier to review and less likely to miss something during review :D</p>",
        "id": 164776926,
        "sender_full_name": "oli",
        "timestamp": 1556872450
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 165085537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557245369
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 165085626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557245404
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 165085647,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557245413
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 165085670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557245435
    },
    {
        "content": "<p>nevermind, what I was thinking is wrong</p>",
        "id": 165086641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557246031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 165180967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557335079
    },
    {
        "content": "<p>I've reached a point where may be nice to review something</p>",
        "id": 165180989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557335092
    },
    {
        "content": "<p>librustc_mir is compiling modulo some move out of borrowed content due to the silly <code>Place</code> temp, I've created, probably gonna go over what we talked about before of making <code>PlaceProjection</code> generic</p>",
        "id": 165181152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557335205
    },
    {
        "content": "<p>I won't have time today, but send me a link and I'll look at it tomorrow</p>",
        "id": 165189738,
        "sender_full_name": "oli",
        "timestamp": 1557341291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around by any chance?</p>",
        "id": 165366429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557518481
    },
    {
        "content": "<p>am now</p>",
        "id": 165407548,
        "sender_full_name": "oli",
        "timestamp": 1557574593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 165407550,
        "sender_full_name": "oli",
        "timestamp": 1557574598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> sorry I couldn't get to you</p>",
        "id": 165541757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763102
    },
    {
        "content": "<p>XD no worries</p>",
        "id": 165541769,
        "sender_full_name": "oli",
        "timestamp": 1557763119
    },
    {
        "content": "<p>ended passing both place_base and place_projection everywhere</p>",
        "id": 165541785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763126
    },
    {
        "content": "<p>didn't go the generic way</p>",
        "id": 165541797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763141
    },
    {
        "content": "<p>well basically doing that now :)</p>",
        "id": 165541813,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763150
    },
    {
        "content": "<p>passing both things</p>",
        "id": 165541815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763153
    },
    {
        "content": "<p>building a Place in place :) is not a good idea</p>",
        "id": 165541831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763169
    },
    {
        "content": "<p>yeaaa</p>",
        "id": 165541834,
        "sender_full_name": "oli",
        "timestamp": 1557763177
    },
    {
        "content": "<p>but it's not a good idea even as an intermediate step :)</p>",
        "id": 165541844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763189
    },
    {
        "content": "<p>or well, may it is if I clone a lot of things</p>",
        "id": 165541853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763199
    },
    {
        "content": "<p>unsure</p>",
        "id": 165541855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763200
    },
    {
        "content": "<p>anyway, do you think that passing both things is ok?</p>",
        "id": 165541918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763213
    },
    {
        "content": "<p>it's ok, not ideal, but if we merge right after beta cutoff, we have 6 weeks to \"fix it\" :D</p>",
        "id": 165541975,
        "sender_full_name": "oli",
        "timestamp": 1557763244
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 165541996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763253
    },
    {
        "content": "<p>what would be ideal for you?</p>",
        "id": 165542002,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763262
    },
    {
        "content": "<p>I'm kind of in the middle of making progress and doing the right thing :)</p>",
        "id": 165542041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763286
    },
    {
        "content": "<p>of course the right thing is going to be the last picture of the work</p>",
        "id": 165542050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763298
    },
    {
        "content": "<p>no I mean, there is no ideal solution for this intermediate situation</p>",
        "id": 165542075,
        "sender_full_name": "oli",
        "timestamp": 1557763317
    },
    {
        "content": "<p>ahh ya</p>",
        "id": 165542122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763323
    },
    {
        "content": "<p>ok</p>",
        "id": 165542125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763324
    },
    {
        "content": "<p>I'd say, I'm going to change to receive both things and we can review the PR</p>",
        "id": 165542158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763346
    },
    {
        "content": "<p>and discuss from there</p>",
        "id": 165542173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763359
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 165542177,
        "sender_full_name": "oli",
        "timestamp": 1557763361
    },
    {
        "content": "<p>one question btw</p>",
        "id": 165542558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763630
    },
    {
        "content": "<p>for instance <code>prefixes</code></p>",
        "id": 165542572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763638
    },
    {
        "content": "<p>which gives back an interator over <code>Place</code></p>",
        "id": 165542594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763654
    },
    {
        "content": "<p>I wonder what to do exactly with this new setup</p>",
        "id": 165542617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763670
    },
    {
        "content": "<p>do you have a link?</p>",
        "id": 165542689,
        "sender_full_name": "oli",
        "timestamp": 1557763700
    },
    {
        "content": "<p>if I go over PlaceProjection I'm going to miss the base</p>",
        "id": 165542690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763702
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs\">https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs</a></p>",
        "id": 165542749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763749
    },
    {
        "content": "<p>but talking in general about that situation not about my code in particular because I haven't changed that yet :)</p>",
        "id": 165542773,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763767
    },
    {
        "content": "<p>I guess in the cases where some code like this one wants to get projections and base I could use trait objects or something like that</p>",
        "id": 165543029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763931
    },
    {
        "content": "<p>but unsure what you had in mind</p>",
        "id": 165543034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557763938
    },
    {
        "content": "<p>hmm... looks like you can use the same trick with a base field and a projection field?</p>",
        "id": 165543448,
        "sender_full_name": "oli",
        "timestamp": 1557764263
    },
    {
        "content": "<p>unsure what you meant</p>",
        "id": 165543538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764296
    },
    {
        "content": "<p>I'm mainly talking about what I'm going to iterate over</p>",
        "id": 165543551,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764307
    },
    {
        "content": "<p>next will return Option&lt;?&gt;</p>",
        "id": 165543570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764321
    },
    {
        "content": "<p>Ah</p>",
        "id": 165543581,
        "sender_full_name": "oli",
        "timestamp": 1557764326
    },
    {
        "content": "<p>hmm... just use a tuple over <code>PlaceBase</code> and <code>PlaceProjection</code> I guess?</p>",
        "id": 165543616,
        "sender_full_name": "oli",
        "timestamp": 1557764356
    },
    {
        "content": "<p>(reference to PlaceProjection?)</p>",
        "id": 165543645,
        "sender_full_name": "oli",
        "timestamp": 1557764389
    },
    {
        "content": "<p>yes that works, seems bad to me :P</p>",
        "id": 165543648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764390
    },
    {
        "content": "<p>or... just <code>&amp;PlaceProjection</code>?</p>",
        "id": 165543703,
        "sender_full_name": "oli",
        "timestamp": 1557764403
    },
    {
        "content": "<p>the user can fetch the base from the original place</p>",
        "id": 165543721,
        "sender_full_name": "oli",
        "timestamp": 1557764415
    },
    {
        "content": "<p>yes</p>",
        "id": 165543749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764440
    },
    {
        "content": "<p>that's always possible</p>",
        "id": 165543752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764444
    },
    {
        "content": "<p>unsure what are the uses exactly of prefixes</p>",
        "id": 165543759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764453
    },
    {
        "content": "<p>idk :D</p>",
        "id": 165543767,
        "sender_full_name": "oli",
        "timestamp": 1557764461
    },
    {
        "content": "<p>will try to go over placeprojection only then :)</p>",
        "id": 165543788,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557764478
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs#L62\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs#L62\">https://github.com/rust-lang/rust/blob/0a71d47f464cd59907cfdd69c570d3cd693404a8/src/librustc_mir/borrow_check/prefixes.rs#L62</a> could even take just an <code>&amp;Option&lt;PlaceProjection&gt;</code> instead of a <code>&amp;Place</code></p>",
        "id": 165543797,
        "sender_full_name": "oli",
        "timestamp": 1557764489
    },
    {
        "content": "<p>or whatever the exact type of the projection field is nowadays ^^</p>",
        "id": 165543868,
        "sender_full_name": "oli",
        "timestamp": 1557764525
    },
    {
        "content": "<p>All of these options and boxes are slightly confusing</p>",
        "id": 165543875,
        "sender_full_name": "oli",
        "timestamp": 1557764534
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 165546290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1557766280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> from our private chat <a href=\"https://github.com/rust-lang/rust/pull/61023\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61023\">https://github.com/rust-lang/rust/pull/61023</a></p>",
        "id": 166222247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558480699
    },
    {
        "content": "<p>for the record</p>",
        "id": 166222543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558481004
    },
    {
        "content": "<p>gonna keep sending this kind of PRs to move to iterate over recursion so the general PR <a href=\"https://github.com/rust-lang/rust/pull/60913\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913\">https://github.com/rust-lang/rust/pull/60913</a> it's a bit easier to merge and work with</p>",
        "id": 166222609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558481044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> also <a href=\"https://github.com/rust-lang/rust/pull/61030\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61030\">https://github.com/rust-lang/rust/pull/61030</a></p>",
        "id": 166234858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558497375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 166260153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558525812
    },
    {
        "content": "<p>about <a href=\"https://github.com/rust-lang/rust/pull/61030/files#r286370409\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61030/files#r286370409\">https://github.com/rust-lang/rust/pull/61030/files#r286370409</a></p>",
        "id": 166260158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558525817
    },
    {
        "content": "<p>to get rid of the continue I need to return None there but also add an else return None here <a href=\"https://github.com/rust-lang/rust/pull/61030/files#diff-7419efc1fe3c0f6f5e4231405f7c409eR403\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61030/files#diff-7419efc1fe3c0f6f5e4231405f7c409eR403\">https://github.com/rust-lang/rust/pull/61030/files#diff-7419efc1fe3c0f6f5e4231405f7c409eR403</a></p>",
        "id": 166260216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558525891
    },
    {
        "content": "<p>maybe that's better anyway</p>",
        "id": 166260223,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558525897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> have changed it and force pushed <a href=\"https://github.com/rust-lang/rust/pull/61030\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61030\">https://github.com/rust-lang/rust/pull/61030</a></p>",
        "id": 166260945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558526607
    },
    {
        "content": "<p>I don't understand why I'm getting <code>error value assigned to 'o' is never read</code></p>",
        "id": 166261019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558526661
    },
    {
        "content": "<p>there's a tiny error on what I did, still the <code>error value assigned to o</code> thing unsure</p>",
        "id": 166261716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527389
    },
    {
        "content": "<p>probably because of the <code>return</code> that I added a comment on</p>",
        "id": 166261753,
        "sender_full_name": "oli",
        "timestamp": 1558527461
    },
    {
        "content": "<p>ahh ya, hehe</p>",
        "id": 166261757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> should be ready now</p>",
        "id": 166262066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527782
    },
    {
        "content": "<p>pushed but running tests locally also, just in case</p>",
        "id": 166262081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527801
    },
    {
        "content": "<p>as you may see the None at the end and some empty things were to avoid the else of the if let and some other return None cases and just have it at the end</p>",
        "id": 166262154,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527857
    },
    {
        "content": "<p>that's I guess why the original code was in that way</p>",
        "id": 166262159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527864
    },
    {
        "content": "<p>anyway, it's more or less similar</p>",
        "id": 166262161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527871
    },
    {
        "content": "<p>:)</p>",
        "id": 166262162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558527873
    },
    {
        "content": "<p>yea, I prefer the new code you wrote, even if there are some additional <code>else</code>s</p>",
        "id": 166262209,
        "sender_full_name": "oli",
        "timestamp": 1558527950
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 166262332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558528050
    },
    {
        "content": "<p>tests are ok</p>",
        "id": 166262333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558528052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61051\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61051\">https://github.com/rust-lang/rust/pull/61051</a> doesn't work, need to check what's going on</p>",
        "id": 166296553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558550180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> pushed again <a href=\"https://github.com/rust-lang/rust/pull/61051\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61051\">https://github.com/rust-lang/rust/pull/61051</a>, still with failures :)</p>",
        "id": 166369151,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558623801
    },
    {
        "content": "<p>with the Option trick we talked about</p>",
        "id": 166369182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558623820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> another one <a href=\"https://github.com/rust-lang/rust/pull/61092\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61092\">https://github.com/rust-lang/rust/pull/61092</a></p>",
        "id": 166393029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558640551
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/pull/61093\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61093\">https://github.com/rust-lang/rust/pull/61093</a></p>",
        "id": 166393203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558640680
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61094\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61094\">https://github.com/rust-lang/rust/pull/61094</a></p>",
        "id": 166395979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558642721
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61099\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61099\">https://github.com/rust-lang/rust/pull/61099</a></p>",
        "id": 166398801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558644663
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61102\">https://github.com/rust-lang/rust/pull/61102</a></p>",
        "id": 166408500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558653042
    },
    {
        "content": "<p>that last one seems to be not ok, unsure why</p>",
        "id": 166408817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558653396
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61103\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61103\">https://github.com/rust-lang/rust/pull/61103</a></p>",
        "id": 166408822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558653399
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61104\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61104\">https://github.com/rust-lang/rust/pull/61104</a></p>",
        "id": 166409592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558654192
    },
    {
        "content": "<p>this one ^^^ is also not ok</p>",
        "id": 166409646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558654207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/61193\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61193\">https://github.com/rust-lang/rust/pull/61193</a></p>",
        "id": 166542564,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558816189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61241\">https://github.com/rust-lang/rust/pull/61241</a></p>",
        "id": 166661146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987313
    },
    {
        "content": "<p>already open :P</p>",
        "id": 166661189,
        "sender_full_name": "oli",
        "timestamp": 1558987325
    },
    {
        "content": "<p>irc pings are super fast</p>",
        "id": 166661194,
        "sender_full_name": "oli",
        "timestamp": 1558987333
    },
    {
        "content": "<p>:P</p>",
        "id": 166661197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987353
    },
    {
        "content": "<p>do you have some kind of alert on github mentions?</p>",
        "id": 166661205,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987378
    },
    {
        "content": "<p>tidy is ok and tests are ok</p>",
        "id": 166661224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987414
    },
    {
        "content": "<p>there's another one coming which I'm running all the checks :)</p>",
        "id": 166661231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987427
    },
    {
        "content": "<p>there's an irc channel on the mozilla irc that will ping reviewers</p>",
        "id": 166661312,
        "sender_full_name": "oli",
        "timestamp": 1558987514
    },
    {
        "content": "<p>although I'm not sure what I'm gonna do when the mozilla irc is shut down</p>",
        "id": 166661321,
        "sender_full_name": "oli",
        "timestamp": 1558987540
    },
    {
        "content": "<p>hehehe</p>",
        "id": 166661584,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987882
    },
    {
        "content": "<p>Zulip pings? :P</p>",
        "id": 166661588,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558987892
    },
    {
        "content": "<p>not enough automation</p>",
        "id": 166661747,
        "sender_full_name": "oli",
        "timestamp": 1558988064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61242\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61242\">https://github.com/rust-lang/rust/pull/61242</a> (auto msg)</p>",
        "id": 166661782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988131
    },
    {
        "content": "<p>:P</p>",
        "id": 166661783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988132
    },
    {
        "content": "<p>xD</p>",
        "id": 166661786,
        "sender_full_name": "oli",
        "timestamp": 1558988140
    },
    {
        "content": "<p>you were pretty close time-wise this time</p>",
        "id": 166661796,
        "sender_full_name": "oli",
        "timestamp": 1558988153
    },
    {
        "content": "<p>not even a second delay</p>",
        "id": 166661798,
        "sender_full_name": "oli",
        "timestamp": 1558988157
    },
    {
        "content": "<p>already fixed the other PR, testing just in case</p>",
        "id": 166661852,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988182
    },
    {
        "content": "<p>what's the meaning of this <a href=\"https://github.com/rust-lang/rust/pull/61242#issuecomment-496298345\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61242#issuecomment-496298345\">https://github.com/rust-lang/rust/pull/61242#issuecomment-496298345</a> ?</p>",
        "id": 166661932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988304
    },
    {
        "content": "<p>you can now <code>@bors r=oli-obk</code> without needing me to do anything</p>",
        "id": 166661964,
        "sender_full_name": "oli",
        "timestamp": 1558988360
    },
    {
        "content": "<p>since I'm going to bed soonish</p>",
        "id": 166661967,
        "sender_full_name": "oli",
        "timestamp": 1558988364
    },
    {
        "content": "<p>and this <a href=\"https://github.com/rust-lang/rust/pull/61241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61241\">https://github.com/rust-lang/rust/pull/61241</a> is fixed</p>",
        "id": 166661968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988365
    },
    {
        "content": "<blockquote>\n<p>you can now <code>@bors r=oli-obk</code> without needing me to do anything</p>\n</blockquote>\n<p>I was guessing that yeah :)</p>",
        "id": 166661976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988385
    },
    {
        "content": "<p>wouldn't be better to rollup?</p>",
        "id": 166661980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558988391
    },
    {
        "content": "<p>if anyone makes a rollup, they'll probably be included irrelevant of whether they are marked with rollup</p>",
        "id": 166662071,
        "sender_full_name": "oli",
        "timestamp": 1558988501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61247\">https://github.com/rust-lang/rust/pull/61247</a></p>",
        "id": 166663558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558990391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61248\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61248\">https://github.com/rust-lang/rust/pull/61248</a></p>",
        "id": 166664092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558991078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61249\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61249\">https://github.com/rust-lang/rust/pull/61249</a></p>",
        "id": 166665790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1558993518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is correct :P</p>",
        "id": 166701817,
        "sender_full_name": "centril",
        "timestamp": 1559038723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> should this one <a href=\"https://github.com/rust-lang/rust/pull/61249\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61249\">https://github.com/rust-lang/rust/pull/61249</a> be included?</p>",
        "id": 166705793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559042353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  I was worried it would break my rollup cause you use <code>local</code> and rename it in two different PRs</p>",
        "id": 166705812,
        "sender_full_name": "centril",
        "timestamp": 1559042394
    },
    {
        "content": "<p>I'll include it in the next rollup</p>",
        "id": 166705867,
        "sender_full_name": "centril",
        "timestamp": 1559042409
    },
    {
        "content": "<p>yeah, true :)</p>",
        "id": 166706216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559042757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/61261\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61261\">https://github.com/rust-lang/rust/pull/61261</a></p>",
        "id": 166715844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559049735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://github.com/rust-lang/rust/pull/61261\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61261\">https://github.com/rust-lang/rust/pull/61261</a> I guess I can also remove the middle commit</p>",
        "id": 166729124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559058224
    },
    {
        "content": "<p>I don't like that much doing this kind of back and forth ... hmm</p>",
        "id": 166729153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559058242
    },
    {
        "content": "<p>will be back in a bit</p>",
        "id": 166729201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559058246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://github.com/rust-lang/rust/pull/61249\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61249\">https://github.com/rust-lang/rust/pull/61249</a> and <a href=\"https://github.com/rust-lang/rust/pull/61261\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61261\">https://github.com/rust-lang/rust/pull/61261</a> both seems to be ready again to r+</p>",
        "id": 166751737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559072459
    },
    {
        "content": "<p>ci finished</p>",
        "id": 166751754,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559072466
    },
    {
        "content": "<blockquote>\n<p>I don't like that much doing this kind of back and forth ... hmm</p>\n</blockquote>\n<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> yea, not fun. But on the other hand, the code is super cleaned up now. Do you have any suggestions how to handle this better from the start?</p>",
        "id": 166789921,
        "sender_full_name": "oli",
        "timestamp": 1559114178
    },
    {
        "content": "<p>so ... current status of this for other to see ...</p>",
        "id": 168604349,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: variable does not need to be mutable\n    --&gt; src/libcore/slice/mod.rs:3182:40\n     |\n3014 | / macro_rules! iterator {\n3015 | |     (\n3016 | |         struct $name:ident -&gt; $ptr:ty,\n3017 | |         $elem:ty,\n...    |\n3182 | |             fn rposition&lt;P&gt;(&amp;mut self, mut predicate: P) -&gt; Option&lt;usize&gt; where\n     | |                                        ----^^^^^^^^^\n     | |                                        |\n     | |                                        help: remove this `mut`\n...    |\n3260 | |     }\n3261 | | }\n     | |_- in this expansion of `iterator!`\n...\n3476 |   iterator!{struct IterMut -&gt; *mut T, &amp;&#39;a mut T, mut, {mut}, {}}\n     |   -------------------------------------------------------------- in this macro invocation\n\nerror: aborting due to 59 previous errors\n</pre></div>",
        "id": 168604355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043460
    },
    {
        "content": "<p>getting 59 errors like this one, <code>variable does not need to be mutable</code></p>",
        "id": 168604381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043478
    },
    {
        "content": "<p>I'm checking again but we have checked with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and have no clue what's going on for now</p>",
        "id": 168604413,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043500
    },
    {
        "content": "<p>PR is <a href=\"https://github.com/rust-lang/rust/pull/60913\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913\">https://github.com/rust-lang/rust/pull/60913</a></p>",
        "id": 168604481,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043528
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in case you guys want to review the PR or help me debug :)</p>",
        "id": 168604492,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561043539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just opened this <a href=\"https://github.com/rust-lang/rust/pull/62096\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62096\">https://github.com/rust-lang/rust/pull/62096</a></p>",
        "id": 168861310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561391339
    },
    {
        "content": "<p>btw, just to update the <code>Place 2.0</code> status here, I've found the <code>mut</code> error displayed in the previous messages</p>",
        "id": 168861355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561391375
    },
    {
        "content": "<p>getting other errors that for now we couldn't fix</p>",
        "id": 168861382,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561391401
    },
    {
        "content": "<p><a href=\"https://gist.github.com/spastorino/7da6225651fb17ad4f0d8f48b4b32277\" target=\"_blank\" title=\"https://gist.github.com/spastorino/7da6225651fb17ad4f0d8f48b4b32277\">https://gist.github.com/spastorino/7da6225651fb17ad4f0d8f48b4b32277</a></p>",
        "id": 168861445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561391423
    },
    {
        "content": "<p>in case someone wants to take a look</p>",
        "id": 168861452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561391431
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> just opened this <a href=\"https://github.com/rust-lang/rust/pull/62096\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62096\">https://github.com/rust-lang/rust/pull/62096</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> addressed your comments</p>",
        "id": 168870543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561399051
    },
    {
        "content": "<p>thanks</p>",
        "id": 168870868,
        "sender_full_name": "centril",
        "timestamp": 1561399227
    },
    {
        "content": "<p>thanks to you :)</p>",
        "id": 168871289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561399506
    },
    {
        "content": "<p>I always have doubts about using Self vs explicitly using the type there</p>",
        "id": 168871337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561399556
    },
    {
        "content": "<p>if the block is a bit long it may be confusing to see Self but well I guess you should have a nice IDE :)</p>",
        "id": 168871445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561399605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> My philosophy on <code>Self</code> is to always use it when possible</p>",
        "id": 168874079,
        "sender_full_name": "centril",
        "timestamp": 1561401386
    },
    {
        "content": "<p>It's very nice for maintainability</p>",
        "id": 168874096,
        "sender_full_name": "centril",
        "timestamp": 1561401404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> rebased <a href=\"https://github.com/rust-lang/rust/pull/62096\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62096\">https://github.com/rust-lang/rust/pull/62096</a> after the conflict, how is the right procedure to follow after the PR was r+, there's a conflict and I've already fixed it? should I do r=oli ? should somebody else do that?</p>",
        "id": 168939922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561470506
    },
    {
        "content": "<p>r+ed</p>",
        "id": 168940136,
        "sender_full_name": "centril",
        "timestamp": 1561470632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you are doing a trivial rebase that has no impact on the idea of the PR then just r=reviewer</p>",
        "id": 168940234,
        "sender_full_name": "centril",
        "timestamp": 1561470685
    },
    {
        "content": "<p>same with tidy problems and such</p>",
        "id": 168940250,
        "sender_full_name": "centril",
        "timestamp": 1561470696
    },
    {
        "content": "<p>yeah, was exactly that</p>",
        "id": 168940689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561470962
    },
    {
        "content": "<p>zero risk</p>",
        "id": 168940698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561470965
    },
    {
        "content": "<p>thanks</p>",
        "id": 168940707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561470969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> which PR contains the code that you're having problems with, if I were to go check it out? Is it <a href=\"https://github.com/rust-lang/rust/issues/60913\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60913\">#60913</a>?</p>",
        "id": 168953813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561480527
    },
    {
        "content": "<p>yes</p>",
        "id": 168953846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561480554
    },
    {
        "content": "<p>that one</p>",
        "id": 168953850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561480555
    },
    {
        "content": "<p>I've run master and place branches and compared the debug info and it's the same</p>",
        "id": 168953902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561480573
    },
    {
        "content": "<p>was hoping to see some differences</p>",
        "id": 168953908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561480580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so I get a panic like this</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;Layout mismatch when copying!\n</pre></div>",
        "id": 168958045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561483475
    },
    {
        "content": "<p>that looks different from what you get, right <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 168959478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 168962878,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561486564
    },
    {
        "content": "<p>so this is where it's failing in case you haven't seen the thing <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/place.rs#L827\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/place.rs#L827\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/place.rs#L827</a></p>",
        "id": 168968906,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490734
    },
    {
        "content": "<p>src.layout.details is different than dest.layout.details</p>",
        "id": 168968993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490784
    },
    {
        "content": "<p>src.layout.details ...</p>",
        "id": 168969005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490796
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>            variants: Single {\n                index: 0,\n            },\n            fields: Array {\n                stride: Size {\n                    raw: 1,\n                },\n                count: 16,\n            },\n            abi: Aggregate {\n                sized: true,\n            },\n            align: AbiAndPrefAlign {\n                abi: Align {\n                    pow2: 0,\n                },\n                pref: Align {\n                    pow2: 0,\n                },\n            },\n            size: Size {\n                raw: 16,\n            },\n</pre></div>",
        "id": 168969007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490799
    },
    {
        "content": "<p>dest.layout.details ...</p>",
        "id": 168969009,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>            variants: Single {\n                index: 0,\n            },\n            fields: Union(\n                2,\n            ),\n            abi: Aggregate {\n                sized: true,\n            },\n            align: AbiAndPrefAlign {\n                abi: Align {\n                    pow2: 4,\n                },\n                pref: Align {\n                    pow2: 4,\n                },\n            },\n            size: Size {\n                raw: 16,\n            },\n</pre></div>",
        "id": 168969030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490836
    },
    {
        "content": "<p>fields Array for src and fields Union for dest</p>",
        "id": 168969050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490865
    },
    {
        "content": "<p>unsure where is that generated exactly</p>",
        "id": 168969062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561490873
    },
    {
        "content": "<p>What's the concrete union's type name</p>",
        "id": 168970141,
        "sender_full_name": "oli",
        "timestamp": 1561491647
    },
    {
        "content": "<p>Maybe you can grep that</p>",
        "id": 168970145,
        "sender_full_name": "oli",
        "timestamp": 1561491653
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 168971448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492593
    },
    {
        "content": "<p>I'm also trying with <code>-Zdump-mir=all</code></p>",
        "id": 168971462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492605
    },
    {
        "content": "<p>though that's...taking a lon time :)</p>",
        "id": 168971470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492610
    },
    {
        "content": "<p>seems like it dies after generating  rustc.raw-imp-{{impl}}-static_empty.003-018.ConstProp.before.mir</p>",
        "id": 168971543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492661
    },
    {
        "content": "<p>OOPS</p>",
        "id": 168971601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492684
    },
    {
        "content": "<p>that seems to roughly align with</p>\n<div class=\"codehilite\"><pre><span></span>query stack during panic:\n#0 [optimized_mir] processing `raw::imp::Group::static_empty`\nend of query stack\n</pre></div>",
        "id": 168971790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492807
    },
    {
        "content": "<p>though I'm not sure it's 100% right</p>",
        "id": 168971831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `raw::imp::&lt;impl at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:23:1: 140:2&gt;::static_empty`\n// source = MirSource { instance: Item(DefId(0:1389 ~ hashbrown[b7a2]::raw[0]::imp[0]::{{impl}}[0]::static_empty[0])), promoted: None }\n// pass_name = ConstProp\n// disambiguator = before\n\nfn  raw::imp::&lt;impl at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:23:1: 140:2&gt;::static_empty() -&gt; &amp;[u8] {\n    let mut _0: &amp;[u8];                   // return place in scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:32:30: 32:43\n    let mut _1: &amp;[u8; 16];               // in scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n    let mut _2: &amp;[u8; 16];               // in scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n    let mut _3: raw::imp::Group::static_empty::AlignedBytes; // in scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:19: 40:32\n    scope 1 {\n    }\n\n    bb0: {\n        StorageLive(_1);                 // bb0[0]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n        StorageLive(_2);                 // bb0[1]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n        _2 = &amp;(promoted[0]: raw::imp::Group::static_empty::AlignedBytes); // bb0[2]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n        _1 = _2;                         // bb0[3]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n        _0 = move _1 as &amp;[u8] (Pointer(Unsize)); // bb0[4]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18: 40:38\n        StorageDead(_1);                 // bb0[5]: scope 1 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:37: 40:38\n        StorageDead(_2);                 // bb0[6]: scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:41:5: 41:6\n        return;                          // bb0[7]: scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:41:6: 41:6\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:32:5: 41:6\n    }\n}\n</pre></div>",
        "id": 168971903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492918
    },
    {
        "content": "<p>there, that looks right</p>",
        "id": 168971953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492924
    },
    {
        "content": "<p>though I don't quite understand which copy is generating the problem</p>",
        "id": 168972127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493071
    },
    {
        "content": "<p>still, <code>_2 = &amp;(promoted[0]: AlignedBytes)</code> seems wrong</p>",
        "id": 168972136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493084
    },
    {
        "content": "<p>later we get this error:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: broken MIR in DefId(0:1389 ~ hashbrown[b7a2]::raw[0]::imp[0]::{{impl}}[0]::static_empty[0]) (_0 = move (_1.1: [u8; 16])): bad assignment (raw::imp::Group::static_empty::Align\\\nedBytes = [u8; 16]): NoSolution\n  --&gt; /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs:40:18\n   |\n40 |         unsafe { &amp;ALIGNED_BYTES.bytes }\n   |                  ^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 168972171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493124
    },
    {
        "content": "<p>which seems also in that same spot</p>",
        "id": 168972183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493134
    },
    {
        "content": "<blockquote>\n<p>still, <code>_2 = &amp;(promoted[0]: AlignedBytes)</code> seems wrong</p>\n</blockquote>\n<p>to be clear, it seems like a type mismatch: the RHS is &amp;AlignedBytes, I guess, and the LHS is &amp;[u8; 16]</p>",
        "id": 168972193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493148
    },
    {
        "content": "<p>I think the problem is just the type</p>",
        "id": 168972263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493189
    },
    {
        "content": "<p>if I look at <code>rustc.raw-imp-{{impl}}-static_empty-promoted[0].002-001.SimplifyCfg-qualify-consts.after.mir </code></p>",
        "id": 168972277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493202
    },
    {
        "content": "<p>it has:</p>",
        "id": 168972280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493205
    },
    {
        "content": "<p><code>_0 = move (_1.1: [u8; 16]);</code></p>",
        "id": 168972288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493214
    },
    {
        "content": "<p>which looks correct</p>",
        "id": 168972310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493227
    },
    {
        "content": "<p>however, it also has <code>let mut _0: raw::imp::Group::static_empty::AlignedBytes;</code></p>",
        "id": 168972317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493238
    },
    {
        "content": "<p>which looks wrong</p>",
        "id": 168972319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so it seems like the problem lies in the updates to the \"constant promotion\" code</p>",
        "id": 168972334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493251
    },
    {
        "content": "<p>yeah, I've reached that final conclusion a bit less informed than your procedure :P, but couldn't find what's wrong there</p>",
        "id": 168972411,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493292
    },
    {
        "content": "<p><code>src/librustc_mir/transform/promote_consts.rs </code>  or maybe <code>src/librustc_mir/transform/qualify_consts.rs </code></p>",
        "id": 168972414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493294
    },
    {
        "content": "<p>although I think that <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is the world expert on that code :)</p>",
        "id": 168972424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493302
    },
    {
        "content": "<p>well, let's see...</p>",
        "id": 168972429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493306
    },
    {
        "content": "<p>and if you talk about the type I guess the Place::ty_from calls are the suspicious ones</p>",
        "id": 168972454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493330
    },
    {
        "content": "<p>I've found in a place where I used proj when I should have used proj.base in the past</p>",
        "id": 168972474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493349
    },
    {
        "content": "<p>but right now that doesn't seem to be the case</p>",
        "id": 168972483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493356
    },
    {
        "content": "<p>OK -- I have to run at the moment</p>",
        "id": 168972506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561493389
    },
    {
        "content": "<p>this section <a href=\"https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL311\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL311\">https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL311</a> is a bit suspicious</p>",
        "id": 168972667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493501
    },
    {
        "content": "<p>and actually that's only place_base and None, no need to do the while thing</p>",
        "id": 168972910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561493672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the problem is here <a href=\"https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL312\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL312\">https://github.com/rust-lang/rust/pull/60913/files#diff-bfc61a84a9e3b48761db14b8d6772a0aL312</a></p>",
        "id": 168976402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496041
    },
    {
        "content": "<p>if instead of going to the traversing the projection and end in the base, I just use the place that's there the code compiles</p>",
        "id": 168976491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496093
    },
    {
        "content": "<p>of course that's not what the code was doing before, I was just playing with things to see what happens</p>",
        "id": 168976512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496112
    },
    {
        "content": "<p>so ... from the old code seems like I need to use just the base</p>",
        "id": 168976523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496126
    },
    {
        "content": "<p>one of my tries was to replace all that code with <code>let ty = place.base.ty(local_decls).ty;</code> but that doesn't work</p>",
        "id": 168976549,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496148
    },
    {
        "content": "<p>unsure why and what's going on</p>",
        "id": 168976554,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496153
    },
    {
        "content": "<p>hmm I think we need to do ty over place.base and call replace over place.base too</p>",
        "id": 168976844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496380
    },
    {
        "content": "<p>I'm not sure and need to go now, going to check this later/tomorrow</p>",
        "id": 168976862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561496392
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> of course</p>",
        "id": 168978504,
        "sender_full_name": "oli",
        "timestamp": 1561497573
    },
    {
        "content": "<p>The code below uses the place variable that used to be mutated by the old code</p>",
        "id": 168978524,
        "sender_full_name": "oli",
        "timestamp": 1561497596
    },
    {
        "content": "<p>so yeah, definitely, the code is compiling and tests passing right now :)</p>",
        "id": 168997406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^^</p>",
        "id": 168997452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> there are 2 new commits that I'm not sure you have checked</p>",
        "id": 168997459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520808
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/60913/commits/2422a0f368a7b575720cce3056f53562a1d8338f\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/commits/2422a0f368a7b575720cce3056f53562a1d8338f\">https://github.com/rust-lang/rust/pull/60913/commits/2422a0f368a7b575720cce3056f53562a1d8338f</a></p>",
        "id": 168997460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520809
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/60913/commits/73cf88b959b3836213c23792e50e61330042d49d\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/commits/73cf88b959b3836213c23792e50e61330042d49d\">https://github.com/rust-lang/rust/pull/60913/commits/73cf88b959b3836213c23792e50e61330042d49d</a></p>",
        "id": 168997462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520818
    },
    {
        "content": "<p>if you're ok with those I can ...</p>",
        "id": 168997474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520858
    },
    {
        "content": "<p>1. squash everything into one commit with a meaningful commit message</p>",
        "id": 168997480,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520879
    },
    {
        "content": "<p>2. <del>fix tidy</del> done in <a href=\"https://github.com/rust-lang/rust/pull/60913/commits/542081f670a258f3d9cda6e978a8b74d9dba69ca\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/commits/542081f670a258f3d9cda6e978a8b74d9dba69ca\">https://github.com/rust-lang/rust/pull/60913/commits/542081f670a258f3d9cda6e978a8b74d9dba69ca</a></p>",
        "id": 168997481,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520882
    },
    {
        "content": "<p>3. get rid of clones (?)</p>",
        "id": 168997522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520893
    },
    {
        "content": "<p>or do you have a different plan?</p>",
        "id": 168997526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561520907
    },
    {
        "content": "<p>just have rebased on top of the <code>Place::from</code> change, so the diff should be a bit smaller</p>",
        "id": 168997732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561521301
    },
    {
        "content": "<p>Yes, only 3. is left now</p>",
        "id": 169006272,
        "sender_full_name": "oli",
        "timestamp": 1561534185
    },
    {
        "content": "<blockquote>\n<p>so yeah, definitely, the code is compiling and tests passing right now :)</p>\n</blockquote>\n<p>woohoo!</p>",
        "id": 169015110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561543514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about the clones, do you think we need to pass around <code>place_base</code> and <code>place_projection</code> separately?</p>",
        "id": 169021062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561549657
    },
    {
        "content": "<p>should we use some kind of abstraction over that?</p>",
        "id": 169021099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561549682
    },
    {
        "content": "<p>hmm... an abstraction may make it easier (less churn) to move to slices</p>",
        "id": 169021141,
        "sender_full_name": "oli",
        "timestamp": 1561549708
    },
    {
        "content": "<p>what kind of abstraction are you thinking about that make things easier to move to slices?</p>",
        "id": 169021163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561549738
    },
    {
        "content": "<p>If you have a struct <code>PlaceRef&lt;'a&gt; { base: &amp;'a PlaceBase, proj: Option&lt;&amp;'a Projection&gt; }</code>, then when we move to slices we can just change the <code>proj</code> field in the definition instead of touching every use of the <code>PlaceRef</code> struct</p>",
        "id": 169021258,
        "sender_full_name": "oli",
        "timestamp": 1561549816
    },
    {
        "content": "<p>yeah, that's exactly what I was thinking about <code>PlaceRef</code></p>",
        "id": 169021382,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561549971
    },
    {
        "content": "<p>heh, we're slowly syncing our brains on place related things</p>",
        "id": 169021491,
        "sender_full_name": "oli",
        "timestamp": 1561550073
    },
    {
        "content": "<p>yeah, to be honest wasn't seeing that clearly that would make migrating to slices easier</p>",
        "id": 169021669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561550219
    },
    {
        "content": "<p>:)</p>",
        "id": 169021670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561550220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  Reading your PRs makes me want <a href=\"https://ghc.haskell.org/trac/ghc/wiki/PatternSynonyms\" target=\"_blank\" title=\"https://ghc.haskell.org/trac/ghc/wiki/PatternSynonyms\">https://ghc.haskell.org/trac/ghc/wiki/PatternSynonyms</a> so much :D</p>",
        "id": 169021904,
        "sender_full_name": "centril",
        "timestamp": 1561550406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> hehe, yeah, seems good :)</p>",
        "id": 169031085,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556815
    },
    {
        "content": "<p>what pattern repetition in particular caused you to think that?</p>",
        "id": 169031107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556835
    },
    {
        "content": "<p>I know there are a bunch, just asking for curiosity :)</p>",
        "id": 169031120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556844
    },
    {
        "content": "<p>I guess:</p>",
        "id": 169031131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556853
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">projection</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169031158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556875
    },
    {
        "content": "<p>that's one :)</p>",
        "id": 169031162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561556878
    },
    {
        "content": "<p>oh yes</p>",
        "id": 169031166,
        "sender_full_name": "centril",
        "timestamp": 1561556880
    },
    {
        "content": "<p>that one</p>",
        "id": 169031213,
        "sender_full_name": "centril",
        "timestamp": 1561556884
    },
    {
        "content": "<p>I think we'll be able to remove a bunch of these in a cleanup PR</p>",
        "id": 169031246,
        "sender_full_name": "oli",
        "timestamp": 1561556905
    },
    {
        "content": "<p><code>LocalPlace(local) =&gt;</code></p>",
        "id": 169031251,
        "sender_full_name": "centril",
        "timestamp": 1561556908
    },
    {
        "content": "<blockquote>\n<p>I think we'll be able to remove a bunch of these in a cleanup PR</p>\n</blockquote>\n<p>also true :)</p>",
        "id": 169032956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561557779
    },
    {
        "content": "<p>now that this compiles and tests are green, we were discussing a bit with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how to fix some things that I did to make the first step easier</p>",
        "id": 169036462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559856
    },
    {
        "content": "<p>in particular I've used some clones that should not end there</p>",
        "id": 169036494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559879
    },
    {
        "content": "<p>the idea was that in this same PR I'm going to put another commit to get rid of them</p>",
        "id": 169036547,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559891
    },
    {
        "content": "<p>for instance <a href=\"https://github.com/rust-lang/rust/pull/60913/files#diff-56ccd2e94681399314ad7501883bd2a5R471\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/files#diff-56ccd2e94681399314ad7501883bd2a5R471\">https://github.com/rust-lang/rust/pull/60913/files#diff-56ccd2e94681399314ad7501883bd2a5R471</a> we build a Place again there</p>",
        "id": 169036617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559938
    },
    {
        "content": "<p>we should be passing a reference to base and projection down</p>",
        "id": 169036634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559948
    },
    {
        "content": "<p>we were mentioning two possibilities</p>",
        "id": 169036658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559970
    },
    {
        "content": "<p>or we do <code>PlaceRef&lt;'a&gt; { base: &amp;'a PlaceBase, proj: Option&lt;&amp;'a Projection&gt; }</code></p>",
        "id": 169036660,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561559975
    },
    {
        "content": "<p>or the other alternative is to keep using <code>Place</code> and just intern the fields</p>",
        "id": 169036770,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561560020
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in particular but @others are welcome to give some thoughts :)</p>",
        "id": 169036780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1561560033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the new bootstrap compiler is being changed in a PR that's being tested by bors right now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 173223559,
        "sender_full_name": "centril",
        "timestamp": 1565803391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> great, so I can get rid of a lot of weird things due to now being able to use slice patterns :)</p>",
        "id": 173228885,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1565807195
    },
    {
        "content": "<p>yea</p>",
        "id": 173228898,
        "sender_full_name": "centril",
        "timestamp": 1565807205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> hopefully slice patterns will be stable soon</p>",
        "id": 173228908,
        "sender_full_name": "centril",
        "timestamp": 1565807217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  good news; the new bootstrap compiler is out <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 173273313,
        "sender_full_name": "centril",
        "timestamp": 1565857054
    },
    {
        "content": "<p>Yay</p>",
        "id": 173273985,
        "sender_full_name": "oli",
        "timestamp": 1565857975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> fixes for Centril comments <a href=\"https://github.com/rust-lang/rust/pull/63874\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63874\">https://github.com/rust-lang/rust/pull/63874</a></p>",
        "id": 174063385,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566698886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> reviewed</p>",
        "id": 174063406,
        "sender_full_name": "centril",
        "timestamp": 1566698997
    },
    {
        "content": "<p>cool</p>",
        "id": 174063464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699059
    },
    {
        "content": "<p>btw, I've just pushed the main one</p>",
        "id": 174063469,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699066
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/63420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63420\">https://github.com/rust-lang/rust/pull/63420</a></p>",
        "id": 174063470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> we may want to run perf again I guess</p>",
        "id": 174063473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699078
    },
    {
        "content": "<p>but max-rss is very bad in some cases</p>",
        "id": 174063476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699090
    },
    {
        "content": "<p>I'd leave the judge up to you but we can wait the merge and keep working on interning the thing in the same PR, new commits</p>",
        "id": 174063479,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566699113
    },
    {
        "content": "<p>Heh kekkac obviously</p>",
        "id": 174063767,
        "sender_full_name": "oli",
        "timestamp": 1566699698
    },
    {
        "content": "<p>That's like the mother of all mir Bodies</p>",
        "id": 174063769,
        "sender_full_name": "oli",
        "timestamp": 1566699712
    },
    {
        "content": "<p>Maybe we should just use smallvec&lt;Elem&gt; instead of Box&lt;[Elem]&gt;</p>",
        "id": 174064054,
        "sender_full_name": "oli",
        "timestamp": 1566700274
    },
    {
        "content": "<p>Not sure if that helps</p>",
        "id": 174064055,
        "sender_full_name": "oli",
        "timestamp": 1566700282
    },
    {
        "content": "<p>hehehe</p>",
        "id": 174064173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566700508
    },
    {
        "content": "<p>just force pushed again, there was a tidy error</p>",
        "id": 174064174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566700520
    },
    {
        "content": "<p>ran perf again, things are not going to change much I guess</p>",
        "id": 174064232,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566700652
    },
    {
        "content": "<p>didn't try with smallvec</p>",
        "id": 174064235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566700662
    },
    {
        "content": "<p>do you think it worth? or should we go directly to interning?</p>",
        "id": 174064236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566700677
    },
    {
        "content": "<p>Yea we could just intern directly. Keep that in a different commit tho</p>",
        "id": 174065226,
        "sender_full_name": "oli",
        "timestamp": 1566702741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if there's anything I can help with, please let me know! I'd love to get this merged <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 174148724,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> probably not for now, but I guess we can talk and I'm 100% open to pair on this if you want</p>",
        "id": 174149301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566831823
    },
    {
        "content": "<p>I think right now things are not very parallelizable</p>",
        "id": 174149317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566831840
    },
    {
        "content": "<p>Well, I don't want to slow you down</p>",
        "id": 174149321,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831842
    },
    {
        "content": "<p>But if you hit a point where you could hand something off, feel free to ping me</p>",
        "id": 174149386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831867
    },
    {
        "content": "<p>sure</p>",
        "id": 174149413,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566831894
    },
    {
        "content": "<p>also, first I may need to finish something that it's 95% done and then we can talk I guess</p>",
        "id": 174149451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1566831915
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 174149469,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, when you get a chance could you take a look at <a href=\"https://github.com/rust-lang/rust/issues/64005\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64005\">#64005</a>?</p>",
        "id": 174843536,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567559545
    },
    {
        "content": "<p>yes, gonna try to do it tomorrow</p>",
        "id": 174850243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1567571040
    },
    {
        "content": "<p>sorry about that, was very busy after RustConf</p>",
        "id": 174850284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1567571050
    },
    {
        "content": "<p>np</p>",
        "id": 174850319,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567571121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> actually, just did it :)</p>",
        "id": 174850454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1567571398
    },
    {
        "content": "<p>Thanks! Yeah the name is a little awkward, especially since using it results in a lot of <code>!is_indirect()</code>. <code>is_direct</code> is too opaque, and I think <code>has_deref_projection</code>is maybe too literal? I originally had a method called <code>base_direct</code> which returned <code>Some(base)</code> if there were no deref projections.</p>",
        "id": 174850773,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567571920
    },
    {
        "content": "<p>but now that you don't need to traverse projections to get to the base, that seems a bit silly</p>",
        "id": 174850792,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567571981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ^</p>",
        "id": 174850859,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567572073
    },
    {
        "content": "<p>I kind of like <code>contains_indirection</code> or <code>contains_deref</code>. <code>is_indirection</code> makes it seem like it only returns <code>true</code> for  <code>*x</code>, not (*x.field)[2]. <code>is_indirect</code> is nice because it's short and more abstract.</p>",
        "id": 174852311,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567574501
    },
    {
        "content": "<p>this other bit <a href=\"https://github.com/rust-lang/rust/pull/63420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63420\">https://github.com/rust-lang/rust/pull/63420</a> is in</p>",
        "id": 175657508,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> what are you currently working on? :)</p>",
        "id": 175657611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/pull/64419\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64419\">https://github.com/rust-lang/rust/pull/64419</a></p>",
        "id": 175657638,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568403675
    },
    {
        "content": "<p>I think it will be ready to merge sometime this weekend.</p>",
        "id": 175657655,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568403688
    },
    {
        "content": "<p>cool</p>",
        "id": 175657790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403809
    },
    {
        "content": "<p>What's the next step for Places?</p>",
        "id": 175657885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568403883
    },
    {
        "content": "<p>my pr is going to give you some pains :P</p>",
        "id": 175657930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403932
    },
    {
        "content": "<p>well, not that many I think</p>",
        "id": 175657940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403938
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/pull/64419/files#diff-9e103702275cbef342c2decd3395bf3bL285\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64419/files#diff-9e103702275cbef342c2decd3395bf3bL285\">https://github.com/rust-lang/rust/pull/64419/files#diff-9e103702275cbef342c2decd3395bf3bL285</a> doesn't exist anymore</p>",
        "id": 175657944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403947
    },
    {
        "content": "<blockquote>\n<p>What's the next step for Places?</p>\n</blockquote>\n<p>there are not big plans yet afaik</p>",
        "id": 175657955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403960
    },
    {
        "content": "<p>gonna do little things meanwhile</p>",
        "id": 175658005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568403973
    },
    {
        "content": "<p>I actually got rid of that call entirely so that should be easy to merge.</p>",
        "id": 175658024,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568403997
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 175658029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568404004
    },
    {
        "content": "<p>I might play around with this <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Place.20size/near/171701734\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Place.20size/near/171701734\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Place.20size/near/171701734</a> unless that's one of the things you were going to look at</p>",
        "id": 175658283,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568404220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> that would be the big next step</p>",
        "id": 175660130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568405602
    },
    {
        "content": "<p>but we have talked about it with Oli and he said that's better to put that on hold until there's a design meeting</p>",
        "id": 175660154,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568405633
    },
    {
        "content": "<p>I guess once we do that we could talk about it?</p>",
        "id": 175660233,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568405696
    },
    {
        "content": "<p>I want to do that as next step, yeah</p>",
        "id": 175660246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568405702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://github.com/rust-lang/rust/pull/64518#discussion_r324852427\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64518#discussion_r324852427\">https://github.com/rust-lang/rust/pull/64518#discussion_r324852427</a> what idiom exactly are you referring to?</p>",
        "id": 175845682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">projection</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">proj_base</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">..,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj_base</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>==&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">projection</span><span class=\"p\">.</span><span class=\"n\">stuff</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cursor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proj_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or some such</p>",
        "id": 175845843,
        "sender_full_name": "centril",
        "timestamp": 1568663314
    },
    {
        "content": "<p>or just <code>projection.stuff(|proj_base, elem| { ... })</code> since <code>cursor</code> isn't used in the loops</p>",
        "id": 175846050,
        "sender_full_name": "centril",
        "timestamp": 1568663473
    },
    {
        "content": "<p>what we want is ...</p>",
        "id": 175846084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663494
    },
    {
        "content": "<p><code>for (proj_base, elem) in place.projection.iter()</code> :)</p>",
        "id": 175846095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663503
    },
    {
        "content": "<p>yea ok</p>",
        "id": 175846171,
        "sender_full_name": "centril",
        "timestamp": 1568663545
    },
    {
        "content": "<p>the problem is that this is a slice</p>",
        "id": 175846186,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663563
    },
    {
        "content": "<p>so we may need to go and do ...</p>",
        "id": 175846244,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663632
    },
    {
        "content": "<p><code>for (proj_base, elem) in place.proj_iter()</code></p>",
        "id": 175846250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663640
    },
    {
        "content": "<p>or something like that</p>",
        "id": 175846291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663647
    },
    {
        "content": "<p>to be honest unsure if worth all this</p>",
        "id": 175846301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663661
    },
    {
        "content": "<p>but happy to do what you guys like</p>",
        "id": 175846302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663665
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 175846306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well the only difference there is that I've baked the for-loop into <code>.stuff</code></p>",
        "id": 175846307,
        "sender_full_name": "centril",
        "timestamp": 1568663672
    },
    {
        "content": "<p>(cause I usually like to bake in imperative control flow and restrict it... /functional-programmer)</p>",
        "id": 175846353,
        "sender_full_name": "centril",
        "timestamp": 1568663714
    },
    {
        "content": "<p>yeah, I've seen that already from your comments on PRs <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 175846381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663744
    },
    {
        "content": "<p>it's fine</p>",
        "id": 175846388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663748
    },
    {
        "content": "<p>but I kind of disagree :)</p>",
        "id": 175846395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663754
    },
    {
        "content": "<p>I guess is more correct to define an iterator that allows you to iterate over elem but carrying at the same time the previous elements</p>",
        "id": 175846453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663779
    },
    {
        "content": "<blockquote>\n<p>but I kind of disagree :)</p>\n</blockquote>\n<p>I mean, on a given point more or less I don't care that much, but if you both want me to do that, happy to change the PR</p>",
        "id": 175846511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663843
    },
    {
        "content": "<p>I didn't want to have the previous things where we were carrying that index which is a bit error-prone</p>",
        "id": 175846526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568663862
    },
    {
        "content": "<blockquote>\n<p>I mean, on a given point more or less I don't care that much, but if you both want me to do that, happy to change the PR</p>\n</blockquote>\n<p>It's fine; I mostly wanted less duplication but it seems you'll be fixing that in another way later</p>",
        "id": 175846628,
        "sender_full_name": "centril",
        "timestamp": 1568663919
    }
]