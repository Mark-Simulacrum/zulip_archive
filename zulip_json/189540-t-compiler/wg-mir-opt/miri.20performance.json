[
    {
        "content": "<p>Now that  I'm getting close to publishing my REPL project (based on miri of course), I'm wondering what we can do to speed up its performance if we only care about execution  and not using miri as a validator / bug-finder. I'm thinking:<br>\na) <code>-Zmir-opt-level=3</code> (this  is default, so just remove the <code>=0</code> from the args that miri sets?)<br>\nb) remove assertions in lots of places<br>\nc) other things?</p>",
        "id": 176243989,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569031052
    },
    {
        "content": "<p>removing asserts and similar things only makes sense after benchmarking</p>",
        "id": 176262466,
        "sender_full_name": "oli",
        "timestamp": 1569068136
    },
    {
        "content": "<p>but in general, you won't be able to do much, miri just does a lot of work</p>",
        "id": 176262472,
        "sender_full_name": "oli",
        "timestamp": 1569068156
    },
    {
        "content": "<p>you can disable validation for the repl</p>",
        "id": 176262489,
        "sender_full_name": "oli",
        "timestamp": 1569068162
    },
    {
        "content": "<p>that will give you a 2x boost</p>",
        "id": 176262514,
        "sender_full_name": "oli",
        "timestamp": 1569068165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay, fair enough. will have a look, thanks</p>",
        "id": 176267116,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569076216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> BTW, I'm right in saying that mir-opt-level=0 means no optimisation?</p>",
        "id": 176272511,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569085428
    },
    {
        "content": "<p>i.e., point a abovee</p>",
        "id": 176272516,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569085440
    },
    {
        "content": "<p>a 2x boost probably still means something like 500x slower than a release build</p>",
        "id": 176305586,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569149879
    },
    {
        "content": "<p>yeah, though if we can work towards a 100x slowdown, that would be decent I think (if you have any ideas, let me know)</p>",
        "id": 176322643,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569179502
    },
    {
        "content": "<p>eventually, would be nice to do what the ghci does and run extern crates as native code.</p>",
        "id": 176322684,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569179525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span></p>",
        "id": 176322688,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569179528
    },
    {
        "content": "<p>not really, what would have a big impact is moving towards jitting the code that's used in the repl</p>",
        "id": 176323319,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180732
    },
    {
        "content": "<p>but the hardware your repl runs on is actually miri</p>",
        "id": 176323330,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I don't get how you could JIT it, given it's interpreted...</p>",
        "id": 176333934,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569202363
    },
    {
        "content": "<p>unless I misunderstand you entirely...</p>",
        "id": 176333938,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569202381
    },
    {
        "content": "<p>no you didn't, because the repl is based on miri, you are limited to the interpreter</p>",
        "id": 176342354,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218360
    },
    {
        "content": "<p>you'd need to bypass the interpreter to make it faster</p>",
        "id": 176342431,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218468
    },
    {
        "content": "<p>If the only thing the user is allowed to enter in the REPL is <code>const fn</code>s, one could try to treat them all as intrinsics</p>",
        "id": 176342559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218677
    },
    {
        "content": "<p>compiling them to machine code, running them, and then passing their result to the interpreter</p>",
        "id": 176342575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218717
    },
    {
        "content": "<p>for anything more complicated I don't see how it could work</p>",
        "id": 176342583,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218743
    },
    {
        "content": "<p>hmm yeah</p>",
        "id": 176412794,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569275283
    },
    {
        "content": "<p>seems no point even using miri if we go that route though</p>",
        "id": 176412804,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569275294
    },
    {
        "content": "<p>this should suffice for now</p>",
        "id": 176412807,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569275297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Okay, I went through the cosmetic changes and did my best to only keep the ones that were nearby to the functionality changes. Hopefully that conforms to the policy better now, and doesn't bother you. Please note that I'm mainly just bad at judging these things (I look at the matter through a very different lens to you), and time may have led me to slip back more into old habits â€” I am not intentionally trying to piss people off, but you're entitled to your own judgement anyway... Well, I'm going to presume this matter is now basically resolved, and collapse both of our comments simply to avoid noise and people seeing contention which is really only distracting from the actual PR at this point. That said, if you'd like to highlight in brief anything I missed, feel free to point that out to me there or here. Thanks.</p>",
        "id": 176849019,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569718890
    },
    {
        "content": "<p>Thanks, looks great now. I just tried to do a normal review, though the github interface just ignores me adding comments to that PR. I'll leave a review here then I guess</p>",
        "id": 176906857,
        "sender_full_name": "oli",
        "timestamp": 1569825328
    },
    {
        "content": "<p>You added an <code>interp_tag</code> field to ast and hir <code>Local</code>, is anything speaking against just making it a regular <code>rustc</code> attribute?</p>",
        "id": 176906907,
        "sender_full_name": "oli",
        "timestamp": 1569825376
    },
    {
        "content": "<p>wrt <code>interp_user_fn</code>, why does this need to be part of the compiler-API? I mean only the query, adding the attribute is obviously fine. Couldn't you just run the query code in your interpreter without having to add any additional logic to rustc?</p>",
        "id": 176906997,
        "sender_full_name": "oli",
        "timestamp": 1569825528
    },
    {
        "content": "<p>the <code>interp_mode</code> compiler flag seems to be entirely unused, what do you use it for?</p>",
        "id": 176907027,
        "sender_full_name": "oli",
        "timestamp": 1569825582
    },
    {
        "content": "<p>the doc comment change on <code>stderr</code> is odd, you're mentioning <code>true</code>, but it's not a boolean</p>",
        "id": 176907594,
        "sender_full_name": "oli",
        "timestamp": 1569826348
    },
    {
        "content": "<p>Can you explain the <code>interp_user_fn</code> parsing scheme that you implemented? I'm not sure how the repl is going to use it</p>",
        "id": 176907918,
        "sender_full_name": "oli",
        "timestamp": 1569826802
    },
    {
        "content": "<p>Weird. Anyway, review here is fine.</p>",
        "id": 176941561,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856391
    },
    {
        "content": "<blockquote>\n<p>You added an <code>interp_tag</code> field to ast and hir <code>Local</code>, is anything speaking against just making it a regular <code>rustc</code> attribute?</p>\n</blockquote>\n<p>Mainly convenience. Also, semantically it felt more  correct to have it as an inherent property of the <code>Local</code>, since diagnostics for borrowck make use of it. (You can see this in my personal branch for all the changes, though I admit it's a huge commit.)</p>",
        "id": 176941904,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856579
    },
    {
        "content": "<p>Hmm</p>",
        "id": 176941965,
        "sender_full_name": "oli",
        "timestamp": 1569856623
    },
    {
        "content": "<p>In that case I think it would really be best to use an attribute</p>",
        "id": 176941999,
        "sender_full_name": "oli",
        "timestamp": 1569856645
    },
    {
        "content": "<p>you can create a convenience wrapper out of tree for extracting your properties from attributes so you don't have much usability regression (calling a function instead of accessing a field)</p>",
        "id": 176942015,
        "sender_full_name": "oli",
        "timestamp": 1569856657
    },
    {
        "content": "<blockquote>\n<p>wrt <code>interp_user_fn</code>, why does this need to be part of the compiler-API? I mean only the query, adding the attribute is obviously fine. Couldn't you just run the query code in your interpreter without having to add any additional logic to rustc?</p>\n</blockquote>\n<p>it could be except that ty pretty-printing makes use of it in two places (in a PR to come) to change the way tys are pretty-printed in diagnostics and generally</p>",
        "id": 176942123,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856707
    },
    {
        "content": "<blockquote>\n<p>the doc comment change on <code>stderr</code> is odd, you're mentioning <code>true</code>, but it's not a boolean</p>\n</blockquote>\n<p>I'll have a look. Could be a mistake on my part.</p>",
        "id": 176942147,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856731
    },
    {
        "content": "<blockquote>\n<p>Can you explain the <code>interp_user_fn</code> parsing scheme that you implemented? I'm not sure how the repl is going to use it</p>\n</blockquote>\n<p>Basically, I do this in the REPL:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">compiler</span><span class=\"p\">.</span><span class=\"n\">set_interp_user_fn</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">InterpUserFn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">placeholder</span>: <span class=\"s\">&quot;user_body_placeholder&quot;</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">body</span>: <span class=\"nc\">Steal</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">user_body</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// user_body is independently-parsed `P&lt;Block&gt;`</span>\n<span class=\"w\">    </span><span class=\"p\">}));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176942309,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856843
    },
    {
        "content": "<p>hmm</p>",
        "id": 176942360,
        "sender_full_name": "oli",
        "timestamp": 1569856887
    },
    {
        "content": "<p>if we had a querified parser you could just override the body parsing query <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> but we don't</p>",
        "id": 176942388,
        "sender_full_name": "oli",
        "timestamp": 1569856914
    },
    {
        "content": "<p>yeah...</p>",
        "id": 176942391,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856920
    },
    {
        "content": "<p>I tried a lot of different approaches here</p>",
        "id": 176942454,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856934
    },
    {
        "content": "<p>this was the least painful one I ended up with</p>",
        "id": 176942468,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856939
    },
    {
        "content": "<p>and not too intrusive to the compiler codebase</p>",
        "id": 176942478,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856945
    },
    {
        "content": "<p><em>shrug</em></p>",
        "id": 176942489,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856949
    },
    {
        "content": "<p>could you create a proc macro instead?</p>",
        "id": 176942494,
        "sender_full_name": "oli",
        "timestamp": 1569856952
    },
    {
        "content": "<p>heh I thought about that</p>",
        "id": 176942509,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856959
    },
    {
        "content": "<p>I wasn't sure how to go about that really.</p>",
        "id": 176942563,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569856995
    },
    {
        "content": "<p>a built-in macro you mean, right?</p>",
        "id": 176942569,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857000
    },
    {
        "content": "<p>no</p>",
        "id": 176942572,
        "sender_full_name": "oli",
        "timestamp": 1569857002
    },
    {
        "content": "<p>rather than a proc macro per se.</p>",
        "id": 176942573,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857003
    },
    {
        "content": "<p>hmm</p>",
        "id": 176942577,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857006
    },
    {
        "content": "<p>they run in separate processes though</p>",
        "id": 176942589,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857017
    },
    {
        "content": "<p>just a proc macro, and it's the only thing in the body of your function</p>",
        "id": 176942596,
        "sender_full_name": "oli",
        "timestamp": 1569857020
    },
    {
        "content": "<p>then generate the appropriate body on the fly</p>",
        "id": 176942616,
        "sender_full_name": "oli",
        "timestamp": 1569857032
    },
    {
        "content": "<p>hmm</p>",
        "id": 176942624,
        "sender_full_name": "oli",
        "timestamp": 1569857036
    },
    {
        "content": "<p>I have to then feed it to the proc macrothough</p>",
        "id": 176942685,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857046
    },
    {
        "content": "<p>which is very awkward as I see it</p>",
        "id": 176942691,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857049
    },
    {
        "content": "<p>built-in macro... maybe</p>",
        "id": 176942701,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857056
    },
    {
        "content": "<p>the repl could open a tcp server hosting the current body and the proc macro could fetch it</p>",
        "id": 176942747,
        "sender_full_name": "oli",
        "timestamp": 1569857090
    },
    {
        "content": "<p>this is similar to what I've done in priroda</p>",
        "id": 176942773,
        "sender_full_name": "oli",
        "timestamp": 1569857099
    },
    {
        "content": "<p>and requires no rustc parser changes</p>",
        "id": 176942789,
        "sender_full_name": "oli",
        "timestamp": 1569857108
    },
    {
        "content": "<p>oh my.</p>",
        "id": 176942810,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857117
    },
    {
        "content": "<p>hmm</p>",
        "id": 176942811,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857118
    },
    {
        "content": "<p>I agree that in some sense it's cleaner...</p>",
        "id": 176942822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857126
    },
    {
        "content": "<p>Anything we put into the compiler that isn't used in the compiler is always very endangered of breaking</p>",
        "id": 176942871,
        "sender_full_name": "oli",
        "timestamp": 1569857157
    },
    {
        "content": "<p>(or getting removed because someone notices dead code)</p>",
        "id": 176942927,
        "sender_full_name": "oli",
        "timestamp": 1569857167
    },
    {
        "content": "<p>but a) a built-in macro would be far cleaner, b) we may be taking a performance hit for that?, c) support for an interpreter is belongs <em>somewhat</em> more naturally in the rustc codebase.</p>",
        "id": 176942953,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857184
    },
    {
        "content": "<p>yeah</p>",
        "id": 176942957,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857184
    },
    {
        "content": "<p>it's why I've tried to comment things like this</p>",
        "id": 176942969,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857194
    },
    {
        "content": "<p>I'm not sure about C</p>",
        "id": 176942986,
        "sender_full_name": "oli",
        "timestamp": 1569857205
    },
    {
        "content": "<p>that's mainly the question</p>",
        "id": 176943013,
        "sender_full_name": "oli",
        "timestamp": 1569857222
    },
    {
        "content": "<p>you can argue both ways</p>",
        "id": 176943018,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857224
    },
    {
        "content": "<p>and I can't answer it</p>",
        "id": 176943023,
        "sender_full_name": "oli",
        "timestamp": 1569857225
    },
    {
        "content": "<p>hmm</p>",
        "id": 176943100,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857269
    },
    {
        "content": "<p>Basically such changes need to be signed off by the compiler team and it may take some time before any decision is made</p>",
        "id": 176943250,
        "sender_full_name": "oli",
        "timestamp": 1569857332
    },
    {
        "content": "<p>anyway, you sure about the interp tag going in attrs even though it's used by borrowck diagnostics?</p>",
        "id": 176943271,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857343
    },
    {
        "content": "<p>okay</p>",
        "id": 176943291,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857357
    },
    {
        "content": "<p>I've always avoided putting things into the compiler if just clippy or miri need them</p>",
        "id": 176943332,
        "sender_full_name": "oli",
        "timestamp": 1569857382
    },
    {
        "content": "<p>maybe we should ask Niko about this?</p>",
        "id": 176943355,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857401
    },
    {
        "content": "<blockquote>\n<p>anyway, you sure about the interp tag going in attrs even though it's used by borrowck diagnostics?</p>\n</blockquote>\n<p>oh you aren't using it in the interpreter, you're modifying rustc diagnostics to know about the interpreter?</p>",
        "id": 176943454,
        "sender_full_name": "oli",
        "timestamp": 1569857449
    },
    {
        "content": "<p>just so we don't waste time going down one particular route</p>",
        "id": 176943472,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857457
    },
    {
        "content": "<p>precisely, yes</p>",
        "id": 176943486,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857464
    },
    {
        "content": "<p>the interpreter <em>sets</em> it based on previous sessions</p>",
        "id": 176943495,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857469
    },
    {
        "content": "<p>but then doesn't do anything with it (except serialise it)</p>",
        "id": 176943514,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857481
    },
    {
        "content": "<blockquote>\n<p>just so we don't waste time going down one particular route</p>\n</blockquote>\n<p>you have given the definition of \"this needs an RFC\" :P</p>",
        "id": 176943535,
        "sender_full_name": "oli",
        "timestamp": 1569857499
    },
    {
        "content": "<p>well</p>",
        "id": 176943567,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857518
    },
    {
        "content": "<p>perhaps that one particular part of it</p>",
        "id": 176943614,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857525
    },
    {
        "content": "<p>preventing huge wastes of time is one reason we have RFCs, because otherwise ppl spend months on a PR, open it and then the design may need rework</p>",
        "id": 176943660,
        "sender_full_name": "oli",
        "timestamp": 1569857557
    },
    {
        "content": "<p>Centril and others seemed averse to it however (obviously I want to avoid that effort and delay, especially given how much time I've already spent on  it)</p>",
        "id": 176943666,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857559
    },
    {
        "content": "<p>I mean, this doesn't change the user-facing surface</p>",
        "id": 176943693,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857574
    },
    {
        "content": "<p>it's all the rustc interface</p>",
        "id": 176943714,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857586
    },
    {
        "content": "<p>we can make a design compiler team meeting about it</p>",
        "id": 176943724,
        "sender_full_name": "oli",
        "timestamp": 1569857592
    },
    {
        "content": "<p>yes</p>",
        "id": 176943739,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857599
    },
    {
        "content": "<p>if we can get by with one of those rather than a full-blown RFC, and be sure to get Niko's (and maybe mw's) input, then that would be much better.</p>",
        "id": 176943777,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857628
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>anyway, you sure about the interp tag going in attrs even though it's used by borrowck diagnostics?</p>\n</blockquote>\n<p>oh you aren't using it in the interpreter, you're modifying rustc diagnostics to know about the interpreter?</p>\n</blockquote>\n<p>anyway does that mean you're okay with it as-is, as opposed to moving it into the attributes vec (which is just slightly awkward I think)?</p>",
        "id": 176943921,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857705
    },
    {
        "content": "<p>if we do it in the compiler and need it in the compiler yes, but I'm not sure why you're modifing borrowck diagnostics for a REPL ;)</p>",
        "id": 176943969,
        "sender_full_name": "oli",
        "timestamp": 1569857737
    },
    {
        "content": "<p>it's basically \"faking\" a move or lack of initialization for a local. the changes are very localised in rustc AFAIR. it was the best/ least intrusive way I could see of accomplishing this whilst having all the code dealing with multiple eval sessions in the REPL. :-)</p>",
        "id": 176944273,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569857918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh, and <code>interp_mode</code>is used in a few random places. I can't summarise easily, so I recommend you grep the last commit of my personal branch if you're curious.</p>",
        "id": 176944381,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858002
    },
    {
        "content": "<p>fixed the doc comment BTW</p>",
        "id": 176944423,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858014
    },
    {
        "content": "<p>as far as I can tell, the outstanding issue is the one of the parsing placeholder vs. proc macro vs. built-in macro, which shall be discussed at a compiler design meeting? once that is resolved (and implementation changed if need be), we're basically good to merge?</p>",
        "id": 176944500,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858068
    },
    {
        "content": "<blockquote>\n<p>it's basically \"faking\" a move or lack of initialization for a local. the changes are very localised in rustc AFAIR. it was the best/ least intrusive way I could see of accomplishing this whilst having all the code dealing with multiple eval sessions in the REPL. :-)</p>\n</blockquote>\n<p>oh so it doesn't error if you just type <code>let x;</code> ?</p>",
        "id": 176944519,
        "sender_full_name": "oli",
        "timestamp": 1569858083
    },
    {
        "content": "<p>yeah. well, I want genuinely uninitialised variables to still give compiler errors, but ones initialised in some previous eval  session <em>not</em> to error. similarly, I want ones initialised in a previous session then moved to error about being moved, not either work or fail with \"uninitialized\" (both of which are confusing).</p>",
        "id": 176944740,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858234
    },
    {
        "content": "<p>Well... the design meeting should figure out whether we're okay with sprinkling REPL stuff into the compiler</p>",
        "id": 176944876,
        "sender_full_name": "oli",
        "timestamp": 1569858311
    },
    {
        "content": "<p>not just the one specific case</p>",
        "id": 176944886,
        "sender_full_name": "oli",
        "timestamp": 1569858320
    },
    {
        "content": "<p>I agree</p>",
        "id": 176945057,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858424
    },
    {
        "content": "<p>but hopefully you appreciate that I've already tried to minimise it!</p>",
        "id": 176945069,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858433
    },
    {
        "content": "<p>and that <em>some</em> stuff will be unavoidable</p>",
        "id": 176945076,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858438
    },
    {
        "content": "<p>I think you'll agree that the <em>main</em> concrete point of discussion is the above one, in anycase?</p>",
        "id": 176945103,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858463
    },
    {
        "content": "<p>well, idk, I haven't seen the rest of the changes ^^</p>",
        "id": 176945387,
        "sender_full_name": "oli",
        "timestamp": 1569858639
    },
    {
        "content": "<p>yeah, I mean for this PR haha</p>",
        "id": 176945402,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858651
    },
    {
        "content": "<p>well... it's hard to decide, without knowing the design you've come up with</p>",
        "id": 176945442,
        "sender_full_name": "oli",
        "timestamp": 1569858679
    },
    {
        "content": "<p>that's what I mean, we should discuss your entire design</p>",
        "id": 176945452,
        "sender_full_name": "oli",
        "timestamp": 1569858686
    },
    {
        "content": "<p>and whether that is how it should happen</p>",
        "id": 176945460,
        "sender_full_name": "oli",
        "timestamp": 1569858692
    },
    {
        "content": "<p>future ones, you'll see in time... or can look at my personal branch like I said. but it will be good to get the compiler team's policy on this before I factor out new PRs from the above branch</p>",
        "id": 176945462,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569858694
    },
    {
        "content": "<p>it's a similar situtation to <a href=\"https://internals.rust-lang.org/t/migrating-rustc-interface-queries-to-proper-librustc-queries/10433\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/migrating-rustc-interface-queries-to-proper-librustc-queries/10433\">https://internals.rust-lang.org/t/migrating-rustc-interface-queries-to-proper-librustc-queries/10433</a></p>",
        "id": 176945581,
        "sender_full_name": "oli",
        "timestamp": 1569858755
    },
    {
        "content": "<p>loads of work being done without the reviewers having a picture of the overall design</p>",
        "id": 176945614,
        "sender_full_name": "oli",
        "timestamp": 1569858777
    },
    {
        "content": "<p>think about it this way. What if you had opened a PR with just the query saying you need it later. How should a reviewer decide that that would be ok to merge</p>",
        "id": 176945754,
        "sender_full_name": "oli",
        "timestamp": 1569858853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yeah, well, I realise this isn't ideal... but at least I've made my personal branch of all the changes available, so that reviews can see the big picture if they so wish. hopefully you also appreciate that all this work has been the result of many weeks and countless hours of hacking, including all sorts of experimentation and (partial) reverts. anyway, I agree a compiler design meeting about this is a good idea, so let's leave the PR there until that happens, yeah? (I think we and mark-simulacrum agree it's  a good state now modulo those concerns.) sound fair? :-)</p>",
        "id": 176946005,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859025
    },
    {
        "content": "<p>code isn't design ;) it's implementation. If you could write up an overview for a design meeting that would be great</p>",
        "id": 176946058,
        "sender_full_name": "oli",
        "timestamp": 1569859078
    },
    {
        "content": "<p>well, there's either explicit or implicit design that goes into any implementation. mainly implicit in this case!</p>",
        "id": 176946149,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859121
    },
    {
        "content": "<p>that's totally fine</p>",
        "id": 176946160,
        "sender_full_name": "oli",
        "timestamp": 1569859128
    },
    {
        "content": "<p>I'll try to write up something yes</p>",
        "id": 176946164,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859132
    },
    {
        "content": "<p>I mean to exctract the design in hindsight</p>",
        "id": 176946173,
        "sender_full_name": "oli",
        "timestamp": 1569859136
    },
    {
        "content": "<p>when do you want to schedule this for?</p>",
        "id": 176946193,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859149
    },
    {
        "content": "<p>which is a totally alright thing to do (most research works this way :P)</p>",
        "id": 176946197,
        "sender_full_name": "oli",
        "timestamp": 1569859152
    },
    {
        "content": "<p>I can do  a 1/2 page - 1 page summary or something</p>",
        "id": 176946208,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859161
    },
    {
        "content": "<p>I checked the schedule, and the next three fridays are used</p>",
        "id": 176946215,
        "sender_full_name": "oli",
        "timestamp": 1569859165
    },
    {
        "content": "<p>yeah, that's my experience too.</p>",
        "id": 176946219,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859168
    },
    {
        "content": "<p>ouch</p>",
        "id": 176946226,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859170
    },
    {
        "content": "<p>maybe in 3 weeks gets dropped</p>",
        "id": 176946230,
        "sender_full_name": "oli",
        "timestamp": 1569859173
    },
    {
        "content": "<p>it's unclear</p>",
        "id": 176946234,
        "sender_full_name": "oli",
        "timestamp": 1569859175
    },
    {
        "content": "<p>can't do a \"special meeting\" in a week or two I suppose?</p>",
        "id": 176946255,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859187
    },
    {
        "content": "<p>I know it might be asking too much ^</p>",
        "id": 176946267,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859196
    },
    {
        "content": "<p>but if you create an issue with the document in <a href=\"https://github.com/rust-lang/compiler-team/\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/\">https://github.com/rust-lang/compiler-team/</a> with a hack.md connected of your design</p>",
        "id": 176946271,
        "sender_full_name": "oli",
        "timestamp": 1569859201
    },
    {
        "content": "<p>okay</p>",
        "id": 176946324,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859211
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176946343,
        "sender_full_name": "oli",
        "timestamp": 1569859224
    },
    {
        "content": "<p>is the procedure for this</p>",
        "id": 176946355,
        "sender_full_name": "oli",
        "timestamp": 1569859232
    },
    {
        "content": "<p>sorry, <a href=\"https://rust-lang.github.io/compiler-team/procedures/steering-meeting/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/procedures/steering-meeting/\">https://rust-lang.github.io/compiler-team/procedures/steering-meeting/</a></p>",
        "id": 176946383,
        "sender_full_name": "oli",
        "timestamp": 1569859249
    },
    {
        "content": "<p>okay</p>",
        "id": 176946396,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859260
    },
    {
        "content": "<p>Also, I can participate in the compiler design meeting perhaps. not as a team member obviously, but to answer questions, which I think would make sense?</p>",
        "id": 176946408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859265
    },
    {
        "content": "<p>I'll draft something too though.</p>",
        "id": 176946419,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859272
    },
    {
        "content": "<p>heh everyone can participate, but in the REPL one, yes, I would very much hope you'd be there</p>",
        "id": 176946454,
        "sender_full_name": "oli",
        "timestamp": 1569859302
    },
    {
        "content": "<p>otherwise it makes no sense to hold</p>",
        "id": 176946458,
        "sender_full_name": "oli",
        "timestamp": 1569859309
    },
    {
        "content": "<p>yeah, thought so :-P</p>",
        "id": 176946579,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859376
    },
    {
        "content": "<p>just trying to be respectful of not intruding on compiler team things</p>",
        "id": 176946605,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859396
    },
    {
        "content": "<p>but I agree, it makes the meeting hugely more useful</p>",
        "id": 176946618,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859406
    },
    {
        "content": "<p>anyway...</p>",
        "id": 176946625,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859407
    },
    {
        "content": "<p>thanks for the review. we'll take things from there I guess.</p>",
        "id": 176946646,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859419
    },
    {
        "content": "<p>bye for now.</p>",
        "id": 176946649,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569859420
    },
    {
        "content": "<blockquote>\n<p>Also, I can participate in the compiler design meeting perhaps. not as a team member obviously, but to answer questions, which I think would make sense?</p>\n</blockquote>\n<p>Oh yeah, we should make that clearer in the docs for these meetings: I think the intention is absolutely to invite the relevant parties to any particular design meeting. There's no reason I can see to limit participation solely to compiler-team members. (And besides, we invite the broader audience of compiler-team/meeting anyway.)</p>",
        "id": 177043936,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569927810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oops, just noticed now Mark-Simulacrum r+'ed it... oh well, just as well it didn't succeed.</p>",
        "id": 177074907,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569948989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> for perf, I'd recomment benchmarking to figure out where the bottlenecks are</p>",
        "id": 177728400,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636715
    },
    {
        "content": "<p>we have done basically zero perf work on Miri so I expect there to be some low-hanging fruit</p>",
        "id": 177728420,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636729
    },
    {
        "content": "<p>but this will also highly depend on the benchmark you are picking</p>",
        "id": 177728433,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  yep, good idea. there are already benchmarks, which is nice. disabling validations is a no-brainer, but I'll have a look...</p>",
        "id": 177728473,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570636767
    },
    {
        "content": "<p>any low-hanging fruit that comes to mind immediately, which I should look into?</p>",
        "id": 177728503,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570636786
    },
    {
        "content": "<p>and there's a trade-off between code clarify and perf. I'd be worried about making Miri significantly more messy even if that helps perf, because it is already a hard-to-maintain piece of rustc with subtle correctness invariants.</p>",
        "id": 177728510,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636790
    },
    {
        "content": "<blockquote>\n<p>any low-hanging fruit that comes to mind immediately, which I should look into?</p>\n</blockquote>\n<p>your guess is probably as good as mine. I am wondering if all our layout computations are costing us or not -- they are cached but hitting the cache is still non-zero-cost. but really I dont dare making any guesses.</p>",
        "id": 177728621,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  as for a \"design meeting\", if it involves the miri engine I'd appreciate being involved, or at least getting the chance to look at the summary of the mtg or so.</p>",
        "id": 177728684,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636885
    },
    {
        "content": "<p>sounds fair</p>",
        "id": 177732261,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570639305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> right now my REPL itself is a fork of miri, which I regular rebase on top of... but in the future ideally we can factor out the miri engine.</p>",
        "id": 177732317,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570639325
    },
    {
        "content": "<p>the \"miri engine\" is already factored out, it lives in librustc_mir/interpret in the rustc repo</p>",
        "id": 177732409,
        "sender_full_name": "RalfJ",
        "timestamp": 1570639405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, so I don't mean the engine then... I mean the stuff in the miri repo (lib part) that can be shared between miri the tool and my repl tool (which is the vast majority)</p>",
        "id": 177750100,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570651110
    },
    {
        "content": "<p>basically just one or two new intrinsics I think</p>",
        "id": 177750704,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570651474
    },
    {
        "content": "<p>is the difference</p>",
        "id": 177750709,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570651476
    },
    {
        "content": "<p>maybe that can go into miri itself. if there are other diffs, they're small!</p>",
        "id": 177750733,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570651500
    },
    {
        "content": "<p>I see. yeah we don't guarantee stability for that but other than that, makes sense ;)</p>",
        "id": 177750900,
        "sender_full_name": "RalfJ",
        "timestamp": 1570651634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, maybe could have a toolstate sort of situation though. I can see it working. I've tried to expand on top of miri as much as possible, rather than modifying it... so yeah, the main things are a different machine implementation (necessary I think) and the intrinsics. should be workable, but nothing to concern ourselves with quite yet. :-)</p>",
        "id": 177753227,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570653052
    },
    {
        "content": "<p>given that Miri does not change remotely as fast as rustc does, it might be enough for you to just have a cronjob that regularly tests against Miri master</p>",
        "id": 177788741,
        "sender_full_name": "RalfJ",
        "timestamp": 1570695562
    },
    {
        "content": "<p>That's how priroda works, too</p>",
        "id": 177791529,
        "sender_full_name": "oli",
        "timestamp": 1570698183
    },
    {
        "content": "<p>sounds reasonable yeah</p>",
        "id": 177999666,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570903174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I just learned that rustc gained a lot of speed on some benchmarks by avoiding <code>layout_of</code> in a hot code path. That confirms the suspicion I raised above that right now, having the layout of everything everywhere is our biggest bottleneck.</p>",
        "id": 178001118,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905390
    },
    {
        "content": "<p>however, adding that layout everywhere also helped to uncover and fix tons of bugs</p>",
        "id": 178001128,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905404
    },
    {
        "content": "<p>so when optimizing this we have to be careful to not make our API more fragile</p>",
        "id": 178001134,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Cool. Thanks for letting me know. I'll see if I can at the very least cache it, if not avoid calls to it.</p>",
        "id": 178001145,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905436
    },
    {
        "content": "<p>Maybe with a cfg option.</p>",
        "id": 178001149,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905444
    },
    {
        "content": "<p>it is cached</p>",
        "id": 178001150,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905444
    },
    {
        "content": "<p>ah</p>",
        "id": 178001151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905446
    },
    {
        "content": "<p>the rustc query mechanism caches it for us</p>",
        "id": 178001154,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905452
    },
    {
        "content": "<p>but it's still a hashtable lookup and some more stuff even for a cache hit, which in hot loops is a <em>lot</em></p>",
        "id": 178001163,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905473
    },
    {
        "content": "<p>so you'll still need to profile</p>",
        "id": 178001230,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905525
    },
    {
        "content": "<p>but this would be the first thing I'd look for in a profile ;)</p>",
        "id": 178001235,
        "sender_full_name": "RalfJ",
        "timestamp": 1570905533
    },
    {
        "content": "<p>aha</p>",
        "id": 178001252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905552
    },
    {
        "content": "<p>yeah</p>",
        "id": 178001254,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905553
    },
    {
        "content": "<p>I will profile, for sure</p>",
        "id": 178001257,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905555
    },
    {
        "content": "<p>ta</p>",
        "id": 178001259,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570905556
    }
]