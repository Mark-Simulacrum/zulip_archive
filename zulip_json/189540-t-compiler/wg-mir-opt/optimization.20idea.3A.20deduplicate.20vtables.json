[
    {
        "content": "<p>The <code>vtable</code> of <code>Foo</code> contains the exact same bits that the vtable of <code>Bar</code> has (plus more) if <code>Foo: Bar</code> (and no other trait bounds). In llvm we end up with two vtables which each require their own static memory slot. We know for a fact though that duplicating or deduplicating vtables is perfectly legal (since duplicating happens across crates, see docs and discussion on the <code>ptr::eq</code> method). Before lowering vtables to llvm, we could have a table of existing vtables and look through it to find any vtables that start with the exact memory of the entire vtable we currently want to lower. If we find that, we just yield the already lowered (bigger or equal) vtable. We can even go further at some point and check whether vtables for different types can be deduplicated (which should be possible if all methods have the exact same body), but the low hanging fruit of deduplicating vtables for a single type but multiple traits is something I think we could fix and that <code>-Os</code> could benefit from</p>",
        "id": 165876463,
        "sender_full_name": "oli",
        "timestamp": 1558074584
    },
    {
        "content": "<p>How does that interact with <a href=\"https://github.com/rust-lang/rfcs/pull/2580\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2580\">rfc 2580</a>? If I <code>ptr::metadata()</code> a <code>&amp;Bar</code> and get back a <code>VTable&lt;Foo&gt;</code> I guess that would be fine now.</p>",
        "id": 165893069,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558093996
    },
    {
        "content": "<p>But if we extended the API's in the future to allow introspecting the available methods, then it would be very confusing/potentially a bug.</p>",
        "id": 165893122,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558094034
    },
    {
        "content": "<p>You'd still get a  <code>Vtable&lt;Bar&gt;</code> in the type system. It's just a deduplication of the backing memory of the vtables. So the pointers will alias, not sure if that is a problem</p>",
        "id": 165894795,
        "sender_full_name": "oli",
        "timestamp": 1558095041
    },
    {
        "content": "<p>I guess since <code>Vtable::Metadata</code> doesn't implement <code>Eq</code> or <code>PartialEq</code>, there's no safe way of discovering that</p>",
        "id": 165894971,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558095155
    },
    {
        "content": "<p>Seems reasonable then</p>",
        "id": 165894976,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558095165
    },
    {
        "content": "<p>in RFC 2580 the <code>Metadata</code> needs to impl <code>Ord</code> which implies impl <code>Eq</code> + <code>PartialOrd&lt;Self&gt;</code> + <code>PartialEq&lt;Self&gt;</code></p>",
        "id": 165981320,
        "sender_full_name": "kennytm",
        "timestamp": 1558197165
    },
    {
        "content": "<p>but even with the same type <code>Foo</code>, the vtable constructed from crate A and that from crate B could be in different locations</p>",
        "id": 165981346,
        "sender_full_name": "kennytm",
        "timestamp": 1558197217
    },
    {
        "content": "<p>basically, if you think this feature is going to affect code relying on vtable equality, perhaps those code are already buggy themselves.</p>",
        "id": 165981487,
        "sender_full_name": "kennytm",
        "timestamp": 1558197424
    }
]