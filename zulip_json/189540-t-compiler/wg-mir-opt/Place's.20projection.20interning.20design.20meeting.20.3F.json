[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> we've talked about doing a design meeting to discuss about what needs to be done to improve on Place's projection allocation strategy</p>",
        "id": 176467197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569334300
    },
    {
        "content": "<p>opening this thread to start discussing a bit about when a meeting like this could happen</p>",
        "id": 176467278,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569334327
    },
    {
        "content": "<p>this would be my big next step to make progress with Place 2.0</p>",
        "id": 176467339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569334374
    },
    {
        "content": "<p>the rest of the things around are really minor things, like the <code>build place iteratively</code> task</p>",
        "id": 176467392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569334411
    },
    {
        "content": "<p>yep -- should we try to schedule a time? I could carve out some time tomorrow morning, or maybe tomorrow afternoon, say around 2pm Eastern</p>",
        "id": 176468535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569335143
    },
    {
        "content": "<p>not sure how long we'll need for such discussion -- I would guess ~30 min ?</p>",
        "id": 176468556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569335160
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 176469098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569335493
    },
    {
        "content": "<p>works for me</p>",
        "id": 176470805,
        "sender_full_name": "oli",
        "timestamp": 1569336503
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 176590451,
        "sender_full_name": "oli",
        "timestamp": 1569434431
    },
    {
        "content": "<p>So as far as I can tell we have three things to continue working on right now:</p>\n<ol>\n<li>place building shouldn't Vec -&gt; Box -&gt; Vec cycle all the time</li>\n<li>intern places to deduplicate them between all MIR bodies</li>\n<li>make <code>Deref</code> not be a place projection</li>\n</ol>",
        "id": 176590728,
        "sender_full_name": "oli",
        "timestamp": 1569434599
    },
    {
        "content": "<p>I'd wager that the numbers also correspond to the difficulty of the task</p>",
        "id": 176590770,
        "sender_full_name": "oli",
        "timestamp": 1569434636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think we never set on a date/time for this meeting, should we look for some specific time?</p>",
        "id": 176591974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569435406
    },
    {
        "content": "<p>I thought it was supposed be today at 2 (Eastern) <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 176592177,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569435569
    },
    {
        "content": "<p>ok, this time at the correct time: Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 176595523,
        "sender_full_name": "oli",
        "timestamp": 1569438056
    },
    {
        "content": "<p>hehe, Oli, the \"right\" time was an hour ago :), but still I've talked to Niko and he told me that he booked this time twice</p>",
        "id": 176595636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438133
    },
    {
        "content": "<p>so he won't be able to attend</p>",
        "id": 176595640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438138
    },
    {
        "content": "<p>going to start a doodle</p>",
        "id": 176595651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438151
    },
    {
        "content": "<p>is it possible for you tomorrow or friday?</p>",
        "id": 176595664,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> tomorrow or friday is ok?</p>",
        "id": 176595678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438175
    },
    {
        "content": "<p>XD</p>",
        "id": 176595694,
        "sender_full_name": "oli",
        "timestamp": 1569438184
    },
    {
        "content": "<p>want to reduce the amount of days used in a doodle :)</p>",
        "id": 176595698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438187
    },
    {
        "content": "<p>I'm very confused</p>",
        "id": 176595700,
        "sender_full_name": "oli",
        "timestamp": 1569438188
    },
    {
        "content": "<p>hehe don't worry because Niko wasn't around anyway</p>",
        "id": 176595709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438200
    },
    {
        "content": "<p>to me ... the more I read the conversation the more convinced I am that we didn't set a date, Niko asked for two possibilities and we said yes</p>",
        "id": 176595735,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438226
    },
    {
        "content": "<p>:P</p>",
        "id": 176595736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438227
    },
    {
        "content": "<p>neither tomorrow nor friday work for me after 11am eastern time</p>",
        "id": 176595738,
        "sender_full_name": "oli",
        "timestamp": 1569438228
    },
    {
        "content": "<p>but before yes?</p>",
        "id": 176595790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438243
    },
    {
        "content": "<p>jup</p>",
        "id": 176595839,
        "sender_full_name": "oli",
        "timestamp": 1569438285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does it work for you tomorrow or friday before 11am eastern time?</p>",
        "id": 176595862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438305
    },
    {
        "content": "<p>before the compiler triage or steering meetings</p>",
        "id": 176595995,
        "sender_full_name": "oli",
        "timestamp": 1569438409
    },
    {
        "content": "<p>anything works for me</p>",
        "id": 176596000,
        "sender_full_name": "oli",
        "timestamp": 1569438414
    },
    {
        "content": "<p>I'm gonna go to bed, pick any time before the compiler meetings and I can attend</p>",
        "id": 176596019,
        "sender_full_name": "oli",
        "timestamp": 1569438428
    },
    {
        "content": "<p>to me seems like it would be better on friday</p>",
        "id": 176596131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438505
    },
    {
        "content": "<p>let's see what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> says</p>",
        "id": 176596137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569438512
    },
    {
        "content": "<p>I've added the event to the rustc calendar</p>",
        "id": 176647840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569495747
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> friendly reminder, this meeting is happening in 25 mins</p>",
        "id": 176741487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569587747
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> hi everyone! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 176743084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589204
    },
    {
        "content": "<p>so, to remind mainly the people that's reading and wasn't following close, we changed Place representation from a tree like structure to the following structure ...</p>",
        "id": 176743121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// projection out of a place (access a field, deref a pointer, etc)</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projection</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">PlaceElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176743133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589231
    },
    {
        "content": "<p>this meeting was mainly to discuss how to go from ...</p>",
        "id": 176743160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projection</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">PlaceElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176743171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589258
    },
    {
        "content": "<p>to</p>",
        "id": 176743174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projection</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">PlaceElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176743212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589276
    },
    {
        "content": "<p>or well, really the interned version of that</p>",
        "id": 176743238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have some first thoughts about this ... :)</p>",
        "id": 176743297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589323
    },
    {
        "content": "<p>hi</p>",
        "id": 176743330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589330
    },
    {
        "content": "<p>should we remove field types from projections?</p>",
        "id": 176743346,
        "sender_full_name": "eddyb",
        "timestamp": 1569589342
    },
    {
        "content": "<p>sorry, reading now!</p>",
        "id": 176743349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589343
    },
    {
        "content": "<p>Well, one other option was to intern <code>Place</code>s directly so we'd have <code>&amp;'tcx Place&lt;'tcx&gt;</code> everywhere</p>",
        "id": 176743353,
        "sender_full_name": "oli",
        "timestamp": 1569589348
    },
    {
        "content": "<p>I feel like that could make interning far more effective</p>",
        "id": 176743361,
        "sender_full_name": "eddyb",
        "timestamp": 1569589356
    },
    {
        "content": "<blockquote>\n<p>I feel like that could make interning far more effective</p>\n</blockquote>\n<p>you meant, interning the whole <code>Place</code> structure?</p>",
        "id": 176743386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589374
    },
    {
        "content": "<p>I think that's orthogonal, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 176743394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589381
    },
    {
        "content": "<p>yes</p>",
        "id": 176743395,
        "sender_full_name": "oli",
        "timestamp": 1569589382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yeah but that only makes sense for non-finite structure</p>",
        "id": 176743403,
        "sender_full_name": "eddyb",
        "timestamp": 1569589386
    },
    {
        "content": "<blockquote>\n<p>should we remove field types from projections?</p>\n</blockquote>\n<p>isn't it a separate issue? say more about it :)</p>",
        "id": 176743407,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589392
    },
    {
        "content": "<p>I thnk it's a decent idea, but the challenge is around normalization</p>",
        "id": 176743424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589403
    },
    {
        "content": "<p>anything finite is usually much cheaper to just drag around</p>",
        "id": 176743430,
        "sender_full_name": "eddyb",
        "timestamp": 1569589408
    },
    {
        "content": "<p>I'd rather leave the field types to be discussed separately</p>",
        "id": 176743431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589409
    },
    {
        "content": "<p>Can you explain what you mean by finite?</p>",
        "id": 176743439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589419
    },
    {
        "content": "<p><code>PlaceBase</code> is a \"leaf\" (I guess in Rust the word \"finite\" is kind of hard to use correctly)</p>",
        "id": 176743551,
        "sender_full_name": "eddyb",
        "timestamp": 1569589470
    },
    {
        "content": "<blockquote>\n<p>I'd rather leave the field types to be discussed separately</p>\n</blockquote>\n<p>I can dive in and do all the stuff needed, but yeah, something in my mind prefers to divide problems in the maximum possible way :), so <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is saying, unless there are reasons to do everything in one step</p>",
        "id": 176743555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589477
    },
    {
        "content": "<p>It seems to <em>me</em> that interning has two challenges:</p>\n<ul>\n<li>construction (I prefer the \"builder\" approach we discussed earlier, not sure if you've all thought about that more)</li>\n<li>the mut visitor, which cannot descend to non-owned content (I think some of the NLL visitors rely on being able to e.g. mutate the types)</li>\n</ul>",
        "id": 176743589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589502
    },
    {
        "content": "<p>interning PlaceBase <em>on top of</em> projections means you'll have less reuse while there is only an ergonomic (if at all) benefit to having the whole Place being interned, since its size is really small</p>",
        "id": 176743598,
        "sender_full_name": "eddyb",
        "timestamp": 1569589507
    },
    {
        "content": "<blockquote>\n<p>It seems to <em>me</em> that interning has two challenges:</p>\n<ul>\n<li>construction (I prefer the \"builder\" approach we discussed earlier, not sure if you've all thought about that more)</li>\n<li>the mut visitor, which cannot descend to non-owned content (I think some of the NLL visitors rely on being able to e.g. mutate the types)</li>\n</ul>\n</blockquote>\n<p>for more info on the construction thing Niko is mentioning <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/non.20recursive.20Place.20construction\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/non.20recursive.20Place.20construction\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/non.20recursive.20Place.20construction</a></p>",
        "id": 176743630,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589537
    },
    {
        "content": "<p>you're saying then that it's better to <em>just</em> intern the projection slice, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?</p>",
        "id": 176743640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589545
    },
    {
        "content": "<p>vs the entire place?</p>",
        "id": 176743647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589557
    },
    {
        "content": "<p>I don't have a strong opinion about that</p>",
        "id": 176743689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589567
    },
    {
        "content": "<p>yes, and this should be true for anything that's <code>(leaf, [leaf])</code> or <code>(leaf, recursive&lt;leaf&gt;)</code></p>",
        "id": 176743694,
        "sender_full_name": "eddyb",
        "timestamp": 1569589577
    },
    {
        "content": "<p>but I <em>think</em> I agree</p>",
        "id": 176743695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589579
    },
    {
        "content": "<p>(this is why I used the word finite at first)</p>",
        "id": 176743701,
        "sender_full_name": "eddyb",
        "timestamp": 1569589593
    },
    {
        "content": "<p>if nothing else, I'd rather not intern a data structure with a vec inside</p>",
        "id": 176743709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589604
    },
    {
        "content": "<p>there's also I guess the question of <code>[Projection]</code> vs <code>ty::List&lt;Projection&gt;</code>, the latter disallowing slicing but having reference equality instead of value equality</p>",
        "id": 176743777,
        "sender_full_name": "eddyb",
        "timestamp": 1569589653
    },
    {
        "content": "<blockquote>\n<p>It seems to <em>me</em> that interning has two challenges:</p>\n<ul>\n<li>construction (I prefer the \"builder\" approach we discussed earlier, not sure if you've all thought about that more)</li>\n<li>the mut visitor, which cannot descend to non-owned content (I think some of the NLL visitors rely on being able to e.g. mutate the types)</li>\n</ul>\n</blockquote>\n<p>does this seem about right to folks? are there other complications to consider?</p>",
        "id": 176743783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589659
    },
    {
        "content": "<blockquote>\n<p>there's also I guess the question of <code>[Projection]</code> vs <code>ty::List&lt;Projection&gt;</code>, the latter disallowing slicing but having reference equality instead of value equality</p>\n</blockquote>\n<p>yeah, that's a good one -- I like allowing slices, but it's also achievable with <code>PlaceRef</code>, which I think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> added already?</p>",
        "id": 176743846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589684
    },
    {
        "content": "<p>yes</p>",
        "id": 176743881,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589706
    },
    {
        "content": "<p>or rather, you can create a <code>&amp;[T]</code> from a <code>&amp;List&lt;T&gt;</code> (and we do this with Substs in a few places, for example), but not a <code>&amp;List&lt;T&gt;</code> from a <code>&amp;List&lt;T&gt;</code></p>",
        "id": 176743891,
        "sender_full_name": "eddyb",
        "timestamp": 1569589711
    },
    {
        "content": "<p>we can go with <code>List</code> and be able to do that with <code>PlaceRef</code></p>",
        "id": 176743897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589716
    },
    {
        "content": "<p>yeah <code>PlaceRef</code> is a really nice solution for this</p>",
        "id": 176743905,
        "sender_full_name": "eddyb",
        "timestamp": 1569589720
    },
    {
        "content": "<p>(arguably <code>Place</code> itself could be generic enough to support this by itself but that's a bit silly at this point :P)</p>",
        "id": 176743933,
        "sender_full_name": "eddyb",
        "timestamp": 1569589741
    },
    {
        "content": "<blockquote>\n<p>or rather, you can create a <code>&amp;[T]</code> from a <code>&amp;List&lt;T&gt;</code> (and we do this with Substs in a few places, for example), but not a <code>&amp;List&lt;T&gt;</code> from a <code>&amp;List&lt;T&gt;</code></p>\n</blockquote>\n<p>definitely, that can be done in <code>Place::as_place_ref</code>, as part of the whole conversion</p>",
        "id": 176743954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589747
    },
    {
        "content": "<p>yeah I mean placeref is fine too</p>",
        "id": 176743968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589763
    },
    {
        "content": "<blockquote>\n<p>(arguably <code>Place</code> itself could be generic enough to support this by itself but that's a bit silly at this point :P)</p>\n</blockquote>\n<p>we explicitly opted against that</p>",
        "id": 176743975,
        "sender_full_name": "oli",
        "timestamp": 1569589765
    },
    {
        "content": "<p>is <code>List</code> 1-word?</p>",
        "id": 176743982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589773
    },
    {
        "content": "<p>yupp</p>",
        "id": 176743984,
        "sender_full_name": "eddyb",
        "timestamp": 1569589778
    },
    {
        "content": "<p>oh right that's the other win here</p>",
        "id": 176743990,
        "sender_full_name": "eddyb",
        "timestamp": 1569589783
    },
    {
        "content": "<p>ok that seems worthwhile</p>",
        "id": 176743993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589785
    },
    {
        "content": "<p>ohh wasn't aware of that</p>",
        "id": 176744007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589801
    },
    {
        "content": "<p>yeah it's a whole hack involving <code>extern { type ...; }</code> and stuff</p>",
        "id": 176744073,
        "sender_full_name": "eddyb",
        "timestamp": 1569589822
    },
    {
        "content": "<p>what is the size of the entire <code>Place</code> going to be, then?</p>",
        "id": 176744082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589833
    },
    {
        "content": "<p>I guess sizeof(Base) + 1</p>",
        "id": 176744091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589841
    },
    {
        "content": "<p>let me check that out quickly</p>",
        "id": 176744095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589842
    },
    {
        "content": "<p>well, + sizeof(usize) :)</p>",
        "id": 176744096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589844
    },
    {
        "content": "<p>either 2 or 3 usize's but probably 3 given that idk how you'd fit the static case otherwise :(</p>",
        "id": 176744109,
        "sender_full_name": "eddyb",
        "timestamp": 1569589856
    },
    {
        "content": "<p>plausibly we could intern base separately :)</p>",
        "id": 176744110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589857
    },
    {
        "content": "<p>we can make this <em>really</em> nice if we get rid of static places though</p>",
        "id": 176744127,
        "sender_full_name": "eddyb",
        "timestamp": 1569589868
    },
    {
        "content": "<p>you can't move out of a static so they feel extremely pointless</p>",
        "id": 176744132,
        "sender_full_name": "eddyb",
        "timestamp": 1569589876
    },
    {
        "content": "<p>hmm yes, seems like a \"separate\" thing to consider, but true</p>",
        "id": 176744136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589883
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I had that thought that if we interned <code>Place</code>, then anywhere that currently has a <code>Place</code> field would shrink to sizeof(usize).</p>",
        "id": 176744151,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569589903
    },
    {
        "content": "<p>(<code>STATIC</code> would then be <code>*&amp;STATIC</code> for anyone not following)</p>",
        "id": 176744155,
        "sender_full_name": "eddyb",
        "timestamp": 1569589909
    },
    {
        "content": "<blockquote>\n<p>what is the size of the entire <code>Place</code> going to be, then?</p>\n</blockquote>\n<p>I remember doing this silly thing to emulate quickly the sizes of these things <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d</a></p>",
        "id": 176744156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> yes but you'd also have way more separate things in the interner that share projections but not base</p>",
        "id": 176744221,
        "sender_full_name": "eddyb",
        "timestamp": 1569589941
    },
    {
        "content": "<p>size of <code>Place</code> as is today is 32 bytes</p>",
        "id": 176744230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589946
    },
    {
        "content": "<blockquote>\n<p>(<code>STATIC</code> would then be <code>*&amp;STATIC</code> for anyone not following)</p>\n</blockquote>\n<p>(I'd want to look into what this means for borrow checker, but I think it could be fine)</p>",
        "id": 176744235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589956
    },
    {
        "content": "<p>(but yeah separate)</p>",
        "id": 176744237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589959
    },
    {
        "content": "<p>I think the idea was to do an intern cache at the <code>mir::Body</code> level</p>",
        "id": 176744273,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569589987
    },
    {
        "content": "<p>so there are three options, which are kind of non-exclusive:</p>\n<ul>\n<li>intern base</li>\n<li>intern projections</li>\n<li>intern place</li>\n</ul>",
        "id": 176744277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569589990
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>what is the size of the entire <code>Place</code> going to be, then?</p>\n</blockquote>\n<p>I remember doing this silly thing to emulate quickly the sizes of these things <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d</a></p>\n</blockquote>\n<p>was looking mainly for the size of Statements at that time</p>",
        "id": 176744282,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569589996
    },
    {
        "content": "<p>And we could also do a scheme to not store common <code>Place</code>s</p>",
        "id": 176744286,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590003
    },
    {
        "content": "<p>my opinion: interning base and interning place is something to consider later</p>",
        "id": 176744302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590024
    },
    {
        "content": "<p>the hard part is interning projections</p>",
        "id": 176744304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590027
    },
    {
        "content": "<p>and I think that's worth doing separately</p>",
        "id": 176744310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590034
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>what is the size of the entire <code>Place</code> going to be, then?</p>\n</blockquote>\n<p>I remember doing this silly thing to emulate quickly the sizes of these things <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d</a></p>\n</blockquote>\n<p>was looking mainly for the size of Statements at that time</p>\n</blockquote>\n<p>still Place due to padding is not going to change because of the use of Box instead of List</p>",
        "id": 176744311,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569590036
    },
    {
        "content": "<blockquote>\n<p>I think the idea was to do an intern cache at the <code>mir::Body</code> level</p>\n</blockquote>\n<p>Ah yes, that was the idea with using 32 bit indices</p>",
        "id": 176744316,
        "sender_full_name": "oli",
        "timestamp": 1569590040
    },
    {
        "content": "<p>Ah right</p>",
        "id": 176744358,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590051
    },
    {
        "content": "<p>hm although I do find the idea of indices and per-mir interning interesting</p>",
        "id": 176744371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590066
    },
    {
        "content": "<p>(somewhat orthogonal, but relevant)</p>",
        "id": 176744378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590072
    },
    {
        "content": "<p>a <code>Local</code> is 32-bit :P</p>",
        "id": 176744385,
        "sender_full_name": "eddyb",
        "timestamp": 1569590077
    },
    {
        "content": "<p>like the first 128 indices could literally just be transmuted to <code>Local</code></p>",
        "id": 176744395,
        "sender_full_name": "oli",
        "timestamp": 1569590086
    },
    {
        "content": "<p>and the others need lookup</p>",
        "id": 176744397,
        "sender_full_name": "oli",
        "timestamp": 1569590093
    },
    {
        "content": "<p>you won't ever merge that because it will regress old inflate,,,</p>",
        "id": 176744413,
        "sender_full_name": "eddyb",
        "timestamp": 1569590115
    },
    {
        "content": "<p>I guess we could try to gather some estimates, no?</p>",
        "id": 176744414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590116
    },
    {
        "content": "<p>i.e., we could look at MIR and see how much re-use we'd get</p>",
        "id": 176744418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590125
    },
    {
        "content": "<p>(unless we finally removed it from perf, lol)</p>",
        "id": 176744425,
        "sender_full_name": "eddyb",
        "timestamp": 1569590134
    },
    {
        "content": "<p>(if we interned projections separately in a regular ol' arena)</p>",
        "id": 176744426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590134
    },
    {
        "content": "<blockquote>\n<p>you won't ever merge that because it will regress old inflate,,,</p>\n</blockquote>\n<p>huh?</p>",
        "id": 176744433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590151
    },
    {
        "content": "<p>so... collect all Places during mir optimizations and count their occurrences?</p>",
        "id": 176744483,
        "sender_full_name": "oli",
        "timestamp": 1569590174
    },
    {
        "content": "<p>then optimize for the most occurring ones?</p>",
        "id": 176744487,
        "sender_full_name": "oli",
        "timestamp": 1569590183
    },
    {
        "content": "<p>older <code>inflate</code> versions have a macro-generated huge function because it actually used to be better than the dynamic version but isn't even nowadays, and perf used to test the older version for a long while</p>",
        "id": 176744492,
        "sender_full_name": "eddyb",
        "timestamp": 1569590193
    },
    {
        "content": "<p>I'm creating a <a href=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\" target=\"_blank\" title=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\">hackmd to store our notes here</a></p>",
        "id": 176744502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> basically it's our most powerful stress test :P</p>",
        "id": 176744503,
        "sender_full_name": "eddyb",
        "timestamp": 1569590209
    },
    {
        "content": "<p>fyi :)</p>",
        "id": 176744504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590210
    },
    {
        "content": "<p>I'm going to try and jot down a few things</p>",
        "id": 176744505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590216
    },
    {
        "content": "<blockquote>\n<p>perf used to test the older version for a long while</p>\n</blockquote>\n<p>So perf.rlo won't actually show the issue?</p>",
        "id": 176744550,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590264
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> basically it's our most powerful stress test :P</p>\n</blockquote>\n<p>sure but why would it specifically be bad for one of the proposals at hand?</p>",
        "id": 176744558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590272
    },
    {
        "content": "<p>because one of the ways it's horrible in is it has maybe thousands of MIR locals</p>",
        "id": 176744607,
        "sender_full_name": "eddyb",
        "timestamp": 1569590290
    },
    {
        "content": "<p>its MIR locals multiplied by the number of statements resulted in a really terrible worst-case for my WIP NRVO PR last year</p>",
        "id": 176744650,
        "sender_full_name": "eddyb",
        "timestamp": 1569590342
    },
    {
        "content": "<p>if we regress memory on horrible crates and improve it on a lot of others, that's fine with me</p>",
        "id": 176744659,
        "sender_full_name": "oli",
        "timestamp": 1569590346
    },
    {
        "content": "<p>so it stuck with me</p>",
        "id": 176744661,
        "sender_full_name": "eddyb",
        "timestamp": 1569590348
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 176744706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569590393
    },
    {
        "content": "<p>anyway point was 128 might be a bit low, 2^16 is closer to what I've seen used in practice for SSA values</p>",
        "id": 176744707,
        "sender_full_name": "eddyb",
        "timestamp": 1569590393
    },
    {
        "content": "<p>I'm going to make some coffee because I'm not seeing why it would regress memory :)</p>",
        "id": 176744713,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590401
    },
    {
        "content": "<blockquote>\n<p>anyway point was 128 might be a bit low, 2^16 is closer to what I've seen used in practice for SSA values</p>\n</blockquote>\n<p>that was just a random number I picked. Collecting data would be the best thing to find that number</p>",
        "id": 176744782,
        "sender_full_name": "oli",
        "timestamp": 1569590430
    },
    {
        "content": "<p>there's also that whole \"alias\" idea I had, but that's only semi-related. it <em>is</em> very close to interning places per-body, depending on the semantics you pick</p>",
        "id": 176744818,
        "sender_full_name": "eddyb",
        "timestamp": 1569590475
    },
    {
        "content": "<p>I feel like we could also extend that scheme so that <code>n + 0 =&gt; Place(Local(n), [])</code>, <code>n + 1 =&gt; Place(Local(n) [Field(0)])</code> up to some other number.</p>",
        "id": 176744820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590476
    },
    {
        "content": "<blockquote>\n<p>I'm going to make some coffee because I'm not seeing why it would regress memory <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>if every index is only used once, then we use more memory for the index + vector scheme than for the direct scheme I think</p>",
        "id": 176744822,
        "sender_full_name": "oli",
        "timestamp": 1569590478
    },
    {
        "content": "<p>But aren't we storing place's by value now?</p>",
        "id": 176744828,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590493
    },
    {
        "content": "<p>So de duplicating the values should save <em>some</em> memory right?</p>",
        "id": 176744839,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590514
    },
    {
        "content": "<p>oh god please don't do arithmetic coding in a compiler</p>",
        "id": 176744846,
        "sender_full_name": "eddyb",
        "timestamp": 1569590518
    },
    {
        "content": "<p>that stuff is fun but not cheap on compute</p>",
        "id": 176744898,
        "sender_full_name": "eddyb",
        "timestamp": 1569590529
    },
    {
        "content": "<p>I don't know what \"arithmetic coding\" is but</p>",
        "id": 176744902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590534
    },
    {
        "content": "<p>I am still trying to sort out the variations</p>",
        "id": 176744909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590542
    },
    {
        "content": "<p>well, if deduplication doesn't actually deduplicate because every value is only used once, then we don't gain anything but may lose something</p>",
        "id": 176744914,
        "sender_full_name": "oli",
        "timestamp": 1569590550
    },
    {
        "content": "<p>it seems to me that</p>",
        "id": 176744926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590560
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>what is the size of the entire <code>Place</code> going to be, then?</p>\n</blockquote>\n<p>I remember doing this silly thing to emulate quickly the sizes of these things <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d</a></p>\n</blockquote>\n<p>Isn't this what <code>-Z print-type-sizes</code> is for?</p>",
        "id": 176744935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569590565
    },
    {
        "content": "<p>if you (a) intern the projections to a list</p>",
        "id": 176744942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590576
    },
    {
        "content": "<p>(arithmetic coding is a trick used in compression, more often audio than general data compression, and it's also related to those tricks for fitting (Nat, Nat) into Nat, aka diagonalization or w/e)</p>",
        "id": 176744957,
        "sender_full_name": "eddyb",
        "timestamp": 1569590588
    },
    {
        "content": "<p>I guess I assumed most locals were used at least twice (a read and write)</p>",
        "id": 176744961,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569590591
    },
    {
        "content": "<p>ah, almost but not quite, dang it. I was <em>going</em> to say that <code>Place</code> coudl be copy, but the problem is I think we still have a <code>Box</code> for statics maybe?</p>",
        "id": 176744965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590599
    },
    {
        "content": "<p>anyway my point was this</p>",
        "id": 176744978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590608
    },
    {
        "content": "<p>if you reserve the first N places for locals</p>",
        "id": 176744986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590614
    },
    {
        "content": "<p>you can solve statics anyway so don't worry about them too much</p>",
        "id": 176744988,
        "sender_full_name": "eddyb",
        "timestamp": 1569590617
    },
    {
        "content": "<p>you don't need to put them in the vector at all</p>",
        "id": 176744989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590618
    },
    {
        "content": "<p>you can synthesize on demand</p>",
        "id": 176744995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590624
    },
    {
        "content": "<p>fn place(index: u32) -&gt; Place</p>",
        "id": 176745004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590631
    },
    {
        "content": "<p>so in that case it really isn't any less efficient, no?</p>",
        "id": 176745034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590642
    },
    {
        "content": "<p>(so the Nat thing is that you can fit tuples or lists of numbers into numbers, but it can get really expensive to decode, depending on how you're doing it)</p>",
        "id": 176745058,
        "sender_full_name": "eddyb",
        "timestamp": 1569590651
    },
    {
        "content": "<p>(also it means we can set the threshold pretty high)</p>",
        "id": 176745065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590657
    },
    {
        "content": "<p>(the problem is statics, which would either have to be interned or solved in some other way)</p>",
        "id": 176745097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590689
    },
    {
        "content": "<p>but I think what all of this points to (in my mind) is that ultimately we probably want to intern the projections <em>and</em> the places</p>",
        "id": 176745108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590703
    },
    {
        "content": "<p>oh so basically some of the place indices are locals and others are projections thereof</p>",
        "id": 176745109,
        "sender_full_name": "eddyb",
        "timestamp": 1569590704
    },
    {
        "content": "<p>right, so if you have a threshold H, then <code>fn place</code> is kind of:</p>",
        "id": 176745128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590724
    },
    {
        "content": "<p>and you can even define locals that way although it seems worrying. oh nvm what you're saying is what I thought everyone else was saying</p>",
        "id": 176745142,
        "sender_full_name": "eddyb",
        "timestamp": 1569590744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">place</span><span class=\"p\">(</span><span class=\"n\">index</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">local</span>: <span class=\"nc\">index</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">place_vector</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176745146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590745
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>what is the size of the entire <code>Place</code> going to be, then?</p>\n</blockquote>\n<p>I remember doing this silly thing to emulate quickly the sizes of these things <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ea6a738e3065c34837d9fde64f9091d</a></p>\n</blockquote>\n<p>Isn't this what <code>-Z print-type-sizes</code> is for?</p>\n</blockquote>\n<p>I did this because I needed to see how much was the size of doing <code>Box[T]</code> instead of the previous thing we had to see if was worth the change, changing the thing gave my a lot of compile errors, didn't want to make the refactor before being sure :)</p>",
        "id": 176745147,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569590748
    },
    {
        "content": "<p>in that case, if all you have is a ton of locals, we haven't done any extra work, no?</p>",
        "id": 176745198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590768
    },
    {
        "content": "<p>or am I missing something</p>",
        "id": 176745201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590772
    },
    {
        "content": "<p>the vector would be empty, and the only change is the sizeof(Place) is much smaller</p>",
        "id": 176745206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590779
    },
    {
        "content": "<p>okay yeah I would've assumed you don't store identity mappings anyway</p>",
        "id": 176745239,
        "sender_full_name": "eddyb",
        "timestamp": 1569590809
    },
    {
        "content": "<p>so you were just assuming we'd set the threshold too low</p>",
        "id": 176745255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590822
    },
    {
        "content": "<p>yeah my old inflate comment was about 128 specifically</p>",
        "id": 176745274,
        "sender_full_name": "eddyb",
        "timestamp": 1569590840
    },
    {
        "content": "<p>ok ok</p>",
        "id": 176745277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590845
    },
    {
        "content": "<p>so this comes back (for me) to: the logical first step is to intern projections :)</p>",
        "id": 176745289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590861
    },
    {
        "content": "<p>which can then be used to intern the entire place at some later point</p>",
        "id": 176745294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590873
    },
    {
        "content": "<p>in the meantime, it's gotta be better than <code>Box&lt;[...]&gt;</code></p>",
        "id": 176745298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590880
    },
    {
        "content": "<p>I think we can all agree on interning projections?</p>",
        "id": 176745337,
        "sender_full_name": "eddyb",
        "timestamp": 1569590884
    },
    {
        "content": "<p>in fact I thought it was already happening</p>",
        "id": 176745347,
        "sender_full_name": "eddyb",
        "timestamp": 1569590894
    },
    {
        "content": "<p>maybe I'm out of date :)</p>",
        "id": 176745353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590906
    },
    {
        "content": "<p>in that case, I think the <em>next</em> question would be what challenges exist to doing so, which comes back to the comment that I made a while back and how I would propose to address those challenges</p>",
        "id": 176745385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590933
    },
    {
        "content": "<p>but I'm going to stop typing for a sec because I want to see what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> think :)</p>",
        "id": 176745402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569590955
    },
    {
        "content": "<blockquote>\n<p>in fact I thought it was already happening</p>\n</blockquote>\n<p>projections are not being interned, see meeting title <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 176745420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569590978
    },
    {
        "content": "<p>I mean that you were working towards it</p>",
        "id": 176745525,
        "sender_full_name": "eddyb",
        "timestamp": 1569591039
    },
    {
        "content": "<p>yeah yeah, was kidding but yeah, I guessed we were already sold on it</p>",
        "id": 176745540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591058
    },
    {
        "content": "<p>so <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 176745543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591060
    },
    {
        "content": "<blockquote>\n<p>but I'm going to stop typing for a sec because I want to see what <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> and <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> think :)</p>\n</blockquote>\n<p>so seems like there's a bunch of things that we all agree on?, I'd need to re-read the whole conversation to make some clear set of tasks</p>",
        "id": 176745599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591110
    },
    {
        "content": "<p>I guess this is what you were doing on HackMD <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 176745613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591121
    },
    {
        "content": "<p>I mean, more or less taking some more clear things out :)</p>",
        "id": 176745660,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591137
    },
    {
        "content": "<p>I guess one question is whether to intern projections to a <code>List&lt;&gt;</code> or some sort of per-mir index, but that seems like not the \"high order bit\" to me, it's to some extent the easiest part</p>",
        "id": 176745661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591139
    },
    {
        "content": "<p>that's what I was trying to do, yeah</p>",
        "id": 176745666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591147
    },
    {
        "content": "<p>I would definitely <em>start</em> with <code>List&lt;&gt;</code></p>",
        "id": 176745674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591158
    },
    {
        "content": "<p>although... hmmm ...</p>",
        "id": 176745694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591183
    },
    {
        "content": "<p>yeah, to me is still not clear where to start</p>",
        "id": 176745706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591199
    },
    {
        "content": "<p>do I get rid of Static?</p>",
        "id": 176745711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591204
    },
    {
        "content": "<p>do I start interning projections?</p>",
        "id": 176745717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591209
    },
    {
        "content": "<p>I think that is clearly orthogonal</p>",
        "id": 176745719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591212
    },
    {
        "content": "<p>and things like that</p>",
        "id": 176745720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591212
    },
    {
        "content": "<p>getting rid of static</p>",
        "id": 176745724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591215
    },
    {
        "content": "<p>hold on, I'm rearranging a few things :)</p>",
        "id": 176745752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591242
    },
    {
        "content": "<p>so first thing to do would be to intern projections to <code>List</code></p>",
        "id": 176745789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591247
    },
    {
        "content": "<p>take a look at <a href=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\" target=\"_blank\" title=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\">the hackmd</a> now</p>",
        "id": 176745810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591282
    },
    {
        "content": "<p>I'm curious if everyone agrees with the organization I put there</p>",
        "id": 176745834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591293
    },
    {
        "content": "<p>I have to do a bit of code browsing though, the main reason I was thinking that maybe per-mir indices are \"interesting\" is that the MIR would still <em>own</em> their expanded contents</p>",
        "id": 176745943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591375
    },
    {
        "content": "<p>and hence <code>MutVisitor</code> might plausibly be retained in roughly its current form</p>",
        "id": 176745949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591383
    },
    {
        "content": "<blockquote>\n<p>take a look at <a href=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\" target=\"_blank\" title=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA\">the hackmd</a> now</p>\n</blockquote>\n<p>seems good</p>",
        "id": 176745957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591396
    },
    {
        "content": "<p>one thing I'm not entirely sure now is about the contruction step you mentioned at the beginning</p>",
        "id": 176745987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591421
    },
    {
        "content": "<p>yeah we could dig a bit into that</p>",
        "id": 176746007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591438
    },
    {
        "content": "<p>I mean, does it have some weird implication that I may not clearly see?</p>",
        "id": 176746008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591440
    },
    {
        "content": "<p>not that <em>I</em> see</p>",
        "id": 176746017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591446
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 176746022,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591452
    },
    {
        "content": "<p>so, for everyone's context, what I was talking about is that</p>",
        "id": 176746025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591453
    },
    {
        "content": "<p>when building MIR, we have functions like <code>fn foo() -&gt; Place</code></p>",
        "id": 176746040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591464
    },
    {
        "content": "<p>we build things recursively</p>",
        "id": 176746052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591471
    },
    {
        "content": "<p>so if you have <code>a.b.c....z</code> you would wind up interning <code>.b</code>, <code>.b.c</code>, <code>.b.c.d</code> etc</p>",
        "id": 176746106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591490
    },
    {
        "content": "<p>seems bad</p>",
        "id": 176746107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591492
    },
    {
        "content": "<p>but we could refactor to something like <code>fn foo() -&gt; PlaceBuilder</code> that builds up a vector</p>",
        "id": 176746112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591502
    },
    {
        "content": "<p>and retain the \"recursive\" form</p>",
        "id": 176746118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591506
    },
    {
        "content": "<p>and then when we \"convert\" that to a <code>Place</code>, it would intern only once</p>",
        "id": 176746126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591515
    },
    {
        "content": "<p>yeah, that seems easy to do, was one of the things I had on my todo list</p>",
        "id": 176746146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591533
    },
    {
        "content": "<p>oooh that's what you meant by builder. basically <code>Place&lt;Vec&gt;</code> :P</p>",
        "id": 176746149,
        "sender_full_name": "eddyb",
        "timestamp": 1569591536
    },
    {
        "content": "<p>yes</p>",
        "id": 176746167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591544
    },
    {
        "content": "<p>lol, you really want that generic thing :)</p>",
        "id": 176746182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591551
    },
    {
        "content": "<p>That seems much nicer than trying to radically rewrite construction to an iterative form which (imo) will also be less natural</p>",
        "id": 176746185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591557
    },
    {
        "content": "<p>Though I could be persuaded otherwise</p>",
        "id": 176746196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591566
    },
    {
        "content": "<p>but even then</p>",
        "id": 176746199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591568
    },
    {
        "content": "<p>I'd still want to do the builder approach <em>first</em></p>",
        "id": 176746202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591573
    },
    {
        "content": "<p>to try and separate concerns</p>",
        "id": 176746204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591576
    },
    {
        "content": "<blockquote>\n<p>lol, you really want that generic thing :)</p>\n</blockquote>\n<p>which to be honest, seems good <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 176746209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591585
    },
    {
        "content": "<p>I'm vaguely negative on the generic thing :P</p>",
        "id": 176746216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591593
    },
    {
        "content": "<p>(we don't have HKT anyway)</p>",
        "id": 176746271,
        "sender_full_name": "eddyb",
        "timestamp": 1569591603
    },
    {
        "content": "<p>only because ... how much code re-use are we really enabling here</p>",
        "id": 176746274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591608
    },
    {
        "content": "<p>and it seems overall less obvious to people reading the codebase</p>",
        "id": 176746282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591618
    },
    {
        "content": "<blockquote>\n<p>That seems much nicer than trying to radically rewrite construction to an iterative form which (imo) will also be less natural</p>\n</blockquote>\n<p>defitely, I have tried to do it and it's really less natural</p>",
        "id": 176746291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591627
    },
    {
        "content": "<p>this is a tuple of two fields people :P</p>",
        "id": 176746295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591630
    },
    {
        "content": "<p>existing construction matches up a list of projections much better though, because <code>Vec::push</code> is at the end - iteration is the problem, because it's from the start to the end but our projection recursions were always from the end</p>",
        "id": 176746300,
        "sender_full_name": "eddyb",
        "timestamp": 1569591634
    },
    {
        "content": "<blockquote>\n<p>and it seems overall less obvious to people reading the codebase</p>\n</blockquote>\n<p>agree on this yeah, I was mentioning the benefits, not the drawbacks :P</p>",
        "id": 176746328,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591661
    },
    {
        "content": "<p>sorry, construction matches <em>what</em> better (and better than <em>what</em>)?</p>",
        "id": 176746336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591664
    },
    {
        "content": "<p>recursion -&gt; iterating tends to work out while recursion -&gt; iterat<em>or</em> is a hard problem in general</p>",
        "id": 176746360,
        "sender_full_name": "eddyb",
        "timestamp": 1569591680
    },
    {
        "content": "<p>(it seems like <code>PlaceRef</code> is the \"counterpart\" to <code>PlaceBuilder</code>, for those cases where consuming by recursion is more natural, but those are relatively few)</p>",
        "id": 176746365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591682
    },
    {
        "content": "<p>ok so I think you mean <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that converting recursive code that <em>consumed</em> a place is relatively easy</p>",
        "id": 176746419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591720
    },
    {
        "content": "<p>But converting recursive code that <em>builds</em> a place, not so much</p>",
        "id": 176746476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591727
    },
    {
        "content": "<p>(did I understand correctly?)</p>",
        "id": 176746505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591746
    },
    {
        "content": "<p>yeah, and it also feels pointless to turn things into iterators unless the data they're working on happens to be iterator-friendly in the first place</p>",
        "id": 176746541,
        "sender_full_name": "eddyb",
        "timestamp": 1569591775
    },
    {
        "content": "<blockquote>\n<p>But converting recursive code that <em>builds</em> a place, not so much</p>\n</blockquote>\n<p>it definitely seems like that, and more with projection being a slice :)</p>",
        "id": 176746548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591784
    },
    {
        "content": "<p>as long as projections are always appended, the builder suggestion seems perfect and we don't need to bother with iterator contraptions</p>",
        "id": 176746593,
        "sender_full_name": "eddyb",
        "timestamp": 1569591819
    },
    {
        "content": "<p>ok, so do we have consensus on <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Place's.20projection.20interning.20design.20meeting.20.3F/near/176746025\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Place's.20projection.20interning.20design.20meeting.20.3F/near/176746025\">this section on construction</a>?</p>",
        "id": 176746649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591845
    },
    {
        "content": "<p>(we can use SmallVec or something if really necessary etc.)</p>",
        "id": 176746657,
        "sender_full_name": "eddyb",
        "timestamp": 1569591853
    },
    {
        "content": "<blockquote>\n<p>yeah, and it also feels pointless to turn things into iterators unless the data they're working on happens to be iterator-friendly in the first place</p>\n</blockquote>\n<p>one of the cool things I ended adding is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L1300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L1300\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L1300</a>, unsure if people have different opinions</p>",
        "id": 176746682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591877
    },
    {
        "content": "<p>but in general you need the elem and the proj_base</p>",
        "id": 176746692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591891
    },
    {
        "content": "<p>that link didn't work for me</p>",
        "id": 176746700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591901
    },
    {
        "content": "<p>woah</p>",
        "id": 176746724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591929
    },
    {
        "content": "<p>sorry, took that from a current local branch</p>",
        "id": 176746727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591934
    },
    {
        "content": "<p>oh, that's the recursive stuff I was talking about</p>",
        "id": 176746729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591937
    },
    {
        "content": "<p>yeah, makes sense</p>",
        "id": 176746748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591952
    },
    {
        "content": "<p>I feel like it might be more obvious if we encapsulated that in a pattern but +1 overall</p>",
        "id": 176746798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569591970
    },
    {
        "content": "<blockquote>\n<p>I feel like it might be more obvious if we encapsulated that in a pattern but +1 overall</p>\n</blockquote>\n<p>say more about that, unsure I got it :)</p>",
        "id": 176746825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569591996
    },
    {
        "content": "<p>we used to do this a lot even with the recursive projections, because loops are nicer than writing recursive functions most of the time</p>",
        "id": 176746855,
        "sender_full_name": "eddyb",
        "timestamp": 1569592022
    },
    {
        "content": "<p>the bad thing is having the mut cursor around, but with that pattern there seems a nice way to iterate</p>",
        "id": 176746861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592025
    },
    {
        "content": "<p>I was just saying that I'd imagine that code to be also expressable via something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PlaceRef</span>::<span class=\"n\">from</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">pop_back</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176746883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592053
    },
    {
        "content": "<p>you can just use a slice iterator, I think?</p>",
        "id": 176746904,
        "sender_full_name": "eddyb",
        "timestamp": 1569592079
    },
    {
        "content": "<p>where <code>pop_back</code> returns <code>&amp;mut ProjectionElement</code> and adjusts the <code>cursor</code> in place</p>",
        "id": 176746937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592082
    },
    {
        "content": "<p>(and yeah I think there are some slice methods that are similar)</p>",
        "id": 176746953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592088
    },
    {
        "content": "<p>like, <code>std::slice::Iter</code> has a method to turn it back into a slice, I think</p>",
        "id": 176746998,
        "sender_full_name": "eddyb",
        "timestamp": 1569592128
    },
    {
        "content": "<p>e.g., <code>cursor.split_last_mut</code>, analogous to <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut\">slice:split_last_mut</a></p>",
        "id": 176747026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592162
    },
    {
        "content": "<p>yeah but I think we want methods on <code>PlaceRef</code></p>",
        "id": 176747035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592169
    },
    {
        "content": "<p>that retain the placebase</p>",
        "id": 176747044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592173
    },
    {
        "content": "<p>I mean you can also do it on slices, but e.g. see <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L1307\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L1307\">this cod here</a>, that rebuilds the <code>PlaceRef</code></p>",
        "id": 176747064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592193
    },
    {
        "content": "<p>anyway, a bit afield</p>",
        "id": 176747069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592196
    },
    {
        "content": "<p>we've only got 10 minutes before design meeting</p>",
        "id": 176747159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592235
    },
    {
        "content": "<p>it seems like we settled a lot</p>",
        "id": 176747164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592238
    },
    {
        "content": "<p>I was going to say exactly that</p>",
        "id": 176747186,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592252
    },
    {
        "content": "<p>yeah</p>",
        "id": 176747191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592254
    },
    {
        "content": "<p>so, I can start with things from <a href=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA?view\" target=\"_blank\" title=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA?view\">https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA?view</a></p>",
        "id": 176747204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592265
    },
    {
        "content": "<p>I think one open question that remains is what to do about the <code>MutVisitor</code>, but I want to investigate if we could <em>start</em> (and maybe finish!) by moving to per-MIR indices, though that carries some 'portability' cost of its own, not sure if that's easier (in particular, you can't just deref the projections slice anymore, ooooh, right, and these tricks you're doing here wouldn't work)</p>",
        "id": 176747215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592277
    },
    {
        "content": "<p>never mind, I think we should do <code>List&lt;&gt;</code> first :)</p>",
        "id": 176747220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592284
    },
    {
        "content": "<p>yeah to both things :)</p>",
        "id": 176747238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592297
    },
    {
        "content": "<p>well, I guess you still <em>could</em></p>",
        "id": 176747257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592321
    },
    {
        "content": "<p>do the slicing tricks</p>",
        "id": 176747295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592324
    },
    {
        "content": "<p>but it wouldl still mean that you need to do something like <code>mir.projections(index)</code> instead of just <code>place.projections</code></p>",
        "id": 176747316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592344
    },
    {
        "content": "<blockquote>\n<p>do the slicing tricks</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 176747317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592346
    },
    {
        "content": "<p>what I mean is that <code>mir.projections(index)</code> can return a <code>&amp;[Projection]</code> borrowed from the MIR, which can be sliced etc. But that might be a pain sometimes.</p>",
        "id": 176747340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592372
    },
    {
        "content": "<p>having <code>a.b.c</code> not take up extra interning memory if <code>a.b.c.d</code> exists</p>",
        "id": 176747349,
        "sender_full_name": "oli",
        "timestamp": 1569592379
    },
    {
        "content": "<p>no, I didn't actually mean that</p>",
        "id": 176747370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592397
    },
    {
        "content": "<p>oh</p>",
        "id": 176747372,
        "sender_full_name": "oli",
        "timestamp": 1569592401
    },
    {
        "content": "<p>although that's a thing too :)</p>",
        "id": 176747377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592405
    },
    {
        "content": "<p>what I mean is that if you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"n\">projections</span>: <span class=\"nc\">ProjectionIndex</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176747483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592466
    },
    {
        "content": "<p>and you had that index into a list of projections on the MIR</p>",
        "id": 176747499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592474
    },
    {
        "content": "<p>that'd have some interesting characteristics but would also be a pain and overall I don't think it's the right first step (and maybe not ever right)</p>",
        "id": 176747520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592492
    },
    {
        "content": "<p>what you're saying <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> seems to be more about <code>&amp;[Projection]</code> vs <code>List&lt;Projection&gt;</code>, confirm?</p>",
        "id": 176747567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592517
    },
    {
        "content": "<p>yes</p>",
        "id": 176747577,
        "sender_full_name": "oli",
        "timestamp": 1569592526
    },
    {
        "content": "<p>( I noted it in the hackmd, btw, it wasn't something we'd explicitly discussed before )</p>",
        "id": 176747606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592540
    },
    {
        "content": "<p><span aria-label=\"time\" class=\"emoji emoji-1f557\" role=\"img\" title=\"time\">:time:</span> 5 minute warning</p>",
        "id": 176747611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569592542
    },
    {
        "content": "<p>Yep, thanks &lt;3</p>",
        "id": 176747627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592552
    },
    {
        "content": "<p>so the nice thing is</p>",
        "id": 176747683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592565
    },
    {
        "content": "<p>that I think the first steps for construction are something <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can pursue</p>",
        "id": 176747691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592573
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 176747703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592583
    },
    {
        "content": "<p>i.e., you can port over to a <code>PlaceBuilder</code> that builds a <code>Vec</code></p>",
        "id": 176747704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592585
    },
    {
        "content": "<p>where the final step converts frm <code>Vec</code> to the <code>Box&lt;[...]&gt;</code> we have today</p>",
        "id": 176747712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592592
    },
    {
        "content": "<p>(in fact, I'm not sure what we're doing today? reallocating?)</p>",
        "id": 176747720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592597
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176747724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592600
    },
    {
        "content": "<p>and that gives time to work out the remaining questions...</p>",
        "id": 176747743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592608
    },
    {
        "content": "<blockquote>\n<p>that I think the first steps for construction are something <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> can pursue</p>\n</blockquote>\n<p>yes and it's definitely a very easy thing to do</p>",
        "id": 176747752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592615
    },
    {
        "content": "<blockquote>\n<p>(in fact, I'm not sure what we're doing today? reallocating?)</p>\n</blockquote>\n<p>yes, I think so</p>",
        "id": 176747815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592670
    },
    {
        "content": "<p>should be a nice win for such an easy change I think</p>",
        "id": 176747883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592700
    },
    {
        "content": "<p>yep</p>",
        "id": 176747908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592724
    },
    {
        "content": "<p>cool, gotta run, any final thoughts? take a look at the <a href=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA?edit\" target=\"_blank\" title=\"https://hackmd.io/vHP5hbCKQkq-HW_tnuAsoA?edit\">hackmd doc</a>, maybe <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you want to add it to the compiler-team repo as minutes?</p>",
        "id": 176747946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569592747
    },
    {
        "content": "<p>I can definitely do that</p>",
        "id": 176747982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592776
    },
    {
        "content": "<p>and don't have any other thoughts for now, so <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> from my side :)</p>",
        "id": 176748011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569592798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you have mentioned in the meeting, a possible use of <code>SmallVec</code> for construction, if I got it right</p>",
        "id": 177079449,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569951811
    },
    {
        "content": "<p>with projection being a <code>Box&lt;PlaceElem&lt;'tcx&gt;&gt;</code> I think that using <code>SmallVec</code> is worser than just a <code>Vec</code></p>",
        "id": 177079563,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569951868
    },
    {
        "content": "<p>because at the end, when you do <code>into_place</code> on the builder you need to convert to <code>Box</code></p>",
        "id": 177079650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569951915
    },
    {
        "content": "<p>on <code>SmallVec</code> in order to go to <code>Box</code> you need to go through <code>Vec</code></p>",
        "id": 177079699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569951942
    },
    {
        "content": "<p>still that doesn't matter, the thing is you'd need to reallocate on the heap no matter how big or small that <code>SmallVec</code> is</p>",
        "id": 177079813,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569951999
    },
    {
        "content": "<p>I guess you were talking about possible wins with the <code>SmallVec</code> approach once we go to the interned projection solution</p>",
        "id": 177079890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569952025
    },
    {
        "content": "<p>right?</p>",
        "id": 177079891,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569952027
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 177089264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958087
    },
    {
        "content": "<p>I think what we meant was that</p>",
        "id": 177089287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958106
    },
    {
        "content": "<p>the builder would contain a <code>SmallVec&lt;Projection&gt;</code></p>",
        "id": 177089294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958114
    },
    {
        "content": "<p>maybe I need to check your PR to see what approach you used though</p>",
        "id": 177089303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/64922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64922\">https://github.com/rust-lang/rust/pull/64922</a></p>",
        "id": 177089341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958146
    },
    {
        "content": "<p>it's very simple</p>",
        "id": 177089343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958148
    },
    {
        "content": "<p>I guessed that you wanted me to use <code>SmallVec</code> instead of <code>Vec</code> in the builder, but to me doesn't seem to make a lot of sense until we move to interning</p>",
        "id": 177089381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958178
    },
    {
        "content": "<p>unsure, I may have understood something wrong</p>",
        "id": 177089396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958189
    },
    {
        "content": "<p>basically there are two things related to that PR</p>",
        "id": 177089474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958210
    },
    {
        "content": "<p>one is that it's not giving a huge perf improvement</p>",
        "id": 177089486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958219
    },
    {
        "content": "<p>and the other is that one about <code>SmallVec</code></p>",
        "id": 177089500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958228
    },
    {
        "content": "<blockquote>\n<p>I guessed that you wanted me to use <code>SmallVec</code> instead of <code>Vec</code> in the builder, but to me doesn't seem to make a lot of sense until we move to interning</p>\n</blockquote>\n<p>oh, I see, because we're going to have to make a <code>Box&lt;[Elem]&gt;</code> eventually, you're saying</p>",
        "id": 177089831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958459
    },
    {
        "content": "<p>yeah that seems fine</p>",
        "id": 177089872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958501
    },
    {
        "content": "<p>seems fine means that I'm correct or that I need to do that and it will be fine</p>",
        "id": 177090005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958597
    },
    {
        "content": "<p>to me seems like I'd be converting back and forth with no wins</p>",
        "id": 177090021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958610
    },
    {
        "content": "<p>yeah, it's just a micro-optimization at best anyway</p>",
        "id": 177090028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958618
    },
    {
        "content": "<p>yeah but I guess that works once you want to go to things like <code>&amp;[T]</code></p>",
        "id": 177090059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958639
    },
    {
        "content": "<p>so when <code>projection</code> as <code>SmallVec</code> is small and it's there as an array you can just use a pointer to it, or even copy the array</p>",
        "id": 177090120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958682
    },
    {
        "content": "<p>but not if at the end you need to convert to <code>Box</code></p>",
        "id": 177090171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958692
    },
    {
        "content": "<p>it's like you start with an array to avoid allocating on the heap but end allocating there anyway</p>",
        "id": 177090191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958712
    },
    {
        "content": "<p>so seems better to just go with Vec since the beginning</p>",
        "id": 177090202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958727
    },
    {
        "content": "<p>I think <code>SmallVec</code> might help because, when you do the interning, you need to copy to the <code>Arena</code>. So by using <code>SmallVec</code> we potentially avoid allocating a <code>Vec</code> that just gets copied into the <code>Arena</code> and then discarded.</p>",
        "id": 177090374,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569958868
    },
    {
        "content": "<p>But yeah, if we're not interning yet, then its probably not actually an optimization.</p>",
        "id": 177090418,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569958923
    },
    {
        "content": "<p>exactly, I was saying it doesn't seem to be useful meanwhile we are not interning</p>",
        "id": 177090483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958947
    },
    {
        "content": "<p>after interning is a different story :)</p>",
        "id": 177090490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958955
    }
]