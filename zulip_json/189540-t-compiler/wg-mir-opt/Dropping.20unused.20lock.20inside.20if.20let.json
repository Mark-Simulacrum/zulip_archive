[
    {
        "content": "<p>Hi everyone, someone showed me this snippet of code that doesn't compile: <a href=\"https://play.integer32.com/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=3396ab547a96ec73b1983b79ebe5f49e\">https://play.integer32.com/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=3396ab547a96ec73b1983b79ebe5f49e</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">RwLock</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RwLock</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I wanted to know if there's something wrong with dropping the first read lock just after jumping to the next basic block instead of dropping it after the <code>if let</code> expression.</p>",
        "id": 218873531,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1607106788
    },
    {
        "content": "<p>What do you mean by \"it doesn't compile\"? I clicked the Playground link you included and it compiles fine.</p>",
        "id": 218893183,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607117187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Compiling playground v0.0.1 (/playground)\n    Finished release [optimized] target(s) in 0.60s\n</code></pre></div>",
        "id": 218893205,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607117201
    },
    {
        "content": "<p>I assume this panics because of the double lock</p>",
        "id": 218893222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607117212
    },
    {
        "content": "<p>So it fails <em>at runtime</em>?</p>",
        "id": 218893243,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607117230
    },
    {
        "content": "<p>but I think that this can't be \"fixed\" because drop order is fixed by the language</p>",
        "id": 218893269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607117252
    },
    {
        "content": "<p>Actually it hangs on the Playground...</p>",
        "id": 218893351,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607117293
    },
    {
        "content": "<p>it's deadlocked?</p>",
        "id": 218893501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607117397
    },
    {
        "content": "<p>Hmm, is <code>RwLock</code> upgradable?  It's not clear at all to me that using only temporary guards here is correct -- something else could have changed it between the read and write, no?</p>",
        "id": 218893605,
        "sender_full_name": "scottmcm",
        "timestamp": 1607117455
    },
    {
        "content": "<p>(But I never remember the details of temporary lifetimes, and whether this would be fixed by using a <code>match</code> instead, or similar weird edge cases...)</p>",
        "id": 218893685,
        "sender_full_name": "scottmcm",
        "timestamp": 1607117511
    },
    {
        "content": "<blockquote>\n<p>I wanted to know if there's something wrong with dropping the first read lock just after jumping to the next basic block instead of dropping it after the if let expression.</p>\n</blockquote>\n<p>You'll have to convince the language team, not wg-mir-opt, as this is simply how lifetimes in <code>match</code> expressions are specified to behave. Changing that would be a subtle breaking change to the language semantics.</p>",
        "id": 218893895,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607117617
    },
    {
        "content": "<p>This isn't about lifetimes, it's about drop rules</p>",
        "id": 218894026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607117666
    },
    {
        "content": "<p>The range of code between an object's creation and its destructor getting invoked is generally called the object's lifetime</p>",
        "id": 218894173,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607117762
    },
    {
        "content": "<p>Certainly the lifetime for temporaries in the scrutinee have to extend to after the match in at least some cases, and so that's where the drop glue goes; after NLL and other such lifetime improvements the drop glue did not move because that would change the language's observable behavior</p>",
        "id": 218894185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607117763
    },
    {
        "content": "<p>The intended behavior here is also explained in the reference: <a href=\"https://doc.rust-lang.org/reference/destructors.html#temporary-scopes\">https://doc.rust-lang.org/reference/destructors.html#temporary-scopes</a></p>\n<p>Specifically, it calls out:</p>\n<blockquote>\n<p>The scrutinee of a match expression is not a temporary scope, so temporaries in the scrutinee can be dropped after the match expression. For example, the temporary for 1 in match 1 { ref mut z =&gt; z }; lives until the end of the statement.</p>\n</blockquote>",
        "id": 218894272,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607117807
    },
    {
        "content": "<p>yes my bad, it compiles but deadlocks.</p>",
        "id": 218894949,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1607118209
    },
    {
        "content": "<p>You can fix the deadlock by writing <code>{let g = a.read().unwrap(); *g}</code> in the if statement to force the temporary to be dropped</p>",
        "id": 218896864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607119369
    },
    {
        "content": "<p>That doesn't fix the locking semantics, though.</p>",
        "id": 218946532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607192618
    },
    {
        "content": "<p>You either need an upgradable lock, or you need to take the write lock to begin with, or you need a different primitive.</p>",
        "id": 218946578,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607192665
    }
]