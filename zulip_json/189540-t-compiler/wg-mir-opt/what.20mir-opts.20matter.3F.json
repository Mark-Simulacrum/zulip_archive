[
    {
        "content": "<p>Writing optimizations is always fun, i love seeing test cases shrink but for rustc it seems like the real objective is to pre-chew MIR so that LLVM will have less to do. In that context, do we have any idea what actually matters? or are we just hoping that doing enough optimizations in rustc will cut down the emitted IR enough to make compilation faster?</p>\n<p>Sorry if this has been answered but I didn't find anything on this in the compiler-team repo</p>",
        "id": 204649925,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595413508
    },
    {
        "content": "<p>P.S. if there are more issues, I'd be happy to work on them</p>",
        "id": 204649942,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595413529
    },
    {
        "content": "<p>well, we aren't just hoping, we're seeing this happening, but we don't have a structured approach for finding optimizations that will have an effect</p>",
        "id": 204662366,
        "sender_full_name": "oli",
        "timestamp": 1595423204
    },
    {
        "content": "<p>in some cases it's not even about llvm, but about shrinking MIR so later mir passes call fewer queries, which definitely has had an effect in the past</p>",
        "id": 204662425,
        "sender_full_name": "oli",
        "timestamp": 1595423237
    },
    {
        "content": "<p>i noticed that we don't currently do the optimizations described in Stacked Borrows and LLVM doesn't seem to pick up on them either. Is this something on the roadmap?  specifically thinking of things like <code>*x = 5; *y = 10; do_something_with_x(*x)</code></p>",
        "id": 204675064,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429034
    },
    {
        "content": "<p>ohh, that's very interesting if LLVM doesn't do that</p>",
        "id": 204675172,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429077
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/s4od4W\">https://rust.godbolt.org/z/s4od4W</a></p>",
        "id": 204675207,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429097
    },
    {
        "content": "<p>do you have a playground link with that example?</p>",
        "id": 204675209,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429100
    },
    {
        "content": "<p>oh</p>",
        "id": 204675211,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429101
    },
    {
        "content": "<p>nice</p>",
        "id": 204675214,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429102
    },
    {
        "content": "<p>Pretty sure that's just the <code>noalias</code> issue</p>",
        "id": 204675248,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595429122
    },
    {
        "content": "<p>(PS: sometimes I use playgrounds because you can directly ask for the MIR output :D)</p>",
        "id": 204675259,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429126
    },
    {
        "content": "<p>im guessing this case could be picked up by NRVO but it can be generalized as well</p>",
        "id": 204675274,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429134
    },
    {
        "content": "<p>yea but I wanted to see if LLVM was doing something clever afterwards</p>",
        "id": 204675310,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429153
    },
    {
        "content": "<p>you need -Zmutable-noalias, yeah</p>",
        "id": 204675379,
        "sender_full_name": "simulacrum",
        "timestamp": 1595429167
    },
    {
        "content": "<p>LLVM is buggy with it sometimes though which is why it's (still) off by default</p>",
        "id": 204675413,
        "sender_full_name": "simulacrum",
        "timestamp": 1595429180
    },
    {
        "content": "<p>yeah, without noalias there's not much that can be done I reckon</p>",
        "id": 204675425,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429184
    },
    {
        "content": "<p>so fwiw LLVM is working on this atm</p>",
        "id": 204675461,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429200
    },
    {
        "content": "<p>some people in the community have picked up the slack there and have made a sorts of working group for noalias</p>",
        "id": 204675495,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429219
    },
    {
        "content": "<p>there are fortran folks there, which is super interesting. Fortran of course is one of the most prominent use cases for noalias, together with Rust</p>",
        "id": 204675561,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429257
    },
    {
        "content": "<p>imma send you links</p>",
        "id": 204675575,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204675413\">said</a>:</p>\n<blockquote>\n<p>LLVM is buggy with it sometimes though which is why it's (still) off by default</p>\n</blockquote>\n<p>that makes sense. i guess we could also do this in MIR though</p>",
        "id": 204675580,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429270
    },
    {
        "content": "<p>Okay so they get together around once a month</p>",
        "id": 204675671,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429299
    },
    {
        "content": "<p><a href=\"https://docs.google.com/document/d/1ybwEKDVtIbhIhK50qYtwKsL50K-NvB6LfuBsfepBZ9Y/edit#heading=h.vpxs8lkuxy79\">https://docs.google.com/document/d/1ybwEKDVtIbhIhK50qYtwKsL50K-NvB6LfuBsfepBZ9Y/edit#heading=h.vpxs8lkuxy79</a></p>",
        "id": 204675673,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429299
    },
    {
        "content": "<p>that document tracks everything more or less</p>",
        "id": 204675703,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429309
    },
    {
        "content": "<p>This doesn't look like a typical NRVO pattern</p>",
        "id": 204675730,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595429322
    },
    {
        "content": "<p>you can scroll to see the details of every meeting</p>",
        "id": 204675737,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429326
    },
    {
        "content": "<p>one can join them as well</p>",
        "id": 204675748,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429336
    },
    {
        "content": "<p>If you look at the mailing list once a week you can find new posts regarding this: <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2020-July/143388.html\">http://lists.llvm.org/pipermail/llvm-dev/2020-July/143388.html</a> (that's the doodle poll for the last meeting, which happened about a week ago)</p>",
        "id": 204675964,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204675730\">said</a>:</p>\n<blockquote>\n<p>This doesn't look like a typical NRVO pattern</p>\n</blockquote>\n<p>that's what I thought but it is described as the first example in Stacked Borrows, so it seems like it should be valid for Rust</p>",
        "id": 204675993,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429440
    },
    {
        "content": "<p>Anywho, I'm super excited for this work. Having noalias actually work in LLVM could bring Rust code beyond C performance in many, many use cases</p>",
        "id": 204676044,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429471
    },
    {
        "content": "<p>(just like Fortran! XD)</p>",
        "id": 204676066,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429486
    },
    {
        "content": "<p>Yeah this is definitely optimizable, but not via NRVO</p>",
        "id": 204676236,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595429560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204675993\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204675730\">said</a>:</p>\n<blockquote>\n<p>This doesn't look like a typical NRVO pattern</p>\n</blockquote>\n<p>that's what I thought but it is described as the first example in Stacked Borrows, so it seems like it should be valid for Rust</p>\n</blockquote>\n<p>It is! In fact if you think about it, Rust can guarantee lack of aliasing in like, most parts of all programs. Thanks to the borrow checker and all that</p>",
        "id": 204676257,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> yes but to justify the optimization we must also consider how <code>unsafe</code> code could potentially break it</p>",
        "id": 204676359,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429617
    },
    {
        "content": "<p>It's just that we (re?)discovered a <code>noalias</code> optimization bug in LLVM with the amount of non aliasing pairs of references that can be created in Rust. And after that discovery, it was disabled in <code>rustc</code></p>",
        "id": 204676462,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204676359\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> yes but to justify the optimization we must also consider how <code>unsafe</code> code could potentially break it</p>\n</blockquote>\n<p>ahhhh I see</p>",
        "id": 204676501,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429663
    },
    {
        "content": "<p>Okay since I don't know enough about this, and considering that we're already talking about Stacked Borrows, imma summon <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> to the conversation :3</p>",
        "id": 204676648,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429730
    },
    {
        "content": "<p>He probably knows what we can do wrt <code>unsafe</code> here</p>",
        "id": 204676783,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429776
    },
    {
        "content": "<p>there's no real need</p>",
        "id": 204676802,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429786
    },
    {
        "content": "<p>the paper already shows how this transformation is safe for programs that respect Stacked Borrows</p>",
        "id": 204676890,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429824
    },
    {
        "content": "<p>But don't you mean that interior aliasing could break the optimization in unsafe code?</p>",
        "id": 204676901,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429828
    },
    {
        "content": "<p>oh</p>",
        "id": 204676903,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429830
    },
    {
        "content": "<p>OHHH</p>",
        "id": 204676910,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429832
    },
    {
        "content": "<p>omg, that is amazing</p>",
        "id": 204676926,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429837
    },
    {
        "content": "<p>holy crap</p>",
        "id": 204676945,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429847
    },
    {
        "content": "<p>I was just curious if it we had implemented it / were implemnting it</p>",
        "id": 204676947,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595429847
    },
    {
        "content": "<p>I see</p>",
        "id": 204676962,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429857
    },
    {
        "content": "<p>mmm... well I would honestly wait for LLVM to complete their move</p>",
        "id": 204677003,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429872
    },
    {
        "content": "<p>From what I've seen in that \"working group\", they have a lot of momentum</p>",
        "id": 204677078,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429891
    },
    {
        "content": "<p>but also I wonder if we can optimize some cases where LLVM could not, even if their <code>noalias</code> opt were sound</p>",
        "id": 204677215,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429949
    },
    {
        "content": "<p>do you reckon we can?</p>",
        "id": 204677231,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429960
    },
    {
        "content": "<p>(with regards to non-aliasing reference optimizations)</p>",
        "id": 204677313,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595429998
    },
    {
        "content": "<p>I suspect one of the issues here is that while Stacked Borrows is a model of the borrowing system that has desirable properties, it's not the officially blessed one (yet).</p>",
        "id": 204677506,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> because the official semantics haven't been defined (yet)?</p>",
        "id": 204677563,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595430111
    },
    {
        "content": "<p>Yeah AFAIK</p>",
        "id": 204677573,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430120
    },
    {
        "content": "<p>mm, that makes sense</p>",
        "id": 204677622,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595430127
    },
    {
        "content": "<p>I mean, it's very promising and I think it probably will be the eventual model</p>",
        "id": 204677645,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430140
    },
    {
        "content": "<p>But there's been no RFC yet to make that official</p>",
        "id": 204677671,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430152
    },
    {
        "content": "<p>There's also a much bigger focus on getting compile time improvements from mir-opts than runtime performance (in general).</p>",
        "id": 204677724,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430185
    },
    {
        "content": "<p>We generally don't get a lot of complaints about runtime performance especially in comparison to compile time performance.</p>",
        "id": 204677770,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430212
    },
    {
        "content": "<p>Right, right</p>",
        "id": 204677924,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595430278
    },
    {
        "content": "<p>I mean I've heard from people running debug builds in production, happy with runtime performance, only to be blown away by the <em>actual</em> runtime performance of their program after recompiling to release mode</p>",
        "id": 204678029,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595430332
    },
    {
        "content": "<p>Yeah, that's always amusing.</p>",
        "id": 204678162,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430373
    },
    {
        "content": "<p>Some of us come from ecosystems where <code>Release</code> mode is +30% or something. Not 100x faster.</p>",
        "id": 204678223,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/what.20mir-opts.20matter.3F/near/204676044\">said</a>:</p>\n<blockquote>\n<p>Anywho, I'm super excited for this work. Having noalias actually work in LLVM could bring Rust code beyond C performance in many, many use cases</p>\n</blockquote>\n<p>Not without fixing <a href=\"https://github.com/rust-lang/rust/issues/74183\">#74183</a>. Pattern matching is used quite a lot in Rust code.</p>",
        "id": 204682174,
        "sender_full_name": "lzutao",
        "timestamp": 1595432037
    },
    {
        "content": "<p>Oh wow. Fair enough.</p>\n<p>Although you could say that both are needed :P</p>",
        "id": 204687318,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595434315
    },
    {
        "content": "<p>there's still some very interesting theoretical open questions here -- what exactly are LLVM's new noalias semantics (once they materialize), and can we relate them formally to Stacked Borrows?</p>",
        "id": 204787153,
        "sender_full_name": "RalfJ",
        "timestamp": 1595505716
    },
    {
        "content": "<p>looks like at some point I'll have to look for coauthors with LLVM experience to make that a paper ;)</p>",
        "id": 204787325,
        "sender_full_name": "RalfJ",
        "timestamp": 1595505797
    }
]