[
    {
        "content": "<p>I've talked with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> some days ago and now with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about removing unevaluated dead constants as defined per nll</p>",
        "id": 193105074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586208903
    },
    {
        "content": "<p>I was wondering how to do so</p>",
        "id": 193105085,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586208908
    },
    {
        "content": "<p>Right so what I was saying is that:</p>\n<ul>\n<li>when borrowck runs, there is already some notion of \"live code\" (whatever is reachable from MIR start)</li>\n</ul>",
        "id": 193105125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208937
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 193105133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586208943
    },
    {
        "content": "<p>and the rough idea here is that we want to find the constants reachable from that code and report errors that occur in their definitions</p>",
        "id": 193105144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208951
    },
    {
        "content": "<p>even if we might find <em>later</em> that some of that code is dead</p>",
        "id": 193105154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208958
    },
    {
        "content": "<p>(e.g., because of <code>if false { ... }</code>)</p>",
        "id": 193105202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208965
    },
    {
        "content": "<p>at least that is my memory</p>",
        "id": 193105230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208979
    },
    {
        "content": "<p>but what I don't remember quite is how/when the constant error reporting actually happens</p>",
        "id": 193105247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586208988
    },
    {
        "content": "<p>wouldn't keeping all the constants outside of the basic blocks let them be removed freely from inside basic blocks?</p>",
        "id": 193105258,
        "sender_full_name": "eddyb",
        "timestamp": 1586208994
    },
    {
        "content": "<p>btw this is about <a href=\"https://github.com/rust-lang/rust/issues/67191\" title=\"https://github.com/rust-lang/rust/issues/67191\">#67191</a></p>",
        "id": 193105264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586208998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105258\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105258\">said</a>:</p>\n<blockquote>\n<p>wouldn't keeping all the constants outside of the basic blocks let them be removed freely from inside basic blocks?</p>\n</blockquote>\n<p>but we want to remove the ones from this new vector I was adding</p>",
        "id": 193105322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209043
    },
    {
        "content": "<p>so we do not error on <code>return something; refer_to_constant</code></p>",
        "id": 193105354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209074
    },
    {
        "content": "<p>but don't we want to error on that?</p>",
        "id": 193105404,
        "sender_full_name": "eddyb",
        "timestamp": 1586209085
    },
    {
        "content": "<p>I'm slightly confused :)</p>",
        "id": 193105408,
        "sender_full_name": "eddyb",
        "timestamp": 1586209089
    },
    {
        "content": "<p>to be honest at some point I was talking with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> about this and I do not understand</p>",
        "id": 193105442,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209112
    },
    {
        "content": "<p>but read somewhere that this was defined on a lang meeting</p>",
        "id": 193105455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209123
    },
    {
        "content": "<p>I don't understand why doing more work to report less errors is better but I guess consistency is what was considered more important</p>",
        "id": 193105498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209160
    },
    {
        "content": "<p>if we want to keep only some consts, collect them just after the post-NLL simplifycfg or w/e</p>",
        "id": 193105511,
        "sender_full_name": "eddyb",
        "timestamp": 1586209173
    },
    {
        "content": "<p>before any optimizations that could remove consts in non-dead code</p>",
        "id": 193105546,
        "sender_full_name": "eddyb",
        "timestamp": 1586209195
    },
    {
        "content": "<p>I think that is roughly what we want to do -- but I'm not 100% sure what you mean by \"collect\" in that sentence</p>",
        "id": 193105686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209276
    },
    {
        "content": "<p>gather them into the separate <code>Vec&lt;ty::Const&gt;</code> that <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> wants to add</p>",
        "id": 193105822,
        "sender_full_name": "eddyb",
        "timestamp": 1586209332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> also told me</p>\n<div class=\"codehilite\"><pre><span></span>I guess we could make NLL fill in that array\nbut I don&#39;t like it\nI&#39;d rather do a post-NLL optimization pass that removes all things NLL decided are unreachable\n(which... should be very easy, because it simply is everything that still exists at that point)\nso DCE after NLL would also clean up those constants\n</pre></div>",
        "id": 193105933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209384
    },
    {
        "content": "<p>yeah I just don't 100% know where that vector 'lives' -- anyway I'm basically asking questions that are quite ignorant from not skimming the code.</p>",
        "id": 193105948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209391
    },
    {
        "content": "<p>in my imagination there is some pass that walks the MIR and tries to evaluate constants it finds and reports errors</p>",
        "id": 193105973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105948\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105948\">said</a>:</p>\n<blockquote>\n<p>yeah I just don't 100% know where that vector 'lives' -- anyway I'm basically asking questions that are quite ignorant from not skimming the code.</p>\n</blockquote>\n<p>the vector lives in mir body</p>",
        "id": 193106023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209435
    },
    {
        "content": "<p>I see, and we later iterate over this vector?</p>",
        "id": 193106088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209451
    },
    {
        "content": "<p>yeah in codegen</p>",
        "id": 193106100,
        "sender_full_name": "eddyb",
        "timestamp": 1586209458
    },
    {
        "content": "<p>yes</p>",
        "id": 193106103,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105973\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105973\">said</a>:</p>\n<blockquote>\n<p>in my imagination there is some pass that walks the MIR and tries to evaluate constants it finds and reports errors</p>\n</blockquote>\n<p>the problem with this is that before this new PR, that happened but only with live constants not with the ones unreachable</p>",
        "id": 193106146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209485
    },
    {
        "content": "<p>then yes this seems roughly right. I guess the fact that we have an <code>&amp;mut Body</code> means we can basically either remove things from the vector or have it be empty and just populate it at the right time?</p>",
        "id": 193106153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209490
    },
    {
        "content": "<p>and we want to check the ones that are not reachable to report errors</p>",
        "id": 193106173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209502
    },
    {
        "content": "<p>well I <em>think</em> the idea was to report errors for live constants, but we just have to be sure which definition of \"live\" we want to use</p>",
        "id": 193106219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209525
    },
    {
        "content": "<p>ohh right, I didn't mean live in the nll sense of live :)</p>",
        "id": 193106258,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209551
    },
    {
        "content": "<p>i.e., if we just walk the set of blocks reachable from the start block (at the time of borrow check, before doing any optimizations), then it's any constants referenced from within those blocks?</p>",
        "id": 193106309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209565
    },
    {
        "content": "<p>I meant stuff that is reachable and wasn't optimized away</p>",
        "id": 193106319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209573
    },
    {
        "content": "<p>alternatively, if we run DCE (which we maybe even already do, I can't remember) before doing any other optimizations, then it's just \"all blocks\"</p>",
        "id": 193106352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193106153\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193106153\">said</a>:</p>\n<blockquote>\n<p>then yes this seems roughly right. I guess the fact that we have an <code>&amp;mut Body</code> means we can basically either remove things from the vector or have it be empty and just populate it at the right time?</p>\n</blockquote>\n<p>sorry, didn't get what's roughly right?</p>",
        "id": 193106514,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209685
    },
    {
        "content": "<p>what <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105511\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193105511\">wrote here</a>:</p>\n<blockquote>\n<p>if we want to keep only some consts, collect them just after the post-NLL simplifycfg or w/e</p>\n</blockquote>",
        "id": 193106598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209737
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 193106727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586209808
    },
    {
        "content": "<p>you don't even need simplifycfg if you use an RPO traversal :P</p>",
        "id": 193107233,
        "sender_full_name": "eddyb",
        "timestamp": 1586210125
    },
    {
        "content": "<p>actually do we have a cheaper <code>VecDeque</code>+<code>BitSet</code> traversal that doesn't preserve dominator ordering?</p>",
        "id": 193107321,
        "sender_full_name": "eddyb",
        "timestamp": 1586210162
    },
    {
        "content": "<p>but still only visits reachable blocks?</p>",
        "id": 193107344,
        "sender_full_name": "eddyb",
        "timestamp": 1586210174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193106100\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193106100\">said</a>:</p>\n<blockquote>\n<p>yeah in codegen</p>\n</blockquote>\n<p>That's what <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s PR does atm. I don't understand how that is correct. What if codegen never runs...? Then, AIUI you wouldn't get any error.</p>",
        "id": 193153438,
        "sender_full_name": "centril",
        "timestamp": 1586247400
    },
    {
        "content": "<p>It's important that errors happen in the <em>analysis</em> \"phase\" of the compiler. Whether or not MIR optimizations are run or codegen is run shouldn't affect this</p>",
        "id": 193153627,
        "sender_full_name": "centril",
        "timestamp": 1586247506
    },
    {
        "content": "<p>we still need to run it during codegen because some error are only triggered after monomorphization since <code>TooGeneric</code> errors are silent</p>",
        "id": 193159339,
        "sender_full_name": "oli",
        "timestamp": 1586251085
    },
    {
        "content": "<p>so we need both</p>",
        "id": 193159344,
        "sender_full_name": "oli",
        "timestamp": 1586251089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> this change doesn't move anything, it just makes it easier to be correct in the future wrt not losing track of consts</p>",
        "id": 193162130,
        "sender_full_name": "eddyb",
        "timestamp": 1586252739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  sure</p>",
        "id": 193162179,
        "sender_full_name": "centril",
        "timestamp": 1586252762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  Me and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> were discussing privately re. doing it in <code>run_optimization_passes</code> vs. having some RPO traversal in analysis</p>",
        "id": 193162271,
        "sender_full_name": "centril",
        "timestamp": 1586252822
    },
    {
        "content": "<p>I feel that doing it in <code>run_optimization_passes</code> is fragile as it relies on e.g., <code>SimplifyCfg</code> and other passes not declaring too much code dead and whatnot</p>",
        "id": 193162322,
        "sender_full_name": "centril",
        "timestamp": 1586252858
    },
    {
        "content": "<p>Fragile as in \"stability hazard\"</p>",
        "id": 193162343,
        "sender_full_name": "centril",
        "timestamp": 1586252875
    },
    {
        "content": "<p>you don't need RPO, RPO is for a specific order which preserves dominance (very important to SSA-like stuff)</p>",
        "id": 193162484,
        "sender_full_name": "eddyb",
        "timestamp": 1586252945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193107321\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20unevaluated.20dead.20constants.20as.20defined.20per.20nll/near/193107321\">said</a>:</p>\n<blockquote>\n<p>actually do we have a cheaper <code>VecDeque</code>+<code>BitSet</code> traversal that doesn't preserve dominator ordering?</p>\n</blockquote>\n<p>^^ see this</p>",
        "id": 193162507,
        "sender_full_name": "eddyb",
        "timestamp": 1586252960
    },
    {
        "content": "<p>you just need \"visit all reachable blocks\"</p>",
        "id": 193162537,
        "sender_full_name": "eddyb",
        "timestamp": 1586252978
    },
    {
        "content": "<p>and yeah I favor something that can just run immediately after NLL and doesn't depend on whatever SimplifyCfg might do</p>",
        "id": 193162614,
        "sender_full_name": "eddyb",
        "timestamp": 1586253008
    },
    {
        "content": "<p>like <code>if false</code> should not be considered dead code. although. hmm</p>",
        "id": 193162652,
        "sender_full_name": "eddyb",
        "timestamp": 1586253032
    },
    {
        "content": "<p>why do we want to ignore constants in dead code anyway?</p>",
        "id": 193162660,
        "sender_full_name": "eddyb",
        "timestamp": 1586253041
    },
    {
        "content": "<p>idk, lang team decided we want to</p>",
        "id": 193163016,
        "sender_full_name": "oli",
        "timestamp": 1586253250
    },
    {
        "content": "<p>do we remove this dead code <em>before</em> NLL? does NLL just not walk it?</p>",
        "id": 193163301,
        "sender_full_name": "eddyb",
        "timestamp": 1586253442
    },
    {
        "content": "<p>because we could do the gathering even earlier I suspect</p>",
        "id": 193163317,
        "sender_full_name": "eddyb",
        "timestamp": 1586253455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> consider e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OK because its dead code</span>\n</pre></div>",
        "id": 193163485,
        "sender_full_name": "centril",
        "timestamp": 1586253555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  Right; I basically also mean \"visit all reachable blocks and collect their constants\"</p>",
        "id": 193163545,
        "sender_full_name": "centril",
        "timestamp": 1586253599
    },
    {
        "content": "<p>running immediately after NLL seems sensible</p>",
        "id": 193163610,
        "sender_full_name": "centril",
        "timestamp": 1586253612
    },
    {
        "content": "<p>anyway yeah I agree with not relying on <code>SimplifyCfg</code></p>",
        "id": 193163649,
        "sender_full_name": "eddyb",
        "timestamp": 1586253643
    },
    {
        "content": "<p>so... if we move the mir opt pass doing the collection all the way to the front of the optimization list and make it look for reachable constants manually, would that be better? or should we move this into the <code>mir_validated</code> query?</p>",
        "id": 193163872,
        "sender_full_name": "oli",
        "timestamp": 1586253759
    },
    {
        "content": "<p>I'd say <code>mir_validated</code></p>",
        "id": 193163891,
        "sender_full_name": "eddyb",
        "timestamp": 1586253773
    },
    {
        "content": "<p>ok</p>",
        "id": 193163911,
        "sender_full_name": "oli",
        "timestamp": 1586253786
    },
    {
        "content": "<p>just because it pertains to that aspect</p>",
        "id": 193163924,
        "sender_full_name": "eddyb",
        "timestamp": 1586253795
    }
]