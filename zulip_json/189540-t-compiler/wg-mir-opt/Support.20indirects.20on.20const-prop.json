[
    {
        "content": "<p>great</p>",
        "id": 167033687,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336082
    },
    {
        "content": "<p>ohh and I need a type for that constant</p>",
        "id": 167033696,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336095
    },
    {
        "content": "<p>should I take it from <code>Mplace.layout.ty</code>?</p>",
        "id": 167033715,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336113
    },
    {
        "content": "<p>Yeah, I believe that's already the <code>ty</code> you need</p>",
        "id": 167033723,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336128
    },
    {
        "content": "<p>ok i believe I'm almost there</p>",
        "id": 167033986,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336347
    },
    {
        "content": "<p>ok, to generate an <code>OpTy</code> I used <code>eval_operand</code>, but it needs a <code>SourceInfo</code></p>",
        "id": 167034013,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336388
    },
    {
        "content": "<p><code>replace_with_const</code> already takes a <code>Span</code>, so I'd just add it as another parameter</p>",
        "id": 167034407,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336712
    },
    {
        "content": "<p>But then I'll have to propagate that <code>SourceInfo</code> on every <code>replace_with_const</code> call</p>",
        "id": 167044485,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559347084
    },
    {
        "content": "<p>I think you just need to change <code>replace-with_const</code>'s <code>Span</code> argument to be a <code>SourceLocation</code></p>",
        "id": 167044968,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559347816
    },
    {
        "content": "<p>Then here at at the call site <a href=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L658\">https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L658</a></p>",
        "id": 167044973,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559347827
    },
    {
        "content": "<p>Just pass <code>statement.source_info</code></p>",
        "id": 167044977,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559347843
    },
    {
        "content": "<p>ok will try</p>",
        "id": 167048494,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559353382
    },
    {
        "content": "<p>I'm done with the changes :D, should I pr?</p>",
        "id": 167076264,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559401955
    },
    {
        "content": "<p>Yeah, definitely!!</p>",
        "id": 167080557,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559408379
    },
    {
        "content": "<p>a test failed D:</p>",
        "id": 167082153,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559410650
    },
    {
        "content": "<p><code>run-pass/mir/mir-inlining/no-trait-method-issue-40473.rs</code></p>",
        "id": 167082164,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559410674
    },
    {
        "content": "<p>i dont think that's my fault</p>",
        "id": 167082165,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559410679
    },
    {
        "content": "<p>Hmmm looks like it failed again</p>",
        "id": 167087703,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559419847
    },
    {
        "content": "<p>I'm building locally...</p>",
        "id": 167087709,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559419855
    },
    {
        "content": "<p>I don't understand why is this affecting trait solving</p>",
        "id": 167088600,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559421368
    },
    {
        "content": "<p>/me waiting for llvm to finish building...</p>",
        "id": 167088814,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559421818
    },
    {
        "content": "<p>Ok, I'm guessing this has something to do with the failing ptr being a null ptr.</p>",
        "id": 167095668,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559433876
    },
    {
        "content": "<p>Nope, still failing...</p>",
        "id": 167095913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559434324
    },
    {
        "content": "<p>which failing ptr?</p>",
        "id": 167096937,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559436348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>TRACE 2019-06-02T00:45:18Z: rustc_mir::transform::const_prop: attepting to replace const &lt;&amp;usize as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;usize, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer)) with OpTy { op: Indirect(MemPlace { ptr: AllocId(0).0x0, align: Align { pow2: 3 }, meta: None }), layout: TyLayout { ty: for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;usize, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }), align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } }\nTRACE 2019-06-02T00:45:18Z: rustc_mir::transform::const_prop: tag: ()\nTRACE 2019-06-02T00:45:18Z: rustc_mir::transform::const_prop: Indirect: AllocId(0).0x0\nTRACE 2019-06-02T00:45:18Z: rustc_mir::transform::const_prop: op: const Scalar(AllocId(0).0x0) : for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;usize, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;\nTRACE 2019-06-02T00:45:18Z: rustc_mir::transform::const_prop: opty: OpTy { op: Immediate(Scalar(AllocId(0).0x0)), layout: TyLayout { ty: for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;usize, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }), align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } }\nthread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, src/libcore/option.rs:347:21\n</pre></div>",
        "id": 167097611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559437660
    },
    {
        "content": "<p>where does this unwrap comes from? I though that const-prop just stops when it cannot propagate</p>",
        "id": 167098589,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559439376
    },
    {
        "content": "<p>Yeah, I'm not sure. I can't seem to get a backtrace on my mac</p>",
        "id": 167098727,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559439661
    },
    {
        "content": "<p>Ok, it looks like what happened is that your changes allowed more const evaluation to happen elsewhere and that's what's causing the ICE</p>",
        "id": 167100149,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559442150
    },
    {
        "content": "<p>Specifically, the test ICEs because it tries to const eval this:</p>\n<div class=\"codehilite\"><pre><span></span>_42 = const &lt;&amp;usize as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;usize, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n</pre></div>\n\n\n<p>and that doesn't seem to work at all</p>",
        "id": 167100153,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559442176
    },
    {
        "content": "<p>So probably somewhere around here <a href=\"https://github.com/rust-lang/rust/blob/46e0f2721a8f8fe84588e081c96ace5aecf25a32/src/librustc_mir/transform/const_prop.rs#L372\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/46e0f2721a8f8fe84588e081c96ace5aecf25a32/src/librustc_mir/transform/const_prop.rs#L372\">https://github.com/rust-lang/rust/blob/46e0f2721a8f8fe84588e081c96ace5aecf25a32/src/librustc_mir/transform/const_prop.rs#L372</a></p>",
        "id": 167100210,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559442274
    },
    {
        "content": "<p>We need to check if <code>kind</code> is a <code>CastKind::Pointer(_)</code> and <code>return None</code> in that case.</p>",
        "id": 167100222,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559442309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> might have a better suggestion</p>",
        "id": 167101026,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559443743
    },
    {
        "content": "<p>I did the changes and I'm testing now</p>",
        "id": 167104803,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559450672
    },
    {
        "content": "<p>It failed again, maybe this is propagating elsewhere?</p>",
        "id": 167109328,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559459412
    },
    {
        "content": "<p>The ui tests are all passing now so that's good!</p>",
        "id": 167129246,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559494143
    },
    {
        "content": "<p>There's 4 failing MIR optimization tests. I think they're all ICEs.</p>",
        "id": 167129256,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559494168
    },
    {
        "content": "<p>I've got a fix for one and I'm investigating the others</p>",
        "id": 167129257,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559494176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I pushed some fixes into your branch per <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s comments on GitHub</p>",
        "id": 167139021,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559510315
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 167145691,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559521507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around?</p>",
        "id": 167180905,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562570
    },
    {
        "content": "<p>jop</p>",
        "id": 167180912,
        "sender_full_name": "oli",
        "timestamp": 1559562577
    },
    {
        "content": "<p>Got a minute to chat about this pr?</p>",
        "id": 167180915,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562585
    },
    {
        "content": "<p>yes</p>",
        "id": 167180917,
        "sender_full_name": "oli",
        "timestamp": 1559562588
    },
    {
        "content": "<p>So your comment <a href=\"https://github.com/rust-lang/rust/pull/61437#issuecomment-498165707\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61437#issuecomment-498165707\">here</a> is basically how I understand this to work.</p>",
        "id": 167180970,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562612
    },
    {
        "content": "<p>So I guess I'm either not understanding something (probably that) or I'm confused why you don't think this should work.</p>",
        "id": 167180986,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562641
    },
    {
        "content": "<p>Do steps 1-5 make sense to you?</p>",
        "id": 167181009,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562669
    },
    {
        "content": "<p>4 and 5  don't make sense to me considering 1-3 happened</p>",
        "id": 167181025,
        "sender_full_name": "oli",
        "timestamp": 1559562692
    },
    {
        "content": "<p>ok</p>",
        "id": 167181033,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562705
    },
    {
        "content": "<p>so basically what I thought was the situation is that <code>Operand::Immediate</code> refers to the memory, e.g. where the <code>5</code> in <code>5 as u8</code> is stored</p>",
        "id": 167181099,
        "sender_full_name": "oli",
        "timestamp": 1559562747
    },
    {
        "content": "<p>so step 2 gives you an <code>Immediate::Scalar(5)</code></p>",
        "id": 167181110,
        "sender_full_name": "oli",
        "timestamp": 1559562767
    },
    {
        "content": "<p>and then we turn that <code>5</code> into a pointer?</p>",
        "id": 167181115,
        "sender_full_name": "oli",
        "timestamp": 1559562781
    },
    {
        "content": "<p>and create a <code>ByRef</code> whose location is <code>5</code>?</p>",
        "id": 167181126,
        "sender_full_name": "oli",
        "timestamp": 1559562789
    },
    {
        "content": "<p>Hmm... that not how I understand it</p>",
        "id": 167181127,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562789
    },
    {
        "content": "<blockquote>\n<p>so basically what I thought was the situation is that <code>Operand::Immediate</code> refers to the memory, e.g. where the <code>5</code> in <code>5 as u8</code> is stored</p>\n</blockquote>\n<p>Wait do you mean Immediate or Indirect?</p>",
        "id": 167181190,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562847
    },
    {
        "content": "<p>Immediate is just a Scalar. I don't think there's a memory location associated with that.</p>",
        "id": 167181220,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562891
    },
    {
        "content": "<p>(Right?)</p>",
        "id": 167181223,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562898
    },
    {
        "content": "<p>oh, sorry, I meant <code>Indirect</code></p>",
        "id": 167181244,
        "sender_full_name": "oli",
        "timestamp": 1559562913
    },
    {
        "content": "<p>Ok.</p>",
        "id": 167181248,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559562919
    },
    {
        "content": "<p>yea, <code>Operand::Immediate</code> just contains an <code>Immediate</code>, which can only be <code>Scalar</code> or <code>ScalarPair</code></p>",
        "id": 167181256,
        "sender_full_name": "oli",
        "timestamp": 1559562938
    },
    {
        "content": "<p>So, as I understand it, <code>5</code> is a <code>Immediate(Scalar(5))</code>. <code>5 as u8</code> runs the code which handles <code>Rvalue::Cast</code>. That code will allocate space for the result so <code>5 as u8</code> becomes an <del><code>Immediate(Pointer(xxxx))</code></del> <code>Indirect</code> which points to that allocated memory.</p>",
        "id": 167181324,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563001
    },
    {
        "content": "<p>So prior to this change, we could handle <code>5 as u8</code> but because the result became an <del><code>Immediate</code></del>, <code>Indirect</code> we couldn't go any further. Thus, we couldn't handle <code>(5 as u8) + 1</code></p>",
        "id": 167181353,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563055
    },
    {
        "content": "<p>Now we can and we get the correct <code>6u8</code>.</p>",
        "id": 167181381,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563079
    },
    {
        "content": "<p>So going back to your comment, 1 matches my understanding.</p>",
        "id": 167181576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563235
    },
    {
        "content": "<p>In 2, the <code>Immediate</code> is just the pointer to the allocated memory, not the value itself.</p>",
        "id": 167181597,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563274
    },
    {
        "content": "<p>3 matches</p>",
        "id": 167181603,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563288
    },
    {
        "content": "<p>wait</p>",
        "id": 167181612,
        "sender_full_name": "oli",
        "timestamp": 1559563308
    },
    {
        "content": "<p>In 4, the value is a pointer, so that always(?) works</p>",
        "id": 167181617,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563314
    },
    {
        "content": "<p>are we confusing <code>Immediate</code> and <code>Indirect</code> again?</p>",
        "id": 167181618,
        "sender_full_name": "oli",
        "timestamp": 1559563319
    },
    {
        "content": "<p>hmmm</p>",
        "id": 167181663,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563327
    },
    {
        "content": "<p>Yes</p>",
        "id": 167181666,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563338
    },
    {
        "content": "<blockquote>\n<p>So prior to this change, we could handle <code>5 as u8</code> but because the result became an <code>Immediate</code>, we couldn't go any further. Thus, we couldn't handle <code>(5 as u8) + 1</code></p>\n</blockquote>\n<p>should be:</p>\n<p>So prior to this change, we could handle <code>5 as u8</code> but because the result became an <code>Indirect</code>, we couldn't go any further. Thus, we couldn't handle <code>(5 as u8) + 1</code></p>",
        "id": 167181683,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563358
    },
    {
        "content": "<blockquote>\n<p>So, as I understand it, <code>5</code> is a <code>Immediate(Scalar(5))</code>. <code>5 as u8</code> runs the code which handles <code>Rvalue::Cast</code>. That code will allocate space for the result so <code>5 as u8</code> becomes an <code>Immediate(Pointer(xxxx))</code> which points to that allocated memory.</p>\n</blockquote>\n<p>Also: <code>5 as u8</code> becomes <code>Indirect(MPlace { ptr: Pointer(xxx) })</code></p>",
        "id": 167181720,
        "sender_full_name": "oli",
        "timestamp": 1559563409
    },
    {
        "content": "<p>Yes</p>",
        "id": 167181734,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563430
    },
    {
        "content": "<p>So in step 2, when calling <code>read_immediate</code>, we end up with an <code>Immediate::Scalar(5)</code></p>",
        "id": 167181792,
        "sender_full_name": "oli",
        "timestamp": 1559563465
    },
    {
        "content": "<p>(I think?)</p>",
        "id": 167181797,
        "sender_full_name": "oli",
        "timestamp": 1559563471
    },
    {
        "content": "<p>The source of <code>read_immediate</code> is <a href=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L271\">https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L271</a></p>",
        "id": 167181847,
        "sender_full_name": "oli",
        "timestamp": 1559563547
    },
    {
        "content": "<p>and <code>try_as_mplace</code> gives us an <code>MPlace</code> if we have <code>Operand::Indirect</code>: <a href=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/place.rs#L235\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/place.rs#L235\">https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/place.rs#L235</a></p>",
        "id": 167181932,
        "sender_full_name": "oli",
        "timestamp": 1559563609
    },
    {
        "content": "<p>I thought we ended up with a <code>Immediate::Scalar(ptr)</code> or whatever. Basically the equivalent of <code>int* x = (int*)malloc(...);</code> and then the raw address <code>x</code>.</p>",
        "id": 167181943,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563625
    },
    {
        "content": "<p>I'm fairly certain we don't: <a href=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L240\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L240\">https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L240</a> but I have messed up indirect/direct before</p>",
        "id": 167181966,
        "sender_full_name": "oli",
        "timestamp": 1559563670
    },
    {
        "content": "<p>it's more of a <code>int&amp; x = y;</code> where the implementation chooses to represent c++ references as pointers and autoderef for the user</p>",
        "id": 167182036,
        "sender_full_name": "oli",
        "timestamp": 1559563728
    },
    {
        "content": "<p>I believe you are correct</p>",
        "id": 167182088,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563781
    },
    {
        "content": "<p>So then 4 &amp; 5 shouldn't work at all</p>",
        "id": 167182175,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563822
    },
    {
        "content": "<p>But they are...</p>",
        "id": 167182177,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563826
    },
    {
        "content": "<p>yea, that's what baffles me :D</p>",
        "id": 167182235,
        "sender_full_name": "oli",
        "timestamp": 1559563885
    },
    {
        "content": "<p>I'm adding some tracing code so I can see exactly what all these values are</p>",
        "id": 167182349,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559563964
    },
    {
        "content": "<p>The issue has got be with our understanding of 2</p>",
        "id": 167182408,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564037
    },
    {
        "content": "<p>If it works they way we're saying it does, then 4 &amp; 5 don't make any sense at all</p>",
        "id": 167182462,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564059
    },
    {
        "content": "<p>yea, I'm reviewing 4 and 5 rn</p>",
        "id": 167182478,
        "sender_full_name": "oli",
        "timestamp": 1559564070
    },
    {
        "content": "<p>and yet they work. So they have to be doing something correctly</p>",
        "id": 167182482,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564074
    },
    {
        "content": "<p>maybe we missed something there</p>",
        "id": 167182484,
        "sender_full_name": "oli",
        "timestamp": 1559564075
    },
    {
        "content": "<p>OR: we are somehow reading from <code>ByRef</code> wrongly elsewhere</p>",
        "id": 167182544,
        "sender_full_name": "oli",
        "timestamp": 1559564139
    },
    {
        "content": "<p>But <code>operand_from_ref</code> does this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imm_ty</span><span class=\"p\">.</span><span class=\"n\">to_scalar_ptr</span><span class=\"p\">().</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">to_ptr</span><span class=\"p\">().</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ecx</span><span class=\"p\">.</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">alloc_id</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167182647,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564234
    },
    {
        "content": "<p>maybe that code never goes beyond the second <code>?</code></p>",
        "id": 167182658,
        "sender_full_name": "oli",
        "timestamp": 1559564255
    },
    {
        "content": "<p><em>How is that working</em>?</p>",
        "id": 167182661,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564257
    },
    {
        "content": "<p>and your test already works :D</p>",
        "id": 167182665,
        "sender_full_name": "oli",
        "timestamp": 1559564262
    },
    {
        "content": "<p>If it doesn't, then we don't do this <a href=\"https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR599\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR599\">https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR599</a></p>",
        "id": 167182739,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564294
    },
    {
        "content": "<p>yea, but the test you wrote may just never excercise <code>Indirect</code></p>",
        "id": 167182790,
        "sender_full_name": "oli",
        "timestamp": 1559564327
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>TRACE 2019-06-03T12:18:57Z: rustc_mir::transform::const_prop: handling indirect\nTRACE 2019-06-03T12:18:57Z: rustc_mir::transform::const_prop: reading value: OpTy { op: Indirect(MemPlace { ptr: AllocId(2).0x0, align: Align { pow2: 0 }, meta: None }), layout: TyLayout { ty: u8, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I8, false), valid_range: 0..=255 }), align: AbiAndPrefAlign { abi: Align { pow2: 0 }, pref: Align { pow2: 0 } }, size: Size { raw: 1 } } } }\nTRACE 2019-06-03T12:18:57Z: rustc_mir::transform::const_prop: imm: Some(ImmTy { imm: Scalar(0x02), layout: TyLayout { ty: u8, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I8, false), valid_range: 0..=255 }), align: AbiAndPrefAlign { abi: Align { pow2: 0 }, pref: Align { pow2: 0 } }, size: Size { raw: 1 } } } })\nTRACE 2019-06-03T12:18:57Z: rustc_mir::transform::const_prop: imm_ty: ImmTy { imm: Scalar(0x02), layout: TyLayout { ty: u8, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I8, false), valid_range: 0..=255 }), align: AbiAndPrefAlign { abi: Align { pow2: 0 }, pref: Align { pow2: 0 } }, size: Size { raw: 1 } } } }\n</pre></div>",
        "id": 167182856,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564375
    },
    {
        "content": "<p>right, but what I mean is that the binop also works: <a href=\"https://github.com/rust-lang/rust/blob/6901ad4c424dc515cfa0101591564ce14f61788c/src/librustc_mir/transform/const_prop.rs#L478\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6901ad4c424dc515cfa0101591564ce14f61788c/src/librustc_mir/transform/const_prop.rs#L478\">https://github.com/rust-lang/rust/blob/6901ad4c424dc515cfa0101591564ce14f61788c/src/librustc_mir/transform/const_prop.rs#L478</a></p>",
        "id": 167182877,
        "sender_full_name": "oli",
        "timestamp": 1559564394
    },
    {
        "content": "<blockquote>\n<p>maybe that code never goes beyond the second <code>?</code></p>\n</blockquote>\n<p>I think you hit the nail on the head here</p>",
        "id": 167182881,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564397
    },
    {
        "content": "<p>because it does <code>read_immediate</code></p>",
        "id": 167182927,
        "sender_full_name": "oli",
        "timestamp": 1559564403
    },
    {
        "content": "<p>That's where the logging I added stops</p>",
        "id": 167182954,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564416
    },
    {
        "content": "<p>still weird that the test shows what it does</p>",
        "id": 167182981,
        "sender_full_name": "oli",
        "timestamp": 1559564443
    },
    {
        "content": "<p>Yes, that already worked</p>",
        "id": 167182989,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564453
    },
    {
        "content": "<p>You were right</p>",
        "id": 167182994,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564458
    },
    {
        "content": "<p>So that's why the test is working</p>",
        "id": 167183006,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564463
    },
    {
        "content": "<p>oh</p>",
        "id": 167183011,
        "sender_full_name": "oli",
        "timestamp": 1559564464
    },
    {
        "content": "<p>wait</p>",
        "id": 167183013,
        "sender_full_name": "oli",
        "timestamp": 1559564465
    },
    {
        "content": "<p>the test is indeed showing it: <code>_2 = const 2u32 as u8 (Misc);</code></p>",
        "id": 167183021,
        "sender_full_name": "oli",
        "timestamp": 1559564472
    },
    {
        "content": "<p>after optimizations that cast should be gone</p>",
        "id": 167183033,
        "sender_full_name": "oli",
        "timestamp": 1559564479
    },
    {
        "content": "<p>Yeah</p>",
        "id": 167183040,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564484
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 167183050,
        "sender_full_name": "oli",
        "timestamp": 1559564493
    },
    {
        "content": "<p>So <code>read_immediate()</code> is doing the deref for us</p>",
        "id": 167183137,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564547
    },
    {
        "content": "<p>well \"deref\"</p>",
        "id": 167183144,
        "sender_full_name": "oli",
        "timestamp": 1559564558
    },
    {
        "content": "<p>heh yeah</p>",
        "id": 167183154,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564563
    },
    {
        "content": "<p>not semantically, but implementation wise, yes</p>",
        "id": 167183161,
        "sender_full_name": "oli",
        "timestamp": 1559564574
    },
    {
        "content": "<p>ok, so since <code>read_immediate</code> \"just works\", I suggest to throw away all changes of the PR and just do <code>try_read_immediate</code> instead of matching on the <code>Operand</code>, that way we end up with an <code>ImmTy</code> that we can match on and get either a scalar or a scalar pair out of</p>",
        "id": 167183196,
        "sender_full_name": "oli",
        "timestamp": 1559564596
    },
    {
        "content": "<p>or, if we want to const propagate even non-immediates, we go by the <code>ByRef</code> route</p>",
        "id": 167183334,
        "sender_full_name": "oli",
        "timestamp": 1559564690
    },
    {
        "content": "<p>but as already mentioned on the PR, that may overeagerly intern allocations</p>",
        "id": 167183381,
        "sender_full_name": "oli",
        "timestamp": 1559564717
    },
    {
        "content": "<p>so that should probably only be done at higher optimizations levels</p>",
        "id": 167183404,
        "sender_full_name": "oli",
        "timestamp": 1559564736
    },
    {
        "content": "<p>We still need to handle <code>Immediate</code> ourselves right? Since <code>try_read_immediate</code> does a <code>try_as_mplace</code> which fails if we're an <code>Immediate</code></p>",
        "id": 167183419,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564748
    },
    {
        "content": "<p>it gives you the <code>Immediate</code> if <code>try_as_mplace</code> returns <code>Err</code></p>",
        "id": 167183538,
        "sender_full_name": "oli",
        "timestamp": 1559564815
    },
    {
        "content": "<p>all very confusing :D I agree</p>",
        "id": 167183547,
        "sender_full_name": "oli",
        "timestamp": 1559564822
    },
    {
        "content": "<p>failure is success</p>",
        "id": 167183560,
        "sender_full_name": "oli",
        "timestamp": 1559564825
    },
    {
        "content": "<p>Oh <a href=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L283\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L283\">https://github.com/rust-lang/rust/blob/627486af15d222bcba336b12ea92a05237cc9ab1/src/librustc_mir/interpret/operand.rs#L283</a></p>",
        "id": 167183577,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564848
    },
    {
        "content": "<p>Ok, yeah we can just call that</p>",
        "id": 167183588,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564858
    },
    {
        "content": "<p>Thanks! I think <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> and I can take it from there</p>",
        "id": 167183729,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559564950
    },
    {
        "content": "<p>Why all the fun happens when I'm sleeping?</p>",
        "id": 167190471,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559569256
    },
    {
        "content": "<p>So, then we just need to take the <code>OpTy</code> and use <code>try_read_immediate</code>?</p>",
        "id": 167191029,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559569573
    },
    {
        "content": "<p>depends... just emitting a <code>ByRef</code> constant for the <code>Indirect</code> is more general</p>",
        "id": 167191154,
        "sender_full_name": "oli",
        "timestamp": 1559569671
    },
    {
        "content": "<p>but requires more memory</p>",
        "id": 167191213,
        "sender_full_name": "oli",
        "timestamp": 1559569687
    },
    {
        "content": "<p>I think you don't actually need to change anything here, because propagation works even over \"unpropagated\" locals</p>",
        "id": 167191245,
        "sender_full_name": "oli",
        "timestamp": 1559569732
    },
    {
        "content": "<p>it's just a question of whether the <code>Indirect</code> should show up in the MIR</p>",
        "id": 167191295,
        "sender_full_name": "oli",
        "timestamp": 1559569763
    },
    {
        "content": "<p>the propagation happens irrelevant of whether you modify the MIR</p>",
        "id": 167191311,
        "sender_full_name": "oli",
        "timestamp": 1559569775
    },
    {
        "content": "<p>Let me see if I understand correctly, the thing is that in fact evaluating <code>Indirect</code>s would use too much memory, is that right?</p>",
        "id": 167191952,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559570193
    },
    {
        "content": "<p>evaluating e.g. an <code>as</code> cast will allocate additional memory for the duration of the const prop pass. That memory will get cleared afterwards. If you create a <code>ty::Const</code> though, the memory will need to get interned first (which you did), and then it will stay around for the entire compilation.</p>",
        "id": 167193062,
        "sender_full_name": "oli",
        "timestamp": 1559570894
    },
    {
        "content": "<p>if we are never using that value though (as we don't in the given example, because the cast's result is dead code after the propagation), then that would just be a waste of memory</p>",
        "id": 167193156,
        "sender_full_name": "oli",
        "timestamp": 1559570944
    },
    {
        "content": "<p>If the value didn't get promoted or has more use sites later, then that memory usage is ok</p>",
        "id": 167193204,
        "sender_full_name": "oli",
        "timestamp": 1559570992
    },
    {
        "content": "<p>if the value itself is a scalar, then we should not be using <code>ByRef</code> anyway, so... we'd need to do the <code>try_read_immediate</code> optimization</p>",
        "id": 167193287,
        "sender_full_name": "oli",
        "timestamp": 1559571024
    },
    {
        "content": "<p>So... I guess do <code>try_read_immediate</code> for now and leave a fixme to also handle the situation where <code>try_read_immediate</code> fails</p>",
        "id": 167193332,
        "sender_full_name": "oli",
        "timestamp": 1559571062
    },
    {
        "content": "<blockquote>\n<p>evaluating e.g. an <code>as</code> cast will allocate additional memory for the duration of the const prop pass. That memory will get cleared afterwards. If you create a <code>ty::Const</code> though, the memory will need to get interned first (which you did), and then it will stay around for the entire compilation.</p>\n</blockquote>\n<p>Ohh ok I understand</p>",
        "id": 167193476,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559571135
    },
    {
        "content": "<blockquote>\n<p>So... I guess do <code>try_read_immediate</code> for now and leave a fixme to also handle the situation where <code>try_read_immediate</code> fails</p>\n</blockquote>\n<p>here <a href=\"https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR594\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR594\">https://github.com/rust-lang/rust/pull/61437/files#diff-9e103702275cbef342c2decd3395bf3bR594</a>, right?</p>",
        "id": 167194128,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559571533
    },
    {
        "content": "<p>No, get rid of the entire <code>match value</code> and do <code>let imm = ....try_immediate(value).ok()??;</code> or sth and just have the <code>match imm</code> that is currently in the <code>Operand::Immediate</code> arm</p>",
        "id": 167194555,
        "sender_full_name": "oli",
        "timestamp": 1559571730
    },
    {
        "content": "<p>so something like this: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// FIXME&gt; figure out what tho do when try_read_immediate fails</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">use_ecx</span><span class=\"p\">(</span><span class=\"n\">source_info</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ecx</span><span class=\"p\">.</span><span class=\"n\">try_read_immediate</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">imm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_from_ref</span><span class=\"p\">(</span><span class=\"n\">imm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">rval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rvalue</span>::<span class=\"n\">Use</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167195171,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572047
    },
    {
        "content": "<p>no, I mean, don't have an <code>match value</code>  (and thus <code>Operand::Indirect</code>) arm at all</p>",
        "id": 167195308,
        "sender_full_name": "oli",
        "timestamp": 1559572113
    },
    {
        "content": "<p>yes yes</p>",
        "id": 167195335,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572130
    },
    {
        "content": "<p>/me is confused</p>",
        "id": 167195380,
        "sender_full_name": "oli",
        "timestamp": 1559572147
    },
    {
        "content": "<p>me too, me too</p>",
        "id": 167195402,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572157
    },
    {
        "content": "<p>hahaha</p>",
        "id": 167195405,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572158
    },
    {
        "content": "<blockquote>\n<p>no, I mean, don't have an <code>match value</code>  (and thus <code>Operand::Indirect</code>) arm at all</p>\n</blockquote>\n<p>that code would be the replacement for the whole thing</p>",
        "id": 167196164,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572527
    },
    {
        "content": "<p>ah, no don't use <code>operand_from_ref</code>, use the existing <code>match</code> that emits <code>Scalar</code> and <code>ScalarPair</code></p>",
        "id": 167196280,
        "sender_full_name": "oli",
        "timestamp": 1559572575
    },
    {
        "content": "<blockquote>\n<p>No, get rid of the entire <code>match value</code> and do <code>let imm = ....try_immediate(value).ok()??;</code> or sth and just have the <code>match imm</code> that is currently in the <code>Operand::Immediate</code> arm</p>\n</blockquote>\n<p>this is basically taking the <code>Operand::Immediate</code> arm and deleting the  <code>match value</code></p>",
        "id": 167196367,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572630
    },
    {
        "content": "<p>but doing <code>try_read_immediate</code> instead of <code>read_immediate</code></p>",
        "id": 167196419,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572663
    },
    {
        "content": "<p>ohhhhhhhh</p>",
        "id": 167196544,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572730
    },
    {
        "content": "<p>i get it, i feel dumb</p>",
        "id": 167196549,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559572736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"c1\">// FIXME&gt; figure out what tho do when try_read_immediate fails</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">use_ecx</span><span class=\"p\">(</span><span class=\"n\">source_info</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ecx</span><span class=\"p\">.</span><span class=\"n\">try_read_immediate</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">imm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">interpret</span>::<span class=\"n\">Immediate</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">ScalarMaybeUndef</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">scalar</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">*</span><span class=\"n\">rval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rvalue</span>::<span class=\"n\">Use</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_from_scalar</span><span class=\"p\">(</span><span class=\"n\">scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Immediate</span>::<span class=\"n\">ScalarPair</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ScalarMaybeUndef</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ScalarMaybeUndef</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">two</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">sty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">rval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rvalue</span>::<span class=\"n\">Aggregate</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AggregateKind</span>::<span class=\"n\">Tuple</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_from_scalar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">one</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">expect_ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_from_scalar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">two</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">expect_ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167197380,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573273
    },
    {
        "content": "<p>great, I'm gonna run tests</p>",
        "id": 167197661,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573462
    },
    {
        "content": "<p><code>try_read_immediate</code> is private</p>",
        "id": 167198117,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573782
    },
    {
        "content": "<p>should I make it public?</p>",
        "id": 167198121,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573788
    },
    {
        "content": "<p>jop</p>",
        "id": 167198126,
        "sender_full_name": "oli",
        "timestamp": 1559573791
    },
    {
        "content": "<p>crate wide only please</p>",
        "id": 167198129,
        "sender_full_name": "oli",
        "timestamp": 1559573797
    },
    {
        "content": "<p>crate wide?</p>",
        "id": 167198146,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573813
    },
    {
        "content": "<p><code>pub(crate)</code></p>",
        "id": 167198166,
        "sender_full_name": "oli",
        "timestamp": 1559573830
    },
    {
        "content": "<p>oh</p>",
        "id": 167198173,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573835
    },
    {
        "content": "<p>sure</p>",
        "id": 167198175,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559573838
    },
    {
        "content": "<p>I'm not using the <code>PlaceTy</code> in <code>replace_with_const</code>, is that ok?</p>",
        "id": 167199048,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559574424
    },
    {
        "content": "<p>Yeah, I added that in <a href=\"https://github.com/rust-lang/rust/commit/499d1178181a428dccac3d24a9314f68c3f1cc58\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/499d1178181a428dccac3d24a9314f68c3f1cc58\">499d1178181a428dccac3d24a9314f68c3f1cc58</a></p>",
        "id": 167199172,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559574517
    },
    {
        "content": "<p>But if you don't need it, you can just remove it</p>",
        "id": 167199183,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559574527
    },
    {
        "content": "<p>This is taking ages. I've never built rust on this machine hahah</p>",
        "id": 167202081,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559576060
    },
    {
        "content": "<p>For most tests, you can do <code>./x.py test --stage 1 -i src/test/{test-dir}</code></p>",
        "id": 167202202,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559576145
    },
    {
        "content": "<p>And for building just the compiler <code>./x.py build --stage 1 -i src/libstd</code></p>",
        "id": 167202278,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559576169
    },
    {
        "content": "<blockquote>\n<p>For most tests, you can do <code>./x.py test --stage 1 -i src/test/{test-dir}</code></p>\n</blockquote>\n<p>yeah I'm doing this</p>",
        "id": 167202308,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559576192
    },
    {
        "content": "<p>ty</p>",
        "id": 167202312,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559576196
    },
    {
        "content": "<p>ok we're ready</p>",
        "id": 167208494,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559580155
    },
    {
        "content": "<p>the same test failed i think</p>",
        "id": 167219825,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559588003
    },
    {
        "content": "<p>I'll fix the formatting issues just before rebasing</p>",
        "id": 167220179,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559588245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I think the tests just need to be updated actually.</p>",
        "id": 167220877,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559588711
    },
    {
        "content": "<p>They're failing because your patch is working now!</p>",
        "id": 167220885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559588719
    },
    {
        "content": "<p>Oh yea, _3 and _4 have the actual value</p>",
        "id": 167221189,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559588928
    },
    {
        "content": "<p>shouldnt that pointer change from run to run?</p>",
        "id": 167221229,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559588952
    },
    {
        "content": "<p>In <code>mir-opt/const_prop/const_prop_fails_gracefully.rs</code>?</p>",
        "id": 167221408,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559589067
    },
    {
        "content": "<p>Yeah, I'm not sure about that</p>",
        "id": 167221415,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559589072
    },
    {
        "content": "<p>That's a question for <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 167221436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559589085
    },
    {
        "content": "<p><code> mir-opt/const_prop/indirect.rs</code> Just needs to be updated though. The new behavior is correct.</p>",
        "id": 167221455,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559589107
    },
    {
        "content": "<p>when Oli answers I'll upload both tests</p>",
        "id": 167227240,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559593126
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 167227624,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559593367
    },
    {
        "content": "<p>We'll probably need to rewrite the <code>const_prop_fails_gracefully</code> test because the point of the test it to make sure the compiler doesn't ICE when it can't const prop stuff and you've implemented support for the thing it previously couldn't const prop.</p>\n<p>However, your question about the pointer leaking into the MIR should still be answered and we should have a test around whatever the correct behavior there is as well.</p>",
        "id": 167227768,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559593448
    },
    {
        "content": "<p><a href=\"http://indirect.rs\" target=\"_blank\" title=\"http://indirect.rs\">indirect.rs</a> just needs updating, I agree</p>",
        "id": 167240291,
        "sender_full_name": "oli",
        "timestamp": 1559602960
    },
    {
        "content": "<p><code>const_prop_fails_gracefully</code> is pretty cool, since it actually shows that we don't propagate <code>_1 = move _2 as usize (Misc);</code>, because <code>_2</code> is a pointer which is not a valid <code>usize</code> at compile-time</p>",
        "id": 167240331,
        "sender_full_name": "oli",
        "timestamp": 1559603006
    },
    {
        "content": "<p>we won't ever const prop that, so the test still properly excercises what it is supposed to</p>",
        "id": 167240401,
        "sender_full_name": "oli",
        "timestamp": 1559603058
    },
    {
        "content": "<p>The <code>AllocId</code> showing up in MIR is a little funky, but ok. We should probably record all <code>AllocId</code>s printed during MIR printing and print their memory, too, but that's a future thing to do (open an issue about it?)</p>",
        "id": 167240472,
        "sender_full_name": "oli",
        "timestamp": 1559603127
    },
    {
        "content": "<p>But then should i change the test and hide the <code>AllocId</code>s? or should I leave them explicitly as in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">[</span><span class=\"mi\">01</span>:<span class=\"mi\">09</span>:<span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">AllocId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"mh\">0x0</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"mi\">01</span>:<span class=\"mi\">09</span>:<span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">AllocId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"mh\">0x0</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"mi\">01</span>:<span class=\"mi\">09</span>:<span class=\"mi\">11</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">AllocId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"mh\">0x0</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167246392,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559609611
    },
    {
        "content": "<p>Leave them in I think</p>",
        "id": 167246566,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559609858
    },
    {
        "content": "<p>sure, I'll fix that and commit</p>",
        "id": 167246722,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559610037
    },
    {
        "content": "<p>I'm testing to avoid wasting CI :P</p>",
        "id": 167246837,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559610194
    },
    {
        "content": "<p>The infra team thanks you <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 167247049,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559610497
    },
    {
        "content": "<p>Well its good to keep the pc exercising :P</p>",
        "id": 167247539,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559611129
    },
    {
        "content": "<p>idk what to do with vim identation, I'll think I'll have to fix the identation manually</p>",
        "id": 167247619,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559611221
    },
    {
        "content": "<blockquote>\n<p>I'm testing to avoid wasting CI :P</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I'd much rather you save your own time because human time is much more precious than CI time. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167248056,
        "sender_full_name": "centril",
        "timestamp": 1559611811
    },
    {
        "content": "<p>oh well if you insist</p>",
        "id": 167248076,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559611865
    },
    {
        "content": "<p>Ok it is done, going to rebase</p>",
        "id": 167256441,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559623953
    }
]