[
    {
        "content": "<p>So, there's one that I think is a good starting point implementation wise, but requires some discussion before exposing it to users. Implementing it will help the discussion as we can benchmark it and look at its effects in general. The optimization I'm talking about is <a href=\"https://github.com/rust-lang/rust/issues/72022\">https://github.com/rust-lang/rust/issues/72022</a></p>",
        "id": 203698335,
        "sender_full_name": "oli",
        "timestamp": 1594635683
    },
    {
        "content": "<p>We can easily set this new optimization to only run at mir-opt-level 3, which is where we keep our controversial or buggy optimizations</p>",
        "id": 203698411,
        "sender_full_name": "oli",
        "timestamp": 1594635724
    },
    {
        "content": "<p>(there are plans for making the bugginess explicit, but for now, we use mir-opt-level 3 for this)</p>",
        "id": 203698428,
        "sender_full_name": "oli",
        "timestamp": 1594635747
    },
    {
        "content": "<p><del>hmm... let me fork this discussion into a separate topic</del> done, here we are</p>",
        "id": 203698440,
        "sender_full_name": "oli",
        "timestamp": 1594635759
    },
    {
        "content": "<p>So, a first link to get you started: <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">https://rustc-dev-guide.rust-lang.org/getting-started.html</a></p>",
        "id": 203698759,
        "sender_full_name": "oli",
        "timestamp": 1594636063
    },
    {
        "content": "<p>this is just about general rustc development</p>",
        "id": 203698765,
        "sender_full_name": "oli",
        "timestamp": 1594636068
    },
    {
        "content": "<p>you don't need to read all of  it, but it helps you get the setup done and once you hit <code>x.py</code> in the guide, I'll give you some diverging instructions</p>",
        "id": 203698870,
        "sender_full_name": "oli",
        "timestamp": 1594636172
    },
    {
        "content": "<p>alright, thanks for the pointers :) will clone rust and follow along</p>",
        "id": 203699001,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1594636273
    },
    {
        "content": "<p>What's usually done to work on mir optimizations is:</p>\n<ol>\n<li>build a rust source file in <code>src/test/mir-opt</code> that shows the code you want to optimize. Keep this simple, so no <code>println!</code> or other formatting infrastructure if not necessary for the optimization</li>\n<li>\n<p>run <code>./x.py test --stage 1 --bless src/test/mir-opt</code> in order to generate MIR dumps (read the readme in <a href=\"https://github.com/rust-lang/rust/tree/master/src/test/mir-opt\">https://github.com/rust-lang/rust/tree/master/src/test/mir-opt</a> for instructions on how to dump things)<br>\n3 commit the current status</p>\n</li>\n<li>\n<p>implement a new optimization in <code>src/librustc_mir/transform</code>. Fastest way: pick a small optimization (e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/no_landing_pads.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/no_landing_pads.rs</a>) and copy it, add your optimization somewhere in <a href=\"https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_mir/transform/mod.rs#L385\">https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_mir/transform/mod.rs#L385</a>, then start modifying your copied optimization</p>\n</li>\n<li>Rerun the <code>x.py</code> command to regenerate the mir dumps and look at the diffs to see if they are what you expect</li>\n<li>Run <code>./x.py test --stage 1 --bless src/test/ui</code> to see if your optimization broke anything</li>\n<li>Commit and open a PR (you can do this at any point, even if things aren't working yet, so you can ask for feedback on the PR. Open a WIP PR in that case)</li>\n</ol>",
        "id": 203699347,
        "sender_full_name": "oli",
        "timestamp": 1594636555
    },
    {
        "content": "<p>so, making sure i'm understanding the optimization</p>\n<p>it's something like</p>\n<div class=\"codehilite\"><pre><span></span><code>fn test() {\n  if cond {\n    // do stuff\n  } else {\n    // do stuff\n  }\n\n  return 42;\n}\n</code></pre></div>\n\n\n<p>getting optimized to </p>\n<div class=\"codehilite\"><pre><span></span><code>fn test() {\n  if cond {\n    // do stuff\n    return 42;\n  } else {\n    // do stuff\n    return 42;\n  }\n}\n</code></pre></div>\n\n\n<p>(at a lower level of representation, of course)</p>\n<p>which avoids the goto needed to skip else block if <code>cond</code> is true, for example</p>",
        "id": 203700146,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1594637138
    },
    {
        "content": "<p>Kind of the return value and the actual return are split at the MIR level. The first is an assignment of <code>_0</code>, while the latter is the <code>Return</code> terminator. This issue is only about moving the <code>Return</code> terminators.</p>",
        "id": 203700309,
        "sender_full_name": "bjorn3",
        "timestamp": 1594637263
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">_1</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">bb0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SwitchInt</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kc\">true</span>: <span class=\"nc\">bb1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">Goto</span><span class=\"w\"> </span><span class=\"n\">bb3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">Goto</span><span class=\"w\"> </span><span class=\"n\">bb3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>-&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">_1</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">bb0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SwitchInt</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kc\">true</span>: <span class=\"nc\">bb1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">Return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">Return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203700564,
        "sender_full_name": "bjorn3",
        "timestamp": 1594637445
    },
    {
        "content": "<p>makes sense</p>",
        "id": 203700704,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1594637585
    },
    {
        "content": "<p>following the setup to build rustc, I'd like to point <code>llvm-config</code> in my <code>config.toml</code> to the system one to avoid recompiling it, but only llvm 10 and 9 are available as packages on my system. will that work with rustc ?</p>",
        "id": 203702530,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1594638986
    },
    {
        "content": "<p>I think so</p>",
        "id": 203702601,
        "sender_full_name": "lcnr",
        "timestamp": 1594639032
    },
    {
        "content": "<p>finally getting time to work on this. opened draft PR here: <a href=\"https://github.com/rust-lang/rust/pull/74839\">https://github.com/rust-lang/rust/pull/74839</a></p>\n<p>I've added a basic test file, which should optimize once I've implemented what's necessary </p>\n<p>I'm not sure how the mir-opt tests work: I've ran <code>./x.py test --stage 1 --bless src/test/mir-opt</code> and after searching for the produced mir dumps, I've found them in <code>build/x86_64-unknown-linux-gnu/test/mir-opt/</code>. But I don't really know which one I should look at, or if there's anything to do with those (yet ?). Should I now try implementing the optimization, then add a <code>// EMIT_MIR rustc.test.MyNewFancyOpt.diff</code> to my test file ?</p>",
        "id": 205167984,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1595883797
    },
    {
        "content": "<p>You can run a nighty compiler or stage 1 with the -Zmir-dump=&lt;function name &gt; on the test file. That should generate a folder with a file with before/after for each pass</p>",
        "id": 205168400,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1595884076
    },
    {
        "content": "<p>And when you have implemented the pass, you can add the emit_mir to the test file. The test suite should then run your pass on the test file and give you a diff</p>",
        "id": 205168508,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1595884138
    },
    {
        "content": "<p>right, thanks ! I'll get started on the actual code then :)</p>",
        "id": 205169155,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1595884496
    },
    {
        "content": "<p>you can also add your optimization and make it not do anything. Then adding the diff comment will work, and show no changes.</p>",
        "id": 205201448,
        "sender_full_name": "oli",
        "timestamp": 1595917114
    },
    {
        "content": "<p>after you implement actual logic in your optimization, reblessing the test will then apply the changes</p>",
        "id": 205201464,
        "sender_full_name": "oli",
        "timestamp": 1595917140
    },
    {
        "content": "<p>back from holiday, wrote a basic version of the optimization as I understand it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I imagine the next step is to run an extensive test suite to make sure this didn't break anything ?</p>",
        "id": 207031595,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1597513501
    },
    {
        "content": "<p>welp, looks like the codegen test suite did catch some problems, I'll look into it</p>",
        "id": 207032777,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1597515252
    },
    {
        "content": "<p>yep, you got it, ideally if you feel that the feature is correct, you would run the test suites</p>",
        "id": 207038799,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597524676
    },
    {
        "content": "<p>and if all of them pass, you'd write tests for the new feature as well</p>",
        "id": 207038807,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597524695
    },
    {
        "content": "<p>:3</p>",
        "id": 207038809,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597524697
    },
    {
        "content": "<p>thanks for the help everyone, really glad my first contribution is merged <span aria-label=\"hug\" class=\"emoji emoji-1f917\" role=\"img\" title=\"hug\">:hug:</span></p>",
        "id": 211904854,
        "sender_full_name": "Antoine Martin",
        "timestamp": 1601556973
    }
]