[
    {
        "content": "<p>We have a bunch of tests in our test suite that compare the result of a compile-time evaluation (so a constant) against a runtime evaluation. The problem is that <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  is making our const propagator way too smart for its own good. It will at some point be able to optimize the right hand side of a <code>C == foo(42)</code> comparison to a constant, and then optimize away the entire comparison. Now we can easily prevent this by wrapping the <code>foo(42)</code> in a call to <code>test::black_box</code>, but then the call will still get optimized, so we wrap the <code>42</code>, too and then we end up with <code>b(foo(b(42)))</code>, which isn't too bad, but its very error-prone.</p>",
        "id": 167655728,
        "sender_full_name": "oli",
        "timestamp": 1560008069
    },
    {
        "content": "<p>In order to make these tests a little saner, we could create a <code>rustc_*</code> attribute that makes const prop not run for the entire crate or maybe just function or even specific statements in the function.</p>",
        "id": 167655792,
        "sender_full_name": "oli",
        "timestamp": 1560008214
    },
    {
        "content": "<p>A PR where this came up: <a href=\"https://github.com/rust-lang/rust/pull/61658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61658\">https://github.com/rust-lang/rust/pull/61658</a></p>",
        "id": 167655914,
        "sender_full_name": "oli",
        "timestamp": 1560008413
    },
    {
        "content": "<p>would it be possible to write a macro for this end?</p>",
        "id": 167666568,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560026116
    },
    {
        "content": "<p>that somehow <code>non_eval!(foo(42))</code> expanded to <code>b(foo(b(42))</code>?</p>",
        "id": 167666630,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560026207
    },
    {
        "content": "<p>maybe, but I still fear we'll end up missing edge cases</p>",
        "id": 167666644,
        "sender_full_name": "oli",
        "timestamp": 1560026240
    },
    {
        "content": "<p>like we'll have to think about all cases</p>",
        "id": 167666646,
        "sender_full_name": "oli",
        "timestamp": 1560026247
    },
    {
        "content": "<p>the attribute system will \"just work\"</p>",
        "id": 167666648,
        "sender_full_name": "oli",
        "timestamp": 1560026253
    },
    {
        "content": "<p>hmmm ok</p>",
        "id": 167666704,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560026320
    }
]