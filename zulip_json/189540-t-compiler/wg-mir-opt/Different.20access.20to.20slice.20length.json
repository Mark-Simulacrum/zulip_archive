[
    {
        "content": "<p>I was experimenting with range based analysis in MIR, but before it wanted to try an optimization to remove bound checks for slice accesses on MIR level. I use a function like</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn bound(index: usize, slice: &amp;[u8]) -&gt; u8 {\n    if index &lt; slice.len() {\n        slice[index]\n    } else {\n        42\n    }\n}\n</code></pre></div>\n<p>and hope to see a bound check optimized away. So far mir-opt-level = 3 doesn't provide such guarantees, it mainly inlines a call to <code>slice.len()</code> and that's it.</p>\n<p>But my question has another nature. I see that in bound check length is calculated as (ignore the local indexes for now)</p>\n<div class=\"codehilite\"><pre><span></span><code>        _8 = Len((*_2));\n        _9 = Lt(_7, _8);\n        assert(move _9, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _8, _7) -&gt; bb3;\n</code></pre></div>\n<p>while in a \"normal\" code it's like for <code>slice.len()</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>        _6 = &amp;(*_2);\n        _5 = core::slice::&lt;impl [u8]&gt;::len(move _6) -&gt; bb1;\n</code></pre></div>\n<p>Is there a reason for such divergence? I've made an optimization pass that does the following</p>\n<div class=\"codehilite\"><pre><span></span><code>-         _6 = &amp;(*_2);                     // scope 0 at $DIR/basic_range.rs:23:17: 23:22\n-         _5 = core::slice::&lt;impl [u8]&gt;::len(move _6) -&gt; bb1; // scope 0 at $DIR/basic_range.rs:23:17: 23:28\n-                                          // mir::Constant\n-                                          // + span: $DIR/basic_range.rs:23:23: 23:26\n-                                          // + literal: Const { ty: for&lt;&#39;r&gt; fn(&amp;&#39;r [u8]) -&gt; usize {core::slice::&lt;impl [u8]&gt;::len}, val: Value(Scalar(&lt;ZST&gt;)) }\n+         nop;                             // scope 0 at $DIR/basic_range.rs:23:17: 23:22\n+         _5 = Len((*_2));                 // scope 0 at $DIR/basic_range.rs:23:17: 23:28\n+         goto -&gt; bb1;                     // scope 0 at $DIR/basic_range.rs:23:17: 23:28\n</code></pre></div>\n<p>with a hope to either see it useful to other optimization passes (not yet tested) or to use in my attempt to remove bound checks as it's much more convenient to have similar form of statements. Is this worth it and is it sound?</p>",
        "id": 242818544,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623805176
    },
    {
        "content": "<blockquote>\n<p>Is this worth it </p>\n</blockquote>\n<p>yes, though ideally we'd have some way to first inline len and then recognize that the len rvalue is the same as transmute and field access</p>\n<blockquote>\n<p>and is it sound?</p>\n</blockquote>\n<p>depends on how you are checking this</p>",
        "id": 242831923,
        "sender_full_name": "oli",
        "timestamp": 1623821853
    },
    {
        "content": "<p>We could plausibly have a pass, not unlike intrinsic lowering, that looks for <code>[T]::len</code> explicitly, right?</p>",
        "id": 242832251,
        "sender_full_name": "scottmcm",
        "timestamp": 1623822264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Different.20access.20to.20slice.20length/near/242832251\">said</a>:</p>\n<blockquote>\n<p>We could plausibly have a pass, not unlike intrinsic lowering, that looks for <code>[T]::len</code> explicitly, right?</p>\n</blockquote>\n<p>I'm assuming this is how <span class=\"user-mention\" data-user-id=\"420832\">@Alex Vlasov</span> did it? slice is a lang item, so looking up the len method on that is not problematic</p>",
        "id": 242832458,
        "sender_full_name": "oli",
        "timestamp": 1623822570
    },
    {
        "content": "<p>Yes, I do look for a call to core::slice::len, take the argument and remove go backwards in boby.block.statements to remove one that takes a borrow and instead add a Len operation and modify the terminator</p>",
        "id": 242848966,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623833598
    },
    {
        "content": "<p>Separately I would appreciate some guidance on how to properly get a function name. So far I had to format a TyS structure and string match it, and could not find a way to do it properly (my deepest point was FnDef(def_id, …)). In a similar manner I would likely to improve heuristics and be able to get type information of the parameter going into the len() to ensure that it’s a slice and when I work backwards to remove the borrow to may be (not sure though it’s possible) get the type of my manipulations to ensure that I pass [T] to Len statement</p>",
        "id": 242850065,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623834026
    },
    {
        "content": "<p>As for “why” I want to do it is that I have a draft of the pass that recognizes (yet separately) casts like bool as u8 and then allow to modify SwitchInt for such cases and remove impossible branches, and also follows through the (unsigned) integer related statements and keeps range information and relations like &lt; along with the control flow information, like “if we did jump to bb1 then a &lt; b”, so it was natural to start and make it niche for bound checks elimination</p>",
        "id": 242851146,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623834457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420832\">Alex Vlasov</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Different.20access.20to.20slice.20length/near/242851146\">said</a>:</p>\n<blockquote>\n<p>As for “why” I want to do it is that I have a draft of the pass that recognizes (yet separately) casts like bool as u8 and then allow to modify SwitchInt for such cases and remove impossible branches, and also follows through the (unsigned) integer related statements and keeps range information and relations like &lt; along with the control flow information, like “if we did jump to bb1 then a &lt; b”, so it was natural to start and make it niche for bound checks elimination</p>\n</blockquote>\n<p>side note: make sure to use the dataflow systems for this, it will safe you a lot of work you'd be doing manually</p>",
        "id": 242858683,
        "sender_full_name": "oli",
        "timestamp": 1623837667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420832\">Alex Vlasov</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Different.20access.20to.20slice.20length/near/242850065\">said</a>:</p>\n<blockquote>\n<p>Separately I would appreciate some guidance on how to properly get a function name. So far I had to format a TyS structure and string match it, and could not find a way to do it properly (my deepest point was FnDef(def_id, …)). In a similar manner I would likely to improve heuristics and be able to get type information of the parameter going into the len() to ensure that it’s a slice and when I work backwards to remove the borrow to may be (not sure though it’s possible) get the type of my manipulations to ensure that I pass [T] to Len statement</p>\n</blockquote>\n<p>you mean, how to find exactly the [T]::len function and nothing else?</p>",
        "id": 242858719,
        "sender_full_name": "oli",
        "timestamp": 1623837697
    },
    {
        "content": "<p>if that's what you're asking, you should be using <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.slice_impl\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.slice_impl</a> to get the right impl, then find the len function via <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.associated_items\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.associated_items</a> and <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/assoc/struct.AssocItems.html#method.filter_by_name\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/assoc/struct.AssocItems.html#method.filter_by_name</a></p>",
        "id": 242858839,
        "sender_full_name": "oli",
        "timestamp": 1623837767
    },
    {
        "content": "<p>Hm, I can not connect the dots. When I do traverse the block terminators I end up with <code>TerminatorKind::Call { func: Operand::Constant(func),  .. }</code>, then do some initial heuristics for number of arguments in a function, and at the end match <code>func.literal</code> as <code>ty::Const{ty, val}</code> with <code>ty.kind()</code> being <code>ty::FnDef(def_id, substs)</code>. So as far as I understand there should be some way to use <code>def_id</code> and find what this function is, but I didn't find it</p>",
        "id": 242860462,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623838819
    },
    {
        "content": "<p>right, my \"plan\" would get you the def_id so you can \"== compare\"  the def ids to see if you have the right one. If you want to start from the DefId, you gotta check the name via <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.item_name\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.item_name</a> to see if it is \"len\", and then <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.impl_of_method\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.impl_of_method</a> to get the impl block's id. Then you compare that id with <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.slice_impl\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.slice_impl</a> to see whether you got the correct slice impl block</p>",
        "id": 242861156,
        "sender_full_name": "oli",
        "timestamp": 1623839254
    },
    {
        "content": "<p>Ok, I see. Most likely your way is actually better, now I just need to get <code>LanguageItems</code> from somewhere to prefetch the ID :)</p>",
        "id": 242861570,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623839526
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/?search=LanguageItems\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/?search=LanguageItems</a></p>",
        "id": 242861911,
        "sender_full_name": "oli",
        "timestamp": 1623839734
    },
    {
        "content": "<p>rustdoc at your service <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 242861921,
        "sender_full_name": "oli",
        "timestamp": 1623839742
    },
    {
        "content": "<p>I've meant \"how to get known LanguateItems\" and not what they are inside, but found it already</p>",
        "id": 242862326,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623839983
    },
    {
        "content": "<p>oh, the rustdoc link didn't link there</p>",
        "id": 242868073,
        "sender_full_name": "oli",
        "timestamp": 1623843709
    },
    {
        "content": "<p>sorry</p>",
        "id": 242868074,
        "sender_full_name": "oli",
        "timestamp": 1623843710
    },
    {
        "content": "<p>you can click \"in return types\" to see functions returning what you searched</p>",
        "id": 242868128,
        "sender_full_name": "oli",
        "timestamp": 1623843729
    },
    {
        "content": "<p>As for the dataflow analysis: I didn’t yet get a good idea how it works. I assume it allows me to follow the chains like _4 = Len(*2), _6 = _4, but doesn’t look easily so</p>",
        "id": 242871768,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623845999
    },
    {
        "content": "<p>Is it potentially acceptable to use salsa in MIR? It looks as a good query engine implementation with caching</p>",
        "id": 242875742,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623848170
    },
    {
        "content": "<p>the compiler already has a query system</p>",
        "id": 242876907,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623848763
    },
    {
        "content": "<p>For range analysis the problem is simpler than constant evaluation, but it requires multiple passes anyway when we can first identify and make first guesses about the range and later improve the precision. I thought salsa would naturally fit here, but have to idea on how compiler query system can be utilized or extended here</p>",
        "id": 242877437,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623849049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420832\">Alex Vlasov</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Different.20access.20to.20slice.20length/near/242877437\">said</a>:</p>\n<blockquote>\n<p>For range analysis the problem is simpler than constant evaluation, but it requires multiple passes anyway when we can first identify and make first guesses about the range and later improve the precision. I thought salsa would naturally fit here, but have to idea on how compiler query system can be utilized or extended here</p>\n</blockquote>\n<p>this is what dataflow allows you to do. It runs through your control flow graph and figures out your invariants on the fly, even handling loops. It is used for asking things like \"is this local variable potentially alive at this point?\" or \"is this local variable guaranteed alive at this point?\" or in clippy: \"is this clone unnecessary because the original value is never used again after the clone?\". So in your case you would not have a binary thing, but you'd be building the range that a local variable's value has at each point.</p>",
        "id": 242889057,
        "sender_full_name": "oli",
        "timestamp": 1623853845
    },
    {
        "content": "<p>Ok, I'll try to look deeper into the dataflow. I want to start small with being able from the statement like</p>\n<div class=\"codehilite\"><pre><span></span><code>          _5 = core::slice::&lt;impl [u8]&gt;::len(move _6)\n</code></pre></div>\n<p>to find the last place of definition of _6 like</p>\n<div class=\"codehilite\"><pre><span></span><code>          _6 = &amp;(*_2);\n</code></pre></div>\n<p>instead of doing it manually</p>",
        "id": 242890745,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623854571
    },
    {
        "content": "<p>hmm</p>",
        "id": 242896463,
        "sender_full_name": "oli",
        "timestamp": 1623856897
    },
    {
        "content": "<p>we do have a peephole opt to get rid of reborrows I think, maybe just run your optimization after that? and possibly even after nrvo</p>",
        "id": 242896759,
        "sender_full_name": "oli",
        "timestamp": 1623856986
    },
    {
        "content": "<p>Looks like I need to do it before inlining, otherwise bodies are inlined and I may need to make another kind of search for it</p>",
        "id": 242900246,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623858516
    },
    {
        "content": "<p>I've tried to fit it before inlining + do <code>mir-opt-level=3</code>, but passes didn't provide any substitutions for equivalents. Here is a full listing</p>\n<div class=\"codehilite\"><pre><span></span><code>// MIR for `bound` after SimplifyLocals\n\nfn bound(_1: usize, _2: &amp;[u8]) -&gt; u8 {\n    debug index =&gt; _1;                   // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:26:14: 26:19\n    debug slice =&gt; _2;                   // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:26:28: 26:33\n    let mut _0: u8;                      // return place in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:26:45: 26:47\n    let mut _3: bool;                    // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:27\n    let mut _4: usize;                   // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:13\n    let mut _5: usize;                   // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:16: 27:27\n    let _6: usize;                       // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:15: 28:20\n    let mut _7: usize;                   // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n    let mut _8: bool;                    // in scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n\n    bb0: {\n        StorageLive(_3);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:27\n        StorageLive(_4);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:13\n        _4 = _1;                         // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:13\n        StorageLive(_5);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:16: 27:27\n        _5 = Len((*_2));                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:16: 27:27\n        _3 = Lt(move _4, move _5);       // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:8: 27:27\n        StorageDead(_5);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:26: 27:27\n        StorageDead(_4);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:26: 27:27\n        switchInt(move _3) -&gt; [false: bb2, otherwise: bb1]; // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:5: 31:6\n    }\n\n    bb1: {\n        StorageLive(_6);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:15: 28:20\n        _6 = _1;                         // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:15: 28:20\n        _7 = Len((*_2));                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n        _8 = Lt(_6, _7);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n        assert(move _8, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _7, _6) -&gt; bb3; // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n    }\n\n    bb2: {\n        _0 = const 42_u8;                // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:30:9: 30:11\n        goto -&gt; bb4;                     // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:5: 31:6\n    }\n\n    bb3: {\n        _0 = (*_2)[_6];                  // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:28:9: 28:21\n        StorageDead(_6);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:29:5: 29:6\n        goto -&gt; bb4;                     // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:27:5: 31:6\n    }\n\n    bb4: {\n        StorageDead(_3);                 // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:31:5: 31:6\n        return;                          // scope 0 at /Users/alexvlasov/MatterLabs/rust/src/test/mir-opt/basic_range.rs:32:2: 32:2\n    }\n}\n</code></pre></div>\n<p>(This is after last pass of SimplifyLocals)</p>",
        "id": 242916010,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623865272
    },
    {
        "content": "<p>May be <code>move</code> is a problem, but </p>\n<div class=\"codehilite\"><pre><span></span><code>_3 = Lt(move _4, move _5);\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>_9 = Lt(_6, _7);\n</code></pre></div>\n<p>are the same  operations: <code>_4 = _1, _5 = Len((*2))</code> and <code>_6 = _1, _7 = Len((*2))</code>, but no passes have allowed to converge them. </p>\n<p>Another interesting thing: I do not see any <code>StorageLive(_7)</code> anywhere...</p>",
        "id": 242916604,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623865563
    },
    {
        "content": "<p>I assume if it's ok to have <code>_7 = Len()</code> without <code>StorageLive(_7)</code> then I should also remove it for <code>_5</code> if possible (it's local, and goes Live, move and Dead). May be <code>move</code> is indeed a problem and I have to change some extra info to change properties of <code>_5</code> ?</p>",
        "id": 242917007,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623865771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420832\">Alex Vlasov</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Different.20access.20to.20slice.20length/near/242900246\">said</a>:</p>\n<blockquote>\n<p>Looks like I need to do it before inlining, otherwise bodies are inlined and I may need to make another kind of search for it</p>\n</blockquote>\n<p>right, the len -&gt; Len lowering. I would recommend you open a PR that does just that (and does it in the intrinsic lowering pass), it has a potential perf impact and is generally something I think we want regardless of your other changes (which I also think we want for the record)</p>",
        "id": 242930023,
        "sender_full_name": "oli",
        "timestamp": 1623871592
    },
    {
        "content": "<p>my recommendation would be to convert  <code>_5 = core::slice::&lt;impl [u8]&gt;::len(move _6)</code> into <code>_5 = Len(*_6)</code> instead of doing anything complex like figuring out where _6 came from</p>",
        "id": 242930140,
        "sender_full_name": "oli",
        "timestamp": 1623871669
    },
    {
        "content": "<p>and then let the other optimizations take their course</p>",
        "id": 242930180,
        "sender_full_name": "oli",
        "timestamp": 1623871681
    },
    {
        "content": "<p>then look at the MIR at different optimizations situations and look if another optimization can be helpful to get the code into a pattern that is useful for figuring out that we're doing a length check twice</p>",
        "id": 242930309,
        "sender_full_name": "oli",
        "timestamp": 1623871733
    },
    {
        "content": "<p>Storage markers are odd, yes. Technically we don't need live markers and can compute them on the fly anyway</p>",
        "id": 242930744,
        "sender_full_name": "oli",
        "timestamp": 1623871921
    },
    {
        "content": "<blockquote>\n<p>are the same operations: _4 = _1, _5 = Len((<em>2)) and _6 = _1, _7 = Len((</em>2)), but no passes have allowed to converge them. </p>\n</blockquote>\n<p>that sounds like a good candidate for a peephole opt. If we can find duplicate rvalues, we can just reuse the previously computed value if its local is at least as live as the one of the second computation</p>",
        "id": 242931091,
        "sender_full_name": "oli",
        "timestamp": 1623872051
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86383\">https://github.com/rust-lang/rust/pull/86383</a></p>",
        "id": 242949279,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623881117
    },
    {
        "content": "<p>(I kicked CI on it)</p>",
        "id": 242950633,
        "sender_full_name": "scottmcm",
        "timestamp": 1623882008
    },
    {
        "content": "<p>(small offtop) <span class=\"user-mention\" data-user-id=\"420832\">@Alex Vlasov</span> I just wanted to chime in and say that your PR is a beautiful teaching example for the MIR optimizations (and in addition, it, of course is usable!). I've stumbled on this thread, read the code top-to-bottom and (knowing nothing more about MIR than the idea) basically understood it all. The little comments you've added were also in _just_ right amount, helpful, not overwhelming. Thank you! (you and everyone in this thread ofc :))</p>",
        "id": 242950906,
        "sender_full_name": "krdln",
        "timestamp": 1623882214
    },
    {
        "content": "<p>Thank you for a feedback, <span class=\"user-mention\" data-user-id=\"125261\">@krdln</span></p>",
        "id": 242952134,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1623883036
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242977115,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623910649
    }
]