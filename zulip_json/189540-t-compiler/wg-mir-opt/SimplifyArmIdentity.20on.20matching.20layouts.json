[
    {
        "content": "<p>I am trying to resolve <a href=\"https://github.com/rust-lang/rust/blob/13f9aa190957b993a268fd4a046fce76ca8814ee/src/librustc_mir/transform/simplify_try.rs#L292\">https://github.com/rust-lang/rust/blob/13f9aa190957b993a268fd4a046fce76ca8814ee/src/librustc_mir/transform/simplify_try.rs#L292</a> such that the optmization can run on code like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MyResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MyResult</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MyResult</span>::<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">MyResult</span>::<span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>My current progress is that I have changed the condition so that it checks if the layouts match. My problem arrives when trying to optimize the above test case.</p>\n<div class=\"codehilite\"><pre><span></span><code>encountered `Assign` statement with incompatible types:\nleft-hand side has type: MyResult&lt;u8, i32&gt;\nright-hand side has type: std::result::Result&lt;u8, i32&gt;\n  --&gt; /home/simon/Documents/rust/src/test/mir-opt/simplify-arm-same-layout.rs:11:18\n   |\n11 |         Ok(x) =&gt; MyResult::Ok(x),\n   |                  ^^^^^^^^^^^^^^^\n   |\n   = note: delayed at src/librustc_mir/transform/validate.rs:140:36\n</code></pre></div>\n\n\n<p>The layouts match, but the types don't. How would I align the types so the validater won't complain? I see a Cast RValue, but is that only for primitives/variant casting? Else, a call to transmute could work. But then the inliner has to then inline that call, which seems like a roundabout way of doing it.<br>\nAny other tricks?</p>",
        "id": 205048114,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1595762764
    },
    {
        "content": "<p>hmm... I've wanted type-ignorant assignments before... Maybe we should just have a flag on <code>StatementKind::Assign</code> that says whether the assignment is actually a transmute (we could even lower transmute calls to such assignments then!) cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span></p>",
        "id": 205048400,
        "sender_full_name": "oli",
        "timestamp": 1595763306
    },
    {
        "content": "<p>I see this as a design decision we could have either way: do we want assignment to well-typed in MIR or not?</p>",
        "id": 205110744,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853155
    },
    {
        "content": "<p>these optimizations provide a motivation for at least also having an untyped (\"transmuting\") assignment operation, though I cannot judge if the optimization will be useful enough to be worth that trouble. if yes, we could either say that all assignments are \"transmuting\" or we add a flag.</p>",
        "id": 205110814,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853225
    },
    {
        "content": "<p>I am not entirely sure what benefit we would have from that flag though.</p>",
        "id": 205110857,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/SimplifyArmIdentity.20on.20matching.20layouts/near/205110857\">said</a>:</p>\n<blockquote>\n<p>I am not entirely sure what benefit we would have from that flag though.</p>\n</blockquote>\n<p>mainly MIR simplicity, as we get rid of <code>transmute</code> calls in terminators, but since we don't have first class support for other intrinsics... Not sure how much sense that makes. I think at the rust all hands <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and others talked about adding non-unwinding function calls as statements in MIR, maybe that would be a better approach for this, too</p>",
        "id": 205111753,
        "sender_full_name": "oli",
        "timestamp": 1595853823
    },
    {
        "content": "<p>extended basic blocks.</p>",
        "id": 205122762,
        "sender_full_name": "nagisa",
        "timestamp": 1595859736
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/39685\">https://github.com/rust-lang/rust/issues/39685</a></p>",
        "id": 205122805,
        "sender_full_name": "nagisa",
        "timestamp": 1595859756
    },
    {
        "content": "<p>thanks! Right, that was even more powerful</p>",
        "id": 205124829,
        "sender_full_name": "oli",
        "timestamp": 1595860682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>mainly MIR simplicity, as we get rid of transmute calls in terminators</p>\n</blockquote>\n<p>I meant, what does the flag gain us compared to just allowing transmute on all assignments</p>",
        "id": 205380280,
        "sender_full_name": "RalfJ",
        "timestamp": 1596040227
    },
    {
        "content": "<p>oh... no accidental introduction of transmuting assignments?</p>",
        "id": 205380357,
        "sender_full_name": "oli",
        "timestamp": 1596040263
    },
    {
        "content": "<p>hm, maybe it helps as a safety net... not sure it's worth the effort though. but then, we already did all the work of implementing the check.^^</p>",
        "id": 205380518,
        "sender_full_name": "RalfJ",
        "timestamp": 1596040353
    },
    {
        "content": "<p>oh suddenly you think safety nets may not be worth the effort? <code>Scalar::Bits { size, ..}</code> <em>cough</em> <em>cough</em> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205380708,
        "sender_full_name": "oli",
        "timestamp": 1596040452
    },
    {
        "content": "<p>joking aside, Until we have a good argument to remove it, I think we should just keep it if it doesn't have any perf or memory regressions</p>",
        "id": 205380803,
        "sender_full_name": "oli",
        "timestamp": 1596040504
    },
    {
        "content": "<p>of course we need to be careful around <code>StatementKind</code> and increasing its size</p>",
        "id": 205380828,
        "sender_full_name": "oli",
        "timestamp": 1596040520
    },
    {
        "content": "<p>The no transmuting assignment assertion in cg_clif has saved me countless times.</p>",
        "id": 205380868,
        "sender_full_name": "bjorn3",
        "timestamp": 1596040541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/SimplifyArmIdentity.20on.20matching.20layouts/near/205380708\">said</a>:</p>\n<blockquote>\n<p>oh suddenly you think safety nets may not be worth the effort? <code>Scalar::Bits { size, ..}</code> <em>cough</em> <em>cough</em> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>fair, but that safety nat has proven to be effective at catching bugs. ;) the other one -- so far not, did it?</p>",
        "id": 205568803,
        "sender_full_name": "RalfJ",
        "timestamp": 1596184068
    },
    {
        "content": "<p>but it looks like it was useful for <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> so that's a good argument</p>",
        "id": 205568855,
        "sender_full_name": "RalfJ",
        "timestamp": 1596184087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you have your own check there and what does it look like? it turned out to be surprisingly non-trivial to properly check for this, see <a href=\"https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_mir/transform/validate.rs#L183\">https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_mir/transform/validate.rs#L183</a></p>",
        "id": 205568924,
        "sender_full_name": "RalfJ",
        "timestamp": 1596184173
    },
    {
        "content": "<p>This is the check I use: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/c5899526e4a6244ca200900e3f825c72e8ad5559/src/value_and_place.rs#L411-L462\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/c5899526e4a6244ca200900e3f825c72e8ad5559/src/value_and_place.rs#L411-L462</a></p>\n<p>Basically it matches on the type. If it is a kind that has late bound regions then those are erased and it recurses. Otherwise it asserts that the types are equal. All early bound lifetimes are already erased by <code>fx.layout_of</code> before that function is reached.</p>",
        "id": 205571906,
        "sender_full_name": "bjorn3",
        "timestamp": 1596186809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  okay so this should be functionally equivalent to <a href=\"https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_mir/transform/validate.rs#L41\">https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_mir/transform/validate.rs#L41</a> ?</p>",
        "id": 206040475,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Yes, except that it also ignores mutability of references. At least in the past casting from <code>&amp;mut T</code> to <code>&amp;T</code> could happen during assignments. I don't know if this is still true though.</p>",
        "id": 206044760,
        "sender_full_name": "bjorn3",
        "timestamp": 1596645018
    }
]