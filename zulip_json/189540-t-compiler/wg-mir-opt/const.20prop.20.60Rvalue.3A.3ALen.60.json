[
    {
        "content": "<p>ooooh</p>",
        "id": 166270365,
        "sender_full_name": "oli",
        "timestamp": 1558533935
    },
    {
        "content": "<p>I think the main issue is some unimplemented <code>Place</code> handling in <code>eval_place</code></p>",
        "id": 166270451,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558533969
    },
    {
        "content": "<p>unimplemented?</p>",
        "id": 166270471,
        "sender_full_name": "oli",
        "timestamp": 1558533988
    },
    {
        "content": "<p>Unhandled is probably a better term</p>",
        "id": 166270478,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558533998
    },
    {
        "content": "<p>For example, <code>ProjectionElem::Deref</code> falls into this branch <a href=\"https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L312\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L312\">https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L312</a></p>",
        "id": 166270641,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534098
    },
    {
        "content": "<p>oh. Hmm... I think we should be able to do even <code>Index</code>nowadays</p>",
        "id": 166270743,
        "sender_full_name": "oli",
        "timestamp": 1558534162
    },
    {
        "content": "<p>it would just be fairly unfun to do, maybe we can share more code with <code>InterpCx</code>, let's see</p>",
        "id": 166270793,
        "sender_full_name": "oli",
        "timestamp": 1558534198
    },
    {
        "content": "<p>hmmmmmm. evil idea: we can actually create the stackframe of the <code>InterpCx</code> used in const propagation and just treat all kinds of errors as \"don't propagate\"</p>",
        "id": 166271128,
        "sender_full_name": "oli",
        "timestamp": 1558534355
    },
    {
        "content": "<p>There's a comment about using <code>ecx.operand_projection()</code> but it seems to imply that doesn't work because we don't have a proper evaluation stack?</p>",
        "id": 166271135,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534360
    },
    {
        "content": "<p>Interesting</p>",
        "id": 166271152,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534375
    },
    {
        "content": "<p>yea, <code>InterpCx</code> has a fake <code>Frame</code></p>",
        "id": 166271156,
        "sender_full_name": "oli",
        "timestamp": 1558534377
    },
    {
        "content": "<p>fake meaning: no local variables</p>",
        "id": 166271175,
        "sender_full_name": "oli",
        "timestamp": 1558534387
    },
    {
        "content": "<p>but I mean, nowadays we are keeping around our own local variables</p>",
        "id": 166271191,
        "sender_full_name": "oli",
        "timestamp": 1558534400
    },
    {
        "content": "<p>Ok</p>",
        "id": 166271196,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534402
    },
    {
        "content": "<p>I haven't looked at it too closely</p>",
        "id": 166271219,
        "sender_full_name": "oli",
        "timestamp": 1558534420
    },
    {
        "content": "<p>but it may be an avenue we can go into in the future</p>",
        "id": 166271232,
        "sender_full_name": "oli",
        "timestamp": 1558534427
    },
    {
        "content": "<p>I'd started going down the path of implementing support for <code>Deref</code> and some other stuff but it was beginning to feel like I was just duplicating <code>operand_projection()</code></p>",
        "id": 166271233,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534427
    },
    {
        "content": "<p>for now, you are mainly missing <code>Deref</code> right now for <code>Len</code>?</p>",
        "id": 166271270,
        "sender_full_name": "oli",
        "timestamp": 1558534442
    },
    {
        "content": "<p>There's at least another <code>Place</code> case I need to implement as well. Something to do with the other <code>StaticKind</code>s <a href=\"https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L315\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L315\">https://github.com/rust-lang/rust/blob/37ff5d388f8c004ca248adb635f1cc84d347eda0/src/librustc_mir/transform/const_prop.rs#L315</a></p>",
        "id": 166271347,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534485
    },
    {
        "content": "<p>hmm... what happens if you just invoke <code>operand_projection</code>?</p>",
        "id": 166271385,
        "sender_full_name": "oli",
        "timestamp": 1558534505
    },
    {
        "content": "<p>oh that calls <code>ref_to_mplace</code></p>",
        "id": 166271506,
        "sender_full_name": "oli",
        "timestamp": 1558534566
    },
    {
        "content": "<p>not good</p>",
        "id": 166271519,
        "sender_full_name": "oli",
        "timestamp": 1558534569
    },
    {
        "content": "<p>Because it returns an <code>mplace</code> or because of const eval stuff?</p>",
        "id": 166271609,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534634
    },
    {
        "content": "<p>Sorry, miri is still kind of a black box to me</p>",
        "id": 166271620,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534643
    },
    {
        "content": "<p>yea, mplace would point into the local stack</p>",
        "id": 166271903,
        "sender_full_name": "oli",
        "timestamp": 1558534805
    },
    {
        "content": "<p>it may work out, but <code>InterpCx</code> is not setup to handle thsi</p>",
        "id": 166271924,
        "sender_full_name": "oli",
        "timestamp": 1558534824
    },
    {
        "content": "<p>*this</p>",
        "id": 166271928,
        "sender_full_name": "oli",
        "timestamp": 1558534825
    },
    {
        "content": "<p>so for now, feel free to create some duplication</p>",
        "id": 166271932,
        "sender_full_name": "oli",
        "timestamp": 1558534832
    },
    {
        "content": "<p>I'll look into merging miri and const prop</p>",
        "id": 166271943,
        "sender_full_name": "oli",
        "timestamp": 1558534843
    },
    {
        "content": "<p>Does the mplace stuff impact interpreting <code>Immediate</code>s? That's another thing on my list to add support for</p>",
        "id": 166271979,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534871
    },
    {
        "content": "<p>what do you mean by \"interpreting\"? like operations on <code>Immediate</code>?</p>",
        "id": 166272013,
        "sender_full_name": "oli",
        "timestamp": 1558534901
    },
    {
        "content": "<p>We hit that in <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165707831\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165707831\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165707831</a></p>",
        "id": 166272016,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534904
    },
    {
        "content": "<p>Yeah</p>",
        "id": 166272026,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534909
    },
    {
        "content": "<p>Const propagating I should say</p>",
        "id": 166272041,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558534916
    },
    {
        "content": "<p>hmm</p>",
        "id": 166273703,
        "sender_full_name": "oli",
        "timestamp": 1558535857
    },
    {
        "content": "<p>ok, this may actually work</p>",
        "id": 166273709,
        "sender_full_name": "oli",
        "timestamp": 1558535862
    },
    {
        "content": "<p>even with the <code>mplace</code></p>",
        "id": 166273715,
        "sender_full_name": "oli",
        "timestamp": 1558535868
    },
    {
        "content": "<p>because if you input an <code>Immediate</code>, and it is a <code>Pointer</code>, then the <code>Allocation</code> exists, and we can read from it, never even looking at the stack</p>",
        "id": 166273805,
        "sender_full_name": "oli",
        "timestamp": 1558535910
    },
    {
        "content": "<p>so yea, just call <code>operand_projection</code></p>",
        "id": 166273847,
        "sender_full_name": "oli",
        "timestamp": 1558535930
    },
    {
        "content": "<p>Ok</p>",
        "id": 166273945,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558535980
    },
    {
        "content": "<p>Thanks for your help btw, I really enjoy working in this part of the compiler! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166274071,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558536013
    },
    {
        "content": "<p>and if you have an <code>Indirect</code> e.g. after casting, you should be able to <code>try_read_immediate</code></p>",
        "id": 166274333,
        "sender_full_name": "oli",
        "timestamp": 1558536148
    },
    {
        "content": "<p>great you like it! I think it's a fun part, too</p>",
        "id": 166274393,
        "sender_full_name": "oli",
        "timestamp": 1558536195
    },
    {
        "content": "<p>I'm going to close <a href=\"https://github.com/rust-lang/rust/issues/61081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61081\">#61081</a> for now since:</p>\n<p>1. The current implementation has some undesirable changes like the stuff to support statics and bare slices <br>\n2. I don't see anyway to actually exercise the code that handles the <code>Len</code> operand and I don't think we should be adding dead code to the compiler<br>\nHowever, I think <a href=\"https://github.com/rust-lang/rust/pull/61081#discussion_r287575415\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61081#discussion_r287575415\">this comment</a> about supporting propagation from <code>let</code> bindings has some potential so I'm going to play with that a bit.</p>",
        "id": 166726765,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559056750
    },
    {
        "content": "<p>have you tried doing it all in one expressions so it'd all be temporaries? Like <code>(&amp;[5, 6] as &amp;[u8])[42]</code>?</p>",
        "id": 166789822,
        "sender_full_name": "oli",
        "timestamp": 1559114060
    },
    {
        "content": "<p>I tried that but <code>as</code> doesn't want to do the cast:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0605]: non-primitive cast: `&amp;[i32; 2]` as `&amp;[u8]`\n --&gt; src/main.rs:3:13\n  |\n3 |     let x = (&amp;[5, 6] as &amp;[u8]);\n  |             ^^^^^^^^^^^^^^^^^^\n  |\n  = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n</pre></div>",
        "id": 166806865,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559130569
    },
    {
        "content": "<p>oh well, inference strikes again</p>",
        "id": 166806986,
        "sender_full_name": "oli",
        "timestamp": 1559130700
    },
    {
        "content": "<p><code>&amp;[5, 6] as &amp;[i32]</code> or <code>&amp;[5u8, 6] as &amp;[u8]</code></p>",
        "id": 166806994,
        "sender_full_name": "oli",
        "timestamp": 1559130718
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 166807626,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559131270
    },
    {
        "content": "<p>I thought it was complaining because of the array -&gt; slice conversion</p>",
        "id": 166807637,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559131285
    }
]