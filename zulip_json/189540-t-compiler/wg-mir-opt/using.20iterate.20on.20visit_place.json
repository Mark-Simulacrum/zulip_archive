[
    {
        "content": "<p>I was discussing with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> earlier about using <code>Place::iterate</code> to implement visit_place and have some better API there</p>",
        "id": 167032412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335136
    },
    {
        "content": "<p>right now, <code>visit_place</code> does <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L686\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L686\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L686</a></p>",
        "id": 167032482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335202
    },
    {
        "content": "<p>and the <code>visit_projection</code> calls <code>visit_place</code> again passing base <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L701\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L701\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L701</a> so you end in this way recursing and traversing the full thing</p>",
        "id": 167032555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335250
    },
    {
        "content": "<p>I wanted to propose an API that's going to be better for <code>Place 2.0</code> and a bit better IMO</p>",
        "id": 167032590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335277
    },
    {
        "content": "<p>basically we can have <code>visit_place</code> iterating over the projections backwards and calling <code>visit_projection</code> on each and then calling <code>visit_place_base</code> on the base</p>",
        "id": 167032720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335346
    },
    {
        "content": "<p>to do that you call <code>iterate</code> have the base and the proj iterator</p>",
        "id": 167032730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335365
    },
    {
        "content": "<p>something like ...</p>",
        "id": 167032740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">place_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place_projection</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">place_projection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_place_base</span><span class=\"p\">(</span><span class=\"n\">place_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167032747,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335382
    },
    {
        "content": "<p>so implementors can just implement visit_projection if they need to change that behavior, can implement visit_place_base and rely on the fact that the default <code>visit_place</code> impl will traverse everything or can just implement the full thing if they need to change everything</p>",
        "id": 167032910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335493
    },
    {
        "content": "<p>the problem I'm having is that <code>iterate</code> takes a shared reference and this visitors definitions are under a macro that uses <code>mutability</code> to define the mutable or immutable visitor</p>",
        "id": 167033076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335583
    },
    {
        "content": "<p>so in particular that <code>proj</code> you see in the code is an immutable thing</p>",
        "id": 167033125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335623
    },
    {
        "content": "<p>but visit_projection signature is:</p>",
        "id": 167033139,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">visit_projection</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">place_projection</span>: <span class=\"kp\">&amp;</span> <span class=\"cp\">$($mutability</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">context</span>: <span class=\"nc\">PlaceContext</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167033232,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335683
    },
    {
        "content": "<p>a couple of questions:</p>",
        "id": 167033303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335761
    },
    {
        "content": "<p>1. do you think that worth changing the API?</p>",
        "id": 167033315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335778
    },
    {
        "content": "<p>2. in that case, I guess the best thing I can do is define <code>iterate</code> and <code>iterate_mut</code>, right?, any other better approach?</p>",
        "id": 167033384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559335812
    },
    {
        "content": "<blockquote>\n<p>1. do you think that worth changing the API?</p>\n</blockquote>\n<p>do we know any places that will <em>want</em> to visit the \"base\" and \"projection\" cases?</p>",
        "id": 167035548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337762
    },
    {
        "content": "<p>versus overloading <code>visit_place</code> as a whole</p>",
        "id": 167035558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L663-L676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L663-L676\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L663-L676</a></p>",
        "id": 167035688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559337892
    },
    {
        "content": "<p>I guess this is only about overriding base behavior and doing the default thing afterwards</p>",
        "id": 167035704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559337908
    },
    {
        "content": "<p>I feel like that case would work equally well</p>",
        "id": 167035713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337932
    },
    {
        "content": "<p>if you only had a hook on <code>visit_place</code></p>",
        "id": 167035719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337937
    },
    {
        "content": "<p>i.e., there is one base, so it could just be</p>",
        "id": 167035724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">visit_place</span><span class=\"p\">(</span><span class=\"n\">place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167035737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337963
    },
    {
        "content": "<p>(especially in MIR 2.0 where this is very efficient)</p>",
        "id": 167035785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337970
    },
    {
        "content": "<p>I think a more compelling case might be something like <code>visit_local</code></p>",
        "id": 167035802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337985
    },
    {
        "content": "<p>which I...think we also have?</p>",
        "id": 167035810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559337997
    },
    {
        "content": "<p>i.e., we should visit the <em>base</em> recursively</p>",
        "id": 167035814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338005
    },
    {
        "content": "<p>well, on MIR 2.0 would be different</p>",
        "id": 167035823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338014
    },
    {
        "content": "<p>but that's the easy case</p>",
        "id": 167035824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338016
    },
    {
        "content": "<p>ah let's not forget</p>",
        "id": 167035840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338025
    },
    {
        "content": "<p><code>iterate</code> probably won't exist anymore</p>",
        "id": 167035843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338025
    },
    {
        "content": "<p><code>foo.bar[baz]</code></p>",
        "id": 167035846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338030
    },
    {
        "content": "<p>where <code>baz</code> would itself be a place (that is part of a projection)</p>",
        "id": 167035854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338039
    },
    {
        "content": "<p>iterate would just be <code>(place.base, place.projection)</code></p>",
        "id": 167035860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338046
    },
    {
        "content": "<p>and hence could be removed</p>",
        "id": 167035867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338057
    },
    {
        "content": "<p>but <code>iterate</code> is a handy method to move towards Place 2.0</p>",
        "id": 167035879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338075
    },
    {
        "content": "<p>I can just change the impl of it and done</p>",
        "id": 167035932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338087
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L690-L709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L690-L709\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L690-L709</a> is also only about base</p>",
        "id": 167035989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338153
    },
    {
        "content": "<p>anyway, I guess my main question then is the opposite, why there's a default implementation if it's not very useful and we always override it?</p>",
        "id": 167036130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm trying to see if it's possible to do a default impl that is more convenient</p>",
        "id": 167036197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338331
    },
    {
        "content": "<blockquote>\n<p>anyway, I guess my main question then is the opposite, why there's a default implementation if it's not very useful and we always override it?</p>\n</blockquote>\n<p>why do you say that?</p>",
        "id": 167036215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338367
    },
    {
        "content": "<p>there are definitely cases where we don't override it</p>",
        "id": 167036240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338395
    },
    {
        "content": "<p>it seems like the current one does the same thing as what you are proposing, basically</p>",
        "id": 167036246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338404
    },
    {
        "content": "<p>that is, it recurses into the content</p>",
        "id": 167036252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338413
    },
    {
        "content": "<p>yes it does</p>",
        "id": 167036326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338456
    },
    {
        "content": "<p>in any case, looking at a few more examples and thinking about it</p>",
        "id": 167036329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338460
    },
    {
        "content": "<p>the problem is the it traverses the thing using recursion</p>",
        "id": 167036343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338481
    },
    {
        "content": "<p>I think you probably <em>do</em> want to recurse -- at least, I see a number of MIR visitors that only override <code>visit_local</code></p>",
        "id": 167036345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338481
    },
    {
        "content": "<p>and I'm changing the structure to not be recursive</p>",
        "id": 167036349,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338490
    },
    {
        "content": "<p>and a local can be inside a place</p>",
        "id": 167036372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338507
    },
    {
        "content": "<p>so we do need the default impl of <code>visit_place</code> to recurse and handle those cases</p>",
        "id": 167036385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338521
    },
    {
        "content": "<p>basically this relies on the implementor calling super_place to have the recursion</p>",
        "id": 167036390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338529
    },
    {
        "content": "<p>and that's a thing I don't like that much</p>",
        "id": 167036394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338536
    },
    {
        "content": "<blockquote>\n<p>basically this relies on the implementor calling super_place to have the recursion</p>\n</blockquote>\n<p>what do you mean by \"this\"</p>",
        "id": 167036402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338550
    },
    {
        "content": "<p>I don't really understand your critique of the current structure, which I think is pretty natural given that place is a tree right now, but I agree it's not the obvious structure you want if place is <em>not</em> a tree</p>",
        "id": 167036456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338580
    },
    {
        "content": "<p>I think the structure you're proposing seems right to me</p>",
        "id": 167036465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338596
    },
    {
        "content": "<p>but it will need an <code>iterator_mut</code> method presumably</p>",
        "id": 167036467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338602
    },
    {
        "content": "<p>kind of annoying</p>",
        "id": 167036469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338605
    },
    {
        "content": "<blockquote>\n<p>I don't really understand your critique of the current structure, which I think is pretty natural given that place is a tree right now, but I agree it's not the obvious structure you want if place is <em>not</em> a tree</p>\n</blockquote>\n<p>yeah, that's the thing</p>",
        "id": 167036483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338624
    },
    {
        "content": "<p>the current structure is right for the recursive Place</p>",
        "id": 167036495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338648
    },
    {
        "content": "<p>for instance <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L707\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L707\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L707</a></p>",
        "id": 167036497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338654
    },
    {
        "content": "<p>that's problematic when you're structure is not recursive</p>",
        "id": 167036501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338667
    },
    {
        "content": "<p>basically I need to avoid that call and roll all the Place traversing there</p>",
        "id": 167036556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338692
    },
    {
        "content": "<p>that's why the default implementation is not helping that much</p>",
        "id": 167036567,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338704
    },
    {
        "content": "<p>ok, so maybe I see what you are saying: the implementors of today's visitor are expecting a recursive structure</p>",
        "id": 167036610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338751
    },
    {
        "content": "<p>and have to be adapted to the new API?</p>",
        "id": 167036611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338755
    },
    {
        "content": "<p>(if so, I argee)</p>",
        "id": 167036613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338758
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 167036616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338768
    },
    {
        "content": "<p>and also</p>",
        "id": 167036623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338773
    },
    {
        "content": "<blockquote>\n<p>but it will need an <code>iterator_mut</code> method presumably</p>\n</blockquote>\n<p>this structure I'm talking about it's probable a mid step in my PR</p>",
        "id": 167036638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338795
    },
    {
        "content": "<p>(it might even want a different name)</p>",
        "id": 167036641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338801
    },
    {
        "content": "<p>just to make sure you look at each impl</p>",
        "id": 167036690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338808
    },
    {
        "content": "<p>it will probably not be present after the final implementation is ready with projections being an slice</p>",
        "id": 167036707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338840
    },
    {
        "content": "<p>once projection is a slice</p>",
        "id": 167036714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338848
    },
    {
        "content": "<p>so that's an interesting thing</p>",
        "id": 167036730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338861
    },
    {
        "content": "<p>I forget what the final API is going to be here <em>but</em></p>",
        "id": 167036742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338867
    },
    {
        "content": "<p>you can just do <code>place.base</code> and <code>for proj in place.projection</code></p>",
        "id": 167036744,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338869
    },
    {
        "content": "<p>visiting \"mutably\" may not be so easy</p>",
        "id": 167036749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338886
    },
    {
        "content": "<p>if the place is to have projections be an interned slice</p>",
        "id": 167036755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338900
    },
    {
        "content": "<p>since that will not be <code>&amp;mut</code></p>",
        "id": 167036761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338903
    },
    {
        "content": "<p>(Is there a recent-ish write up about what Place 2.0 is going to be? I'm not sure I know enough to even form an opinion.)</p>",
        "id": 167036820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559338928
    },
    {
        "content": "<p>yeah, we would probably want to not have <code>visit_projection</code> anymore</p>",
        "id": 167036826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338934
    },
    {
        "content": "<p>there aren't very many mut visitors I don't think</p>",
        "id": 167036834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338953
    },
    {
        "content": "<p>the one in NLL will be a bit of a difficulty</p>",
        "id": 167036837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338962
    },
    {
        "content": "<p>(it rewrites types, and types can appear in projections etc)</p>",
        "id": 167036850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559338978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I think it's here <a href=\"https://paper.dropbox.com/doc/Place-2.0-current-PR-status--AeI5IB7l~bBywohy7t9iTW03Ag-vmbnFv8VkCEuL57QfWWMH\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Place-2.0-current-PR-status--AeI5IB7l~bBywohy7t9iTW03Ag-vmbnFv8VkCEuL57QfWWMH\">https://paper.dropbox.com/doc/Place-2.0-current-PR-status--AeI5IB7l~bBywohy7t9iTW03Ag-vmbnFv8VkCEuL57QfWWMH</a></p>",
        "id": 167036872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559338991
    },
    {
        "content": "<blockquote>\n<p>yeah, we would probably want to not have <code>visit_projection</code> anymore</p>\n</blockquote>\n<p>I mean, we can just have <code>visit_place</code> and that won't be a problem, but unsure I see what you're saying</p>",
        "id": 167036954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339047
    },
    {
        "content": "<blockquote>\n<p>(it rewrites types, and types can appear in projections etc)</p>\n</blockquote>\n<p>ahh we would need to have write access there, so ... ???</p>",
        "id": 167036982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339088
    },
    {
        "content": "<p>yes, the mut-visitor structure is just kind of problematic here</p>",
        "id": 167037010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339115
    },
    {
        "content": "<p>it seems like a lot of the mut-visitors that exist override <code>visit_local</code></p>",
        "id": 167037017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339126
    },
    {
        "content": "<p>(which can also appear in projections)</p>",
        "id": 167037021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339134
    },
    {
        "content": "<p>I don't know what's the best solution here</p>",
        "id": 167037098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339173
    },
    {
        "content": "<p>but it seems to me that the <code>MutVisitor</code> will have to offer a more limited API</p>",
        "id": 167037119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339191
    },
    {
        "content": "<p>one can update a <code>Place</code> but to modify things <em>within</em> a place you will have to use a \"folder\" and re-intern the results</p>",
        "id": 167037127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339207
    },
    {
        "content": "<p>on the one hand, the current <code>MutVisitor</code> is very nicely efficient (modifying in place etc)..</p>",
        "id": 167037157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339245
    },
    {
        "content": "<p>...but there is also a good case for making it more \"folder-like\"</p>",
        "id": 167037164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339254
    },
    {
        "content": "<p>(...and actually it probably travereses a lot of IR that will never be modified, I wonder if LLVM can strip that stuff out)</p>",
        "id": 167037205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339283
    },
    {
        "content": "<p>by folder-like I mean having an interface like <code>fn fold_local(Local) -&gt; Local</code></p>",
        "id": 167037228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339297
    },
    {
        "content": "<p>instead of <code>visit_local(&amp;mut Local)</code></p>",
        "id": 167037231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339303
    },
    {
        "content": "<p>I guess it'd be worth looking at what the existing mut visitors do exactly</p>",
        "id": 167037239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339311
    },
    {
        "content": "<p>ok :)</p>",
        "id": 167037246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339325
    },
    {
        "content": "<p>my guess is we'll wind up with a more limited <code>MutVisitor</code> API</p>",
        "id": 167037264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339348
    },
    {
        "content": "<p>one that includes things like <code>visit_statement</code></p>",
        "id": 167037278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339360
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 167037305,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339380
    },
    {
        "content": "<p>but not the really detailed things like <code>visit_local</code></p>",
        "id": 167037314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339388
    },
    {
        "content": "<p>or <code>visit_ty</code></p>",
        "id": 167037316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339392
    },
    {
        "content": "<p>those we would instead want to be more \"folder-like\"</p>",
        "id": 167037323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339400
    },
    {
        "content": "<p>so that they can apply to projections too</p>",
        "id": 167037373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339405
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 167037405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339433
    },
    {
        "content": "<p>so back a bit about what I was saying, do you think I should do the <code>iterate_mut</code> thing then?</p>",
        "id": 167037414,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339441
    },
    {
        "content": "<p>I meant, meanwhile</p>",
        "id": 167037418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339445
    },
    {
        "content": "<p>and probably as a mid step</p>",
        "id": 167037427,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339454
    },
    {
        "content": "<p>I guess it's a decent mid-way step</p>",
        "id": 167037465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339507
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 167037474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339519
    },
    {
        "content": "<p>you definitely don't want to do what I'm suggesting above all together</p>",
        "id": 167037478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559339521
    },
    {
        "content": "<p>hehe no no :)</p>",
        "id": 167037530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339529
    },
    {
        "content": "<p>but also, I'm not even adding projection as a slice yet</p>",
        "id": 167037552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339557
    },
    {
        "content": "<p>we defined a previous step which is migrating Place to a struct but still having projection be recursive</p>",
        "id": 167037577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/60913/files#diff-f0577ac900ffbd36d3bb3421a928cbbdR1909\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60913/files#diff-f0577ac900ffbd36d3bb3421a928cbbdR1909\">https://github.com/rust-lang/rust/pull/60913/files#diff-f0577ac900ffbd36d3bb3421a928cbbdR1909</a></p>",
        "id": 167037605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559339609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just had a couple of minutes and went ahead with what I had on my head about <code>visit_place</code></p>",
        "id": 167415537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559758774
    },
    {
        "content": "<p>just opened as WIP this <a href=\"https://github.com/rust-lang/rust/pull/61554\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61554\">https://github.com/rust-lang/rust/pull/61554</a></p>",
        "id": 167415546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559758780
    },
    {
        "content": "<p>I've explained the reasoning there, let me know if it's clear and what do you think about that</p>",
        "id": 167415558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559758797
    },
    {
        "content": "<p>IMO, the code this way will be a bit more clear</p>",
        "id": 167415634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559758818
    },
    {
        "content": "<p>I can continue with the rest of the things that need to be changed to see if makes sense but wanted to check with you both first</p>",
        "id": 167415668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559758852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> after reviewing the rest of the <code>visit_place</code> impls there are no more changes than what's on the PR</p>",
        "id": 167422643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559763132
    },
    {
        "content": "<p>so unsure if it worth, anyway give it a look</p>",
        "id": 167422646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559763141
    },
    {
        "content": "<p>I'm going to open another PR to change some of the <code>visit_place</code> impls to use <code>iterate</code></p>",
        "id": 167422662,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559763166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> this is the other PR <a href=\"https://github.com/rust-lang/rust/pull/61559\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61559\">https://github.com/rust-lang/rust/pull/61559</a></p>",
        "id": 167429828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559768416
    },
    {
        "content": "<p>if you don't like the first PR, maybe we can have <code>visit_place_base</code> anyway so we can get rid of <a href=\"https://github.com/rust-lang/rust/pull/61559/files#diff-e682b38b565035a82f29560c3b79144bR208\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61559/files#diff-e682b38b565035a82f29560c3b79144bR208\">https://github.com/rust-lang/rust/pull/61559/files#diff-e682b38b565035a82f29560c3b79144bR208</a></p>",
        "id": 167429979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1559768556
    }
]