[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<p>This is the discussion thread for <a href=\"https://github.com/rust-lang/rust/issues/61769\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61769\">#61769</a>.</p>",
        "id": 167948609,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347451
    },
    {
        "content": "<p>I'm feeling like we should just close the PR and work on the refactoring to use <code>InterpCx</code> more.</p>",
        "id": 167948649,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347476
    },
    {
        "content": "<p>sorry, I should have pushed for this stronger to begin with</p>",
        "id": 167948662,
        "sender_full_name": "oli",
        "timestamp": 1560347485
    },
    {
        "content": "<p>What do you think?</p>",
        "id": 167948665,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347487
    },
    {
        "content": "<p>No worries! I forgot about that as well.</p>",
        "id": 167948675,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347495
    },
    {
        "content": "<p>Either way is fine with me. But if you're willing to work on this, I think in sumtotal it will be less work if you drop the PR, but it will take longer to get somewhere</p>",
        "id": 167948757,
        "sender_full_name": "oli",
        "timestamp": 1560347531
    },
    {
        "content": "<p>I'm definitely interested in working on that. Are there specific steps you can think of that need to happen, or is it just one large change?</p>",
        "id": 167948829,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347595
    },
    {
        "content": "<p>you can begin with just getting rid of our own <code>OpTy</code> storage and reusing the one from the lowermost frame.</p>",
        "id": 167948926,
        "sender_full_name": "oli",
        "timestamp": 1560347650
    },
    {
        "content": "<p>this is zero change in behaviour and just a change in where we store stuff</p>",
        "id": 167948933,
        "sender_full_name": "oli",
        "timestamp": 1560347660
    },
    {
        "content": "<p>Ok</p>",
        "id": 167948950,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347674
    },
    {
        "content": "<p>as an interim step you may even want to stop accessing our storage directly and add setter and getters</p>",
        "id": 167948965,
        "sender_full_name": "oli",
        "timestamp": 1560347684
    },
    {
        "content": "<p>then, in the storage-reuse step you can just change the setters and getters without impacting a lot of code</p>",
        "id": 167949002,
        "sender_full_name": "oli",
        "timestamp": 1560347709
    },
    {
        "content": "<p>this can be in one PR and just two commits after each other</p>",
        "id": 167949013,
        "sender_full_name": "oli",
        "timestamp": 1560347724
    },
    {
        "content": "<p>Ok</p>",
        "id": 167949029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347731
    },
    {
        "content": "<p>\"lowermost\" you mean the base stack frame or the stack fame currently being evaluated?</p>",
        "id": 167949051,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347748
    },
    {
        "content": "<p>the base stack frame, we should only ever have one when inside the const propagator</p>",
        "id": 167949119,
        "sender_full_name": "oli",
        "timestamp": 1560347769
    },
    {
        "content": "<p>Ok</p>",
        "id": 167949127,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347777
    },
    {
        "content": "<p>you only ever get more stack frames once we start evaluating function calls</p>",
        "id": 167949130,
        "sender_full_name": "oli",
        "timestamp": 1560347778
    },
    {
        "content": "<p>and even then they should be finished once control comes back to you</p>",
        "id": 167949143,
        "sender_full_name": "oli",
        "timestamp": 1560347791
    },
    {
        "content": "<p>hmm... although in the presence of errors that may not be true</p>",
        "id": 167949163,
        "sender_full_name": "oli",
        "timestamp": 1560347809
    },
    {
        "content": "<p>but we'll cross that bridge once we get to function call propagation</p>",
        "id": 167949177,
        "sender_full_name": "oli",
        "timestamp": 1560347823
    },
    {
        "content": "<p>We'll probably need to \"unwind\" the stack back to the callee</p>",
        "id": 167949194,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347831
    },
    {
        "content": "<p>Sure</p>",
        "id": 167949201,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347836
    },
    {
        "content": "<p>ugh, nah, we'll just not prop the call in case of errors :D</p>",
        "id": 167949214,
        "sender_full_name": "oli",
        "timestamp": 1560347845
    },
    {
        "content": "<p>miri doesn't even support unwinding yet</p>",
        "id": 167949233,
        "sender_full_name": "oli",
        "timestamp": 1560347855
    },
    {
        "content": "<p>Heh, sure :)</p>",
        "id": 167949246,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347865
    },
    {
        "content": "<p>Then to actually use <code>InterpCx</code>, I guess I need to set up that frame?</p>",
        "id": 167949341,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347904
    },
    {
        "content": "<p>Or do we already have one?</p>",
        "id": 167949354,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560347912
    },
    {
        "content": "<p>we have one</p>",
        "id": 167949559,
        "sender_full_name": "oli",
        "timestamp": 1560348055
    },
    {
        "content": "<p>but we specifically don't create locals iirc</p>",
        "id": 167949600,
        "sender_full_name": "oli",
        "timestamp": 1560348074
    },
    {
        "content": "<p>Ok. I can dig into that more tonight</p>",
        "id": 167949645,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348101
    },
    {
        "content": "<p>basically we're calling <a href=\"https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/const_eval.rs#L46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/const_eval.rs#L46\">https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/const_eval.rs#L46</a> which in turn creates an empty <code>InterpCx</code>: <a href=\"https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/interpret/eval_context.rs#L213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/interpret/eval_context.rs#L213\">https://github.com/rust-lang/rust/blob/1cbd8a4d686d1411105f26cddf876c5994e69593/src/librustc_mir/interpret/eval_context.rs#L213</a></p>",
        "id": 167949803,
        "sender_full_name": "oli",
        "timestamp": 1560348209
    },
    {
        "content": "<p>That's helpful, thanks!</p>",
        "id": 167950012,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348309
    },
    {
        "content": "<p>I think you should be able to just call <a href=\"https://github.com/rust-lang/rust/blob/3d7a1c9dc81b0da3140fe008a2276d6f2c266f10/src/librustc_mir/interpret/eval_context.rs#L474\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3d7a1c9dc81b0da3140fe008a2276d6f2c266f10/src/librustc_mir/interpret/eval_context.rs#L474\"><code>push_stack_frame</code></a> after the call to <code>mk_eval_cx</code></p>",
        "id": 167950027,
        "sender_full_name": "oli",
        "timestamp": 1560348325
    },
    {
        "content": "<p>all information should be available</p>",
        "id": 167950033,
        "sender_full_name": "oli",
        "timestamp": 1560348332
    },
    {
        "content": "<p>although not so sure about the <code>mir::Body</code></p>",
        "id": 167950048,
        "sender_full_name": "oli",
        "timestamp": 1560348345
    },
    {
        "content": "<p>maybe just feed in an empty <code>mir::Body</code></p>",
        "id": 167950053,
        "sender_full_name": "oli",
        "timestamp": 1560348351
    },
    {
        "content": "<p>oh, I tried that before, hmm...</p>",
        "id": 167950140,
        "sender_full_name": "oli",
        "timestamp": 1560348394
    },
    {
        "content": "<p>Don't I need the locals though? <a href=\"https://github.com/rust-lang/rust/blob/3d7a1c9dc81b0da3140fe008a2276d6f2c266f10/src/librustc_mir/interpret/eval_context.rs#L504\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3d7a1c9dc81b0da3140fe008a2276d6f2c266f10/src/librustc_mir/interpret/eval_context.rs#L504\">https://github.com/rust-lang/rust/blob/3d7a1c9dc81b0da3140fe008a2276d6f2c266f10/src/librustc_mir/interpret/eval_context.rs#L504</a></p>",
        "id": 167950161,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348413
    },
    {
        "content": "<p>ah you are already ripping out the <code>LocalDecls</code> from the <code>mir::Body</code></p>",
        "id": 167950169,
        "sender_full_name": "oli",
        "timestamp": 1560348417
    },
    {
        "content": "<p>Oh, right</p>",
        "id": 167950187,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348430
    },
    {
        "content": "<p>yea <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> you're right, we need them, so no empty <code>mir::Body</code></p>",
        "id": 167950199,
        "sender_full_name": "oli",
        "timestamp": 1560348446
    },
    {
        "content": "<p>but maybe we can create a mostly dummy <code>mir::Body</code> with just the ripped out info</p>",
        "id": 167950224,
        "sender_full_name": "oli",
        "timestamp": 1560348464
    },
    {
        "content": "<p>instead of storing the info in the const propagator, we store it in the <code>mir::Body</code> that we give the first stack frame</p>",
        "id": 167950287,
        "sender_full_name": "oli",
        "timestamp": 1560348485
    },
    {
        "content": "<p>OK, I realize it wasn't as straight forward as I thought at the beginning</p>",
        "id": 167950306,
        "sender_full_name": "oli",
        "timestamp": 1560348499
    },
    {
        "content": "<p>once upon a time we had a dummy stack frame</p>",
        "id": 167950316,
        "sender_full_name": "oli",
        "timestamp": 1560348511
    },
    {
        "content": "<p>Still doesn't sound that bad though :)</p>",
        "id": 167950322,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348517
    },
    {
        "content": "<p>yea</p>",
        "id": 167950335,
        "sender_full_name": "oli",
        "timestamp": 1560348523
    },
    {
        "content": "<p>I'll try to work on this a bit tonight and report back if I have any questions</p>",
        "id": 167950390,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348556
    },
    {
        "content": "<p>awesome</p>",
        "id": 167950404,
        "sender_full_name": "oli",
        "timestamp": 1560348568
    },
    {
        "content": "<p>ttyl</p>",
        "id": 167950417,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560348588
    },
    {
        "content": "<p>So I've started working on this and I've got some in progress changes but I'm running into <code>InterpretCx::push_stack_frame()</code> needing a <code>&amp;'mir Body</code> while <code>ConstPropagator::visit_body()</code> also needs a <code>&amp;mir Body</code> at the same time. See <a href=\"https://github.com/wesleywiser/rust/blob/79d76d8b7d8074ce156694d93326ccf154e95d84/src/librustc_mir/transform/const_prop.rs#L79-L86\" target=\"_blank\" title=\"https://github.com/wesleywiser/rust/blob/79d76d8b7d8074ce156694d93326ccf154e95d84/src/librustc_mir/transform/const_prop.rs#L79-L86\">here</a></p>",
        "id": 168123280,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560507445
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 168123282,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560507452
    },
    {
        "content": "<p>yes, create a dummy <code>mir::Body</code> and put the things you stole from the other <code>mir::Body</code> in there</p>",
        "id": 168125194,
        "sender_full_name": "oli",
        "timestamp": 1560509547
    },
    {
        "content": "<p>not sure what creating a dummy <code>mir::Body</code> entails, but you should be able to use <code>Default::default</code> for many things</p>",
        "id": 168125202,
        "sender_full_name": "oli",
        "timestamp": 1560509582
    },
    {
        "content": "<p>So in order to <code>push_stack_frame()</code>, I need an <code>Instance</code>. As far as I can tell, there's no <code>SubstsRef</code> for the <code>Body</code> we're operating on. I tried this <a href=\"https://github.com/rust-lang/rust/commit/faf730b0c9725b44cd54292e5be1b8c5e056bff0#diff-9e103702275cbef342c2decd3395bf3bR176\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/faf730b0c9725b44cd54292e5be1b8c5e056bff0#diff-9e103702275cbef342c2decd3395bf3bR176\">https://github.com/rust-lang/rust/commit/faf730b0c9725b44cd54292e5be1b8c5e056bff0#diff-9e103702275cbef342c2decd3395bf3bR176</a> but that causes normalization errors because there are unresolved generics. Is <code>identity_for_item()</code> the right thing to use here or is there something else I should be using to get a <code>SubstsRef</code>?</p>",
        "id": 168388677,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560854856
    },
    {
        "content": "<p>hmm... I wonder how much we really need the <code>Instance</code> in each stack frame</p>",
        "id": 168389048,
        "sender_full_name": "oli",
        "timestamp": 1560855247
    },
    {
        "content": "<p>mostly for substs I presume, but maybe we sometimes need the <code>DefId</code>, too?</p>",
        "id": 168389064,
        "sender_full_name": "oli",
        "timestamp": 1560855262
    },
    {
        "content": "<p>I think for now you can add a <code>//HACK</code> comment and just create the instance manually instead of via <code>new</code></p>",
        "id": 168389076,
        "sender_full_name": "oli",
        "timestamp": 1560855290
    },
    {
        "content": "<p>Should I just pass in an empty <code>SubstsRef</code>?</p>",
        "id": 168389318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560855564
    },
    {
        "content": "<p>Oh, fyi the assert is not coming from <code>Instance::new()</code>, it's later when we try to get the layout of a local that isn't fully normalized.</p>",
        "id": 168390021,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560856294
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc_traits/normalize_erasing_regions.rs:43: could not fully normalize `&lt;T as iter::traits::collect::IntoIterator&gt;::IntoIter`\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, src/librustc_errors/lib.rs:643:9\nstack backtrace:\n   0: std::sys_common::backtrace::print\n   1: std::panicking::default_hook::{{closure}}\n   2: std::panicking::default_hook\n   3: rustc::util::common::panic_hook\n   4: std::panicking::rust_panic_with_hook\n   5: std::panicking::begin_panic\n   6: rustc_errors::Handler::bug\n   7: rustc::util::bug::opt_span_bug_fmt::{{closure}}\n   8: rustc::ty::context::tls::with_opt::{{closure}}\n   9: rustc::ty::context::tls::with_context_opt\n  10: rustc::ty::context::tls::with_opt\n  11: rustc::util::bug::opt_span_bug_fmt\n  12: rustc::util::bug::bug_fmt\n  13: rustc::ty::context::GlobalCtxt::enter_local\n  14: rustc_traits::normalize_erasing_regions::normalize_ty_after_erasing_regions\n  15: rustc::ty::query::__query_compute::normalize_ty_after_erasing_regions\n  16: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::normalize_ty_after_erasing_regions&gt;::compute\n  17: rustc::dep_graph::graph::DepGraph::with_task_impl\n  18: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  19: &lt;rustc::traits::query::normalize_erasing_regions::NormalizeAfterErasingRegionsFolder as rustc::ty::fold::TypeFolder&gt;::fold_ty\n  20: rustc::traits::query::normalize_erasing_regions::&lt;impl rustc::ty::context::TyCtxt&gt;::normalize_erasing_regions\n  21: rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;::layout_of_local\n  22: rustc_mir::interpret::operand::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::access_local\n  23: rustc_mir::transform::const_prop::ConstPropagator::get_const\n  24: rustc_mir::transform::const_prop::ConstPropagator::eval_place::{{closure}}\n  25: rustc::mir::Place::iterate2\n  26: &lt;rustc_mir::transform::const_prop::ConstPropagator as rustc::mir::visit::MutVisitor&gt;::visit_statement\n  27: rustc::mir::visit::MutVisitor::visit_body\n  28: &lt;rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass&gt;::run_pass\n</pre></div>",
        "id": 168390084,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560856326
    },
    {
        "content": "<p>oh</p>",
        "id": 168390839,
        "sender_full_name": "oli",
        "timestamp": 1560857128
    },
    {
        "content": "<p>I thought it was during creation</p>",
        "id": 168390845,
        "sender_full_name": "oli",
        "timestamp": 1560857141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  maybe we should bail out during <code>layout_of_local</code> if the type passed to it <code>needs_substs()</code> (bail out with <code>err!(TooGeneric)</code></p>",
        "id": 168390940,
        "sender_full_name": "oli",
        "timestamp": 1560857204
    },
    {
        "content": "<p>oh, no it's not quite that easy</p>",
        "id": 168391166,
        "sender_full_name": "oli",
        "timestamp": 1560857419
    },
    {
        "content": "<p>it should be in <code>monomorphize_with_substs</code></p>",
        "id": 168391172,
        "sender_full_name": "oli",
        "timestamp": 1560857425
    },
    {
        "content": "<p>basically if <code>substituted.needs_subst()</code></p>",
        "id": 168391203,
        "sender_full_name": "oli",
        "timestamp": 1560857471
    },
    {
        "content": "<p>before doing the normalization run</p>",
        "id": 168391206,
        "sender_full_name": "oli",
        "timestamp": 1560857481
    },
    {
        "content": "<p>if substitution didn't make it monomorphic, bail out</p>",
        "id": 168391228,
        "sender_full_name": "oli",
        "timestamp": 1560857506
    },
    {
        "content": "<p>Ok, that seems to work although most of the <code>const-prop</code> tests are broken now <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> </p>\n<p>I'll investigate more tonight.</p>",
        "id": 168399203,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560863696
    },
    {
        "content": "<p>you only moved the storage from the custom <code>OpTy</code> storage to the first frame's storage, right?</p>",
        "id": 168399550,
        "sender_full_name": "oli",
        "timestamp": 1560863942
    },
    {
        "content": "<p>no const prop logic has been changed to make (more) use of the <code>InterpCx</code> methods</p>",
        "id": 168399580,
        "sender_full_name": "oli",
        "timestamp": 1560863972
    },
    {
        "content": "<p>Sort of. I'm not 100% sure of my changes</p>",
        "id": 168399831,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864166
    },
    {
        "content": "<p>This assert was failing <a href=\"https://github.com/rust-lang/rust/blob/faf730b0c9725b44cd54292e5be1b8c5e056bff0/src/librustc_mir/transform/const_prop.rs#L773\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/faf730b0c9725b44cd54292e5be1b8c5e056bff0/src/librustc_mir/transform/const_prop.rs#L773\">https://github.com/rust-lang/rust/blob/faf730b0c9725b44cd54292e5be1b8c5e056bff0/src/librustc_mir/transform/const_prop.rs#L773</a></p>",
        "id": 168399859,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864204
    },
    {
        "content": "<p>Because <code>self.get_const()</code> was already returning the right const value before we'd even set it.</p>",
        "id": 168399891,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864235
    },
    {
        "content": "<p>Which is not what I'd expected at all.</p>",
        "id": 168399977,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864270
    },
    {
        "content": "<p>hmm... that may be due to <code>push_stack_frame</code> initializing all locals that have neither <code>StorageLive</code> nor <code>StorageDead</code> calls</p>",
        "id": 168400335,
        "sender_full_name": "oli",
        "timestamp": 1560864496
    },
    {
        "content": "<p>Interesting...</p>",
        "id": 168400402,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864542
    },
    {
        "content": "<p>That's helpful</p>",
        "id": 168400406,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864545
    },
    {
        "content": "<p>There's a number of places that use <code>self.ecx</code> to perform a more complex operation. Perhaps some of those are also mutating locals in the frame?</p>",
        "id": 168400432,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864564
    },
    {
        "content": "<p>they shouldn't, I mean they would have failed before, too</p>",
        "id": 168400604,
        "sender_full_name": "oli",
        "timestamp": 1560864675
    },
    {
        "content": "<p>maybe just start by checking that after the <code>push_stack_frame</code> all locals are <code>Uninitialized</code>. If they aren't then we know the culprit</p>",
        "id": 168400664,
        "sender_full_name": "oli",
        "timestamp": 1560864717
    },
    {
        "content": "<p>if they are, maybe some of the trace logs shed some light</p>",
        "id": 168400715,
        "sender_full_name": "oli",
        "timestamp": 1560864731
    },
    {
        "content": "<p>That's a good idea</p>",
        "id": 168400914,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864873
    },
    {
        "content": "<p>I'll do that tonight</p>",
        "id": 168400925,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560864876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ok, so I'm trying to use <code>InterpretCx</code> more and I have a pretty simple change:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/librustc_mir/transform/const_prop.rs b/src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gh\">index b5dbaaa2327..a71989f70f1 100644</span>\n<span class=\"gd\">--- a/src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gu\">@@ -452,8 +452,10 @@ impl&lt;&#39;mir, &#39;tcx&gt; ConstPropagator&lt;&#39;mir, &#39;tcx&gt; {</span>\n                 self.eval_operand(op, source_info)\n             },\n             Rvalue::Ref(_, _, ref place) =&gt; {\n<span class=\"gd\">-                let src = self.eval_place(place, source_info)?;</span>\n<span class=\"gd\">-                let mplace = src.try_as_mplace().ok()?;</span>\n<span class=\"gi\">+                let mplace = self.use_ecx(source_info, |this| {</span>\n<span class=\"gi\">+                    let place = this.ecx.eval_place(place)?;</span>\n<span class=\"gi\">+                    this.ecx.force_allocation(place)</span>\n<span class=\"gi\">+                })?;</span>\n                 Some(ImmTy::from_scalar(mplace.ptr.into(), place_layout).into())\n             },\n             Rvalue::Repeat(..) |\n</pre></div>\n\n\n<p>However, I'm getting an error when bootstrapping:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when processing `f32::&lt;impl at src/libcore/num/f32.rs:149:1: 464:2&gt;::is_normal`\n   --&gt; src/libcore/num/f32.rs:246:28\n    |\n246 |         self.classify() == FpCategory::Normal\n    |                            ^^^^^^^^^^^^^^^^^^\n    |\nnote: ...which requires const-evaluating `f32::&lt;impl at src/libcore/num/f32.rs:149:1: 464:2&gt;::is_normal`...\n   --&gt; src/libcore/num/f32.rs:245:5\n    |\n245 |     pub fn is_normal(self) -&gt; bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `f32::&lt;impl at src/libcore/num/f32.rs:149:1: 464:2&gt;::is_normal`, completing the cycle\n\nerror: aborting due to previous error\n</pre></div>\n\n\n<p>which I think is happening because <code>InterpretCx::eval_place</code> calls <code>eval_static_to_mplace</code> which calls <code>const_eval_raw</code> which tries to load the MIR for the function that's already being processed which causes the cycle. Does that sound correct to you?</p>",
        "id": 168924288,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561456822
    },
    {
        "content": "<p>Oh, because it's a promoted of the current function</p>",
        "id": 168927970,
        "sender_full_name": "oli",
        "timestamp": 1561461027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  you could modify <code>load_mir</code> to not hit <code>tcx.optimized_mir</code>if it's a promoted and the <code>DefId</code> of is the same as any frame's <code>Instance</code>'s <code>DefId</code> and just fetch the <code>mir::Body</code> of the promoted from there</p>",
        "id": 168928090,
        "sender_full_name": "oli",
        "timestamp": 1561461159
    },
    {
        "content": "<p>that means you'll also have to steal the <code>promoted</code>field</p>",
        "id": 168928112,
        "sender_full_name": "oli",
        "timestamp": 1561461184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Hmm... that doesn't seem to work because in <code>InterpretCx::load_mir()</code>, our <code>self</code> is not the same <code>InterpretCx</code> that we are using for const prop. There's a new one created here <a href=\"https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src/librustc_mir/const_eval.rs#L636\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src/librustc_mir/const_eval.rs#L636\">https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src/librustc_mir/const_eval.rs#L636</a></p>",
        "id": 168932418,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561465029
    },
    {
        "content": "<p>oh no XD</p>",
        "id": 168936379,
        "sender_full_name": "oli",
        "timestamp": 1561468104
    },
    {
        "content": "<p>hmm... how did this work before?</p>",
        "id": 168936388,
        "sender_full_name": "oli",
        "timestamp": 1561468114
    },
    {
        "content": "<p>oh we had a special <code>eval_place</code> in the const propagator</p>",
        "id": 168936393,
        "sender_full_name": "oli",
        "timestamp": 1561468128
    },
    {
        "content": "<p>hmm... sorry I gotta run, not sure what to do there for promoteds</p>",
        "id": 168936435,
        "sender_full_name": "oli",
        "timestamp": 1561468176
    },
    {
        "content": "<p>Ok, see ya <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 168936585,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561468284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  I have some changes I'm playing around with that I think will make this work but I'm not sure if this is the right direction</p>",
        "id": 169022515,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561550866
    },
    {
        "content": "<p>Or if you'll like them <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 169022518,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561550874
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:ecx_refactoring?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:ecx_refactoring?expand=1\">https://github.com/rust-lang/rust/compare/master...wesleywiser:ecx_refactoring?expand=1</a></p>",
        "id": 169022574,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561550888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> heh, right direction, but removing the <code>const_eval_raw</code> unconditionally is not an option</p>",
        "id": 169027613,
        "sender_full_name": "oli",
        "timestamp": 1561554740
    },
    {
        "content": "<p>are you planning on creating a <code>ConstProp</code> machine?</p>",
        "id": 169027714,
        "sender_full_name": "oli",
        "timestamp": 1561554820
    },
    {
        "content": "<p>or what's the <code>intern_alloc</code> change for?</p>",
        "id": 169027723,
        "sender_full_name": "oli",
        "timestamp": 1561554830
    },
    {
        "content": "<p>if so, you could create an <code>eval_promoted</code> machine hook</p>",
        "id": 169027780,
        "sender_full_name": "oli",
        "timestamp": 1561554847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> the <code>intern_alloc</code> change is because <code>InterpretCx::eval_static_to_mplace()</code> is generic over the <code>Machine</code> but <code>eval_body_using_ecx()</code> was hardcoded to <code>CompileTimeEvalContext</code>. So in order to call it from <code>eval_static_to_mplace()</code>, I had to make it generic as well.</p>",
        "id": 169029210,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555802
    },
    {
        "content": "<p>ah XD</p>",
        "id": 169029298,
        "sender_full_name": "oli",
        "timestamp": 1561555836
    },
    {
        "content": "<p><code>eval_promoted</code> sounds like a better name for the trait method to me</p>",
        "id": 169029300,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555838
    },
    {
        "content": "<p>and there I was hoping for a const prop machine :P</p>",
        "id": 169029344,
        "sender_full_name": "oli",
        "timestamp": 1561555856
    },
    {
        "content": "<p>so anyway, I'm not quite sure how to do this best</p>",
        "id": 169029412,
        "sender_full_name": "oli",
        "timestamp": 1561555890
    },
    {
        "content": "<p>heh maybe that's the right answer but I don't think I have a good enough grasp of the miri architecture to do that correctly</p>",
        "id": 169029450,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555917
    },
    {
        "content": "<p>We don't want to duplicate computing promoteds</p>",
        "id": 169029452,
        "sender_full_name": "oli",
        "timestamp": 1561555919
    },
    {
        "content": "<p>Duplicate between what?</p>",
        "id": 169029513,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555934
    },
    {
        "content": "<p>Oh, the other code in <code>ConstProp</code>?</p>",
        "id": 169029537,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555944
    },
    {
        "content": "<p>well, const prop computes the promoted, and then later const eval or codegen compute it again</p>",
        "id": 169029566,
        "sender_full_name": "oli",
        "timestamp": 1561555963
    },
    {
        "content": "<p>because it wasn't cached this time around</p>",
        "id": 169029574,
        "sender_full_name": "oli",
        "timestamp": 1561555969
    },
    {
        "content": "<p>oh</p>",
        "id": 169029576,
        "sender_full_name": "oli",
        "timestamp": 1561555970
    },
    {
        "content": "<p>we are <em>already</em> doing that</p>",
        "id": 169029590,
        "sender_full_name": "oli",
        "timestamp": 1561555976
    },
    {
        "content": "<p>The code in <code>ConstProp</code> will go away once this works</p>",
        "id": 169029598,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555981
    },
    {
        "content": "<p>(I think)</p>",
        "id": 169029630,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561555995
    },
    {
        "content": "<p>no I mean, the <code>ConstProp</code> code is ungreat right now</p>",
        "id": 169029656,
        "sender_full_name": "oli",
        "timestamp": 1561556008
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> very true</p>",
        "id": 169029681,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556021
    },
    {
        "content": "<p>you didn't make it worse by moving to using <code>InterpCx</code></p>",
        "id": 169029688,
        "sender_full_name": "oli",
        "timestamp": 1561556032
    },
    {
        "content": "<p>either implementation computed (or tried to compute) the promoted</p>",
        "id": 169029754,
        "sender_full_name": "oli",
        "timestamp": 1561556052
    },
    {
        "content": "<p>and then later we compute it again in <code>monomorphize::collect</code></p>",
        "id": 169029768,
        "sender_full_name": "oli",
        "timestamp": 1561556064
    },
    {
        "content": "<p>so if we have a complex generic promoted, that can be a lot of computation time wasted</p>",
        "id": 169029800,
        "sender_full_name": "oli",
        "timestamp": 1561556084
    },
    {
        "content": "<p>Should we make a query for computing promoted values so they get cached?</p>",
        "id": 169029913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556159
    },
    {
        "content": "<p>lol, like use the <code>mir::Body</code> of the promoted as the query key?</p>",
        "id": 169029999,
        "sender_full_name": "oli",
        "timestamp": 1561556203
    },
    {
        "content": "<p>While that would cache it, the hashing may be very expensive</p>",
        "id": 169030064,
        "sender_full_name": "oli",
        "timestamp": 1561556252
    },
    {
        "content": "<p>Couldn't we use the index of the promoted in it's parent's <code>Body.promoted</code>?</p>",
        "id": 169030089,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556268
    },
    {
        "content": "<p>but that would then cause the cycle again</p>",
        "id": 169030148,
        "sender_full_name": "oli",
        "timestamp": 1561556285
    },
    {
        "content": "<p>Ah right</p>",
        "id": 169030156,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556290
    },
    {
        "content": "<p>Why are promoted stored this way?</p>",
        "id": 169030178,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556309
    },
    {
        "content": "<p>because it seemed easy</p>",
        "id": 169030196,
        "sender_full_name": "oli",
        "timestamp": 1561556322
    },
    {
        "content": "<p>Ah</p>",
        "id": 169030200,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556328
    },
    {
        "content": "<p>like the alternative is to introduce generic <code>static</code> items in the query system</p>",
        "id": 169030213,
        "sender_full_name": "oli",
        "timestamp": 1561556341
    },
    {
        "content": "<p>and generate <code>DefId</code>s for them, which... seems dangerous</p>",
        "id": 169030236,
        "sender_full_name": "oli",
        "timestamp": 1561556361
    },
    {
        "content": "<p>Ok</p>",
        "id": 169030272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556382
    },
    {
        "content": "<p>Well it sounds like this isn't making anything <em>worse</em></p>",
        "id": 169030361,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556405
    },
    {
        "content": "<p>I have a moderately stupid idea</p>",
        "id": 169030374,
        "sender_full_name": "oli",
        "timestamp": 1561556408
    },
    {
        "content": "<p>It's just not necessarily better</p>",
        "id": 169030381,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556415
    },
    {
        "content": "<p>It's probably not that stupid <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 169030402,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556434
    },
    {
        "content": "<p>we create a <code>const_qualif</code> query whose return type is <code>(Steal&lt;mir::Body&gt;, &amp;'tcx [mir::Body])</code> and that query first runs all the pre-const-qualif <code>MirPass</code>es, then does <code>const_qualif</code> and returns the <code>mir::Body</code> in a stealable way and the promoteds just plain</p>",
        "id": 169030661,
        "sender_full_name": "oli",
        "timestamp": 1561556594
    },
    {
        "content": "<p>then the <code>optimized_mir</code> query first runs <code>const_qualif</code>, steals the <code>MIR</code> and runs the rest of the <code>MirPass</code>es</p>",
        "id": 169030727,
        "sender_full_name": "oli",
        "timestamp": 1561556642
    },
    {
        "content": "<p><code>CopyProp</code> then doesn't need to change <code>InterpCx</code> like you did, but can just invoke the existing code. <code>const_eval</code> will use the <code>const_qualif</code> query when it needs <code>promoted</code> <code>mir::Body</code>s</p>",
        "id": 169030880,
        "sender_full_name": "oli",
        "timestamp": 1561556716
    },
    {
        "content": "<p>so instead of having a <code>promoted</code> field, one obtains the <code>promoted</code> <code>mir::Body</code> by using the <code>const_qualif</code> query</p>",
        "id": 169030912,
        "sender_full_name": "oli",
        "timestamp": 1561556739
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm planning weird things with promoteds again, sanity check please</p>",
        "id": 169031006,
        "sender_full_name": "oli",
        "timestamp": 1561556770
    },
    {
        "content": "<p>And that will let us remove the duplication?</p>",
        "id": 169031152,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556870
    },
    {
        "content": "<p>Not sure I'm totally following tbh</p>",
        "id": 169031161,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556877
    },
    {
        "content": "<p>(Still drinking my morning coffee)</p>",
        "id": 169031231,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556895
    },
    {
        "content": "<p>yes, because calling <code>const_eval_raw</code> is a cached query and thus deduplicates</p>",
        "id": 169031317,
        "sender_full_name": "oli",
        "timestamp": 1561556940
    },
    {
        "content": "<p>Oh oh ok</p>",
        "id": 169031373,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556961
    },
    {
        "content": "<p>Sorry, I thought you mean duplicated code</p>",
        "id": 169031402,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556970
    },
    {
        "content": "<p>Not, re evaluating the same promoteds</p>",
        "id": 169031417,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556986
    },
    {
        "content": "<p>nah, that would have been gone via your PRs scheme, too</p>",
        "id": 169031419,
        "sender_full_name": "oli",
        "timestamp": 1561556988
    },
    {
        "content": "<p>Got it</p>",
        "id": 169031420,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561556989
    },
    {
        "content": "<p>but let's wait for eddyb's insights</p>",
        "id": 169031539,
        "sender_full_name": "oli",
        "timestamp": 1561557033
    },
    {
        "content": "<p>So the other wrinkle I've found (besides some ICEs I'm still trying to fix) is that <code>eval_static_to_mplace()</code> will also eval statics</p>",
        "id": 169031553,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557040
    },
    {
        "content": "<p>hmm...</p>",
        "id": 169031571,
        "sender_full_name": "oli",
        "timestamp": 1561557055
    },
    {
        "content": "<p>Which we decided the other week we definitely don't want to do in const prop</p>",
        "id": 169031573,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557055
    },
    {
        "content": "<p>we also don't want this to happen inside constants</p>",
        "id": 169031592,
        "sender_full_name": "oli",
        "timestamp": 1561557068
    },
    {
        "content": "<p>Do you have a prefered way to handle that?</p>",
        "id": 169031601,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557075
    },
    {
        "content": "<p>currently that is prevented via <code>const_qualif</code></p>",
        "id": 169031612,
        "sender_full_name": "oli",
        "timestamp": 1561557082
    },
    {
        "content": "<p>but I'd like <code>InterpCx</code> to prevent that by itself</p>",
        "id": 169031629,
        "sender_full_name": "oli",
        "timestamp": 1561557093
    },
    {
        "content": "<p>I was just going to add a flag or function to the <code>Machine</code> to see if we should do that. But I haven't thought about it very much.</p>",
        "id": 169031659,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557109
    },
    {
        "content": "<p>I think you don't need to do anything fancy, basically the only way you could ever want to eval a static is if there is only one stack frame and that stack frame's <code>instance</code> is also a <code>static</code> item</p>",
        "id": 169031809,
        "sender_full_name": "oli",
        "timestamp": 1561557167
    },
    {
        "content": "<p>my reasoning is as follows:</p>",
        "id": 169031823,
        "sender_full_name": "oli",
        "timestamp": 1561557179
    },
    {
        "content": "<p>if you have a single stack frame and it's not a static, it must be a constant or promoted, and those should not refer to a <code>static</code></p>",
        "id": 169031864,
        "sender_full_name": "oli",
        "timestamp": 1561557212
    },
    {
        "content": "<p>if you have more stack frames, you are evaluating <code>const fn</code>s, and those should also not be evaluating any <code>static</code>s</p>",
        "id": 169031899,
        "sender_full_name": "oli",
        "timestamp": 1561557234
    },
    {
        "content": "<p>Put another way, if the single stack frame is <code>static</code> then whatever requested const evaluation is obviously fine with eval-ing statics?</p>",
        "id": 169031976,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557267
    },
    {
        "content": "<p>yes</p>",
        "id": 169031983,
        "sender_full_name": "oli",
        "timestamp": 1561557274
    },
    {
        "content": "<p>Yeah</p>",
        "id": 169031987,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557277
    },
    {
        "content": "<p>and you can even ICE for non-promoteds</p>",
        "id": 169031990,
        "sender_full_name": "oli",
        "timestamp": 1561557280
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 169031991,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557280
    },
    {
        "content": "<p>Ok, that's really helpful</p>",
        "id": 169032016,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557294
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 169032025,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557299
    },
    {
        "content": "<p>promoteds need to error out some way so that <code>ConstProp</code> can handle it</p>",
        "id": 169032026,
        "sender_full_name": "oli",
        "timestamp": 1561557300
    },
    {
        "content": "<p>Probably just adding a new error variant to the InterpretError enum</p>",
        "id": 169032082,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557334
    },
    {
        "content": "<p>oh actually.... all of these can ICE</p>",
        "id": 169032107,
        "sender_full_name": "oli",
        "timestamp": 1561557346
    },
    {
        "content": "<p>yea just <code>assert!(self.frames.len() == 1 &amp;&amp; self.tcx.is_static(self.frame().instance.def_id()));</code> :D</p>",
        "id": 169032214,
        "sender_full_name": "oli",
        "timestamp": 1561557390
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 169032231,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557400
    },
    {
        "content": "<p>or maybe <code>delay_span_bug</code> if that makes anything unhappy</p>",
        "id": 169032248,
        "sender_full_name": "oli",
        "timestamp": 1561557411
    },
    {
        "content": "<p>Ok</p>",
        "id": 169032267,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561557423
    },
    {
        "content": "<p>you want to do what?!</p>",
        "id": 169032327,
        "sender_full_name": "eddyb",
        "timestamp": 1561557459
    },
    {
        "content": "<p>sorry, just saw the ping :P</p>",
        "id": 169032348,
        "sender_full_name": "eddyb",
        "timestamp": 1561557474
    },
    {
        "content": "<p>heheh</p>",
        "id": 169032353,
        "sender_full_name": "oli",
        "timestamp": 1561557477
    },
    {
        "content": "<p>there's text above the ping, or do you want another summary?</p>",
        "id": 169032405,
        "sender_full_name": "oli",
        "timestamp": 1561557491
    },
    {
        "content": "<p>ah, above, not below?</p>",
        "id": 169032421,
        "sender_full_name": "eddyb",
        "timestamp": 1561557499
    },
    {
        "content": "<p>yes</p>",
        "id": 169032457,
        "sender_full_name": "oli",
        "timestamp": 1561557521
    },
    {
        "content": "<p>ah wait I did read above</p>",
        "id": 169032474,
        "sender_full_name": "eddyb",
        "timestamp": 1561557532
    },
    {
        "content": "<blockquote>\n<p>so instead of having a <code>promoted</code> field, one obtains the <code>promoted</code> <code>mir::Body</code> by using the <code>const_qualif</code> query</p>\n</blockquote>",
        "id": 169032493,
        "sender_full_name": "eddyb",
        "timestamp": 1561557543
    },
    {
        "content": "<p>this is very scary?</p>",
        "id": 169032501,
        "sender_full_name": "eddyb",
        "timestamp": 1561557547
    },
    {
        "content": "<p>yes</p>",
        "id": 169032507,
        "sender_full_name": "oli",
        "timestamp": 1561557550
    },
    {
        "content": "<p>but less annoying than having <code>MirPass</code>es try to const eval promoteds</p>",
        "id": 169032548,
        "sender_full_name": "oli",
        "timestamp": 1561557577
    },
    {
        "content": "<p>(it's not a question, idk why I put a \"?\" at the end)</p>",
        "id": 169032556,
        "sender_full_name": "eddyb",
        "timestamp": 1561557580
    },
    {
        "content": "<p>I see no way to cache promoted const evals during <code>MirPass</code>es</p>",
        "id": 169032637,
        "sender_full_name": "oli",
        "timestamp": 1561557613
    },
    {
        "content": "<p>other than the proposed way</p>",
        "id": 169032649,
        "sender_full_name": "oli",
        "timestamp": 1561557618
    },
    {
        "content": "<p>you could have a <code>promoted_mir</code> query that uses <code>const_qualif</code> and then does what you said</p>",
        "id": 169032663,
        "sender_full_name": "eddyb",
        "timestamp": 1561557627
    },
    {
        "content": "<p>but that would need to modify the main <code>mir::Body</code>, too</p>",
        "id": 169032704,
        "sender_full_name": "oli",
        "timestamp": 1561557647
    },
    {
        "content": "<p>so we need a query that returns both, I think?</p>",
        "id": 169032716,
        "sender_full_name": "oli",
        "timestamp": 1561557655
    },
    {
        "content": "<p>yeah, sure, just, don't stick it in <code>const_qualif</code> literally</p>",
        "id": 169032753,
        "sender_full_name": "eddyb",
        "timestamp": 1561557677
    },
    {
        "content": "<p>oh right</p>",
        "id": 169032761,
        "sender_full_name": "oli",
        "timestamp": 1561557683
    },
    {
        "content": "<p>yea that was a strawman name</p>",
        "id": 169032777,
        "sender_full_name": "oli",
        "timestamp": 1561557694
    },
    {
        "content": "<p>okay so the problem is that <code>promoted</code>s being inside the parent <code>Mir</code> is a  hack and you want to keep them separate so you can query the promoteds at any time?</p>",
        "id": 169032944,
        "sender_full_name": "eddyb",
        "timestamp": 1561557774
    },
    {
        "content": "<p>yes</p>",
        "id": 169032957,
        "sender_full_name": "oli",
        "timestamp": 1561557780
    },
    {
        "content": "<p>how do you plan to handle this cross-crate?</p>",
        "id": 169032984,
        "sender_full_name": "eddyb",
        "timestamp": 1561557799
    },
    {
        "content": "<p>place the <code>promoted_mir</code> query in metadata I guess?</p>",
        "id": 169033131,
        "sender_full_name": "oli",
        "timestamp": 1561557854
    },
    {
        "content": "<p>at least the ones that are still reachable</p>",
        "id": 169033193,
        "sender_full_name": "oli",
        "timestamp": 1561557893
    },
    {
        "content": "<p>yeah but... the local-crate version needs to return more things :P</p>",
        "id": 169033220,
        "sender_full_name": "eddyb",
        "timestamp": 1561557908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> might care about this discussion, although he's busy</p>",
        "id": 169033238,
        "sender_full_name": "eddyb",
        "timestamp": 1561557922
    },
    {
        "content": "<p>how is that different from the <code>optimized_mir</code> query?</p>",
        "id": 169033362,
        "sender_full_name": "oli",
        "timestamp": 1561557976
    },
    {
        "content": "<p>hmm?</p>",
        "id": 169033401,
        "sender_full_name": "eddyb",
        "timestamp": 1561558008
    },
    {
        "content": "<p>oh, wait, all you need is a query that takes the <code>GlobalId</code> or w/e from miri</p>",
        "id": 169033454,
        "sender_full_name": "eddyb",
        "timestamp": 1561558031
    },
    {
        "content": "<p>getting a <code>&amp;'tcx [mir::Body]</code> for the promoteds will be no different from the <code>promoted</code> field we have in <code>mir::Body</code> right now</p>",
        "id": 169033481,
        "sender_full_name": "oli",
        "timestamp": 1561558049
    },
    {
        "content": "<p>and dispatches either to <code>optimized_mir</code> or to <code>promoted_mir</code>, in the local crate</p>",
        "id": 169033514,
        "sender_full_name": "eddyb",
        "timestamp": 1561558077
    },
    {
        "content": "<p>that's what <code>const_eval</code> does right now ;)</p>",
        "id": 169033565,
        "sender_full_name": "oli",
        "timestamp": 1561558096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you said you need to return two things</p>",
        "id": 169033573,
        "sender_full_name": "eddyb",
        "timestamp": 1561558101
    },
    {
        "content": "<p>well, <code>promoted_mir</code> needs to emit the <code>mir::Body</code> of the main MIR, too</p>",
        "id": 169033620,
        "sender_full_name": "oli",
        "timestamp": 1561558135
    },
    {
        "content": "<p>because that is modified by <code>promoted_consts</code></p>",
        "id": 169033628,
        "sender_full_name": "oli",
        "timestamp": 1561558144
    },
    {
        "content": "<p>yes, that wouldn't work cross-crate, would it?</p>",
        "id": 169033643,
        "sender_full_name": "eddyb",
        "timestamp": 1561558154
    },
    {
        "content": "<p>and then that will get stolen by <code>optimized_mir</code></p>",
        "id": 169033648,
        "sender_full_name": "oli",
        "timestamp": 1561558157
    },
    {
        "content": "<p>not sure how stealing works cross crate</p>",
        "id": 169033669,
        "sender_full_name": "oli",
        "timestamp": 1561558175
    },
    {
        "content": "<p>my point is that you wouldn't have anything to put there</p>",
        "id": 169033684,
        "sender_full_name": "eddyb",
        "timestamp": 1561558191
    },
    {
        "content": "<p>since the cross-crate MIR is obtained from <code>optimized_mir</code></p>",
        "id": 169033700,
        "sender_full_name": "eddyb",
        "timestamp": 1561558200
    },
    {
        "content": "<p>\"put\" where?</p>",
        "id": 169033811,
        "sender_full_name": "oli",
        "timestamp": 1561558244
    },
    {
        "content": "<p>I would have assumed <code>promoted_mir</code> to return a <code>Steal</code> that when accessed will panic</p>",
        "id": 169033850,
        "sender_full_name": "oli",
        "timestamp": 1561558261
    },
    {
        "content": "<p>in that return value of <code>promoted_mir(non_local_def_id)</code></p>",
        "id": 169033859,
        "sender_full_name": "eddyb",
        "timestamp": 1561558266
    },
    {
        "content": "<p>but the <code>&amp;'tcx [mir::Body]</code> of the promoteds would still be there</p>",
        "id": 169033876,
        "sender_full_name": "oli",
        "timestamp": 1561558277
    },
    {
        "content": "<p>I would've assumed that would be impossible by design :P</p>",
        "id": 169033888,
        "sender_full_name": "eddyb",
        "timestamp": 1561558283
    },
    {
        "content": "<p>anyway, we can create another wrapper query</p>",
        "id": 169033901,
        "sender_full_name": "oli",
        "timestamp": 1561558297
    },
    {
        "content": "<p>so it might be better if there was a third query, that gives you access to only <em>one</em> body at a time, given a <code>GlobalId</code>, and is implemented differently for local and cross-crate</p>",
        "id": 169033913,
        "sender_full_name": "eddyb",
        "timestamp": 1561558304
    },
    {
        "content": "<p>so <code>optimized_mir</code> steals the main <code>mir::Body</code> and <code>promoted_mir</code> steals the <code>&amp;'tcx [mir::Body]</code> and just returns it</p>",
        "id": 169033980,
        "sender_full_name": "oli",
        "timestamp": 1561558332
    },
    {
        "content": "<p>and we have a <code>hack_promoted_mir</code> query that returns the tuple</p>",
        "id": 169034000,
        "sender_full_name": "oli",
        "timestamp": 1561558343
    },
    {
        "content": "<p>not sure I like that. I'd rather have the <code>GlobalId</code> thing. hmm</p>",
        "id": 169034050,
        "sender_full_name": "eddyb",
        "timestamp": 1561558382
    },
    {
        "content": "<p>what about optimization passes and promoted MIR?</p>",
        "id": 169034067,
        "sender_full_name": "eddyb",
        "timestamp": 1561558395
    },
    {
        "content": "<p>that doesn't work, as promoteds can be generic</p>",
        "id": 169034069,
        "sender_full_name": "oli",
        "timestamp": 1561558397
    },
    {
        "content": "<p>what would happen there</p>",
        "id": 169034072,
        "sender_full_name": "eddyb",
        "timestamp": 1561558398
    },
    {
        "content": "<p>is promoted MIR optimized?</p>",
        "id": 169034085,
        "sender_full_name": "oli",
        "timestamp": 1561558410
    },
    {
        "content": "<p>I thought it wasn't</p>",
        "id": 169034105,
        "sender_full_name": "oli",
        "timestamp": 1561558425
    },
    {
        "content": "<p>today, yeah, all the passes that run on the parent body run on promoteds</p>",
        "id": 169034110,
        "sender_full_name": "eddyb",
        "timestamp": 1561558429
    },
    {
        "content": "<p>ah</p>",
        "id": 169034120,
        "sender_full_name": "oli",
        "timestamp": 1561558437
    },
    {
        "content": "<p>we should bench that</p>",
        "id": 169034171,
        "sender_full_name": "oli",
        "timestamp": 1561558446
    },
    {
        "content": "<p>the pass might choose not to</p>",
        "id": 169034177,
        "sender_full_name": "eddyb",
        "timestamp": 1561558450
    },
    {
        "content": "<p>but the pass runner throws both at every pass</p>",
        "id": 169034198,
        "sender_full_name": "eddyb",
        "timestamp": 1561558466
    },
    {
        "content": "<p>considering the minimalism of promoteds, we should probably just not do that</p>",
        "id": 169034255,
        "sender_full_name": "oli",
        "timestamp": 1561558507
    },
    {
        "content": "<p>What's the next step I should work on?</p>",
        "id": 169035775,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559451
    },
    {
        "content": "<p>uuuh <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> do you want to touch the query changes discussed here?</p>",
        "id": 169036022,
        "sender_full_name": "oli",
        "timestamp": 1561559599
    },
    {
        "content": "<p>Heh I can try</p>",
        "id": 169036195,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559715
    },
    {
        "content": "<p>So we're adding a <code>promoted_mir</code> query that returns a <code>&amp;'tcx [mir::Body]</code>?</p>",
        "id": 169036395,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559819
    },
    {
        "content": "<p>as a first step, you can create a <code>promoted_mir</code> query that takes a <code>DefId</code> and returns a <code>&amp;'tcx [mir::Body]</code> by calling <code>optimized_mir</code> and returning that field</p>",
        "id": 169036419,
        "sender_full_name": "oli",
        "timestamp": 1561559830
    },
    {
        "content": "<p>What's going to happen with <code>Body</code>? Is it still going to have a <code>promoted</code> field?</p>",
        "id": 169036463,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559856
    },
    {
        "content": "<p>for now yes</p>",
        "id": 169036470,
        "sender_full_name": "oli",
        "timestamp": 1561559861
    },
    {
        "content": "<p>you can port <code>promoted</code> accessors except <code>MirPass</code>es to use the new query</p>",
        "id": 169036495,
        "sender_full_name": "oli",
        "timestamp": 1561559881
    },
    {
        "content": "<p>We won't hit query cycles if <code>promoted_mir</code> calls <code>optimized_mir</code> to borrow the <code>promoted</code> field?</p>",
        "id": 169036556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559896
    },
    {
        "content": "<p>not for the places that currently call <code>optimized_mir</code> and then access the <code>promoted</code> field directly</p>",
        "id": 169036608,
        "sender_full_name": "oli",
        "timestamp": 1561559934
    },
    {
        "content": "<p><code>promoted_mir</code> is essentially a \"getter\" at the beginning</p>",
        "id": 169036638,
        "sender_full_name": "oli",
        "timestamp": 1561559952
    },
    {
        "content": "<p>Ok</p>",
        "id": 169036644,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561559956
    },
    {
        "content": "<p>Does <code>promoted_mir</code> need to call <code>optimized_mir</code> or just <code>const_qualifed</code>?</p>",
        "id": 169036699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560001
    },
    {
        "content": "<p>Well, I guess that won't work because it returns a <code>Steal</code> which <code>optimized_mir</code> will have taken...</p>",
        "id": 169036824,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560060
    },
    {
        "content": "<p>jup, keep calling <code>optimized_mir</code> for now</p>",
        "id": 169037083,
        "sender_full_name": "oli",
        "timestamp": 1561560103
    },
    {
        "content": "<p>once there's a <code>promoted_mir_inner</code> query that returns <code>(Steal&lt;&amp;'tcx mir::Body&gt;, Steal&lt;&amp;'tcx [mir::Body]&gt;)</code> then <code>promoted_mir</code> won't have to refer to <code>optimized_mir</code> anymore and we can remove the <code>promoted</code> field</p>",
        "id": 169037315,
        "sender_full_name": "oli",
        "timestamp": 1561560208
    },
    {
        "content": "<p>but for now just lay the groundwork</p>",
        "id": 169037322,
        "sender_full_name": "oli",
        "timestamp": 1561560214
    },
    {
        "content": "<p>Ok got it</p>",
        "id": 169037898,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560560
    },
    {
        "content": "<p>And that should be independent of the changes I showed you</p>",
        "id": 169037921,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560572
    },
    {
        "content": "<p>It's just a refactoring</p>",
        "id": 169037929,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560575
    },
    {
        "content": "<p>yes</p>",
        "id": 169037951,
        "sender_full_name": "oli",
        "timestamp": 1561560590
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 169038038,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560617
    },
    {
        "content": "<p>and once that is done, making <code>ConstProp</code> use <code>InterpCx</code> for promoteds becomes trivial</p>",
        "id": 169038045,
        "sender_full_name": "oli",
        "timestamp": 1561560620
    },
    {
        "content": "<p>Is there somebody in particular I should ping for reviews for the next few weeks or just let highfive do its job?</p>",
        "id": 169038150,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560702
    },
    {
        "content": "<p>use highfive, it'll get reassigned appropriately if the assignment is off. You can ping <code>@rust-lang/wg-mir-opt</code> to ask for someone to pick it up</p>",
        "id": 169038312,
        "sender_full_name": "oli",
        "timestamp": 1561560819
    },
    {
        "content": "<p>Perfect. Thanks!</p>",
        "id": 169038451,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560899
    },
    {
        "content": "<p>Have a good trip/fun on your time off/whatever you're doing <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 169038507,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561560935
    },
    {
        "content": "<p><span aria-label=\"sailboat\" class=\"emoji emoji-26f5\" role=\"img\" title=\"sailboat\">:sailboat:</span></p>",
        "id": 169038598,
        "sender_full_name": "oli",
        "timestamp": 1561560967
    },
    {
        "content": "<p>thanks!</p>",
        "id": 169038603,
        "sender_full_name": "oli",
        "timestamp": 1561560972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to me to this <a href=\"https://github.com/rust-lang/rust/pull/62322\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62322\">https://github.com/rust-lang/rust/pull/62322</a></p>",
        "id": 170925139,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563220009
    },
    {
        "content": "<p>saw at some point that you, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> were discussing about the idea</p>",
        "id": 170925168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563220037
    },
    {
        "content": "<p>I guess you agreed to do so?</p>",
        "id": 170925192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563220057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Yeah, that came out of <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/169035775\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/169035775\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/169035775</a></p>",
        "id": 170925326,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563220148
    },
    {
        "content": "<p>Jup, we want the promoted field to get removed from the mir::Body</p>",
        "id": 170925367,
        "sender_full_name": "oli",
        "timestamp": 1563220182
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  I thought there were going to be more changes than there were. Perhaps my expectations were off or maybe I missed something...</p>",
        "id": 170925448,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563220222
    },
    {
        "content": "<p>ohh just saw <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> r+, cool then so I don't have to :)</p>",
        "id": 170925652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563220277
    },
    {
        "content": "<p>There aren't that many instances of <code>*.promoted </code>though so I think it's correct.</p>",
        "id": 170925669,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563220298
    },
    {
        "content": "<p>Jup</p>",
        "id": 170925822,
        "sender_full_name": "oli",
        "timestamp": 1563220387
    },
    {
        "content": "<p>I need to page this back into my brain to figure out what the next step is. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'll probably ping you tomorrow if that's ok to sort that out.</p>",
        "id": 170925973,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563220486
    },
    {
        "content": "<p>I'll probably be unavailable until 18 CET or sth.</p>",
        "id": 170926792,
        "sender_full_name": "oli",
        "timestamp": 1563221009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> So, looking back at the previous conversation here, I think the next step is to introduce the <code>promoted_mir_inner</code> query and remove the <code>promoted</code> field from <code>Body</code>. I've started working on that <a href=\"https://github.com/wesleywiser/rust/commit/bbf6eb81b4f2809d0f56102f8575b687439aa62d\" target=\"_blank\" title=\"https://github.com/wesleywiser/rust/commit/bbf6eb81b4f2809d0f56102f8575b687439aa62d\">here</a>. My plan is to actually change <code>promote_consts::promote_candidates()</code> to return the <code>IndexVec&lt;Promoted, Body&gt;</code> of collected promoted values instead of mutating <code>Body.promoted</code>. Then in <code>mir_validated</code>, we can access those promoted values and change the <code>mir_validated</code> query to return <code>('tcx Steal&lt;Body&gt;, 'tcx Steal&lt;IndexVec&lt;Promoted, Body&gt;&gt;)</code>. With that change, I don't think we actually need the <code>promoted_mir_inner</code> query and we'll just change <code>promoted_mir</code> to query <code>mir_validated</code> and then run the optimizations on the promotions.</p>",
        "id": 171094013,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563381160
    },
    {
        "content": "<p>Am I on the right track?</p>",
        "id": 171094020,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563381170
    },
    {
        "content": "<p>Oh, that makes sense, good that we don't need the inner-hack</p>",
        "id": 171095427,
        "sender_full_name": "oli",
        "timestamp": 1563382274
    },
    {
        "content": "<p>Ok, cool!</p>",
        "id": 171095527,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563382348
    },
    {
        "content": "<p>I wasn't sure if I was going completely off track <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 171095534,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563382358
    },
    {
        "content": "<p>Nope, sounds great and the code lgtm</p>",
        "id": 171095937,
        "sender_full_name": "oli",
        "timestamp": 1563382727
    },
    {
        "content": "<p>So, I've been working more on this and I've come across a few things that are making this harder than I initially expected:</p>\n<p>1. Many (most?) of the existing <code>MirPass</code>es operate on <code>mir::Body</code> but they have no idea what that body's <code>DefId</code> is. As a result, they can't easily call <code>tcx.promoted_mir(def_id)</code> instead of <code>body.promoted</code>. I think in general this is resolvable by passing the DefId in from the code calling into the pass but I'm not 100% sure. Perhaps the better thing to do would be to add a <code>def_id: DefId</code> property to <code>Body</code> instead of passing it in everywhere? <br>\n2. Some <code>MirPass</code>es operate on both a method <code>Body</code> and it's promoted values at the same time. <a href=\"https://github.com/rust-lang/rust/blob/9606f6fa64926a84d82e3c62dbdc57f5c10f756d/src/librustc_mir/borrow_check/nll/renumber.rs#L47-L53\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9606f6fa64926a84d82e3c62dbdc57f5c10f756d/src/librustc_mir/borrow_check/nll/renumber.rs#L47-L53\">Example.</a> It's not clear to me if we can seperate the processing of promoted values from their parent <code>Body</code> for these passes as I think we will need to do.<br>\n3. The MIR inliner actually copies promoted values from inlined methods into their callsite. I guess this is just another variant of (2) but it's throwing me for a loop. <br>\nFrom looking back in this thread, I think the main reason we're trying to do this is to fix some wasted effort on the compiler's part. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> noted that we're computing promoted values during <code>ConstProp</code> but then those computed values are discarded and then later codegen recomputes the same promoted values when it needs them. </p>\n<p>Perhaps there's a different, easier, way to accomplish the same thing?</p>\n<p>For example, what if <code>ConstProp</code> actually replaced the promoted <code>Body</code> with something like:</p>\n<div class=\"codehilite\"><pre><span></span>bb0: {\n    _0 = const {value};\n    return;\n}\n</pre></div>\n\n\n<p>I would think that would be much more efficient for codegen to process later which should get us most of the same benefits. </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 171437277,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563807187
    },
    {
        "content": "<p>1. seems like you found some solutions. I'm not sure what would be better either, but having a <code>DefId</code> in the <code>Body</code> doesn't seem like the worst idea, we may be able to move some more things out of <code>Body</code> and access them via queries instead</p>",
        "id": 171454203,
        "sender_full_name": "oli",
        "timestamp": 1563819455
    },
    {
        "content": "<p>2. could be fixed by just running all <code>MirPass</code>es on promoteds, too</p>",
        "id": 171454319,
        "sender_full_name": "oli",
        "timestamp": 1563819545
    },
    {
        "content": "<p>and not do that manually in each pass</p>",
        "id": 171454332,
        "sender_full_name": "oli",
        "timestamp": 1563819556
    },
    {
        "content": "<p>oh, 3 sounds interesting</p>",
        "id": 171454375,
        "sender_full_name": "oli",
        "timestamp": 1563819596
    },
    {
        "content": "<p>We could try to evaluate all promoteds, if that doesn't work (due to generics), run const prop (and other passes) on the promoteds</p>",
        "id": 171454489,
        "sender_full_name": "oli",
        "timestamp": 1563819660
    },
    {
        "content": "<blockquote>\n<p>1. seems like you found some solutions. I'm not sure what would be better either, but having a <code>DefId</code> in the <code>Body</code> doesn't seem like the worst idea, we may be able to move some more things out of <code>Body</code> and access them via queries instead</p>\n</blockquote>\n<p>I guess a different approach would be to give each promoted a unique id and that would be the key of the <code>promoted_mir</code> query.</p>",
        "id": 171455888,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563820690
    },
    {
        "content": "<p>That doesn't seem any better to me though</p>",
        "id": 171455896,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563820705
    },
    {
        "content": "<blockquote>\n<p>2. could be fixed by just running all <code>MirPass</code>es on promoteds, too</p>\n</blockquote>\n<p>Yeah, that's what I was thinking.</p>",
        "id": 171456019,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563820775
    },
    {
        "content": "<blockquote>\n<p>oh, 3 sounds interesting</p>\n</blockquote>\n<p>So, I think the real issue with 3 is that <code>promoted_mir(x)</code> will depend on <code>optimized_mir(x)</code> which then depends on <code>promoted_mir(x)</code> again.</p>",
        "id": 171456179,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563820823
    },
    {
        "content": "<p>Because inlining can change the promoted values in a body</p>",
        "id": 171456202,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563820844
    },
    {
        "content": "<p>why does promoted_mir(x) depend on optimized_mir(x)?</p>",
        "id": 171456362,
        "sender_full_name": "oli",
        "timestamp": 1563820951
    },
    {
        "content": "<p>optimized_mir will (theoretically) run the inliner which can pull promoted mir from an inlined method into the call site. So the promoted_mir(callsite) depends on first running the inliner at callsite.</p>",
        "id": 171456563,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563821046
    },
    {
        "content": "<p>Because promoted_mir(callsite) can't change it's value after the first time it's called</p>",
        "id": 171456605,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563821082
    },
    {
        "content": "<p>oh</p>",
        "id": 171458063,
        "sender_full_name": "oli",
        "timestamp": 1563822140
    },
    {
        "content": "<p>that query</p>",
        "id": 171458065,
        "sender_full_name": "oli",
        "timestamp": 1563822143
    },
    {
        "content": "<p>I thought <code>3</code> would eliminate it?</p>",
        "id": 171458072,
        "sender_full_name": "oli",
        "timestamp": 1563822147
    },
    {
        "content": "<p>I'm not sure what to do about <code>3</code></p>",
        "id": 171458235,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563822272
    },
    {
        "content": "<p>(There was supposed to be a paragraph break after <code>3</code> but it seems to have been removed)</p>",
        "id": 171458260,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563822300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I've made a fair bit of progress on this I think. I've now gotten rid of the <code>promoted</code> field on <code>mir::Body</code> entirely and the compiler bootstraps without ICEing to stage 1 (after many unsuccessful attempts). I can see there's some UI tests failing related to additional errors being emitted from const eval but I'm not sure what I did that would have changed anything there. <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1\">https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1</a></p>",
        "id": 172473468,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564971888
    },
    {
        "content": "<p>sweet.</p>",
        "id": 172483876,
        "sender_full_name": "oli",
        "timestamp": 1564989399
    },
    {
        "content": "<p>I guess we can get rid of this hack now: <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-9e103702275cbef342c2decd3395bf3bL398\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-9e103702275cbef342c2decd3395bf3bL398\">https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-9e103702275cbef342c2decd3395bf3bL398</a></p>",
        "id": 172483880,
        "sender_full_name": "oli",
        "timestamp": 1564989410
    },
    {
        "content": "<p>no need for an option in <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-c2552a106550d05b69d5e07612f0f812R1510\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-c2552a106550d05b69d5e07612f0f812R1510\">https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-c2552a106550d05b69d5e07612f0f812R1510</a> just use an empty IndexVec</p>",
        "id": 172484163,
        "sender_full_name": "oli",
        "timestamp": 1564989791
    },
    {
        "content": "<p>wrt your additional errors. Maybe they're happening because all MirPasses are now run on promoteds (before copy prop sees them)</p>",
        "id": 172484484,
        "sender_full_name": "oli",
        "timestamp": 1564990260
    },
    {
        "content": "<p>about inlining (<a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-04789deb41c6e9576b3942e6a92e5551R430\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-04789deb41c6e9576b3942e6a92e5551R430\">https://github.com/rust-lang/rust/compare/master...wesleywiser:remove_promoted_field?expand=1#diff-04789deb41c6e9576b3942e6a92e5551R430</a>) I think the only actionable solution is to change the <code>StaticKind::Promoted</code> to also have a field with the <code>DefId</code></p>",
        "id": 172484511,
        "sender_full_name": "oli",
        "timestamp": 1564990321
    },
    {
        "content": "<p>at which point we can pull the <code>DefId</code>s out of the <code>StaticKInd</code> enum and put it into the surrounding value</p>",
        "id": 172484555,
        "sender_full_name": "oli",
        "timestamp": 1564990338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>I guess we can get rid of this hack now</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/commit/1090ef613c586d502dfad0e2d8023ad470d78b60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/1090ef613c586d502dfad0e2d8023ad470d78b60\">Done</a></p>\n<blockquote>\n<p>no need for an option in </p>\n</blockquote>\n<p>This is easy. I'll circle back to this later.</p>\n<blockquote>\n<p>wrt your additional errors. Maybe they're happening because all MirPasses are now run on promoteds (before copy prop sees them)</p>\n</blockquote>\n<p>Maybe? I don't really understand why copy prop would have an effect here.</p>\n<blockquote>\n<p>about inlining </p>\n</blockquote>\n<p>I <a href=\"https://github.com/rust-lang/rust/commit/6e4552078415d3d901db378697093f54ddbf11d3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/6e4552078415d3d901db378697093f54ddbf11d3\">started making these changes</a>. How does this handle polymorphic promoted values? If I have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">make</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"c1\">//promoted[0] in  make: [T; 0]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then when we inline <code>make</code> into <code>test</code>, <code>promoted[0]</code> will still have the <code>DefId</code> of <code>make</code> but it won't have any <code>Substs</code>. So when codegen (for example) runs, how does it know to use <code>B</code> for <code>T</code> instead of <code>A</code>?</p>",
        "id": 172578029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565089120
    },
    {
        "content": "<p>we can do the same thing that <code>Unevaluated</code> does and add a field for <code>SubstsRef</code></p>",
        "id": 172580892,
        "sender_full_name": "oli",
        "timestamp": 1565092184
    },
    {
        "content": "<p>these will need to have gotten adjusted for the calling function's substs, so you'd have to substitute substitutions</p>",
        "id": 172580946,
        "sender_full_name": "oli",
        "timestamp": 1565092206
    },
    {
        "content": "<blockquote>\n<p>these will need to have gotten adjusted for the calling function's substs, so you'd have to substitute substitutions</p>\n</blockquote>\n<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>That makes sense. Thanks!</p>",
        "id": 172589069,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565098916
    },
    {
        "content": "<blockquote>\n<p>these will need to have gotten adjusted for the calling function's substs, so you'd have to substitute substitutions</p>\n</blockquote>\n<p>So I've been working on this but I'm not really sure how to do that and I don't see any functions <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html</a> that seem to do that. Any pointers?</p>",
        "id": 173114191,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565703950
    },
    {
        "content": "<p>Oh, wait, is that what <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/relate/trait.Relate.html#tymethod.relate\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/relate/trait.Relate.html#tymethod.relate\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/relate/trait.Relate.html#tymethod.relate</a> is for?</p>",
        "id": 173114309,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> that's because that method is on a trait: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/trait.Subst.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/trait.Subst.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/trait.Subst.html</a></p>",
        "id": 173114401,
        "sender_full_name": "oli",
        "timestamp": 1565704133
    },
    {
        "content": "<p>super confusing name combo</p>",
        "id": 173114412,
        "sender_full_name": "oli",
        "timestamp": 1565704142
    },
    {
        "content": "<p>Yeah, it was hidden under the fold</p>",
        "id": 173114419,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704145
    },
    {
        "content": "<p>Is <code>Relate::relate()</code> what I'm looking for?</p>",
        "id": 173114436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704160
    },
    {
        "content": "<p>no, you can just call <code>subst</code> directly</p>",
        "id": 173114455,
        "sender_full_name": "oli",
        "timestamp": 1565704187
    },
    {
        "content": "<p>That method should be called loads in the inlining code</p>",
        "id": 173114538,
        "sender_full_name": "oli",
        "timestamp": 1565704234
    },
    {
        "content": "<p>or I'm doing something wrong</p>",
        "id": 173114540,
        "sender_full_name": "oli",
        "timestamp": 1565704238
    },
    {
        "content": "<p>lemme check before I'm talking more nonsense</p>",
        "id": 173114547,
        "sender_full_name": "oli",
        "timestamp": 1565704244
    },
    {
        "content": "<p>No I think you're right</p>",
        "id": 173114580,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704285
    },
    {
        "content": "<p>For example <a href=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/transform/inline.rs#L312\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/transform/inline.rs#L312\">https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/transform/inline.rs#L312</a></p>",
        "id": 173114597,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704310
    },
    {
        "content": "<p>ah perfect</p>",
        "id": 173114603,
        "sender_full_name": "oli",
        "timestamp": 1565704315
    },
    {
        "content": "<p>So I'll need to call it in the inliner as well</p>",
        "id": 173114608,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704322
    },
    {
        "content": "<p>I screwed up substitutions badly just last week and @eddyb had to dig me out of my hole</p>",
        "id": 173114652,
        "sender_full_name": "oli",
        "timestamp": 1565704332
    },
    {
        "content": "<p>And then also in the collector because the inliner is still running on polymorphic MIR right?</p>",
        "id": 173114662,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704341
    },
    {
        "content": "<p>the collector already monomorphizes</p>",
        "id": 173114682,
        "sender_full_name": "oli",
        "timestamp": 1565704367
    },
    {
        "content": "<p>you don't need to change anything there I believe</p>",
        "id": 173114718,
        "sender_full_name": "oli",
        "timestamp": 1565704392
    },
    {
        "content": "<p>Well I think it just uses <code>collect_neighbors()</code></p>",
        "id": 173114727,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704403
    },
    {
        "content": "<p>Don't I need to move the collection to <a href=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L674\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L674\">https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L674</a></p>",
        "id": 173114747,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704427
    },
    {
        "content": "<p>?</p>",
        "id": 173114750,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704430
    },
    {
        "content": "<p>Since that's where the correct <code>DefId</code> and <code>SubstsRef</code> will be in scope</p>",
        "id": 173114803,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704456
    },
    {
        "content": "<p>phew, you scared me a bit</p>",
        "id": 173114963,
        "sender_full_name": "oli",
        "timestamp": 1565704567
    },
    {
        "content": "<p>the current code does the right thing because <a href=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L1238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L1238\">https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/monomorphize/collector.rs#L1238</a> has the substs with it</p>",
        "id": 173114971,
        "sender_full_name": "oli",
        "timestamp": 1565704578
    },
    {
        "content": "<p><span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 173114976,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704581
    },
    {
        "content": "<p>Yeah, but because we've split out the promoted MIR from <code>Body</code>, you can't just do what <code>collect_neighbors()</code> is doing because your function might reference promoted MIR from an inlined function and that won't be returned by <code>tcx.promoted_mir(your_body_def_id)</code></p>",
        "id": 173115072,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704670
    },
    {
        "content": "<p>yea lol I just wrote a big text and realized I'm stupid</p>",
        "id": 173115129,
        "sender_full_name": "oli",
        "timestamp": 1565704684
    },
    {
        "content": "<p>Nah, it's fine. I just want to make sure I'm not doing something dumb either</p>",
        "id": 173115160,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704712
    },
    {
        "content": "<p>so... how does your <code>StaticKind</code> type look right now?</p>",
        "id": 173115164,
        "sender_full_name": "oli",
        "timestamp": 1565704719
    },
    {
        "content": "<p>what info does it propagate?</p>",
        "id": 173115173,
        "sender_full_name": "oli",
        "timestamp": 1565704724
    },
    {
        "content": "<p>(Should have pushed my changes this morning)</p>",
        "id": 173115184,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704730
    },
    {
        "content": "<p>There's a <code>DefId</code> of the root owner function of the promoted and the already adjusted <code>Substs</code>, right?</p>",
        "id": 173115241,
        "sender_full_name": "oli",
        "timestamp": 1565704775
    },
    {
        "content": "<p>so you can create an <code>Instance</code> from this information, but you're right, you need to subst the substs with <code>param_substs</code> before you do</p>",
        "id": 173115334,
        "sender_full_name": "oli",
        "timestamp": 1565704808
    },
    {
        "content": "<p>It's roughly</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Static</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StaticKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">StaticKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"n\">Promoted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173115355,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704821
    },
    {
        "content": "<p>ah yes, perfect</p>",
        "id": 173115374,
        "sender_full_name": "oli",
        "timestamp": 1565704837
    },
    {
        "content": "<p>So I should do the <code>subst()</code> call in the inliner to correct for any substs at the call site and then again in the collector for any final substs</p>",
        "id": 173115460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704901
    },
    {
        "content": "<p>yes</p>",
        "id": 173115469,
        "sender_full_name": "oli",
        "timestamp": 1565704910
    },
    {
        "content": "<p>Cool</p>",
        "id": 173115504,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704923
    },
    {
        "content": "<p>I think (hopefully) this is almost finished</p>",
        "id": 173115546,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704939
    },
    {
        "content": "<p>sweet</p>",
        "id": 173115554,
        "sender_full_name": "oli",
        "timestamp": 1565704945
    },
    {
        "content": "<p>Thanks for your help!</p>",
        "id": 173115599,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565704988
    },
    {
        "content": "<p>I think we kinda reinvented <code>ty::Const { val: ConstValue::Unevaluated(did, substs), ty }</code>, but that's alright, we can merge those later</p>",
        "id": 173115614,
        "sender_full_name": "oli",
        "timestamp": 1565705000
    },
    {
        "content": "<p>Yeah, that looks very similar and I think I saw code in <code>const_eval_raw_provider</code> that does exactly what we want in that case.</p>",
        "id": 173115663,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705040
    },
    {
        "content": "<p>yea <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 173115721,
        "sender_full_name": "oli",
        "timestamp": 1565705056
    },
    {
        "content": "<p>and inlining will also do the right thing automatically I think</p>",
        "id": 173115735,
        "sender_full_name": "oli",
        "timestamp": 1565705066
    },
    {
        "content": "<p>because it already has logic for constants</p>",
        "id": 173115743,
        "sender_full_name": "oli",
        "timestamp": 1565705072
    },
    {
        "content": "<p>I should look at that then.</p>",
        "id": 173115766,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705088
    },
    {
        "content": "<p>Aren't constants always monomorphic though?</p>",
        "id": 173115801,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705107
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/52c6458320d268d0b5a0b92d67f1fe943c7be518/src/librustc_mir/interpret/operand.rs#L515\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/52c6458320d268d0b5a0b92d67f1fe943c7be518/src/librustc_mir/interpret/operand.rs#L515\">https://github.com/rust-lang/rust/blob/52c6458320d268d0b5a0b92d67f1fe943c7be518/src/librustc_mir/interpret/operand.rs#L515</a></p>",
        "id": 173115811,
        "sender_full_name": "oli",
        "timestamp": 1565705112
    },
    {
        "content": "<p>not if they are associated constants of arrays</p>",
        "id": 173115820,
        "sender_full_name": "oli",
        "timestamp": 1565705120
    },
    {
        "content": "<p>Your commit hash doesn't seem to exist <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 173115861,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705159
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> grab it on master then</p>",
        "id": 173115929,
        "sender_full_name": "oli",
        "timestamp": 1565705184
    },
    {
        "content": "<p>Ok yeah it does that too <a href=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/interpret/operand.rs#L546-L551\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/interpret/operand.rs#L546-L551\">https://github.com/rust-lang/rust/blob/60960a260f7b5c695fd0717311d72ce62dd4eb43/src/librustc_mir/interpret/operand.rs#L546-L551</a></p>",
        "id": 173116196,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705360
    },
    {
        "content": "<p>sorry, my IDE jumped between files</p>",
        "id": 173116639,
        "sender_full_name": "oli",
        "timestamp": 1565705622
    },
    {
        "content": "<p>that link was entirely bogus</p>",
        "id": 173116652,
        "sender_full_name": "oli",
        "timestamp": 1565705630
    },
    {
        "content": "<p>I meant to link into the interner</p>",
        "id": 173116658,
        "sender_full_name": "oli",
        "timestamp": 1565705635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> here's the right link: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L121\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/inline.rs#L121</a></p>",
        "id": 173116964,
        "sender_full_name": "oli",
        "timestamp": 1565705809
    },
    {
        "content": "<p>so I guess you don't need to subst anything at all</p>",
        "id": 173116970,
        "sender_full_name": "oli",
        "timestamp": 1565705816
    },
    {
        "content": "<p>it's already substituted</p>",
        "id": 173116973,
        "sender_full_name": "oli",
        "timestamp": 1565705820
    },
    {
        "content": "<p>and if you repeat the substitution, you'd probably get an ICE</p>",
        "id": 173116990,
        "sender_full_name": "oli",
        "timestamp": 1565705833
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 173117015,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705855
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 173117017,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565705857
    },
    {
        "content": "<p>you've probably already seen them but in case not, these PRs seem relevant for your discussion:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/63495\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63495\">https://github.com/rust-lang/rust/pull/63495</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/63497\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63497\">https://github.com/rust-lang/rust/pull/63497</a></p>",
        "id": 173193188,
        "sender_full_name": "RalfJ",
        "timestamp": 1565780966
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 173367726,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957155
    },
    {
        "content": "<p>hi</p>",
        "id": 173367751,
        "sender_full_name": "oli",
        "timestamp": 1565957163
    },
    {
        "content": "<p>I was looking at the <code>SubstFolder</code> per your comment and it doesn't look like it does anything with promoted MIR at all</p>",
        "id": 173367813,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957244
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L451\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L451\">https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L451</a></p>",
        "id": 173367826,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957278
    },
    {
        "content": "<p>Reading through,  I don't think it even touches MIR at all</p>",
        "id": 173367872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957306
    },
    {
        "content": "<p>Am I looking at the right thing?</p>",
        "id": 173367887,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957330
    },
    {
        "content": "<p>I only found one implementation of <code>trait Subst</code> and it's here so I think this is the right code</p>",
        "id": 173367906,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957365
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L420\">https://github.com/rust-lang/rust/blob/5a6d801bf9399004a0f0a19e510d996f4686c093/src/librustc/ty/subst.rs#L420</a></p>",
        "id": 173367910,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"https://github.com/rust-lang/rust/blob/1df512fcaeaf17639c5d28a3045814d6f7a7db97/src/librustc/mir/mod.rs#L3231\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1df512fcaeaf17639c5d28a3045814d6f7a7db97/src/librustc/mir/mod.rs#L3231\">https://github.com/rust-lang/rust/blob/1df512fcaeaf17639c5d28a3045814d6f7a7db97/src/librustc/mir/mod.rs#L3231</a> is wrong probably</p>",
        "id": 173368002,
        "sender_full_name": "oli",
        "timestamp": 1565957465
    },
    {
        "content": "<p>Oh, gotcha. <code>self.fold_with()</code> dispatches via <code>TypeFoldable</code>.</p>",
        "id": 173368074,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957536
    },
    {
        "content": "<p>it probably was always wrong... the type should have been folded at least</p>",
        "id": 173368075,
        "sender_full_name": "oli",
        "timestamp": 1565957537
    },
    {
        "content": "<p>but now we need to fold the substs, too</p>",
        "id": 173368083,
        "sender_full_name": "oli",
        "timestamp": 1565957557
    },
    {
        "content": "<p>same goes for the <code>visit</code> part</p>",
        "id": 173368085,
        "sender_full_name": "oli",
        "timestamp": 1565957565
    },
    {
        "content": "<p>Ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 173368087,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957572
    },
    {
        "content": "<p>I think I can probably go from there</p>",
        "id": 173368110,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957608
    },
    {
        "content": "<p>Sorry to bug you</p>",
        "id": 173368114,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565957615
    },
    {
        "content": "<p>no worries at all, please do ask!</p>",
        "id": 173368326,
        "sender_full_name": "oli",
        "timestamp": 1565957852
    },
    {
        "content": "<p>Yay <a href=\"https://github.com/rust-lang/rust/issues/63580\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63580\">#63580</a> got merged! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 174147678,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566830694
    },
    {
        "content": "<p>I'm starting to look into replacing <a href=\"https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src/librustc_mir/transform/const_prop.rs#L342\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/555d7a2fd6165b614cfc01136d8e3f5c465a1582/src/librustc_mir/transform/const_prop.rs#L342\"><code>ConstProp::const_prop()</code></a> with use of <code>InterpCx</code>which I think is now unblocked because we fixed the promoted issue.</p>",
        "id": 174148002,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566830939
    },
    {
        "content": "<p>We will have the best const propagator on the planet, you should totally hold a talk about const prop at some point.</p>",
        "id": 174148990,
        "sender_full_name": "oli",
        "timestamp": 1566831607
    },
    {
        "content": "<p>That would be fun</p>",
        "id": 174149030,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831629
    },
    {
        "content": "<p>I mean... what other language reports warnings on failing to apply optimizations....</p>",
        "id": 174149056,
        "sender_full_name": "oli",
        "timestamp": 1566831647
    },
    {
        "content": "<p>I'm on the hunt for a talk to propose for a Rust conference next year anyway <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 174149077,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831662
    },
    {
        "content": "<p>I'm really sorry I missed your RustConf talk, it looked super interesting!</p>",
        "id": 174149097,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566831684
    },
    {
        "content": "<p>It was loads of fun</p>",
        "id": 174149572,
        "sender_full_name": "oli",
        "timestamp": 1566832000
    },
    {
        "content": "<p>I caught bits &amp; pieces on Twitter. The stuff on compile time UB looked really interesting! Do you post your slides online?</p>",
        "id": 174149647,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566832064
    },
    {
        "content": "<p>The talk was recorded</p>",
        "id": 174149843,
        "sender_full_name": "oli",
        "timestamp": 1566832198
    },
    {
        "content": "<p>Oh, sweet</p>",
        "id": 174149927,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566832223
    },
    {
        "content": "<p>Will get uploaded and slides will be available for download</p>",
        "id": 174149935,
        "sender_full_name": "oli",
        "timestamp": 1566832229
    },
    {
        "content": "<p>I'm subscribed to the YT channel so I assume it will pop up sooner or later on there</p>",
        "id": 174149969,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1566832248
    },
    {
        "content": "<p>looking forward to watching that talk as well :)</p>",
        "id": 174159748,
        "sender_full_name": "RalfJ",
        "timestamp": 1566839824
    },
    {
        "content": "<p>I've got a small patch that replaces <code>ConstProp::eval_place()</code> with <code>InterpCx::eval_place_into_op()</code> and it seems to work great. However, there's a few UI tests that had to be changed because a few places where we were already emitting an error (or errors) now emit an additional error. Is that ok or do we have to match the current behavior? </p>\n<p>My branch with the test changes is <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_use_ecx\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_use_ecx\">here</a>.</p>",
        "id": 174845917,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567563377
    },
    {
        "content": "<p>We need to figure out a way to remove duplicate errors, but I'm not sure how</p>",
        "id": 174851821,
        "sender_full_name": "oli",
        "timestamp": 1567573599
    },
    {
        "content": "<p>The two cases look OK to me. Once we figure out how to fix them it should all work</p>",
        "id": 174851895,
        "sender_full_name": "oli",
        "timestamp": 1567573714
    },
    {
        "content": "<p>Do you think I should switch and focus on trying to find a solution to those errors or just keep going with the const prop changes? </p>\n<p>Can we merge the const prop changes with duplicate errors or do they need to be resolved before that can happen?</p>",
        "id": 174879739,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567602709
    },
    {
        "content": "<p>Nah, we can merge them. They are not worse than what we have and the code deduplication is so <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 174910874,
        "sender_full_name": "oli",
        "timestamp": 1567623187
    },
    {
        "content": "<p>I don't think it needs to be a focus. Cleaning up const prop should make it easier to fix them at some point</p>",
        "id": 174911157,
        "sender_full_name": "oli",
        "timestamp": 1567623309
    },
    {
        "content": "<p>Ok, I'll keep moving forward then.</p>",
        "id": 174911388,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567623421
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 174911391,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567623422
    },
    {
        "content": "<p>So I've got a series of commits <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_use_ecx\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_use_ecx\">here</a> which I think are almost ready to go, but I'm stuck on the <code>Rvalue::Ref</code> handling. If I apply the <a href=\"https://github.com/rust-lang/rust/commit/9ec5f46ea2c09728375f6a21a78803f46bfbcb9f\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/9ec5f46ea2c09728375f6a21a78803f46bfbcb9f\">last commit</a>, then I get test failures related to generator layout optimization. These are the failing tests:</p>\n<div class=\"codehilite\"><pre><span></span>    [ui] ui/async-await/async-await.rs\n    [ui] ui/async-await/async-closure.rs\n    [ui] ui/async-await/async-fn-send-uses-nonsend.rs\n    [ui] ui/async-await/async-fn-size-moved-locals.rs\n    [ui] ui/async-await/async-fn-size.rs\n    [ui] ui/async-await/conditional-and-guaranteed-initialization.rs\n    [ui] ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs\n    [ui] ui/async-await/drop-order/drop-order-when-cancelled.rs\n    [ui] ui/async-await/generics-and-bounds.rs\n    [ui] ui/async-await/issue-60709.rs\n    [ui] ui/async-await/issue-61793.rs\n    [ui] ui/async-await/issue-62658.rs\n    [ui] ui/async-await/issues/issue-55809.rs\n    [ui] ui/async-await/issues/issue-61986.rs\n    [ui] ui/async-await/move-part-await-return-rest-struct.rs\n    [ui] ui/async-await/move-part-await-return-rest-tuple.rs\n    [ui] ui/drop/dynamic-drop-async.rs\n    [ui] ui/generator/control-flow.rs\n    [ui] ui/generator/drop-and-replace.rs\n    [ui] ui/generator/issue-44197.rs\n    [ui] ui/generator/issue-52398.rs\n    [ui] ui/generator/issue-57084.rs\n    [ui] ui/generator/issue-58888.rs\n    [ui] ui/generator/iterator-count.rs\n    [ui] ui/generator/nested_generators.rs\n    [ui] ui/generator/overlap-locals.rs\n    [ui] ui/generator/static-generators.rs\n    [ui] ui/generator/yield-in-box.rs\n    [ui] ui/proc-macro/invalid-punct-ident-1.rs\n    [ui] ui/proc-macro/invalid-punct-ident-2.rs\n    [ui] ui/proc-macro/invalid-punct-ident-3.rs\n    [ui] ui/unsized-locals/autoderef.rs\n</pre></div>\n\n\n<p>and most of them fail with something like this:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when computing layout of `[generator@src/test/ui/generator/control-flow.rs:26:15: 30:6 {fn(std::ops::Range&lt;i32&gt;) -&gt; &lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::IntoIter {&lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::into_iter}, i32, std::ops::Range&lt;i32&gt;, ()}]`\n  |\nnote: ...which requires processing `main::{{closure}}#1`...\n --&gt; src/test/ui/generator/control-flow.rs:27:18\n  |\n27|         for _ in 0..8 {\n  |                  ^^^^\n  = note: ...which again requires computing layout of `[generator@src/test/ui/generator/control-flow.rs:26:15: 30:6 {fn(std::ops::Range&lt;i32&gt;) -&gt; &lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::IntoIter {&lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::into_iter}, i32, std::ops::Range&lt;i32&gt;, ()}]`, completing the cycle\nnote: cycle used when processing `main`\n --&gt; src/test/ui/generator/control-flow.rs:24:1\n  |\n24| fn main() {\n  | ^^^^^^^^^\n\nthread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, src/librustc_errors/lib.rs:540:13\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n   1: backtrace::backtrace::trace_unsynchronized\n   2: std::sys_common::backtrace::_print\n   3: std::sys_common::backtrace::print\n   4: std::panicking::default_hook::{{closure}}\n   5: std::panicking::default_hook\n   6: &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call\n   7: rustc::util::common::panic_hook\n   8: std::panicking::rust_panic_with_hook\n   9: std::panicking::begin_panic\n  10: rustc_errors::Handler::panic_if_treat_err_as_bug\n  11: rustc_errors::Handler::bump_err_count\n  12: rustc_errors::Handler::emit_db\n  13: rustc_errors::diagnostic_builder::DiagnosticBuilder::emit\n  14: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::layout_raw&gt;::handle_cycle_error\n  15: rustc::ty::query::plumbing::JobOwner&lt;Q&gt;::try_get::{{closure}}\n  16: rustc_data_structures::cold_path\n  17: rustc::ty::query::plumbing::JobOwner&lt;Q&gt;::try_get\n  18: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  19: rustc::ty::query::TyCtxtAt::layout_raw\n             at src/librustc/ty/query/plumbing.rs:1076\n  20: &lt;rustc::ty::layout::LayoutCx&lt;rustc::ty::query::TyCtxtAt&gt; as rustc_target::abi::LayoutOf&gt;::layout_of\n             at src/librustc/ty/layout.rs:1965\n  21: rustc::ty::layout::&lt;impl rustc::ty::query::TyCtxtAt&gt;::layout_of\n             at ./src/librustc/ty/layout.rs:2012\n  22: &lt;rustc_mir::interpret::eval_context::InterpCx&lt;M&gt; as rustc_target::abi::LayoutOf&gt;::layout_of\n             at src/librustc_mir/interpret/eval_context.rs:191\n  23: rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::ref_to_mplace\n             at src/librustc_mir/interpret/place.rs:295\n  24: rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::deref_operand\n             at src/librustc_mir/interpret/place.rs:321\n  25: rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::place_projection\n             at src/librustc_mir/interpret/place.rs:584\n  26: rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_place::{{closure}}\n             at src/librustc_mir/interpret/place.rs:695\n  27: rustc::mir::Place::iterate_over::iterate_over2\n  28: rustc::mir::Place::iterate_over::iterate_over2\n  29: rustc::mir::Place::iterate_over::iterate_over2\n  30: rustc::mir::Place::iterate_over::iterate_over2\n  31: rustc::mir::Place::iterate_over::iterate_over2\n  32: rustc::mir::Place::iterate_over\n  33: rustc::mir::Place::iterate\n  34: rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_place\n             at src/librustc_mir/interpret/place.rs:660\n  35: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_rvalue_into_place\n             at src/librustc_mir/interpret/step.rs:247\n  36: rustc_mir::transform::const_prop::ConstPropagator::const_prop::{{closure}}\n             at src/librustc_mir/transform/const_prop.rs:319\n  37: rustc_mir::transform::const_prop::ConstPropagator::use_ecx\n             at src/librustc_mir/transform/const_prop.rs:237\n  38: rustc_mir::transform::const_prop::ConstPropagator::const_prop\n             at src/librustc_mir/transform/const_prop.rs:318\n  39: &lt;rustc_mir::transform::const_prop::ConstPropagator as rustc::mir::visit::MutVisitor&gt;::visit_statement\n             at src/librustc_mir/transform/const_prop.rs:569\n  40: rustc::mir::visit::MutVisitor::super_basic_block_data\n  41: rustc::mir::visit::MutVisitor::visit_basic_block_data\n  42: rustc::mir::visit::MutVisitor::super_body\n  43: rustc::mir::visit::MutVisitor::visit_body\n  44: &lt;rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass&gt;::run_pass\n             at src/librustc_mir/transform/const_prop.rs:93\n  45: rustc_mir::transform::run_passes::{{closure}}\n             at src/librustc_mir/transform/mod.rs:173\n  46: rustc_mir::transform::run_passes\n             at src/librustc_mir/transform/mod.rs:180\n  47: rustc_mir::transform::run_optimization_passes\n             at src/librustc_mir/transform/mod.rs:228\n  48: rustc_mir::transform::optimized_mir\n             at src/librustc_mir/transform/mod.rs:300\n  49: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::optimized_mir&gt;::compute\n  50: rustc::dep_graph::graph::DepGraph::with_task_impl\n  51: rustc::dep_graph::graph::DepGraph::with_task\n  52: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::force_query_with_job::{{closure}}::{{closure}}\n  53: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::start_query::{{closure}}::{{closure}}\n  54: rustc::ty::context::tls::enter_context::{{closure}}\n  55: rustc::ty::context::tls::set_tlv\n  56: rustc::ty::context::tls::enter_context\n  57: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::start_query::{{closure}}\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> any idea what I should do with this cycle?</p>",
        "id": 175423462,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203066
    },
    {
        "content": "<p>I tried pushing the <code>place_layout</code> we have from <code>ConstProp::const_prop()</code> further down and providing it to <code>InterpCx::eval_rvalue_into_place()</code> but that didn't pan out because the <code>Place</code> containing the generator has a series of projections and <code>layout_of</code> is getting called for one of the intermediate projections so the <code>place_layout</code> we have only applies to the final projection.</p>",
        "id": 175424085,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203561
    },
    {
        "content": "<p>So I'm assuming this <code>optimized_mir</code> invocation happens because of a <code>layout_of</code> invocation</p>",
        "id": 175424159,
        "sender_full_name": "oli",
        "timestamp": 1568203601
    },
    {
        "content": "<p>do you have the query stack available?</p>",
        "id": 175424169,
        "sender_full_name": "oli",
        "timestamp": 1568203612
    },
    {
        "content": "<p>Oh yeah, sorry. It got cutt off when I pasted the stack trace</p>",
        "id": 175424193,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203629
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>query stack during panic:\n#0 [optimized_mir] processing `main::{{closure}}#1`\n#1 [layout_raw] computing layout of `[generator@src/test/ui/generator/control-flow.rs:26:15: 30:6 {fn(std::ops::Range&lt;i32&gt;) -&gt; &lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::IntoIter {&lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::into_iter}, i32, std::ops::Range&lt;i32&gt;, ()}]`\n#2 [optimized_mir] processing `main`\n#3 [collect_and_partition_mono_items] collect_and_partition_mono_items\nend of query stack\n</pre></div>",
        "id": 175424204,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203637
    },
    {
        "content": "<p>though I wonder why generators would be more special compared with plain closures</p>",
        "id": 175424247,
        "sender_full_name": "oli",
        "timestamp": 1568203673
    },
    {
        "content": "<p>ah</p>",
        "id": 175424252,
        "sender_full_name": "oli",
        "timestamp": 1568203681
    },
    {
        "content": "<p>local vars</p>",
        "id": 175424268,
        "sender_full_name": "oli",
        "timestamp": 1568203682
    },
    {
        "content": "<p>nevermind</p>",
        "id": 175424295,
        "sender_full_name": "oli",
        "timestamp": 1568203684
    },
    {
        "content": "<p>ok, so generators have local variables in their generated struct</p>",
        "id": 175424304,
        "sender_full_name": "oli",
        "timestamp": 1568203696
    },
    {
        "content": "<p>while closures use the stack</p>",
        "id": 175424311,
        "sender_full_name": "oli",
        "timestamp": 1568203699
    },
    {
        "content": "<p>this is because generators need to remember a bunch of their locals across yield points</p>",
        "id": 175424324,
        "sender_full_name": "oli",
        "timestamp": 1568203715
    },
    {
        "content": "<p>so during the computation of the layout of the generator we need to know the MIR in order to know which variables we need</p>",
        "id": 175424351,
        "sender_full_name": "oli",
        "timestamp": 1568203741
    },
    {
        "content": "<p>now the big question is why are we computing the layout of the generator</p>",
        "id": 175424375,
        "sender_full_name": "oli",
        "timestamp": 1568203757
    },
    {
        "content": "<p>So it looks like the line that's failing (at least for the <code>src/test/ui/generator/control-flow.rs</code> test, is this:</p>\n<div class=\"codehilite\"><pre><span></span>(((*(_1.0: &amp;mut [generator@src/test/ui/generator/control-flow.rs:26:15: 30:6 {fn(std::ops::Range&lt;i32&gt;) -&gt; &lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::IntoIter {&lt;std::ops::Range&lt;i32&gt; as std::iter::IntoIterator&gt;::into_iter}, i32, std::ops::Range&lt;i32&gt;, ()}])) as variant#3).0: std::ops::Range&lt;i32&gt;) = move _2\n</pre></div>",
        "id": 175424495,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203838
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 175424519,
        "sender_full_name": "oli",
        "timestamp": 1568203872
    },
    {
        "content": "<p>ok</p>",
        "id": 175424523,
        "sender_full_name": "oli",
        "timestamp": 1568203876
    },
    {
        "content": "<p>So I assume the issue has something to do with the combination of the deref and the tuple projections</p>",
        "id": 175424550,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203914
    },
    {
        "content": "<p>well, it has to do with projecting into the generator from the generator's body</p>",
        "id": 175424597,
        "sender_full_name": "oli",
        "timestamp": 1568203934
    },
    {
        "content": "<p>I'm guessing we didn't need the layout of the bare generator type before since the deref is nested in other projections</p>",
        "id": 175424598,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568203937
    },
    {
        "content": "<p>I wonder why we already have a desugared generator at this point</p>",
        "id": 175424611,
        "sender_full_name": "oli",
        "timestamp": 1568203952
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> we have a small dilemma wrt running const propagation on generator MIR</p>",
        "id": 175424849,
        "sender_full_name": "oli",
        "timestamp": 1568204182
    },
    {
        "content": "<p>Here's the MIR from right before const_prop runs: <a href=\"https://gist.github.com/wesleywiser/46759330b21aac1347641dc0322561ce\" target=\"_blank\" title=\"https://gist.github.com/wesleywiser/46759330b21aac1347641dc0322561ce\">https://gist.github.com/wesleywiser/46759330b21aac1347641dc0322561ce</a></p>",
        "id": 175424889,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568204246
    },
    {
        "content": "<p>apparently the layout of a generator depends on the MIR after optimizations, but in order to run const propagation we essentially const eval the MIR, which creates constant memory that matches the local's layout</p>",
        "id": 175424999,
        "sender_full_name": "oli",
        "timestamp": 1568204337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> in the short term I suggest you just skip const prop on the MIR of generators</p>",
        "id": 175425051,
        "sender_full_name": "oli",
        "timestamp": 1568204392
    },
    {
        "content": "<p>Ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 175425108,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568204413
    },
    {
        "content": "<p>leave a FIXME there, but we should definitely keep talking about it</p>",
        "id": 175425111,
        "sender_full_name": "oli",
        "timestamp": 1568204418
    },
    {
        "content": "<p>Will do</p>",
        "id": 175425129,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568204441
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 175425131,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568204443
    },
    {
        "content": "<p>I think we could get around this by inserting an intermediate query that goes before <code>optimized_mir</code></p>",
        "id": 175473130,
        "sender_full_name": "tmandry",
        "timestamp": 1568233925
    },
    {
        "content": "<p>and depend on that from the layout code instead</p>",
        "id": 175473241,
        "sender_full_name": "tmandry",
        "timestamp": 1568234019
    },
    {
        "content": "<p>\"all problems in CS can be solved by another level of indirection\"</p>",
        "id": 175508468,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568276381
    },
    {
        "content": "<p>we have such a query, the problem is that <code>optimized_mir</code> steals its result to reduce memory load</p>",
        "id": 175509886,
        "sender_full_name": "oli",
        "timestamp": 1568277796
    },
    {
        "content": "<p>so if anyone calls <code>optimized_mir</code>, calling <code>mir_built</code> will fail</p>",
        "id": 175509902,
        "sender_full_name": "oli",
        "timestamp": 1568277827
    },
    {
        "content": "<p>there's no way to resolve cycle errors. You can only break cycles</p>",
        "id": 175509983,
        "sender_full_name": "oli",
        "timestamp": 1568277877
    },
    {
        "content": "<p>I mean we could pessimize generators by skipping const prop on places to a generator struct</p>",
        "id": 175510115,
        "sender_full_name": "oli",
        "timestamp": 1568278000
    },
    {
        "content": "<p>it's probably the best case scenario anyway. If we want real const prop on generators, we need to run const prop on the MIR of the generator that still has all the generator yield things in place</p>",
        "id": 175510136,
        "sender_full_name": "oli",
        "timestamp": 1568278050
    },
    {
        "content": "<p>though that may screw up const qualif or borrowck</p>",
        "id": 175510206,
        "sender_full_name": "oli",
        "timestamp": 1568278103
    },
    {
        "content": "<p>aargml</p>",
        "id": 175510208,
        "sender_full_name": "oli",
        "timestamp": 1568278106
    },
    {
        "content": "<p>ok</p>",
        "id": 175510209,
        "sender_full_name": "oli",
        "timestamp": 1568278108
    },
    {
        "content": "<p>I wonder if we can do something similar to what <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> did for <code>promoted</code>s</p>",
        "id": 175510253,
        "sender_full_name": "oli",
        "timestamp": 1568278169
    },
    {
        "content": "<p>so we get access to the generator state variant types without having to access the MIR</p>",
        "id": 175510273,
        "sender_full_name": "oli",
        "timestamp": 1568278189
    },
    {
        "content": "<p>oh yea, that could work</p>",
        "id": 175510277,
        "sender_full_name": "oli",
        "timestamp": 1568278199
    },
    {
        "content": "<p>I wonder if we could optimize these generator variant types more by eliminating unneeded fields</p>",
        "id": 175510376,
        "sender_full_name": "oli",
        "timestamp": 1568278273
    },
    {
        "content": "<p>If you can, that’d be extremely nice</p>",
        "id": 175730157,
        "sender_full_name": "tmandry",
        "timestamp": 1568517589
    },
    {
        "content": "<p>I’m not sure what solution is being proposed at this point though :)</p>",
        "id": 175730209,
        "sender_full_name": "tmandry",
        "timestamp": 1568517618
    },
    {
        "content": "<p>it's twofold</p>",
        "id": 175801609,
        "sender_full_name": "oli",
        "timestamp": 1568631350
    },
    {
        "content": "<p>one fixes our cycle problem by separating the generator types from the MIR once computed</p>",
        "id": 175801658,
        "sender_full_name": "oli",
        "timestamp": 1568631373
    },
    {
        "content": "<p>the other part is to optimize generator MIR before doing the state machine generation</p>",
        "id": 175801675,
        "sender_full_name": "oli",
        "timestamp": 1568631394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  So based on the review feedback, I should add hooks for:</p>\n<p>1. Accesing a local?<br>\n2. Accessing <code>static</code>s<br>\nand then create and impl a machine for ConstProp?</p>",
        "id": 175890268,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713154
    },
    {
        "content": "<p>we already have a hook for accessing statics I think</p>",
        "id": 175890276,
        "sender_full_name": "oli",
        "timestamp": 1568713173
    },
    {
        "content": "<p>ah no, that's just for foreign statics</p>",
        "id": 175890333,
        "sender_full_name": "oli",
        "timestamp": 1568713207
    },
    {
        "content": "<p>so yea, a new hook would be good</p>",
        "id": 175890341,
        "sender_full_name": "oli",
        "timestamp": 1568713219
    },
    {
        "content": "<p>Ok</p>",
        "id": 175890350,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713237
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 175890357,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713246
    },
    {
        "content": "<p>this is also great because we can just override <code>enforce_validity</code> instead of reimplementing the checks ourselves</p>",
        "id": 175890390,
        "sender_full_name": "oli",
        "timestamp": 1568713276
    },
    {
        "content": "<p>Oh, for that bit of code left in <code>const_prop()</code> before we call <code>eval_rvalue_into_place()</code>?</p>",
        "id": 175890446,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713331
    },
    {
        "content": "<p>hehe yes</p>",
        "id": 175890469,
        "sender_full_name": "oli",
        "timestamp": 1568713371
    },
    {
        "content": "<p>Yeah, that's great</p>",
        "id": 175890510,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713394
    },
    {
        "content": "<p>oh and you may be able to nix some of the special binary op handling by implementing the binary op hook</p>",
        "id": 175890518,
        "sender_full_name": "oli",
        "timestamp": 1568713403
    },
    {
        "content": "<p>all the function, frame and function hooks can just error for now I guess</p>",
        "id": 175890541,
        "sender_full_name": "oli",
        "timestamp": 1568713429
    },
    {
        "content": "<p>I'll look into that</p>",
        "id": 175890543,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713430
    },
    {
        "content": "<p>What did you think of this? <a href=\"https://github.com/rust-lang/rust/pull/64419#discussion_r325008824\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64419#discussion_r325008824\">https://github.com/rust-lang/rust/pull/64419#discussion_r325008824</a></p>",
        "id": 175890586,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713444
    },
    {
        "content": "<p>not necessary for the same PR wrt binary op</p>",
        "id": 175890587,
        "sender_full_name": "oli",
        "timestamp": 1568713444
    },
    {
        "content": "<p>I don't see any reason to restrict access to non-mutating statics</p>",
        "id": 175890605,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713467
    },
    {
        "content": "<p>I could be missing something though</p>",
        "id": 175890611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568713476
    },
    {
        "content": "<p>I don't see any reason either</p>",
        "id": 175891007,
        "sender_full_name": "oli",
        "timestamp": 1568713875
    },
    {
        "content": "<p>If we create a <code>ConstPropMachine</code>, doesn't that mean we won't be able to share <code>const_eval</code> results with the rest of rustc since we'll need to evaluate constants with our machine to get the correct checking?</p>",
        "id": 175892604,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568715590
    },
    {
        "content": "<p>Actually, I think this will work out the same as it does currently.</p>",
        "id": 175893359,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568716397
    },
    {
        "content": "<p>yea, the <code>const_eval</code> query still invokes the regular machine</p>",
        "id": 175898562,
        "sender_full_name": "oli",
        "timestamp": 1568721484
    },
    {
        "content": "<p>Is there a good way to reuse most of the existing <code>CompileTimeInterpreter</code> machine implementation? I thought maybe I could just compose a new <code>Machine</code> on top of it, do the validation we're interested in, and then dispatch to the underlying <code>CompileTimeInterpreter</code> but the <code>InterpCx</code> is what calls into the <code>Machine</code> so I don't think that will work.</p>",
        "id": 175904400,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568726055
    },
    {
        "content": "<p>yea that won't work. What logic do you want to re-use?</p>",
        "id": 175904472,
        "sender_full_name": "oli",
        "timestamp": 1568726107
    },
    {
        "content": "<p>I mean what you can always do is move the impl into a free function with the appropriate generics and call that</p>",
        "id": 175904484,
        "sender_full_name": "oli",
        "timestamp": 1568726116
    },
    {
        "content": "<p>I thought I'd want pretty much all of the implementation but maybe that's the wrong assumption</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/a44881d892fb4f4a8ed93f8f392bab942fac7a41/src/librustc_mir/const_eval.rs#L302-L479\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a44881d892fb4f4a8ed93f8f392bab942fac7a41/src/librustc_mir/const_eval.rs#L302-L479\">https://github.com/rust-lang/rust/blob/a44881d892fb4f4a8ed93f8f392bab942fac7a41/src/librustc_mir/const_eval.rs#L302-L479</a></p>",
        "id": 175904886,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568726435
    },
    {
        "content": "<p>I mean we don't have function calls yet, so all the stack pushing and function resolution stuff can be stubbed out</p>",
        "id": 175905255,
        "sender_full_name": "oli",
        "timestamp": 1568726670
    },
    {
        "content": "<p>a bunch of stuff is stubbed out in const eval and can just be duplicated or moved onto the trait</p>",
        "id": 175905271,
        "sender_full_name": "oli",
        "timestamp": 1568726684
    },
    {
        "content": "<p>Ah, ok. I won't worry about de-duplicating anything then until I have it actually working.</p>",
        "id": 175905583,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568726891
    },
    {
        "content": "<p>yea, the stubs are super tiny</p>",
        "id": 175905601,
        "sender_full_name": "oli",
        "timestamp": 1568726907
    },
    {
        "content": "<p>This might be a dumb question, but do we <em>really</em> need a <code>ConstPropMachine</code>? Couldn't we just add those hooks and put the appropriate implementations in the existing <code>CompileTimeInterpreter</code> <code>Machine</code>?</p>",
        "id": 175963849,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568770256
    },
    {
        "content": "<p>Some things are dead code in const eval and only reachable from const prop</p>",
        "id": 175978154,
        "sender_full_name": "oli",
        "timestamp": 1568791860
    },
    {
        "content": "<p>I feel like it makes sense to keep them separate, since having some things be ICEs in const eval and errors in const prop will help us catch bugs</p>",
        "id": 175978193,
        "sender_full_name": "oli",
        "timestamp": 1568791910
    }
]