[
    {
        "content": "<blockquote>\n<p>will make debugging hard/impossible</p>\n</blockquote>\n<p>this shouldn't be a thing. perfect debuginfo preservation was the blocker for my SROA and NRVO optimizations</p>",
        "id": 187708937,
        "sender_full_name": "eddyb",
        "timestamp": 1581152790
    },
    {
        "content": "<p>please talk to me about things like that, I think one of the goals is (or used to be?) that optimized libraries should still be \"perfectly debuggable\" (although this mostly matters for libcore...libstd)</p>",
        "id": 187709597,
        "sender_full_name": "eddyb",
        "timestamp": 1581154012
    },
    {
        "content": "<p>although idk if this topic is the best one to discuss this in lol</p>",
        "id": 187709605,
        "sender_full_name": "eddyb",
        "timestamp": 1581154035
    },
    {
        "content": "<p>Perfect debuginfo preservation limits optimizations though =P</p>",
        "id": 187710906,
        "sender_full_name": "Zoxc",
        "timestamp": 1581156756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> common misconception :P</p>",
        "id": 187712836,
        "sender_full_name": "eddyb",
        "timestamp": 1581160630
    },
    {
        "content": "<p>AFAICT you might even be able to run a loop to compute a value in the debugger, which was completely optimized out in the actual program</p>",
        "id": 187712848,
        "sender_full_name": "eddyb",
        "timestamp": 1581160674
    },
    {
        "content": "<p>one of the main limiting factors here is LLVM</p>",
        "id": 187712890,
        "sender_full_name": "eddyb",
        "timestamp": 1581160700
    },
    {
        "content": "<p>(I suggest everyone in wg-mir-opt to skim through <a href=\"http://www.dwarfstd.org/doc/DWARF5.pdf\" target=\"_blank\" title=\"http://www.dwarfstd.org/doc/DWARF5.pdf\">http://www.dwarfstd.org/doc/DWARF5.pdf</a> - I wish I've done it years ago, it's really inspiring to see what's designed to be possible)</p>",
        "id": 187712974,
        "sender_full_name": "eddyb",
        "timestamp": 1581160847
    },
    {
        "content": "<p>I have read a lot of that document already to implement debuginfo in cg_clif. It can be hard to find what you want, but it is likely there, no matter how exotic it is what you want.</p>",
        "id": 187713116,
        "sender_full_name": "bjorn3",
        "timestamp": 1581161083
    },
    {
        "content": "<p>I'm kind of curious how you're approaching DWARF, is there some Cranelift abstraction being built by you or anyone else? (presumably you need to map Cranelift instructions to address ranges you can write in the DWARF)</p>",
        "id": 187713134,
        "sender_full_name": "eddyb",
        "timestamp": 1581161125
    },
    {
        "content": "<p><del>(but this is very offtopic lol)</del></p>",
        "id": 187713136,
        "sender_full_name": "eddyb",
        "timestamp": 1581161132
    },
    {
        "content": "<p>Cranelift has a few basic abstractions like:</p>\n<ul>\n<li>Function.srclocs: mapping from instruction to SourceLoc (an u32)</li>\n<li>FunctionBuilder.set_val_label(): mapping from ValueLabel to storage location (register/stack) for each inst</li>\n</ul>\n<p>On top of those I have built a DWARF writer which uses gimli for the actual encoding. (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/e95a300630ce9f44b363ecc18e78a6f5df410b79/src/debuginfo\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/e95a300630ce9f44b363ecc18e78a6f5df410b79/src/debuginfo\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/e95a300630ce9f44b363ecc18e78a6f5df410b79/src/debuginfo</a>)</p>",
        "id": 187713743,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162223
    },
    {
        "content": "<p>For line debuginfo generate a unique SourceLoc for each mir::SourceLoc. To map from Inst to address range, I just use <code>func.inst_offsets</code> on the function after compilation.</p>",
        "id": 187713853,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162349
    },
    {
        "content": "<p>that's super cool that Cranelift can give you access to all that</p>",
        "id": 187713968,
        "sender_full_name": "eddyb",
        "timestamp": 1581162549
    },
    {
        "content": "<p>I kind of wish the cranelift backend was in-tree and I had more time to help on it, but I'm glad someone's doing it :D</p>",
        "id": 187713977,
        "sender_full_name": "eddyb",
        "timestamp": 1581162602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> btw did you see the clusterfudge that LLVM's SSA value debuginfo is? <a href=\"https://github.com/rust-lang/rust/issues/68817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68817\">https://github.com/rust-lang/rust/issues/68817</a></p>",
        "id": 187714020,
        "sender_full_name": "eddyb",
        "timestamp": 1581162633
    },
    {
        "content": "<p>AFAICT there's no way to force LLVM into a mode of \"I <em>really</em> want this value computed and kept around because I'm in debug mode\" without throwing it onto the stack</p>",
        "id": 187714034,
        "sender_full_name": "eddyb",
        "timestamp": 1581162691
    },
    {
        "content": "<p>Cranelift looks much better positioned to allow this</p>",
        "id": 187714038,
        "sender_full_name": "eddyb",
        "timestamp": 1581162721
    },
    {
        "content": "<p>Yes I saw that. Cranelift currently is not much better, as it also discards values after their last use. Adding a instruction which pretends to read a value to Cranelift may fix  it though.</p>",
        "id": 187714094,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162796
    },
    {
        "content": "<p>I haven't spent much time on local debuginfo yet. cg_clif does have some rudimentary support currently, but I disabled it as it doesn't handle much types and value locations.</p>",
        "id": 187714146,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162860
    },
    {
        "content": "<p>yeah I think you need to find the last instruction that's in a lexical scope that's nested inside the scope of a variable and add some sort of \"debuginfo fence\"</p>",
        "id": 187714150,
        "sender_full_name": "eddyb",
        "timestamp": 1581162876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> IMO, all of the type debuginfo should be shared between LLVM and Cranelift</p>",
        "id": 187714154,
        "sender_full_name": "eddyb",
        "timestamp": 1581162890
    },
    {
        "content": "<p>Yeah, I have been planning to do that some day, but I haven't done it yet. I think I will give it a shot today though.</p>",
        "id": 187714167,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162946
    },
    {
        "content": "<p>I have some vague ideas of how we might be able to do this, we just need to find an abstraction (probably based around <code>gimli</code>)</p>",
        "id": 187714169,
        "sender_full_name": "eddyb",
        "timestamp": 1581162957
    },
    {
        "content": "<p>(Should we split this out in a new topic)</p>",
        "id": 187714206,
        "sender_full_name": "bjorn3",
        "timestamp": 1581162965
    },
    {
        "content": "<p><em>shrug</em></p>",
        "id": 187714207,
        "sender_full_name": "eddyb",
        "timestamp": 1581162973
    },
    {
        "content": "<p>I was thinking about creating a new datastructure, which has the same shape as the output DWARF. I think using gimli will be hard to translate back to LLVM.</p>",
        "id": 187714257,
        "sender_full_name": "bjorn3",
        "timestamp": 1581163092
    },
    {
        "content": "<p>I was thinking some kind of API which is easy to emit both LLVM and gimli from. not literally using gimli, that would indeed not be convertable back to LLVM</p>",
        "id": 187714271,
        "sender_full_name": "eddyb",
        "timestamp": 1581163150
    },
    {
        "content": "<p>You mean a trait? That should be possible</p>",
        "id": 187714277,
        "sender_full_name": "bjorn3",
        "timestamp": 1581163185
    },
    {
        "content": "<p>yeah like the <code>BuilderMethods</code> trait</p>",
        "id": 187714279,
        "sender_full_name": "eddyb",
        "timestamp": 1581163198
    },
    {
        "content": "<p>/me is waiting for git pull to complete so that he can work on this.</p>",
        "id": 187714428,
        "sender_full_name": "bjorn3",
        "timestamp": 1581163445
    },
    {
        "content": "<p>At <a href=\"https://github.com/rust-lang/rust/blob/6cad7542da2f10e2110f942de4db59716bacb3df/src/librustc_codegen_llvm/debuginfo/create_scope_map.rs#L67\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6cad7542da2f10e2110f942de4db59716bacb3df/src/librustc_codegen_llvm/debuginfo/create_scope_map.rs#L67\">https://github.com/rust-lang/rust/blob/6cad7542da2f10e2110f942de4db59716bacb3df/src/librustc_codegen_llvm/debuginfo/create_scope_map.rs#L67</a> I don't understand why skipping the creation of a nested scope can cause shadowing problems.</p>",
        "id": 187720288,
        "sender_full_name": "bjorn3",
        "timestamp": 1581174795
    },
    {
        "content": "<p>because you could have the same name twice in the same scope</p>",
        "id": 187720352,
        "sender_full_name": "eddyb",
        "timestamp": 1581174922
    },
    {
        "content": "<p>How? <code>let a; let a;</code> creates the second <code>a</code> in a subscope, right?</p>",
        "id": 187720400,
        "sender_full_name": "bjorn3",
        "timestamp": 1581174964
    },
    {
        "content": "<p>That code is only for scopes without variables defined</p>",
        "id": 187720410,
        "sender_full_name": "bjorn3",
        "timestamp": 1581175007
    },
    {
        "content": "<p>hmm</p>",
        "id": 187720420,
        "sender_full_name": "eddyb",
        "timestamp": 1581175055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I think that code might be from a time when argument scope wasn't the outermost scope</p>",
        "id": 187720469,
        "sender_full_name": "eddyb",
        "timestamp": 1581175125
    },
    {
        "content": "<p>So I can always perform an early return when there are no variables in a scope?</p>",
        "id": 187720486,
        "sender_full_name": "bjorn3",
        "timestamp": 1581175192
    },
    {
        "content": "<p>we should test it</p>",
        "id": 187720527,
        "sender_full_name": "eddyb",
        "timestamp": 1581175207
    },
    {
        "content": "<p>What should be the test?</p>",
        "id": 187720546,
        "sender_full_name": "bjorn3",
        "timestamp": 1581175264
    },
    {
        "content": "<p>just change it and see if debuginfo tests pass</p>",
        "id": 187720555,
        "sender_full_name": "eddyb",
        "timestamp": 1581175275
    },
    {
        "content": "<p>I could probably do it right now myself</p>",
        "id": 187720558,
        "sender_full_name": "eddyb",
        "timestamp": 1581175282
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 187720562,
        "sender_full_name": "bjorn3",
        "timestamp": 1581175292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> seems to work fine :)</p>",
        "id": 187721655,
        "sender_full_name": "eddyb",
        "timestamp": 1581177296
    },
    {
        "content": "<p>Thanks for testing. I will remove it then.</p>",
        "id": 187721680,
        "sender_full_name": "bjorn3",
        "timestamp": 1581177346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I included it in <a href=\"https://github.com/rust-lang/rust/pull/68960\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68960\">https://github.com/rust-lang/rust/pull/68960</a></p>",
        "id": 187725427,
        "sender_full_name": "eddyb",
        "timestamp": 1581184290
    },
    {
        "content": "<p>but what I was working on is <a href=\"https://github.com/rust-lang/rust/pull/68961\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68961\">https://github.com/rust-lang/rust/pull/68961</a></p>",
        "id": 187725431,
        "sender_full_name": "eddyb",
        "timestamp": 1581184301
    },
    {
        "content": "<p>which I'm excited for, especially if we start doing MIR inlining in debug mode (just very limited)</p>",
        "id": 187725471,
        "sender_full_name": "eddyb",
        "timestamp": 1581184323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I think we should seriously consider recording calls being inlined, in MIR scope trees</p>",
        "id": 187725498,
        "sender_full_name": "eddyb",
        "timestamp": 1581184425
    },
    {
        "content": "<p>I don't see any reason we can't generate what LLVM inlining generates, in terms of debuginfo</p>",
        "id": 187725559,
        "sender_full_name": "eddyb",
        "timestamp": 1581184528
    },
    {
        "content": "<p>it's not like LLVM can tell apart LLVM IR that its own passes generated vs anything else :P</p>",
        "id": 187725568,
        "sender_full_name": "eddyb",
        "timestamp": 1581184546
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> I included it in <a href=\"https://github.com/rust-lang/rust/pull/68960\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68960\">https://github.com/rust-lang/rust/pull/68960</a></p>\n</blockquote>\n<p>I also included it in <a href=\"https://github.com/rust-lang/rust/issues/68959\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68959\">#68959</a> :) I will wait with marking it as ready until I you're PR is merged and I have some more refactorings towards moving most debuginfo code to cg_ssa.</p>",
        "id": 187727424,
        "sender_full_name": "bjorn3",
        "timestamp": 1581187996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I'm now testing a rustc which remembers which MIR scopes came from inlining a call :D</p>",
        "id": 187728438,
        "sender_full_name": "eddyb",
        "timestamp": 1581190147
    },
    {
        "content": "<p>no codegen for it, but I might tackle that soon if it's not too asinine</p>",
        "id": 187728441,
        "sender_full_name": "eddyb",
        "timestamp": 1581190163
    },
    {
        "content": "<blockquote>\n<p><code>error: internal compiler error: src/librustc_mir/shim.rs:99: creating shims from intrinsics (Intrinsic(DefId(2:981 ~ core[9627]::intrinsics[0]::[1]::transmute[0]))) is unsupported</code></p>\n</blockquote>",
        "id": 187728577,
        "sender_full_name": "eddyb",
        "timestamp": 1581190362
    },
    {
        "content": "<p>lmao</p>",
        "id": 187728578,
        "sender_full_name": "eddyb",
        "timestamp": 1581190364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Btw I'd like a flag which disables/enables optimizations that hurt the debugging experience. We kind of need LLVM to obey it to be useful though (unless we get a lot of MIR opts)</p>",
        "id": 187730891,
        "sender_full_name": "Zoxc",
        "timestamp": 1581194835
    },
    {
        "content": "<p>I definitely want a LLVM mode that makes <code>llvm.dbg.value</code> actually work :P</p>",
        "id": 187730899,
        "sender_full_name": "eddyb",
        "timestamp": 1581194875
    },
    {
        "content": "<p>taadaa <a href=\"https://github.com/rust-lang/rust/pull/68965\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68965\">https://github.com/rust-lang/rust/pull/68965</a></p>",
        "id": 187731025,
        "sender_full_name": "eddyb",
        "timestamp": 1581195119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  is on <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> today! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 187731135,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581195304
    },
    {
        "content": "<p>it's a nice distraction-free weekend :D</p>",
        "id": 187731258,
        "sender_full_name": "eddyb",
        "timestamp": 1581195496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> heh cool that you tried. I wonder if this is a shim or something</p>",
        "id": 187732655,
        "sender_full_name": "eddyb",
        "timestamp": 1581198466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#0 [optimized_mir] processing\n    `&lt;&lt;collections::vec_deque::VecDeque&lt;T&gt; as core::ops::Drop&gt;::drop::Dropper&lt;&#39;a, T&gt; as core::ops::Drop&gt;::drop`\n</pre></div>",
        "id": 187732695,
        "sender_full_name": "eddyb",
        "timestamp": 1581198499
    },
    {
        "content": "<p>It's the first thing I think to do when I see a pr touching the inliner lol</p>",
        "id": 187732696,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581198506
    },
    {
        "content": "<p>We regress far too easily</p>",
        "id": 187732697,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581198519
    },
    {
        "content": "<p>I believe it's coming from a change in your second commit FYI</p>",
        "id": 187732711,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581198591
    },
    {
        "content": "<p>bisecting to be sure</p>",
        "id": 187732713,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581198599
    },
    {
        "content": "<p>I mean, it's clearly inlining this :P <a href=\"https://github.com/rust-lang/rust/blob/master/src/liballoc/collections/vec_deque.rs#L153\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/liballoc/collections/vec_deque.rs#L153\">https://github.com/rust-lang/rust/blob/master/src/liballoc/collections/vec_deque.rs#L153</a></p>",
        "id": 187732759,
        "sender_full_name": "eddyb",
        "timestamp": 1581198636
    },
    {
        "content": "<p>should be easy to repro</p>",
        "id": 187732771,
        "sender_full_name": "eddyb",
        "timestamp": 1581198675
    },
    {
        "content": "<p>ooooh the <code>real_drop_in_place</code> name is gone</p>",
        "id": 187732882,
        "sender_full_name": "eddyb",
        "timestamp": 1581198935
    },
    {
        "content": "<p>the param env is wrong here but I doubt that's it <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/instance.rs#L288\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/instance.rs#L288\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/instance.rs#L288</a></p>",
        "id": 187732997,
        "sender_full_name": "eddyb",
        "timestamp": 1581199106
    },
    {
        "content": "<p>oh this is giving me a headache</p>",
        "id": 187733016,
        "sender_full_name": "eddyb",
        "timestamp": 1581199194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> how hard would it be for you to test a small commit?</p>",
        "id": 187733077,
        "sender_full_name": "eddyb",
        "timestamp": 1581199252
    },
    {
        "content": "<p>actually, I take that back, the bug is in instance and/or shim</p>",
        "id": 187733147,
        "sender_full_name": "eddyb",
        "timestamp": 1581199431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay so there's a dark invariant for the <code>InstanceDef</code> variants that have a <code>Ty</code> - all sorts of things can break if the type isn't monomorphic (which means the substs are actually pointless and should always be empty)</p>",
        "id": 187733431,
        "sender_full_name": "eddyb",
        "timestamp": 1581200023
    },
    {
        "content": "<p>actually, no, the substs should be valid for the <code>DefId</code>, but other than that, the monomorphic type restriction should still hold</p>",
        "id": 187733528,
        "sender_full_name": "eddyb",
        "timestamp": 1581200182
    },
    {
        "content": "<p>we could do better by extracting a \"shallow skeleton\", but it's a lot of work I guess</p>",
        "id": 187733546,
        "sender_full_name": "eddyb",
        "timestamp": 1581200272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> o/</p>",
        "id": 187734640,
        "sender_full_name": "eddyb",
        "timestamp": 1581202608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> not sure I did this Zulip subscribe thing right, does this notify you :P?</p>",
        "id": 187734741,
        "sender_full_name": "eddyb",
        "timestamp": 1581202721
    },
    {
        "content": "<p>looks like it did</p>",
        "id": 187735471,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204047
    },
    {
        "content": "<p>that mir inlining issue with #[tracked_caller] is actually the reason why I started working on the hygiene/span serialization fixes :)</p>",
        "id": 187735487,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204100
    },
    {
        "content": "<p>wow</p>",
        "id": 187735489,
        "sender_full_name": "eddyb",
        "timestamp": 1581204109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> wait did you just remove the track_caller check, and tried that?</p>",
        "id": 187735529,
        "sender_full_name": "eddyb",
        "timestamp": 1581204125
    },
    {
        "content": "<p>it was bothering me that we couldn't inline 'unwrap' without panic message regressions</p>",
        "id": 187735530,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204127
    },
    {
        "content": "<p>yup</p>",
        "id": 187735531,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204129
    },
    {
        "content": "<p>it seemed to work, otherwise</p>",
        "id": 187735532,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204133
    },
    {
        "content": "<p>okay, so, the reason that check is there, has nothing to do with cross-crate spans</p>",
        "id": 187735535,
        "sender_full_name": "eddyb",
        "timestamp": 1581204146
    },
    {
        "content": "<p>but the printed message changed to a macro invocation for 'unwrap'</p>",
        "id": 187735537,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204149
    },
    {
        "content": "<p>there are a bunch of tests missing</p>",
        "id": 187735540,
        "sender_full_name": "eddyb",
        "timestamp": 1581204152
    },
    {
        "content": "<p>I just added them on my branch</p>",
        "id": 187735541,
        "sender_full_name": "eddyb",
        "timestamp": 1581204162
    },
    {
        "content": "<p>well, I didn't do any further testing after I saw that message</p>",
        "id": 187735544,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204166
    },
    {
        "content": "<p>basically that check wasn't tested</p>",
        "id": 187735545,
        "sender_full_name": "eddyb",
        "timestamp": 1581204168
    },
    {
        "content": "<p>the reason is there is because you need to somehow remember that you inlined some code</p>",
        "id": 187735555,
        "sender_full_name": "eddyb",
        "timestamp": 1581204185
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 187735559,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204209
    },
    {
        "content": "<p>From what I saw, the actual passing of the caller location happens during codegen</p>",
        "id": 187735562,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204226
    },
    {
        "content": "<p>if you just inline then the <code>Span</code> won't be in the caller</p>",
        "id": 187735564,
        "sender_full_name": "eddyb",
        "timestamp": 1581204228
    },
    {
        "content": "<p>it will be in the callee</p>",
        "id": 187735566,
        "sender_full_name": "eddyb",
        "timestamp": 1581204236
    },
    {
        "content": "<p>codegen has to be able to walk up the \"chain\" of inlines, going through <code>#[track_caller]</code> ones, until it finds the actual call site that matters</p>",
        "id": 187735616,
        "sender_full_name": "eddyb",
        "timestamp": 1581204274
    },
    {
        "content": "<p>it might be easier to show rather than tell :P</p>",
        "id": 187735620,
        "sender_full_name": "eddyb",
        "timestamp": 1581204287
    },
    {
        "content": "<p>(since I was supposed to implement this, but got distracted by the bug you found)</p>",
        "id": 187735626,
        "sender_full_name": "eddyb",
        "timestamp": 1581204306
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 187735629,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204342
    },
    {
        "content": "<p><code>expansion_cause</code> would resolve to the macro invocation location in <code>unwrap</code></p>",
        "id": 187735632,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204356
    },
    {
        "content": "<p>but you don't even want to do <code>expansion_cause</code> for any span inside the <code>unwrap</code>, you want to first find the real callsite</p>",
        "id": 187735678,
        "sender_full_name": "eddyb",
        "timestamp": 1581204384
    },
    {
        "content": "<p>which only the inliner knew, and it threw it away</p>",
        "id": 187735679,
        "sender_full_name": "eddyb",
        "timestamp": 1581204395
    },
    {
        "content": "<p>I see</p>",
        "id": 187735680,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204402
    },
    {
        "content": "<p>that's where <a href=\"https://github.com/rust-lang/rust/pull/68965\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68965\">https://github.com/rust-lang/rust/pull/68965</a> comes in</p>",
        "id": 187735683,
        "sender_full_name": "eddyb",
        "timestamp": 1581204415
    },
    {
        "content": "<p>(I've been meaning to do this for a while, and the current climate of \"let's turn the inliner on\" is a good excuse to do it for debuginfo)</p>",
        "id": 187735689,
        "sender_full_name": "eddyb",
        "timestamp": 1581204450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> anyway this would've been obvious if tests were added which actually turned the inliner on lol</p>",
        "id": 187735692,
        "sender_full_name": "eddyb",
        "timestamp": 1581204466
    },
    {
        "content": "<p>so, it sounds like the hygiene change might not even be necessary for <code>#[track_caller]</code>, lol</p>",
        "id": 187735742,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1581204512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> these tests now fail if you remove the check for no track_caller, from the inliner <a href=\"https://github.com/rust-lang/rust/pull/68965/commits/0f373ea4648e1a8334662fc7580f5b6d20607f10\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68965/commits/0f373ea4648e1a8334662fc7580f5b6d20607f10\">https://github.com/rust-lang/rust/pull/68965/commits/0f373ea4648e1a8334662fc7580f5b6d20607f10</a></p>",
        "id": 187735744,
        "sender_full_name": "eddyb",
        "timestamp": 1581204515
    },
    {
        "content": "<p>well, you do need the hygiene change to make it work correctly in many other cases, but it's mostly codegen rather than MIR inlining, that is affected</p>",
        "id": 187735764,
        "sender_full_name": "eddyb",
        "timestamp": 1581204557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> sorry, got distracted, but I just pushed a commit which should solve the ICE you hit</p>",
        "id": 187737802,
        "sender_full_name": "eddyb",
        "timestamp": 1581208864
    },
    {
        "content": "<p>/me doesn't actually know how to test it reliably</p>",
        "id": 187737806,
        "sender_full_name": "eddyb",
        "timestamp": 1581208881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Sorry, missed the notification.</p>",
        "id": 187738418,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581210146
    },
    {
        "content": "<p>I'll test it now</p>",
        "id": 187738419,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581210149
    },
    {
        "content": "<p>nah your timing is great :D</p>",
        "id": 187738423,
        "sender_full_name": "eddyb",
        "timestamp": 1581210169
    },
    {
        "content": "<p>I'm now testing the MIR-inliner-aware <code>#[track_caller]</code> codegen</p>",
        "id": 187738494,
        "sender_full_name": "eddyb",
        "timestamp": 1581210334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Stage 1 builds successfully!</p>",
        "id": 187738691,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581210682
    },
    {
        "content": "<p>:D</p>",
        "id": 187738693,
        "sender_full_name": "eddyb",
        "timestamp": 1581210689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> did you see this btw? <a href=\"https://github.com/rust-lang/rust/pull/67662#discussion_r376725183\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67662#discussion_r376725183\">https://github.com/rust-lang/rust/pull/67662#discussion_r376725183</a></p>",
        "id": 187738742,
        "sender_full_name": "eddyb",
        "timestamp": 1581210726
    },
    {
        "content": "<p>Yeah but I haven't had a chance to circle back to it yet</p>",
        "id": 187738747,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581210753
    },
    {
        "content": "<p>lol had a bit of an \"opposite day\" moment, if all the inlined scopes were <code>#[track_caller]</code>, I was using the MIR Call span. but that's innermost, like, in the definition of <code>Location::caller</code>, and I have to find the outermost inlined callsite instead</p>",
        "id": 187739567,
        "sender_full_name": "eddyb",
        "timestamp": 1581212581
    },
    {
        "content": "<p>huh, <code>const-caller-location.rs</code> will force me to implement the same loop for miri, this is a pleasant surprise</p>",
        "id": 187739620,
        "sender_full_name": "eddyb",
        "timestamp": 1581212700
    },
    {
        "content": "<p>A full bootstrap completes successfully and only the \"expected\" ui tests fail</p>",
        "id": 187740426,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214358
    },
    {
        "content": "<p>you mean the track_caller stuff?</p>",
        "id": 187740433,
        "sender_full_name": "eddyb",
        "timestamp": 1581214384
    },
    {
        "content": "<p>The latest changes in <a href=\"https://github.com/rust-lang/rust/issues/68965\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68965\">#68965</a></p>",
        "id": 187740444,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214436
    },
    {
        "content": "<p>well they ain't gonna fail now :P</p>",
        "id": 187740493,
        "sender_full_name": "eddyb",
        "timestamp": 1581214459
    },
    {
        "content": "<p>oh sorry</p>",
        "id": 187740495,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214463
    },
    {
        "content": "<p>just pushed codegen+miri support for inlined #[track_caller]</p>",
        "id": 187740498,
        "sender_full_name": "eddyb",
        "timestamp": 1581214480
    },
    {
        "content": "<p>There's a small number of ui tests that fail even on <code>master</code> if you enable the inliner pass</p>",
        "id": 187740501,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214497
    },
    {
        "content": "<p>aaah I see</p>",
        "id": 187740506,
        "sender_full_name": "eddyb",
        "timestamp": 1581214505
    },
    {
        "content": "<p>OOOOH so that's what you do. I feel dumb now. okay that makes this easier to test heh</p>",
        "id": 187740516,
        "sender_full_name": "eddyb",
        "timestamp": 1581214531
    },
    {
        "content": "<p>Which is just to say, your PR looks good to me</p>",
        "id": 187740521,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214543
    },
    {
        "content": "<p>are they like, backtraces? because that means debuginfo is next on the menu :P</p>",
        "id": 187740522,
        "sender_full_name": "eddyb",
        "timestamp": 1581214554
    },
    {
        "content": "<p>Lol, yeah it's literally just:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/librustc_mir/transform/inline.rs b/src/librustc_mir/transform/inline.rs</span>\n<span class=\"gh\">index 1a057500dae..26da57e41f1 100644</span>\n<span class=\"gd\">--- a/src/librustc_mir/transform/inline.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/transform/inline.rs</span>\n<span class=\"gu\">@@ -37,7 +37,7 @@ struct CallSite&lt;&#39;tcx&gt; {</span>\n\n impl&lt;&#39;tcx&gt; MirPass&lt;&#39;tcx&gt; for Inline {\n     fn run_pass(&amp;self, tcx: TyCtxt&lt;&#39;tcx&gt;, source: MirSource&lt;&#39;tcx&gt;, body: &amp;mut BodyAndCache&lt;&#39;tcx&gt;) {\n<span class=\"gd\">-        if tcx.sess.opts.debugging_opts.mir_opt_level &gt;= 2 {</span>\n<span class=\"gi\">+        if tcx.sess.opts.debugging_opts.mir_opt_level &gt;= 1 {</span>\n             Inliner { tcx, source }.run_pass(body);\n         }\n     }\n</pre></div>",
        "id": 187740564,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214575
    },
    {
        "content": "<p>I know at least one of them is</p>",
        "id": 187740579,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214594
    },
    {
        "content": "<p>I can play with that while the try build/perf run is going</p>",
        "id": 187740640,
        "sender_full_name": "eddyb",
        "timestamp": 1581214800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n    [ui] ui/async-await/async-closure.rs\n    [ui] ui/backtrace-debuginfo.rs\n    [ui] ui/issues/issue-22638.rs\n    [ui] ui/type_length_limit.rs\n\ntest result: FAILED. 9565 passed; 4 failed; 50 ignored; 0 measured; 0 filtered out\n</pre></div>",
        "id": 187740689,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214817
    },
    {
        "content": "<p>ugh the \"type length\" limit is such a silly thing</p>",
        "id": 187740701,
        "sender_full_name": "eddyb",
        "timestamp": 1581214842
    },
    {
        "content": "<p>I don't even know if it protects us from anything real anymore</p>",
        "id": 187740703,
        "sender_full_name": "eddyb",
        "timestamp": 1581214853
    },
    {
        "content": "<p>It looks like it's complaining because the test is passing now?</p>",
        "id": 187740704,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214860
    },
    {
        "content": "<p>lmao</p>",
        "id": 187740707,
        "sender_full_name": "eddyb",
        "timestamp": 1581214869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>---- [ui] ui/type_length_limit.rs stdout ----\n\nerror: ui test compiled successfully!\nstatus: exit code: 0\ncommand: &quot;/home/wesley/code/rust/rust3/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;/home/wesley/code/rust/rust3/src/test/ui/type_length_limit.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-Zdeduplicate-diagnostics=no&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;--out-dir&quot; &quot;/home/wesley/code/rust/rust3/build/x86_64-unknown-linux-gnu/test/ui/type_length_limit&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Cdebuginfo=0&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/wesley/code/rust/rust3/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/wesley/code/rust/rust3/build/x86_64-unknown-linux-gnu/test/ui/type_length_limit/auxiliary&quot; &quot;-A&quot; &quot;unused&quot;\n</pre></div>",
        "id": 187740708,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581214873
    },
    {
        "content": "<p>needs more <code>#[inline(never)]</code></p>",
        "id": 187740710,
        "sender_full_name": "eddyb",
        "timestamp": 1581214878
    },
    {
        "content": "<p>feel free to play around with the non-debuginfo ones, I'm also seeing <code>codegen-units</code> tests also failing because of too much inlining :P</p>",
        "id": 187740760,
        "sender_full_name": "eddyb",
        "timestamp": 1581214975
    },
    {
        "content": "<p>Could be yeah. I haven't looked at the rest of the test suite yet</p>",
        "id": 187740767,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581215013
    },
    {
        "content": "<p>I mean, if it's not a debuginfo/backtrace test, it likely wants some <code>#[inline(never)]</code></p>",
        "id": 187740810,
        "sender_full_name": "eddyb",
        "timestamp": 1581215045
    },
    {
        "content": "<p>Is <code>type_length_limit</code> enforced at codegen time or something?</p>",
        "id": 187740858,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581215165
    },
    {
        "content": "<p>sort of. it's a silly thing</p>",
        "id": 187740861,
        "sender_full_name": "eddyb",
        "timestamp": 1581215183
    },
    {
        "content": "<p>we should just remove it</p>",
        "id": 187740864,
        "sender_full_name": "eddyb",
        "timestamp": 1581215197
    },
    {
        "content": "<p>I think it made more sense before we stopped giving LLVM things names by default</p>",
        "id": 187740871,
        "sender_full_name": "eddyb",
        "timestamp": 1581215225
    },
    {
        "content": "<p>there are a bunch of issues around it too, it's not DAG-like enough and so has false positives</p>",
        "id": 187740875,
        "sender_full_name": "eddyb",
        "timestamp": 1581215275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> love to write a loop and worry about it being a measurable slowdown and be right</p>",
        "id": 187755073,
        "sender_full_name": "eddyb",
        "timestamp": 1581246467
    },
    {
        "content": "<p>that took me far too long, I guess this is what I get for tiring myself out yesterday</p>",
        "id": 187767828,
        "sender_full_name": "eddyb",
        "timestamp": 1581272538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> okay I realized too late, but to avoid things getting too ugly and confusing, I'll have to move some code from cg_llvm to cg_ssa. I'll have to finish this tomorrow, and I'll try to keep the diff small</p>",
        "id": 187782596,
        "sender_full_name": "eddyb",
        "timestamp": 1581298031
    },
    {
        "content": "<p>overall I'm pretty confident I can pull it off, it's just a matter of passing all the right data around</p>",
        "id": 187782598,
        "sender_full_name": "eddyb",
        "timestamp": 1581298049
    },
    {
        "content": "<p>(this is for inlining debuginfo)</p>",
        "id": 187782604,
        "sender_full_name": "eddyb",
        "timestamp": 1581298067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> split the <code>Instance::resolve</code> fix into <a href=\"https://github.com/rust-lang/rust/pull/69036\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69036\">https://github.com/rust-lang/rust/pull/69036</a></p>",
        "id": 187841390,
        "sender_full_name": "eddyb",
        "timestamp": 1581358327
    },
    {
        "content": "<p>I'll review tonight after I can play with it a bit</p>",
        "id": 187841595,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581358489
    },
    {
        "content": "<p>frankly idk who should review, but it's basically being conservative, and codegen can't hit that case today so I don't think it cause any issues even if it's stricter than it needs to be</p>",
        "id": 187841729,
        "sender_full_name": "eddyb",
        "timestamp": 1581358575
    },
    {
        "content": "<p>We can get somebody else to review as well, that's fine :)</p>",
        "id": 187842360,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581358992
    },
    {
        "content": "<p>I guess what I'm worried about is <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> finding out about this after the fact or something, and having objections</p>",
        "id": 187842784,
        "sender_full_name": "eddyb",
        "timestamp": 1581359283
    },
    {
        "content": "<p>We could hold off merging until after the compiler team triage meeting. Nominating or bringing it up as an announcement would at least give <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and others a heads up that they might want to take a look.</p>",
        "id": 187847976,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581361891
    },
    {
        "content": "<p>feel free to do it <em>shrug</em></p>",
        "id": 187848005,
        "sender_full_name": "eddyb",
        "timestamp": 1581361907
    },
    {
        "content": "<p>hmm I don't think I need to move anything, just expose <code>DILocation</code> properly</p>",
        "id": 187866125,
        "sender_full_name": "eddyb",
        "timestamp": 1581374072
    },
    {
        "content": "<p>okay I did find a reason but it's not really necessary I don't think?</p>",
        "id": 187867200,
        "sender_full_name": "eddyb",
        "timestamp": 1581374991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> first test run with the inliner enabled and debuginfo support, I'm hyped :D</p>",
        "id": 187871463,
        "sender_full_name": "eddyb",
        "timestamp": 1581379277
    },
    {
        "content": "<p>it was pretty easy once all the pieces were in place, but reducing the refactors needed broke my brain yesterday</p>",
        "id": 187871470,
        "sender_full_name": "eddyb",
        "timestamp": 1581379304
    },
    {
        "content": "<p>Woohoo! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 187871515,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379337
    },
    {
        "content": "<p>Here's hoping for lots of green on perf.rlo</p>",
        "id": 187871546,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> backtrace test passed!!!</p>",
        "id": 187871673,
        "sender_full_name": "eddyb",
        "timestamp": 1581379561
    },
    {
        "content": "<p>all the other mostly unrelated nonsense is still there ofc, I think I'll let you handle it and try to go back to whatever I was doing lol</p>",
        "id": 187871725,
        "sender_full_name": "eddyb",
        "timestamp": 1581379584
    },
    {
        "content": "<p>Haha</p>",
        "id": 187871732,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379594
    },
    {
        "content": "<p>Oh, is there a way to see what async closures desugar to?</p>",
        "id": 187871755,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379619
    },
    {
        "content": "<p>I have a few local FIXMEs for speeding up the inliner, I guess I can do them tomorrow but now I just want to go home and sleep</p>",
        "id": 187871760,
        "sender_full_name": "eddyb",
        "timestamp": 1581379625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> --unpretty=hir, maybe?</p>",
        "id": 187871774,
        "sender_full_name": "eddyb",
        "timestamp": 1581379646
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 187871781,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379652
    },
    {
        "content": "<p>if it still even exists anymore</p>",
        "id": 187871786,
        "sender_full_name": "eddyb",
        "timestamp": 1581379656
    },
    {
        "content": "<p>Go sleep :)</p>",
        "id": 187871788,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379658
    },
    {
        "content": "<p>(the FIXMEs I have are about the <code>BasicBlock</code>, <code>SourceScope</code> and <code>Local</code> mappings - the latter  two use an <code>IndexVec&lt;T, T&gt;</code> but it should really be a single e.g. <code>first_inlined_local: Local</code>,  perhaps <code>inlined_locals: RangeFrom&lt;Local&gt;</code> for semantic clarity, and then mapping is just addition)</p>",
        "id": 187871905,
        "sender_full_name": "eddyb",
        "timestamp": 1581379789
    },
    {
        "content": "<blockquote>\n<p>and then mapping is just addition</p>\n</blockquote>\n<p>Oh excellent! That's awesome</p>",
        "id": 187871986,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379851
    },
    {
        "content": "<p>we already do it for blocks :P</p>",
        "id": 187872005,
        "sender_full_name": "eddyb",
        "timestamp": 1581379865
    },
    {
        "content": "<p>just very haphazardly</p>",
        "id": 187872011,
        "sender_full_name": "eddyb",
        "timestamp": 1581379871
    },
    {
        "content": "<p>Yeah</p>",
        "id": 187872056,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581379914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> pushed, knock yourself out :D</p>",
        "id": 187872798,
        "sender_full_name": "eddyb",
        "timestamp": 1581380668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you happen to know if there is a way to compact DWARF units together, kind of like an LTO thing, but cheaper because it's DWARF-only?</p>",
        "id": 188004473,
        "sender_full_name": "eddyb",
        "timestamp": 1581509860
    },
    {
        "content": "<p>like maybe some tool or something</p>",
        "id": 188004476,
        "sender_full_name": "eddyb",
        "timestamp": 1581509871
    },
    {
        "content": "<p>I don't know who to ask lol, this debuginfo journey led me to <a href=\"https://github.com/rust-lang/rust/pull/69080\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69080\">https://github.com/rust-lang/rust/pull/69080</a> and it feels like there's still a lot more to cut down from it</p>",
        "id": 188004531,
        "sender_full_name": "eddyb",
        "timestamp": 1581509900
    },
    {
        "content": "<p>You may want to read section 3.1 of the DWARF5 spec. It describes <code>DW_TAG_partial_unit</code> and <code>DW_TAG_type_unit</code> which are as I understad it are used to share debuginfo between multiple compilation units.</p>",
        "id": 188006164,
        "sender_full_name": "bjorn3",
        "timestamp": 1581511358
    },
    {
        "content": "<p>They are introduced in DWARF5, with a similar thing (.debug_types) introduced in DWARF4 and removed again in DWARF5.</p>",
        "id": 188006464,
        "sender_full_name": "bjorn3",
        "timestamp": 1581511610
    },
    {
        "content": "<p>we generate .debug_types heh</p>",
        "id": 188006724,
        "sender_full_name": "eddyb",
        "timestamp": 1581511864
    },
    {
        "content": "<p>I thought we targeted DWARF3 for MacOS.</p>",
        "id": 188006970,
        "sender_full_name": "bjorn3",
        "timestamp": 1581512102
    },
    {
        "content": "<p>I mean, I'm not on macOS, but I did see that in the source code last night by happenstance and it's gated on the target so it only affects macOS builds</p>",
        "id": 188006998,
        "sender_full_name": "eddyb",
        "timestamp": 1581512158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> so the problem IMO is that there's no step where debuginfo from different codegen units is combined together in any way, so even if \"partial unit\" exists as a concept, there's nothing creating it. am I confused here? all I see in the <code>llvm-dwarfdump</code> output for <code>librustc_driver-*.so</code> is <del>a gazillion</del> 5267 instances of <code>DW_TAG_compile_unit</code></p>",
        "id": 188007169,
        "sender_full_name": "eddyb",
        "timestamp": 1581512318
    },
    {
        "content": "<p>arguably a smart enough linker could take those 5267 instances of <code>DW_TAG_compile_unit</code> and make a single <code>DW_TAG_compile_unit</code>, right?</p>",
        "id": 188007213,
        "sender_full_name": "eddyb",
        "timestamp": 1581512373
    },
    {
        "content": "<p>I think the purpose of partial units is that you emit common types once, and then reference them from compilation units; avoiding duplicates at the codegen level, instead of linking level.</p>",
        "id": 188007304,
        "sender_full_name": "bjorn3",
        "timestamp": 1581512420
    },
    {
        "content": "<blockquote>\n<p>arguably a smart enough linker could take those 5267 instances of <code>DW_TAG_compile_unit</code> and make a single <code>DW_TAG_compile_unit</code>, right?</p>\n</blockquote>\n<p>On non macOS systems the linker doesn't know anything about debuginfo. DWARF is made to have concatable sections for this reason.</p>",
        "id": 188007364,
        "sender_full_name": "bjorn3",
        "timestamp": 1581512486
    },
    {
        "content": "<p>ah but in this case I got rid of the types, so the only duplication is from things like function names, I think?</p>",
        "id": 188007599,
        "sender_full_name": "eddyb",
        "timestamp": 1581512678
    },
    {
        "content": "<p>and file names</p>",
        "id": 188007604,
        "sender_full_name": "eddyb",
        "timestamp": 1581512684
    },
    {
        "content": "<blockquote>\n<p>On non macOS systems the linker doesn't know anything about debuginfo.</p>\n</blockquote>\n<p>right, I mean a hypothetical linker. or some other tool</p>",
        "id": 188007639,
        "sender_full_name": "eddyb",
        "timestamp": 1581512719
    },
    {
        "content": "<blockquote>\n<p>ah but in this case I got rid of the types, so the only duplication is from things like function names, I think?</p>\n</blockquote>\n<p>I think so, strings and <code>DW_TAG_subprocedure</code> and lineinfo for functions that are instantiated multiple times are duplicated. Though in case of <code>DW_TAG_subprocedure</code> and lineinfo the exact contents will differ, as they refer to a different instantiation of the function. I don't think any otber things are duplicated.</p>",
        "id": 188009865,
        "sender_full_name": "bjorn3",
        "timestamp": 1581514537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> came back to this PR and what the hell <a href=\"https://github.com/rust-lang/rust/pull/68965#issuecomment-601340346\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68965#issuecomment-601340346\">https://github.com/rust-lang/rust/pull/68965#issuecomment-601340346</a></p>",
        "id": 191155275,
        "sender_full_name": "eddyb",
        "timestamp": 1584642189
    },
    {
        "content": "<p>wut???</p>",
        "id": 191155525,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642293
    },
    {
        "content": "<p>I'm dying to know</p>",
        "id": 191155831,
        "sender_full_name": "eddyb",
        "timestamp": 1584642430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"https://github.com/rust-lang/rust/issues/69060\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69060\">#69060</a> needs fixing</p>",
        "id": 191155884,
        "sender_full_name": "eddyb",
        "timestamp": 1584642460
    },
    {
        "content": "<p>and I'm not sure how to best investigate it</p>",
        "id": 191155899,
        "sender_full_name": "eddyb",
        "timestamp": 1584642467
    },
    {
        "content": "<p>maybe you could look into the query counts and reproduce them differing between consecutive builds?</p>",
        "id": 191155982,
        "sender_full_name": "eddyb",
        "timestamp": 1584642488
    },
    {
        "content": "<p>if it doesn't depend on the compiler build it might not be as hard to reduce</p>",
        "id": 191156045,
        "sender_full_name": "eddyb",
        "timestamp": 1584642517
    },
    {
        "content": "<p>I randomly picked another recent run and <code>cranelift-codegen-debug</code> shows a slight variance there too</p>",
        "id": 191156052,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642521
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=d939f708d960161d23b964309ba68ff207fc0ead&amp;end=f509b26a7730d721ef87423a72b3fdf8724b4afa&amp;stat=instructions:u\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=d939f708d960161d23b964309ba68ff207fc0ead&amp;end=f509b26a7730d721ef87423a72b3fdf8724b4afa&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=d939f708d960161d23b964309ba68ff207fc0ead&amp;end=f509b26a7730d721ef87423a72b3fdf8724b4afa&amp;stat=instructions:u</a></p>",
        "id": 191156065,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642527
    },
    {
        "content": "<p>It's only 3 query executions there</p>",
        "id": 191156105,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642548
    },
    {
        "content": "<p>yeah we should reduce one of those crates</p>",
        "id": 191156121,
        "sender_full_name": "eddyb",
        "timestamp": 1584642558
    },
    {
        "content": "<p>timings are hard to make decisions based off properly, but query counts are discrete</p>",
        "id": 191156170,
        "sender_full_name": "eddyb",
        "timestamp": 1584642582
    },
    {
        "content": "<p>there's no way in hell they should change without the code changing to perform more queries</p>",
        "id": 191156223,
        "sender_full_name": "eddyb",
        "timestamp": 1584642602
    },
    {
        "content": "<p>Another one <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=6724d584b8e3b5fa5e06466d1e900cdd60953707&amp;base_commit=57e1da59cd0761330b4ea8d47b16340a78eeafa9&amp;benchmark=cranelift-codegen-debug&amp;run_name=clean%20incremental\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=6724d584b8e3b5fa5e06466d1e900cdd60953707&amp;base_commit=57e1da59cd0761330b4ea8d47b16340a78eeafa9&amp;benchmark=cranelift-codegen-debug&amp;run_name=clean%20incremental\">https://perf.rust-lang.org/detailed-query.html?commit=6724d584b8e3b5fa5e06466d1e900cdd60953707&amp;base_commit=57e1da59cd0761330b4ea8d47b16340a78eeafa9&amp;benchmark=cranelift-codegen-debug&amp;run_name=clean%20incremental</a></p>",
        "id": 191156316,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642614
    },
    {
        "content": "<p>or just as weird, less</p>",
        "id": 191156324,
        "sender_full_name": "eddyb",
        "timestamp": 1584642617
    },
    {
        "content": "<p>It's always those two queries</p>",
        "id": 191156330,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642619
    },
    {
        "content": "<p>do you have time to dig into this?</p>",
        "id": 191156365,
        "sender_full_name": "eddyb",
        "timestamp": 1584642634
    },
    {
        "content": "<p>Not like right this moment but I am interested</p>",
        "id": 191156406,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584642652
    },
    {
        "content": "<p>oh this is the thread I was thinking of recently. ended up investigating myself, looks like it's mostly from the commit hash in <code>rustc -vV</code></p>",
        "id": 192094861,
        "sender_full_name": "eddyb",
        "timestamp": 1585354243
    },
    {
        "content": "<p>For anyone following along, there's additional info here <a href=\"https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032\" title=\"https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032\">https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032</a></p>",
        "id": 192150692,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585445719
    }
]