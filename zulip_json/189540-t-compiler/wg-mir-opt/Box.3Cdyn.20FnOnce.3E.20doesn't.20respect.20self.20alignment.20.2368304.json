[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 193901417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586872972
    },
    {
        "content": "<p>oh heh</p>",
        "id": 193901437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586872979
    },
    {
        "content": "<p>let's just use this topic</p>",
        "id": 193901455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586872988
    },
    {
        "content": "<p>I'm just re-skimming the comments</p>",
        "id": 193901649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873050
    },
    {
        "content": "<p>so I got that the issue is because ...</p>",
        "id": 193901762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873087
    },
    {
        "content": "<p>I realize I dont' think we've 100% written out the 'new plan'</p>",
        "id": 193901777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193901762\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193901762\">said</a>:</p>\n<blockquote>\n<p>so I got that the issue is because ...</p>\n</blockquote>\n<p>yes, let's start with that</p>",
        "id": 193901813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873107
    },
    {
        "content": "<p><code>repr(align(256))</code> is not respected when <code>Box&lt;dyn FnOnce() ...&gt;</code> because that copies self to the stack using the default alignment of 16 instead of 256. This happens because in this case, self is an unsized local and alloca only support constant arguments, not dynamic ones.</p>",
        "id": 193901841,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873119
    },
    {
        "content": "<p>that's the summary I got from the issue</p>",
        "id": 193902010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873174
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 193902095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873219
    },
    {
        "content": "<p>but also, we would prefer to have a way to invoke <code>Box&lt;FnOnce&gt;</code> that doesn't copy the argument <em>at all</em></p>",
        "id": 193902152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873250
    },
    {
        "content": "<p>what can be done to alleviate that is the question, I saw you were commenting about some stuff on mir building</p>",
        "id": 193902202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193902152\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193902152\">said</a>:</p>\n<blockquote>\n<p>but also, we would prefer to have a way to invoke <code>Box&lt;FnOnce&gt;</code> that doesn't copy the argument <em>at all</em></p>\n</blockquote>\n<p>yeah, then you won't have the problem</p>",
        "id": 193902222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193902152\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193902152\">said</a>:</p>\n<blockquote>\n<p>but also, we would prefer to have a way to invoke <code>Box&lt;FnOnce&gt;</code> that doesn't copy the argument <em>at all</em></p>\n</blockquote>\n<p>if it's not copying the argument is it reusing it from the previous context?</p>",
        "id": 193902312,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873303
    },
    {
        "content": "<p>Initially, when we were contemplating 'unsized locals', the idea was <em>only</em> to support cases where no copying is required. Then we discussed extending it to support some interesting alloca use cases, but ideally with \"guaranteed optimizations\" that avoid copying if you stick to certain patterns. As far as I know, those guaranteed opts do not exist.</p>",
        "id": 193902386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873342
    },
    {
        "content": "<p>Yes, the idea would be that you are passing a pointer to the place where the unsized argument exists <em>now</em></p>",
        "id": 193902420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873355
    },
    {
        "content": "<p>Which, side note, <em>does</em> raise a question that I hadn't considered that much -- I'm not sure about the \"backend\" part of this. ie., what I was describing were changes to MIR building</p>",
        "id": 193902485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873383
    },
    {
        "content": "<p>such that instead of generating this MIR:</p>",
        "id": 193902526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873400
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">tmp0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"c1\">// tmp0: dyn FnOnce()</span>\n<span class=\"nb\">FnOnce</span>::<span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">tmp0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193902613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873422
    },
    {
        "content": "<p>you generate MIR like</p>",
        "id": 193902629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">tmp0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"c1\">// tmp0: Box&lt;dyn FnOnce()&gt;</span>\n<span class=\"nb\">FnOnce</span>::<span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tmp0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193902665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873441
    },
    {
        "content": "<p>I guess it's kind of \"on the backend\" to pass that first argument \"by reference\", in other words, we're passing a pointer <em>into the <code>Box</code></em> and not <em>to a temp on the stack</em></p>",
        "id": 193902766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873477
    },
    {
        "content": "<p>hmm unsure I got the difference, wouldn't you want to pass tmp0 and then when referring to the value always dereference insing the FnOnce?</p>",
        "id": 193902830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873505
    },
    {
        "content": "<p>This is in some sense the point -- and maybe <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can weigh in a bit here --</p>",
        "id": 193903165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873615
    },
    {
        "content": "<p>the callee should be invoked with what is essentially a \"fat pointer\" to the <code>dyn FnOnce</code></p>",
        "id": 193903224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873638
    },
    {
        "content": "<p>it doesn't have to know that whether this is found in a <code>Box</code> or what</p>",
        "id": 193903293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873648
    },
    {
        "content": "<p>you can't change the signature of <code>FnOnce::call</code></p>",
        "id": 193903378,
        "sender_full_name": "eddyb",
        "timestamp": 1586873682
    },
    {
        "content": "<p>but the ABI allows copy-less passing of unsized values (or any values, really)</p>",
        "id": 193903423,
        "sender_full_name": "eddyb",
        "timestamp": 1586873706
    },
    {
        "content": "<p>in particular the fn in question is <code>&lt;dyn FnOnce(...) as FnOnce(...)&gt;::call</code></p>",
        "id": 193903445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873719
    },
    {
        "content": "<p>ahh I see</p>",
        "id": 193903449,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873721
    },
    {
        "content": "<p>so I guess that, in the case of parameters with unsize type, we expect a reference to them to be passed in, right?</p>",
        "id": 193903507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873746
    },
    {
        "content": "<p>(and perhaps other types)</p>",
        "id": 193903520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873752
    },
    {
        "content": "<p>(since the parameter here is <code>self: dyn FnOnce(...)</code>)</p>",
        "id": 193903655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586873786
    },
    {
        "content": "<p>there is some kind of magic going on that I don't see how happens here</p>",
        "id": 193903763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873836
    },
    {
        "content": "<p>anything other than <code>Scalar</code>/<code>Vector</code>/<code>ScalarPair</code> is just passed by reference at the <em>ABI</em> level</p>",
        "id": 193903895,
        "sender_full_name": "eddyb",
        "timestamp": 1586873884
    },
    {
        "content": "<p>so <code>FnOnce</code> expects a param that is <code>self: dyn FnOnce(...)</code> but with some sort of magic we pass a reference to that instead?</p>",
        "id": 193903951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873910
    },
    {
        "content": "<p>so <code>Operand::Move(_123)</code> as a call argument will result in the argument local in the callee point to <code>_123</code> in the caller's stack frame</p>",
        "id": 193903961,
        "sender_full_name": "eddyb",
        "timestamp": 1586873912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193903895\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193903895\">said</a>:</p>\n<blockquote>\n<p>anything other than <code>Scalar</code>/<code>Vector</code>/<code>ScalarPair</code> is just passed by reference at the <em>ABI</em> level</p>\n</blockquote>\n<p>ahh ok :), I guess that's the magic I wasn't seeing :)</p>",
        "id": 193904034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873943
    },
    {
        "content": "<p><code>Operand::Move(*some_box)</code> will result in the argument local in the callee  point to the heap</p>",
        "id": 193904044,
        "sender_full_name": "eddyb",
        "timestamp": 1586873946
    },
    {
        "content": "<p>ok, makes sense</p>",
        "id": 193904127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586873979
    },
    {
        "content": "<p>(again, assuming it's not a scalar/vector/scalar-pair - which can be passed \"by value\", in registers or on the stack)</p>",
        "id": 193904128,
        "sender_full_name": "eddyb",
        "timestamp": 1586873980
    },
    {
        "content": "<p>yeah, so what's the code doing right now?, given what you're saying right now I guess is a scalar/vector/scalar-pair?</p>",
        "id": 193904230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874009
    },
    {
        "content": "<p><code>dyn Trait</code> is not scalar/vector/scalar-pair :P</p>",
        "id": 193904308,
        "sender_full_name": "eddyb",
        "timestamp": 1586874034
    },
    {
        "content": "<p>since we don't know what the type is</p>",
        "id": 193904319,
        "sender_full_name": "eddyb",
        "timestamp": 1586874039
    },
    {
        "content": "<p>yeah but what I was asking is how is then behaving like that according to what you're saying?</p>",
        "id": 193904364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874056
    },
    {
        "content": "<p>how is <em>what</em> behaving?</p>",
        "id": 193904411,
        "sender_full_name": "eddyb",
        "timestamp": 1586874069
    },
    {
        "content": "<p>and in what way?</p>",
        "id": 193904486,
        "sender_full_name": "eddyb",
        "timestamp": 1586874094
    },
    {
        "content": "<p>so maybe my interpretation of what you're saying is wrong ...</p>",
        "id": 193904512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874102
    },
    {
        "content": "<p>I'm saying this is what the Rust ABI <em>is</em></p>",
        "id": 193904533,
        "sender_full_name": "eddyb",
        "timestamp": 1586874111
    },
    {
        "content": "<p>and has been for years</p>",
        "id": 193904537,
        "sender_full_name": "eddyb",
        "timestamp": 1586874113
    },
    {
        "content": "<p>it will not require any changes</p>",
        "id": 193904615,
        "sender_full_name": "eddyb",
        "timestamp": 1586874129
    },
    {
        "content": "<p>yeah, I'm reading you wrong probably</p>",
        "id": 193904653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874143
    },
    {
        "content": "<p>so self is being copied into the stack</p>",
        "id": 193904683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874152
    },
    {
        "content": "<p>(PS, I was distracted writing up <a href=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613472289\" title=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613472289\">this comment</a>, which tries to collect the proposal into a single write-up, versus diffs on older write-ups, but so far what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is saying matches my expectations, I think)</p>",
        "id": 193904696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> by what and when?</p>",
        "id": 193904735,
        "sender_full_name": "eddyb",
        "timestamp": 1586874166
    },
    {
        "content": "<p>in this case</p>",
        "id": 193904763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874177
    },
    {
        "content": "<p>the status quo or what we want to change it to?</p>",
        "id": 193904790,
        "sender_full_name": "eddyb",
        "timestamp": 1586874184
    },
    {
        "content": "<p>the status quo</p>",
        "id": 193904806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874191
    },
    {
        "content": "<p>the status quo copies <em>in the caller</em></p>",
        "id": 193904819,
        "sender_full_name": "eddyb",
        "timestamp": 1586874197
    },
    {
        "content": "<p>yeah</p>",
        "id": 193904832,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874203
    },
    {
        "content": "<p>before passing by reference the copied local</p>",
        "id": 193904863,
        "sender_full_name": "eddyb",
        "timestamp": 1586874213
    },
    {
        "content": "<p>in particular, in the </p>\n<div class=\"codehilite\"><pre><span></span>tmp = *x\n</pre></div>\n\n\n<p>line of the MIR</p>",
        "id": 193904874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874218
    },
    {
        "content": "<p>so I was interpreting that you were saying that only scalar/vector/scalar-pair are copied</p>",
        "id": 193904959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874243
    },
    {
        "content": "<p>that's what have confused me</p>",
        "id": 193904980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874250
    },
    {
        "content": "<p>I was talking about calls</p>",
        "id": 193904985,
        "sender_full_name": "eddyb",
        "timestamp": 1586874252
    },
    {
        "content": "<p><code>=</code> always copies</p>",
        "id": 193904995,
        "sender_full_name": "eddyb",
        "timestamp": 1586874256
    },
    {
        "content": "<p><code>fn_once(move tmp)</code> doesn't do any more copies</p>",
        "id": 193905061,
        "sender_full_name": "eddyb",
        "timestamp": 1586874276
    },
    {
        "content": "<p>(at least I hope it doesn't, lol)</p>",
        "id": 193905078,
        "sender_full_name": "eddyb",
        "timestamp": 1586874283
    },
    {
        "content": "<p>it's the <code>=</code> we want to get rid of</p>",
        "id": 193905089,
        "sender_full_name": "eddyb",
        "timestamp": 1586874291
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 193905122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874306
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, so the goal is \"clear-ish\" now?</p>",
        "id": 193905314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874387
    },
    {
        "content": "<p>was reading the comment</p>",
        "id": 193905348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874405
    },
    {
        "content": "<p>also, does what I wrote in <a href=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613472289\" title=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613472289\">this comment</a> make sense to you?</p>",
        "id": 193905349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874406
    },
    {
        "content": "<p>I think so</p>",
        "id": 193905351,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874408
    },
    {
        "content": "<p>let me finish reading it</p>",
        "id": 193905361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874414
    },
    {
        "content": "<p>yeah makes sense, in any case I will ask some questions</p>",
        "id": 193905439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874448
    },
    {
        "content": "<p>thanks for clarifying it</p>",
        "id": 193905482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874470
    },
    {
        "content": "<p>ok, so I was going to drop a few pointers into where I think we would modify the code</p>",
        "id": 193905500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874477
    },
    {
        "content": "<p>though you may be more familiar with it than me at this point!</p>",
        "id": 193905552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874485
    },
    {
        "content": "<p>feel free to add more information if you want, I guess I'd need to investigate a couple of things to be 100% clear about how to do certain checks</p>",
        "id": 193905729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586874563
    },
    {
        "content": "<p>well so <a href=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/into.rs#L169\" title=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/into.rs#L169\">this is the main place that calls are lowered</a></p>",
        "id": 193905807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874592
    },
    {
        "content": "<p>in particular, this loop is what <a href=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/into.rs#L208-L211\" title=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/into.rs#L208-L211\">generates the temporaries for each argument</a></p>",
        "id": 193905915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874623
    },
    {
        "content": "<p>it's not going to be <em>trivial</em> to modify this and have the code stay \"beautiful\"</p>",
        "id": 193906109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874699
    },
    {
        "content": "<p>well I guess we need some operation simiar to <code>as_local_operand</code>, like <code>as_call_temporary</code></p>",
        "id": 193906182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874723
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/as_operand.rs#L16\" title=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/as_operand.rs#L16\"><code>as_local_operand</code></a> is defined there</p>",
        "id": 193906418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874821
    },
    {
        "content": "<p>and you can see that, after some intermediate calls, it winds up <a href=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/as_operand.rs#L61\" title=\"https://github.com/rust-lang/rust/blob/ba72b15666b2491415aec703a02c2364fe5e2790/src/librustc_mir_build/build/expr/as_operand.rs#L61\">checking the \"category\"</a> of the expression</p>",
        "id": 193906452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874841
    },
    {
        "content": "<p>(in particular, it distinguishes <em>places</em> from other things)</p>",
        "id": 193906515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874852
    },
    {
        "content": "<p>well, I guess we would want to look for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_build/hair/enum.ExprKind.html#variant.Deref\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_build/hair/enum.ExprKind.html#variant.Deref\"><code>ExprKind::Deref</code></a></p>",
        "id": 193906781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586874956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I was wondering a couple of things about this</p>",
        "id": 193960819,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586900735
    },
    {
        "content": "<p>first how do I check if this is not <code>Move</code></p>",
        "id": 193960856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586900756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> mentioned that maybe this should be done in expr itself, checking that expr is <code>Copy</code> and <code>Sized</code></p>",
        "id": 193960951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586900811
    },
    {
        "content": "<p>and also if it's <code>Deref</code></p>",
        "id": 193960957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586900817
    },
    {
        "content": "<p>that it <em>doesn't</em> implement <code>Copy</code>, so there's a move</p>",
        "id": 193961001,
        "sender_full_name": "eddyb",
        "timestamp": 1586900853
    },
    {
        "content": "<p>but I think <code>Sized</code> is enough since, for now, <code>!Sized</code> implies <code>!Copy</code> (kind of sad but w/e)</p>",
        "id": 193961016,
        "sender_full_name": "eddyb",
        "timestamp": 1586900874
    },
    {
        "content": "<p>as for <code>Deref</code>, it wouldn't be the trait, but rather a syntactical <code>*</code> operator in the <code>Expr</code></p>",
        "id": 193961067,
        "sender_full_name": "eddyb",
        "timestamp": 1586900898
    },
    {
        "content": "<p>yeah, <code>Deref</code> checking is just checking if <code>expr.kind</code> is <code>ExprKind::Deref</code></p>",
        "id": 193961140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586900972
    },
    {
        "content": "<p>saw also that <a href=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613691940\" title=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613691940\">@**RalfJ** commented</a></p>",
        "id": 193961174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586901001
    },
    {
        "content": "<p>in fact, if you look for how <code>Operand::Move</code> vs <code>Operand::Copy</code> is decided, you should find something like <code>is_copy_modulo_regions</code></p>",
        "id": 193961214,
        "sender_full_name": "eddyb",
        "timestamp": 1586901007
    },
    {
        "content": "<p>ahh nice, gonna check that out</p>",
        "id": 193961233,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586901027
    },
    {
        "content": "<p>will do this tomorrow, it's late here already, but thanks for the tips</p>",
        "id": 193961253,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586901048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193961174\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/193961174\">said</a>:</p>\n<blockquote>\n<p>saw also that <a href=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613691940\" title=\"https://github.com/rust-lang/rust/issues/68304#issuecomment-613691940\">@**RalfJ** commented</a></p>\n</blockquote>\n<p>sorry, I was just confused</p>",
        "id": 194006927,
        "sender_full_name": "RalfJ",
        "timestamp": 1586944304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/71170\" title=\"https://github.com/rust-lang/rust/issues/71170\">#71170</a>, although it doesn't work, just opened as a WIP</p>",
        "id": 194050986,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586965613
    },
    {
        "content": "<p>feedback is welcome though</p>",
        "id": 194051084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586965664
    },
    {
        "content": "<p>figured that I forgot to add the <code>*tmp</code> part</p>",
        "id": 194055523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586967488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> did this and didn't work</p>",
        "id": 194060284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586969655
    },
    {
        "content": "<p>have pushed all the stuff I have, there's code duplication that I was planning to remove but didn't bother that much to do it because it's not working</p>",
        "id": 194060340,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586969687
    },
    {
        "content": "<p>basically <code>expr_as_call_temporary</code> is the same as <code>expr_as_operand</code> but it just adds the <code>Deref</code> bit</p>",
        "id": 194060433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1586969738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `f2` 0 mir_map\n\n| User Type Annotations\n| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(5:87 ~ alloc[c245]::boxed[0]::{{impl}}[0]::new[0]), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(5:85 ~ alloc[c245]::boxed[0]::{{impl}}[0]), self_ty: std::boxed::Box&lt;^1&gt; }) }) } at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:13\n|\nfn f2(_1: u8) -&gt; std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; *const A&gt; {\n    debug v =&gt; _1;                       // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:16:7: 16:8\n    let mut _0: std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; *const A&gt;; // return place in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:16:17: 16:46\n    let mut _2: std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; *const A&gt;; // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n    let _3: A;                           // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:9: 17:10\n    let mut _4: u8;                      // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:17: 17:18\n    let mut _5: std::boxed::Box&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt;; // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n    let mut _6: [closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]; // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27\n    scope 1 {\n        debug a =&gt; _3;                   // in scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:17:9: 17:10\n    }\n\n    bb0: {\n        StorageLive(_2);                 // bb0[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n        StorageLive(_3);                 // bb0[1]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:9: 17:10\n        StorageLive(_4);                 // bb0[2]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:17: 17:18\n        _4 = _1;                         // bb0[3]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:17: 17:18\n        _3 = A { v: move _4 };           // bb0[4]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:13: 17:20\n        StorageDead(_4);                 // bb0[5]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:19: 17:20\n        FakeRead(ForLet, _3);            // bb0[6]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:9: 17:10\n        StorageLive(_5);                 // bb0[7]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n        StorageLive(_6);                 // bb0[8]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27\n        _6 = [closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27] { a: move _3 }; // bb0[9]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27\n                                         // closure\n                                         // + def_id: DefId(0:8 ~ dyn_fn_alignment[317d]::f2[0]::{{closure}}[0])\n                                         // + substs: [\n                                         //     i32,\n                                         //     extern &quot;rust-call&quot; fn(()) -&gt; *const A,\n                                         //     (A,),\n                                         // ]\n        _5 = const std::boxed::Box::&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt;::new(move _6) -&gt; [return: bb2, unwind: bb1]; // bb0[10]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n                                         // ty::Const\n                                         // + ty: fn([closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]) -&gt; std::boxed::Box&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt; {std::boxed::Box::&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt;::new}\n                                         // + val: Value(Scalar(&lt;ZST&gt;))\n                                         // mir::Constant\n                                         // + span: src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:13\n                                         // + user_ty: UserType(0)\n                                         // + literal: Const { ty: fn([closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]) -&gt; std::boxed::Box&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt; {std::boxed::Box::&lt;[closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]&gt;::new}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:16:1: 19:2\n    }\n\n    bb2: {\n        _2 = move _5 as std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; *const A&gt; (Pointer(Unsize)); // bb2[0]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n        drop(_5) -&gt; [return: bb4, unwind: bb1]; // bb2[1]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:28\n    }\n\n    bb3 (cleanup): {\n        drop(_5) -&gt; bb1;                 // bb3[0]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:28\n    }\n\n    bb4: {\n        StorageDead(_6);                 // bb4[0]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:28\n        StorageDead(_5);                 // bb4[1]: scope 1 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:28\n        StorageDead(_3);                 // bb4[2]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:1: 19:2\n        _0 = move _2 as std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; *const A&gt; (Pointer(Unsize)); // bb4[3]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:5: 18:28\n        drop(_2) -&gt; [return: bb6, unwind: bb1]; // bb4[4]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:1: 19:2\n    }\n\n    bb5 (cleanup): {\n        drop(_2) -&gt; bb1;                 // bb5[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:1: 19:2\n    }\n\n    bb6: {\n        StorageDead(_2);                 // bb6[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:1: 19:2\n        goto -&gt; bb7;                     // bb6[1]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:2: 19:2\n    }\n\n    bb7: {\n        return;                          // bb7[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:19:2: 19:2\n    }\n}\n</pre></div>",
        "id": 194354410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587064783
    },
    {
        "content": "<p>and ...</p>",
        "id": 194356075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587065635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `f2::{{closure}}#0` 0 mir_map\n\nfn f2::{{closure}}#0(_1: [closure@src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27 a:A]) -&gt; *const A {\n    debug a =&gt; (_1.0: A);                // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:17:9: 17:10\n    let mut _0: *const A;                // return place in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:22: 18:22\n    let mut _2: &amp;A;                      // in scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:22: 18:23\n\n    bb0: {\n        StorageLive(_2);                 // bb0[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:22: 18:23\n        _2 = &amp;(_1.0: A);                 // bb0[1]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:22: 18:23\n        _0 = const A::f(move _2) -&gt; [return: bb2, unwind: bb1]; // bb0[2]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:22: 18:27\n                                         // ty::Const\n                                         // + ty: for&lt;&#39;r&gt; fn(&amp;&#39;r A) -&gt; *const A {A::f}\n                                         // + val: Value(Scalar(&lt;ZST&gt;))\n                                         // mir::Constant\n                                         // + span: src/test/ui/fn/dyn-fn-alignment.rs:18:24: 18:25\n                                         // + literal: Const { ty: for&lt;&#39;r&gt; fn(&amp;&#39;r A) -&gt; *const A {A::f}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:14: 18:27\n    }\n\n    bb2: {\n        StorageDead(_2);                 // bb2[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:26: 18:27\n        goto -&gt; bb3;                     // bb2[1]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:27\n    }\n\n    bb3: {\n        return;                          // bb3[0]: scope 0 at src/test/ui/fn/dyn-fn-alignment.rs:18:27: 18:27\n    }\n}\n</pre></div>",
        "id": 194356127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587065644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 194356158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587065661
    },
    {
        "content": "<p>to be honest is not clear to me what's going on</p>",
        "id": 194357851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587066489
    },
    {
        "content": "<p>well anyway nothing is being dereferenced</p>",
        "id": 194359780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587067447
    },
    {
        "content": "<p>so ...</p>",
        "id": 194359793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587067452
    },
    {
        "content": "<p><code>expr.kind</code> is always <code>Scope</code> in my case, and once is <code>Tuple</code> for the entire executing of the test case</p>",
        "id": 194360440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587067733
    },
    {
        "content": "<p>is never <code>Deref</code></p>",
        "id": 194360480,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587067748
    },
    {
        "content": "<p>the only <code>Deref</code> should be in <code>libcore</code></p>",
        "id": 194362421,
        "sender_full_name": "eddyb",
        "timestamp": 1587068654
    },
    {
        "content": "<p>err, <code>liballoc</code></p>",
        "id": 194362432,
        "sender_full_name": "eddyb",
        "timestamp": 1587068660
    },
    {
        "content": "<p>the <code>impl&lt;A&gt; FnOnce&lt;A&gt; for Box&lt;dyn FnOnce&lt;A&gt;&gt;</code></p>",
        "id": 194362464,
        "sender_full_name": "eddyb",
        "timestamp": 1587068682
    },
    {
        "content": "<p>ohh</p>",
        "id": 194363046,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587068947
    },
    {
        "content": "<p>but still should be printed by debug</p>",
        "id": 194363066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587068954
    },
    {
        "content": "<p>when compiling liballoc</p>",
        "id": 194363123,
        "sender_full_name": "eddyb",
        "timestamp": 1587068973
    },
    {
        "content": "<p>not any testcases</p>",
        "id": 194363145,
        "sender_full_name": "eddyb",
        "timestamp": 1587068982
    },
    {
        "content": "<p>right</p>",
        "id": 194363177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587068995
    },
    {
        "content": "<p>so the important bit should be in <code>main</code> <a href=\"https://gist.github.com/spastorino/36af6c8d7a31fc325ad8fe591202f9c7\" title=\"https://gist.github.com/spastorino/36af6c8d7a31fc325ad8fe591202f9c7\">https://gist.github.com/spastorino/36af6c8d7a31fc325ad8fe591202f9c7</a></p>",
        "id": 194363553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069133
    },
    {
        "content": "<p>wait, are you testing with the example from the issue?</p>",
        "id": 194363611,
        "sender_full_name": "eddyb",
        "timestamp": 1587069163
    },
    {
        "content": "<p>number 1 rule of staring at MIR/LLVM IR: do not use formatting :P</p>",
        "id": 194363657,
        "sender_full_name": "eddyb",
        "timestamp": 1587069184
    },
    {
        "content": "<p>too much noise</p>",
        "id": 194363666,
        "sender_full_name": "eddyb",
        "timestamp": 1587069189
    },
    {
        "content": "<p>but also, I don't think you'll find the deref in there</p>",
        "id": 194363708,
        "sender_full_name": "eddyb",
        "timestamp": 1587069210
    },
    {
        "content": "<p>it's in <code>liballoc</code></p>",
        "id": 194363717,
        "sender_full_name": "eddyb",
        "timestamp": 1587069215
    },
    {
        "content": "<p>stable code can't do it, it's gated by <code>#![feature(unsized_locals)]</code></p>",
        "id": 194363751,
        "sender_full_name": "eddyb",
        "timestamp": 1587069233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363611\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363611\">said</a>:</p>\n<blockquote>\n<p>wait, are you testing with the example from the issue?</p>\n</blockquote>\n<p>yes</p>",
        "id": 194363766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363717\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363717\">said</a>:</p>\n<blockquote>\n<p>it's in <code>liballoc</code></p>\n</blockquote>\n<p>ahh got it got it, so how can I debug this?</p>",
        "id": 194363817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069252
    },
    {
        "content": "<p>find the impl and copy it</p>",
        "id": 194363833,
        "sender_full_name": "eddyb",
        "timestamp": 1587069261
    },
    {
        "content": "<p>:)</p>",
        "id": 194363844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069269
    },
    {
        "content": "<p>ok</p>",
        "id": 194363868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069281
    },
    {
        "content": "<p>or rather, take the method out and make it a free <code>fn</code></p>",
        "id": 194363904,
        "sender_full_name": "eddyb",
        "timestamp": 1587069304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363657\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194363657\">said</a>:</p>\n<blockquote>\n<p>number 1 rule of staring at MIR/LLVM IR: do not use formatting :P</p>\n</blockquote>\n<p>what do you meant?</p>",
        "id": 194363913,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069309
    },
    {
        "content": "<p>don't use <code>println!</code>, <code>dbg!</code>, <code>panic!</code> etc.</p>",
        "id": 194363936,
        "sender_full_name": "eddyb",
        "timestamp": 1587069323
    },
    {
        "content": "<p>ok ok :)</p>",
        "id": 194363947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069329
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_once</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194364359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you meant to copy this to my test file and see the mir dump of it?</p>",
        "id": 194364406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587069585
    },
    {
        "content": "<p>but not like that, since it would be orphan</p>",
        "id": 194364480,
        "sender_full_name": "eddyb",
        "timestamp": 1587069607
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dispatch_boxed</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">boxed</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>::<span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">boxed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194364600,
        "sender_full_name": "eddyb",
        "timestamp": 1587069699
    },
    {
        "content": "<p>I expect this will work</p>",
        "id": 194364611,
        "sender_full_name": "eddyb",
        "timestamp": 1587069704
    },
    {
        "content": "<p>I guess you want something like ...</p>",
        "id": 194366685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070708
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(fn_traits)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dispatch_boxed</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">boxed</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>::<span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">boxed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;optimized out&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f2</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dispatch_boxed</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194366691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> getting compilation errors but I'm not sure what was your intention exactly</p>",
        "id": 194366729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070739
    },
    {
        "content": "<p>like dispatch_boxed won't return a <code>Box&lt;dyn FnOnce&gt;</code> anymore</p>",
        "id": 194366783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070777
    },
    {
        "content": "<p>maybe we want <code>-&gt; Box&lt;F::Output&gt;</code>?</p>",
        "id": 194366954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070836
    },
    {
        "content": "<p>no, why would the return type be boxed?</p>",
        "id": 194367057,
        "sender_full_name": "eddyb",
        "timestamp": 1587070905
    },
    {
        "content": "<p>yeah doesn't make sense :)</p>",
        "id": 194367150,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587070944
    },
    {
        "content": "<p>let me fix the example</p>",
        "id": 194367180,
        "sender_full_name": "eddyb",
        "timestamp": 1587070960
    },
    {
        "content": "<p>Is this it? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(fn_traits)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unsized_locals)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">dispatch_boxed</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">boxed</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>::<span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">boxed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;optimized out&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f2</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dispatch_boxed</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194367217,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587070985
    },
    {
        "content": "<p>that looks more plausible, yes</p>",
        "id": 194367237,
        "sender_full_name": "eddyb",
        "timestamp": 1587071001
    },
    {
        "content": "<p>basically you only want to replace the call with <code>dispatch_boxed</code></p>",
        "id": 194367275,
        "sender_full_name": "eddyb",
        "timestamp": 1587071034
    },
    {
        "content": "<p>also, <code>extern \"rust-call\"</code> is unnecessary I've just realized</p>",
        "id": 194367330,
        "sender_full_name": "eddyb",
        "timestamp": 1587071044
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194367443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(fn_traits)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unsized_locals)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">dispatch_boxed</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">boxed</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>::<span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">boxed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;optimized out&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f2</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dispatch_boxed</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194367496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071154
    },
    {
        "content": "<p>which is basically what <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> have said</p>",
        "id": 194367561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071168
    },
    {
        "content": "<p>gonna check mir_dump of this</p>",
        "id": 194367683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `dispatch_boxed` 0 mir_map\n\n| User Type Annotations\n| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2105 ~ core[a8ff]::ops[0]::function[0]::FnOnce[0]::call_once[0]), UserSubsts { substs: [F, ^0], user_self_ty: None }) } at test.rs:6:5: 6:17\n|\nfn dispatch_boxed(_1: std::boxed::Box&lt;F&gt;, _2: A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {\n    debug boxed =&gt; _1;                   // in scope 0 at test.rs:5:45: 5:50\n    debug args =&gt; _2;                    // in scope 0 at test.rs:5:60: 5:64\n    let mut _0: &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output; // return place in scope 0 at test.rs:5:72: 5:81\n    let mut _3: F;                       // in scope 0 at test.rs:6:18: 6:24\n    let mut _4: A;                       // in scope 0 at test.rs:6:26: 6:30\n\n    bb0: {\n        StorageLive(_3);                 // bb0[0]: scope 0 at test.rs:6:18: 6:24\n        _3 = move (*_1);                 // bb0[1]: scope 0 at test.rs:6:18: 6:24\n        StorageLive(_4);                 // bb0[2]: scope 0 at test.rs:6:26: 6:30\n        _4 = move _2;                    // bb0[3]: scope 0 at test.rs:6:26: 6:30\n        _0 = const &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once(move _3, move _4) -&gt; [return: bb2, unwind: bb6]; // bb0[4]: scope 0 at test.rs:6:5: 6:31\n                                         // ty::Const\n                                         // + ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}\n                                         // + val: Value(Scalar(&lt;ZST&gt;))\n                                         // mir::Constant\n                                         // + span: test.rs:6:5: 6:17\n                                         // + user_ty: UserType(0)\n                                         // + literal: Const { ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at test.rs:5:1: 7:2\n    }\n\n    bb2: {\n        StorageDead(_4);                 // bb2[0]: scope 0 at test.rs:6:30: 6:31\n        StorageDead(_3);                 // bb2[1]: scope 0 at test.rs:6:30: 6:31\n        drop(_2) -&gt; [return: bb7, unwind: bb3]; // bb2[2]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb3 (cleanup): {\n        drop(_1) -&gt; bb1;                 // bb3[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb4 (cleanup): {\n        drop(_2) -&gt; bb3;                 // bb4[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb5 (cleanup): {\n        drop(_3) -&gt; bb4;                 // bb5[0]: scope 0 at test.rs:6:30: 6:31\n    }\n\n    bb6 (cleanup): {\n        drop(_4) -&gt; bb5;                 // bb6[0]: scope 0 at test.rs:6:30: 6:31\n    }\n\n    bb7: {\n        drop(_1) -&gt; [return: bb8, unwind: bb1]; // bb7[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb8: {\n        goto -&gt; bb9;                     // bb8[0]: scope 0 at test.rs:7:2: 7:2\n    }\n\n    bb9: {\n        return;                          // bb9[0]: scope 0 at test.rs:7:2: 7:2\n    }\n}\n</pre></div>",
        "id": 194368065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071480
    },
    {
        "content": "<p>yeah it's all in <code>bb0</code></p>",
        "id": 194368307,
        "sender_full_name": "eddyb",
        "timestamp": 1587071642
    },
    {
        "content": "<p>the move out of <code>*_1</code> into <code>_3</code> is what you want to be different</p>",
        "id": 194368338,
        "sender_full_name": "eddyb",
        "timestamp": 1587071656
    },
    {
        "content": "<p>yeah I ran this with debug now and I never see a <code>ExprKind::Deref</code></p>",
        "id": 194368568,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071807
    },
    {
        "content": "<p>I wonder if I'm traversing Expr in the right way</p>",
        "id": 194368591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071826
    },
    {
        "content": "<p>there's always <code>ExprKind::Scope</code></p>",
        "id": 194368609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587071835
    },
    {
        "content": "<p>oh you might need to unpack that</p>",
        "id": 194369602,
        "sender_full_name": "eddyb",
        "timestamp": 1587072377
    },
    {
        "content": "<p><code>Scope</code> is <em>everywhere</em></p>",
        "id": 194369611,
        "sender_full_name": "eddyb",
        "timestamp": 1587072384
    },
    {
        "content": "<p>(we may want a better mechanism for that, idk)</p>",
        "id": 194369627,
        "sender_full_name": "eddyb",
        "timestamp": 1587072395
    },
    {
        "content": "<p>look around for code that peeks <em>inside</em> an <code>ExprKind::Scope</code></p>",
        "id": 194369651,
        "sender_full_name": "eddyb",
        "timestamp": 1587072407
    },
    {
        "content": "<p>there should be some already</p>",
        "id": 194369657,
        "sender_full_name": "eddyb",
        "timestamp": 1587072411
    },
    {
        "content": "<p>yeah, as_operand does recursive</p>",
        "id": 194369751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072478
    },
    {
        "content": "<p>I was also trying that before with no success but now at least I can debug it :)</p>",
        "id": 194369808,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072492
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">Scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">region_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lint_level</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">source_info</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">region_scope</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">region_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">in_scope</span><span class=\"p\">(</span><span class=\"n\">region_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lint_level</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">as_operand</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194369836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072505
    },
    {
        "content": "<p>not <code>as_operand</code>, but something that <em>peeks</em></p>",
        "id": 194370108,
        "sender_full_name": "eddyb",
        "timestamp": 1587072670
    },
    {
        "content": "<p><code>as_operand</code> processes</p>",
        "id": 194370113,
        "sender_full_name": "eddyb",
        "timestamp": 1587072673
    },
    {
        "content": "<p>lemme look</p>",
        "id": 194370124,
        "sender_full_name": "eddyb",
        "timestamp": 1587072681
    },
    {
        "content": "<p>so I meant to do recursive</p>",
        "id": 194370210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072722
    },
    {
        "content": "<p>this is what I've added ...</p>",
        "id": 194370226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072727
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n            let source_info = self.source_info(expr.span);\n            let region_scope = (region_scope, source_info);\n            return self\n                .in_scope(region_scope, lint_level, |this| this.as_call_temporary(block, value));\n        }\n</pre></div>",
        "id": 194370234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072733
    },
    {
        "content": "<p>I'm not sure recursive is correct</p>",
        "id": 194370256,
        "sender_full_name": "eddyb",
        "timestamp": 1587072746
    },
    {
        "content": "<p>hmpf</p>",
        "id": 194370285,
        "sender_full_name": "eddyb",
        "timestamp": 1587072785
    },
    {
        "content": "<p>I could totally match Scope and value of kind Deref in that case</p>",
        "id": 194370294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072793
    },
    {
        "content": "<p>you might have to, I guess. I'll let <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> decide what's correct</p>",
        "id": 194370295,
        "sender_full_name": "eddyb",
        "timestamp": 1587072798
    },
    {
        "content": "<p>I can't find the peeking I was thinking of</p>",
        "id": 194370308,
        "sender_full_name": "eddyb",
        "timestamp": 1587072809
    },
    {
        "content": "<p>with recursion I get</p>",
        "id": 194370317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072815
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `dispatch_boxed` 0 mir_map\n\n| User Type Annotations\n| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2105 ~ core[a8ff]::ops[0]::function[0]::FnOnce[0]::call_once[0]), UserSubsts { substs: [F, ^0], user_self_ty: None }) } at test.rs:6:5: 6:17\n|\nfn dispatch_boxed(_1: std::boxed::Box&lt;F&gt;, _2: A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {\n    debug boxed =&gt; _1;                   // in scope 0 at test.rs:5:45: 5:50\n    debug args =&gt; _2;                    // in scope 0 at test.rs:5:60: 5:64\n    let mut _0: &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output; // return place in scope 0 at test.rs:5:72: 5:81\n    let mut _3: F;                       // in scope 0 at test.rs:6:18: 6:24\n    let mut _4: A;                       // in scope 0 at test.rs:6:26: 6:30\n\n    bb0: {\n        StorageLive(_3);                 // bb0[0]: scope 0 at test.rs:6:18: 6:24\n        _3 = move (*_1);                 // bb0[1]: scope 0 at test.rs:6:18: 6:24\n        drop(_3) -&gt; [return: bb5, unwind: bb3]; // bb0[2]: scope 0 at test.rs:6:23: 6:24\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at test.rs:5:1: 7:2\n    }\n\n    bb2 (cleanup): {\n        drop(_1) -&gt; bb1;                 // bb2[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb3 (cleanup): {\n        drop(_2) -&gt; bb2;                 // bb3[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb4 (cleanup): {\n        drop(_3) -&gt; bb3;                 // bb4[0]: scope 0 at test.rs:6:23: 6:24\n    }\n\n    bb5: {\n        StorageDead(_3);                 // bb5[0]: scope 0 at test.rs:6:23: 6:24\n        StorageLive(_4);                 // bb5[1]: scope 0 at test.rs:6:26: 6:30\n        _4 = move _2;                    // bb5[2]: scope 0 at test.rs:6:26: 6:30\n        drop(_4) -&gt; [return: bb7, unwind: bb3]; // bb5[3]: scope 0 at test.rs:6:29: 6:30\n    }\n\n    bb6 (cleanup): {\n        drop(_4) -&gt; bb3;                 // bb6[0]: scope 0 at test.rs:6:29: 6:30\n    }\n\n    bb7: {\n        StorageDead(_4);                 // bb7[0]: scope 0 at test.rs:6:29: 6:30\n        _0 = const &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once(move _3, move _4) -&gt; [return: bb8, unwind: bb3]; // bb7[1]: scope 0 at test.rs:6:5: 6:31\n                                         // ty::Const\n                                         // + ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}\n                                         // + val: Value(Scalar(&lt;ZST&gt;))\n                                         // mir::Constant\n                                         // + span: test.rs:6:5: 6:17\n                                         // + user_ty: UserType(0)\n                                         // + literal: Const { ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb8: {\n        drop(_2) -&gt; [return: bb9, unwind: bb2]; // bb8[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb9: {\n        drop(_1) -&gt; [return: bb10, unwind: bb1]; // bb9[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb10: {\n        goto -&gt; bb11;                    // bb10[0]: scope 0 at test.rs:7:2: 7:2\n    }\n\n    bb11: {\n        return;                          // bb11[0]: scope 0 at test.rs:7:2: 7:2\n    }\n}\n</pre></div>",
        "id": 194370328,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072822
    },
    {
        "content": "<p>still not ok</p>",
        "id": 194370391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587072851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ...</p>",
        "id": 194376334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587076467
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `dispatch_boxed` 0 mir_map\n\n| User Type Annotations\n| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2105 ~ core[a8ff]::ops[0]::function[0]::FnOnce[0]::call_once[0]), UserSubsts { substs: [F, ^0], user_self_ty: None }) } at test.rs:6:5: 6:17\n|\nfn dispatch_boxed(_1: std::boxed::Box&lt;F&gt;, _2: A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {\n    debug boxed =&gt; _1;                   // in scope 0 at test.rs:5:45: 5:50\n    debug args =&gt; _2;                    // in scope 0 at test.rs:5:60: 5:64\n    let mut _0: &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output; // return place in scope 0 at test.rs:5:72: 5:81\n    let mut _3: std::boxed::Box&lt;F&gt;;      // in scope 0 at test.rs:6:19: 6:24\n    let mut _4: A;                       // in scope 0 at test.rs:6:26: 6:30\n\n    bb0: {\n        StorageLive(_3);                 // bb0[0]: scope 0 at test.rs:6:19: 6:24\n        _3 = move _1;                    // bb0[1]: scope 0 at test.rs:6:19: 6:24\n        StorageLive(_4);                 // bb0[2]: scope 0 at test.rs:6:26: 6:30\n        _4 = move _2;                    // bb0[3]: scope 0 at test.rs:6:26: 6:30\n        _0 = const &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once(move (*_3), move _4) -&gt; [return: bb2, unwind: bb6]; // bb0[4]: scope 0 at test.rs:6:5: 6:31\n                                         // ty::Const\n                                         // + ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}\n                                         // + val: Value(Scalar(&lt;ZST&gt;))\n                                         // mir::Constant\n                                         // + span: test.rs:6:5: 6:17\n                                         // + user_ty: UserType(0)\n                                         // + literal: Const { ty: extern &quot;rust-call&quot; fn(F, A) -&gt; &lt;F as std::ops::FnOnce&lt;A&gt;&gt;::Output {&lt;F as std::ops::FnOnce&lt;A&gt;&gt;::call_once}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1 (cleanup): {\n        resume;                          // bb1[0]: scope 0 at test.rs:5:1: 7:2\n    }\n\n    bb2: {\n        StorageDead(_4);                 // bb2[0]: scope 0 at test.rs:6:30: 6:31\n        drop(_3) -&gt; [return: bb7, unwind: bb4]; // bb2[1]: scope 0 at test.rs:6:30: 6:31\n    }\n\n    bb3 (cleanup): {\n        drop(_1) -&gt; bb1;                 // bb3[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb4 (cleanup): {\n        drop(_2) -&gt; bb3;                 // bb4[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb5 (cleanup): {\n        drop(_3) -&gt; bb4;                 // bb5[0]: scope 0 at test.rs:6:30: 6:31\n    }\n\n    bb6 (cleanup): {\n        drop(_4) -&gt; bb5;                 // bb6[0]: scope 0 at test.rs:6:30: 6:31\n    }\n\n    bb7: {\n        StorageDead(_3);                 // bb7[0]: scope 0 at test.rs:6:30: 6:31\n        drop(_2) -&gt; [return: bb8, unwind: bb3]; // bb7[1]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb8: {\n        drop(_1) -&gt; [return: bb9, unwind: bb1]; // bb8[0]: scope 0 at test.rs:7:1: 7:2\n    }\n\n    bb9: {\n        goto -&gt; bb10;                    // bb9[0]: scope 0 at test.rs:7:2: 7:2\n    }\n\n    bb10: {\n        return;                          // bb10[0]: scope 0 at test.rs:7:2: 7:2\n    }\n}\n</pre></div>",
        "id": 194376339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587076470
    },
    {
        "content": "<p>mir looks good</p>",
        "id": 194376350,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587076473
    },
    {
        "content": "<p>test doesn't pass</p>",
        "id": 194376361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587076483
    },
    {
        "content": "<p>there might still be dynamic allocas</p>",
        "id": 194376394,
        "sender_full_name": "eddyb",
        "timestamp": 1587076509
    },
    {
        "content": "<p>from another source</p>",
        "id": 194376402,
        "sender_full_name": "eddyb",
        "timestamp": 1587076519
    },
    {
        "content": "<p>hmmm</p>",
        "id": 194376426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587076544
    },
    {
        "content": "<p>actually it works :)</p>",
        "id": 194383564,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082768
    },
    {
        "content": "<p>I was testing too fast, come back and realized about --keep-stage 1</p>",
        "id": 194383581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082790
    },
    {
        "content": "<p>anyway, other tests are failing need to check, will do tomorrow</p>",
        "id": 194383610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082802
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>2020-04-16T23:56:26.6116980Z error[E0382]: use of moved value: `y`\n2020-04-16T23:56:26.6117524Z   --&gt; /checkout/src/test/ui/unsized-locals/double-move.rs:20:22\n2020-04-16T23:56:26.6117775Z    |\n2020-04-16T23:56:26.6117967Z LL |         let y = *x;\n2020-04-16T23:56:26.6118550Z    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n2020-04-16T23:56:26.6118897Z LL |         drop_unsized(y);\n2020-04-16T23:56:26.6119577Z    |                      - value moved here\n2020-04-16T23:56:26.6119881Z LL |         drop_unsized(y); //~ERROR use of moved value\n2020-04-16T23:56:26.6120194Z    |                      ^ value used here after move\n2020-04-16T23:56:26.6120614Z error[E0382]: use of moved value: `x`\n</pre></div>",
        "id": 194383722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082913
    },
    {
        "content": "<p>:)</p>",
        "id": 194383723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082914
    },
    {
        "content": "<p>will see tomorrow</p>",
        "id": 194383724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587082917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Check that while a trait with by-value self is object-safe, we</span>\n<span class=\"c1\">// can&#39;t actually invoke it from an object (yet...?).</span>\n\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">use_bar</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR cannot move a value of type dyn Bar</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194387169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587086698
    },
    {
        "content": "<p>this now compiles</p>",
        "id": 194387171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587086701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 194387182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587086716
    },
    {
        "content": "<p>maybe you need to check for the <code>unsized_locals</code> feature-gate?</p>",
        "id": 194387351,
        "sender_full_name": "eddyb",
        "timestamp": 1587086927
    },
    {
        "content": "<p>in your special-casing</p>",
        "id": 194387360,
        "sender_full_name": "eddyb",
        "timestamp": 1587086946
    },
    {
        "content": "<p>I meant, this is an existing test that was supposed to fail</p>",
        "id": 194387661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087275
    },
    {
        "content": "<p>but now compiles</p>",
        "id": 194387663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087278
    },
    {
        "content": "<p>unsure what you meant</p>",
        "id": 194387665,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> your code needs to only go into effect if <code>#![feature(unsized_locals)]</code> was specified</p>",
        "id": 194387692,
        "sender_full_name": "eddyb",
        "timestamp": 1587087320
    },
    {
        "content": "<p>ahhh</p>",
        "id": 194387704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087341
    },
    {
        "content": "<p>otherwise you're removing an unsized move that would've prevented the code compiling w/o feature-gates</p>",
        "id": 194387710,
        "sender_full_name": "eddyb",
        "timestamp": 1587087349
    },
    {
        "content": "<p>with no opt-in</p>",
        "id": 194387714,
        "sender_full_name": "eddyb",
        "timestamp": 1587087354
    },
    {
        "content": "<p>(we probably want a separate feature-gate for but testing you can use <code>unsized_locals</code>)</p>",
        "id": 194387760,
        "sender_full_name": "eddyb",
        "timestamp": 1587087367
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194387765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087380
    },
    {
        "content": "<p>will fix tomorrow</p>",
        "id": 194387767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587087385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would be really nice if we don't have to change <code>typeck</code> and it looks like we won't :D</p>",
        "id": 194387776,
        "sender_full_name": "eddyb",
        "timestamp": 1587087397
    },
    {
        "content": "<p>(basically we want all of core/alloc/std to compile w/o <code>#![feature(unsized_locals)]</code> and at most a new feature-gate)</p>",
        "id": 194387789,
        "sender_full_name": "eddyb",
        "timestamp": 1587087423
    },
    {
        "content": "<p>(to make sure we're not miscompiling anyone's dynamic alignments)</p>",
        "id": 194387794,
        "sender_full_name": "eddyb",
        "timestamp": 1587087444
    },
    {
        "content": "<p>(via public stdlib APIs, and even worse, stable ones)</p>",
        "id": 194387800,
        "sender_full_name": "eddyb",
        "timestamp": 1587087457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/issues/71170\" title=\"https://github.com/rust-lang/rust/issues/71170\">#71170</a> is now ready for review, there are some little stderr files under <code>unsized_locals</code> feature flag that have changed slightly as I guess you were expecting</p>",
        "id": 194435982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587128527
    },
    {
        "content": "<p><del>we accidentally used the wrong topic lmao lemme fix that</del> done</p>",
        "id": 194436051,
        "sender_full_name": "eddyb",
        "timestamp": 1587128560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we were discussing with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this issue after his reviews</p>",
        "id": 194510765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587164928
    },
    {
        "content": "<p>Niko told me to use the recursion and you kind of advised against it</p>",
        "id": 194510780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587164948
    },
    {
        "content": "<p>I've done with recursion and it doesn't work</p>",
        "id": 194510789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587164958
    },
    {
        "content": "<p>all I can see is that ty is getting from an inner expr</p>",
        "id": 194510804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587164970
    },
    {
        "content": "<p>but the errors I'm getting seems to suggest that the Scope is doing something wrong</p>",
        "id": 194510827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587164988
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0382]: use of moved value\n    --&gt; src/libcore/iter/traits/iterator.rs:2534:25\n     |\n2534 |             move |x, y| cmp::max_by(x, y, &amp;mut compare)\n     |                         ^^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^\n     |                         |           |\n     |                         |           value moved here\n     |                         |           move occurs because value has type T, which does not implement the Copy trait\n     |                         value used here after move\n     |\nhelp: consider restricting type parameter T\n</pre></div>",
        "id": 194510886,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587165009
    },
    {
        "content": "<p>uhhhhhh</p>",
        "id": 194515561,
        "sender_full_name": "eddyb",
        "timestamp": 1587168948
    },
    {
        "content": "<p>that doesn't pass any arguments by dereference</p>",
        "id": 194515566,
        "sender_full_name": "eddyb",
        "timestamp": 1587168955
    },
    {
        "content": "<p>which means no code should run different than today</p>",
        "id": 194515604,
        "sender_full_name": "eddyb",
        "timestamp": 1587168963
    },
    {
        "content": "<p>this is why I was suggesting you might <em>peek</em> behind the <code>Scope</code> to see if it is an unsized <code>Deref</code></p>",
        "id": 194515615,
        "sender_full_name": "eddyb",
        "timestamp": 1587168975
    },
    {
        "content": "<p>so that you don't do anything if it's not</p>",
        "id": 194515619,
        "sender_full_name": "eddyb",
        "timestamp": 1587168981
    },
    {
        "content": "<p>basically you can do the recursion thing but <em>only</em> after you confirm that it needs the special case</p>",
        "id": 194515636,
        "sender_full_name": "eddyb",
        "timestamp": 1587169014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so after your PR, there'll be no <code>alloca</code> for code that is still permitted, right? is that checked/ensured by codegen?</p>",
        "id": 194585479,
        "sender_full_name": "RalfJ",
        "timestamp": 1587283938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what did you mean exactly by code that is still permitted?</p>",
        "id": 194598052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587303393
    },
    {
        "content": "<p>and by checked/ensured by codegen you meant if we had some kind of test case or what?</p>",
        "id": 194598059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587303414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194598052\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194598052\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> what did you mean exactly by code that is still permitted?</p>\n</blockquote>\n<p>I was under the impression that not all unsized-local code can fit the pattern that is used to fix the soundness bug?</p>",
        "id": 194598448,
        "sender_full_name": "RalfJ",
        "timestamp": 1587303930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194598059\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Box.3Cdyn.20FnOnce.3E.20doesn't.20respect.20self.20alignment.20.2368304/near/194598059\">said</a>:</p>\n<blockquote>\n<p>and by checked/ensured by codegen you meant if we had some kind of test case or what?</p>\n</blockquote>\n<p>more like, ICE in codegen at the place where we used to emit an <code>alloca</code></p>",
        "id": 194598453,
        "sender_full_name": "RalfJ",
        "timestamp": 1587303941
    }
]