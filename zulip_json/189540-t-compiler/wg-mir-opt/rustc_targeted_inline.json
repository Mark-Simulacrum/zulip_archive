[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  So I was thinking of following up <a href=\"https://github.com/rust-lang/rust/issues/66282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66282\">#66282</a> with a targeted inliner. My idea is that we visit all the BBs and on a function call, we look for <code>#[rustc_targeted_inline]</code> on the <code>def_id</code> and then we do the inlining by adding some basic blocks to the end (I'll need to look for other subtleties). This is done in a one-shot fashion; we don't compute SCC or try to recursively inline. Thoughts?</p>",
        "id": 181644665,
        "sender_full_name": "centril",
        "timestamp": 1574434556
    },
    {
        "content": "<p>I'm not opposed and it would be great to see some work done in this direction. I do think it would be nice if we only had 1 inliner though.</p>",
        "id": 181644790,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434649
    },
    {
        "content": "<p>And I feel like there's something relatively simple that's wrong with the current one</p>",
        "id": 181644802,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I agree with the end goal, but I was thinking that this would be a temporary thing while we figure out the general case</p>",
        "id": 181644873,
        "sender_full_name": "centril",
        "timestamp": 1574434698
    },
    {
        "content": "<p>mainly to improve <code>?</code></p>",
        "id": 181644893,
        "sender_full_name": "centril",
        "timestamp": 1574434713
    },
    {
        "content": "<p>The only real difference between what it currently does and what you've outlined above is that it doesn't only target <code>#[rustc_targeted_inline]</code></p>",
        "id": 181644904,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434725
    },
    {
        "content": "<p>I think all of the rest of the code is going to be pretty much the same</p>",
        "id": 181644944,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434745
    },
    {
        "content": "<p>modulo bugs</p>",
        "id": 181644948,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434747
    },
    {
        "content": "<p>To be clear, I'm not saying \"don't do it\". I just think that in the time it will take to write the new one, you could probably find and fix the issues with the current one :)</p>",
        "id": 181645084,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> oh; I'm a bit surprised... I assumed the current inliner uses SCC to inline recursively etc.</p>",
        "id": 181645255,
        "sender_full_name": "centril",
        "timestamp": 1574434930
    },
    {
        "content": "<p>Yea I'd rather not build a second inliner that we'll have to maintain</p>",
        "id": 181645813,
        "sender_full_name": "oli",
        "timestamp": 1574435163
    },
    {
        "content": "<p>let's \"just\" fix the existing one</p>",
        "id": 181645835,
        "sender_full_name": "oli",
        "timestamp": 1574435172
    },
    {
        "content": "<p>is there somewhere I can read about the issues with the current inliner?</p>",
        "id": 181645998,
        "sender_full_name": "centril",
        "timestamp": 1574435295
    },
    {
        "content": "<p>other than the panics happening when you run it on stage 2, I don't think so</p>",
        "id": 181646169,
        "sender_full_name": "oli",
        "timestamp": 1574435413
    },
    {
        "content": "<blockquote>\n<p>@Wesley Wiser oh; I'm a bit surprised... I assumed the current inliner uses SCC to inline recursively etc.</p>\n</blockquote>\n<p>Nope, it should and niko wants it to but currently it just calls <code>tcx.optimized_mir(callee_def_id)</code> and handles the cycle error by bailing out.</p>",
        "id": 181646274,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574435511
    },
    {
        "content": "<p>Sounds like I'd need to go on a fishing expedition then :P</p>",
        "id": 181646387,
        "sender_full_name": "centril",
        "timestamp": 1574435567
    }
]