[
    {
        "content": "<p>I was talking to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about avoiding recursion when constructing place on mir build</p>",
        "id": 175665596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568410073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have some thoughts about it</p>",
        "id": 175665640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568410085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> told me some days ago ...</p>",
        "id": 175823769,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568648185
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>nikomatsakis: I just think working recursively is more natural\nnikomatsakis: I think what I had in mind was that we returned not a Place\nnikomatsakis: but rather a PlaceBuilder\nnikomatsakis: that accumulates into a Vec\nnikomatsakis: and then has some kind of into_place method that does the interning\n</pre></div>",
        "id": 175823803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568648213
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 175823810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568648221
    },
    {
        "content": "<p>as long as we don't end up with actual recursion... I don't care much about the API. We have stack overflows in degenerate usercode that can only be solved by moving to iteration</p>",
        "id": 175824914,
        "sender_full_name": "oli",
        "timestamp": 1568648957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was talking with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about making this part iterative and we were wondering what to do with <a href=\"https://github.com/rust-lang/rust/blob/f504e37dc64b2f00291f53517fe9cb2329d00fb8/src/librustc_mir/build/expr/as_place.rs#L55-L61\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f504e37dc64b2f00291f53517fe9cb2329d00fb8/src/librustc_mir/build/expr/as_place.rs#L55-L61\">https://github.com/rust-lang/rust/blob/f504e37dc64b2f00291f53517fe9cb2329d00fb8/src/librustc_mir/build/expr/as_place.rs#L55-L61</a></p>",
        "id": 175933156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568743835
    },
    {
        "content": "<p>I guess this is why you've said that the recursion is more natural?</p>",
        "id": 175933168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568743845
    },
    {
        "content": "<p>the rest of the cases are pretty straightforward</p>",
        "id": 175933175,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568743854
    },
    {
        "content": "<p>what I'm going to do, is keep recursion there and pass a vec around which I keep filling</p>",
        "id": 175933225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568743893
    },
    {
        "content": "<p>you were mentioning a <code>PlaceBuilder</code> unsure what idea exactly you had in mind and if that could solve the <code>in_scope</code> problem</p>",
        "id": 175933359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568743963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was talking with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about this</p>",
        "id": 176099747,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900265
    },
    {
        "content": "<p>I've done a quick and dirty try on making things iterate there</p>",
        "id": 176099762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900281
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1\">https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1</a> is what I have</p>",
        "id": 176099803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900284
    },
    {
        "content": "<p>as you can see, it's bad :P</p>",
        "id": 176099817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900288
    },
    {
        "content": "<p>mainly we need to get somethings upfront in a lot of cases so we need to recurse anyway</p>",
        "id": 176099865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900307
    },
    {
        "content": "<p>like for instance <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1#diff-cfb4737a5d62dc17cfbc2d1f73ffff35R90\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1#diff-cfb4737a5d62dc17cfbc2d1f73ffff35R90\">https://github.com/rust-lang/rust/compare/master...spastorino:make-place-build-iterative?w=1#diff-cfb4737a5d62dc17cfbc2d1f73ffff35R90</a></p>",
        "id": 176099954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900375
    },
    {
        "content": "<p>I guess maybe this are the kind of things we were referring to when you've said that recursion is more natural in this case?</p>",
        "id": 176100158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you have some time to check this out, would be nice to hear from you on what to do here :)</p>",
        "id": 176100223,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900532
    },
    {
        "content": "<p>I should've probably read nikos chat log better... We can return a builder (glorified <code>(PlaceBase, Vec&lt;PlaceElem&gt;)</code>) instead of a <code>Place</code> and give that a <code>finish</code> method for getting a <code>Place</code> out of it</p>",
        "id": 176100558,
        "sender_full_name": "oli",
        "timestamp": 1568900725
    },
    {
        "content": "<p>then, when all you do is push an element and return, all we need to do is push to the builder</p>",
        "id": 176100608,
        "sender_full_name": "oli",
        "timestamp": 1568900760
    },
    {
        "content": "<p>yeah and most of the logic we have right now is done in the \"finish\" fn or as Niko said \"into_place\"</p>",
        "id": 176100741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900833
    },
    {
        "content": "<p>to be more clear, I meant, most of what we have right now in <code>expr_as_place</code> moves to <code>finish</code> or <code>into_place</code> or whatever we call it</p>",
        "id": 176100863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568900899
    },
    {
        "content": "<blockquote>\n<p>as long as we don't end up with actual recursion... I don't care much about the API. We have stack overflows in degenerate usercode that can only be solved by moving to iteration</p>\n</blockquote>\n<p>hmm, I wasn't trying to solve that problem, which I thought we'd solve by just growing the stack</p>",
        "id": 176138065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568924476
    },
    {
        "content": "<p>this is what I meant by \"recursion is just more natural\"</p>",
        "id": 176138095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568924501
    },
    {
        "content": "<blockquote>\n<p>I should've probably read nikos chat log better... We can return a builder (glorified <code>(PlaceBase, Vec&lt;PlaceElem&gt;)</code>) instead of a <code>Place</code> and give that a <code>finish</code> method for getting a <code>Place</code> out of it</p>\n</blockquote>\n<p>this is what I was proposing, yes</p>",
        "id": 176138114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568924517
    },
    {
        "content": "<blockquote>\n<p>to be more clear, I meant, most of what we have right now in <code>expr_as_place</code> moves to <code>finish</code> or <code>into_place</code> or whatever we call it</p>\n</blockquote>\n<p>basically this ^^^?</p>",
        "id": 176138333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568924627
    },
    {
        "content": "<p>I meant, now there we just construct the builder and move the logic on <code>expr_as_place</code> to the <code>finish</code>?, that's what you meant?</p>",
        "id": 176138451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568924683
    },
    {
        "content": "<p>all the logic will still happen where it does, but it won't build an actual <code>Place</code>, it will delay that until a <code>Place</code> is needed</p>",
        "id": 176167635,
        "sender_full_name": "oli",
        "timestamp": 1568959704
    },
    {
        "content": "<p>essentially:</p>\n<ol>\n<li>change the return type to the builder</li>\n<li>change all return sites to emit a builder (by just doing what's being done now: <code>.to_vec()</code> the projection and clone the base)</li>\n<li>Add a <code>.finish()</code> to all call sites</li>\n<li>get rid of unnecessary <code>.finish().to_builder()</code> calls by pushing to the <code>projections</code> <code>Vec</code> and returning the builder unfinished</li>\n</ol>",
        "id": 176167711,
        "sender_full_name": "oli",
        "timestamp": 1568959853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/64922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64922\">https://github.com/rust-lang/rust/pull/64922</a></p>",
        "id": 176947496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569859941
    },
    {
        "content": "<p>nice, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> :)</p>",
        "id": 176965175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569871679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what I've said about removing this functions <a href=\"https://github.com/rust-lang/rust/blob/40a5331753e44ef8ef2d0b68fe6ee35234ab82ad/src/librustc/mir/mod.rs#L1862-L1894\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/40a5331753e44ef8ef2d0b68fe6ee35234ab82ad/src/librustc/mir/mod.rs#L1862-L1894\">https://github.com/rust-lang/rust/blob/40a5331753e44ef8ef2d0b68fe6ee35234ab82ad/src/librustc/mir/mod.rs#L1862-L1894</a> from <code>Place</code> doesn't seem to be a good idea, unsure if you have some thoughts about it</p>",
        "id": 176970651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875048
    },
    {
        "content": "<p>there are some cases outside <code>as_place</code> where it's clearly not convenient</p>",
        "id": 176970696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875071
    },
    {
        "content": "<p>we may end converting a Place to a PlaceBuilder to convert it back to Place, so things will be worser</p>",
        "id": 176970719,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875088
    },
    {
        "content": "<p>but I was hoping there were cases where those calls could be converted to use the builder</p>",
        "id": 176970753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875108
    },
    {
        "content": "<p>doesn't seem like that though</p>",
        "id": 176970761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875113
    },
    {
        "content": "<p>other than changing this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L290\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L290\">as_place</a> call with a call to <code>as_place_builder</code> and then call PlaceBuilder's <code>field</code> method followed by an <code>as_place</code> call <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L300\">here</a></p>",
        "id": 176971599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875738
    },
    {
        "content": "<p>unsure if it worth doing that</p>",
        "id": 176971606,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875746
    },
    {
        "content": "<p>it's inside a closure, so I'd need to clone it all the times that's called anyway</p>",
        "id": 176971931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875951
    },
    {
        "content": "<p>I guess it ends being more or less equivalent</p>",
        "id": 176971955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569875964
    },
    {
        "content": "<p>so ... we have perf results for <a href=\"https://github.com/rust-lang/rust/pull/64922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64922\">https://github.com/rust-lang/rust/pull/64922</a></p>",
        "id": 177057541,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569938405
    },
    {
        "content": "<p>it doesn't seem to be showing useful wins</p>",
        "id": 177057568,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569938419
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> others that want to check this out ^^^</p>",
        "id": 177057593,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569938436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was talking with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in private and he thinks that we should merge this, he wasn't expecting huge wins neither</p>",
        "id": 177145971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570020587
    },
    {
        "content": "<p>I've said that I was expecting a bit more but still ...</p>",
        "id": 177145973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570020596
    },
    {
        "content": "<p>sgtm</p>",
        "id": 177146137,
        "sender_full_name": "oli",
        "timestamp": 1570020693
    }
]