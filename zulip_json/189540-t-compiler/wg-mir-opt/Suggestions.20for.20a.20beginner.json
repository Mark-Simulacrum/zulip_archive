[
    {
        "content": "<p>Hello! I'm new to rustc and would like to contribute writing MIR optimizations. I've read most of the rustc book and a few existing opts, and now I am wondering if anybody would have a suggestion of something that needs work and would be accessible to a beginner like me. Thanks in advance!</p>",
        "id": 237560574,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620246780
    },
    {
        "content": "<p>This doesn't answer your question, but once you have an optimization to implement, you may want to look at <a href=\"https://rustc-dev-guide.rust-lang.org/mir/optimizations.html#quickstart-for-adding-a-new-optimization\">this newly-added Quickstart section of the docs</a> if you haven't already :)</p>",
        "id": 237710540,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620327195
    },
    {
        "content": "<p>Thank you! I had indeed read it and it's actually what sparkled the interest for me to try it out ahah</p>",
        "id": 237718099,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620330450
    },
    {
        "content": "<p>I figured it's not a very easy question to answer to so what I think I'm going to do is to read some random MIR I'll generate from different crates to try and spot parts that would be inefficient.</p>",
        "id": 237718259,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620330531
    },
    {
        "content": "<p>I don't know if it'd be accessible to a beginner, but it'd be wonderful if someone could pick up the work to improve the <code>?</code> patterns in MIR.</p>\n<p>There's &lt;<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/mir-opt/simplify-arm.rs\">https://github.com/rust-lang/rust/blob/master/src/test/mir-opt/simplify-arm.rs</a>&gt;, but that transform is disabled for unsoundness, and with <a href=\"https://github.com/rust-lang/RFCs/issues/3058\">RFCs#3058</a> it isn't the pattern that <code>?</code> will produce anyway, as <a href=\"https://github.com/rust-lang/rust/pull/84767\">the desugar</a> will go <code>Result</code>-&gt;<code>ControlFlow</code>-&gt;<code>Result</code>.</p>",
        "id": 237721436,
        "sender_full_name": "scottmcm",
        "timestamp": 1620332068
    },
    {
        "content": "<p>Thank you, I'll check it out asap.</p>",
        "id": 237722064,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620332378
    },
    {
        "content": "<p>Bad ascii art alert:</p>\n<p>I think it's currently doing something like</p>\n<div class=\"codehilite\"><pre><span></span><code>               handle ok                      handle continue\n             /           \\                   /\nmatch result               match controlflow\n             \\           /                   \\\n               handle err                      handle break\n</code></pre></div>\n<p>And it would be amazing to detect that the match is just switching over what we just set, and redirect the terminators to</p>\n<div class=\"codehilite\"><pre><span></span><code>               handle ok  -- handle continue\n             /\nmatch result\n             \\\n               handle err -- handle break\n</code></pre></div>",
        "id": 237722191,
        "sender_full_name": "scottmcm",
        "timestamp": 1620332427
    },
    {
        "content": "<p>Okay, I think I understand. I'll look at an MIR dump of that using your PR to see exactly what needs to be done and I'll try to give it a go.</p>",
        "id": 237723045,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620332839
    },
    {
        "content": "<p>Quick godbolt of the structur: <a href=\"https://rust.godbolt.org/z/o6nxszWKM\">https://rust.godbolt.org/z/o6nxszWKM</a></p>\n<p>(The traits are in nightly already, so ideally you wouldn't have to couple yourself to my currently-regresses-perf PR)</p>",
        "id": 237723182,
        "sender_full_name": "scottmcm",
        "timestamp": 1620332906
    },
    {
        "content": "<p>Awesome! I did not know godbolt could show MIR. This tool is great.</p>",
        "id": 237723262,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620332949
    },
    {
        "content": "<p>And FWIW, I'm not an \"official\" compiler dev, so it's possible this is a bad idea.  Don't put weeks of work into it without confirming with people who know better than I whether it's worth doing <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 237723424,
        "sender_full_name": "scottmcm",
        "timestamp": 1620333030
    },
    {
        "content": "<p>Ahah okay. Don't worry though, I'm doing that for fun and practice, it's okay if it ends up unused.</p>",
        "id": 237723657,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620333137
    },
    {
        "content": "<p>Another related idea I had: do some simple tail block simplification.</p>\n<p>For example, if you have <code>?</code> 5 times in a function, there will be 5 blocks (well, 10 I guess, since the return is in a different block) generated for <code>return FromResidual::from_residual(r)</code>.  I suspect that the type of that residual will often be the same -- perhaps it's always on an <code>io::Result</code>, say -- so it would be possible to just remove the duplicate blocks and have all the <code>?</code> CFG edges go to the same block.</p>",
        "id": 237723727,
        "sender_full_name": "scottmcm",
        "timestamp": 1620333177
    },
    {
        "content": "<p>wouldn't that be picked up by the identical blocks optimization pass?</p>",
        "id": 237724150,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620333338
    },
    {
        "content": "<p>Maybe?  I have no idea.  (Would probably depend if the identical blocks pass applies even if the local variables are different -- what's the word, alpha-normalization?)</p>",
        "id": 237724392,
        "sender_full_name": "scottmcm",
        "timestamp": 1620333432
    },
    {
        "content": "<p>I think it does not (alpha-normalization sounds right)<br>\nOkay then</p>",
        "id": 237724619,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620333523
    },
    {
        "content": "<p>It looks like, no, <span class=\"user-mention\" data-user-id=\"409735\">@Théo Degioanni</span>, based on <a href=\"https://rust.godbolt.org/z/sj6rYTorj\">https://rust.godbolt.org/z/sj6rYTorj</a></p>",
        "id": 237724621,
        "sender_full_name": "scottmcm",
        "timestamp": 1620333525
    },
    {
        "content": "<p>That is in line with what I recall from that pass</p>",
        "id": 237724654,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620333544
    },
    {
        "content": "<p>I think I'll have to document myself a bit on on try v2 first though</p>",
        "id": 237724696,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620333566
    },
    {
        "content": "<p>Feel free to ping me if there's anything I can help answer, or if it'd be useful for me to split out the lang items from that massive PR or something.</p>",
        "id": 237725051,
        "sender_full_name": "scottmcm",
        "timestamp": 1620333728
    },
    {
        "content": "<p>And a more complete godbolt, with the old and new desugarings for an identity <code>?</code> showing that it's not an identity in ASM (for either of them): <a href=\"https://rust.godbolt.org/z/qsY8Mq311\">https://rust.godbolt.org/z/qsY8Mq311</a></p>",
        "id": 237729426,
        "sender_full_name": "scottmcm",
        "timestamp": 1620335199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> So I think I got confused thinking about those examples. The point of the optimization would be that when an <code>Err</code> variant gets deconstructed into a <code>ControlFlow</code> then back into an <code>Err</code> variant of the same type, one could just turn that into the identity, is that it?</p>",
        "id": 237734921,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620337171
    },
    {
        "content": "<p>That's probably the most common case, yeah -- like <code>?</code> on a <code>std::fmt::Result</code> in a method that returns <code>std::fmt::Result</code>.</p>",
        "id": 237738783,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339196
    },
    {
        "content": "<p>I think the difficult part is to assert that this operation is indeed an identity</p>",
        "id": 237739060,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620339346
    },
    {
        "content": "<p>I don't think there's any semantic guarantee that it is right now</p>",
        "id": 237739078,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620339360
    },
    {
        "content": "<p>I think the existing ones were made to run after the mir inliner, where one can see the variants directly and thus actually know it.</p>",
        "id": 237739159,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339390
    },
    {
        "content": "<p>aah that sounds more reasonable</p>",
        "id": 237739191,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620339409
    },
    {
        "content": "<p>Although without inlining I don't expect it to be reasonably possible I'm afraid :/</p>",
        "id": 237739223,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620339432
    },
    {
        "content": "<p>Another shot at trying to describe what I was trying to do in the ascii art:</p>\n<p>Transforming</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in general.</p>",
        "id": 237739360,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339522
    },
    {
        "content": "<p>Kinda like inlining the outer <code>match</code> into the inner arm, since the inner arm is always returning the same discriminant so will always go the same direction in the later match.</p>",
        "id": 237739475,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339602
    },
    {
        "content": "<p>(as that one would get picked up for even non-identity cases)</p>",
        "id": 237739525,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339612
    },
    {
        "content": "<p>That would be relatively easy in SSA, AFAICT, but might be a pain in MIR...</p>",
        "id": 237739672,
        "sender_full_name": "scottmcm",
        "timestamp": 1620339690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/237739360\">said</a>:</p>\n<blockquote>\n<p>Another shot at trying to describe what I was trying to do in the ascii art:</p>\n<p>Transforming</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in general.</p>\n</blockquote>\n<p>I think this might be what's known as a \"case-of-case\" optimization. This Stack Overflow answer is the only explanation I've found of this sort of optimization so far: <a href=\"https://stackoverflow.com/a/35815694\">https://stackoverflow.com/a/35815694</a></p>",
        "id": 237745017,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620343065
    },
    {
        "content": "<p>Just guessing, but this kind of optimization might be kind of hard to do in the MIR, since matches are fully desugared. Maybe it could be done \"on the fly\" as part of MIR building?</p>",
        "id": 237745110,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620343118
    },
    {
        "content": "<p>It would probably be helpful if Rust had a higher-level IR that was simpler than HIR.</p>",
        "id": 237745146,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620343151
    },
    {
        "content": "<p>I think in practice this is also going to be hard because you need to inspect the inner implementation as well, which may or may not be trivial. I'll give it some thought tomorrow.</p>",
        "id": 237745545,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620343443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/237745110\">said</a>:</p>\n<blockquote>\n<p>Just guessing, but this kind of optimization might be kind of hard to do in the MIR, since matches are fully desugared. Maybe it could be done \"on the fly\" as part of MIR building?</p>\n</blockquote>\n<p>Actually, IIUC, <code>?</code> lowering happens during AST -&gt; HIR, <em>not</em> THIR -&gt; MIR. So this maybe would happen on the fly during AST lowering?</p>",
        "id": 237746053,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620343815
    },
    {
        "content": "<p>Well, it can't happen in AST lowering, because that doesn't have inlining to see both matches.  (The first is inside the call to <code>Try::branch</code>, and we haven't even run type checking yet, so <em>definitely</em> can't see that <code>match</code>.)</p>",
        "id": 237749176,
        "sender_full_name": "scottmcm",
        "timestamp": 1620346110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/237745110\">said</a>:</p>\n<blockquote>\n<p>Just guessing, but this kind of optimization might be kind of hard to do in the MIR, since matches are fully desugared. Maybe it could be done \"on the fly\" as part of MIR building?</p>\n</blockquote>\n<p>I think the desugared-ness will actually make it easier.  Basically, you're looking for <code>discriminant(_2) = 1;</code>in a block that branches to a block that does <code>_4 = discriminant(_2); switchInt(move _4) -&gt; ...</code>.</p>\n<p>(I guess any place would work, not just discriminant, really.  I wonder how close the const prop optimization is to already doing this...)</p>",
        "id": 237749831,
        "sender_full_name": "scottmcm",
        "timestamp": 1620346658
    },
    {
        "content": "<p>Hmm, interesting -- with <code>-Z mir-opt-level=3</code> it'll inline <code>TryV2::from_output</code> and <code>TryV2::from_residual</code>, but not <code>TryV2::branch</code>: <a href=\"https://rust.godbolt.org/z/KTjE9hhxr\">https://rust.godbolt.org/z/KTjE9hhxr</a></p>\n<p>(And yes, <code>branch</code> is <code>#[inline]</code>: <a href=\"https://github.com/rust-lang/rust/blob/676ee14729462585b969bbc52f32c307403f4126/library/core/src/result.rs#L1660-L1666\">https://github.com/rust-lang/rust/blob/676ee14729462585b969bbc52f32c307403f4126/library/core/src/result.rs#L1660-L1666</a> )</p>",
        "id": 237750034,
        "sender_full_name": "scottmcm",
        "timestamp": 1620346823
    },
    {
        "content": "<p>Oh. All this time I was not aware inlining could already happen before MIR optimizations are ran. Welp, sorry about that ^^'</p>",
        "id": 237834564,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620398808
    },
    {
        "content": "<p>If branch can be inlined, I think I get how to implement that. Find a match-looking switch, walk backwards in the cfg to find another match-looking switch, and try to merge them</p>",
        "id": 237834730,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620398868
    },
    {
        "content": "<p>I was trying to wrap my head around the drawbacks of maybe generating a custom version of branch that does some weird stuff to circumvent the lack of inlining, but if inlining is there it's not as hard.</p>",
        "id": 237834893,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620398930
    },
    {
        "content": "<p>Ah, yes, that would be important <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>The inliner is &lt;<a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/inline.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/inline.rs</a>&gt;, AFAIK.</p>",
        "id": 237871133,
        "sender_full_name": "scottmcm",
        "timestamp": 1620412949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/237750034\">said</a>:</p>\n<blockquote>\n<p>Hmm, interesting -- with <code>-Z mir-opt-level=3</code> it'll inline <code>TryV2::from_output</code> and <code>TryV2::from_residual</code>, but not <code>TryV2::branch</code>: <a href=\"https://rust.godbolt.org/z/KTjE9hhxr\">https://rust.godbolt.org/z/KTjE9hhxr</a></p>\n<p>(And yes, <code>branch</code> is <code>#[inline]</code>: <a href=\"https://github.com/rust-lang/rust/blob/676ee14729462585b969bbc52f32c307403f4126/library/core/src/result.rs#L1660-L1666\">https://github.com/rust-lang/rust/blob/676ee14729462585b969bbc52f32c307403f4126/library/core/src/result.rs#L1660-L1666</a> )</p>\n</blockquote>\n<p>Though it's not <code>#[inline(always)]</code> ;)</p>",
        "id": 237879817,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620416679
    },
    {
        "content": "<p>Sounds like a good PR to run perf against and see how it would impact things, after I get my <code>?</code> change in!</p>",
        "id": 237891192,
        "sender_full_name": "scottmcm",
        "timestamp": 1620422066
    },
    {
        "content": "<p>FYI, <span class=\"user-mention\" data-user-id=\"409735\">@Théo Degioanni</span>, I ended up making an issue for this so I can mention it in FIXMEs: <a href=\"https://github.com/rust-lang/rust/issues/85133\">https://github.com/rust-lang/rust/issues/85133</a></p>\n<p>Feel free to claim it if you'd still like to work on it!</p>",
        "id": 238087325,
        "sender_full_name": "scottmcm",
        "timestamp": 1620622682
    },
    {
        "content": "<p>Thanks! Yes I'm still interested, but exams came early and I'll be busy until Wednesday. I should be able to look into that more after that.</p>",
        "id": 238093127,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620628402
    }
]