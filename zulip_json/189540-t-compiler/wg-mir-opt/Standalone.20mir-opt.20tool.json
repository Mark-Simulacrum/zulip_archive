[
    {
        "content": "<p>Curious if there were any eventual plans for a standalone mir-opt tool (akin to Swift's sil-opt or LLVM's opt) to take in MIR and output the result after optimizations. Would definitely help while writing/testing mir opts without having to rely on rustc generating the right mir you want to test.</p>",
        "id": 203874880,
        "sender_full_name": "Luqman Aden",
        "timestamp": 1594754163
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/issues/196\">https://github.com/rust-lang/miri/issues/196</a></p>",
        "id": 203875538,
        "sender_full_name": "bjorn3",
        "timestamp": 1594754554
    },
    {
        "content": "<p>It is not as easy as for LLVM or Swift, as MIR itself just describes function bodies. It doesn't describe any types and other necessary things to actually do something useful with it.</p>",
        "id": 203875700,
        "sender_full_name": "bjorn3",
        "timestamp": 1594754650
    },
    {
        "content": "<p>LLVM-IR at least describes the full input of the optimizations. Rust's MIR doesn't.</p>",
        "id": 203875816,
        "sender_full_name": "bjorn3",
        "timestamp": 1594754721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Standalone.20mir-opt.20tool/near/203875538\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/miri/issues/196\">https://github.com/rust-lang/miri/issues/196</a></p>\n</blockquote>\n<p>Ah, there's the issue I could've sworn I saw a while back <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 203875950,
        "sender_full_name": "Luqman Aden",
        "timestamp": 1594754780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Standalone.20mir-opt.20tool/near/203875700\">said</a>:</p>\n<blockquote>\n<p>It is not as easy as for LLVM or Swift, as MIR itself just describes function bodies. It doesn't describe any types and other necessary things to actually do something useful with it.</p>\n</blockquote>\n<p>yea, i guess it'd need some sort of augmented mir</p>",
        "id": 203876209,
        "sender_full_name": "Luqman Aden",
        "timestamp": 1594754896
    },
    {
        "content": "<p>you would need something like Rust but with macros expanded, and function bodies replaced with MIR</p>",
        "id": 203894938,
        "sender_full_name": "eddyb",
        "timestamp": 1594764889
    },
    {
        "content": "<p>in fact we could try to make something like this work for testing</p>",
        "id": 203894988,
        "sender_full_name": "eddyb",
        "timestamp": 1594764922
    },
    {
        "content": "<p>^ ditto</p>",
        "id": 203896166,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594765783
    },
    {
        "content": "<p>I would love to see this available for testing MIR</p>",
        "id": 203896185,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594765794
    },
    {
        "content": "<p>I mean not MIR, but transformations over MIR</p>",
        "id": 203896307,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594765857
    },
    {
        "content": "<p>it would also tremendously help exploring MIR semantics with miri</p>",
        "id": 203924111,
        "sender_full_name": "RalfJ",
        "timestamp": 1594798443
    },
    {
        "content": "<p>right now there's MIR we just cannot generate so we cannot actually test how miri behaves on them and whether that's what we want</p>",
        "id": 203924139,
        "sender_full_name": "RalfJ",
        "timestamp": 1594798473
    },
    {
        "content": "<p>Maybe we could add an forever unstable <code>mir</code> item kind to the parser, ast, hir and translate that directly to MIR bodies?</p>",
        "id": 203926965,
        "sender_full_name": "oli",
        "timestamp": 1594800769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I would just have a way to toggle what the body is supposed to be</p>",
        "id": 203927220,
        "sender_full_name": "eddyb",
        "timestamp": 1594800978
    },
    {
        "content": "<p>ideally we can avoid parsing anything special and just have a transformation to lower AST to MIR</p>",
        "id": 203927241,
        "sender_full_name": "eddyb",
        "timestamp": 1594801000
    },
    {
        "content": "<p>that AST -&gt; HIR would invoke</p>",
        "id": 203927260,
        "sender_full_name": "eddyb",
        "timestamp": 1594801017
    },
    {
        "content": "<p>creating types is a bit of a problem, since <code>TyCtxt</code> doesn't exist yet, hmpf</p>",
        "id": 203927320,
        "sender_full_name": "eddyb",
        "timestamp": 1594801060
    },
    {
        "content": "<p>maybe we can just do AST -&gt; HIR and avoid using anything that woul desugar</p>",
        "id": 203927387,
        "sender_full_name": "eddyb",
        "timestamp": 1594801083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so basically it would look like a bunch of function calls</p>",
        "id": 203927405,
        "sender_full_name": "eddyb",
        "timestamp": 1594801098
    },
    {
        "content": "<p>mostly,</p>",
        "id": 203927413,
        "sender_full_name": "eddyb",
        "timestamp": 1594801106
    },
    {
        "content": "<p>I forogt where I wrote down my last thoughts on this</p>",
        "id": 203927429,
        "sender_full_name": "eddyb",
        "timestamp": 1594801127
    },
    {
        "content": "<p>right, but I want to write normal code and mir in the same file ^^</p>",
        "id": 203927454,
        "sender_full_name": "oli",
        "timestamp": 1594801141
    },
    {
        "content": "<p>but yeah parsing -&gt; AST -&gt; HIR without any changes to the AST or HIR would be great because you can defer reinterpeting it as MIR until after you have a <code>TyCtxt</code></p>",
        "id": 203927482,
        "sender_full_name": "eddyb",
        "timestamp": 1594801167
    },
    {
        "content": "<p>and we'll want to write basic blocks with arbitrary schemes, so we can't just use rust code</p>",
        "id": 203927491,
        "sender_full_name": "oli",
        "timestamp": 1594801174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that's the point, you have like a <code>#[mir]</code> or something annotation</p>",
        "id": 203927493,
        "sender_full_name": "eddyb",
        "timestamp": 1594801177
    },
    {
        "content": "<p>even <code>loop</code> is not ok?</p>",
        "id": 203927501,
        "sender_full_name": "oli",
        "timestamp": 1594801180
    },
    {
        "content": "<p>you'd be using a subset of the Rust syntax as a way to represent MIR</p>",
        "id": 203927530,
        "sender_full_name": "eddyb",
        "timestamp": 1594801198
    },
    {
        "content": "<p>to avoid wriitng a MIR parser etc.</p>",
        "id": 203927579,
        "sender_full_name": "eddyb",
        "timestamp": 1594801210
    },
    {
        "content": "<p>if you want to do all that extra work, be my guest, but I don't think it's entirely worth it</p>",
        "id": 203927599,
        "sender_full_name": "eddyb",
        "timestamp": 1594801229
    },
    {
        "content": "<p>oh, so you want <code>SetDiscriminant(place, val)</code> to be a function?</p>",
        "id": 203927634,
        "sender_full_name": "oli",
        "timestamp": 1594801257
    },
    {
        "content": "<p>not a real one, just using the syntax</p>",
        "id": 203927649,
        "sender_full_name": "eddyb",
        "timestamp": 1594801265
    },
    {
        "content": "<p>yea</p>",
        "id": 203927655,
        "sender_full_name": "oli",
        "timestamp": 1594801268
    },
    {
        "content": "<p>basically an intrinsic ^^</p>",
        "id": 203927663,
        "sender_full_name": "oli",
        "timestamp": 1594801275
    },
    {
        "content": "<p>hopefully the syntax we pick will be weird enough so that it wouldn't actually compile without the <code>#[mir]</code> or w/e...</p>",
        "id": 203927693,
        "sender_full_name": "eddyb",
        "timestamp": 1594801306
    },
    {
        "content": "<p>as a first step we can create a bunch of intrinsics that cover all the mir statement kinds and only work with <code>-Zunstable-features</code></p>",
        "id": 203927832,
        "sender_full_name": "oli",
        "timestamp": 1594801419
    },
    {
        "content": "<p>that seems like the MVP which is the easiest to implement and gives us fun things like inserting <code>StorageDead</code> in random places</p>",
        "id": 203927897,
        "sender_full_name": "oli",
        "timestamp": 1594801452
    },
    {
        "content": "<p>you went in the direction I <em>really</em> wanted to avoid, but I <em>suppose</em> it wouldn't be impossible to have that available for testing</p>",
        "id": 203928235,
        "sender_full_name": "eddyb",
        "timestamp": 1594801705
    },
    {
        "content": "<p>I'm worried about putting anything mentioning those intrinsics in <code>core</code>/<code>std</code>, maybe we need to start having a <code>rustc_test</code> crate with random goodies tests can easily access?</p>",
        "id": 203928283,
        "sender_full_name": "eddyb",
        "timestamp": 1594801764
    },
    {
        "content": "<p>anyway that feels orthogonal to being able to inject custom MIR bodies (which would likely require a special \"HIR-&gt;MIR direct lowering\" pass that bypasses typeck and regular MIR building)</p>",
        "id": 203928442,
        "sender_full_name": "eddyb",
        "timestamp": 1594801889
    },
    {
        "content": "<p>we don't need to put these intrinsics in <code>core</code>/<code>std</code></p>",
        "id": 203928450,
        "sender_full_name": "oli",
        "timestamp": 1594801896
    },
    {
        "content": "<p>we can just add a new crate for mir debugging</p>",
        "id": 203928459,
        "sender_full_name": "oli",
        "timestamp": 1594801902
    },
    {
        "content": "<p><code>rustc_test</code> or <code>rustc_mir_test</code> if we don't want to use one crate for everything, seems like it could work fine</p>",
        "id": 203928522,
        "sender_full_name": "eddyb",
        "timestamp": 1594801929
    }
]