[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> Let's hack on mir opt things all day on 27/28 December. If you want to join, I set up <a href=\"https://meet.jit.si/wg-mir-opt\" target=\"_blank\" title=\"https://meet.jit.si/wg-mir-opt\">https://meet.jit.si/wg-mir-opt</a> and will be hanging out there starting around 9 or 10 CET on these days.</p>",
        "id": 184007284,
        "sender_full_name": "oli",
        "timestamp": 1576927885
    },
    {
        "content": "<p>Let's use this thread to figure out fun things for everyone to work on</p>",
        "id": 184007289,
        "sender_full_name": "oli",
        "timestamp": 1576927919
    },
    {
        "content": "<p>You're also totally welcome to join if you just want to hang out, there's no requirement to do any work.</p>",
        "id": 184007336,
        "sender_full_name": "oli",
        "timestamp": 1576927977
    },
    {
        "content": "<p>I'll join in around 10:30 CET after I've made some <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span> :)</p>",
        "id": 184014379,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576941725
    },
    {
        "content": "<p>It would be nice if <a href=\"https://github.com/rust-lang/rust/issues/63802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63802\">#63802</a> (mir inliner panic) gets fixed.</p>",
        "id": 184019605,
        "sender_full_name": "bjorn3",
        "timestamp": 1576951296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> It's on the list of things we're going to look at and I've already gotten a head start (see PR <a href=\"https://github.com/rust-lang/rust/issues/67333\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67333\">#67333</a>)</p>",
        "id": 184029560,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576969607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I've talked with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about this briefly but do you have a list of things to do published? otherwise could be nice if we can write something down</p>",
        "id": 184032861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1576976049
    },
    {
        "content": "<p>The list is currently just</p>\n<ul>\n<li>Use the new dataflow framework in const prop to const prop more stuff</li>\n<li>Fix the inliner (aka resolve <a href=\"https://github.com/rust-lang/rust/issues/63802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63802\">#63802</a>)</li>\n</ul>",
        "id": 184035418,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576981469
    },
    {
        "content": "<p>I'm also thinking about mir librarification <a href=\"https://github.com/rust-lang/compiler-team/issues/233\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/233\">https://github.com/rust-lang/compiler-team/issues/233</a></p>",
        "id": 184035538,
        "sender_full_name": "oli",
        "timestamp": 1576981799
    },
    {
        "content": "<p>Found another bug (probably in the mir inliner): <a href=\"https://github.com/rust-lang/rust/issues/67529\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67529\">https://github.com/rust-lang/rust/issues/67529</a></p>",
        "id": 184058650,
        "sender_full_name": "bjorn3",
        "timestamp": 1577028715
    },
    {
        "content": "<p>Another fun idea: <a href=\"https://github.com/rust-lang/rust/issues/67539#issuecomment-568308568\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67539#issuecomment-568308568\">https://github.com/rust-lang/rust/issues/67539#issuecomment-568308568</a></p>",
        "id": 184072136,
        "sender_full_name": "oli",
        "timestamp": 1577054024
    },
    {
        "content": "<p>I'll be there in a sec</p>",
        "id": 184309309,
        "sender_full_name": "oli",
        "timestamp": 1577437264
    },
    {
        "content": "<p>just joined</p>",
        "id": 184309477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577437501
    },
    {
        "content": "<p>who is player 3? :D</p>",
        "id": 184311548,
        "sender_full_name": "oli",
        "timestamp": 1577439540
    },
    {
        "content": "<p>me</p>",
        "id": 184311554,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1577439548
    },
    {
        "content": "<p>ah :D <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184311555,
        "sender_full_name": "oli",
        "timestamp": 1577439554
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184311560,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1577439566
    },
    {
        "content": "<p>ok, my notifications have been used up, my reviews are done. Ready to do stuff</p>",
        "id": 184311699,
        "sender_full_name": "oli",
        "timestamp": 1577439790
    },
    {
        "content": "<p>visiting, I will listen carefully. <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 184311977,
        "sender_full_name": "vertexclique",
        "timestamp": 1577440213
    },
    {
        "content": "<p>:D not sure how much talking will be going on</p>",
        "id": 184311986,
        "sender_full_name": "oli",
        "timestamp": 1577440240
    },
    {
        "content": "<p>:D let's see, I will try my best.</p>",
        "id": 184312012,
        "sender_full_name": "vertexclique",
        "timestamp": 1577440281
    },
    {
        "content": "<p>so the current project status is</p>\n<ul>\n<li>santiago works on <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a></li>\n<li>\n<p>wesley works on <br>\n    - Use the new dataflow framework in const prop to const prop more stuff<br>\n    - Fix the inliner (aka resolve <a href=\"https://github.com/rust-lang/rust/issues/63802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63802\">#63802</a>)</p>\n</li>\n<li>\n<p>oli works on ... I actually don't know yet</p>\n</li>\n</ul>",
        "id": 184312086,
        "sender_full_name": "oli",
        "timestamp": 1577440352
    },
    {
        "content": "<p>I'm gonna create a hackmd so we can collect all this info and update it and also add project ideas</p>",
        "id": 184312096,
        "sender_full_name": "oli",
        "timestamp": 1577440366
    },
    {
        "content": "<p>is wesley around already?</p>",
        "id": 184312209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577440485
    },
    {
        "content": "<p>mahmut wants to work on this <a href=\"https://github.com/rust-lang/rust/issues/49206\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49206\">#49206</a></p>",
        "id": 184312310,
        "sender_full_name": "vertexclique",
        "timestamp": 1577440646
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@oli-obk/ByKo48XJU\" target=\"_blank\" title=\"https://hackmd.io/@oli-obk/ByKo48XJU\">https://hackmd.io/@oli-obk/ByKo48XJU</a></p>",
        "id": 184312391,
        "sender_full_name": "oli",
        "timestamp": 1577440783
    },
    {
        "content": "<p>@mahmut related info: <a href=\"https://github.com/rust-lang/const-eval/pull/33#discussion_r361555939\" target=\"_blank\" title=\"https://github.com/rust-lang/const-eval/pull/33#discussion_r361555939\">https://github.com/rust-lang/const-eval/pull/33#discussion_r361555939</a></p>",
        "id": 184312472,
        "sender_full_name": "oli",
        "timestamp": 1577440888
    },
    {
        "content": "<p>I think we could start with creating a lint that triggers on final constants whose value contains a non-public <code>!Sync</code> type</p>",
        "id": 184312542,
        "sender_full_name": "oli",
        "timestamp": 1577440987
    },
    {
        "content": "<p>so <code>*const u8</code> is ok, so is any value of <code>struct Foo { pub bar: *const u8 }</code>, but not <code>struct Bar { bar: *const u8 }</code> and <code>struct Mep { foo: Foo }</code></p>",
        "id": 184312601,
        "sender_full_name": "oli",
        "timestamp": 1577441052
    },
    {
        "content": "<p>basically if the value is publicly reachable, noone can make any assumptions about the fields anyway, becaues anyone can modify the fields</p>",
        "id": 184312609,
        "sender_full_name": "oli",
        "timestamp": 1577441097
    },
    {
        "content": "<p>oh I think I got it.</p>",
        "id": 184312690,
        "sender_full_name": "vertexclique",
        "timestamp": 1577441223
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span>- Fix the inliner (aka resolve #63802)\n</pre></div>\n\n\n</blockquote>\n<p>I found some more mir inliner issues: <a href=\"https://github.com/rust-lang/rust/issues/created_by/bjorn3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/created_by/bjorn3\">https://github.com/rust-lang/rust/issues/created_by/bjorn3</a> (until <a href=\"https://github.com/rust-lang/rust/issues/67529\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67529\">#67529</a>) Most of which are miscompilation and creating broken MIR.</p>",
        "id": 184312701,
        "sender_full_name": "bjorn3",
        "timestamp": 1577441241
    },
    {
        "content": "<p>e.g. I see no reason why we should be forbidding <code>static FOO: *const u8 = &1;</code> today</p>",
        "id": 184312705,
        "sender_full_name": "oli",
        "timestamp": 1577441247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> are these related to the resolve problem or independent?</p>",
        "id": 184312716,
        "sender_full_name": "oli",
        "timestamp": 1577441281
    },
    {
        "content": "<p>The Vec::index one may be related, but the rest isn't I think.</p>",
        "id": 184312815,
        "sender_full_name": "bjorn3",
        "timestamp": 1577441374
    },
    {
        "content": "<p>Can I ask completely unrelated question, because I want to know the reasoning to ban/unban this in the future:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/67191#issuecomment-568024316\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67191#issuecomment-568024316\">https://github.com/rust-lang/rust/issues/67191#issuecomment-568024316</a></p>",
        "id": 184312913,
        "sender_full_name": "vertexclique",
        "timestamp": 1577441426
    },
    {
        "content": "<p>Any small/easy issue to start with? :P</p>",
        "id": 184312915,
        "sender_full_name": "DPC",
        "timestamp": 1577441427
    },
    {
        "content": "<p>From my point of view <code>const FOO: ! = panic!();</code> this is valid in no_std context.</p>",
        "id": 184312948,
        "sender_full_name": "vertexclique",
        "timestamp": 1577441474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223879\">@vertexclique</span> the problem isn't the constant. If you declare that constant that is completely sound if we just lint and don't error</p>",
        "id": 184313040,
        "sender_full_name": "oli",
        "timestamp": 1577441626
    },
    {
        "content": "<p>the problem is <code>let x: ! = FOO;</code> because now you have a value of type <code>!</code> and if that happens at runtime that's instant UB</p>",
        "id": 184313085,
        "sender_full_name": "oli",
        "timestamp": 1577441647
    },
    {
        "content": "<p>_enlightened_</p>",
        "id": 184313153,
        "sender_full_name": "vertexclique",
        "timestamp": 1577441789
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Good morning!</p>",
        "id": 184313316,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442109
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184313460,
        "sender_full_name": "oli",
        "timestamp": 1577442351
    },
    {
        "content": "<p>I'm still plugging away at the resolve+specialization issue. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I rebased on top of your pr (<a href=\"https://github.com/rust-lang/rust/issues/67631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67631\">#67631</a>) and while I believe that did fix a few things, I'm still seeing that weird LLVM issue.</p>",
        "id": 184313539,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> the resolve fix PR should actually <em>undo</em> <a href=\"https://github.com/rust-lang/rust/issues/67631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67631\">#67631</a> and not keep using it</p>",
        "id": 184313614,
        "sender_full_name": "oli",
        "timestamp": 1577442552
    },
    {
        "content": "<p>I think?</p>",
        "id": 184313621,
        "sender_full_name": "oli",
        "timestamp": 1577442573
    },
    {
        "content": "<p>Well, I think after my change, there will be more things that do not resolve to a specific instance</p>",
        "id": 184313627,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442597
    },
    {
        "content": "<p>Which currently <em>are</em> albeit incorrectly</p>",
        "id": 184313671,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442610
    },
    {
        "content": "<p>but that's ok, if resolve fails with <code>TooGeneric</code>, const prop bails out</p>",
        "id": 184313766,
        "sender_full_name": "oli",
        "timestamp": 1577442803
    },
    {
        "content": "<p>Ah, yeah you're right</p>",
        "id": 184313848,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442924
    },
    {
        "content": "<p>if there's a difference whether you rebased over my PR or not, that means the resolve PR still has bugs</p>",
        "id": 184313857,
        "sender_full_name": "oli",
        "timestamp": 1577442954
    },
    {
        "content": "<p>I'm still seeing some failing ui tests so that's very possible</p>",
        "id": 184313901,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577442982
    },
    {
        "content": "<p>do you have the current status somewhere?</p>",
        "id": 184313947,
        "sender_full_name": "oli",
        "timestamp": 1577443054
    },
    {
        "content": "<p>also: did you ever see any ICEs where stuff couldn't be loaded from metadata?</p>",
        "id": 184313952,
        "sender_full_name": "oli",
        "timestamp": 1577443074
    },
    {
        "content": "<p>I'll force push to my branch in a second</p>",
        "id": 184314033,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443155
    },
    {
        "content": "<p>I don't think I've ever seen that</p>",
        "id": 184314035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443162
    },
    {
        "content": "<p>k good to know, because my dedup PR definitely has this problem XD</p>",
        "id": 184314045,
        "sender_full_name": "oli",
        "timestamp": 1577443197
    },
    {
        "content": "<p>But I was focused on getting the ui and mir-opt tests passing so I probably wasn't exercising the incremental functionality</p>",
        "id": 184314050,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443201
    },
    {
        "content": "<p>nah, this was in ui tests</p>",
        "id": 184314089,
        "sender_full_name": "oli",
        "timestamp": 1577443210
    },
    {
        "content": "<p>Oh</p>",
        "id": 184314091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443214
    },
    {
        "content": "<p>Nah I didn't see that</p>",
        "id": 184314095,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443218
    },
    {
        "content": "<p>cool, that cuts down the places I need to look at</p>",
        "id": 184314100,
        "sender_full_name": "oli",
        "timestamp": 1577443235
    },
    {
        "content": "<p>Maybe I should wait until your PR is done and rebase over it so I have fewer things to worry about</p>",
        "id": 184314118,
        "sender_full_name": "oli",
        "timestamp": 1577443268
    },
    {
        "content": "<p>that deduplication is triggering many assertions in rustc that are made on assumptions that just aren't universally true</p>",
        "id": 184314122,
        "sender_full_name": "oli",
        "timestamp": 1577443295
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:optimizations_handle_specialization?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:optimizations_handle_specialization?expand=1\">https://github.com/rust-lang/rust/compare/master...wesleywiser:optimizations_handle_specialization?expand=1</a></p>",
        "id": 184314195,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443398
    },
    {
        "content": "<p>Here's where we're at:</p>\n<ul>\n<li>There's still the \"erroneous constant used\" test change which we think might be a symptom of the same thing that's causing the LLVM issue.</li>\n<li>The <code>ui/rfcs/rfc-2005-default-binding-mode/constref.rs</code> test is failing<ul>\n<li><code>error[E0158]: associated consts cannot be referenced in patterns</code></li>\n</ul>\n</li>\n<li>The <code>ui/ufcs-polymorphic-paths.rs</code> test is failing<ul>\n<li><code>Global is external, but doesn't have external or weak linkage! i64 ()** @_ZN22ufcs_polymorphic_paths4main1S17h617838d98e0a145aE</code></li>\n</ul>\n</li>\n</ul>",
        "id": 184314285,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443556
    },
    {
        "content": "<p>All other ui and mir-opt tests pass</p>",
        "id": 184314335,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443593
    },
    {
        "content": "<p>yea, so the \"erroneous constant used\" is weird. The constant being used is entriely monomorphic, but const prop still bails out on it and then codegen catches it</p>",
        "id": 184314415,
        "sender_full_name": "oli",
        "timestamp": 1577443735
    },
    {
        "content": "<p>Maybe it's silenced due to the reveal mode being <code>UserFacing</code> and not <code>All</code></p>",
        "id": 184314449,
        "sender_full_name": "oli",
        "timestamp": 1577443785
    },
    {
        "content": "<p>oh, also you need to rebase again to get my full PR</p>",
        "id": 184314493,
        "sender_full_name": "oli",
        "timestamp": 1577443820
    },
    {
        "content": "<p>but that shouldn't change anything</p>",
        "id": 184314499,
        "sender_full_name": "oli",
        "timestamp": 1577443842
    },
    {
        "content": "<p>Yeah, I figured it probably wouldn't make a difference so I haven't rebased yet</p>",
        "id": 184314518,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577443910
    },
    {
        "content": "<p>so... maybe const prop optimizing functions that are not generic should set the reveal mode to <code>Reveal::All</code>?</p>",
        "id": 184314559,
        "sender_full_name": "oli",
        "timestamp": 1577443930
    },
    {
        "content": "<p>I have a cut down version of <code>ufcs-polymorphic-paths.rs</code> that might be helpful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// run-pass</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Eq</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Size</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span>::<span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span>::<span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184314591,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444014
    },
    {
        "content": "<p>IIRC the <code>fn size()</code> function's <code>defaultness</code> is true</p>",
        "id": 184314656,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444126
    },
    {
        "content": "<p>So const prop should get a TooGeneric error</p>",
        "id": 184314662,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444143
    },
    {
        "content": "<p>huh, how is const prop active there at all?</p>",
        "id": 184314711,
        "sender_full_name": "oli",
        "timestamp": 1577444165
    },
    {
        "content": "<p>does it run on the static?</p>",
        "id": 184314713,
        "sender_full_name": "oli",
        "timestamp": 1577444169
    },
    {
        "content": "<p>do we const prop statics' and constants' bodies? :D</p>",
        "id": 184314720,
        "sender_full_name": "oli",
        "timestamp": 1577444176
    },
    {
        "content": "<p>uh</p>",
        "id": 184314733,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444190
    },
    {
        "content": "<p>Maybe I removed too much</p>",
        "id": 184314737,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444194
    },
    {
        "content": "<p>I was mostly responding to what you said here</p>\n<blockquote>\n<p>The constant being used is entriely monomorphic, but const prop still bails out on it and then codegen catches it</p>\n</blockquote>",
        "id": 184314765,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444244
    },
    {
        "content": "<p>ah yes, so I think my idea would work here. Since <code>main</code> is monomorphic, use <code>Reveal::all()</code> for the promoted</p>",
        "id": 184314835,
        "sender_full_name": "oli",
        "timestamp": 1577444339
    },
    {
        "content": "<p>Won't that cause the same original issue if you have a downstream specialization of <code>Size</code>?</p>",
        "id": 184314942,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444490
    },
    {
        "content": "<p>Is that still appropriate for monomorphic functions because specialization doesn't require substs to be applicable.</p>",
        "id": 184315006,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444574
    },
    {
        "content": "<p>Like in the test, you could have just written <code>Foo::my_func()</code> and downstream there's a specialization for <code>Foo</code>.</p>",
        "id": 184315033,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444635
    },
    {
        "content": "<p>But your function is still monomorphic</p>",
        "id": 184315077,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444646
    },
    {
        "content": "<p>you can't override <code>Size::size</code> for any type downstream</p>",
        "id": 184315094,
        "sender_full_name": "oli",
        "timestamp": 1577444691
    },
    {
        "content": "<p>a) because you have <code>impl&lt;T&gt; Size for T {}</code> here without any <code>default</code> keyowrd</p>",
        "id": 184315107,
        "sender_full_name": "oli",
        "timestamp": 1577444711
    },
    {
        "content": "<p>b) because if you know all the concrete types in this crate, it can't possibly be overriden in a downstream crate because noone can implement <code>Size</code> for types from your crate</p>",
        "id": 184315112,
        "sender_full_name": "oli",
        "timestamp": 1577444742
    },
    {
        "content": "<blockquote>\n<p>a) because you have impl&lt;T&gt; Size for T {} here without any default keyowrd</p>\n</blockquote>\n<p>Maybe this is part of the issue. From what I can tell</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Size</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>are represented the same in terms of <code>AssociatedItem::defaultness</code></p>",
        "id": 184315184,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577444878
    },
    {
        "content": "<p>yes and that's allright</p>",
        "id": 184315232,
        "sender_full_name": "oli",
        "timestamp": 1577444921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>   - rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::step                                                                                                                                                ▒\n      - 48.74% rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::terminator (inlined)                                                                                                                      ▒\n           rustc_mir::interpret::terminator::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_terminator (inlined)                                                                                                               ▒\n         - rustc_mir::interpret::terminator::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_fn_call                                                                                                                            ▒\n            - 39.91% &lt;rustc_mir::const_eval::CompileTimeInterpreter as rustc_mir::interpret::machine::Machine&gt;::find_mir_or_eval_fn                                                                                                          ▒\n               - rustc_mir::interpret::terminator::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_const_fn_call                                                                                                                ▒\n                  - 39.52% rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::copy_op (inlined)                                                                                                            ▒\n                     - rustc_mir::interpret::place::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::copy_op_no_validate                                                                                                              ▒\n                        - 39.28% rustc_mir::interpret::memory::Memory&lt;M&gt;::copy (inlined)                                                                                                                                                     ▒\n                           - rustc_mir::interpret::memory::Memory&lt;M&gt;::copy_repeatedly                                                                                                                                                        ▒\n                              - 37.58% rustc_mir::interpret::memory::Memory&lt;M&gt;::copy_undef_mask (inlined)                                                                                                                                    ▒\n                                 - 37.02% rustc::mir::interpret::allocation::Allocation&lt;Tag,Extra&gt;::compress_undef_range                                                                                                                     ▒\n                                    - 13.20% core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next                                                                                           ▒\n                                       - 8.74% core::mem::swap (inlined)                                                                                                                                                                     ▒\n                                          - core::ptr::swap_nonoverlapping_one (inlined)                                                                                                                                                     ▒\n                                               4.06% core::ptr::write (inlined)                                                                                                                                                              ▒\n                                             - 2.95% core::ptr::read (inlined)                                                                                                                                                               ▒\n                                                  core::intrinsics::copy_nonoverlapping (inlined)                                                                                                                                            ▒\n                                                  core::intrinsics::overlaps (inlined)                                                                                                                                                       ▒\n                                             - 1.73% core::intrinsics::copy_nonoverlapping (inlined)                                                                                                                                         ▒\n                                                  core::intrinsics::overlaps (inlined)                                                                                                                                                       ▒\n                                         1.48% core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::lt (inlined)\n</pre></div>",
        "id": 184315239,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577444937
    },
    {
        "content": "<p>but the <code>impl&lt;T&gt; Size for T {}</code> prevents any further specializations of <code>Size</code></p>",
        "id": 184315242,
        "sender_full_name": "oli",
        "timestamp": 1577444943
    },
    {
        "content": "<p>this is what's hot in my PR that wasn't before</p>",
        "id": 184315247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577444947
    },
    {
        "content": "<p><code>compress_undef_range</code> shows very high and wasn't like that before</p>",
        "id": 184315265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577444998
    },
    {
        "content": "<p>O_o</p>",
        "id": 184315324,
        "sender_full_name": "oli",
        "timestamp": 1577445056
    },
    {
        "content": "<p>which test is that happening on again?</p>",
        "id": 184315327,
        "sender_full_name": "oli",
        "timestamp": 1577445061
    },
    {
        "content": "<p>Well, that's not quite what we want though in terms of <code>Instance::resolve()</code> though right? </p>\n<p>I would think we'd want the specialization version to give <code>None</code> when <code>Reveal::UserFacing</code> and the non-specialization version to give <code>Some(...)</code>. Am I thinking about that correctly?</p>",
        "id": 184315334,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577445086
    },
    {
        "content": "<p>let me parse this sentence XD</p>",
        "id": 184315345,
        "sender_full_name": "oli",
        "timestamp": 1577445112
    },
    {
        "content": "<p>sorry :)</p>",
        "id": 184315346,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577445118
    },
    {
        "content": "<blockquote>\n<p>which test is that happening on again?</p>\n</blockquote>\n<p>the test is the ctfe one</p>",
        "id": 184315387,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445132
    },
    {
        "content": "<p>it's not your writing. it's if X None, if !X Some</p>",
        "id": 184315389,
        "sender_full_name": "oli",
        "timestamp": 1577445141
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>which test is that happening on again?</p>\n</blockquote>\n<p>the test is the ctfe one</p>\n</blockquote>\n<p>particularly <code>type LargeUninit = MaybeUninit&lt;[u8; 1 &lt;&lt; 24]&gt;;</code></p>",
        "id": 184315394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445165
    },
    {
        "content": "<p>Is this another instance of the \"trying to eval too large a Place\" issue?</p>",
        "id": 184315408,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577445207
    },
    {
        "content": "<p>yes-ish</p>",
        "id": 184315414,
        "sender_full_name": "oli",
        "timestamp": 1577445232
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/67539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67539\">#67539</a> is the issue I'm thinking of)</p>",
        "id": 184315459,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577445271
    },
    {
        "content": "<p>why is copying being executed for uninitialized memory</p>",
        "id": 184315463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445296
    },
    {
        "content": "<p>unsure what the code does</p>",
        "id": 184315465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445300
    },
    {
        "content": "<p>but seems like it should return earlier?</p>",
        "id": 184315476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445308
    },
    {
        "content": "<p>yes it should :D</p>",
        "id": 184315485,
        "sender_full_name": "oli",
        "timestamp": 1577445322
    },
    {
        "content": "<p>ok gonna try to see why is this not happening :)</p>",
        "id": 184315566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445392
    },
    {
        "content": "<p>because it's not implemented</p>",
        "id": 184315606,
        "sender_full_name": "oli",
        "timestamp": 1577445449
    },
    {
        "content": "<p>ohh, for which case? hold on :)</p>",
        "id": 184315613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445470
    },
    {
        "content": "<p>wesley found the correct issue</p>",
        "id": 184315616,
        "sender_full_name": "oli",
        "timestamp": 1577445476
    },
    {
        "content": "<p>ahh this <a href=\"https://github.com/rust-lang/rust/issues/67539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67539\">#67539</a> is the problem I'm hitting?</p>",
        "id": 184315672,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577445524
    },
    {
        "content": "<blockquote>\n<p>Well, that's not quite what we want though in terms of <code>Instance::resolve()</code> though right? </p>\n<p>I would think we'd want the specialization version to give <code>None</code> when <code>Reveal::UserFacing</code> and the non-specialization version to give <code>Some(...)</code>. Am I thinking about that correctly?</p>\n</blockquote>\n<p>I think you've got it but to reformulate, </p>\n<p>When <code>Reveal::UserFacing</code>, I'd expect that:</p>\n<ul>\n<li>Specialized impls cause <code>None</code> to be returned</li>\n<li>Trait default methods cause <code>Some(...)</code> to be returned</li>\n</ul>",
        "id": 184316173,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446229
    },
    {
        "content": "<p>Unless</p>",
        "id": 184316176,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446236
    },
    {
        "content": "<p>Is this allowed?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Baz</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184316265,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446333
    },
    {
        "content": "<p>I don't remember seeing this in the rfc</p>",
        "id": 184316270,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446343
    },
    {
        "content": "<p>hm... that may be possible</p>",
        "id": 184316452,
        "sender_full_name": "oli",
        "timestamp": 1577446603
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=056cb3d6b5708310bb7eabc141922f7b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=056cb3d6b5708310bb7eabc141922f7b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=056cb3d6b5708310bb7eabc141922f7b</a></p>",
        "id": 184316487,
        "sender_full_name": "oli",
        "timestamp": 1577446662
    },
    {
        "content": "<p>jup that works</p>",
        "id": 184316488,
        "sender_full_name": "oli",
        "timestamp": 1577446665
    },
    {
        "content": "<p>So I guess we can't do this</p>\n<blockquote>\n<p>Trait default methods cause Some(...) to be returned</p>\n</blockquote>",
        "id": 184316496,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446681
    },
    {
        "content": "<p>no</p>",
        "id": 184316536,
        "sender_full_name": "oli",
        "timestamp": 1577446689
    },
    {
        "content": "<p>So differentiating those cases doesn't matter</p>",
        "id": 184316537,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446691
    },
    {
        "content": "<p>So then, per your idea, we can pass <code>Reveal::All</code> when evaluating promoted &amp; constant values <em>in a monomorphic function</em> because either 1) we declared the type in which case we have all the relevant impls and coherence prevents downstream crates from adding new ones 2) this is somebody else's type and we can see all their impls.</p>",
        "id": 184316651,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577446919
    },
    {
        "content": "<p>well or 3) we can't possibly be using a type from a downstream crate XD</p>",
        "id": 184316710,
        "sender_full_name": "oli",
        "timestamp": 1577446967
    },
    {
        "content": "<p>I need a troll emoticon</p>",
        "id": 184316716,
        "sender_full_name": "oli",
        "timestamp": 1577446983
    },
    {
        "content": "<p>although... this is basically the <code>monomorphic function</code> rule you wrote</p>",
        "id": 184316746,
        "sender_full_name": "oli",
        "timestamp": 1577447007
    },
    {
        "content": "<blockquote>\n<p>coherence prevents downstream crates from adding new ones</p>\n</blockquote>\n<p>Is this actually true? Doesn't <code>#[fundamental]</code> let you do some horrible things?</p>",
        "id": 184316839,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577447083
    },
    {
        "content": "<p>/me doesn't actually know what <code>#[fundamental]</code> does</p>",
        "id": 184316891,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577447113
    },
    {
        "content": "<p>oh god</p>",
        "id": 184316916,
        "sender_full_name": "oli",
        "timestamp": 1577447146
    },
    {
        "content": "<p>I take it that's not a good sign <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 184316920,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577447159
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 184316973,
        "sender_full_name": "oli",
        "timestamp": 1577447186
    },
    {
        "content": "<p>I don't think you can break coherence even with fundamental types</p>",
        "id": 184317006,
        "sender_full_name": "oli",
        "timestamp": 1577447234
    },
    {
        "content": "<p>That's a relief</p>",
        "id": 184317012,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577447243
    },
    {
        "content": "<p>though full specialization may be unsound together with fundamental types, but I'll leave that to the experts</p>",
        "id": 184317023,
        "sender_full_name": "oli",
        "timestamp": 1577447273
    },
    {
        "content": "<p>for now, let's keep the simple case working as it was working before <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184317065,
        "sender_full_name": "oli",
        "timestamp": 1577447288
    },
    {
        "content": "<p>oh I broke miri</p>",
        "id": 184317071,
        "sender_full_name": "oli",
        "timestamp": 1577447306
    },
    {
        "content": "<p>/me goes fix stuff</p>",
        "id": 184317073,
        "sender_full_name": "oli",
        "timestamp": 1577447310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/67658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67658\">https://github.com/rust-lang/rust/pull/67658</a></p>",
        "id": 184317905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448620
    },
    {
        "content": "<p>wifi died, am back now</p>",
        "id": 184317915,
        "sender_full_name": "oli",
        "timestamp": 1577448635
    },
    {
        "content": "<p>after that I hope the main PR is ok :)</p>",
        "id": 184317918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448646
    },
    {
        "content": "<p>let's run perf I guess? Or you test it for the heavily regressed file manually?</p>",
        "id": 184317994,
        "sender_full_name": "oli",
        "timestamp": 1577448758
    },
    {
        "content": "<p>yep, I can do all that again :)</p>",
        "id": 184318003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448780
    },
    {
        "content": "<p>I guess I'm going to rebase the whole PR on top of master, your fix is already in and I can sit the place one on top of this fix</p>",
        "id": 184318065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448845
    },
    {
        "content": "<p>then run perf and see what happens</p>",
        "id": 184318068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448851
    },
    {
        "content": "<p>jup</p>",
        "id": 184318070,
        "sender_full_name": "oli",
        "timestamp": 1577448857
    },
    {
        "content": "<p>also, early return ;)</p>",
        "id": 184318074,
        "sender_full_name": "oli",
        "timestamp": 1577448864
    },
    {
        "content": "<p>Just suggested that too :)</p>",
        "id": 184318080,
        "sender_full_name": "bjorn3",
        "timestamp": 1577448885
    },
    {
        "content": "<p>XD</p>",
        "id": 184318093,
        "sender_full_name": "oli",
        "timestamp": 1577448906
    },
    {
        "content": "<p>ok if both of you have strong preference on that <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 184318111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448953
    },
    {
        "content": "<p>I kind of preferred to hit the existing Ok but gonna change to the early return version</p>",
        "id": 184318156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577448973
    },
    {
        "content": "<p>most of the functions in that file use early return</p>",
        "id": 184318235,
        "sender_full_name": "oli",
        "timestamp": 1577449114
    },
    {
        "content": "<p>just look two functions up. early return even though the body is trivial afterwards</p>",
        "id": 184318243,
        "sender_full_name": "oli",
        "timestamp": 1577449133
    },
    {
        "content": "<p>yeah already fixed it :)</p>",
        "id": 184318408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577449384
    },
    {
        "content": "<p>Are you sure that fixes the regression in <a href=\"https://github.com/rust-lang/rust/issues/67539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67539\">#67539</a>? When I tested the repro, I was still seeing slowness (see <a href=\"https://github.com/rust-lang/rust/issues/67539#issuecomment-568627324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67539#issuecomment-568627324\">https://github.com/rust-lang/rust/issues/67539#issuecomment-568627324</a>)</p>",
        "id": 184318935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450159
    },
    {
        "content": "<p>I don't think we should close that issue until we're sure it's resolved.</p>",
        "id": 184318981,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ^</p>",
        "id": 184318984,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450194
    },
    {
        "content": "<p>yeah I'm not sure, I need to run perf</p>",
        "id": 184319015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577450252
    },
    {
        "content": "<p>I guess I should've marked the PR as draft</p>",
        "id": 184319025,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577450269
    },
    {
        "content": "<p>It's fine :)</p>",
        "id": 184319068,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450284
    },
    {
        "content": "<p>I need to rebase the other PR first and place it on top of that one, wait hours to compile and then run the thing so maybe in 2hs I can answer :)</p>",
        "id": 184319071,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577450302
    },
    {
        "content": "<p>I just think the issue you're hitting is related but a little different than OP's and we shouldn't close the issue until we're sure their issue is resolved too</p>",
        "id": 184319073,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450310
    },
    {
        "content": "<p>ahh ya, that's also right yeah</p>",
        "id": 184319080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577450331
    },
    {
        "content": "<p>my guess is that my issue is going to be fixed by this</p>",
        "id": 184319087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577450353
    },
    {
        "content": "<p>Ah hah. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think we need a <code>.with_reveal_all()</code> <a href=\"https://github.com/rust-lang/rust/blob/8f5f8f916f00f7989a4ebf7b7dbfe1afd605f828/src/librustc/mir/interpret/queries.rs#L21\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8f5f8f916f00f7989a4ebf7b7dbfe1afd605f828/src/librustc/mir/interpret/queries.rs#L21\">here</a>. <code>codegen_static_initializer()</code> calls <code>const_eval_poly</code> which was getting <code>TooGeneric</code>.</p>",
        "id": 184319409,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577450892
    },
    {
        "content": "<p>Ugh but that causes another issue</p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when const-evaluating + checking `Alpha::V3::{{constant}}#0`\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs:5:10\n   |\nLL |     V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n   |          ^^^^^^^^\n   |\nnote: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs:5:10\n   |\nLL |     V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n   |          ^^^^^^^^\nnote: ...which requires const-evaluating `Alpha::V3::{{constant}}#0`...\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs:5:10\n   |\nLL |     V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n   |          ^^^^^^^^\n   = note: ...which requires computing layout of `Alpha`...\n   = note: ...which again requires const-evaluating + checking `Alpha::V3::{{constant}}#0`, completing the cycle\nnote: cycle used when collecting item types in top-level module\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs:1:1\n   |\nLL | / #[repr(u8)]\nLL | | enum Alpha {\nLL | |     V1 = 41,\nLL | |     V2 = Self::V1 as u8 + 1, // OK; See #50072.\n...  |\nLL | |\nLL | | fn main() {}\n   | |____________^\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 184319485,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577451016
    },
    {
        "content": "<p>wait how is that an issue? the cycle existed before your PR, too</p>",
        "id": 184320415,
        "sender_full_name": "oli",
        "timestamp": 1577452326
    },
    {
        "content": "<p>was trying out the following example ...</p>",
        "id": 184321337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453566
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184321345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453583
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago tmp]$ rustc --version\nrustc 1.41.0-nightly (c8ea4ace9 2019-12-14)\n[santiago@galago tmp]$ time rustc test.rs\n\nreal    0m0.428s\nuser    0m0.317s\nsys 0m0.041s\n</pre></div>",
        "id": 184321355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago rust2 (do-not-copy-zsts)]$ time ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs\n\nreal    0m0.774s\nuser    0m0.592s\nsys 0m0.120s\n</pre></div>",
        "id": 184321366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453624
    },
    {
        "content": "<p>that one is <a href=\"https://github.com/rust-lang/rust/pull/67658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67658\">https://github.com/rust-lang/rust/pull/67658</a></p>",
        "id": 184321418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453646
    },
    {
        "content": "<p>but I guess I have an old nightly</p>",
        "id": 184321434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453673
    },
    {
        "content": "<p>may be good idea to just try with master</p>",
        "id": 184321436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453682
    },
    {
        "content": "<p>going to do that</p>",
        "id": 184321463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577453736
    },
    {
        "content": "<p>Also try using hyperfine for benchmarking and using a bigger array.</p>",
        "id": 184321509,
        "sender_full_name": "bjorn3",
        "timestamp": 1577453773
    },
    {
        "content": "<p>hmm... all my PRs are up to date (enough)... what to hack on now?</p>",
        "id": 184323140,
        "sender_full_name": "oli",
        "timestamp": 1577456010
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you still have the llvm failures?</p>",
        "id": 184323154,
        "sender_full_name": "oli",
        "timestamp": 1577456041
    },
    {
        "content": "<p>If I do <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/post.20christmas.20hack.20days/near/184319409\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/post.20christmas.20hack.20days/near/184319409\">this</a> that resolves the LLVM issue</p>",
        "id": 184323210,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456081
    },
    {
        "content": "<p>But causes the cycle</p>",
        "id": 184323212,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456085
    },
    {
        "content": "<p>but the cycle is on master, too</p>",
        "id": 184323221,
        "sender_full_name": "oli",
        "timestamp": 1577456102
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 184323231,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456112
    },
    {
        "content": "<p>I don't think it was failing before my change</p>",
        "id": 184323237,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456125
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs#L5\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs#L5\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs#L5</a></p>",
        "id": 184323248,
        "sender_full_name": "oli",
        "timestamp": 1577456141
    },
    {
        "content": "<p>this is master</p>",
        "id": 184323251,
        "sender_full_name": "oli",
        "timestamp": 1577456145
    },
    {
        "content": "<p>huh</p>",
        "id": 184323283,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456162
    },
    {
        "content": "<p>:D</p>",
        "id": 184323302,
        "sender_full_name": "oli",
        "timestamp": 1577456165
    },
    {
        "content": "<p>Let me retest</p>",
        "id": 184323303,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456165
    },
    {
        "content": "<p>I mean the test isn't passing</p>",
        "id": 184323311,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456179
    },
    {
        "content": "<p>sure, maybe you need to --bless</p>",
        "id": 184323314,
        "sender_full_name": "oli",
        "timestamp": 1577456187
    },
    {
        "content": "<p>or maybe the span changed?</p>",
        "id": 184323317,
        "sender_full_name": "oli",
        "timestamp": 1577456211
    },
    {
        "content": "<p>Oh that could be</p>",
        "id": 184323318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456212
    },
    {
        "content": "<p>(Building....)</p>",
        "id": 184323322,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456220
    },
    {
        "content": "<p>like you probably have one less element in the query stack</p>",
        "id": 184323340,
        "sender_full_name": "oli",
        "timestamp": 1577456260
    },
    {
        "content": "<p>eh more</p>",
        "id": 184323347,
        "sender_full_name": "oli",
        "timestamp": 1577456267
    },
    {
        "content": "<p>We still have the change to the miri unleashed tests</p>",
        "id": 184323393,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456288
    },
    {
        "content": "<p>because now you enter the const_eval query with reveal::all, which still tries reveal::UserFacing first</p>",
        "id": 184323400,
        "sender_full_name": "oli",
        "timestamp": 1577456296
    },
    {
        "content": "<p>Are you concerned about that?</p>",
        "id": 184323406,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456306
    },
    {
        "content": "<p>let me check the other thread, sec</p>",
        "id": 184323415,
        "sender_full_name": "oli",
        "timestamp": 1577456321
    },
    {
        "content": "<p>ah</p>",
        "id": 184323444,
        "sender_full_name": "oli",
        "timestamp": 1577456354
    },
    {
        "content": "<p>wait that <em>wasn't</em> fixed by this?</p>",
        "id": 184323449,
        "sender_full_name": "oli",
        "timestamp": 1577456363
    },
    {
        "content": "<p>I can double check but no, I believe it's still changed</p>",
        "id": 184323460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456385
    },
    {
        "content": "<p>ah</p>",
        "id": 184323465,
        "sender_full_name": "oli",
        "timestamp": 1577456395
    },
    {
        "content": "<p>right</p>",
        "id": 184323466,
        "sender_full_name": "oli",
        "timestamp": 1577456395
    },
    {
        "content": "<p>these are constants</p>",
        "id": 184323469,
        "sender_full_name": "oli",
        "timestamp": 1577456399
    },
    {
        "content": "<p>you fixed statics</p>",
        "id": 184323511,
        "sender_full_name": "oli",
        "timestamp": 1577456415
    },
    {
        "content": "<p>You said earlier about eval-ing constants with <code>Reveal::All</code>, I assume that would fix that</p>",
        "id": 184323540,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456469
    },
    {
        "content": "<p>So I should probably do that</p>",
        "id": 184323548,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456478
    },
    {
        "content": "<p>basically <a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296</a> needs the same change if <a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301</a> is <code>!needs_subst()</code></p>",
        "id": 184323553,
        "sender_full_name": "oli",
        "timestamp": 1577456484
    },
    {
        "content": "<p>Easy enough</p>",
        "id": 184323616,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456527
    },
    {
        "content": "<p>I should have test results in two or three minutes</p>",
        "id": 184323631,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456547
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 184323635,
        "sender_full_name": "oli",
        "timestamp": 1577456552
    },
    {
        "content": "<p>I need to figure out some day what <code>tcx.param_env</code> actually does</p>",
        "id": 184323645,
        "sender_full_name": "oli",
        "timestamp": 1577456566
    },
    {
        "content": "<p><span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 184323660,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456585
    },
    {
        "content": "<p>You were right</p>",
        "id": 184323851,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456774
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr b/src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr\nindex dc4050e44ab..db535b53fcf 100644\n--- a/src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr\n+++ b/src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr\n@@ -4,6 +4,11 @@ error[E0391]: cycle detected when const-evaluating + checking `Alpha::V3::{{cons\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    |\n+note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n+  --&gt; $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^\n note: ...which requires const-evaluating `Alpha::V3::{{constant}}#0`...\n   --&gt; $DIR/self-in-enum-definition.rs:5:10\n    |\n</pre></div>",
        "id": 184323856,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456794
    },
    {
        "content": "<blockquote>\n<p>I need to figure out some day what <code>tcx.param_env</code> actually does</p>\n</blockquote>\n<p>I think the docs for it are a good starter.</p>\n<p>The docs for <code>ParamEnv</code>:</p>\n<blockquote>\n<p>When type checking, we use the ParamEnv to track details about the set of where-clauses that are in scope at this particular point.</p>\n</blockquote>\n<p>The docs for <code>Reveal</code>:</p>\n<blockquote>\n<p>Depending on the stage of compilation, we want projection to be more or less conservative.</p>\n<p>At type-checking time, we refuse to project any associated type that is marked default.</p>\n<p>At codegen time, all monomorphic projections will succeed. Also, impl Trait is normalized to the concrete type, which has to be already collected by type-checking.</p>\n</blockquote>",
        "id": 184323894,
        "sender_full_name": "bjorn3",
        "timestamp": 1577456865
    },
    {
        "content": "<p>So there's one remaining failure:</p>\n<div class=\"codehilite\"><pre><span></span>---- [ui] ui/rfcs/rfc-2005-default-binding-mode/constref.rs stdout ----\n\nerror: test compilation failed although it shouldn&#39;t!\nstatus: exit code: 1\ncommand: &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/rfcs/rfc-2005-default-binding-mode/constref/a&quot; &quot;-Crpath&quot; &quot;-Cdebuginfo=0&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/rfcs/rfc-2005-default-binding-mode/constref/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nerror[E0158]: associated consts cannot be referenced in patterns\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs:32:10\n   |\nLL |         (i32::CONST_REF_DEFAULT, i32::CONST_REF, i64::CONST_REF_DEFAULT, i64::CONST_REF) =&gt; true,\n   |          ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0158`.\n\n------------------------------------------\n\n\n\nfailures:\n    [ui] ui/rfcs/rfc-2005-default-binding-mode/constref.rs\n</pre></div>",
        "id": 184323948,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577456903
    },
    {
        "content": "<blockquote>\n<p>basically <a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L296</a> needs the same change if <a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L301</a> is <code>!needs_subst()</code></p>\n</blockquote>\n<p><del>Actually, wait. Won't this cause us to use <code>Reveal::All</code> for everything not just constants?</del></p>\n<p>The same logic we discussed earlier applies to everything not just constants.</p>",
        "id": 184324052,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457007
    },
    {
        "content": "<p>yes, but if the thing is monomorphic, shouldn't we?</p>",
        "id": 184324087,
        "sender_full_name": "oli",
        "timestamp": 1577457056
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184324113,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457081
    },
    {
        "content": "<p>so the remaining failure is super weird</p>",
        "id": 184324186,
        "sender_full_name": "oli",
        "timestamp": 1577457145
    },
    {
        "content": "<p>that test checks whether associated constants can be used in patterns!?</p>",
        "id": 184324193,
        "sender_full_name": "oli",
        "timestamp": 1577457157
    },
    {
        "content": "<p>so that feature appears to exists</p>",
        "id": 184324201,
        "sender_full_name": "oli",
        "timestamp": 1577457164
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184324204,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457167
    },
    {
        "content": "<p>what on earth is that error</p>",
        "id": 184324205,
        "sender_full_name": "oli",
        "timestamp": 1577457168
    },
    {
        "content": "<p>I remember spending a bunch of time looking at this Christmas Eve but I don't remember what I found</p>",
        "id": 184324220,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457189
    },
    {
        "content": "<p>I think I came to the conclusion something in the HIR -&gt; MIR layer needed to use <code>Reveal::All</code> but that caused a bunch of other issues</p>",
        "id": 184324232,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I understand what <code>ParamEnv</code> does, I don't understand how <code>tcx.param_env</code> can create a <code>ParamEnv</code> from the ether. Like what where clauses are available here?</p>",
        "id": 184324233,
        "sender_full_name": "oli",
        "timestamp": 1577457216
    },
    {
        "content": "<p>And seems like a bad fix to me</p>",
        "id": 184324255,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457242
    },
    {
        "content": "<p>I am mostly wondering why the rustc source contains <code>\"associated consts cannot be referenced in patterns\"</code> somewhere if we have a feature permitting just that</p>",
        "id": 184324275,
        "sender_full_name": "oli",
        "timestamp": 1577457242
    },
    {
        "content": "<p>huh</p>",
        "id": 184324298,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457256
    },
    {
        "content": "<p>It's not feature gated?</p>",
        "id": 184324301,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457261
    },
    {
        "content": "<p>nope: no gates in this test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs</a></p>",
        "id": 184324324,
        "sender_full_name": "oli",
        "timestamp": 1577457308
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> I understand what <code>ParamEnv</code> does, I don't understand how <code>tcx.param_env</code> can create a <code>ParamEnv</code> from the ether. Like what where clauses are available here?</p>\n</blockquote>\n<p>It takes a <code>DefId</code>, it gets them from there (using <code>predicates_of</code>)</p>",
        "id": 184324342,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1577457341
    },
    {
        "content": "<p>I think what the error message is trying to tell us is that you can't write <code>Trait::ASSOC_CONSTANT</code> without this somehow resolving to a <code>ConcreteType::ASSOC_CONSTANT</code></p>",
        "id": 184324345,
        "sender_full_name": "oli",
        "timestamp": 1577457347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> oh, so it's basically just like IdentitySubsts, you get all the where bounds, but they are still polymorphic where bounds</p>",
        "id": 184324425,
        "sender_full_name": "oli",
        "timestamp": 1577457438
    },
    {
        "content": "<p>Yeah seems like a bad error message</p>",
        "id": 184324435,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457455
    },
    {
        "content": "<p>Yes</p>",
        "id": 184324437,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1577457458
    },
    {
        "content": "<p>Maybe it needs to say something like \"generic associated constants\"</p>",
        "id": 184324492,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ok so I think I know what's going on. This is supposed to catch <code>T::ASSOC_CONST</code> in patterns, but it currently does so by relying on const eval to bail out with <code>TooGeneric</code>. Your changes now make it bail out immediately for <code>ConcreteType::TRAIT_ASSOC_CONST</code> because that is only available in reveal_all mode</p>",
        "id": 184324590,
        "sender_full_name": "oli",
        "timestamp": 1577457616
    },
    {
        "content": "<p>Interesting...</p>",
        "id": 184324601,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457641
    },
    {
        "content": "<p>(The const prop change fixes those miri unleashed constant tests BTW)</p>",
        "id": 184324606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457659
    },
    {
        "content": "<p>this seems totally fine to use <code>self.param_env.with_reveal_all()</code>, because just like with const prop of non-generic functions, patterns are always monomorphic even if their function isn't</p>",
        "id": 184324614,
        "sender_full_name": "oli",
        "timestamp": 1577457670
    },
    {
        "content": "<p>now you said something about more failures being caused by this</p>",
        "id": 184324622,
        "sender_full_name": "oli",
        "timestamp": 1577457698
    },
    {
        "content": "<p>so I'm unsure what's up with that, do you remember anything?</p>",
        "id": 184324626,
        "sender_full_name": "oli",
        "timestamp": 1577457721
    },
    {
        "content": "<p>I may have made the change too high in the compilation process so it affected too many things</p>",
        "id": 184324675,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457757
    },
    {
        "content": "<p>oh also please leave comments at all the <code>with_reveal_all</code> sites explaining why we are using it for each specific site</p>",
        "id": 184324682,
        "sender_full_name": "oli",
        "timestamp": 1577457765
    },
    {
        "content": "<p>Let see if I can pull it out of the reflog</p>",
        "id": 184324684,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457766
    },
    {
        "content": "<p>yea if you made the <code>param_env</code> field <code>reveal_all</code> I'd totally understand this causing more failures</p>",
        "id": 184324706,
        "sender_full_name": "oli",
        "timestamp": 1577457821
    },
    {
        "content": "<p>I think this was the patch I tried:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/librustc_mir/hair/pattern/mod.rs b/src/librustc_mir/hair/pattern/mod.rs</span>\n<span class=\"gh\">index 869aeeba418..051a0177022 100644</span>\n<span class=\"gd\">--- a/src/librustc_mir/hair/pattern/mod.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/hair/pattern/mod.rs</span>\n<span class=\"gu\">@@ -743,7 +743,7 @@ impl&lt;&#39;a, &#39;tcx&gt; PatCtxt&lt;&#39;a, &#39;tcx&gt; {</span>\n         let kind = match res {\n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) =&gt; {\n                 let substs = self.tables.node_substs(id);\n<span class=\"gd\">-                match self.tcx.const_eval_resolve(self.param_env, def_id, substs, Some(span)) {</span>\n<span class=\"gi\">+                match self.tcx.const_eval_resolve(self.param_env.with_reveal_all(), def_id, substs, Some(span)) {</span>\n                     Ok(value) =&gt; {\n                         let pattern = self.const_to_pat(value, id, span);\n                         if !is_associated_const {\n</pre></div>",
        "id": 184324762,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457890
    },
    {
        "content": "<p>yea, that looks correct to me</p>",
        "id": 184324765,
        "sender_full_name": "oli",
        "timestamp": 1577457900
    },
    {
        "content": "<p>Ok. Let me try applying it and see what happens.</p>",
        "id": 184324787,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577457929
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>test result: ok. 9410 passed; 0 failed; 45 ignored; 0 measured; 0 filtered out\n</pre></div>\n\n\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 184325023,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577458208
    },
    {
        "content": "<p>woooo, awesome</p>",
        "id": 184325062,
        "sender_full_name": "oli",
        "timestamp": 1577458269
    },
    {
        "content": "<p><span aria-label=\"ship\" class=\"emoji emoji-1f6a2\" role=\"img\" title=\"ship\">:ship:</span> it :D (ok no, I'll review first)</p>",
        "id": 184325074,
        "sender_full_name": "oli",
        "timestamp": 1577458289
    },
    {
        "content": "<p>Writing comments now</p>",
        "id": 184325077,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577458306
    },
    {
        "content": "<p>:)</p>",
        "id": 184325078,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577458307
    },
    {
        "content": "<p>in case the rollup in <a href=\"https://github.com/rust-lang/rust/pull/67660\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67660\">https://github.com/rust-lang/rust/pull/67660</a> goes through, can you also remove my hacks from <a href=\"https://github.com/rust-lang/rust/pull/67631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67631\">https://github.com/rust-lang/rust/pull/67631</a> in your PR?</p>",
        "id": 184325222,
        "sender_full_name": "oli",
        "timestamp": 1577458450
    },
    {
        "content": "<p>Yeah I can do that</p>",
        "id": 184325242,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577458476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago tmp]$ hyperfine --warmup 3 &#39;rustc /tmp/test.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\nBenchmark #1: rustc /tmp/test.rs\n  Time (mean ± σ):      2.977 s ±  0.124 s    [User: 2.641 s, System: 0.092 s]\n  Range (min … max):    2.761 s …  3.140 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs\n  Time (mean ± σ):      4.334 s ±  0.240 s    [User: 3.888 s, System: 0.131 s]\n  Range (min … max):    3.923 s …  4.642 s    10 runs\n\nSummary\n  &#39;rustc /tmp/test.rs&#39; ran\n    1.46 ± 0.10 times faster than &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\n[santiago@galago tmp]$ hyperfine --warmup 3 &#39;/home/santiago/src/oss/r /rustc /tmp/test.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\nrayon/       rust0/       rust1/       rust2/       rust3/       rustc-guide/ rust-clippy/ rustc-perf/\n[santiago@galago tmp]$ hyperfine --warmup 3 &#39;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\nBenchmark #1: /home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs\n  Time (mean ± σ):      4.726 s ±  0.273 s    [User: 4.293 s, System: 0.172 s]\n  Range (min … max):    4.045 s …  5.002 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs\n  Time (mean ± σ):      4.606 s ±  0.181 s    [User: 4.251 s, System: 0.140 s]\n  Range (min … max):    4.310 s …  4.978 s    10 runs\n\nSummary\n  &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39; ran\n    1.03 ± 0.07 times faster than &#39;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\n</pre></div>",
        "id": 184325737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459028
    },
    {
        "content": "<p>rustc is <code>rustc 1.41.0-nightly (c8ea4ace9 2019-12-14)</code></p>",
        "id": 184325789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459064
    },
    {
        "content": "<p>the one in rust1 is master and the one in rust2 is master with the patch we were talking about</p>",
        "id": 184325804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459082
    },
    {
        "content": "<p>so it doesn't fix the issue reported</p>",
        "id": 184325815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459092
    },
    {
        "content": "<p>I can try and check if it does fix my issue</p>",
        "id": 184325820,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459102
    },
    {
        "content": "<p>and my test ...</p>",
        "id": 184326171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459481
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\nBenchmark #1: /home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs\n  Time (mean ± σ):      7.364 s ±  0.140 s    [User: 6.524 s, System: 0.707 s]\n  Range (min … max):    7.101 s …  7.585 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs\n  Time (mean ± σ):      6.539 s ±  0.265 s    [User: 5.828 s, System: 0.523 s]\n  Range (min … max):    6.291 s …  7.071 s    10 runs\n\nSummary\n  &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39; ran\n    1.13 ± 0.05 times faster than &#39;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\n[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\n</pre></div>",
        "id": 184326172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459487
    },
    {
        "content": "<p>makes it a bit faster</p>",
        "id": 184326195,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459511
    },
    {
        "content": "<p>hmm... so I looked at your callgraph dump</p>",
        "id": 184326264,
        "sender_full_name": "oli",
        "timestamp": 1577459584
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;rustc /tmp/test.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\nBenchmark #1: rustc /tmp/test.rs\n  Time (mean ± σ):      1.438 s ±  0.154 s    [User: 1.376 s, System: 0.048 s]\n  Range (min … max):    1.310 s …  1.820 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs\n  Time (mean ± σ):      1.840 s ±  0.336 s    [User: 1.763 s, System: 0.057 s]\n  Range (min … max):    1.576 s …  2.555 s    10 runs\n\nSummary\n  &#39;rustc /tmp/test.rs&#39; ran\n    1.28 ± 0.27 times faster than &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc /tmp/test.rs&#39;\n</pre></div>",
        "id": 184326265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459586
    },
    {
        "content": "<p>it looks like you're not on top of master</p>",
        "id": 184326270,
        "sender_full_name": "oli",
        "timestamp": 1577459591
    },
    {
        "content": "<p>yeah the callgraph dump is old</p>",
        "id": 184326278,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459608
    },
    {
        "content": "<p>ok</p>",
        "id": 184326279,
        "sender_full_name": "oli",
        "timestamp": 1577459613
    },
    {
        "content": "<p>So we are in <a href=\"https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L25\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L25\">https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L25</a></p>",
        "id": 184326285,
        "sender_full_name": "oli",
        "timestamp": 1577459633
    },
    {
        "content": "<p>so this patch makes things a bit faster 3% for the reported issue and 13% for my case</p>",
        "id": 184326332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459645
    },
    {
        "content": "<p>still my case is 27% slower than an old nightly</p>",
        "id": 184326338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459657
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L53\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L53\">https://github.com/rust-lang/rust/blob/3ac40b69c75929dac5115b6a49eb4f1ecc352416/src/librustc_mir/const_eval/machine.rs#L53</a> seems to be the culprit entry point</p>",
        "id": 184326345,
        "sender_full_name": "oli",
        "timestamp": 1577459670
    },
    {
        "content": "<p>yes</p>",
        "id": 184326362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459696
    },
    {
        "content": "<p>can we break out of that earlier would be the question?</p>",
        "id": 184326394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459730
    },
    {
        "content": "<p>what's the program you're compiling right now to check the perf?</p>",
        "id": 184326406,
        "sender_full_name": "oli",
        "timestamp": 1577459759
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_fn, const_let)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Try to make CTFE actually do a lot of computation, without producing a big result.</span>\n<span class=\"c1\">// The const fn expressions evaluated here take a dummy u32 argument because otherwise</span>\n<span class=\"c1\">// const fn memoisation is able to eliminate a lot of the work.</span>\n<span class=\"c1\">// And without support for loops.</span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Base case: Use 16 at the end to avoid function calls at the leafs as much as possible.</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$e</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Recursive case: Take a 16</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"cp\">$($n</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">e</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"o\">!</span><span class=\"p\">([</span><span class=\"cp\">$($n</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Recursive case: Take a 8</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"cp\">$($n</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">e</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"o\">!</span><span class=\"p\">([</span><span class=\"cp\">$($n</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Recursive case: Take a 4</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"cp\">$($n</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">e</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"o\">!</span><span class=\"p\">([</span><span class=\"cp\">$($n</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Recursive case: Take a 2</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"cp\">$($n</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span>: <span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">e</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"o\">!</span><span class=\"p\">([</span><span class=\"cp\">$($n</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">expensive_static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$name</span>: <span class=\"nc\">ident</span><span class=\"w\"> </span>: <span class=\"cp\">$T</span>: <span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span>: <span class=\"nc\">expr</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$count</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"w\"> </span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const_repeat</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$count</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$T</span><span class=\"p\">);)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span>: <span class=\"nb\">Sync</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// The numbers in the brackets are iteration counts. E.g., [4 16 16] means</span>\n<span class=\"c1\">// 4 * 16 * 16 = 2^(2+4+4) = 2^10 iterations.</span>\n<span class=\"c1\">//expensive_static!(CAST: usize = 42i32 as u8 as u64 as i8 as isize as usize; [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(CONST_FN: i32 = inc(42); [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(FIELDS: &amp;&#39;static i32 = &amp;(&quot;bar&quot;, 42, &quot;foo&quot;, 3.14).1; [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(FORCE_ALLOC: i32 = *****(&amp;&amp;&amp;&amp;&amp;5); [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(CHECKED_INDEX: u8 = b&quot;foomp&quot;[3]; [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(OPS: i32 = ((((10 &gt;&gt; 1) + 3) * 7) / 2 - 12) &lt;&lt; 4; [4 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(RELOCATIONS : &amp;&#39;static str = &quot;hello&quot;; [8 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(UNSIZE_SLICE: &amp;&#39;static [u8] = b&quot;foo&quot;; [4 16 16 16 16 16]);</span>\n<span class=\"c1\">//expensive_static!(UNSIZE_TRAIT: &amp;&#39;static Trait = &amp;42u32; [4 16 16 16 16 16]);</span>\n\n<span class=\"c1\">// copying all these zeros and the corresponding definedness bits can be expensive and is probably</span>\n<span class=\"c1\">// prone to regressions.</span>\n<span class=\"c1\">// 24 is an exponent that makes the repeat expression take less than two seconds to compute</span>\n<span class=\"c1\">//const FOO: [i32; 1 &lt;&lt; 30] = [0; 1 &lt;&lt; 30];</span>\n\n<span class=\"c1\">// Try CTFE that operate on values that contain largely uninitialized memory, not requiring any</span>\n<span class=\"c1\">// particular representation in MIR.</span>\n<span class=\"k\">type</span> <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// copying uninitialized bytes could also be expensive and could be optimized independently, so</span>\n<span class=\"c1\">// track regressions here separately. It should also be less costly to compose new values</span>\n<span class=\"c1\">// containing largly undef bytes.</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Check the evaluation time of passing through a function.</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">id</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">build</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BUILD</span>: <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Largely uninitialized memory but initialized with tag at the start, in both cases.</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NONE</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">LargeUninit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SOME</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">LargeUninit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"c1\">// A large uninit surrounded by initialized bytes whose representation is surely computed.</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SURROUND</span>: <span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LargeUninit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SURROUND_ID</span>: <span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LargeUninit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Check actual codegen for these values.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STATIC_BAR</span>: <span class=\"nc\">LargeUninit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STATIC_NONE</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">LargeUninit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STATIC_SOME</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">LargeUninit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184326484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459820
    },
    {
        "content": "<p>i guess I can reduce that and just leave the <code>LargeUninit</code> stuff around</p>",
        "id": 184326501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459847
    },
    {
        "content": "<p>I can run perf again with the updated thing too</p>",
        "id": 184326512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577459874
    },
    {
        "content": "<p>so ...</p>",
        "id": 184326693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460057
    },
    {
        "content": "<p>running perf on my nightly and my pr</p>",
        "id": 184326706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    45.83%             librustc_driver-fb30b83f718b75a1.so  [.] rustc::mir::interpret::allocation::Allocation&lt;Tag,Extra&gt;::compress_undef_range\n    38.10%             librustc_driver-fb30b83f718b75a1.so  [.] core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next\n     7.35%             librustc_driver-fb30b83f718b75a1.so  [.] &lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write\n</pre></div>",
        "id": 184326712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460084
    },
    {
        "content": "<p>this is <code>perf diff</code></p>",
        "id": 184326716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460088
    },
    {
        "content": "<p>45% slowdown in <code>compress_undef_range</code></p>",
        "id": 184326723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460106
    },
    {
        "content": "<p>and that's basically <code>copy_repeatedly</code></p>",
        "id": 184327000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460395
    },
    {
        "content": "<p>ok so it seems like this is not returning early</p>",
        "id": 184327095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577460486
    },
    {
        "content": "<p>walking fuchur, I'll be back in an hour</p>",
        "id": 184327551,
        "sender_full_name": "oli",
        "timestamp": 1577461034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just in case, I didn't run perf on the issue so I'm not really sure what's going on</p>",
        "id": 184329661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577463555
    },
    {
        "content": "<p>Oh right, the PR you Rebased over only cares about zsts</p>",
        "id": 184329663,
        "sender_full_name": "oli",
        "timestamp": 1577463555
    },
    {
        "content": "<p>in my case the example I'm running is not a zst</p>",
        "id": 184329674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577463572
    },
    {
        "content": "<p>Yea</p>",
        "id": 184329684,
        "sender_full_name": "oli",
        "timestamp": 1577463583
    },
    {
        "content": "<p>so of course the example is not going to help</p>",
        "id": 184329695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577463595
    },
    {
        "content": "<p>unsure what to do for my case</p>",
        "id": 184329760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577463615
    },
    {
        "content": "<p>There was a PR by someone. They closed it themselves b/c they don't have time. Iirc that prevented copies on undef</p>",
        "id": 184329774,
        "sender_full_name": "oli",
        "timestamp": 1577463635
    },
    {
        "content": "<p>Can we resolve this by optimizing <code>compress_undef_range()</code> more?</p>",
        "id": 184329781,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577463652
    },
    {
        "content": "<p>Not really, the slow thing is the bytes, not the undef mask</p>",
        "id": 184329849,
        "sender_full_name": "oli",
        "timestamp": 1577463742
    },
    {
        "content": "<p>Like, what if instead of reading 1 byte at a time, we read 4 bytes or 8 or something.</p>",
        "id": 184329856,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577463754
    },
    {
        "content": "<p>I assume there's some constant overhead to reading any number of bytes</p>",
        "id": 184329861,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577463766
    },
    {
        "content": "<p>Could we reduce that by reading more at a time?</p>",
        "id": 184329862,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577463773
    },
    {
        "content": "<p>Ah, true</p>",
        "id": 184329865,
        "sender_full_name": "oli",
        "timestamp": 1577463777
    },
    {
        "content": "<p>But that's an orthogonal optimization</p>",
        "id": 184329878,
        "sender_full_name": "oli",
        "timestamp": 1577463791
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184329879,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577463796
    },
    {
        "content": "<p>Let's do that in a separate PR</p>",
        "id": 184330067,
        "sender_full_name": "oli",
        "timestamp": 1577464008
    },
    {
        "content": "<p>The \"everything is undef, copy nothing\" optimization is basically what is needed to undo the regression here</p>",
        "id": 184330100,
        "sender_full_name": "oli",
        "timestamp": 1577464041
    },
    {
        "content": "<p>yeah, that seems better :)</p>",
        "id": 184330229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did you find a PR or something?</p>",
        "id": 184330301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464244
    },
    {
        "content": "<p>jep: literally this second: <a href=\"https://github.com/rust-lang/rust/pull/62655\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62655\">https://github.com/rust-lang/rust/pull/62655</a></p>",
        "id": 184330323,
        "sender_full_name": "oli",
        "timestamp": 1577464288
    },
    {
        "content": "<p>ok</p>",
        "id": 184330392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464362
    },
    {
        "content": "<p>going for lunch, maybe later I can provide a PR like that one</p>",
        "id": 184330399,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> let's close this <a href=\"https://github.com/rust-lang/rust/pull/67658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67658\">https://github.com/rust-lang/rust/pull/67658</a> I guess?</p>",
        "id": 184330415,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464392
    },
    {
        "content": "<p>nono :D</p>",
        "id": 184330425,
        "sender_full_name": "oli",
        "timestamp": 1577464409
    },
    {
        "content": "<p>again, another orthogonal optimization</p>",
        "id": 184330437,
        "sender_full_name": "oli",
        "timestamp": 1577464428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you want to proceed with the reading more bytes idea? or should I?</p>",
        "id": 184330536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464519
    },
    {
        "content": "<p>If you have other stuff to work on, I don't mind taking it</p>",
        "id": 184330561,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577464561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you want to test your zst fix PR, you can add <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dd34e88a742b93dad4433bb46e22a666\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dd34e88a742b93dad4433bb46e22a666\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dd34e88a742b93dad4433bb46e22a666</a> to the ui test suite :D</p>",
        "id": 184330605,
        "sender_full_name": "oli",
        "timestamp": 1577464569
    },
    {
        "content": "<p>basically this is a canary that will just never finish compiling</p>",
        "id": 184330618,
        "sender_full_name": "oli",
        "timestamp": 1577464583
    },
    {
        "content": "<p>well, maybe not just the test, but add a comment that the test should compile in microseconds</p>",
        "id": 184330656,
        "sender_full_name": "oli",
        "timestamp": 1577464627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Should we r- your PR to work around the const prop issue since the rollup failed?</p>",
        "id": 184330660,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577464635
    },
    {
        "content": "<p>yes</p>",
        "id": 184330662,
        "sender_full_name": "oli",
        "timestamp": 1577464640
    },
    {
        "content": "<blockquote>\n<p>If you have other stuff to work on, I don't mind taking it</p>\n</blockquote>\n<p>please do</p>",
        "id": 184330778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577464754
    },
    {
        "content": "<p>/me went out to get some lunch &amp; is back now.</p>",
        "id": 184332556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577466769
    },
    {
        "content": "<p>I couldn't find any MIR stuff to do so I'm fixing match ICEs around constants in patterns now</p>",
        "id": 184332978,
        "sender_full_name": "oli",
        "timestamp": 1577467264
    },
    {
        "content": "<p>One maybe kind of large project would be to do something about this hack in the Inliner <a href=\"https://github.com/rust-lang/rust/issues/67557#issuecomment-568746201\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67557#issuecomment-568746201\">https://github.com/rust-lang/rust/issues/67557#issuecomment-568746201</a> which is pretty annoying and means we miss a lot of inlining opportunity within a module.</p>",
        "id": 184333115,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577467469
    },
    {
        "content": "<p>XD yea that hack is horrible</p>",
        "id": 184333199,
        "sender_full_name": "oli",
        "timestamp": 1577467600
    },
    {
        "content": "<p>I swear I've wasted at least 4 hours trying to figure out why a mir-opt test isn't working only to realize I need to move one function above another</p>",
        "id": 184333233,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577467681
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 184333286,
        "sender_full_name": "oli",
        "timestamp": 1577467707
    },
    {
        "content": "<p>Without touching the query system to detect cycles, the only fix idea I've had so far is to add a <code>has_function_call_to(body: DefId, check: DefId) -&gt; bool</code> query that tells you whether <code>body</code>'s <code>mir::Body</code> contains a <code>TerminatorKind</code> call to <code>check</code>, recursively</p>",
        "id": 184333381,
        "sender_full_name": "oli",
        "timestamp": 1577467868
    },
    {
        "content": "<p>though then you'd need a <code>&amp;[DefId]</code> for <code>check</code>, because you need to build up the call stack</p>",
        "id": 184333404,
        "sender_full_name": "oli",
        "timestamp": 1577467907
    },
    {
        "content": "<p>for better caching <code>Set&lt;DefId&gt;</code> would make more sense than <code>&amp;[DefId]</code>, though using that as a query key may be... bad</p>",
        "id": 184333455,
        "sender_full_name": "oli",
        "timestamp": 1577467949
    },
    {
        "content": "<p>This is not ideal, but what if we ran all the other optimizations except the inliner and made a query for that? We could then use that query in the inliner without cycles.</p>",
        "id": 184333590,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577468139
    },
    {
        "content": "<p>the other optimizations may be more effective after inlining</p>",
        "id": 184333633,
        "sender_full_name": "oli",
        "timestamp": 1577468168
    },
    {
        "content": "<p>We'd of course miss things but we don't run the inliner currently anyway for normal builds so we may be in a better state than we are now</p>",
        "id": 184333634,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577468168
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184333637,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577468173
    },
    {
        "content": "<p>for the reported issue ...</p>",
        "id": 184337726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473306
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;rustc src/main.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\nBenchmark #1: rustc src/main.rs\n  Time (mean ± σ):     16.157 s ±  1.099 s    [User: 16.014 s, System: 0.061 s]\n  Range (min … max):   14.315 s … 17.247 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs\n  Time (mean ± σ):     13.251 s ±  0.651 s    [User: 13.132 s, System: 0.058 s]\n  Range (min … max):   12.470 s … 14.153 s    10 runs\n\nSummary\n  &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39; ran\n    1.22 ± 0.10 times faster than &#39;rustc src/main.rs&#39;\n</pre></div>",
        "id": 184337729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473309
    },
    {
        "content": "<p>the PR is 22% faster</p>",
        "id": 184337735,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473321
    },
    {
        "content": "<p>that has exercised this example ...</p>",
        "id": 184337796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">100_000_000</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184337799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473369
    },
    {
        "content": "<p>and for the ctfe stress test we get ...</p>",
        "id": 184337930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;rustc src/main.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\nBenchmark #1: rustc src/main.rs\n  Time (mean ± σ):      1.650 s ±  0.158 s    [User: 1.352 s, System: 0.337 s]\n  Range (min … max):    1.334 s …  1.814 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs\n  Time (mean ± σ):      2.689 s ±  0.470 s    [User: 2.483 s, System: 0.237 s]\n  Range (min … max):    2.272 s …  3.609 s    10 runs\n\nSummary\n  &#39;rustc src/main.rs&#39; ran\n    1.63 ± 0.32 times faster than &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\n</pre></div>",
        "id": 184337931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473554
    },
    {
        "content": "<p>63% slower so no improvements at all</p>",
        "id": 184337975,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473564
    },
    {
        "content": "<p>can check against current master quickly</p>",
        "id": 184337980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577473575
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 184339756,
        "sender_full_name": "oli",
        "timestamp": 1577475877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I paired on this on a call and we've got this cut-down repro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">100_000_000</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>from ~9 seconds on my machine to &lt; 0.3.</p>",
        "id": 184339805,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577475949
    },
    {
        "content": "<p>The fix is <a href=\"https://github.com/rust-lang/rust/issues/67667\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67667\">#67667</a></p>",
        "id": 184339811,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577475959
    },
    {
        "content": "<p>I've got some stuff around the house I need to go do so I'm signing off. This was a lot of fun and I'm looking forward tomorrow! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184340018,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577476172
    },
    {
        "content": "<p>Well, that fix doesn't work for <code>struct Foo;</code>... Maybe compute the layout of tys (the element type) before the match and report the uninhabited error if. ...<br>\nOK, see you tomorrow</p>",
        "id": 184340026,
        "sender_full_name": "oli",
        "timestamp": 1577476195
    },
    {
        "content": "<p>... the layout is uninhabited and otherwise skip validation if the type is zst</p>",
        "id": 184340085,
        "sender_full_name": "oli",
        "timestamp": 1577476238
    },
    {
        "content": "<blockquote>\n<p>Well, that fix doesn't work for struct Foo;</p>\n</blockquote>\n<p>Are you sure? </p>\n<div class=\"codehilite\"><pre><span></span>wesley@endurance:~/code/rust/rust&gt; cat test.rs\n#[derive(Clone, Copy)]\nstruct Foo;\n\nfn main() {\n    let _ = [Foo; 4_000_000_000];\n}\nwesley@endurance:~/code/rust/rust&gt; time rustc +stage1 --emit mir test.rs\n\nreal    0m0.084s\nuser    0m0.051s\nsys     0m0.012s\n</pre></div>",
        "id": 184340091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577476243
    },
    {
        "content": "<p>Huh??</p>",
        "id": 184340103,
        "sender_full_name": "oli",
        "timestamp": 1577476266
    },
    {
        "content": "<p>Oh</p>",
        "id": 184340104,
        "sender_full_name": "oli",
        "timestamp": 1577476279
    },
    {
        "content": "<p>Then <code>struct Foo(());</code></p>",
        "id": 184340109,
        "sender_full_name": "oli",
        "timestamp": 1577476294
    },
    {
        "content": "<p>That's fair</p>",
        "id": 184340117,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577476307
    },
    {
        "content": "<p>still the ctfe-stress test I guess is not fixed by any of these fixes ...</p>",
        "id": 184340176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577476341
    },
    {
        "content": "<p>I'll change it later to use the layout or at worst case tomorrow morning</p>",
        "id": 184340185,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577476349
    },
    {
        "content": "<p>No rush</p>",
        "id": 184340187,
        "sender_full_name": "oli",
        "timestamp": 1577476357
    },
    {
        "content": "<p>New party tomorrow</p>",
        "id": 184340191,
        "sender_full_name": "oli",
        "timestamp": 1577476364
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184340192,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577476364
    },
    {
        "content": "<p>Quite weird. That constant being copied shouldn't actually cause any copying for allocations full of undefs</p>",
        "id": 184340593,
        "sender_full_name": "oli",
        "timestamp": 1577476803
    },
    {
        "content": "<p>Maybe the memory ends up being marked as initialized out of some reason</p>",
        "id": 184340767,
        "sender_full_name": "oli",
        "timestamp": 1577476941
    },
    {
        "content": "<p>Though I still can't fathom how that happens</p>",
        "id": 184340782,
        "sender_full_name": "oli",
        "timestamp": 1577476964
    },
    {
        "content": "<p>morning <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184368418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577526902
    },
    {
        "content": "<p>Oops overslept. Breakfast now, see you soon</p>",
        "id": 184368485,
        "sender_full_name": "oli",
        "timestamp": 1577527079
    },
    {
        "content": "<p>Got my <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 184368838,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577527693
    },
    {
        "content": "<p>gonna brew mine too <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 184368981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577528031
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184370437,
        "sender_full_name": "oli",
        "timestamp": 1577530867
    },
    {
        "content": "<p>I'm finishing up some changes to const prop so we lint overflowing integer casts and then I'll finish up the perf improvement for large inhabited ZST arrays</p>",
        "id": 184371513,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577532919
    },
    {
        "content": "<p>rebasing <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> :)</p>",
        "id": 184372237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577534279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>layout.size == Size::ZERO &amp;&amp; !layout.is_uninhabited()</p>\n</blockquote>\n<p>Do you mean <code>layout.size == Size::ZERO &amp;&amp; !layout.details.abi.is_unhabited()</code>?</p>",
        "id": 184372421,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577534552
    },
    {
        "content": "<p>oh, yea</p>",
        "id": 184372432,
        "sender_full_name": "oli",
        "timestamp": 1577534614
    },
    {
        "content": "<p>Ok, cool</p>",
        "id": 184372437,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577534625
    },
    {
        "content": "<p>in this case this is the conservative method, as the fallback even happens for types which are uninhabited but not from all modules</p>",
        "id": 184372495,
        "sender_full_name": "oli",
        "timestamp": 1577534678
    },
    {
        "content": "<p>What does that mean \"from all modules\"?</p>",
        "id": 184372504,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577534704
    },
    {
        "content": "<p>well... if you have <code>struct Foo(!)</code> the <code>.0</code> field is not visible outside the module, thus <code>Foo</code> is not uninhabited outside its defining module</p>",
        "id": 184372581,
        "sender_full_name": "oli",
        "timestamp": 1577534862
    },
    {
        "content": "<p>but if you look at the layout's Abi, then you get the raw information of its uninhabitedness as codegen would see it</p>",
        "id": 184372618,
        "sender_full_name": "oli",
        "timestamp": 1577534882
    },
    {
        "content": "<p>Wait, are you saying you get a different layout for <code>Foo</code> depending on what module you're in?</p>",
        "id": 184372654,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577534961
    },
    {
        "content": "<p>No, you're talking about the logical type not the layout</p>",
        "id": 184372657,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577534994
    },
    {
        "content": "<p>Ok, I think I get it</p>",
        "id": 184372717,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535097
    },
    {
        "content": "<p>Outside of the module, <code>Foo</code> is some opaque type because it has no public fields. So we don't know anything about it from a type system perspective. Layout however knows the internals and can see it's fully uninhabited</p>",
        "id": 184372766,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ralf wants </p>\n<blockquote>\n<p>Also please add a test making sure that we correctly validate things like (!, !) and struct Empty(!);.</p>\n</blockquote>\n<p>Since the change is making things faster, wouldn't this test just show this is slow? I don't think we want to add deliberately slow tests to the suite and I don't know how we'd even make the test fail if the optimization kicked in. Do you know what he is looking for?</p>",
        "id": 184372840,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535275
    },
    {
        "content": "<p>Is there a way I can do something invalid with an uninhabited ZST type array and get an error to trigger that would have been bypassed by these changes?</p>",
        "id": 184372851,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535308
    },
    {
        "content": "<p>No, the test would be a compile-fail test, because validation errors out on these things</p>",
        "id": 184372854,
        "sender_full_name": "oli",
        "timestamp": 1577535336
    },
    {
        "content": "<p>basically Ralf wants to know they are still failing</p>",
        "id": 184372856,
        "sender_full_name": "oli",
        "timestamp": 1577535343
    },
    {
        "content": "<p>with your PR at the point where Ralf saw it, it would have validated  a value of type <code>Empty</code> and said \"oh this is valid\"</p>",
        "id": 184372904,
        "sender_full_name": "oli",
        "timestamp": 1577535382
    },
    {
        "content": "<p>Yeah, I tested that locally and that is resolved now with the change you suggested</p>",
        "id": 184372910,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535402
    },
    {
        "content": "<p>so <code>const FOO: Empty = transmute(());</code> would have compiled successfully</p>",
        "id": 184372911,
        "sender_full_name": "oli",
        "timestamp": 1577535403
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  yea so just add a few tests that <code>const FOO: [Empty; 3]</code> or so can never compile successfully</p>",
        "id": 184372923,
        "sender_full_name": "oli",
        "timestamp": 1577535436
    },
    {
        "content": "<p>I'm just not sure what to put on the right hand side</p>",
        "id": 184372985,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535538
    },
    {
        "content": "<p>I need to call a function that returns <code>!</code> right?</p>",
        "id": 184373006,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535600
    },
    {
        "content": "<p>But I can't call functions in const contexts</p>",
        "id": 184373047,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577535622
    },
    {
        "content": "<p>I think I've done something wrong since this compiles:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_fn)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_transmute)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Empty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[warn(const_err)]</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">[</span><span class=\"n\">Empty</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184373287,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577536164
    },
    {
        "content": "<p>Err maybe that's expected since the transmute is hidden in the function?</p>",
        "id": 184373346,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577536290
    },
    {
        "content": "<p>This fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_transmute)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Empty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[warn(const_err)]</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">[</span><span class=\"n\">Empty</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with \"type validation failed: encountered a value of an uninhabited type\"</p>",
        "id": 184373391,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577536333
    },
    {
        "content": "<p>well it errors the moment you actually use <code>FOO</code></p>",
        "id": 184373395,
        "sender_full_name": "oli",
        "timestamp": 1577536353
    },
    {
        "content": "<p>like if you add <code>FOO;</code> in <code>fn main()</code></p>",
        "id": 184373396,
        "sender_full_name": "oli",
        "timestamp": 1577536363
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 184373397,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577536369
    },
    {
        "content": "<p>constants having errors only fails the build if they are actually used</p>",
        "id": 184373406,
        "sender_full_name": "oli",
        "timestamp": 1577536399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think I misunderstood what that branch was doing. I thought it skipped checking for numeric types. It actually checks the entire array at once. So the PR already checks the array for ZSTs.</p>",
        "id": 184377451,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577543652
    },
    {
        "content": "<p>This sort of feels like we're re-inventing <code>FromAnyBytes</code> from this Pre-RFC <a href=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431\">https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431</a></p>",
        "id": 184379949,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577548034
    },
    {
        "content": "<p>Maybe we should do the simple thing for now and leverage that code later?</p>",
        "id": 184380004,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577548134
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^</p>",
        "id": 184380011,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577548152
    },
    {
        "content": "<p>ok</p>",
        "id": 184380739,
        "sender_full_name": "oli",
        "timestamp": 1577549429
    },
    {
        "content": "<p>so basically struct with no fields and struct with no fields?</p>",
        "id": 184380755,
        "sender_full_name": "oli",
        "timestamp": 1577549471
    },
    {
        "content": "<p>just like you had in the beginning?</p>",
        "id": 184380758,
        "sender_full_name": "oli",
        "timestamp": 1577549478
    },
    {
        "content": "<p>leave a FIXME though</p>",
        "id": 184380759,
        "sender_full_name": "oli",
        "timestamp": 1577549483
    },
    {
        "content": "<p>tuple with no fields and struct with no fields yeah</p>",
        "id": 184380760,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577549490
    },
    {
        "content": "<p>btw <a href=\"https://github.com/rust-lang/rust/pull/67658#discussion_r361801255\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67658#discussion_r361801255\">https://github.com/rust-lang/rust/pull/67658#discussion_r361801255</a> unsure about this to be honest?</p>",
        "id": 184381315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577550375
    }
]