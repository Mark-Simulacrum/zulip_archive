[
    {
        "content": "<blockquote>\n<p>btw, if there's anything const-eval or mir-opt related that needs more manpower I would be happy to help.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>  This could conflict with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> but I think not too much (I'll let them be the judge of it). Removing <code>Deref</code> from the list of <code>ProjectionElem</code>s is something that was discussed at the all hands this year. I'm not sure how easy it is. <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> mentioned stacked borrows may not be able to handle it. I believe the issue is that <code>(*y).z;</code> is not the same thing as <code>(&amp;*y).z</code> (because the former never touched stacked borrows because no (new!) references were involved). We can't just have an <code>Rvalue::Reborrow</code> and a <code>Rvalue::Deref</code> to differentiate, because <code>(*large_type).x</code> should not create a local to store <code>large_type</code> in just to read the <code>x</code> field a moment later. One proposition (I think, I may have projected a bit) was to have an <code>Rvalue::DerefProject</code> that first dereferences the <code>PlaceBase</code> before applying the projection. This scheme does not have the problem of large locals, as you only ever put pointers into locals</p>",
        "id": 176962780,
        "sender_full_name": "oli",
        "timestamp": 1569870100
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, too</p>",
        "id": 176962850,
        "sender_full_name": "oli",
        "timestamp": 1569870124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Is there some place I can read up on the motivations for this change? Were there minutes for the all-hands discussion perhaps?</p>",
        "id": 176963089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569870266
    },
    {
        "content": "<p>yes, sec</p>",
        "id": 176963099,
        "sender_full_name": "oli",
        "timestamp": 1569870276
    },
    {
        "content": "<p>also motivation: <code>Deref</code> just makes all algorithms horrible</p>",
        "id": 176963122,
        "sender_full_name": "oli",
        "timestamp": 1569870294
    },
    {
        "content": "<p>^ I may have had some experience with this yes XD</p>",
        "id": 176963151,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569870316
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>btw, if there's anything const-eval or mir-opt related that needs more manpower I would be happy to help.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span>  This could conflict with <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> but I think not too much (I'll let them be the judge of it). Removing <code>Deref</code> from the list of <code>ProjectionElem</code>s is something that was discussed at the all hands this year. I'm not sure how easy it is. <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> mentioned stacked borrows may not be able to handle it. I believe the issue is that <code>(*y).z;</code> is not the same thing as <code>(&amp;*y).z</code> (because the former never touched stacked borrows because no (new!) references were involved). We can't just have an <code>Rvalue::Reborrow</code> and a <code>Rvalue::Deref</code> to differentiate, because <code>(*large_type).x</code> should not create a local to store <code>large_type</code> in just to read the <code>x</code> field a moment later. One proposition (I think, I may have projected a bit) was to have an <code>Rvalue::DerefProject</code> that first dereferences the <code>PlaceBase</code> before applying the projection. This scheme does not have the problem of large locals, as you only ever put pointers into locals</p>\n</blockquote>\n<p>unsure how much would this conflict with Place 2.0 next steps but I'd say let's find out what that is :P</p>",
        "id": 176963229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569870368
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ak6z9Grd9UDtDZpvxqGy1fydAg-BwHR7kOhxDwL6vuAUoSTQ\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ak6z9Grd9UDtDZpvxqGy1fydAg-BwHR7kOhxDwL6vuAUoSTQ\">https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ak6z9Grd9UDtDZpvxqGy1fydAg-BwHR7kOhxDwL6vuAUoSTQ</a></p>",
        "id": 176963244,
        "sender_full_name": "oli",
        "timestamp": 1569870377
    },
    {
        "content": "<p>search for \"instead of embedding\"</p>",
        "id": 176963262,
        "sender_full_name": "oli",
        "timestamp": 1569870394
    },
    {
        "content": "<p>also \"legal in MIR right\"</p>",
        "id": 176963356,
        "sender_full_name": "oli",
        "timestamp": 1569870481
    },
    {
        "content": "<p>the stacked borrows problem only occurs if we inject <code>&amp;*</code>, but my reading of <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's comment and my own interpretation of a <code>DerefProject</code> <code>Rvalue</code> would avoid that</p>",
        "id": 176963469,
        "sender_full_name": "oli",
        "timestamp": 1569870572
    },
    {
        "content": "<p>I think the only problem is that reborrows aren't possible anymore LOL oops</p>",
        "id": 176963557,
        "sender_full_name": "oli",
        "timestamp": 1569870609
    },
    {
        "content": "<p>I'll probably have to read Ralf's blog posts on stacked borrows to better understand the concerns around reborrowing</p>",
        "id": 176963584,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569870631
    },
    {
        "content": "<p>I'm hoping to just avoid them entirely</p>",
        "id": 176963614,
        "sender_full_name": "oli",
        "timestamp": 1569870654
    },
    {
        "content": "<p>\"them\" being \"injecting new reborrows where they weren't before\"</p>",
        "id": 176963660,
        "sender_full_name": "oli",
        "timestamp": 1569870699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you explain what was the idea with <code>Deref</code>?</p>",
        "id": 176963861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569870806
    },
    {
        "content": "<p>so remove it from Place's projection</p>",
        "id": 176963879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569870824
    },
    {
        "content": "<p>but how do you represent a deref instead?</p>",
        "id": 176963898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569870835
    },
    {
        "content": "<p>Ah okay. Did anyone float an alternative to or concerns about <code>Rvalue::DerefProject(Place&lt;'tcx&gt;)</code>? It seems like it solves all the problems here.</p>",
        "id": 176964023,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569870900
    },
    {
        "content": "<p>so right now if you have <code>(*a.b).c</code> you have <code>a, [b, deref, c]</code> as the place, after this change we'd have <code>let tmp = a.b; (*tmp).c</code></p>",
        "id": 176964025,
        "sender_full_name": "oli",
        "timestamp": 1569870901
    },
    {
        "content": "<blockquote>\n<p>Ah okay. Did anyone float an alternative to or concerns about <code>Rvalue::DerefProject(Place&lt;'tcx&gt;)</code>? It seems like it solves all the problems here.</p>\n</blockquote>\n<p>I think other topics were more important and we were kinda going off on the wrong train of thought because noone grokked the stacked borrows problem fast enough to figure out that it's not a problem</p>",
        "id": 176964133,
        "sender_full_name": "oli",
        "timestamp": 1569870964
    },
    {
        "content": "<p>Since <code>let tmp = a.b; (*tmp).c</code> translates the latter expression to <code>DerefProject(Place { base: tmp, projection: [c] })</code> but requires the base to always be dereferenced before use, we don't need any deref projections anymore</p>",
        "id": 176964424,
        "sender_full_name": "oli",
        "timestamp": 1569871155
    },
    {
        "content": "<p>some of the codegen code was in fact doing this. Injecting a local for the pointer</p>",
        "id": 176964445,
        "sender_full_name": "oli",
        "timestamp": 1569871175
    },
    {
        "content": "<p>or at least an llvm immediate</p>",
        "id": 176964463,
        "sender_full_name": "oli",
        "timestamp": 1569871195
    },
    {
        "content": "<p>well ok that was required anyway</p>",
        "id": 176964505,
        "sender_full_name": "oli",
        "timestamp": 1569871203
    },
    {
        "content": "<p>but I mean, there was extra code making sure the deref works out</p>",
        "id": 176964525,
        "sender_full_name": "oli",
        "timestamp": 1569871213
    },
    {
        "content": "<p>so if we have a mir local or magic codegen code makes no difference except that the former makes for much cleaner code</p>",
        "id": 176964553,
        "sender_full_name": "oli",
        "timestamp": 1569871234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  remember the \"iterate forward then backward\" stuff when you made places be slices instead of recursive? That's what's going away if we do this</p>",
        "id": 176964609,
        "sender_full_name": "oli",
        "timestamp": 1569871286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Wouldn't a reborrow be expressed as <code>Rvalue::DerefProject(Place { base: tmp, projection: [borrow, ..] })</code>. Like I said, I don't fully understand the semantics around reborrowing so maybe I'm too focused on this.</p>",
        "id": 176964845,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569871472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> there's no borrow projection ;)</p>",
        "id": 176964870,
        "sender_full_name": "oli",
        "timestamp": 1569871499
    },
    {
        "content": "<p>we have <code>Rvalue::Ref</code></p>",
        "id": 176964883,
        "sender_full_name": "oli",
        "timestamp": 1569871505
    },
    {
        "content": "<p>ohhhhh<br>\nduh</p>",
        "id": 176964896,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569871512
    },
    {
        "content": "<p>Now I get it.</p>",
        "id": 176964901,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569871517
    },
    {
        "content": "<p>place projections are supposed to just be fancy ways to write byte offsets</p>",
        "id": 176964923,
        "sender_full_name": "oli",
        "timestamp": 1569871529
    },
    {
        "content": "<p>Removing deref from projections seems like a really nice simplification to me. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> </p>\n<p>I'm a little concerned you're going to run into issues with generators like I did a few weeks ago. There's code now that does <code>_1 = (*_2).foo</code> where <code>_2</code> is a generator. At some point, I needed to get the layout of the place base (the generator) which triggers a query cycle. It's ok right now because most places just need to know the layout of the destination and bypass the intermediate deref but that may no longer be the case after we do this change.</p>",
        "id": 176964930,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569871536
    },
    {
        "content": "<p>But we really need to solve that issue anyway...</p>",
        "id": 176964955,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569871554
    },
    {
        "content": "<p>I think the generator thing would still work, as we'd just do <code>Rvalue::DerefProject(Place { base: _2, projection: [foo] })</code> and not change anything else compared to right now</p>",
        "id": 176965060,
        "sender_full_name": "oli",
        "timestamp": 1569871603
    },
    {
        "content": "<p>but yes, that cycle sucks. Do we have an open issue for it? I remember posting a possible solution a la your mir/promoted split</p>",
        "id": 176965124,
        "sender_full_name": "oli",
        "timestamp": 1569871648
    },
    {
        "content": "<p>No, I'm not aware of an open issue.</p>",
        "id": 176965147,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569871663
    },
    {
        "content": "<p>Let me find that idea though...</p>",
        "id": 176965159,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569871668
    },
    {
        "content": "<p>ah thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I gotta run in 3 minutes</p>",
        "id": 176965178,
        "sender_full_name": "oli",
        "timestamp": 1569871680
    },
    {
        "content": "<p>I mean we could have an <code>Rvalue::ReborrowProject</code> to do <code>(&amp;*x)</code> and <code>(&amp;*x).foo</code>, but I still don't fully understand the problem I'm trying to solve XD.</p>",
        "id": 176965243,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569871698
    },
    {
        "content": "<p>(Context is here <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/175509886\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/175509886\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Using.20.60InterpCx.60.20more/near/175509886</a>)</p>",
        "id": 176965255,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569871705
    },
    {
        "content": "<blockquote>\n<p>I mean we could have an <code>Rvalue::ReborrowProject</code> to do <code>(&amp;*x)</code> and <code>(&amp;*x).foo</code>, but I still don't fully understand the problem I'm trying to solve XD.</p>\n</blockquote>\n<p>yea, I mean ideally we'd not do any semantic changes in a PR that adds <code>DerefProject</code> and <code>ReborrowProject</code> (the latter is <code>Rvalue::Ref</code> btw) and then think about possible changes later</p>",
        "id": 176965760,
        "sender_full_name": "oli",
        "timestamp": 1569872070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> sorry, I was away from Zulip, yeah makes a lot of sense, it was that I wasn't sure what was the plan :)</p>",
        "id": 176976860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569879205
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I mean we could have an <code>Rvalue::ReborrowProject</code> to do <code>(&amp;*x)</code> and <code>(&amp;*x).foo</code>, but I still don't fully understand the problem I'm trying to solve XD.</p>\n</blockquote>\n<p>yea, I mean ideally we'd not do any semantic changes in a PR that adds <code>DerefProject</code> and <code>ReborrowProject</code> (the latter is <code>Rvalue::Ref</code> btw) and then think about possible changes later</p>\n</blockquote>\n<p>So currently when we do a reborrow (<code>_2 = (&amp;*_1)</code>), we have an rvalue like <code>Rvalue::Ref(Place { projections: [.., Deref] })</code>. This lets passes that need to handle reborrows specifically do so by matching on the <code>Rvalue</code>. Const qualification makes use of this, for example, to ensure that <code>_2 = (&amp;*_1)</code> behaves the same as <code>_2 = _1</code> w.r.t. qualification. I don't think we want to encode reborrows as an <code>Rvalue::DerefProject</code> followed by an <code>Rvalue::Ref</code>, since then those passes that try to handle reborrows will need to look at multiple statements. That's why I proposed a separate <code>Rvalue::ReborrowProject</code>, so we would have an <code>Rvalue</code> variant for each of <code>*x</code>, <code>&amp;x</code> and <code>(&amp;*x)</code>.</p>",
        "id": 177018488,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569901854
    },
    {
        "content": "<p>Also, feel free to ping me if I don't reply in a timely fashion, I'm bad at checking zulip, and I've yet to find a way to filter notifications by topic</p>",
        "id": 177022916,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569905282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>  yea, you're right. I realized the same thing an hour after going offline :D</p>",
        "id": 177027946,
        "sender_full_name": "oli",
        "timestamp": 1569912208
    },
    {
        "content": "<p>I'm putting together a design doc for this so people can comment asynchronously. Perhaps someone will foresee an issue with the <code>Deref</code>/<code>Reborrow</code> strategy. Also, I want to call these <code>DerefBase</code> and <code>ReborrowBase</code>. I think this is clearer than using <code>Project</code> as a suffix. The design doc will include a strategy for splitting this into many small PRs that can be assigned, worked on and reviewed concurrently, since this will touch a lot of code.</p>",
        "id": 177271588,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570126674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> nice!</p>",
        "id": 177333919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192451
    },
    {
        "content": "<p>One issue is that all other <code>Rvalue</code>s also operate on <code>Place</code>s, either directly or via <code>Operand</code>. Is it more efficient for some <code>Rvalue</code>s to operate on a deref projection directly than if the pointee was copied to a local variable and the passed to the <code>Rvalue</code>?</p>",
        "id": 177372343,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570217954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^</p>",
        "id": 177372366,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570217963
    },
    {
        "content": "<p>Okay, I wrote up <a href=\"https://paper.dropbox.com/doc/Proposal-Deref-is-not-a-Projection--AmBy_zSe6GUL3hdQOLemeTVEAQ-aGnvFEPxejaDOXWDvfcf0\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Proposal-Deref-is-not-a-Projection--AmBy_zSe6GUL3hdQOLemeTVEAQ-aGnvFEPxejaDOXWDvfcf0\">a proposal</a> with a few of the design constraints. Please edit if you can think of more.</p>",
        "id": 177378193,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570222580
    },
    {
        "content": "<p>It's also a bit light on motivation besides simplifying passes that need to check for <code>Deref</code>.</p>",
        "id": 177378554,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570222855
    },
    {
        "content": "<p>The original MIR optimization doc alludes to some benefits in codegen. Perhaps someone who better understands this could comment?</p>",
        "id": 177379856,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570223837
    },
    {
        "content": "<p>one challenge is figuring out how to integrate this work with the borrow checker -- currently we benefit quite a bit from the fact that the \"places\" that the borrow checker wants to consider are \"mostly\" 1-to-1 with MIR places</p>",
        "id": 177524612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570458742
    },
    {
        "content": "<p>I had vaguely assumed that we would approach this by having some kind of specially known operations for creating places, with a (by construction, probably) guarantee that the intermediate values are not used elsewhere</p>",
        "id": 177524661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570458789
    },
    {
        "content": "<p>sorry, that's not very specific, there are a lot of moving parts to such an idea, since it interacts also with e.g. miri</p>",
        "id": 177524864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570458919
    },
    {
        "content": "<p>but basically the idea was that where today we have a complex notion of <code>Place</code> like <code>*(a.b.c[3]).d</code> or whatever</p>",
        "id": 177524904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570458951
    },
    {
        "content": "<p>we might instead break that down into smaller operations:</p>",
        "id": 177524913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570458957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Place1 := a\nPlace2 := Place1.b\nPlace3 := Place2.c\nPlace4 := Place3[3]\nPlace5 := *Place4\nPlace6 := Place5.d\nFinalReference = &amp;Place6\n</pre></div>",
        "id": 177525000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459001
    },
    {
        "content": "<p>where a \"place value\" is not a <em>real</em> value -- at least not to the <em>borrow checker</em> -- it must be linear (always consumed exactly once) and it must be \"converted\" to a real value, e.g. by a <code>&amp;</code> operation</p>",
        "id": 177525068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459044
    },
    {
        "content": "<p>borrows might be somewhat special here; I guess all other uses of places are in operands that either copy or move? (well, assignments are also like borrows)</p>",
        "id": 177525097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459076
    },
    {
        "content": "<p>Interesting, I would have expected that removing <code>Deref</code> from the list of MIR <code>Place</code> projections would make them even <em>more</em> similar to the \"places\" that the borrow checker wants to consider. Admittedly I don't know the borrow checker very well, so perhaps I'm wrong about this. How does the borrow checker track borrows of a deref currently?</p>",
        "id": 177541338,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570469383
    },
    {
        "content": "<p>Regarding the virtual place idea, it seems to me like a different mental model around the existing <code>Place</code> representation. Once again, I don't know a lot about the existing borrow checker; things might be more clear if I did. Currently a \"place value\" is a <code>Place</code>, the smaller operations are projections, and the place is \"converted\" to a real value when it is passed to an <code>Rvalue</code> (<code>Rvalue::Ref</code> in your example).</p>",
        "id": 177541640,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570469586
    },
    {
        "content": "<blockquote>\n<p>Interesting, I would have expected that removing <code>Deref</code> from the list of MIR <code>Place</code> projections would make them even <em>more</em> similar to the \"places\" that the borrow checker wants to consider. Admittedly I don't know the borrow checker very well, so perhaps I'm wrong about this. How does the borrow checker track borrows of a deref currently?</p>\n</blockquote>\n<p>specifically the case the borrow checker tracks is derefs of <code>Box&lt;T&gt;</code></p>",
        "id": 177551841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570476842
    },
    {
        "content": "<p>an alternative to all of this would be to leave <code>Place</code> during borrow check, but potentially \"lower\" to some other representation before optimizing (basically splitting up places that involve derefs)</p>",
        "id": 177551951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570476903
    },
    {
        "content": "<p>One thing to mention is that, if there's not any additional efficiencies in codegen, this change won't have any performance benefits that couldn't be gained from caching <code>Place::is_indirect</code>. If it makes the borrow checker analysis more convoluted, it's probably not worth doing.</p>",
        "id": 177555843,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570479314
    },
    {
        "content": "<blockquote>\n<p>an alternative to all of this would be to leave <code>Place</code> during borrow check, but potentially \"lower\" to some other representation before optimizing (basically splitting up places that involve derefs)</p>\n</blockquote>\n<p>This is intriguing. It seems like we could capture any efficiency gains in codegen with a much smaller set of changes.</p>",
        "id": 177555972,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570479382
    },
    {
        "content": "<p>This is contingent on the existence of potential  gains in codegen <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>, which I'm assuming exist thanks to an offhand comment in meeting notes.</p>",
        "id": 177556038,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570479448
    },
    {
        "content": "<p>I thought the MIR borrowchecker has quite a bunch of workarounds around <code>Deref</code> projections, too</p>",
        "id": 177598265,
        "sender_full_name": "oli",
        "timestamp": 1570528124
    },
    {
        "content": "<p>We do have to reason about them</p>",
        "id": 177620366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544766
    },
    {
        "content": "<p>But I wouldn't call them workarounds</p>",
        "id": 177620371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544769
    },
    {
        "content": "<p>It's true that when you have (e.g.) derefs of <code>&amp;mut</code> etc we have some special logic for borrowing such a thing</p>",
        "id": 177620477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544817
    },
    {
        "content": "<p>but I don't know that any of this logic would go away</p>",
        "id": 177620482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544821
    },
    {
        "content": "<p>and for sure we can't <em>just</em> remove them without something that takes their place that is not a move</p>",
        "id": 177620512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544841
    },
    {
        "content": "<p>I meant that there's additional logic to unwind derefs in the middle of projection lists</p>",
        "id": 177620518,
        "sender_full_name": "oli",
        "timestamp": 1570544844
    },
    {
        "content": "<p>I'm not sure what \"unwind\" means here</p>",
        "id": 177620571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544867
    },
    {
        "content": "<p>there is some special logic to account particularly for cases like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177620683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544908
    },
    {
        "content": "<p>maybe that's what you're referring to?</p>",
        "id": 177620693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544913
    },
    {
        "content": "<p>at the same time, we have to also permit things like <code>let x = &amp;mut self.foo; let y = &amp;mut self.bar;</code></p>",
        "id": 177620722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544926
    },
    {
        "content": "<p>well, you may have [a, b, c, deref, d, e, f], and the compiler has a bunch of logic that fiddles up to the deref, does an operation, then does deref operations, then continues until the next deref</p>",
        "id": 177620725,
        "sender_full_name": "oli",
        "timestamp": 1570544928
    },
    {
        "content": "<p>which means that we have one borrow of <code>(*self).foo</code></p>",
        "id": 177620751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544939
    },
    {
        "content": "<p>and one borrow of <code>(*self).bar</code></p>",
        "id": 177620755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544942
    },
    {
        "content": "<p>and we have to know that they are disjoint</p>",
        "id": 177620764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544946
    },
    {
        "content": "<p>that only makes sense if you consider the <em>whole path</em></p>",
        "id": 177620778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544955
    },
    {
        "content": "<blockquote>\n<p>well, you may have [a, b, c, deref, d, e, f], and the compiler has a bunch of logic that fiddles up to the deref, does an operation, then does deref operations, then continues until the next deref</p>\n</blockquote>\n<p>not really</p>",
        "id": 177620797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544962
    },
    {
        "content": "<p>at least I'm not sure what that is</p>",
        "id": 177620830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544977
    },
    {
        "content": "<p>maybe I'm forgetting things :)</p>",
        "id": 177620840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544980
    },
    {
        "content": "<blockquote>\n<p>at the same time, we have to also permit things like <code>let x = &amp;mut self.foo; let y = &amp;mut self.bar;</code></p>\n</blockquote>\n<p>this is the high order bit though, we have to reason about this \"borrowed path\"</p>",
        "id": 177620864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544998
    },
    {
        "content": "<p>codegen has it definitely, and I thought I saw the same pattern in borrowck when reviewing <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> 's PRs</p>",
        "id": 177620920,
        "sender_full_name": "oli",
        "timestamp": 1570545005
    },
    {
        "content": "<p>there are definitely some cases where deref is \"different\" -- which are there to handle the loop case</p>",
        "id": 177620961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545031
    },
    {
        "content": "<p>these two examples don't have any <code>Deref</code> projection</p>",
        "id": 177620972,
        "sender_full_name": "oli",
        "timestamp": 1570545038
    },
    {
        "content": "<p>but I don't think it really \"unwinds\" quite in the way you suggest</p>",
        "id": 177620988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545044
    },
    {
        "content": "<blockquote>\n<p>these two examples don't have any <code>Deref</code> projection</p>\n</blockquote>\n<p>yes they do</p>",
        "id": 177620989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545046
    },
    {
        "content": "<p>typically <code>self: &amp;mut Struct</code></p>",
        "id": 177621005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545056
    },
    {
        "content": "<p>so <code>&amp;mut self.bar</code> =&gt; <code>&amp;mut (*self).bar</code></p>",
        "id": 177621028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545065
    },
    {
        "content": "<p>sorry, that was kind of hidden :)</p>",
        "id": 177621037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545070
    },
    {
        "content": "<p>ah right</p>",
        "id": 177621045,
        "sender_full_name": "oli",
        "timestamp": 1570545073
    },
    {
        "content": "<p>the key point being that if you did <code>&amp;mut *self</code> as a separate step, you'd have two overlapping borrows</p>",
        "id": 177621103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545104
    },
    {
        "content": "<p>so the suggestion in <a href=\"https://paper.dropbox.com/doc/aGnvFEPxejaDOXWDvfcf0\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/aGnvFEPxejaDOXWDvfcf0\">https://paper.dropbox.com/doc/aGnvFEPxejaDOXWDvfcf0</a> would still keep all possibilities for that around, but we'd need to track extra state possibly</p>",
        "id": 177621127,
        "sender_full_name": "oli",
        "timestamp": 1570545114
    },
    {
        "content": "<p>this is why I was proposing that we might want to have some explicit \"intermediate steps\" that we know will always be intermedaites</p>",
        "id": 177621231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545141
    },
    {
        "content": "<p>well it would be an entirely new <code>Rvalue</code>, thus borrowck could work with it</p>",
        "id": 177621265,
        "sender_full_name": "oli",
        "timestamp": 1570545158
    },
    {
        "content": "<p>but I see how that would complicate things</p>",
        "id": 177621288,
        "sender_full_name": "oli",
        "timestamp": 1570545169
    },
    {
        "content": "<p>it might be ok if it's an rvalue, but I feel like it's different from an rvalue</p>",
        "id": 177621320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545188
    },
    {
        "content": "<p>you mean the <code>&amp;mut *self</code> shouldn't even be stored in a local but in one of these intermediate locals?</p>",
        "id": 177621466,
        "sender_full_name": "oli",
        "timestamp": 1570545250
    },
    {
        "content": "<p>that's what I mean</p>",
        "id": 177621551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545292
    },
    {
        "content": "<p>but I also mean that <code>&amp;mut *self</code> and <code>*self</code> are different</p>",
        "id": 177621583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545307
    },
    {
        "content": "<p>basically, there are two places where we use \"places\" to be \"by-ref\" -- i.e., to get at the <em>memory they refer to</em> and now <em>the value in that memory</em></p>",
        "id": 177621620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545328
    },
    {
        "content": "<p>the lhs of an assignment, and a borrow</p>",
        "id": 177621634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545335
    },
    {
        "content": "<p>\"rvalue\" (to me) is meant to be something that creates a value -- in this case, I'm not 100% sure what the value is... a pointer I guess? it doesn't have a proper rust type</p>",
        "id": 177621762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545378
    },
    {
        "content": "<p>I guess it could be <code>&amp;mut T</code> -- but the borrow that creates it is somehow different</p>",
        "id": 177621834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545416
    },
    {
        "content": "<p>well... the <code>*self</code> part is an rvalue reference in c++, which is technically of type <code>T</code></p>",
        "id": 177621951,
        "sender_full_name": "oli",
        "timestamp": 1570545472
    },
    {
        "content": "<p>right, so this is the new thing :)</p>",
        "id": 177622027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545488
    },
    {
        "content": "<p>MIR doesn't have \"references\" right now</p>",
        "id": 177622041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545494
    },
    {
        "content": "<p>those are handled by places</p>",
        "id": 177622045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545497
    },
    {
        "content": "<p>but now we're kind of producing a new kind of value, which is a reference to a place</p>",
        "id": 177622056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545506
    },
    {
        "content": "<p>and I am sort of saying \"maybe that's good, but we should put some strict limitations on how they are used\"</p>",
        "id": 177622075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545521
    },
    {
        "content": "<p>i.e., they are intermediaries used to build up <em>proper values</em>, which are producing by \"borrowing\" them</p>",
        "id": 177622100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545536
    },
    {
        "content": "<p>or consuming them</p>",
        "id": 177622120,
        "sender_full_name": "oli",
        "timestamp": 1570545551
    },
    {
        "content": "<p>this would also integrate with miri, in that the borrow operation is the point where we \"claim memory\"</p>",
        "id": 177622122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545554
    },
    {
        "content": "<p>right, they can be </p>\n<ul>\n<li>consumed to build new \"references\" -- need a better name</li>\n<li>assigned to (which consumes them)</li>\n<li>or borrowed (which creates a <code>&amp;</code> value)</li>\n</ul>",
        "id": 177622163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545585
    },
    {
        "content": "<p><code>Operand::Copy</code> and <code>Move</code> would also be operating on these places</p>",
        "id": 177622234,
        "sender_full_name": "oli",
        "timestamp": 1570545610
    },
    {
        "content": "<p>mm... yes, ok</p>",
        "id": 177622254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545623
    },
    {
        "content": "<p>so they can be</p>",
        "id": 177622275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545631
    },
    {
        "content": "<ul>\n<li>consumed to build new \"references\" -- need a better name</li>\n<li>assigned to (which consumes them)</li>\n<li>copied/moved (via an Operand)</li>\n<li>or borrowed (which creates a <code>&amp;</code> value)</li>\n</ul>",
        "id": 177622290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545640
    },
    {
        "content": "<p>so... this is all the places where <code>Place</code>s are used right now?</p>",
        "id": 177622334,
        "sender_full_name": "oli",
        "timestamp": 1570545667
    },
    {
        "content": "<p>of course :)</p>",
        "id": 177622342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545673
    },
    {
        "content": "<p>the new thing is the first bullet, I guess</p>",
        "id": 177622349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545679
    },
    {
        "content": "<p>i.e., the idea is that where we now have a complex, compound place</p>",
        "id": 177622366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545691
    },
    {
        "content": "<p>we'd only have some simpler form, and there'd be some way to do a \"deref-projection\"</p>",
        "id": 177622385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545706
    },
    {
        "content": "<p>in the limit, you could have all places just be variables</p>",
        "id": 177622395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545711
    },
    {
        "content": "<p>this is kind of the \"per MIR place interning\" I guess but baked in :P</p>",
        "id": 177622413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545720
    },
    {
        "content": "<p>(not quite, because projections would be copied everywhere)</p>",
        "id": 177622475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545734
    },
    {
        "content": "<blockquote>\n<p>in the limit, you could have all places just be variables</p>\n</blockquote>\n<p>not <em>variables</em> really</p>",
        "id": 177622481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545739
    },
    {
        "content": "<p><em>place variables</em></p>",
        "id": 177622488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545742
    },
    {
        "content": "<p>so we're flattening places to be just <code>(PlaceBase, PlaceElem)</code> instead of <code>(PlaceBase, Box&lt;[PlaceElem]&gt;)</code></p>",
        "id": 177622498,
        "sender_full_name": "oli",
        "timestamp": 1570545749
    },
    {
        "content": "<p>i.e., <code>P2 = P1.f</code></p>",
        "id": 177622502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545751
    },
    {
        "content": "<p>well, I think what might be better would be to keep \"GEP-like\" projections</p>",
        "id": 177622524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545765
    },
    {
        "content": "<p>and so the only real new thing is <code>P1 = *P2</code></p>",
        "id": 177622534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545771
    },
    {
        "content": "<p>and runtime index ops</p>",
        "id": 177622571,
        "sender_full_name": "oli",
        "timestamp": 1570545782
    },
    {
        "content": "<p>mm, yes,</p>",
        "id": 177622582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545787
    },
    {
        "content": "<p>and that</p>",
        "id": 177622584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545789
    },
    {
        "content": "<p>so you can \"embed\" <code>foo.a.b</code> as a place</p>",
        "id": 177622601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545799
    },
    {
        "content": "<p>I guess it means that <code>PlaceBase</code> now includes some kind of <code>PlaceRef</code> alternative, so it isn't always \"rooted\" in a local</p>",
        "id": 177622646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545831
    },
    {
        "content": "<p>and we have some kind of \"single use\" restriction on PlaceRefs</p>",
        "id": 177622694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545843
    },
    {
        "content": "<p>(stronger than SSA, in other words)</p>",
        "id": 177622716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545858
    },
    {
        "content": "<p>yes</p>",
        "id": 177622727,
        "sender_full_name": "oli",
        "timestamp": 1570545864
    },
    {
        "content": "<p>and we also have a new <code>Statement::Project</code> or sth that takes a <code>PlaceLocalId</code> and a <code>Place</code>?</p>",
        "id": 177622778,
        "sender_full_name": "oli",
        "timestamp": 1570545905
    },
    {
        "content": "<p>yeah</p>",
        "id": 177622849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545960
    },
    {
        "content": "<p>well wait</p>",
        "id": 177622898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545965
    },
    {
        "content": "<p>I am imagining something like <code>ProjectDeref</code> and <code>ProjectIndex</code></p>",
        "id": 177622925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570545989
    },
    {
        "content": "<p>hmm... can we at that point just make the current <code>Place</code> be <code>Box&lt;[(Place, NonGEPProj)]&gt;</code>?</p>",
        "id": 177622940,
        "sender_full_name": "oli",
        "timestamp": 1570546001
    },
    {
        "content": "<p>well no</p>",
        "id": 177622994,
        "sender_full_name": "oli",
        "timestamp": 1570546035
    },
    {
        "content": "<p>uh</p>",
        "id": 177622999,
        "sender_full_name": "oli",
        "timestamp": 1570546043
    },
    {
        "content": "<p>let me untangle my thought</p>",
        "id": 177623009,
        "sender_full_name": "oli",
        "timestamp": 1570546051
    },
    {
        "content": "<p>I am imagining</p>\n<div class=\"codehilite\"><pre><span></span>Place =\n  X // local variable\n| P // place variable\n| Place `.` Field\n\nStatement =\n  Place = Rvalue\n| P := * Place\n| P := Place [ Place ]\n| ...\n</pre></div>",
        "id": 177623026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546062
    },
    {
        "content": "<p>sorry, I think easiest with grammars for some reason :)</p>",
        "id": 177623097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546083
    },
    {
        "content": "<p>those map to enums in a fairly straightforward way I guess</p>",
        "id": 177623106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546090
    },
    {
        "content": "<p>also, I probably excluded some \"GEP-like\" place options</p>",
        "id": 177623121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546110
    },
    {
        "content": "<p>oh, I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> wanted to make \"pull out constants\" as the base of a place, so we might also include <code>P := Static</code> or something</p>",
        "id": 177623151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546128
    },
    {
        "content": "<p>I'm using <code>:=</code> as the \"define a new place variable\" notation</p>",
        "id": 177623169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546140
    },
    {
        "content": "<p>since we have a \"single use\" rule, do we even need place variables? Can't we make places just be a <code>(PlaceBase, [Proj])</code> for <code>enum Proj { NonGepProj(NonGepProj), GepProj(Vec&lt;PlaceElem&gt;) }</code> ?</p>",
        "id": 177623224,
        "sender_full_name": "oli",
        "timestamp": 1570546172
    },
    {
        "content": "<p>isn't that what we have now :)</p>",
        "id": 177623308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546205
    },
    {
        "content": "<p>maybe I don't understand what <code>NonGepProj</code> is meant to be</p>",
        "id": 177623323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546220
    },
    {
        "content": "<p>hm... yea sorry, ignore that</p>",
        "id": 177623346,
        "sender_full_name": "oli",
        "timestamp": 1570546243
    },
    {
        "content": "<p>I think that \"place variables\" could be lowered to real values in a fairly easy way</p>",
        "id": 177623369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546260
    },
    {
        "content": "<p>basically they become pointers</p>",
        "id": 177623379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546264
    },
    {
        "content": "<p>which seems worth pointing out</p>",
        "id": 177623392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546274
    },
    {
        "content": "<p>(and maybe their Rust type is even <code>*mut Foo</code> or something)</p>",
        "id": 177623406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546288
    },
    {
        "content": "<p>you want to be able to turn MIR with place variables to MIR without them?</p>",
        "id": 177623423,
        "sender_full_name": "oli",
        "timestamp": 1570546294
    },
    {
        "content": "<p>presumably optimizations would start to handle them that way</p>",
        "id": 177623428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546296
    },
    {
        "content": "<p>right, you can just start treating them as pointers, right?</p>",
        "id": 177623444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546310
    },
    {
        "content": "<p>after borrowck that should be possible</p>",
        "id": 177623502,
        "sender_full_name": "oli",
        "timestamp": 1570546329
    },
    {
        "content": "<p>I think that is the point of all this, roughly speaking</p>",
        "id": 177623518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546339
    },
    {
        "content": "<p>that borrow-ck gets to view them as special</p>",
        "id": 177623530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546344
    },
    {
        "content": "<p>but afterwards we just kind of \"forget\" that</p>",
        "id": 177623537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546348
    },
    {
        "content": "<p>iirc miri should just work if you turned a borrowchecked program into one using raw pointers everywhere</p>",
        "id": 177623541,
        "sender_full_name": "oli",
        "timestamp": 1570546351
    },
    {
        "content": "<p>that said, if polonius is a success</p>",
        "id": 177623552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546364
    },
    {
        "content": "<p>well, nm</p>",
        "id": 177623566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546372
    },
    {
        "content": "<p>it's just that -- it's plausible borrowck could be integrated differently</p>",
        "id": 177623596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546387
    },
    {
        "content": "<p>as polonius creates a kind of \"layer\" between MIR and its input</p>",
        "id": 177623608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546394
    },
    {
        "content": "<p>(which is risky, since that was one of the things MIR was meant to fix :) but the layer is fairly simple, not complex like EUV)</p>",
        "id": 177623626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546408
    },
    {
        "content": "<p>I don't think that changes anything too fundamental though</p>",
        "id": 177623665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546441
    },
    {
        "content": "<p>the tl;dr is that we want some way to easily extract the path that was borrowed \"in full\"</p>",
        "id": 177623730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546457
    },
    {
        "content": "<p>while later kind of converting to a simpler IR with less complex structure</p>",
        "id": 177623760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546474
    },
    {
        "content": "<p>(maybe these \"place references\" are actually locals of type <code>*mut T</code> and a special flag, even?)</p>",
        "id": 177623831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546516
    },
    {
        "content": "<p>right, similar to how we need the generator stuff up to a point and then just never use those statements again</p>",
        "id": 177623855,
        "sender_full_name": "oli",
        "timestamp": 1570546535
    },
    {
        "content": "<blockquote>\n<p>(maybe these \"place references\" are actually locals of type <code>*mut T</code> and a special flag, even?)</p>\n</blockquote>\n<p>we could teach <code>TyKind</code> about them</p>",
        "id": 177623879,
        "sender_full_name": "oli",
        "timestamp": 1570546555
    },
    {
        "content": "<p>true</p>",
        "id": 177623974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546601
    },
    {
        "content": "<p>(I guess that could serve as the flag)</p>",
        "id": 177623998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570546614
    },
    {
        "content": "<p>and would probably serve as a canary for accidentally using a local without checking the flag</p>",
        "id": 177624058,
        "sender_full_name": "oli",
        "timestamp": 1570546649
    },
    {
        "content": "<p>yeah the <code>&amp;</code> would have to be somehow special-magic for Stacked Borrows to make this work... but I expect the same special-magic will be needed to make the borrow checker work so that should be fine</p>",
        "id": 177711903,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626749
    },
    {
        "content": "<p>also this is \"funny\" timing, one PhD student here is just right now working on extending our formal MIR-like model with support for <code>*</code> in paths...</p>",
        "id": 177711975,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626828
    },
    {
        "content": "<p>but given that the borrow checker still has to support existing code, I'd actually be surprised if borrow checking would work on paths that don't have <code>*</code>. it seems more likely that the borrow checker will work on a notion of paths that's separate from what MIR does?</p>",
        "id": 177712057,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that's exactly it; MIR would have a more limited notion of paths, but borrow checker would be able to reconstruct its more extended notion in a simple way from the MIR</p>",
        "id": 177947083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826399
    },
    {
        "content": "<p>that'll be... interesting ;)</p>",
        "id": 177989883,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888760
    }
]