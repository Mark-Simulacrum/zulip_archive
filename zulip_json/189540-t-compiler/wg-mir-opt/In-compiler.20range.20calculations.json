[
    {
        "content": "<p>Was just discussing this in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> as an offshoot of discussing ternary operands, and was wondering just how much it’d take to implement (Presumably, more than is possible for me at least!)<br>\nIt’d presumably need to store additional data (range data) on MIR constructs and where and how those could be stored is unknown to me. Actually range checking isn’t too difficult for simpler math, but could get complicated for functions, as they may need annotated with range information. Anyone have a better idea of what’d be involved in an implementation?</p>",
        "id": 209549147,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599675959
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/In-compiler.20range.20calculations\">#t-compiler &gt; In-compiler range calculations</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 209549291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1599676035
    },
    {
        "content": "<p>I think an almost-hard requirement is probably some form of inlining, which has historically been Hard, though there's been some recent progress I think.</p>",
        "id": 209549300,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676038
    },
    {
        "content": "<p>What would inlining be for in this case? (I’m still fairly new to working on rustc.)</p>",
        "id": 209549675,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676237
    },
    {
        "content": "<p>Well, it's a more general thing -- without inlining, even something like <code>vec[x]</code> passes through 3-4 levels of indirection, first the deref to a slice, then the index trait on slices -- some of that is a compiler-implemented thing, some isn't</p>",
        "id": 209549783,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676309
    },
    {
        "content": "<p>but until you \"pull that in\" you're unlikely to be able to realize \"oh that needs <code>x</code> in bounds\" without heuristics or something</p>",
        "id": 209549848,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676333
    },
    {
        "content": "<p>The original reason this was brought up is to make <code>match</code> smarter about if all possible values have been checked. Is that goal even achievable from MIR?</p>",
        "id": 209550083,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676448
    },
    {
        "content": "<p>Well, match checking for full coverage of the input range happens entirely at the MIR level</p>",
        "id": 209550126,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676476
    },
    {
        "content": "<p>So \"yes\"</p>",
        "id": 209550135,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676482
    },
    {
        "content": "<p>the harder part there is usually deciding how much we want to be able to infer about the input range -- right now it's purely just the type, nothing else</p>",
        "id": 209550177,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676504
    },
    {
        "content": "<p>I assume a partial implementation of range checks would be doable without inlining. Handling simple math on the type is easy, there’s ways to calculate the range of outputs possible from most operations, and it’d make a good first step.</p>",
        "id": 209550362,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676585
    },
    {
        "content": "<p>Sure, yes, to some extent</p>",
        "id": 209550388,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676604
    },
    {
        "content": "<p>The implementation of the simple cases is not <em>too</em> hard. The language-level guarantees it implies is a bit harder.</p>\n<p>For example, does introducing a binding break it? e.g., <code>match a &amp; 1</code> requires just 0 and 1, perhaps, but <code>let b = a &amp; 1; match b { ... }</code> now requires everything in the type again? That sort of decision needs to be made.</p>",
        "id": 209550533,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676684
    },
    {
        "content": "<p>and whether we're okay with some cases getting covered and others not, and to what extent that stabilizes a very particular implementation</p>",
        "id": 209550575,
        "sender_full_name": "simulacrum",
        "timestamp": 1599676711
    },
    {
        "content": "<p>An early implementation could be made and feature flagged. Ideally, as much as is sane could be handled, so supporting simple math and bindings would be a good step 1</p>",
        "id": 209550631,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676747
    },
    {
        "content": "<p>As for stabilizing a particular implementation, I imagine that could be argued until the heat death of the universe.</p>",
        "id": 209550703,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676791
    },
    {
        "content": "<p>Being able to track this information as much as possible is also a good step toward some useful compiler optimizations, like partially lifting bounds check omission into a MIR pass (and letting LLVM continue to catch any omittable checks that get missed)</p>",
        "id": 209550980,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599676939
    },
    {
        "content": "<p>Implementing range computation internally with no effect on UI is always an option to start.</p>",
        "id": 209551370,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599677146
    },
    {
        "content": "<p>There's a difference between optimizations and match checking in that match checking is \"language spec\" territory since it's a stable detail visible to users. But yes, largely seems fine.</p>",
        "id": 209551615,
        "sender_full_name": "simulacrum",
        "timestamp": 1599677258
    },
    {
        "content": "<p>So what might be involved with implementing a simpler version of range computation? There would need to be some way to attach range data to bindings.</p>",
        "id": 209552103,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599677460
    },
    {
        "content": "<p>If you want to expose this in the type system, you'd have to limit it to builtin operations, which do not require inlining</p>",
        "id": 209555445,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599679055
    },
    {
        "content": "<p>If it's just for optimization, there was a recent discussion on doing value range analysis as a dataflow analysis</p>",
        "id": 209555538,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599679092
    },
    {
        "content": "<p>That was somewhere here: <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Flow-sensitive.20MIR.20const-propagation/near/208654443\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Flow-sensitive.20MIR.20const-propagation/near/208654443</a></p>",
        "id": 209555600,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599679117
    },
    {
        "content": "<p>And you get to the user-specified range types, which are much-clamored for.</p>",
        "id": 209555818,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599679204
    },
    {
        "content": "<p>e.g. <code>IntegerBetween&lt;5, 10&gt;</code>.</p>",
        "id": 209555878,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599679234
    },
    {
        "content": "<p>I think that for it to be a language change to something like <code>match</code> checking (and whether you need a <code>_=&gt;</code> arm), I'd expect it to be something that is part of the type of what went into match, not just a value-range-analysis pass.</p>",
        "id": 209565112,
        "sender_full_name": "scottmcm",
        "timestamp": 1599683510
    },
    {
        "content": "<p>But certainly linting on things like <code>match x &amp; 3 { 5 =&gt; </code> would be cool -- that's a QoI question, not a spec one.</p>",
        "id": 209565309,
        "sender_full_name": "scottmcm",
        "timestamp": 1599683585
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-lang/rust/pull/76044\">https://github.com/rust-lang/rust/pull/76044</a> we can now actuall implement such dataflow analyses</p>",
        "id": 209565582,
        "sender_full_name": "oli",
        "timestamp": 1599683745
    },
    {
        "content": "<p>I don't have the capacity to do such an impl right now, but I can mentor and iirc <span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> was interested in working on something like that</p>",
        "id": 209565676,
        "sender_full_name": "oli",
        "timestamp": 1599683785
    },
    {
        "content": "<p>I’m strongly interested too which is why I posed the question</p>",
        "id": 209572280,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599687625
    },
    {
        "content": "<p>The range should be expressible using existing range syntax &lt;/opinion&gt;</p>",
        "id": 209580065,
        "sender_full_name": "Jubilee",
        "timestamp": 1599693327
    },
    {
        "content": "<p>Thanks for the ping, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <br>\nI'm however lying low for now. Uni hasn't responded to me and I'm also having a bad brain couple of weeks. I'm saving on energy so that I can take care of that stuff :3</p>",
        "id": 209605915,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1599724446
    },
    {
        "content": "<p>The dataflow analysis looks so goooood tho <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>",
        "id": 209605966,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1599724493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277614\">@Braden Nelson</span> if/and when you end up working on this, please ping me at your PR so that I can keep myself up-to-date with it. I'm glad you're interested in these things! It's a super cool part of the compiler <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 209606121,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1599724601
    },
    {
        "content": "<p>PS: oli is an amazing mentor. If you work with them, you'll definitely have a blast :)</p>",
        "id": 209606254,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1599724688
    },
    {
        "content": "<p>range analysis has a lot of applications but is not trivial, the literature often describes them over infinite lattices so you need widening to ensure termination, narrowing to help precision, ranges are actually symbolic, inlining is mostly a matter of precision (for the same reason they can be inter-procedural analyses) in context-sensitivity, and it more often than not I'd say takes advantage of at least SSA form (and e-SSA has been invented to again help with precision IIRC), and that's not mentioning the implementation challenges of analysis speed vs precision. I'm not saying this to deter anyone from working on this, it sounds super fun :)</p>",
        "id": 209608529,
        "sender_full_name": "lqd",
        "timestamp": 1599726313
    },
    {
        "content": "<p>let me get you a paper showing at least an overview and some implementation talk</p>",
        "id": 209608574,
        "sender_full_name": "lqd",
        "timestamp": 1599726360
    },
    {
        "content": "<p>say, <a href=\"ftp://nozdr.ru/biblio/kolxoz/Cs/CsLn/Programming%20Languages,%2016%20conf.,%20SBLP%202012%20(LNCS7554,%20Springer,%202012)(ISBN%209783642331817)(O)(173s)_CsLn_.pdf#page=50\">this</a> and the authors (at least Pereira) have published other papers on the subject; or maybe the ABCD paper</p>",
        "id": 209608655,
        "sender_full_name": "lqd",
        "timestamp": 1599726405
    },
    {
        "content": "<p>if the goal is just match checking, maybe some of Luc Maranget's papers could be useful (I'm not sure if that's the one varkor used in their initial overlap and missing arms implementation) say <a href=\"http://moscova.inria.fr/~maranget/papers/warn/index.html\">this one</a> is well-known but maybe not exactly about checking on ranges (but could be interesting wrt our match checking being quadratic)</p>",
        "id": 209608824,
        "sender_full_name": "lqd",
        "timestamp": 1599726537
    },
    {
        "content": "<p>if it's bounds check elimination, which I believe we'll really need to do at some point, because we're the \"only ones\" with bounds checks in optimized code (in loops, of the well-known languages using LLVM), we'd surely have to detect and model loops and induction variables and more, there's some nice information in Muchnick's book (which I like to believe is <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> bedside reading :)</p>",
        "id": 209609195,
        "sender_full_name": "lqd",
        "timestamp": 1599726764
    },
    {
        "content": "<p>It's more of a bathroom reader: A few paragraphs a day <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 209668370,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1599753502
    },
    {
        "content": "<p>perhaps GCC's Project Ranger is of interest? <a href=\"https://gcc.gnu.org/pipermail/gcc/2020-July/233235.html\">https://gcc.gnu.org/pipermail/gcc/2020-July/233235.html</a><br>\nin a recent internal talk, Andrew mentioned that it's not strictly tied to GCC IR, could be integrated into other toolchains</p>",
        "id": 209677609,
        "sender_full_name": "cuviper",
        "timestamp": 1599757364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm fairly interested in doing this. Mentoring would be helpful, but really once I figure out the internal structure/design for how I should actually attempt to do this, I should be pretty well off on my own with just the occasional bunch of questions.</p>",
        "id": 209679084,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599758020
    },
    {
        "content": "<p>I imagine I should start with opening an issue and self-assigning?</p>",
        "id": 209679170,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599758057
    },
    {
        "content": "<p>Yea, let's collect the info in an issue, just ping me on the issue when you open it and I'll write something up</p>",
        "id": 209679447,
        "sender_full_name": "oli",
        "timestamp": 1599758216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what/which issue layout should I use? Cut down version of the Tracking Issue template?</p>",
        "id": 209680018,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599758520
    },
    {
        "content": "<p>yea that sounds good</p>",
        "id": 209680080,
        "sender_full_name": "oli",
        "timestamp": 1599758538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Github username?</p>",
        "id": 209682465,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599759686
    },
    {
        "content": "<p>oli-obk</p>",
        "id": 209682500,
        "sender_full_name": "oli",
        "timestamp": 1599759703
    },
    {
        "content": "<p>Is anybody working on this currently? I'm interested in the topic and I'm trying to work out an MVP as practice and to see if I understand the concepts correctly. Probably not the best analysis to get into as a beginner, but a fun one to read and think about <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 215033334,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1604008363
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> wants to/is work/ing on this as part of a university project</p>",
        "id": 215063908,
        "sender_full_name": "oli",
        "timestamp": 1604044200
    },
    {
        "content": "<p>Yup!</p>",
        "id": 215065791,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1604046107
    },
    {
        "content": "<p>I want to work on it, and although I've been slow to start it, I've been given the thumbs up by uni so I think I'll might start tackling it in the next few months</p>",
        "id": 215065881,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1604046182
    }
]