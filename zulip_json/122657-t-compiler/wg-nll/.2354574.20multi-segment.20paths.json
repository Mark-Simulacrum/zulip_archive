[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span></p>",
        "id": 134761944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070436
    },
    {
        "content": "<p>I'm actually a bit surprised that this fails</p>",
        "id": 134761958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070450
    },
    {
        "content": "<p>so maybe let's trace it a bit through the code first</p>",
        "id": 134762048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070522
    },
    {
        "content": "<p>right now AscribeUserType added for local declaration with type provided by user</p>",
        "id": 134762091,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538070600
    },
    {
        "content": "<p>well</p>",
        "id": 134762187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070666
    },
    {
        "content": "<p>in this case, we don't have user time, only initializer</p>",
        "id": 134762191,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538070673
    },
    {
        "content": "<p>so in the case of <code>Foo::&lt;T&gt;::new</code>...</p>",
        "id": 134762192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070674
    },
    {
        "content": "<p>that is a Path</p>",
        "id": 134762193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070677
    },
    {
        "content": "<p>which is being called</p>",
        "id": 134762200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070681
    },
    {
        "content": "<p>/me tries to remember</p>",
        "id": 134762287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070747
    },
    {
        "content": "<p>hmm</p>",
        "id": 134762298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070773
    },
    {
        "content": "<p>I know I annotated some of these paths</p>",
        "id": 134762302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070777
    },
    {
        "content": "<p>but not this one I guess</p>",
        "id": 134762344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070831
    },
    {
        "content": "<p>e.g., if you change it to <code>&lt;Foo&lt;T&gt;&gt;::new</code> it works, I think</p>",
        "id": 134762348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070839
    },
    {
        "content": "<p>or..not</p>",
        "id": 134762404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070864
    },
    {
        "content": "<p>ok, maybe just trait calls</p>",
        "id": 134762414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070877
    },
    {
        "content": "<p>in particular I'm lookinag at the tests in src/test/ui/nll/user-annotations</p>",
        "id": 134762420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070892
    },
    {
        "content": "<p>e.g., <a href=\"http://method-ufcs-1.rs\" target=\"_blank\" title=\"http://method-ufcs-1.rs\">method-ufcs-1.rs</a>, which contains stuff like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">annot_reference_static_lifetime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Bazoom</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">method</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134762436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070914
    },
    {
        "content": "<p>so \"trait\" paths work, but \"inherent methods\" like <code>new</code> do not</p>",
        "id": 134762442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070930
    },
    {
        "content": "<p>I think I am recording the substitutions in <code>write_method_call</code></p>",
        "id": 134762536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070974
    },
    {
        "content": "<p>ok, I will check how it works for trait paths</p>",
        "id": 134762540,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538070977
    },
    {
        "content": "<p>the basic idea is in <code>librustc_typeck</code>, we record the \"user substitutions\" for various things</p>",
        "id": 134762700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071106
    },
    {
        "content": "<p>ah, <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span>, I think the relevant pathway above is <code>instantiate_value_path</code></p>",
        "id": 134762715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071128
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_typeck/check/mod.rs#L5272\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_typeck/check/mod.rs#L5272\">this is where we compute the <code>user_substs</code></a></p>",
        "id": 134762744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071161
    },
    {
        "content": "<p>if I were debugging this :) I'd run a small example with <code>RUST_LOG=rustc_typeck::check</code> and grep for <code>user_substs</code></p>",
        "id": 134762750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071174
    },
    {
        "content": "<p>and try to see what data the base typeck is generating</p>",
        "id": 134762754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071179
    },
    {
        "content": "<p>it may be that we are generating the right data but not <em>using</em> it on the HAIR side</p>",
        "id": 134762766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071187
    },
    {
        "content": "<p>or it may be that we are not generating it</p>",
        "id": 134762773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071194
    },
    {
        "content": "<p>okey, thanks for help</p>",
        "id": 134762979,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538071342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> have you had any more time to investigate this?</p>",
        "id": 135041407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538492197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  not enough, for method case user's lifetime is ignored, but I haven't found how to fix it</p>",
        "id": 135042669,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538493369
    },
    {
        "content": "<p>if someone else is ready to investigate it just reassign it, I may not have enough time or it</p>",
        "id": 135043755,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538494484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ok, I'm digging into some related issues and may try to tackle it along the way</p>",
        "id": 135044278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538494985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> <a href=\"https://github.com/rust-lang/rust/issues/54692\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54692\">https://github.com/rust-lang/rust/issues/54692</a> might be a good fit for you; gonna leave a few notes</p>",
        "id": 135055277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538505951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's already assigned, I will try to find something else</p>",
        "id": 135062915,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1538513289
    },
    {
        "content": "<p>I think if you are available to hack on it,we can unassign <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>  and assign you</p>",
        "id": 135063201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538513617
    },
    {
        "content": "<p>since they have other things assigned to them</p>",
        "id": 135063203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538513621
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135063712,
        "sender_full_name": "blitzerr",
        "timestamp": 1538514129
    },
    {
        "content": "<p>Just wanted to report that I was wrestling with the user type annotation bugs assigned to me yesterday but I think I \"see the light at the end of the tunnel\" now. I've been doing some refactorings and I hope to have a PR for <a href=\"https://github.com/rust-lang/rust/issues/54574\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54574\">#54574</a> today. I think the same approach will let me tackle constants too and maybe some other thorny cases.</p>",
        "id": 135598000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539251724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> think you'd have time to review <a href=\"https://github.com/rust-lang/rust/pull/55093\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55093\">https://github.com/rust-lang/rust/pull/55093</a>? (<span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> sounded like they'd prefer a second reviewer to take a look.)</p>",
        "id": 135905022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539701437
    },
    {
        "content": "<p>k</p>",
        "id": 135905059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539701464
    }
]