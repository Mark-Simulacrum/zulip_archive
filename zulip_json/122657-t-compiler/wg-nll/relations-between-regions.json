[
    {
        "content": "<p>Hello! I hope this is the right place to ask a question about the \"alias-based formulation of the borrow checker\" blog post [0]? Specifically, I had a question about the \"Relations between regions\" section in the blog post.</p>\n<p>For example, on line <code>let r: &amp;'1 mut Vec&lt;&amp;'2 i32&gt; = &amp;'3 mut v</code>it is asserted that both '0: '2 and '2: '0 hold. I would have expected the former ('0: 2) to hold, but not necessarily the latter ('2: '0). What happens if another vector is assigned to reference <code>r</code>?</p>\n<p>I would greatly appreciate if someone could clarify how these \"region\" subset facts are computed in general. If possible, I would like to follow the example in detail to the end (e.g., a later argument relies on '4: '5: '2: '0).</p>\n<p>Many thanks in advance!</p>\n<p>[0] <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/\">http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/</a></p>",
        "id": 128284014,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529378906
    },
    {
        "content": "<p>they derive from the subtyping relationships and other parts of the MIR type check; in that particular case, <code>&amp;mut T</code> is invariant with respect to <code>T</code>, so <code>&amp;mut T &lt;: &amp;mut U</code> requires that <code>T = U</code> (and hence that <code>&amp;'2 i32 = &amp;'0 i32</code> in this particular example). <code>'2 = '0</code> if <code>'2: '0</code> and <code>'0: '2</code></p>",
        "id": 128292737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529396062
    },
    {
        "content": "<p>Thanks! From an alias analysis perspective, using similar reasoning as above, I find it surprising that <code>'0 = '1 = '3</code> would hold (rather than merely <code>'0 : '3</code> and <code>'1: '3</code>) in the following example where <code>u : Vec&lt;&amp;'0 i32&gt;</code> and <code>v : Vec&lt;&amp;'1 i32&gt;</code> are two different vectors:</p>\n<p><code>a. let mut r: &amp;'2 mut Vec&lt;'3 &amp;i32&gt;;\n b. r = &amp;'4 mut v;\n c. r = &amp;'5 mut u;</code> </p>\n<p>Is there any documentation that I could read to better this case? My confusion may stem from the fact that I think too much about alias analysis rather than type checking. In particular, I am reading subsets such as <code>'4 : '2</code> and <code>'5 : '2</code> to be similar to the subsets in Andersen's algorithm.</p>",
        "id": 128321728,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529434503
    },
    {
        "content": "<p>I don't believe I said that <code>'1 </code> and <code>'3</code> would be related</p>",
        "id": 128322296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529435214
    },
    {
        "content": "<p>I'm not sure if we're talking about precisely the same example :)</p>",
        "id": 128322310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529435236
    },
    {
        "content": "<p>Sorry, I sought to illustrate the second part of my earlier question, namely: \"What happens if another vector is assigned to reference r?\"</p>\n<p>On the surface, both examples share in common that they require a region <code>'R</code> as in <code>Vec&lt;'R &amp;i32&gt;</code> to be related to another region:</p>\n<p>1\\ Specifically, in the first example, reference <code>r</code> is only assigned once (using <code>v</code>) and <code>'R</code> turns out to be equal to another region.<br>\n2\\ In the second example, <code>r</code> is assigned twice (using <code>u</code> and <code>v</code>), but your response indicates that no such region _equality_ is induced then.</p>\n<p>My goal was to better understand by comparing and contrasting both examples. Any suggestion that may get me back on the right track are welcome! :)</p>",
        "id": 128329336,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529443681
    },
    {
        "content": "<blockquote>\n<p>Any suggestion that may get me back on the right track are welcome! :)</p>\n</blockquote>\n<p>In other words, eventually if possible, I would like to be able to pick apart both examples by appealing to the right inference rules that are being used to setup the subset region relationships. I know a bit weird maybe, I am just curious.</p>",
        "id": 128329638,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529444011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119443\">@Alex Horn</span> An important point in Polonius is that the relations are per program point. So, in your second example, you will get that the relation <code>'3 = '1</code> holds on a set of program points, and the relation <code>'3 = '0</code> holds on some other set of points. Only if these two sets overlap, you will get a relation <code>'1 = '0</code>.</p>",
        "id": 128364548,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529503999
    },
    {
        "content": "<p>Does this help?</p>",
        "id": 128364550,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529504008
    },
    {
        "content": "<p>This helps, thank you! What I am still unclear about is: when do sets of program points \"overlap\"? I understood the <code>cfg_edge(P, Q)</code> fact and has it is used to propagate subset relations. In the second example, <code>cfg_edge(a, b)</code> and <code>cfg_edge(b, c)</code>.</p>",
        "id": 128370738,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529512125
    },
    {
        "content": "<p>Niko in his blog post does not talk about at which program points a specific relation holds. Instead, he talks about what relations hold at a specific program point, which is basically the same thing just phrased differently. For example, the fact <code>subset(R1, R2, P)</code> expresses that the subset relation between regions <code>R1</code> and <code>R2</code> holds at the program point <code>P</code>. Now if you have a set of <code>subset</code> facts, you can compute at which set of program points <code>P</code> the subset relation between <code>R1</code> and <code>R2</code> holds.</p>",
        "id": 128374075,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529516858
    },
    {
        "content": "<p>To answer your question: a set of program points that expresses the subset relation between <code>R1</code> and <code>R2</code> overlap with a set of program points that expresses the relation between <code>R2</code> and <code>R3</code> if there exists such a program point <code>P</code> that the facts <code>subset(R1, R2, P)</code> and <code>subset(R2, R3, P)</code> can be derived.</p>",
        "id": 128374221,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529517019
    },
    {
        "content": "<p>Is it clearer?</p>",
        "id": 128374253,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529517083
    },
    {
        "content": "<p>Awesome, thanks for taking the time to clarify; I appreciate it!</p>\n<p>Let me make sure I understand. Here is a proof of <code>'0 = '1 = '3</code> for the second example:</p>\n<p>As previously discussed, we know that the relation <code>'3 = '0</code> holds at program point <code>b</code>. Similarly,  <code>'3 = '1</code> at program point <code>c</code>. By definition, <code>cfg_edge(b, c)</code>. Hence, by <code>Rule subset3 (version 1)</code>, <code>'3 = '0</code> at program point <code>c</code>. Therefore, since <code>'3 = '0</code>and <code>'3 = '1</code> at  program point <code>c</code>, we conclude <code>'0 = '1 = '3</code>.</p>\n<p>I find this equality surprising. Is this result expected?</p>\n<p>One of <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> 's earlier comments reads: \"I don't believe I said that <code>'1</code>  and <code>'3</code> would be related\". I did not fully understand his comment. May I am misinterpreting the later assertion that we \"will get that the relation <code>'3 = '1</code>\" .</p>",
        "id": 128382758,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529527826
    },
    {
        "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"119443\">@Alex Horn</span>, I'm multi-plexing a bunch of stuff lately, but I'm finding it hard to understand your examples. =) Probably if I went back up and re-read your examples I would understand better. I would however appreciate copying and pasting all the information together in one place (i.e., not referencing any previous message :) Just looking at what I see in zulip I still don't quite see where <code>'0 = '1 = '3</code> is coming from etc. (For example, I don't know what program point c or b refers to, etc.)</p>\n<p>I would like to see the input program (ideally in MIR-like format, but Rust-like is ok too).</p>",
        "id": 128383816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529529154
    },
    {
        "content": "<p>Will definitely do, I shall draft something. Thanks.</p>",
        "id": 128400582,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529558386
    },
    {
        "content": "<p>I've created a v0-draft: <a href=\"https://pastebin.com/w53KTyzs\" target=\"_blank\" title=\"https://pastebin.com/w53KTyzs\">https://pastebin.com/w53KTyzs</a>.</p>\n<p>To keep things simple, the live analysis is assumed to be disabled.</p>\n<p>What are the intended relations between the regions here?</p>\n<p>If <code>'0 == '1 == '7</code> holds (which may or may not be the case), what are the implications on the analysis (if any)?</p>\n<p>To further guide the discussion, I repeat (at times verbatim) what I understood our discussion to imply about the v0-example:</p>\n<p>A\\ On line 15 (<code>r = &amp;/* '8 */ mut u</code>), <code>&amp;mut T</code> is invariant with respect to<code>T</code>, so <code>&amp;mut T &lt;: &amp;mut U</code> requires that <code>T = U</code>. Hence, <code>'0 = '7</code>.<br>\nB\\ Similarly on line 18 (<code>r = &amp;/* '9 */ mut v</code>), <code>'1 = '7</code>.<br>\nC\\ By definition, <code>cfg_edge(line 17,  line 18)</code>(transitively).<br>\nD\\ Hence, by <code>Rule subset3 (version 1)</code>, we get <code>'0 = '7</code> on line 18.<br>\nE\\ Therefore, since <code>'0 = '7</code> and <code>'1 = '7</code> on line 18, <code>'0 = '1 = '7</code> holds.</p>",
        "id": 128429779,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529603080
    },
    {
        "content": "<p>I think we're all confused about this <code>'0 = '1</code> notation, what is this all about?</p>",
        "id": 128436845,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1529611509
    },
    {
        "content": "<p>do you mean <code>'0: '1</code> instead?</p>",
        "id": 128436853,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1529611521
    },
    {
        "content": "<p><code>'0 = '1</code> I believe means <code>'0: '1</code> and <code>'1: '0</code></p>",
        "id": 128438654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529613736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119443\">@Alex Horn</span> I looked at the example and <a href=\"https://gist.github.com/nikomatsakis/0eb5ba344e939b678fcad5452c82366c\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/0eb5ba344e939b678fcad5452c82366c\">wrote some notes</a></p>",
        "id": 128438679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529613775
    },
    {
        "content": "<p>One part of it is the liveness results — those currently cause the two assignments to <code>r</code> to be distinguished</p>",
        "id": 128438701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529613826
    },
    {
        "content": "<p>I think that is an element of the system we might change; but if we did so, then it would yes imply a loss of resolution</p>",
        "id": 128438709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529613839
    },
    {
        "content": "<p>is that what you are saying?</p>",
        "id": 128438747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529613843
    },
    {
        "content": "<p>Read your notes, very enlightening. Yes, I am aiming to better understand the strengths and weaknesses of the proposed approach, which I find very interesting. In addition, I am curious how it relates to previous work, in case they are lessons from the past that could broaden my perspective.</p>",
        "id": 128441245,
        "sender_full_name": "Alex Horn",
        "timestamp": 1529616922
    },
    {
        "content": "<p>I'd appreciate any insights :)</p>",
        "id": 128466107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529663271
    }
]