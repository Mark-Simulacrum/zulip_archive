[
    {
        "content": "<p>I just opened <a href=\"https://github.com/rust-lang/rust/issues/51710\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51710\">https://github.com/rust-lang/rust/issues/51710</a>, which describes a way to win 4% more in performance. Anybody interested in working on this? (I could also do a twitter call out)</p>",
        "id": 128474530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529676449
    },
    {
        "content": "<p>I'd be interested</p>",
        "id": 128474826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529676842
    },
    {
        "content": "<p>ok let me know if the directions need clarification :)</p>",
        "id": 128475026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529677140
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 128476172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529678643
    },
    {
        "content": "<p>how urgent is this?</p>",
        "id": 128476182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529678652
    },
    {
        "content": "<p>I would call it one of the top priority tasks? tackling perf + diagnostics together</p>",
        "id": 128477154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679946
    },
    {
        "content": "<p>did you look into this at all <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 128619045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529955981
    },
    {
        "content": "<p>not yet, I can start now I guess</p>",
        "id": 128623043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529960777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> how goes? :)</p>",
        "id": 128651791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530012342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> couldn't start yesterday, but I'm going to start in a bit</p>",
        "id": 128657251,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530020920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've started</p>",
        "id": 128671922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038146
    },
    {
        "content": "<p>removed <a href=\"https://github.com/spastorino/rust/commit/8cf540a8183e864e1dafda032c94aee6d50e2adf\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/8cf540a8183e864e1dafda032c94aee6d50e2adf\">https://github.com/spastorino/rust/commit/8cf540a8183e864e1dafda032c94aee6d50e2adf</a></p>",
        "id": 128671924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038148
    },
    {
        "content": "<p>the idea now is here <a href=\"https://github.com/rust-lang/rust/blob/01dbfdaf4f45b68b49332b8785262a3a780d0a19/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1067-L1068\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/01dbfdaf4f45b68b49332b8785262a3a780d0a19/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1067-L1068\">https://github.com/rust-lang/rust/blob/01dbfdaf4f45b68b49332b8785262a3a780d0a19/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1067-L1068</a></p>",
        "id": 128672036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038247
    },
    {
        "content": "<p>instead of that</p>",
        "id": 128672043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038253
    },
    {
        "content": "<p>do ... <code>BFS over the MIR graph from elem (a Location), looking for points that may use the region region_sub that we are interested in</code></p>",
        "id": 128672107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038289
    },
    {
        "content": "<p>yep</p>",
        "id": 128672155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038372
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 128672160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038375
    },
    {
        "content": "<p>yes</p>",
        "id": 128672571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038826
    },
    {
        "content": "<p>makes sense :)</p>",
        "id": 128672573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> help me to remember, I think there's similar code to this already, right?</p>",
        "id": 128672592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038874
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 128672639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038892
    },
    {
        "content": "<p>I do have some vague memory of doing something like this</p>",
        "id": 128672642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038897
    },
    {
        "content": "<p>if you don't remember from the top of your head don't worry</p>",
        "id": 128672643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038897
    },
    {
        "content": "<p>I can search</p>",
        "id": 128672644,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038899
    },
    {
        "content": "<p>I mean there is the <code>find_assignment</code> code</p>",
        "id": 128672646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038906
    },
    {
        "content": "<p>but that doesn't really do a DFS or BFS</p>",
        "id": 128672650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038912
    },
    {
        "content": "<p>but I feel like we maybe wrote some code to do that...?</p>",
        "id": 128672651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038918
    },
    {
        "content": "<p>I think I've already done a BFS over mir</p>",
        "id": 128672655,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038920
    },
    {
        "content": "<p>right</p>",
        "id": 128672657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038923
    },
    {
        "content": "<p>ah yes</p>",
        "id": 128672660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038929
    },
    {
        "content": "<p>I think we were using it... hmm right</p>",
        "id": 128672664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038935
    },
    {
        "content": "<p>actually it's related</p>",
        "id": 128672666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038941
    },
    {
        "content": "<p>gimme a second</p>",
        "id": 128672668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038942
    },
    {
        "content": "<p>yes, I have vague reminds of something related, hehe</p>",
        "id": 128672678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038959
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L128-L170\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L128-L170\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L128-L170</a></p>",
        "id": 128672688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038975
    },
    {
        "content": "<p>man, I need to get memory pills :P</p>",
        "id": 128672694,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530038982
    },
    {
        "content": "<p>this is ... kind of the same thing</p>",
        "id": 128672695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038982
    },
    {
        "content": "<p>that is, there might be an opportunity to simplify the setup here</p>",
        "id": 128672698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038996
    },
    {
        "content": "<p>that's what I was looking for</p>",
        "id": 128672702,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530039002
    },
    {
        "content": "<p>I wrote that</p>",
        "id": 128672742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530039004
    },
    {
        "content": "<p>or you wrote it and I pasted it :P</p>",
        "id": 128672762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530039022
    },
    {
        "content": "<p>yep</p>",
        "id": 128672763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039023
    },
    {
        "content": "<p>so the setup is a bit \"indirect\" right now</p>",
        "id": 128672768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039032
    },
    {
        "content": "<p>we invoke <code>why_region_contains_point(R, P)</code> to find out why the region <code>R</code> includes the point <code>P</code></p>",
        "id": 128672775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039045
    },
    {
        "content": "<p>and it returns something like <code>LiveVar(X, L)</code> saying:</p>",
        "id": 128672798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039076
    },
    {
        "content": "<p>the region <code>R</code> includes the point <code>P</code> because the variable <code>X</code> is live</p>",
        "id": 128672802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039086
    },
    {
        "content": "<p>(and, presumably, the type of <code>X</code> includes <code>R</code>)</p>",
        "id": 128672814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039094
    },
    {
        "content": "<p>although it may not actually be <code>R</code></p>",
        "id": 128672818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039101
    },
    {
        "content": "<p>it's more like \"and the type of <code>X</code> includes some region <code>R1</code> where <code>R: R1</code>\"</p>",
        "id": 128672829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039118
    },
    {
        "content": "<p>so then we know that the variable <code>X</code> is <em>live</em> at this point <code>L</code> -- but that just means it may be used at some point in the future</p>",
        "id": 128672877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039140
    },
    {
        "content": "<p>we don't actually know where it is used</p>",
        "id": 128672881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039151
    },
    {
        "content": "<p>this is you are doing the BFS</p>",
        "id": 128672883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039153
    },
    {
        "content": "<p>(in the code as it works today)</p>",
        "id": 128672887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039159
    },
    {
        "content": "<p>so if we were to add another BFS in order to reproduce the current setup, that would be kind of silly</p>",
        "id": 128672895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039174
    },
    {
        "content": "<p>we would basically be doing a BFS to find the use of <code>X</code></p>",
        "id": 128672902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039185
    },
    {
        "content": "<p>er, to find the use of some variable that includes <code>R1</code></p>",
        "id": 128672909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039194
    },
    {
        "content": "<p>and then doing <em>another</em> BFS later on to find that use again</p>",
        "id": 128672913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039204
    },
    {
        "content": "<p>(with me so far .. ?)</p>",
        "id": 128672921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530039232
    },
    {
        "content": "<p>hey, back</p>",
        "id": 128674741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530041312
    },
    {
        "content": "<p>sorry, need to read</p>",
        "id": 128674742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530041316
    },
    {
        "content": "<p>well actually we have the meeting in 3 :)</p>",
        "id": 128674746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530041323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> read what you wrote</p>",
        "id": 128693704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530067873
    },
    {
        "content": "<blockquote>\n<p>so if we were to add another BFS in order to reproduce the current setup, that would be kind of silly</p>\n</blockquote>\n<p>I didn't understand since this point on</p>",
        "id": 128693710,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530067911
    },
    {
        "content": "<p>unsure if you're saying that the strategy doesn't make sense or what</p>",
        "id": 128693754,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530067931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I am saying that the strategy I described in the issue doesn't, I don't think, quite make sense -- we can probably do something simpler</p>",
        "id": 128706331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530091176
    },
    {
        "content": "<p>I'm writing some notes in the issue</p>",
        "id": 128706606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530091609
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/51710#issuecomment-400606429\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51710#issuecomment-400606429\">notes are here</a></p>",
        "id": 128706696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530091767
    },
    {
        "content": "<p>I guess it's not so much that the strategy I described doesn't make <em>sense</em></p>",
        "id": 128706698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530091782
    },
    {
        "content": "<p>as that we can move the BFS from where it is and use it</p>",
        "id": 128706703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530091791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> questions ...</p>",
        "id": 128730063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123491
    },
    {
        "content": "<p>so I need to look from a location (elem in the code) look for points that may use the region (region_sub in the code)</p>",
        "id": 128730082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123546
    },
    {
        "content": "<p>so for any local variable that's contained in region_sub</p>",
        "id": 128730154,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123623
    },
    {
        "content": "<p>if that's correct ... I'm looking for how to get all the local vars contained on a region</p>",
        "id": 128730338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123874
    },
    {
        "content": "<p>I guess that's not what I need to do ... hmmm</p>",
        "id": 128730389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123899
    },
    {
        "content": "<p>I guess I need to go statement by statement and see if there's a local used there that is contained in the region</p>",
        "id": 128730412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123932
    },
    {
        "content": "<p>well</p>",
        "id": 128730420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123946
    },
    {
        "content": "<p>we are already visiting locals, right?</p>",
        "id": 128730423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123950
    },
    {
        "content": "<p>so that we can look for the one we wanted?</p>",
        "id": 128730424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123954
    },
    {
        "content": "<p>we should be able to modify that check so that, instead of:</p>\n<div class=\"codehilite\"><pre><span></span>if local == self.local_I_am_looking_for { ... }\n</pre></div>",
        "id": 128730466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123969
    },
    {
        "content": "<p>it does something like</p>",
        "id": 128730469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123973
    },
    {
        "content": "<p>yes, we are visiting locals</p>",
        "id": 128730471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530123975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>if region.appears_in(type_of(local)) { ... }\n</pre></div>",
        "id": 128730480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123985
    },
    {
        "content": "<p>yeah</p>",
        "id": 128730489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124001
    },
    {
        "content": "<p>something like that</p>",
        "id": 128730491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124003
    },
    {
        "content": "<p>appears_in is pseudo code, right? or does that exist?</p>",
        "id": 128730495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124016
    },
    {
        "content": "<p>:P</p>",
        "id": 128730497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124017
    },
    {
        "content": "<p>another thing, how do I get the <code>MirBorrowckCtxt</code> from <code>RegionInferenceContext</code>?</p>",
        "id": 128731161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124706
    },
    {
        "content": "<p>I need Mir and MirBorrowckCtxt</p>",
        "id": 128731201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124797
    },
    {
        "content": "<p>you cannot get those things</p>",
        "id": 128731254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124810
    },
    {
        "content": "<p>and you should not want them :)</p>",
        "id": 128731256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124812
    },
    {
        "content": "<p>you may need to thread down some additional data though ...</p>",
        "id": 128731267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124829
    },
    {
        "content": "<p>what do you need from the <code>MirBorrowckCtxt</code>?</p>",
        "id": 128731271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124836
    },
    {
        "content": "<p>(the <code>Mir</code> you can thread down readily enough...)</p>",
        "id": 128731280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124842
    },
    {
        "content": "<p>we may also want to move these methods somewhere else</p>",
        "id": 128731284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124850
    },
    {
        "content": "<p>that is, the <code>explain_why_region_contains_point</code> might just return the <code>region_sub</code> value</p>",
        "id": 128731296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124868
    },
    {
        "content": "<p>and we can move the walk outside of it</p>",
        "id": 128731297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        if !self.regioncx.region_contains_point(self.borrow.region, p) {\n</pre></div>",
        "id": 128731303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124884
    },
    {
        "content": "<blockquote>\n<p>that is, the <code>explain_why_region_contains_point</code> might just return the <code>region_sub</code> value</p>\n</blockquote>\n<p>well if we do that is possible to get the stuff</p>",
        "id": 128731372,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124960
    },
    {
        "content": "<p>right</p>",
        "id": 128731382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124974
    },
    {
        "content": "<p>and also I guess change the method name</p>",
        "id": 128731383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530124976
    },
    {
        "content": "<p>my point is that the <code>RegionInferenceContext</code> does not have access to the <code>MirBorowckCtxt</code> and should not</p>",
        "id": 128731395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124985
    },
    {
        "content": "<p>that's just not how the layers are setup</p>",
        "id": 128731399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124992
    },
    {
        "content": "<p>ya</p>",
        "id": 128731404,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125001
    },
    {
        "content": "<p>ok</p>",
        "id": 128731405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125002
    },
    {
        "content": "<p>but wait</p>",
        "id": 128731406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125002
    },
    {
        "content": "<p><code>if !self.regioncx.region_contains_point(self.borrow.region, p) {</code></p>",
        "id": 128731407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125007
    },
    {
        "content": "<p>if that is the thing that you use from the <code>MirBorrowckCtxt</code></p>",
        "id": 128731413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125014
    },
    {
        "content": "<p><code>self.regioncx</code> <em>is</em> the region inference context</p>",
        "id": 128731415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125019
    },
    {
        "content": "<p>so that is just <code>self</code></p>",
        "id": 128731418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125022
    },
    {
        "content": "<p>ahh, hehe, right :)</p>",
        "id": 128731429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so should I move the Find stuff or just leave it there, since I don't need MirBorrowckCtxt?</p>",
        "id": 128731683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125296
    },
    {
        "content": "<p>to me it seems cleaner to move it</p>",
        "id": 128731797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125431
    },
    {
        "content": "<p>then <code>explain_why_borrow_contains_point</code> can return the full explanation</p>",
        "id": 128731801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125442
    },
    {
        "content": "<p>move it where?</p>",
        "id": 128731823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125482
    },
    {
        "content": "<p>just in case we are on the same page, I've already moved the finder to region_infer/mod.rs</p>",
        "id": 128731879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125539
    },
    {
        "content": "<p>are you saying that I should move it out from there?</p>",
        "id": 128731888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125554
    },
    {
        "content": "<p>or from explain_borrow/mod.rs? &lt;- if this, it's already out there :)</p>",
        "id": 128731912,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125590
    },
    {
        "content": "<p>I guess fits more inside explain_borrow</p>",
        "id": 128731962,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125643
    },
    {
        "content": "<p>and maybe in a new file, right?</p>",
        "id": 128731970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125649
    },
    {
        "content": "<p>explain_borrow/find_use.rs or something like this</p>",
        "id": 128731972,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530125667
    },
    {
        "content": "<p>that would be my preference</p>",
        "id": 128732093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125854
    },
    {
        "content": "<p>yeah, makes sense</p>",
        "id": 128732290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530126061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was wondering about all the DefUses logic in finder</p>",
        "id": 128734468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530129022
    },
    {
        "content": "<p>yes</p>",
        "id": 128734478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129040
    },
    {
        "content": "<p>why is all that needed if we are looking for uses?</p>",
        "id": 128734480,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530129041
    },
    {
        "content": "<p>forget about what I've asked :P</p>",
        "id": 128734875,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530129571
    },
    {
        "content": "<p>it's completely clear in the code</p>",
        "id": 128734878,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530129581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how do you go from RegionVid to BorrowData?</p>",
        "id": 128735782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530130590
    },
    {
        "content": "<p>you cannot in general do that</p>",
        "id": 128735792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530130613
    },
    {
        "content": "<p>that is, only some regions have an associated <code>BorrowData</code></p>",
        "id": 128735802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530130624
    },
    {
        "content": "<p>why do you need to do that ?</p>",
        "id": 128735803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530130627
    },
    {
        "content": "<p>actually I probably don't</p>",
        "id": 128736115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530131035
    },
    {
        "content": "<p>unsure</p>",
        "id": 128736116,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530131038
    },
    {
        "content": "<p>basically I have a RegionVid and a local</p>",
        "id": 128736165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530131049
    },
    {
        "content": "<p>and need to check if the region pointed by RegionVid contains that local</p>",
        "id": 128736171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530131069
    },
    {
        "content": "<p>So I think what you want to do</p>",
        "id": 128736556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131472
    },
    {
        "content": "<p>is to find out if the type of that local</p>",
        "id": 128736560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131478
    },
    {
        "content": "<p>includes the region</p>",
        "id": 128736561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131479
    },
    {
        "content": "<p>for this, you need the mir</p>",
        "id": 128736563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131482
    },
    {
        "content": "<p><code>mir.local_decls[local].ty</code> or something should give you the type of the MIR</p>",
        "id": 128736576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131496
    },
    {
        "content": "<p>then you have to walk the regions somehow</p>",
        "id": 128736641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131545
    },
    {
        "content": "<p>I'm debating which of the various helpers is the best fit :)</p>",
        "id": 128736642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530131550
    },
    {
        "content": "<p><code>for_each_free_region</code> is an easy one but it has no way to stop once you found something, nor to return a value</p>",
        "id": 128737139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530132151
    },
    {
        "content": "<p>you'd have to set some flag to true</p>",
        "id": 128737146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530132155
    },
    {
        "content": "<p>maybe we want a <code>visit_each_free_regon</code></p>",
        "id": 128737160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530132174
    },
    {
        "content": "<p>still, i'd do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">found_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">for_each_free_region</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">region_I_want</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">found_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>for now. It's the easiest way to get started.</p>",
        "id": 128737193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530132238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span> make sense?</p>",
        "id": 128737235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530132246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> makes perfect sense</p>",
        "id": 128739552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530134897
    },
    {
        "content": "<p>can't continue with this now</p>",
        "id": 128739554,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530134902
    },
    {
        "content": "<p>but this is probably very close to be finished</p>",
        "id": 128739569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530134933
    },
    {
        "content": "<p>just doing what you've said and it's done</p>",
        "id": 128739573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530134940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have a couple of minutes ... where can I get tcx from?</p>",
        "id": 128743013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140188
    },
    {
        "content": "<p>I guess I can pass it down</p>",
        "id": 128743016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140198
    },
    {
        "content": "<p>on the finder I have the mir</p>",
        "id": 128743019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140205
    },
    {
        "content": "<p>yeah, you can get it from <code>self.infcx.tcx</code> in the <code>MirBorrowckCtxt</code> I think</p>",
        "id": 128743081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530140304
    },
    {
        "content": "<p>yep</p>",
        "id": 128743094,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140354
    },
    {
        "content": "<p>ok</p>",
        "id": 128743095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140354
    },
    {
        "content": "<p>wasn't sure if was possible to get it from mir</p>",
        "id": 128743099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140363
    },
    {
        "content": "<p>ahh tcx is type context?</p>",
        "id": 128743107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140391
    },
    {
        "content": "<p>if it's that doesn't make sense to have it on mir :)</p>",
        "id": 128743111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530140399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wonder how to proper set up TyCtxt lifetimes</p>",
        "id": 128746925,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530145927
    },
    {
        "content": "<p><code>pub struct TyCtxt&lt;'a, 'gcx: 'a+'tcx, 'tcx: 'a&gt; {</code></p>",
        "id": 128746927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530145942
    },
    {
        "content": "<p>mainly the first lifetime param</p>",
        "id": 128746931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530145953
    },
    {
        "content": "<p>I guess that's 'cx</p>",
        "id": 128746932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530145958
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0491]: in type `&amp;&#39;gcx rustc::mir::Mir&lt;&#39;tcx&gt;`, reference has a longer lifetime than the data it references\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:43:5\n   |\n43 |     mir: &amp;&#39;gcx Mir&lt;&#39;tcx&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^\n   |\nnote: the pointer is valid for the lifetime &#39;gcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but the referenced data is only valid for the lifetime &#39;tcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:45:5\n   |\n45 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: lifetime parameter instantiated with the lifetime &#39;gcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;cx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:45:5\n   |\n45 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: lifetime parameter instantiated with the lifetime &#39;tcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;cx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:45:5\n   |\n45 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: lifetime parameter instantiated with the lifetime &#39;gcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;tcx as defined on the struct at 42:1\n  --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:42:1\n   |\n42 | struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0491]: in type `&amp;&#39;gcx rustc::mir::Mir&lt;&#39;tcx&gt;`, reference has a longer lifetime than the data it references\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:111:5\n    |\n111 |     mir: &amp;&#39;gcx Mir&lt;&#39;tcx&gt;,\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\nnote: the pointer is valid for the lifetime &#39;gcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but the referenced data is only valid for the lifetime &#39;tcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:113:5\n    |\n113 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: lifetime parameter instantiated with the lifetime &#39;gcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;cx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:113:5\n    |\n113 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: lifetime parameter instantiated with the lifetime &#39;tcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;cx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0478]: lifetime bound not satisfied\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:113:5\n    |\n113 |     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: lifetime parameter instantiated with the lifetime &#39;gcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: but lifetime parameter must outlive the lifetime &#39;tcx as defined on the struct at 110:1\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:110:1\n    |\n110 | struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 8 previous errors\n</pre></div>",
        "id": 128747055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530146196
    },
    {
        "content": "<p>will check this tomorrow</p>",
        "id": 128747069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530146264
    },
    {
        "content": "<p>you almost certainly don't want any data with lifetime <code>'gcx</code></p>",
        "id": 128747419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530146877
    },
    {
        "content": "<p><code>&amp;'tcx Mir&lt;'tcx&gt;</code> or <code>&amp;'cx Mir&lt;'tcx&gt;</code> ...</p>",
        "id": 128747460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530146893
    },
    {
        "content": "<p>can you send me some link to the code in question?</p>",
        "id": 128747462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530146900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you're writing a visitor needing the MirBorrowckCtx: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L33\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L33\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L33</a> could be an example (I think :)</p>",
        "id": 128747723,
        "sender_full_name": "lqd",
        "timestamp": 1530147480
    },
    {
        "content": "<p>was missing this stuff ...</p>",
        "id": 128751516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530154975
    },
    {
        "content": "<p>for tomorrow :)</p>",
        "id": 128751626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530155171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0277]: the trait bound `rustc::ty::TyS&lt;&#39;_&gt;: rustc::ty::TypeFoldable&lt;&#39;_&gt;` is not satisfied\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:124:18\n    |\n124 |         self.tcx.for_each_free_region(local_ty, |r| if r == self.region_vid { found_it = true; });\n    |                  ^^^^^^^^^^^^^^^^^^^^ the trait `rustc::ty::TypeFoldable&lt;&#39;_&gt;` is not implemented for `rustc::ty::TyS&lt;&#39;_&gt;`\n    |\n    = help: the following implementations were found:\n              &lt;&amp;&#39;tcx rustc::ty::TyS&lt;&#39;tcx&gt; as rustc::ty::TypeFoldable&lt;&#39;tcx&gt;&gt;\n\nerror[E0277]: can&#39;t compare `&amp;rustc::ty::RegionKind` with `rustc::ty::RegionVid`\n   --&gt; librustc_mir/borrow_check/nll/explain_borrow/find_use.rs:124:58\n    |\n124 |         self.tcx.for_each_free_region(local_ty, |r| if r == self.region_vid { found_it = true; });\n    |                                                          ^^ no implementation for `&amp;rustc::ty::RegionKind == rustc::ty::RegionVid`\n    |\n    = help: the trait `std::cmp::PartialEq&lt;rustc::ty::RegionVid&gt;` is not implemented for `&amp;rustc::ty::RegionKind`\n</pre></div>",
        "id": 128751680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530155379
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs b/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs\nindex 06656eb8b1..c0494ec990 100644\n--- a/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs\n+++ b/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs\n@@ -17,7 +17,7 @@ use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use util::liveness::{self, DefUse, LivenessMode};\n\n-crate fn find&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;(\n+crate fn find&lt;&#39;cx, &#39;gcx: &#39;tcx, &#39;tcx: &#39;cx&gt;(\n     mir: &amp;&#39;cx Mir&lt;&#39;tcx&gt;,\n     region_cx: Rc&lt;RegionInferenceContext&lt;&#39;tcx&gt;&gt;,\n     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n@@ -39,7 +39,7 @@ crate fn find&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;(\n     uf.find()\n }\n\n-struct UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n+struct UseFinder&lt;&#39;cx, &#39;gcx: &#39;tcx, &#39;tcx: &#39;cx&gt; {\n     mir: &amp;&#39;cx Mir&lt;&#39;tcx&gt;,\n     region_cx: Rc&lt;RegionInferenceContext&lt;&#39;tcx&gt;&gt;,\n     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n@@ -107,7 +107,7 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; UseFinder&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n     }\n }\n\n-struct DefUseVisitor&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n+struct DefUseVisitor&lt;&#39;cx, &#39;gcx: &#39;tcx, &#39;tcx: &#39;cx&gt; {\n     mir: &amp;&#39;cx Mir&lt;&#39;tcx&gt;,\n     region_cx: Rc&lt;RegionInferenceContext&lt;&#39;tcx&gt;&gt;,\n     tcx: TyCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n</pre></div>",
        "id": 128751734,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530155446
    },
    {
        "content": "<p>will leave this 2 errors ...</p>",
        "id": 128751912,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530155801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the signature of <code>for_each_free_region</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">for_each_free_region</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                     </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                     </span><span class=\"n\">callback</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Region</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"n\">T</span>: <span class=\"nc\">TypeFoldable</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Note that it takes a <code>&amp;T</code> for <code>value</code> -- that means you need to invoke it with <code>&amp;local_ty</code> as argument, not <code>local_ty</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">for_each_free_region</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">local_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>That should fix the first error.</p>",
        "id": 128764586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530180773
    },
    {
        "content": "<p>As for the second error, you are searching for a <code>RegionVid</code> -- a region variable id, which is basically one specific kind of region -- but the variable <code>r</code> is a <code>Region&lt;'tcx&gt;</code>, which is the more general type. <strong>In fact</strong>, since this region is coming from the MIR, and we've rewritten the MIR to only use \"region variables\" (which have a <code>RegionVid</code>), we can convert the <code>Region</code> to a <code>RegionVid</code> by invoking <code>t.to_region_vid()</code>. The <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/trait.ToRegionVid.html#tymethod.to_region_vid\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/trait.ToRegionVid.html#tymethod.to_region_vid\"><code>to_region_vid()</code> method</a> is defined on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/trait.ToRegionVid.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/trait.ToRegionVid.html\">the helper trait <code>ToRegionVid</code></a>, which may need to be imported.</p>",
        "id": 128764655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530180905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ya, that makes sense</p>",
        "id": 128767933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530186705
    },
    {
        "content": "<p>yesterday that was the last thing I did and didn't check the errors</p>",
        "id": 128767983,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530186724
    },
    {
        "content": "<p>just share the thing before stopping using the computer</p>",
        "id": 128767988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530186738
    },
    {
        "content": "<p>thanks for the tips anyway</p>",
        "id": 128767989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530186745
    },
    {
        "content": "<p>the last missing thing is to return the Cause</p>",
        "id": 128767991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530186763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is what I have for now, for you to check <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\">https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy</a></p>",
        "id": 128768141,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530187068
    },
    {
        "content": "<p>I need to figure out how to return Causal from here <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71\">https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71</a></p>",
        "id": 128768198,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530187141
    },
    {
        "content": "<p>current code I think it's missing some stuff to be able to properly return Causal info</p>",
        "id": 128768216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530187157
    },
    {
        "content": "<p>need to think a bit about it</p>",
        "id": 128768220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530187163
    },
    {
        "content": "<p>will be around later</p>",
        "id": 128768222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530187170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you help me a bit to figure out how to build Cause?</p>",
        "id": 128780339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>pub(crate) enum Cause {\n    /// point inserted because Local was live at the given Location\n    LiveVar(Local, Location),\n\n    /// point inserted because Local was dropped at the given Location\n    DropVar(Local, Location),\n\n    /// point inserted because the type was live at the given Location,\n    /// but not as part of some local variable\n    LiveOther(Location),\n\n    /// part of the initial set of values for a universally quantified region\n    #[allow(dead_code)]\n    UniversalRegion(RegionVid),\n}\n</pre></div>",
        "id": 128780391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203178
    },
    {
        "content": "<p>in</p>",
        "id": 128780397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203186
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71\">https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-fa4e5f66c948394f09355b88af038480R71</a></p>",
        "id": 128780402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203194
    },
    {
        "content": "<p>I need to get what's the use exactly</p>",
        "id": 128780484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203303
    },
    {
        "content": "<p>drop or live</p>",
        "id": 128780485,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203311
    },
    {
        "content": "<p>what's the local associated, I can just return from the visit</p>",
        "id": 128780490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203314
    },
    {
        "content": "<p>hmm</p>",
        "id": 128780598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203459
    },
    {
        "content": "<p>basically what I need is a logic to know if the Cause is because of LiveVar, DropVar, LiveOther or UniversalRegion</p>",
        "id": 128780652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203523
    },
    {
        "content": "<p>the rest I think I have all the data</p>",
        "id": 128780658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203532
    },
    {
        "content": "<p>I think you can gt it from the <code>PlaceContext</code></p>",
        "id": 128780664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203579
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/visit/enum.PlaceContext.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/visit/enum.PlaceContext.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/visit/enum.PlaceContext.html</a></p>",
        "id": 128780671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203598
    },
    {
        "content": "<p>e.g, it has a <code>Drop</code> variant</p>",
        "id": 128780674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203607
    },
    {
        "content": "<p>you mean that I can get if it's Drop or not with that?</p>",
        "id": 128780724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203689
    },
    {
        "content": "<p>and what about the rest?</p>",
        "id": 128780727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203694
    },
    {
        "content": "<p>what is the rest?</p>",
        "id": 128780741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203723
    },
    {
        "content": "<p>LiveOther and UniversalRegion</p>",
        "id": 128780746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203743
    },
    {
        "content": "<p>don't remember what's UniversalRegion</p>",
        "id": 128780747,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203749
    },
    {
        "content": "<p>but I'm not doing anything for LiveOther because I'm checking the locals</p>",
        "id": 128780790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203766
    },
    {
        "content": "<p>ok so</p>",
        "id": 128780793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203768
    },
    {
        "content": "<p>my mistake maybe</p>",
        "id": 128780795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203770
    },
    {
        "content": "<p>you don't have a context here</p>",
        "id": 128780797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203779
    },
    {
        "content": "<p>but regarding those other variants, you will never produce those</p>",
        "id": 128780802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203790
    },
    {
        "content": "<p>you will I think <em>only</em> produce <code>LiveVar</code>, <code>DropVar</code>, or \"other\"</p>",
        "id": 128780807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203812
    },
    {
        "content": "<p>we can probably remove them</p>",
        "id": 128780809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203817
    },
    {
        "content": "<p>iirc we don't really use the other things for much anyway</p>",
        "id": 128780814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203824
    },
    {
        "content": "<p>hmmm</p>",
        "id": 128780821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203832
    },
    {
        "content": "<p>in terms of whether to produce <code>LiveVar</code> or <code>DropVar</code>— you can look at the data at the statement index</p>",
        "id": 128780824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203839
    },
    {
        "content": "<p>but this is going to change behavior</p>",
        "id": 128780832,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203854
    },
    {
        "content": "<p>(a) I don't think it will</p>",
        "id": 128780836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203861
    },
    {
        "content": "<p>let me paste the previous code ...</p>",
        "id": 128780837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203862
    },
    {
        "content": "<p>(b) who cares</p>",
        "id": 128780838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203863
    },
    {
        "content": "<p>:)</p>",
        "id": 128780840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203865
    },
    {
        "content": "<p>well, let's check</p>",
        "id": 128780842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203870
    },
    {
        "content": "<p>but the <code>UniversalRegion</code> variant is already dead-code</p>",
        "id": 128780846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203878
    },
    {
        "content": "<p>as you can see from the <code>#[allow]</code>, right?</p>",
        "id": 128780888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203885
    },
    {
        "content": "<p>(or did you add that?)</p>",
        "id": 128780890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203888
    },
    {
        "content": "<p>but in any case I don't see any code that is handling <code>LiveOther</code> in a useful way</p>",
        "id": 128780914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530203937
    },
    {
        "content": "<p>I've added that</p>",
        "id": 128780924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203950
    },
    {
        "content": "<p>when I've removed causal</p>",
        "id": 128780925,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203955
    },
    {
        "content": "<p>check this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L47-L109\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L47-L109\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L47-L109</a></p>",
        "id": 128780927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203958
    },
    {
        "content": "<p>I was trying to mimic that</p>",
        "id": 128780932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530203971
    },
    {
        "content": "<p>well LiveOther doesn't show up there</p>",
        "id": 128780989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530204005
    },
    {
        "content": "<p>right so— I think that the <code>UniversalRegion</code> stuff is dead code in that match</p>",
        "id": 128780995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204015
    },
    {
        "content": "<p>but in any case it's not a very good output</p>",
        "id": 128781004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204023
    },
    {
        "content": "<p>I guess we'll see if that note disappears and figure out what to do</p>",
        "id": 128781006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204030
    },
    {
        "content": "<p>the thing is</p>",
        "id": 128781010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204038
    },
    {
        "content": "<p>ok</p>",
        "id": 128781011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530204039
    },
    {
        "content": "<p>seems good :)</p>",
        "id": 128781012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530204043
    },
    {
        "content": "<p>well, ok, it may be dead code :)</p>",
        "id": 128781021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204065
    },
    {
        "content": "<p>but let's worry about it later in any case</p>",
        "id": 128781022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204069
    },
    {
        "content": "<p>I think if we <strong>do</strong> find an actual use or drop</p>",
        "id": 128781083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204133
    },
    {
        "content": "<p>that is <strong>always</strong> a better thing to print</p>",
        "id": 128781085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204138
    },
    {
        "content": "<p>if we fail to find one, I think we can probably look at the region for which we were searching</p>",
        "id": 128781090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204146
    },
    {
        "content": "<p>and decide whether to emit that other note</p>",
        "id": 128781091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204149
    },
    {
        "content": "<p>but it'd be good to have some actual examples</p>",
        "id": 128781092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why are we doing this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L42\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L42\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L42</a> ?</p>",
        "id": 128787321,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211347
    },
    {
        "content": "<p>what specifically?</p>",
        "id": 128787328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211365
    },
    {
        "content": "<p>the <code>&amp;&amp;</code>?</p>",
        "id": 128787329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211367
    },
    {
        "content": "<p>yes</p>",
        "id": 128787332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211373
    },
    {
        "content": "<p>typo, I imagine</p>",
        "id": 128787335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211375
    },
    {
        "content": "<p>that's an <code>std::rc::Rc&lt;borrow_check::nll::region_infer::RegionInferenceContext&lt;'_&gt;&gt;</code></p>",
        "id": 128787337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211378
    },
    {
        "content": "<p>just one would suffice I guess</p>",
        "id": 128787348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211389
    },
    {
        "content": "<p>this just creates a double indirection</p>",
        "id": 128787354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211396
    },
    {
        "content": "<p>the coercions probably make it go away</p>",
        "id": 128787360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211404
    },
    {
        "content": "<p>why that and not clone() over the Rc?</p>",
        "id": 128787370,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211424
    },
    {
        "content": "<p>why clone when you don't have to, I guess</p>",
        "id": 128787376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211435
    },
    {
        "content": "<p>isn't clone() over Rc cheap?</p>",
        "id": 128787420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211452
    },
    {
        "content": "<p>I think it's only that way to avoid typing <code>self.</code></p>",
        "id": 128787421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211453
    },
    {
        "content": "<p>yes, but not as cheap as not cloning <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 128787423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211461
    },
    {
        "content": "<p>ok</p>",
        "id": 128787425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211467
    },
    {
        "content": "<p>ya</p>",
        "id": 128787427,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211468
    },
    {
        "content": "<p>makes sense</p>",
        "id": 128787428,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> fyi, this thing is now compiling</p>",
        "id": 128787753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211813
    },
    {
        "content": "<p>need to run tests and see what's going on</p>",
        "id": 128787760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530211821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, yeah there's wrong stuff :)</p>",
        "id": 128789118,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213462
    },
    {
        "content": "<p>let me share with you all the code</p>",
        "id": 128789119,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\">https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy</a></p>",
        "id": 128789164,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213492
    },
    {
        "content": "<p>we are missing all those errors</p>",
        "id": 128789168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213498
    },
    {
        "content": "<p>don't we need a mixture of those solutions?</p>",
        "id": 128789182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213537
    },
    {
        "content": "<p>I mean, push down the Cause always but on uses</p>",
        "id": 128789191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213550
    },
    {
        "content": "<p>and on uses just do what we are doing in this issue</p>",
        "id": 128789194,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213562
    },
    {
        "content": "<p>the uses part is what we are trying to optimize</p>",
        "id": 128789207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213597
    },
    {
        "content": "<p>which errors are missing?</p>",
        "id": 128789356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213765
    },
    {
        "content": "<p>do you mean diffs that are committed?</p>",
        "id": 128789359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213769
    },
    {
        "content": "<p>let me take a look at the list</p>",
        "id": 128789367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213792
    },
    {
        "content": "<p>er, your search</p>",
        "id": 128789370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213796
    },
    {
        "content": "<p>yes</p>",
        "id": 128789373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213797
    },
    {
        "content": "<p>the stderr files committed</p>",
        "id": 128789375,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213808
    },
    {
        "content": "<p>I've added one separate commit with that so it's easy to remove :)</p>",
        "id": 128789382,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213826
    },
    {
        "content": "<p>I see I see</p>",
        "id": 128789383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213831
    },
    {
        "content": "<p>that clearly does not belong, hehe</p>",
        "id": 128789390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213835
    },
    {
        "content": "<p>so I think this is he case we were discussing, that we cut</p>",
        "id": 128789392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213838
    },
    {
        "content": "<p>and yes I think we can hadnle it</p>",
        "id": 128789432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213844
    },
    {
        "content": "<p>can you check something for me?</p>",
        "id": 128789435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213849
    },
    {
        "content": "<p>yes</p>",
        "id": 128789437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530213854
    },
    {
        "content": "<p>well, there appear to be two sorts  of problems</p>",
        "id": 128789440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213864
    },
    {
        "content": "<p>e.g., we are missing <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-46590a131be6d28cb3935ef7907f3ec4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-46590a131be6d28cb3935ef7907f3ec4\">this <code>Drop</code> case</a></p>",
        "id": 128789447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213878
    },
    {
        "content": "<p>in some other cases, <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-458f76bc8e159e70c0b51b4ae9123422\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-458f76bc8e159e70c0b51b4ae9123422\">we report drops but not uses, where the uses appear better</a></p>",
        "id": 128789475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213932
    },
    {
        "content": "<p>and then <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-4752f41f9479f027f69090cea51a1cc5\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy#diff-4752f41f9479f027f69090cea51a1cc5\">there are the \"borrowed value must be live for\" sorts of cases</a> &lt;-- this being the one we expected not to see</p>",
        "id": 128789521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213971
    },
    {
        "content": "<p>ok, would need to investigate all these stuff</p>",
        "id": 128790478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530215210
    },
    {
        "content": "<p>but the thing is ... so we need to include back LiveOther and UniversalRegion, right?</p>",
        "id": 128790545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530215291
    },
    {
        "content": "<p>these are the things that handle some cases</p>",
        "id": 128790548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530215304
    },
    {
        "content": "<p>also ... seems like the BFS is giving the wrong results from what you say</p>",
        "id": 128790561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530215328
    },
    {
        "content": "<p>anyway, need to investigate</p>",
        "id": 128790565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530215338
    },
    {
        "content": "<blockquote>\n<p>but the thing is ... so we need to include back LiveOther and UniversalRegion, right?</p>\n</blockquote>\n<p>no</p>",
        "id": 128791131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216016
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 128791139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216024
    },
    {
        "content": "<p>we do need to distinguish \"found no use\"</p>",
        "id": 128791144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216032
    },
    {
        "content": "<p>and add some handling after that</p>",
        "id": 128791146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216039
    },
    {
        "content": "<p>note that <code>LiveOther</code> did nothing</p>",
        "id": 128791151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216045
    },
    {
        "content": "<p>so this is really about deciding the universal region case</p>",
        "id": 128791155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216054
    },
    {
        "content": "<p>is your branch commited somewhere?</p>",
        "id": 128791157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216059
    },
    {
        "content": "<p>I'd like to play with it a bit :)</p>",
        "id": 128791160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216062
    },
    {
        "content": "<p>but I think we can examine the \"subregion\" (the region that we were searching for uses of)</p>",
        "id": 128791171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216079
    },
    {
        "content": "<p>to decide when to issue the universal region case</p>",
        "id": 128791176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216088
    },
    {
        "content": "<p>yes, the stuff is pushed</p>",
        "id": 128791273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530216190
    },
    {
        "content": "<p>the link is above</p>",
        "id": 128791276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530216196
    },
    {
        "content": "<p>let me paste again</p>",
        "id": 128791277,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530216199
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy\">https://github.com/rust-lang/rust/compare/master...spastorino:make-causal-tracking-lazy</a></p>",
        "id": 128791284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530216211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/spastorino/rust/tree/make-causal-tracking-lazy\" target=\"_blank\" title=\"https://github.com/spastorino/rust/tree/make-causal-tracking-lazy\">https://github.com/spastorino/rust/tree/make-causal-tracking-lazy</a></p>",
        "id": 128791337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530216248
    },
    {
        "content": "<p>ok</p>",
        "id": 128791487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216498
    },
    {
        "content": "<p>doing a build:)</p>",
        "id": 128791875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216990
    },
    {
        "content": "<p>:)</p>",
        "id": 128793752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219171
    },
    {
        "content": "<p>it's built now</p>",
        "id": 128793759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219179
    },
    {
        "content": "<p>cool</p>",
        "id": 128793767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219184
    },
    {
        "content": "<p>I went out for a bit but I'm back</p>",
        "id": 128793777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219192
    },
    {
        "content": "<p>I guess you fixed the thing</p>",
        "id": 128793780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219196
    },
    {
        "content": "<p>:)</p>",
        "id": 128793783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219198
    },
    {
        "content": "<p>otherwise I can keep investigating it</p>",
        "id": 128793787,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219203
    },
    {
        "content": "<p>I didn't fix anything :)</p>",
        "id": 128793889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219293
    },
    {
        "content": "<p>but I added some <code>debug!</code> builds</p>",
        "id": 128793891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219296
    },
    {
        "content": "<p>I was going to investigate the region outlives things</p>",
        "id": 128793896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219301
    },
    {
        "content": "<p>I <em>think</em> I  know how to fix those but I want to see what is coming out</p>",
        "id": 128793904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219309
    },
    {
        "content": "<p>also, I should not, I wouldn't be surprised if the output changes a <em>bit</em> here</p>",
        "id": 128793911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219317
    },
    {
        "content": "<p>that seems ok</p>",
        "id": 128793915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219318
    },
    {
        "content": "<p>as long as it's not horrible</p>",
        "id": 128793919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219321
    },
    {
        "content": "<p>ok</p>",
        "id": 128794284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219672
    },
    {
        "content": "<p>let me know your findings</p>",
        "id": 128794288,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530219677
    },
    {
        "content": "<p>ok yes I think this will work</p>",
        "id": 128794429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219831
    },
    {
        "content": "<p>I still don't know why some of those drop/use things turned out differently</p>",
        "id": 128794436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219838
    },
    {
        "content": "<p>trying my change, one sec</p>",
        "id": 128794439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219840
    },
    {
        "content": "<p>the TL;DR is that the \"borrowed value must be valid for...\" message--</p>",
        "id": 128794483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219853
    },
    {
        "content": "<p>we can look at the <code>region_sub</code> variable and print it for that region most of the time</p>",
        "id": 128794495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219865
    },
    {
        "content": "<p>in particular, <code>region_sub</code> is some region that caused us to include this point</p>",
        "id": 128794504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219877
    },
    {
        "content": "<p>and if it is a \"universal region\" (e.g., a lifetime parameter)</p>",
        "id": 128794516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219884
    },
    {
        "content": "<p>and we can't find any use of it</p>",
        "id": 128794521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219888
    },
    {
        "content": "<p>than we can just print out the region itself, which is what we were doing</p>",
        "id": 128794523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219897
    },
    {
        "content": "<p>not the best print out really but better than nothing</p>",
        "id": 128794540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219909
    },
    {
        "content": "<p>(this would benefit from the \"causal stuff\" that <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> and I have been working on, which tries to explain better why one region has to outlive another, but that's not landed yet...)</p>",
        "id": 128794549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219936
    },
    {
        "content": "<p>man, it's so annoying we have to rebuild libstd</p>",
        "id": 128794555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219943
    },
    {
        "content": "<p>there has to be some way to skip that</p>",
        "id": 128794556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219947
    },
    {
        "content": "<p>e.g., my builds (with incremental enabled) would finish pretty darn fast for these changes but for having to rebuild libstd</p>",
        "id": 128794564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530219959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> pushed a commit</p>",
        "id": 128795071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220581
    },
    {
        "content": "<p>you can see that mos of the lifetime errors are back now</p>",
        "id": 128795078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220588
    },
    {
        "content": "<p>these are the only tests with remaining diffs:</p>\n<div class=\"codehilite\"><pre><span></span>modified   src/test/ui/generator/borrowing.nll.stderr\n@@ -2,15 +2,10 @@ error[E0597]: `a` does not live long enough\nmodified   src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr\n@@ -1,19 +1,11 @@\nmodified   src/test/ui/generator/yield-while-iterating.nll.stderr\n@@ -19,7 +19,8 @@ LL | |     };\nmodified   src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr\n@@ -11,7 +11,8 @@ LL | |     };\nmodified   src/test/ui/issue-47646.stderr\n@@ -3,15 +3,9 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\nmodified   src/test/ui/span/destructor-restrictions.nll.stderr\n@@ -2,14 +2,9 @@ error[E0597]: `*a` does not live long enough\nmodified   src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr\n@@ -2,28 +2,17 @@ error[E0597]: `y` does not live long enough\nmodified   src/test/ui/span/send-is-not-static-std-sync.nll.stderr\n@@ -50,8 +50,8 @@ LL |     tx.send(&amp;*y);\n</pre></div>",
        "id": 128795167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220713
    },
    {
        "content": "<p>you can view the diffs in <a href=\"https://gist.github.com/nikomatsakis/9087bf03e4d061252005267808ab7f00\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/9087bf03e4d061252005267808ab7f00\">this gist</a></p>",
        "id": 128795188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220747
    },
    {
        "content": "<p>I'm gonna <em>guess</em> that the problem here is the region that we are selecting</p>",
        "id": 128795219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220781
    },
    {
        "content": "<p>i.e., the <code>region_sub</code> we are searching for is not a good choice</p>",
        "id": 128795225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220789
    },
    {
        "content": "<p>I'm not sure how much to worry about that</p>",
        "id": 128795232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220794
    },
    {
        "content": "<p>but it'd be interesting to see if some tweaks would make it better</p>",
        "id": 128795236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530220800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I feel like to fix some of these cases we may have to tweak the \"find use\" divide a bit</p>",
        "id": 128796142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222060
    },
    {
        "content": "<p>it might be worth landing this and doing a follow-up to do better</p>",
        "id": 128796150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222072
    },
    {
        "content": "<p><em>ah</em>, wait, hmm...</p>",
        "id": 128796172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222118
    },
    {
        "content": "<p>that mgiht be wrong, at last in some cases</p>",
        "id": 128796249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222187
    },
    {
        "content": "<p>I wonder if <code>find_use</code> is doing a DFS and not a BFS</p>",
        "id": 128796255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222194
    },
    {
        "content": "<p>that <em>could</em> be related?</p>",
        "id": 128796257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222198
    },
    {
        "content": "<p>yes, it is</p>",
        "id": 128796264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222227
    },
    {
        "content": "<p>hey ... back</p>",
        "id": 128796356,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222329
    },
    {
        "content": "<p>let me read all this</p>",
        "id": 128796358,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222334
    },
    {
        "content": "<p>ok, I'm trying one last tweak to see if it helps ;)</p>",
        "id": 128796369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222351
    },
    {
        "content": "<p>but it'd prob be useful to sync a bit in any case, particularly if there are still regressions we know of</p>",
        "id": 128796413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222366
    },
    {
        "content": "<p>i.e., so I can explain a bit more deeply</p>",
        "id": 128796415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222373
    },
    {
        "content": "<p>and/or sync over Zulip</p>",
        "id": 128796422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222387
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 128796429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222415
    },
    {
        "content": "<p>I was looking at the test <code>src/test/ui/generator/yield-while-iterating.nll.stderr</code>, in particular</p>",
        "id": 128796442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222464
    },
    {
        "content": "<p>I'll just dump out a bit of my thought process here</p>",
        "id": 128796446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222475
    },
    {
        "content": "<p>while I wait for this damn build :)</p>",
        "id": 128796448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222478
    },
    {
        "content": "<p>so, running with <code>RUST_LOG=rustc_mir::borrow_check</code> I see the following output:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-06-28T21:40:03Z: rustc_mir::borrow_check::nll::explain_borrow: explain_why_borrow_contains_point(context=Context { kind: AssignRhs, loc: bb6[23] }, borrow=BorrowData { reserve_location: bb6[3], activation_location: None, kind: Mut { allow_two_phase_borrow: fal\\\nse }, region: &#39;_#2r, borrowed_place: _1, assigned_place: _6 }, kind_place=None)\nDEBUG 2018-06-28T21:40:03Z: rustc_mir::borrow_check::nll::explain_borrow: explain_why_borrow_contains_point: borrow_region_vid=&#39;_#2r\nDEBUG 2018-06-28T21:40:03Z: rustc_mir::borrow_check::nll::explain_borrow: explain_why_borrow_contains_point: region_sub=&#39;_#35r\n</pre></div>",
        "id": 128796501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222509
    },
    {
        "content": "<p>those are debug logs I added</p>",
        "id": 128796505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222513
    },
    {
        "content": "<p>in particular, you see that we are looking for <code>'_#35r</code></p>",
        "id": 128796513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222523
    },
    {
        "content": "<p>that is, in order to explain why the given borrow contains the point <code>bb6[23]</code>, we found that it was because the borrow region (<code>'#2r</code>) was forced to outlive <code>'_#35r</code>, and <code>'_#35r</code> contained <code>bb6[23]</code></p>",
        "id": 128796544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222563
    },
    {
        "content": "<p>(make sense?)</p>",
        "id": 128796546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222564
    },
    {
        "content": "<blockquote>\n<p>I wonder if <code>find_use</code> is doing a DFS and not a BFS</p>\n</blockquote>\n<p>lol, I took it for granted that was doing a BFS, unsure why and didn't even bother to check</p>",
        "id": 128796548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222574
    },
    {
        "content": "<p>my command line btw is this:</p>\n<div class=\"codehilite\"><pre><span></span>RUST_LOG=rustc_mir::borrow_check rustc +rust-5-stage1 yield-while-iterating.rs -Zborrowck=mir -Zdump-mir=nll -Zverbose &gt;&amp; killme\n</pre></div>",
        "id": 128796557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222588
    },
    {
        "content": "<p>so then looking at the MIR dump, I see that <code>'_#35r</code> indeed appears within the type of the variable <code>b</code></p>",
        "id": 128796600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222604
    },
    {
        "content": "<p>so the curious thing is:</p>",
        "id": 128796607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222608
    },
    {
        "content": "<p>why are we highlighting the <strong>drop</strong> of <code>b</code></p>",
        "id": 128796609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222613
    },
    {
        "content": "<p>and not the <strong>regular use</strong>?</p>",
        "id": 128796612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222620
    },
    {
        "content": "<p>the regular use comes earlier really</p>",
        "id": 128796613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222623
    },
    {
        "content": "<p>actually, using a BFS doesn't fix it, which seems obvious now that I've been writing this out</p>",
        "id": 128796619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222646
    },
    {
        "content": "<p>but I think this particular test is still fixable by fixing the search itself</p>",
        "id": 128796631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222662
    },
    {
        "content": "<p>you're explaining now how did you figured out that find_use is wrong, right?</p>",
        "id": 128796641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222667
    },
    {
        "content": "<p>yes</p>",
        "id": 128796642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222672
    },
    {
        "content": "<p>ok</p>",
        "id": 128796646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222674
    },
    {
        "content": "<p>so BFS doesn't fix it?</p>",
        "id": 128796654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222682
    },
    {
        "content": "<p>we're currently getting this output:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n  --&gt; yield-while-iterating.rs:67:20\n   |\n62 |       let mut b = || {\n   |  _________________-\n63 | |         for p in &amp;mut x {\n64 | |             yield p;\n65 | |         }\n66 | |     };\n   | |_____- mutable borrow occurs here\n67 |       println!(&quot;{}&quot;, x[0]); //~ ERROR\n   |                      ^ immutable borrow occurs here\n68 |       b.resume();\n69 |   }\n   |   - borrow later used here, when `b` is dropped\n</pre></div>",
        "id": 128796658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222687
    },
    {
        "content": "<p>but the weird thing is how it's highlighting when <code>b</code> is dropped -- where there is a regular use (<code>b.resume()</code>) one line above</p>",
        "id": 128796669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222703
    },
    {
        "content": "<p>actually I think the reason for this is probably something like this:</p>",
        "id": 128796674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222712
    },
    {
        "content": "<p>if you look at the MIR graph, you will find that e.g. the <code>println!</code> might panic</p>",
        "id": 128796718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222732
    },
    {
        "content": "<p>if it were to panic, then it would drop <code>b</code></p>",
        "id": 128796722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222738
    },
    {
        "content": "<p>and indeed that is \"closer\" in some sense (in terms of the distance through the graph) than <code>b.resume()</code></p>",
        "id": 128796730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222753
    },
    {
        "content": "<p>but I think we'd still prefer to print regular uses</p>",
        "id": 128796736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222777
    },
    {
        "content": "<p>over drops</p>",
        "id": 128796738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222778
    },
    {
        "content": "<p>they are more intuitive</p>",
        "id": 128796739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222781
    },
    {
        "content": "<p>I can see a couple of possible fixes for this:</p>",
        "id": 128796747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222789
    },
    {
        "content": "<p>why does it points to { instead of the println! though?</p>",
        "id": 128796751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222802
    },
    {
        "content": "<p>if we find a use in a dtor, we could keep looking until we find a regualr use (if we do...)</p>",
        "id": 128796755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222812
    },
    {
        "content": "<blockquote>\n<p>why does it points to { instead of the println! though?</p>\n</blockquote>\n<p>the println is not the point where the dtor runs</p>",
        "id": 128796760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222823
    },
    {
        "content": "<p>the dtor runs when you exit the block</p>",
        "id": 128796761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222827
    },
    {
        "content": "<p>so that it was it is highlighting</p>",
        "id": 128796764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222834
    },
    {
        "content": "<p>that doesn't seem wrong to me</p>",
        "id": 128796765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222837
    },
    {
        "content": "<p>what is dtor? destructor?</p>",
        "id": 128796809,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222848
    },
    {
        "content": "<p>I'm just saying the path that you might take to reach the <code>}</code>  in fewer steps than the regular use</p>",
        "id": 128796810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222854
    },
    {
        "content": "<p>yes, dtor == destructor</p>",
        "id": 128796811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222857
    },
    {
        "content": "<p>yes, I see</p>",
        "id": 128796814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222871
    },
    {
        "content": "<p>alternatively, we could perhaps just not walk unwind paths</p>",
        "id": 128796817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222873
    },
    {
        "content": "<p>after all, everything that gets dropped on an unwind</p>",
        "id": 128796819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222882
    },
    {
        "content": "<p><em>also</em> gets dropped on a regular path</p>",
        "id": 128796820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222886
    },
    {
        "content": "<p>except I think that's not entirely true, e.g. for infinte loops maybe not</p>",
        "id": 128796826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222893
    },
    {
        "content": "<p>ya, that seems better</p>",
        "id": 128796830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222897
    },
    {
        "content": "<p>which seems better?</p>",
        "id": 128796835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222904
    },
    {
        "content": "<p>to not walk unwind paths</p>",
        "id": 128796849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222914
    },
    {
        "content": "<p>there is yet another alternative</p>",
        "id": 128796855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222921
    },
    {
        "content": "<p>which is to just push unwind paths onto a deferred list</p>",
        "id": 128796856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222928
    },
    {
        "content": "<p>and walk them only if the rest fails :)</p>",
        "id": 128796860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222932
    },
    {
        "content": "<p>we could try just skipping unwind paths for now</p>",
        "id": 128796866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222941
    },
    {
        "content": "<p>yeah, seems good</p>",
        "id": 128796867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222943
    },
    {
        "content": "<p>and if we find a case where it seems to be missing something</p>",
        "id": 128796877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222951
    },
    {
        "content": "<p>then we worry about it</p>",
        "id": 128796879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222954
    },
    {
        "content": "<p>I'm trying to see how easy it is to identify an unwind path</p>",
        "id": 128796930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222981
    },
    {
        "content": "<p>but should unwind paths be considered to report errors?</p>",
        "id": 128796933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530222986
    },
    {
        "content": "<p>not <em>that</em> easy</p>",
        "id": 128796936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222993
    },
    {
        "content": "<p>but doable :)</p>",
        "id": 128796937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530222999
    },
    {
        "content": "<p>:)</p>",
        "id": 128796939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223002
    },
    {
        "content": "<p>we hvae to add a helper fn I think to <code>TerminatorKind</code></p>",
        "id": 128796940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223007
    },
    {
        "content": "<blockquote>\n<p>but should unwind paths be considered to report errors?</p>\n</blockquote>\n<p>well, I don't know, that's the question :)</p>",
        "id": 128796947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223015
    },
    {
        "content": "<p>as I said, I think 99% of the time they are not needed</p>",
        "id": 128796949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223021
    },
    {
        "content": "<p>and they are going to lead to surprising reports for users somehow</p>",
        "id": 128796957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223029
    },
    {
        "content": "<p>because unwinding is less obvious</p>",
        "id": 128796960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223032
    },
    {
        "content": "<p>so if a non-unwind path can be found, seems better</p>",
        "id": 128796964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223037
    },
    {
        "content": "<p>I mean, that's never related to the code the user wrote, right?</p>",
        "id": 128796966,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223040
    },
    {
        "content": "<p>well, they wrote the function call :)</p>",
        "id": 128796972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223050
    },
    {
        "content": "<p>that triggers the unwind</p>",
        "id": 128796976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223058
    },
    {
        "content": "<p>but I think ignoring unwind is a good idea</p>",
        "id": 128796982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223077
    },
    {
        "content": "<p>or at least worth a try</p>",
        "id": 128797030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223094
    },
    {
        "content": "<p>and relatively simple to do</p>",
        "id": 128797033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223098
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 128797036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223104
    },
    {
        "content": "<p>I just pushed a commit</p>",
        "id": 128797048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223124
    },
    {
        "content": "<p>that makes the search into a BFS</p>",
        "id": 128797052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223127
    },
    {
        "content": "<p>ok</p>",
        "id": 128797060,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223131
    },
    {
        "content": "<p>since it still seems better</p>",
        "id": 128797077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223143
    },
    {
        "content": "<p>(it will find the shortest path)</p>",
        "id": 128797083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223145
    },
    {
        "content": "<p>but I can walk you through how to skip unwinds if you want</p>",
        "id": 128797092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223156
    },
    {
        "content": "<p>so ... with all the code in my branch the missing thing is to skip unwind paths?</p>",
        "id": 128797097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223158
    },
    {
        "content": "<p>I think so</p>",
        "id": 128797101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223163
    },
    {
        "content": "<p>we'll see how much that fixes</p>",
        "id": 128797104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223167
    },
    {
        "content": "<p>ok</p>",
        "id": 128797107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223169
    },
    {
        "content": "<p>but I think it would fix this test at least</p>",
        "id": 128797108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223170
    },
    {
        "content": "<p>it's still a hypothesis to some extent</p>",
        "id": 128797115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223176
    },
    {
        "content": "<p>ok</p>",
        "id": 128797119,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223180
    },
    {
        "content": "<blockquote>\n<p>but I can walk you through how to skip unwinds if you want</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 128797136,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223202
    },
    {
        "content": "<p>so in your code there is this loop here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                        </span><span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">block_data</span><span class=\"p\">.</span><span class=\"n\">terminator</span><span class=\"p\">().</span><span class=\"n\">successors</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">basic_block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">statement_index</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">block</span>: <span class=\"nc\">basic_block</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128797189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223221
    },
    {
        "content": "<p>or, not loop, but line</p>",
        "id": 128797190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223224
    },
    {
        "content": "<p>which takes all the successors of a node and adds them to the <code>queue</code> (it used to be a stack, but I changed it to a queue to make it a BFS)</p>",
        "id": 128797194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223239
    },
    {
        "content": "<p>we basically want to filter out the \"unwind\" successors there</p>",
        "id": 128797202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223256
    },
    {
        "content": "<p>ya</p>",
        "id": 128797203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223257
    },
    {
        "content": "<p>the nice property is that there is at most one such successor</p>",
        "id": 128797211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223265
    },
    {
        "content": "<p>so roughly what we want is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unwind_successor</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">BasicBlock</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">block_data</span><span class=\"p\">.</span><span class=\"n\">terminator</span><span class=\"p\">().</span><span class=\"n\">unwind_successor</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">block_data</span><span class=\"p\">.</span><span class=\"n\">terminator</span><span class=\"p\">().</span><span class=\"n\">successors</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">bb</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">unwind_successor</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">basic_block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">statement_index</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">block</span>: <span class=\"nc\">basic_block</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128797223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223317
    },
    {
        "content": "<p>the only catch is that this <code>unwind_successor</code> helper doesn't exist :)</p>",
        "id": 128797267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223326
    },
    {
        "content": "<p>ya</p>",
        "id": 128797268,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223326
    },
    {
        "content": "<p>there is a very similar one</p>",
        "id": 128797270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223328
    },
    {
        "content": "<p>but not quite the same</p>",
        "id": 128797277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223333
    },
    {
        "content": "<p>:)</p>",
        "id": 128797280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223338
    },
    {
        "content": "<p>there is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.TerminatorKind.html#method.unwind_mut\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.TerminatorKind.html#method.unwind_mut\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.TerminatorKind.html#method.unwind_mut</a></p>",
        "id": 128797287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223365
    },
    {
        "content": "<p><code>unwind_mut</code></p>",
        "id": 128797288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223368
    },
    {
        "content": "<p>but it returns a <code>Option&lt;&amp;mut BasicBlock&gt;</code></p>",
        "id": 128797289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223373
    },
    {
        "content": "<p>i.e., a reference that lets you <em>modify</em> the unwind successor</p>",
        "id": 128797293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223381
    },
    {
        "content": "<p>I think we basically to copy and paste that</p>",
        "id": 128797304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223395
    },
    {
        "content": "<p>to something that returns <code>Option&lt;BasicBlock&gt;</code></p>",
        "id": 128797305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223402
    },
    {
        "content": "<p>(I would not make it <code>Option&lt;&amp;BasicBlock&gt;</code> -- no point to returning a reference to an integer)</p>",
        "id": 128797309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223413
    },
    {
        "content": "<p>kind of annoying to have to copy and paste but I don't know a better way</p>",
        "id": 128797316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223428
    },
    {
        "content": "<p>(that is one of Rust's flaws :)  it's hard to abstract over &amp; and &amp;mut)</p>",
        "id": 128797349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223442
    },
    {
        "content": "<p>seems easy</p>",
        "id": 128797391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223513
    },
    {
        "content": "<p>cool</p>",
        "id": 128797392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223515
    },
    {
        "content": "<p>this is the source, incidentally: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/mod.rs.html#1168-1191\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/mod.rs.html#1168-1191\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/mod.rs.html#1168-1191</a></p>",
        "id": 128797393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223516
    },
    {
        "content": "<p>:)</p>",
        "id": 128797394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223517
    },
    {
        "content": "<p>yeah, should be easy enough I think</p>",
        "id": 128797398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223520
    },
    {
        "content": "<p>do you prefer me to fix the commits and merge stuff from your commits and mine?</p>",
        "id": 128797411,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223548
    },
    {
        "content": "<p>so there are no spurious stuff?</p>",
        "id": 128797417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223555
    },
    {
        "content": "<p>actually haven't checked your commits yet, but the last I made doesn't make any sense</p>",
        "id": 128797475,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223599
    },
    {
        "content": "<p>and the previous one is incomplete, so ... I guess it's better to merge them all into one thing</p>",
        "id": 128797488,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223622
    },
    {
        "content": "<p>probably I would just squash into one commit</p>",
        "id": 128797558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223700
    },
    {
        "content": "<p>the history is pretty messy</p>",
        "id": 128797559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223703
    },
    {
        "content": "<p>I don't care if you preseve my authorship if that is what you are asking :)</p>",
        "id": 128797560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223711
    },
    {
        "content": "<p>or at least squash into a few commits</p>",
        "id": 128797562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223718
    },
    {
        "content": "<p>(if you see some way to break it up, great)</p>",
        "id": 128797567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223729
    },
    {
        "content": "<p>yep</p>",
        "id": 128797571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223734
    },
    {
        "content": "<p>I'd try to do something</p>",
        "id": 128797591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223769
    },
    {
        "content": "<p>unsure if I will be able now but a bit later probably</p>",
        "id": 128797667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223822
    },
    {
        "content": "<p>this should be finished by today :)</p>",
        "id": 128797670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223832
    },
    {
        "content": "<p>that'd be great</p>",
        "id": 128797674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223840
    },
    {
        "content": "<p>I can't wait to land this plus the other things</p>",
        "id": 128797676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223845
    },
    {
        "content": "<p>and do some new profiles :)</p>",
        "id": 128797678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530223848
    },
    {
        "content": "<p>:)</p>",
        "id": 128797680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530223853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> done, compiling</p>",
        "id": 128800298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530227551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> any updates? :)</p>",
        "id": 128801008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530228901
    },
    {
        "content": "<p>yes</p>",
        "id": 128801084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229062
    },
    {
        "content": "<p>just pushed</p>",
        "id": 128801085,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229066
    },
    {
        "content": "<p>want to see just the latest diff?</p>",
        "id": 128801087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229074
    },
    {
        "content": "<p>I have it locally</p>",
        "id": 128801089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229077
    },
    {
        "content": "<p>I pushed by melting it with the previous commits</p>",
        "id": 128801129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229092
    },
    {
        "content": "<p>I'm opening a PR</p>",
        "id": 128801132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229096
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51889\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51889\">https://github.com/rust-lang/rust/pull/51889</a></p>",
        "id": 128801149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229178
    },
    {
        "content": "<p>forgot to run rustfmt</p>",
        "id": 128801150,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229184
    },
    {
        "content": "<p>this will probably fail on CI</p>",
        "id": 128801153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229189
    },
    {
        "content": "<p>running rustfmt and pushing</p>",
        "id": 128801155,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229195
    },
    {
        "content": "<p>(one nice add'l thing about this approach is that it is more polonius friendly in the future)</p>",
        "id": 128801479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530229618
    },
    {
        "content": "<p>:)</p>",
        "id": 128801488,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229638
    },
    {
        "content": "<p>force pushed again</p>",
        "id": 128801491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229642
    },
    {
        "content": "<p>removed a wrong dead_code thing and run rustfmt over the files</p>",
        "id": 128801494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you find something that needs to be changed</p>",
        "id": 128801650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229905
    },
    {
        "content": "<p>cool</p>",
        "id": 128801651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530229908
    },
    {
        "content": "<p>I gotta go put my daughter to bed</p>",
        "id": 128801652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530229912
    },
    {
        "content": "<p>will look after</p>",
        "id": 128801654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530229915
    },
    {
        "content": "<p>ok</p>",
        "id": 128801658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229919
    },
    {
        "content": "<p>going to have dinner</p>",
        "id": 128801702,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229931
    },
    {
        "content": "<p>will be kind of around but if there is something to fix will do a bit later for sure</p>",
        "id": 128801716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530229969
    },
    {
        "content": "<p>ok so the perf results are...confusing. On the one hand, the total times I see didn't seem to change that much. On the other hand, this <em>did</em> knock those fns out of the profile as expected</p>",
        "id": 128804989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530236016
    },
    {
        "content": "<p>I'm curious to see what the perf server finds</p>",
        "id": 128804991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530236029
    },
    {
        "content": "<p>it seems to be a bit more consistent somehow</p>",
        "id": 128804992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530236034
    },
    {
        "content": "<p>current perf graph: <a href=\"https://gist.github.com/nikomatsakis/61b093fdf1cbff1f10bebfe532bdae8e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/61b093fdf1cbff1f10bebfe532bdae8e\">https://gist.github.com/nikomatsakis/61b093fdf1cbff1f10bebfe532bdae8e</a></p>",
        "id": 128805036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530236060
    },
    {
        "content": "<blockquote>\n<p>(that is one of Rust's flaws :)  it's hard to abstract over &amp; and &amp;mut)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when are you going to fix that, anyway? <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 128836341,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530288449
    }
]