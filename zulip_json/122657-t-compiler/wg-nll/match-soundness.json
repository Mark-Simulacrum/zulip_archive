[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ... the question is</p>",
        "id": 126409328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036057
    },
    {
        "content": "<p>(wait lets give <em>some</em> context for others)</p>",
        "id": 126409329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036073
    },
    {
        "content": "<p>I guess I agree it's probably nontrivial, but I feel like it might not be <em>that</em> hard to handle the <code>ref mut</code> case...</p>",
        "id": 126409330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036077
    },
    {
        "content": "<p>ok :)</p>",
        "id": 126409331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036079
    },
    {
        "content": "<p>niko and I are talking about <a href=\"https://github.com/rust-lang/rust/issues/27282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282\">https://github.com/rust-lang/rust/issues/27282</a></p>",
        "id": 126409334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036092
    },
    {
        "content": "<p>(I imagine <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> would be interested in particular)</p>",
        "id": 126409344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036116
    },
    {
        "content": "<p>in particular, there are two avenues for handling the <code>ref mut</code> problem at the end of this comment: <a href=\"https://github.com/rust-lang/rust/issues/27282#issuecomment-384393383\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282#issuecomment-384393383\">https://github.com/rust-lang/rust/issues/27282#issuecomment-384393383</a></p>",
        "id": 126409345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036122
    },
    {
        "content": "<p>Niko has long described handling this via a \"hack\" to ensure that the initial mut-borrow caused by the <code>ref mut</code> does not get treated as conflicting with the <code>FakeUse</code> of the shared-borrow of the match input.</p>",
        "id": 126409395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036239
    },
    {
        "content": "<p>but then ariel pointed out that what we want essentially amounts to another instance of two-phase borrows:</p>",
        "id": 126409439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036297
    },
    {
        "content": "<p>We want the <code>ref mut</code> to initially be a reservation of the matched location</p>",
        "id": 126409440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036314
    },
    {
        "content": "<p>and occurrences of the binding within the guard should <em>not</em> activate. This <em>is sound</em>, since they will be implicitly <code>&amp; &amp;mut</code> (a shared-borrow of a mut-borrow, which you cannot mutate through).</p>",
        "id": 126409450,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036373
    },
    {
        "content": "<p>Niko and I both like this two-phase borrow approach to the issue</p>",
        "id": 126409451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036390
    },
    {
        "content": "<p>And then we were talking about just the question of how best to implement this. Right now two-phase borrows are only allowed for autorefs and operators</p>",
        "id": 126409502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036426
    },
    {
        "content": "<p>so we would need to increase the scope of that collection of forms that allow two-phase borrows. My question was, how much effort to put into an attempt to restrict it to this specific case.</p>",
        "id": 126409513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036468
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/build/matches/mod.rs#L939-L941\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/build/matches/mod.rs#L939-L941\">this is the function</a> that creates the temporaries for <code>ref mut</code> bindings, right? And, more specifically, <a href=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/build/matches/mod.rs#L996-L1003\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/build/matches/mod.rs#L996-L1003\">this line</a>?</p>",
        "id": 126409514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036470
    },
    {
        "content": "<p>(Hmm, I see we create <em>two</em> temporaries, one for the guard and one for \"realz\", are we going to <em>recreate</em> the one \"for realz\" later if the guard is true, or just use it?)</p>",
        "id": 126409520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036511
    },
    {
        "content": "<p>If the latter, we would maybe have to tweak the two-phase system, since that would have more than one use</p>",
        "id": 126409559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036526
    },
    {
        "content": "<p>but .. hopefully not too hard to do</p>",
        "id": 126409562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036535
    },
    {
        "content": "<p>I believe we use the already created temporary</p>",
        "id": 126409565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036559
    },
    {
        "content": "<p>(and yes, I believe that you have correctly identified the relevant code.)</p>",
        "id": 126409569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036579
    },
    {
        "content": "<p>ok</p>",
        "id": 126409572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036585
    },
    {
        "content": "<p>But maybe the simplest thing would be to not reuse the already created temporary, but rather recreate it...</p>",
        "id": 126409595,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036632
    },
    {
        "content": "<p>that would indeed be simple</p>",
        "id": 126409596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036641
    },
    {
        "content": "<p>at least w/r/t to the 2-phase borrow setup</p>",
        "id": 126409635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036648
    },
    {
        "content": "<p>I don't really recall how \"baked in\" the \"single use\" concept is, <em>but</em>, I am a bit nervous otherwise because</p>",
        "id": 126409639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036677
    },
    {
        "content": "<p>we don't want users to \"see\" the second phase I don't think</p>",
        "id": 126409640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036688
    },
    {
        "content": "<p>in particular:</p>",
        "id": 126409641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036690
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// should error, even if `x` is not later used</span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126409652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036713
    },
    {
        "content": "<p>So I'll admit up front that I had been thinking I would have to mess around with the flag here: <a href=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/hair/pattern/mod.rs#L484\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/hair/pattern/mod.rs#L484\">https://github.com/rust-lang/rust/blob/41707d8df9a441e19387a4a61415ee0af58a9e48/src/librustc_mir/hair/pattern/mod.rs#L484</a></p>",
        "id": 126409653,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036720
    },
    {
        "content": "<p>so if we don't add a second borrow, then I think we would want to add an artificial use</p>",
        "id": 126409655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036731
    },
    {
        "content": "<p>I see, that's another option, but that would have a dramatic effect (unless we add those artificial uses :)</p>",
        "id": 126409699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036776
    },
    {
        "content": "<p>But it sounds like I might not have to mess with the hair, necessarily, since you have pointed out that there is already much magic injected during MIR generation and maybe I can just focus on adding more magic there</p>",
        "id": 126409700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036778
    },
    {
        "content": "<p>I could see merits to either approach. It might be confusing that the flag is false but the borrow is nonetheless 2-phase :)</p>",
        "id": 126409701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036798
    },
    {
        "content": "<p>at least a comment seems appropriate</p>",
        "id": 126409702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036802
    },
    {
        "content": "<p>wait</p>",
        "id": 126409703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036822
    },
    {
        "content": "<p>You really do want an error in that case above?</p>",
        "id": 126409709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036831
    },
    {
        "content": "<p>oh well</p>",
        "id": 126409710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036843
    },
    {
        "content": "<p>actually proably not because NLL</p>",
        "id": 126409711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036848
    },
    {
        "content": "<p>exactly</p>",
        "id": 126409712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// should error, even though `x` is not yet used</span>\n<span class=\"w\">       </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126409717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036871
    },
    {
        "content": "<p>now that I've discovered that <code>mem::drop</code> is in the prelude it's my new general purpose \"read\" primitive ;)</p>",
        "id": 126409759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036891
    },
    {
        "content": "<p>Okay, <em>now</em> we are in an interesting position</p>",
        "id": 126409762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036911
    },
    {
        "content": "<p>/me thinks about the new example</p>",
        "id": 126409765,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036936
    },
    {
        "content": "<p>I guess going down that path eventually leads to the same counter-examples that led us to restrict two-phase borrows in the first place</p>",
        "id": 126409775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036964
    },
    {
        "content": "<p>you mean if we permitted that example above?</p>",
        "id": 126409779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526036984
    },
    {
        "content": "<p>Yes</p>",
        "id": 126409780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526036990
    },
    {
        "content": "<p>I would expect so, but there is an add'l reason, which is that I don't want to have to \"teach\" 2-phase borrows</p>",
        "id": 126409782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037001
    },
    {
        "content": "<p>Right right</p>",
        "id": 126409824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526037011
    },
    {
        "content": "<p>at least not until people are asking pretty advanced questions :)</p>",
        "id": 126409827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037028
    },
    {
        "content": "<p>(but I think that these sorts of examples would be confusing early on, without much benefit...)</p>",
        "id": 126409829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037047
    },
    {
        "content": "<p>if we were going to go that way, I'd want to develop a more 'well-rounded' 2-phase system</p>",
        "id": 126409833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037065
    },
    {
        "content": "<p>and I guess we have our hands full right now :)</p>",
        "id": 126409836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037083
    },
    {
        "content": "<p>brb gonna head out from my hotel, I think, and to a local cafe or some kind of \"hipper\" surroundings. In particular ones where there is decent coffee.</p>",
        "id": 126409880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526037151
    },
    {
        "content": "<blockquote>\n<p>But maybe the simplest thing would be to not reuse the already created temporary, but rather recreate it...</p>\n</blockquote>\n<p>(on the flip side of this: I'm pretty sure there was a <em>reason</em> I did not take this approach from the outset. I.e. the way that the code is written, I had to do more work on the implementation side to avoid reuse. Maybe there was some move error resulting from the attempt to recreate? Or just attempting to reassign the temp was disallowed? I will find out...)</p>",
        "id": 126410280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526037968
    },
    {
        "content": "<p>this is why I'm trying to read all this — to learn and reteach</p>",
        "id": 126415653,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526046583
    },
    {
        "content": "<p>guess who spent several rustc compile cycles adding <code>debug!</code> statements trying to figure out why his extensions to the two-phase borrow to include this match stuff didn't seem to be having any effect ... only to eventually realize/remember that <code>-Z borrowck=mir</code> does not currently imply <code>-Z two-phase-borrows</code>...</p>",
        "id": 126432860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526071241
    },
    {
        "content": "<p>on the plus side: I now have several more debug! statements to look at as I now debug my code for real. :)</p>",
        "id": 126433331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526071876
    },
    {
        "content": "<p>Oh, super interesting. I think my branch now works, including this new slight expansion of two phase borrows... The only problem (other than the diagnostics being non-ideal) is that I seem to have stopped triggering the unused mut lint in one case, namely this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"c1\">//[lexical]~ ERROR: variable does not need to be mutable</span>\n<span class=\"w\">                   </span><span class=\"c1\">//[nll]~^ ERROR: variable does not need to be mutable</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126434864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526074139
    },
    {
        "content": "<p>Which is super weird; I wonder if its because I slightly altered the MIR codegen so that the variables get constructed on the arm body itself...</p>",
        "id": 126434875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526074198
    },
    {
        "content": "<p>Hmm... fixed that particular example, but now its made me start exploring the test space around multiple patterns on one arm, and I'm starting to doubt whether extending two-phase borrows for this case is as trivial as we had thought...</p>",
        "id": 126435905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526075459
    },
    {
        "content": "<p>e.g. a case like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">   </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is now going to have multiple definition sites for <code>x</code>. And for the guard, they'll want to each be borrows of distinct locations on the matched input...</p>",
        "id": 126435976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526075591
    },
    {
        "content": "<p>But now its almost midnight so I think its time for me to put this away</p>",
        "id": 126435981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526075614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the unused mut lint does have some .. oddities as well</p>",
        "id": 126437708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526078483
    },
    {
        "content": "<p>woot: <a href=\"https://github.com/rust-lang/rust/pull/50783\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50783\">https://github.com/rust-lang/rust/pull/50783</a></p>",
        "id": 126613727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526420206
    },
    {
        "content": "<p>(and now time for me to get ready for bed)</p>",
        "id": 126613743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526420226
    },
    {
        "content": "<p>Nice</p>",
        "id": 126614241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526420887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw I think I’m done revising 50783 so you can just double check my note about whether you had already reviewed the extension to two-phase borrows</p>",
        "id": 127227131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527554394
    },
    {
        "content": "<p>ok</p>",
        "id": 127239871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527581539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> by \"the extension to two-phase borrows\", do you mean <a href=\"https://github.com/rust-lang/rust/pull/50783/commits/ab17cd4696bf73018e2d9b2cbbbb00705dcc14b3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50783/commits/ab17cd4696bf73018e2d9b2cbbbb00705dcc14b3\">this commit</a>? That is, considering a use <em>solely</em> in a borrow to not activate?</p>",
        "id": 127240545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527582603
    },
    {
        "content": "<p>Is that ab17cd4 ? It looks like it (and that is the correct one, at the current rebase state )</p>",
        "id": 127240643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527582730
    },
    {
        "content": "<p>it is</p>",
        "id": 127240727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527582860
    }
]