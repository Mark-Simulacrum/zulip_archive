[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> if you were inclined to do some polonius hacking... one thing I would like is to improve the debugging output</p>",
        "id": 134775716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084821
    },
    {
        "content": "<p>e.g., for this test failure, I get</p>",
        "id": 134775723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084828
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  left: `{Point { index: 1 }: [Loan { index: 0 }]}`,\n right: `{}`&#39;, src/test.rs:186:5\n</pre></div>",
        "id": 134775724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084838
    },
    {
        "content": "<p>but what I would like to see is <code>Point { index: 1 }</code> written as <code>mid(BB1)</code> or whatever</p>",
        "id": 134775726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084851
    },
    {
        "content": "<p>tbh I'm not entirely sure <em>which</em> point is :)</p>",
        "id": 134775728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084858
    },
    {
        "content": "<p>I guess we could just put the \"program\" into thread-local data</p>",
        "id": 134775737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084873
    },
    {
        "content": "<p>so we can access it from the Debug impl</p>",
        "id": 134775738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084878
    },
    {
        "content": "<p>or else we can write some wrappers</p>",
        "id": 134775740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084882
    },
    {
        "content": "<p>e.g., <code>foo.debug_in(program)</code></p>",
        "id": 134775785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084889
    },
    {
        "content": "<p>it is quite obscure</p>",
        "id": 134775789,
        "sender_full_name": "lqd",
        "timestamp": 1538084913
    },
    {
        "content": "<p>I will looking into it!</p>",
        "id": 134775815,
        "sender_full_name": "lqd",
        "timestamp": 1538084957
    },
    {
        "content": "<p>(I've had the same problem before, and I go through the InternerTables to go back to the original string input: the <code>untern</code> function)</p>",
        "id": 134775898,
        "sender_full_name": "lqd",
        "timestamp": 1538085036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for example, in the program tests: <a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/program.rs#L235-L239\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/program.rs#L235-L239\">here</a></p>",
        "id": 134776049,
        "sender_full_name": "lqd",
        "timestamp": 1538085235
    },
    {
        "content": "<p>I've never <em>quite</em> gotten a pattern I like</p>",
        "id": 134776154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085341
    },
    {
        "content": "<p>I think in my ideal world</p>",
        "id": 134776156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085344
    },
    {
        "content": "<p>we'd have a <code>DebugWith</code> trait</p>",
        "id": 134776158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085349
    },
    {
        "content": "<p>and a derive for it</p>",
        "id": 134776159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085352
    },
    {
        "content": "<p>which takes some context as argument</p>",
        "id": 134776199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085365
    },
    {
        "content": "<p>i.e., the types would not implement <code>Debug</code></p>",
        "id": 134776203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085384
    },
    {
        "content": "<p>but <code>DebugWith</code></p>",
        "id": 134776204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085387
    },
    {
        "content": "<p>and then you would do <code>format!(\"{:?}\", foo.debug_with(&amp;interner))</code> or whatever</p>",
        "id": 134776206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085404
    },
    {
        "content": "<p>where <code>debug_with</code> would return some wrapper that implements <code>Debug</code></p>",
        "id": 134776211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085413
    },
    {
        "content": "<p>but I've never tried this pattern out at scale to see how it feels :)</p>",
        "id": 134776215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085420
    },
    {
        "content": "<p>mostly because usually i am too busy trying to get something done</p>",
        "id": 134776223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085433
    },
    {
        "content": "<p>..kind of like right now</p>",
        "id": 134776226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085439
    },
    {
        "content": "<p>maybe we can try it in polonius (it wouldn't be that big of a scale)</p>",
        "id": 134776244,
        "sender_full_name": "lqd",
        "timestamp": 1538085475
    },
    {
        "content": "<p>I also need to learn how to write a custom derive</p>",
        "id": 134776298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085519
    },
    {
        "content": "<p>I was searching for that recently and found it surprisingly ill-documented</p>",
        "id": 134776300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085530
    },
    {
        "content": "<p>presumably <code>syn</code> or something makes it easy :)</p>",
        "id": 134776312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085551
    },
    {
        "content": "<p>I've always wanted a \"meta-derive\", where you can annotate traits with the derive pattern you want, and it will generate the derive for you...</p>",
        "id": 134776316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085575
    },
    {
        "content": "<p>..since for me at least it's usually one of a few options...</p>",
        "id": 134776325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085589
    },
    {
        "content": "<p>/me rambles</p>",
        "id": 134776327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085596
    },
    {
        "content": "<p>ok, I gotta run</p>",
        "id": 134776329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538085600
    },
    {
        "content": "<p>dtolnay has interesting tests/accessory crates helping out, as always :)</p>",
        "id": 134776404,
        "sender_full_name": "lqd",
        "timestamp": 1538085656
    },
    {
        "content": "<p>(and of course the example in <a href=\"https://github.com/dtolnay/reflect\" target=\"_blank\" title=\"https://github.com/dtolnay/reflect\">reflect</a> is for a Debug custom derive <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span> )</p>",
        "id": 134776594,
        "sender_full_name": "lqd",
        "timestamp": 1538085943
    }
]