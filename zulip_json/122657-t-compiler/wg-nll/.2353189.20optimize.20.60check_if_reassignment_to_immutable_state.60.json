[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> how much do you know about the <code>MoveData</code> setup?</p>",
        "id": 131117598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533744631
    },
    {
        "content": "<p>from the top of my head nothing</p>",
        "id": 131118346,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533745516
    },
    {
        "content": "<p>but I have already done something with it ... don't remember</p>",
        "id": 131118359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533745529
    },
    {
        "content": "<p>need to check the definition</p>",
        "id": 131118362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533745533
    },
    {
        "content": "<p>the idea is that we find paths which are used within the MIR (i.e., <code>Place</code>s)</p>",
        "id": 131118429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745607
    },
    {
        "content": "<p>and we assign them a <code>MovePathIndex</code></p>",
        "id": 131118434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745612
    },
    {
        "content": "<p>actually i'd like to use them (or something similar) for <em>everything</em></p>",
        "id": 131118441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745627
    },
    {
        "content": "<p>but right we only use them for computing which values have been initialized etc</p>",
        "id": 131118444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745634
    },
    {
        "content": "<p>these indices are then used in the bitset</p>",
        "id": 131118446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745641
    },
    {
        "content": "<p>in particular, if you have a path like <code>a.b.c</code> there will be a <code>MovePathIndex</code> (MPI) for that path; these are in a tree, so you can go to the MPI for the parent (<code>a.b</code>) and its parent (<code>a</code>)</p>",
        "id": 131118458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745673
    },
    {
        "content": "<p>we make MPIs for each path that is used in the source</p>",
        "id": 131118483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745682
    },
    {
        "content": "<p>well, almost</p>",
        "id": 131118503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745685
    },
    {
        "content": "<p>in particular, there are some paths where you cannot move individual fields out</p>",
        "id": 131118507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745698
    },
    {
        "content": "<p>for example, you cannot move a field from an enum, or from the referent of a <code>&amp;T</code> , or from a struct that implements <code>Drop</code></p>",
        "id": 131118513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745716
    },
    {
        "content": "<p>in those cases there is no MPI for the path</p>",
        "id": 131118520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745723
    },
    {
        "content": "<p>because any attempt to <em>move</em> from such a path would be an error</p>",
        "id": 131118523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745728
    },
    {
        "content": "<p>I mention this because when you have an assignment like <code>a = foo</code>, we need to map <code>a</code> to an MPI to look up whether it has already been initialized or not</p>",
        "id": 131118544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745770
    },
    {
        "content": "<p>in the \"simplified version\" that I initially proposed, this lookup would be infallible, because there is <em>always</em> an MPI for every local variable</p>",
        "id": 131118553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745795
    },
    {
        "content": "<p>but if we want to permit something like</p>\n<div class=\"codehilite\"><pre><span></span>let x: (u32, u32);\n\nx.0 = 22;\nx.1 = 44;\n</pre></div>",
        "id": 131118621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745823
    },
    {
        "content": "<p>then we would be looking up the MPI for <code>x.0</code> (and all of its parents, I think)</p>",
        "id": 131118635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745838
    },
    {
        "content": "<p>(actually i'm not 100% sure how that works, I have to double check, I thought that we only propagated the bits for the paths like <code>x.0</code>, but maybe we assign a bit for every MPI? have to check)</p>",
        "id": 131118658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745874
    },
    {
        "content": "<p>anyway, point is, that might be fallible</p>",
        "id": 131118662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745880
    },
    {
        "content": "<p>I'm actually in favor still of doing the simplified thing that matches AST borrow ck</p>",
        "id": 131118665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745887
    },
    {
        "content": "<p>and opening an issue to do a full extension</p>",
        "id": 131118669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745893
    },
    {
        "content": "<p>to do it <em>right</em> will require a bit more work anyway</p>",
        "id": 131118674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533745898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you think you'll have time to poke at this? I'm tempted to take a stab at it myself to see how much it helps</p>",
        "id": 131228691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895830
    },
    {
        "content": "<p>yes</p>",
        "id": 131234905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533905042
    },
    {
        "content": "<p>I have time today for sure</p>",
        "id": 131234924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533905058
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back</p>",
        "id": 131842603,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930125
    },
    {
        "content": "<p>so, I've made a couple of tests</p>",
        "id": 131842608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930133
    },
    {
        "content": "<p>but I was reading what you wrote in the issue</p>",
        "id": 131842613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930139
    },
    {
        "content": "<p>in particular this part</p>",
        "id": 131842622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930151
    },
    {
        "content": "<p><code>It iterates over all initialized paths and checks that the path being assigned to (e.g., x.0 in the third example) is disjoint from all of them:</code></p>",
        "id": 131842623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930153
    },
    {
        "content": "<p>not sure I follow the meaning of that</p>",
        "id": 131842626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930168
    },
    {
        "content": "<p>and also, it seems very different to what the error talks about</p>",
        "id": 131842639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930186
    },
    {
        "content": "<p>the error says</p>",
        "id": 131842641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930191
    },
    {
        "content": "<p><code>cannot mutably borrow field of immutable binding</code></p>",
        "id": 131842650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930204
    },
    {
        "content": "<p>which I'm not even sure if it's correct</p>",
        "id": 131842661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930231
    },
    {
        "content": "<p>I need to read the comments of the issue</p>",
        "id": 131842718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930253
    },
    {
        "content": "<p>I've read the stuff, ok I see why the mut thing, but the borrow word in the error sounds weird to me</p>",
        "id": 131842842,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930434
    },
    {
        "content": "<p>is that a borrow?</p>",
        "id": 131842845,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930437
    },
    {
        "content": "<p>I mean, accessing an entry of a pair</p>",
        "id": 131842851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930447
    },
    {
        "content": "<p>and anyway I still don't get the phrase anyway <code>It iterates over all initialized paths and checks that the path being assigned to (e.g., x.0 in the third example) is disjoint from all of them:</code></p>",
        "id": 131842921,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930507
    },
    {
        "content": "<p>I mean, I think I get it but I can't make sense of that</p>",
        "id": 131842938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930551
    },
    {
        "content": "<p>you mean that the algorithm iterates over .0 and .1 and check that the thing being assigned in this case .0 is disjoint in this case? which of course is not?</p>",
        "id": 131842945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930586
    },
    {
        "content": "<p>I don't see how that makes sense to cover reassignments of immutable things</p>",
        "id": 131842991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533930603
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 131843422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931124
    },
    {
        "content": "<p>sorry, was in a call</p>",
        "id": 131843423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931128
    },
    {
        "content": "<p>ok so what the code does <em>now</em></p>",
        "id": 131843431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931142
    },
    {
        "content": "<p>it has a complete list of all things that have ever been assigned up until this point</p>",
        "id": 131843439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931151
    },
    {
        "content": "<p>I was reading again and I think I got it :)</p>",
        "id": 131843440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931155
    },
    {
        "content": "<p>ah ok :)</p>",
        "id": 131843441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931159
    },
    {
        "content": "<p>I <em>think</em> the actual diff needed here is not very large</p>",
        "id": 131843452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931184
    },
    {
        "content": "<p>depending which alternative we opt for</p>",
        "id": 131843454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931190
    },
    {
        "content": "<p>we are not going to allow in this PR <code>x.0 = 1; x.1 = 2;</code> and stuff like that, right?</p>",
        "id": 131843465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931203
    },
    {
        "content": "<p>I'm personally leaning that way</p>",
        "id": 131843524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931225
    },
    {
        "content": "<p>it seems just a bit easier</p>",
        "id": 131843528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931232
    },
    {
        "content": "<p>it may be a larger diff though :)</p>",
        "id": 131843530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931236
    },
    {
        "content": "<p>just because the code is a bit oriented towards accepting that</p>",
        "id": 131843540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931254
    },
    {
        "content": "<p>anyway I feel like I'd rather support <code>x.0 = 1</code> <em>properly</em></p>",
        "id": 131843553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931271
    },
    {
        "content": "<p>I regret that we permit you to do that (at least, without having initialized <code>x</code> first) at all</p>",
        "id": 131843561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931283
    },
    {
        "content": "<p>(i.e., we now accept it, so long as <code>x</code> is <code>mut</code>)</p>",
        "id": 131843577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931305
    },
    {
        "content": "<p>but not much we can do about <em>that</em></p>",
        "id": 131843579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931308
    },
    {
        "content": "<p>no need to break code</p>",
        "id": 131843580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931310
    },
    {
        "content": "<blockquote>\n<p>I regret that we permit you to do that (at least, without having initialized <code>x</code> first) at all</p>\n</blockquote>\n<p>permit to do what?</p>",
        "id": 131843646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931354
    },
    {
        "content": "<p>we permit this today:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but only if <code>x</code> is <code>mut</code></p>",
        "id": 131843671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931413
    },
    {
        "content": "<p>we do not permit you to <em>use</em> <code>x</code> later</p>",
        "id": 131843674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931421
    },
    {
        "content": "<p>that is, you can use <code>x.0</code> but not <code>x</code></p>",
        "id": 131843675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931425
    },
    {
        "content": "<p>in other words, if <code>x</code> is mut, we let you initialize \"field by field\", but we never recognize that <code>x</code> is fully initialized</p>",
        "id": 131843712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931443
    },
    {
        "content": "<p>I see</p>",
        "id": 131843725,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931454
    },
    {
        "content": "<p>even this ...</p>",
        "id": 131843730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931469
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131843736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931491
    },
    {
        "content": "<p>should work</p>",
        "id": 131843741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931495
    },
    {
        "content": "<p>well</p>",
        "id": 131843823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931583
    },
    {
        "content": "<p>eventually I think yes</p>",
        "id": 131843824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931586
    },
    {
        "content": "<p>but it doesn't today (i.e., with the AST-based checker)</p>",
        "id": 131843826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931592
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 131843830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931598
    },
    {
        "content": "<p>it does with the MIR-based checker today</p>",
        "id": 131843832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931602
    },
    {
        "content": "<p>so</p>",
        "id": 131843848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131843849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931666
    },
    {
        "content": "<p>why should that fail?</p>",
        "id": 131843853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931676
    },
    {
        "content": "<p>just to keep the AST behavior for now?</p>",
        "id": 131843898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931690
    },
    {
        "content": "<p>it's easier? :)</p>",
        "id": 131843900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931693
    },
    {
        "content": "<p>I'm not sure that it should</p>",
        "id": 131843909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931703
    },
    {
        "content": "<p>but weren't you saying that this case is already working?</p>",
        "id": 131843914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931715
    },
    {
        "content": "<p>:P</p>",
        "id": 131843915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931716
    },
    {
        "content": "<p>well</p>",
        "id": 131843917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ERROR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131843922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931742
    },
    {
        "content": "<p>the thing is that x doesn't work later?</p>",
        "id": 131843926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931743
    },
    {
        "content": "<p>\"working\"</p>",
        "id": 131843931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931745
    },
    {
        "content": "<p>yes</p>",
        "id": 131843933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931748
    },
    {
        "content": "<p>I see</p>",
        "id": 131843935,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931749
    },
    {
        "content": "<p>but yes</p>",
        "id": 131843940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931756
    },
    {
        "content": "<p>so ... to be 100% clear</p>",
        "id": 131843997,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931806
    },
    {
        "content": "<p>the rules we want to implement are ...</p>",
        "id": 131844003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931812
    },
    {
        "content": "<p>if x is not mut, we can't assign twice, it doesn't matter if the parts are disjoint</p>",
        "id": 131844008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931836
    },
    {
        "content": "<p>well</p>",
        "id": 131844016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931863
    },
    {
        "content": "<p>I am vacillating :)</p>",
        "id": 131844033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931867
    },
    {
        "content": "<p>but that <em>is</em> what I said</p>",
        "id": 131844035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931870
    },
    {
        "content": "<p>I am looking briefly at the code now</p>",
        "id": 131844038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931875
    },
    {
        "content": "<p>if x is mut it just works?</p>",
        "id": 131844040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533931878
    },
    {
        "content": "<p>there are some annoying complications to consider</p>",
        "id": 131844110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931935
    },
    {
        "content": "<p>e.g.</p>",
        "id": 131844111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931940
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Error?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131844118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931979
    },
    {
        "content": "<p>(that is, if we want to support this)</p>",
        "id": 131844126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931990
    },
    {
        "content": "<p>this is why the code was written with that naive loop, I think</p>",
        "id": 131844132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533931995
    },
    {
        "content": "<p>hmmm</p>",
        "id": 131844146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932023
    },
    {
        "content": "<p>so yes I personally lean towards implementing the existing AST behavior, which is easy to get right</p>",
        "id": 131844147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932025
    },
    {
        "content": "<p>and then filing a follow-up issue to support \"partial initialization\" better</p>",
        "id": 131844151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932037
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 131844192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932046
    },
    {
        "content": "<p>so ... you proposed two ideas if I've read correctly</p>",
        "id": 131844199,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Distinguish the case of assignment directly to an immutable local (x = ...) from any other place.\n\n    For assignments to an immutable local, we find the move-path-index and just check the &quot;ever initialized&quot; bit directly.\n    For assignments to any other place, we use the self.access_place method with LocalMutationIsAllowed::No (unlike now, where we use ExceptUpvars).\n</pre></div>",
        "id": 131844203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932073
    },
    {
        "content": "<p>and</p>",
        "id": 131844206,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932074
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    Find the move path corresponding to the place being assigned\n        If there is no precise match, that is an error (e.g., assigning to a single field of a drop struct)\n    If there is a precise match, check its bit\n</pre></div>",
        "id": 131844210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932084
    },
    {
        "content": "<p>yes</p>",
        "id": 131844231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932116
    },
    {
        "content": "<p>well</p>",
        "id": 131844237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932140
    },
    {
        "content": "<p>the second one...</p>",
        "id": 131844248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932158
    },
    {
        "content": "<p>if this is an assignment to an immutable local,</p>",
        "id": 131844294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932166
    },
    {
        "content": "<p>then in fact you are guaranteed that it has a MPI bit</p>",
        "id": 131844297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932175
    },
    {
        "content": "<p>because all locals have MPI bits</p>",
        "id": 131844300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932179
    },
    {
        "content": "<p>unsure what the last thing means</p>",
        "id": 131844524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533932429
    },
    {
        "content": "<p>there are these \"move paths\" that are used to track what is initialized</p>",
        "id": 131844555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932470
    },
    {
        "content": "<p>each has a <code>MovePathIndex</code> (or MPI)</p>",
        "id": 131844562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932478
    },
    {
        "content": "<p>we create them for all the places that we see in the source</p>",
        "id": 131844563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932488
    },
    {
        "content": "<p>or, most of them</p>",
        "id": 131844564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932491
    },
    {
        "content": "<p>but not for just any old <code>Place</code></p>",
        "id": 131844566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932495
    },
    {
        "content": "<p>so if you want to check if some place has been initialized, you do something like:</p>\n<div class=\"codehilite\"><pre><span></span>let x = move_data.mpi(place); // converts the place to an mpi\ncheck-if-the-bit-x-is-set\n</pre></div>",
        "id": 131844626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932539
    },
    {
        "content": "<p>except that the first step is sometimes \"fallible\"</p>",
        "id": 131844631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932547
    },
    {
        "content": "<p>...but not for local variables</p>",
        "id": 131844639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932560
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.MovePathLookup.html#method.find_local\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.MovePathLookup.html#method.find_local\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.MovePathLookup.html#method.find_local</a></p>",
        "id": 131844677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932639
    },
    {
        "content": "<p>that method will give you the <code>MovePathIndex</code> for a local variable</p>",
        "id": 131844721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932649
    },
    {
        "content": "<p>then something like</p>",
        "id": 131844798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>let mpi = self.move_data.rev_lookup.find_local(local);\nlet is_initialized =\n  self.move_data.init_path_map[mpi]\n    .iter()\n    .any(|init_index| flow_state.ever_inits.contains(&amp;init_index));\n</pre></div>",
        "id": 131844903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932914
    },
    {
        "content": "<p>bit more complex than I thought...</p>",
        "id": 131844908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932921
    },
    {
        "content": "<p>so, what's happening there:</p>",
        "id": 131844913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932928
    },
    {
        "content": "<p>for every initialization, we create an index (the <code>init_index</code>)</p>",
        "id": 131844920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932941
    },
    {
        "content": "<p>then we have a map from each variable to all the initializations that correspond to it</p>",
        "id": 131844932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932953
    },
    {
        "content": "<p>so e.g. if you had</p>\n<div class=\"codehilite\"><pre><span></span>let (x, y);\n\nx = 44; // this gets an InitIndex, say 0\ny = 44;  // this gets an InitIndex, say 1\n</pre></div>",
        "id": 131844953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932989
    },
    {
        "content": "<p>and there is a map that would say <code>x -&gt; [0]</code>, <code>y -&gt; [1]</code></p>",
        "id": 131844959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533932996
    },
    {
        "content": "<p>let me know if this is making any sense at all :)</p>",
        "id": 131845138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533933135
    },
    {
        "content": "<p>it seems clear we need some more chapters in the rustc-guide...</p>",
        "id": 131845143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533933141
    },
    {
        "content": "<blockquote>\n<p>and then filing a follow-up issue to support \"partial initialization\" better</p>\n</blockquote>\n<p>I think that's <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">https://github.com/rust-lang/rust/issues/21232</a></p>",
        "id": 131845870,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533934164
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/53258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53258\">https://github.com/rust-lang/rust/pull/53258</a></p>",
        "id": 131849870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533939744
    },
    {
        "content": "<p>on other front ...</p>",
        "id": 131928892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533945941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>commit 63c32b891da049cf20d0693b5e122a8937c8e67b\nAuthor: Santiago Pastorino &lt;spastorino@gmail.com&gt;\nDate:   Fri Aug 10 16:34:35 2018 -0300\n\n    Add test showing that re-assigning to immutable in nll fails\n\ndiff --git a/src/test/ui/nll/reassignment-to-immutable.rs b/src/test/ui/nll/reassignment-to-immutable.rs\nnew file mode 100644\nindex 0000000000..07046cf2a2\n--- /dev/null\n+++ b/src/test/ui/nll/reassignment-to-immutable.rs\n@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 &lt;LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0&gt; or the MIT license\n+// &lt;LICENSE-MIT or http://opensource.org/licenses/MIT&gt;, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let x: (u32, u32);\n+    x = (1, 2);\n+    x = (3, 4);\n+    //~^ ERROR cannot assign twice to immutable variable `x` [E0384]\n+    drop(x);\n+}\ndiff --git a/src/test/ui/nll/reassignment-to-immutable.stderr b/src/test/ui/nll/reassignment-to-immutable.stderr\nnew file mode 100644\nindex 0000000000..31716050f7\n--- /dev/null\n+++ b/src/test/ui/nll/reassignment-to-immutable.stderr\n@@ -0,0 +1,13 @@\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --&gt; $DIR/reassignment-to-immutable.rs:16:5\n+   |\n+LL |     let x: (u32, u32);\n+   |         - consider changing this to `mut x`\n+LL |     x = (1, 2);\n+   |     ---------- first assignment to `x`\n+LL |     x = (3, 4);\n+   |     ^^^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`.\n</pre></div>",
        "id": 131928893,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533945945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> forgot to share that if you want to avoid typing that code :P</p>",
        "id": 131928943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533945983
    },
    {
        "content": "<p>I was thinking a few more tests would probably  be good actually</p>",
        "id": 131929883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533947681
    },
    {
        "content": "<p>in particular, my changes didn't really break anything :)</p>",
        "id": 131929884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533947687
    },
    {
        "content": "<p>cool</p>",
        "id": 131953445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1533991022
    }
]