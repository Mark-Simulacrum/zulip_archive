[
    {
        "content": "<p>Hi everyone!<br>\nI took a quick look at nll-diagnostics issues and there are 4 lefts: <a href=\"https://github.com/rust-lang/rust/labels/NLL-diagnostics\">https://github.com/rust-lang/rust/labels/NLL-diagnostics</a></p>\n<p>2 can probably be closed:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/54779\">https://github.com/rust-lang/rust/issues/54779</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/57374\">https://github.com/rust-lang/rust/issues/57374</a></li>\n</ul>\n<p>And <a href=\"https://github.com/rust-lang/rust/issues/55312\">https://github.com/rust-lang/rust/issues/55312</a> can probably be actioned but I am not sure what needs to be done</p>",
        "id": 277349768,
        "sender_full_name": "marmeladema",
        "timestamp": 1648766625
    },
    {
        "content": "<p>And the last one, I am not sure what the status is or should be</p>",
        "id": 277349874,
        "sender_full_name": "marmeladema",
        "timestamp": 1648766679
    },
    {
        "content": "<p>55312 is just a cleanup. Not even sure it's worth it as we can just remove the nll feature gate and the compare mode and the cleanup will become obvious from there</p>",
        "id": 277351651,
        "sender_full_name": "oli",
        "timestamp": 1648767875
    },
    {
        "content": "<p>The last one looks fixed, too, even if the new message is a bit redundant</p>",
        "id": 277351666,
        "sender_full_name": "oli",
        "timestamp": 1648767900
    },
    {
        "content": "<p>So... does this mean we can FCP an nll stabilization PR? There are no more work items left afaict!</p>",
        "id": 277351711,
        "sender_full_name": "oli",
        "timestamp": 1648767952
    },
    {
        "content": "<p>One would have to write a stabilization report though</p>",
        "id": 277352017,
        "sender_full_name": "marmeladema",
        "timestamp": 1648768173
    },
    {
        "content": "<p>But having nll finally stable would be such an accomplishment!</p>",
        "id": 277352096,
        "sender_full_name": "marmeladema",
        "timestamp": 1648768209
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/95565\">#95565</a> as a draft PR. Enables nll by default. There are lots of diagnostics changes that need to be signed off.</p>",
        "id": 277439075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648828510
    },
    {
        "content": "<p>I think a lot of these changes are <em>good</em></p>",
        "id": 277439998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648828858
    },
    {
        "content": "<p>But need to go through every one</p>",
        "id": 277440026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648828869
    },
    {
        "content": "<p>Okay, so removing <code>feature(nll)</code> ran into a problem build std: <a href=\"https://github.com/jackh726/rust/tree/remove-borrowck-mode2\">https://github.com/jackh726/rust/tree/remove-borrowck-mode2</a></p>",
        "id": 277450356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0309</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">K</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collections</span><span class=\"o\">/</span><span class=\"n\">hash</span><span class=\"o\">/</span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2887</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">2879</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">adding</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"o\">..</span><span class=\"p\">.</span>: <span class=\"err\">`</span><span class=\"n\">K</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">2887</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0309</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">V</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collections</span><span class=\"o\">/</span><span class=\"n\">hash</span><span class=\"o\">/</span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2887</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">2879</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">adding</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"o\">..</span><span class=\"p\">.</span>: <span class=\"err\">`</span><span class=\"n\">V</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">2887</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277450398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833336
    },
    {
        "content": "<p>It's a bit weird.</p>",
        "id": 277450595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833415
    },
    {
        "content": "<p>Removing <code>feature(nll)</code> on master from std also causes the same problem</p>",
        "id": 277450647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833443
    },
    {
        "content": "<p>So...did I miss something. These changes should effectively make <code>feature(nll)</code> the default</p>",
        "id": 277450702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833479
    },
    {
        "content": "<p>Ah right, bootstrap</p>",
        "id": 277450794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648833509
    },
    {
        "content": "<p>Thank you for doing this!</p>",
        "id": 277453771,
        "sender_full_name": "marmeladema",
        "timestamp": 1648834820
    },
    {
        "content": "<p>I'm wondering if the best way to do is to gradually convert tests from revisions with NLL and compare-mode-nll, to an explicit <code>feature(nll)</code> and a comment like <code>NLL triaged: span slightly different</code>, for all the tests with different output. Then, the actual stabilization PR just removes those lines.</p>",
        "id": 277455831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835743
    },
    {
        "content": "<p>Revisions require too many non-blessable changes (and are fairly diverse)</p>",
        "id": 277456022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835830
    },
    {
        "content": "<p>And compare mode also will require non-blessable, non-systematic changes to the test files</p>",
        "id": 277456160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835885
    },
    {
        "content": "<p>Either this approach or just \"going all in\"</p>",
        "id": 277456204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835905
    },
    {
        "content": "<p>The problem with the former is it's not really a state we want to be in all that long.</p>",
        "id": 277456340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835961
    },
    {
        "content": "<p>Since it means we're losing out testing the current nightlies.</p>",
        "id": 277456393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648835984
    },
    {
        "content": "<p>I guess another option is to have some middle ground where we maybe maybe have revisions where the non-nll revision is marked as known-bug, so we track the stderr, but it all so \"goes away\" once the revision is removed. And it can be fairly systematic</p>",
        "id": 277457191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648836253
    },
    {
        "content": "<p>Is there anything I can help you with ?</p>",
        "id": 277463692,
        "sender_full_name": "marmeladema",
        "timestamp": 1648839204
    },
    {
        "content": "<p>I think it depends how we decide to go forward!</p>",
        "id": 277464516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648839619
    },
    {
        "content": "<p>Something \"easy\" to do would be to go through the PR and see if there are any test output changes that look bad</p>",
        "id": 277464579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648839641
    },
    {
        "content": "<p>Probably should queue up a crater run for this too</p>",
        "id": 277465397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840054
    },
    {
        "content": "<p>I tried to open it on my mobile and it crashed the tab so I will only be able to start reviewing Sunday evening</p>",
        "id": 277465407,
        "sender_full_name": "marmeladema",
        "timestamp": 1648840060
    },
    {
        "content": "<p>It's because there are over 600 changed files</p>",
        "id": 277465562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122657-t-compiler.2Fwg-nll/topic/nll.20diagnostics.20issues/near/277456022\">said</a>:</p>\n<blockquote>\n<p>Revisions require too many non-blessable changes (and are fairly diverse)</p>\n</blockquote>\n<p>Thinking about this, I think this is probably the right way forward, to make all tests that emit a different output in compare-mode=nll be a revision.</p>",
        "id": 277465747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840209
    },
    {
        "content": "<p>And to make that pretty uniform</p>",
        "id": 277465770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840234
    },
    {
        "content": "<p>so the stabilization PR is 1) Making compiler changes to enable NLL mode always 2) Removing revisions in test .rs files 3) Removing appropriate error lines 4) Blessing</p>",
        "id": 277465925,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840331
    },
    {
        "content": "<p>And that can be done in chunks</p>",
        "id": 277465953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840346
    },
    {
        "content": "<p>In the meantime, I'm going to queue a crater run when I get CI to build (should be good now)</p>",
        "id": 277466063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840421
    },
    {
        "content": "<p>Aw heck, crater is full</p>",
        "id": 277466260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648840549
    },
    {
        "content": "<p>You can deprioritize my crater runs</p>",
        "id": 277467555,
        "sender_full_name": "oli",
        "timestamp": 1648841293
    },
    {
        "content": "<p>Eh, doesn't really matter. This isn't urgent</p>",
        "id": 277471156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648843508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122657-t-compiler.2Fwg-nll/topic/nll.20diagnostics.20issues/near/277466260\">said</a>:</p>\n<blockquote>\n<p>Aw heck, crater is full</p>\n</blockquote>\n<p>crater is just a queue, and part of the indicators for getting increased resources is the queue length (not currently via metrics, just my sense, but empty queues disincentivize metrics impls too :)</p>",
        "id": 277490576,
        "sender_full_name": "simulacrum",
        "timestamp": 1648855872
    },
    {
        "content": "<p>The parenthesis was closed by a smile</p>",
        "id": 277492749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648857924
    },
    {
        "content": "<p>And yes, I mean \"full\" as in \"there are multiple runs queued\"</p>",
        "id": 277492773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648857955
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/95591\">#95591</a> to start migrating tests with different NLL output to use revisions</p>",
        "id": 277536290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648914064
    },
    {
        "content": "<p>Okay, so one test that we should work on is <code>impl-on-dyn-trait-with-implicit-static-bound</code>. Without nll, we give a useful suggestion to add <code>'_</code> to a trait object; with NLL we don't. With the suggestion, the example compiles (so rustfix-able).</p>",
        "id": 277541998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648921340
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/95701\">#95701</a> for the above</p>",
        "id": 277938760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649190391
    },
    {
        "content": "<p>Crater results are back for enabling <code>NLL</code>: <a href=\"https://github.com/rust-lang/rust/pull/95565#issuecomment-1092781219\">https://github.com/rust-lang/rust/pull/95565#issuecomment-1092781219</a></p>",
        "id": 278330319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649436018
    },
    {
        "content": "<p>lots of errors like \"cannot borrow <code>*self</code> as mutable because it is also borrowed as immutable\"</p>",
        "id": 278330347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649436034
    },
    {
        "content": "<p>including a bunch from actix-router 0.1.*</p>",
        "id": 278330381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649436052
    },
    {
        "content": "<p>I guess this is <a href=\"https://github.com/rust-lang/rust/issues/57895\">#57895</a></p>",
        "id": 278369144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649456355
    }
]