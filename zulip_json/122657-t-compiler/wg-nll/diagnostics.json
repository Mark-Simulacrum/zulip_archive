[
    {
        "content": "<p>Dear world, </p>\n<p>So here's something I would like feedback on. I've got this 'almost PR' that aims to fix <a href=\"https://github.com/rust-lang-nursery/polonius/issues/24\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/24\">https://github.com/rust-lang-nursery/polonius/issues/24</a>. However, it seems to — for reasons I'm not <em>100%</em> sure about — regress diagnostics in some cases. I'd sort of like to land it anyway, and then revisit diagnostics, but I do think we need to start focusing on those and I'm not sure how best to do it.</p>",
        "id": 126698402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526565340
    },
    {
        "content": "<p>I think what would probably be useful is just manually wirting a bunch of diagnosis messages to get a feel for the interface we want to present</p>",
        "id": 126705690,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526574413
    },
    {
        "content": "<p>and then working backwards to the code from there</p>",
        "id": 126705699,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526574428
    },
    {
        "content": "<p>AST borrow-check errors is probably a good place to start, breaking everyone's ability to read error messages would probably not be a good idea</p>",
        "id": 126705715,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526574472
    },
    {
        "content": "<p>As a personal anecdote, I really pretty heavily on the precise wording of error messages; especially when starting out</p>",
        "id": 126705776,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526574531
    },
    {
        "content": "<p>I still mostly solve compilation problems with unfamiliar  Haskell code that way since I still haven't learned all the jargon to understand the error messages on a deeper level, and I imagine a number of people are in a similar position with Rust</p>",
        "id": 126705854,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526574633
    },
    {
        "content": "<p>I'm torn. On the one hand, I think our current AST-based messages use way too much jargon, and can be simplified. On the other, I'd like to do things step by step.</p>",
        "id": 126706142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526575158
    },
    {
        "content": "<p>but the phasing is only part of it, it's more about \"how shall we get the info and spans we need\"</p>",
        "id": 126706146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526575176
    },
    {
        "content": "<p>as for diagnostics messages, what happened with the big spreadsheet Ariel have built?</p>",
        "id": 126721781,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526596682
    },
    {
        "content": "<p>seemed like a good way to start</p>",
        "id": 126721821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526596698
    },
    {
        "content": "<p>well we have one better now, the <code>.nll</code> reference files</p>",
        "id": 126725950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604706
    },
    {
        "content": "<p>anyway, i've had a few thoughts but I'll write them up tomorrow</p>",
        "id": 126725951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> we had also talked about doing a kind of diagnostic triage this morning, right?</p>",
        "id": 126870726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906943
    },
    {
        "content": "<p>yes, later today</p>",
        "id": 126870758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906997
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: free region `` does not outlive free region `&#39;a`\n</pre></div>\n\n\n<p>is not great :-)</p>",
        "id": 126875208,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526913916
    },
    {
        "content": "<p>you don't say :)</p>",
        "id": 126875440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526914246
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/issues/49397\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49397\">https://github.com/rust-lang/rust/issues/49397</a></p>",
        "id": 126875454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526914268
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm ready whenever you are. (I'll start looking over the list in the meantime, take notes here as I notice things.)</p>",
        "id": 126886484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok</p>",
        "id": 126886490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929223
    },
    {
        "content": "<p>how should we start?</p>",
        "id": 126886494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929229
    },
    {
        "content": "<p>is there some central list ?</p>",
        "id": 126886496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929236
    },
    {
        "content": "<p>THe idea is to review the .nll.stderr cases , right?</p>",
        "id": 126886502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929253
    },
    {
        "content": "<p>I guess I could start by transcribing the existing <code>ls</code> output to a canonical list or table</p>",
        "id": 126886531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929280
    },
    {
        "content": "<p>right</p>",
        "id": 126886533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929283
    },
    {
        "content": "<p>I was just wondering in what order we wanted to go, I guess?</p>",
        "id": 126886544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929299
    },
    {
        "content": "<p>i'm bringing things back into cache here</p>",
        "id": 126886548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929302
    },
    {
        "content": "<p>I think our goal was to kind of \"develop a triage system\"?</p>",
        "id": 126886558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929311
    },
    {
        "content": "<p>right, we were going to (if necessary?) sample a few?</p>",
        "id": 126886574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929325
    },
    {
        "content": "<p>to maybe provide guidance?</p>",
        "id": 126886605,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929328
    },
    {
        "content": "<p>I will note that one subcategory that we may have overlooked</p>",
        "id": 126886611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929340
    },
    {
        "content": "<p>are cases where we are producing many errors. One situation is with outright repetition, from the user's POV</p>",
        "id": 126886629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929369
    },
    {
        "content": "<p>another is many related errors where only one is really pointing to the key error. (Though I'm guessing in general such identification will be subjective.)</p>",
        "id": 126886664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929414
    },
    {
        "content": "<p>I guess let's just go through <code>find . -name '*nll.stderr'</code> in alphabetical order?</p>",
        "id": 126886672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929426
    },
    {
        "content": "<p>sorted by full path?</p>",
        "id": 126886727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929460
    },
    {
        "content": "<p>that was unclear</p>",
        "id": 126886729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929464
    },
    {
        "content": "<p>idk, somebody make a list :p</p>",
        "id": 126886734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929468
    },
    {
        "content": "<p>right was about to do that</p>",
        "id": 126886736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929475
    },
    {
        "content": "<p>ok lemme know when it exists :)</p>",
        "id": 126886765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929537
    },
    {
        "content": "<p>here is a list: <a href=\"https://gist.github.com/pnkfelix/9f145908d70655a702787d9cadf78977\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/9f145908d70655a702787d9cadf78977\">https://gist.github.com/pnkfelix/9f145908d70655a702787d9cadf78977</a></p>",
        "id": 126886957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929789
    },
    {
        "content": "<p>can you edit my gists, or do I need to put this elsewhere?</p>",
        "id": 126886971,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929802
    },
    {
        "content": "<p>I don't think I can edit a gist of yours</p>",
        "id": 126887037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929846
    },
    {
        "content": "<p>but I guess you can be the master</p>",
        "id": 126887040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929858
    },
    {
        "content": "<p>so we start with first thing?</p>",
        "id": 126887057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929885
    },
    {
        "content": "<p>I guess so</p>",
        "id": 126887060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929893
    },
    {
        "content": "<p>it seems essentially the same</p>",
        "id": 126887131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929946
    },
    {
        "content": "<p>why does that output differ in that  superficial way?</p>",
        "id": 126887142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526929973
    },
    {
        "content": "<p>sorry, I'm having some git trouble :)</p>",
        "id": 126887157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929992
    },
    {
        "content": "<p>still haven't seen the new output</p>",
        "id": 126887160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526929995
    },
    {
        "content": "<p>yeah give me a sec</p>",
        "id": 126887162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930000
    },
    {
        "content": "<p>I'll show you links</p>",
        "id": 126887166,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930002
    },
    {
        "content": "<p>its possible I'm misinterpreting the filenames</p>",
        "id": 126887171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930010
    },
    {
        "content": "<p>since I myself am unfamiliar with how revisions and compiletest modes got mixed.</p>",
        "id": 126887182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930026
    },
    {
        "content": "<p>ok I'm back now</p>",
        "id": 126887183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930027
    },
    {
        "content": "<p>so I'm comparing, old: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.stderr</a></p>",
        "id": 126887235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930055
    },
    {
        "content": "<p>seems like it's a missing suggestiojn</p>",
        "id": 126887237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930060
    },
    {
        "content": "<p>new: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.nll.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/E0508.ast.nll.stderr</a></p>",
        "id": 126887238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930060
    },
    {
        "content": "<p>I would rate this as \"meh\"</p>",
        "id": 126887254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930086
    },
    {
        "content": "<p>so if there's no suggestion, the diagnostic system collapses the error onto the same line as the \"^^^^^^\" ?</p>",
        "id": 126887255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930087
    },
    {
        "content": "<p>yes</p>",
        "id": 126887256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930093
    },
    {
        "content": "<p>if there is just one label at a given spot</p>",
        "id": 126887258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930096
    },
    {
        "content": "<p>okay</p>",
        "id": 126887261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930098
    },
    {
        "content": "<p>if there are more labels, it falls back to other layouts</p>",
        "id": 126887267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930105
    },
    {
        "content": "<p>here wait</p>",
        "id": 126887287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930133
    },
    {
        "content": "<p>I'll move the gist to a Paper doc</p>",
        "id": 126887293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930139
    },
    {
        "content": "<p>+1</p>",
        "id": 126887296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930144
    },
    {
        "content": "<p>(or ... does paper support the same table syntax? I guess I'll find out)</p>",
        "id": 126887310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930156
    },
    {
        "content": "<p>I..don't know about that</p>",
        "id": 126887365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930171
    },
    {
        "content": "<p>I doubt it</p>",
        "id": 126887369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930175
    },
    {
        "content": "<p>but maybe!</p>",
        "id": 126887374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930178
    },
    {
        "content": "<p>I'll just transcribe to a Paper table as we go</p>",
        "id": 126887415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930258
    },
    {
        "content": "<p>which paper doc?</p>",
        "id": 126887484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930326
    },
    {
        "content": "<p>here it is: <a href=\"https://paper.dropbox.com/doc/Untitled-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Untitled-KzroSvNgQ7lip3WQyiLTa\">https://paper.dropbox.com/doc/Untitled-KzroSvNgQ7lip3WQyiLTa</a></p>",
        "id": 126887515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok <code>augmented-assignment</code> looks terrible :)</p>",
        "id": 126887598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930464
    },
    {
        "content": "<p>there seem to be a few things going on</p>",
        "id": 126887611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930482
    },
    {
        "content": "<p>well the old one doesn't look that good to me either</p>",
        "id": 126887623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930500
    },
    {
        "content": "<p>I think it looks fine</p>",
        "id": 126887628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930511
    },
    {
        "content": "<p>but it is somewhat mesed up because of the comments that are in there</p>",
        "id": 126887670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930530
    },
    {
        "content": "<p>e.g., the output I see:</p>",
        "id": 126887672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow immutable local variable `y` as mutable\n  --&gt; $DIR/augmented-assignments.rs:30:5\n   |\nLL |     let y = Int(2);\n   |         - consider changing this to `mut y`\nLL |     //~^ consider changing this to `mut y`\nLL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n   |     ^ cannot borrow mutably\n</pre></div>",
        "id": 126887677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930536
    },
    {
        "content": "<p>yeah I guess that's the issue</p>",
        "id": 126887678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930538
    },
    {
        "content": "<p>but without the comments, would be:</p>",
        "id": 126887679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930540
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow immutable local variable `y` as mutable\n  --&gt; $DIR/augmented-assignments.rs:30:5\n   |\nLL |     let y = Int(2);\n   |         - consider changing this to `mut y`\nLL |\nLL |     y\n   |     ^ cannot borrow mutably\n</pre></div>",
        "id": 126887684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930548
    },
    {
        "content": "<p>that seems relatively clean</p>",
        "id": 126887689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930554
    },
    {
        "content": "<p>(I still like our embedded expected-errors-in-comments system but we probably need to move the outside of the spans that rustc reports)</p>",
        "id": 126887696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930575
    },
    {
        "content": "<p>(I'm not crazy about the wild jargon we add, like \"immutable local variable <code>y</code>\", but...)</p>",
        "id": 126887700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930584
    },
    {
        "content": "<p>anyway so in that first example, we are no longer issuing a suggestion:</p>",
        "id": 126887712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930608
    },
    {
        "content": "<p>I was thinking,</p>",
        "id": 126887713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930611
    },
    {
        "content": "<p>we should probably be categorizing the suggestions?</p>",
        "id": 126887715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930616
    },
    {
        "content": "<p>many of them already have issues afaik</p>",
        "id": 126887717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930619
    },
    {
        "content": "<p>not sure whether that's worth the trouble</p>",
        "id": 126887725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930625
    },
    {
        "content": "<p>I guess we could categorize the text of the missing suggestion</p>",
        "id": 126887732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930638
    },
    {
        "content": "<p>well, if one can find the relevant link easily, no harm in linking to the issue from the paper doc then</p>",
        "id": 126887778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930654
    },
    {
        "content": "<p>I'm at least adding the text of the suggestion</p>",
        "id": 126887875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930797
    },
    {
        "content": "<p>I put some notes on augmented-assignment</p>",
        "id": 126887877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930812
    },
    {
        "content": "<p>thanks</p>",
        "id": 126887879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930820
    },
    {
        "content": "<p>I agree, I think the fact that there was no <code>+=</code> in the output from the old error is probably in part what made me think it was not so good</p>",
        "id": 126887895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930846
    },
    {
        "content": "<p>yeah, that fn is less good than the other</p>",
        "id": 126887905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930872
    },
    {
        "content": "<p>so <code>borrowck/borrowck-box-insensitivity.stderr</code></p>",
        "id": 126887969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930947
    },
    {
        "content": "<p>I think that what is happening here is that NLL lets us \"see through\" <code>Box</code> again</p>",
        "id": 126887976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930959
    },
    {
        "content": "<p>hence going from 16 errors to 2</p>",
        "id": 126887977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930963
    },
    {
        "content": "<p>those two errors seem fine</p>",
        "id": 126887984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930984
    },
    {
        "content": "<p>yeah, I think we decided that was now part of the plan of record, right?</p>",
        "id": 126887989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526930997
    },
    {
        "content": "<p>(being able to \"see through\" Box)</p>",
        "id": 126888028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931003
    },
    {
        "content": "<p>yeah, @arielb1 and I said that</p>",
        "id": 126888053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931029
    },
    {
        "content": "<p>I think..it's fine</p>",
        "id": 126888055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931034
    },
    {
        "content": "<p>it was kind of a pain to reproduce the old behavior</p>",
        "id": 126888058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931043
    },
    {
        "content": "<p>and...for what?</p>",
        "id": 126888062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931047
    },
    {
        "content": "<p>ultimately we'd like other types to be able to behave like <code>Box</code>, but...</p>",
        "id": 126888068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931058
    },
    {
        "content": "<p>(particularly since the old logic was incomplete anyway)</p>",
        "id": 126888080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931070
    },
    {
        "content": "<p>If I happen to see the record of that conversation, I'll link it there. Lets move along.</p>",
        "id": 126888082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931072
    },
    {
        "content": "<p>borrowck/borrowck-escaping-closure-error-1.nll.stderr</p>",
        "id": 126888090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931089
    },
    {
        "content": "<p>we've lost the special handling of closures here</p>",
        "id": 126888096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931099
    },
    {
        "content": "<p>yeah</p>",
        "id": 126888145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931127
    },
    {
        "content": "<p>this .. hmm. This is a tricky one. =)</p>",
        "id": 126888150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931130
    },
    {
        "content": "<p>I  mean the old error was clearly smarter</p>",
        "id": 126888155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931136
    },
    {
        "content": "<p>right, but do we want to attempt to re-embed such intelligence</p>",
        "id": 126888161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931149
    },
    {
        "content": "<p>and yet I'm not sure if I'd call it a <strong>blocker</strong></p>",
        "id": 126888168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931156
    },
    {
        "content": "<p>it's kind of in between</p>",
        "id": 126888175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931167
    },
    {
        "content": "<p>its not quite \"meh\"</p>",
        "id": 126888181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931174
    },
    {
        "content": "<p>maybe we want a middle category</p>",
        "id": 126888189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931184
    },
    {
        "content": "<p>maybe \"acceptable losses\"</p>",
        "id": 126888196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931194
    },
    {
        "content": "<p>Like, we know its something that would be to fix, but we have to prioritize...</p>",
        "id": 126888217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931223
    },
    {
        "content": "<p>right. kind of long tho</p>",
        "id": 126888220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931228
    },
    {
        "content": "<p>doesn't the military have a succinct phrase for this?</p>",
        "id": 126888254,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931244
    },
    {
        "content": "<p>probably :)</p>",
        "id": 126888271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931249
    },
    {
        "content": "<p>collateral</p>",
        "id": 126888272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931251
    },
    {
        "content": "<p>damage</p>",
        "id": 126888273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931253
    },
    {
        "content": "<p>?</p>",
        "id": 126888275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931255
    },
    {
        "content": "<p>maybe <span class=\"emoji emoji-1f915\" title=\"face with head bandage\">:face_with_head_bandage:</span></p>",
        "id": 126888280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931262
    },
    {
        "content": "<p>heh =)</p>",
        "id": 126888282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931265
    },
    {
        "content": "<p>(\"collateral\" on  its own dosn't make sense)</p>",
        "id": 126888284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931268
    },
    {
        "content": "<p>heh</p>",
        "id": 126888286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931269
    },
    {
        "content": "<p>:bandage:</p>",
        "id": 126888291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931283
    },
    {
        "content": "<p>hmm</p>",
        "id": 126888293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931285
    },
    {
        "content": "<p>\"if necessary\"</p>",
        "id": 126888308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931309
    },
    {
        "content": "<p>anyway, pick something :)</p>",
        "id": 126888311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931313
    },
    {
        "content": "<p>doesn't have to be funny I guess ;)</p>",
        "id": 126888318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931318
    },
    {
        "content": "<p>next one, borrowck/borrowck-escaping-closure-error-2.nll.stderr,  seems to be another instance of the same</p>",
        "id": 126888390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931385
    },
    {
        "content": "<p>yeah</p>",
        "id": 126888394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931401
    },
    {
        "content": "<p>I think the next one is a case of \"meh\" to me</p>",
        "id": 126888410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931434
    },
    {
        "content": "<p>well</p>",
        "id": 126888413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931436
    },
    {
        "content": "<p>they're both not that great</p>",
        "id": 126888414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931443
    },
    {
        "content": "<p>but I guess that in this case, the old message is giving useful info</p>",
        "id": 126888419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931452
    },
    {
        "content": "<p>in a jargon-y way</p>",
        "id": 126888422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931455
    },
    {
        "content": "<p>I guess this is \"if needed\"? (I'm wondering if it's going to be easy to tell the difference between that and \"meh\", but we can always collapse them later)</p>",
        "id": 126888480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931494
    },
    {
        "content": "<p>yeah there's somewhat more specific info there that might help someone over a hurdle.</p>",
        "id": 126888482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931497
    },
    {
        "content": "<p>I'd say \"if needed\" for it</p>",
        "id": 126888483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931501
    },
    {
        "content": "<p>right</p>",
        "id": 126888484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931501
    },
    {
        "content": "<p>part of our problem</p>",
        "id": 126888488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931510
    },
    {
        "content": "<p>is that our first instance of \"meh\"</p>",
        "id": 126888489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931514
    },
    {
        "content": "<p>really was <em>so</em> ignorable</p>",
        "id": 126888491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931518
    },
    {
        "content": "<p>it may have a set a more  extreme bar than we want for \"meh\" in general.</p>",
        "id": 126888499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931538
    },
    {
        "content": "<p>:)</p>",
        "id": 126888504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931552
    },
    {
        "content": "<p>there's a lot going on in this one</p>",
        "id": 126888505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931555
    },
    {
        "content": "<p>seems like three things:</p>\n<p>1. match statements giving us a lot of duplicates<br>\n2. no suggestions about <code>ref</code><br>\n3. useful specificity is gone (\"which implements the <code>Drop</code> trait\")</p>",
        "id": 126888561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931605
    },
    {
        "content": "<p>even so</p>",
        "id": 126888596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931710
    },
    {
        "content": "<p>I'm not feeling it to be a MY EYES case</p>",
        "id": 126888600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931718
    },
    {
        "content": "<p>except for the duplication perhaps...</p>",
        "id": 126888644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931727
    },
    {
        "content": "<p>I guess the <code>ref</code> suggestions could go a long way</p>",
        "id": 126888652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931753
    },
    {
        "content": "<p>or rather, if we have regressed to point where we never suggest <code>ref</code></p>",
        "id": 126888655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931763
    },
    {
        "content": "<p>then that probably <em>does</em> need to be fixed.</p>",
        "id": 126888660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931768
    },
    {
        "content": "<p>I'm not really sure</p>",
        "id": 126888678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931811
    },
    {
        "content": "<p>I think the duplication is more severe</p>",
        "id": 126888680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931815
    },
    {
        "content": "<p>I think I'd call it \"if needed\" overall</p>",
        "id": 126888689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931833
    },
    {
        "content": "<p>to be clear</p>",
        "id": 126888692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931840
    },
    {
        "content": "<p>the duplication here</p>",
        "id": 126888694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931842
    },
    {
        "content": "<p>...</p>",
        "id": 126888727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931843
    },
    {
        "content": "<p>the duplication seems to be O(num_arms)</p>",
        "id": 126888738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931858
    },
    {
        "content": "<p>it could be pretty intense</p>",
        "id": 126888740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931861
    },
    {
        "content": "<p>on a big program</p>",
        "id": 126888742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931862
    },
    {
        "content": "<p>so that might be a MY EYES problem</p>",
        "id": 126888748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931871
    },
    {
        "content": "<p>ah okay</p>",
        "id": 126888749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931873
    },
    {
        "content": "<p>you're not talking about the failure to collapse in the first arm</p>",
        "id": 126888754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931881
    },
    {
        "content": "<p>the <code>num1</code> and <code>num2</code></p>",
        "id": 126888756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931886
    },
    {
        "content": "<p>we're also highlighting a weird span</p>",
        "id": 126888763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931899
    },
    {
        "content": "<p>it's natural to <em>me</em></p>",
        "id": 126888765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931901
    },
    {
        "content": "<p>but blaming a binding in the match arm</p>",
        "id": 126888774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931906
    },
    {
        "content": "<p>instead of the path being matched</p>",
        "id": 126888776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931911
    },
    {
        "content": "<p>but is this actually showing (more) duplication?</p>",
        "id": 126888778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931912
    },
    {
        "content": "<p>might be quite confusing to people</p>",
        "id": 126888779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931914
    },
    {
        "content": "<p>sorry I'm just going through the old error</p>",
        "id": 126888785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931922
    },
    {
        "content": "<p>new error:</p>",
        "id": 126888789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931929
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0507]: cannot move out of borrowed content\n  --&gt; $DIR/borrowck-move-error-with-note.rs:23:19\n   |\nLL |         Foo::Foo1(num1,\n   |                   ^^^^ cannot move out of borrowed content\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; $DIR/borrowck-move-error-with-note.rs:24:19\n   |\nLL |                   num2) =&gt; (),\n   |                   ^^^^ cannot move out of borrowed content\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; $DIR/borrowck-move-error-with-note.rs:25:19\n   |\nLL |         Foo::Foo2(num) =&gt; (),\n   |                   ^^^ cannot move out of borrowed content\n</pre></div>",
        "id": 126888793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931943
    },
    {
        "content": "<p>it's actually O(num_bindings)</p>",
        "id": 126888795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931950
    },
    {
        "content": "<p>which is &gt; arms</p>",
        "id": 126888798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931955
    },
    {
        "content": "<p>oh you <em>are</em> talking about the failure to collapse then?</p>",
        "id": 126888802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931961
    },
    {
        "content": "<p>the old error did report each binding</p>",
        "id": 126888840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931965
    },
    {
        "content": "<p>just more concisely</p>",
        "id": 126888846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931976
    },
    {
        "content": "<p>yes, just one \"master error\"</p>",
        "id": 126888850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526931983
    },
    {
        "content": "<p>I think that's why I'm more willing to accept it as not as high a priority</p>",
        "id": 126888856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526931999
    },
    {
        "content": "<p>I guess I could go with \"if needed\" here</p>",
        "id": 126888858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932011
    },
    {
        "content": "<p>but maybe that's in part because I'm assuming it will be readily fixed...</p>",
        "id": 126888862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932016
    },
    {
        "content": "<p>in some sense the current output is better than if it were:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0507]: cannot move out of borrowed content\n  --&gt; $DIR/borrowck-move-error-with-note.rs:21:11\n   |\nLL |     match *f {             //~ ERROR cannot move out of\n   |           ^^ cannot move out of borrowed content\n</pre></div>\n\n\n<p>without the rest</p>",
        "id": 126888871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932030
    },
    {
        "content": "<p>maybe we will need to categorize the distinct subproblems we've identified</p>",
        "id": 126888874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932039
    },
    {
        "content": "<p>because often it is very confusing to find the arm</p>",
        "id": 126888875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932039
    },
    {
        "content": "<p>that said, note that as <code>ref</code> bindings get deprecated in favor of match-ref-bindings this will be nicer :)</p>",
        "id": 126888881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932052
    },
    {
        "content": "<p>did you see the notes I put in the paper?</p>",
        "id": 126888886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932061
    },
    {
        "content": "<p>that is, I did try to break down</p>",
        "id": 126888888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932068
    },
    {
        "content": "<p>Hmm</p>",
        "id": 126888889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932072
    },
    {
        "content": "<p>the old errors show the match input</p>",
        "id": 126888895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932079
    },
    {
        "content": "<p>as well as the arm</p>",
        "id": 126888897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932082
    },
    {
        "content": "<p>yeah</p>",
        "id": 126888944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932100
    },
    {
        "content": "<p>anyway I can get behind \"if needed\" here</p>",
        "id": 126888946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932105
    },
    {
        "content": "<p>The new errors don't include the match input at all</p>",
        "id": 126888951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932117
    },
    {
        "content": "<p>though I think .. this is a fairly common thing</p>",
        "id": 126888953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932118
    },
    {
        "content": "<p>so I lean towards MY EYES</p>",
        "id": 126888960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932138
    },
    {
        "content": "<p>oh you did say this as part of your <strong>span</strong> note</p>",
        "id": 126888961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932140
    },
    {
        "content": "<p>also we should move quickly :)</p>",
        "id": 126888962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932140
    },
    {
        "content": "<p>okay</p>",
        "id": 126888963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932143
    },
    {
        "content": "<p>I did</p>",
        "id": 126888964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932143
    },
    {
        "content": "<p>hmm</p>",
        "id": 126889040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932215
    },
    {
        "content": "<p>I sorta preer the NLL output here :)</p>",
        "id": 126889048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932221
    },
    {
        "content": "<p>neither is great</p>",
        "id": 126889051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932223
    },
    {
        "content": "<p>the NLL output does not include the type being moved out of</p>",
        "id": 126889066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932237
    },
    {
        "content": "<p>but NLL is better, I think</p>",
        "id": 126889067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932237
    },
    {
        "content": "<p>which can be convenient</p>",
        "id": 126889069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932240
    },
    {
        "content": "<p>but over all</p>",
        "id": 126889077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932263
    },
    {
        "content": "<p>true</p>",
        "id": 126889078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932263
    },
    {
        "content": "<p>the biggest problem w/ original is the span...</p>",
        "id": 126889086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932268
    },
    {
        "content": "<p>I also like the NLL output.</p>",
        "id": 126889089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932270
    },
    {
        "content": "<p>it should really be highlighting the thing being matched probably</p>",
        "id": 126889096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932280
    },
    {
        "content": "<p>like the prior example</p>",
        "id": 126889098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932284
    },
    {
        "content": "<p>(sort of ironic that it isn't)</p>",
        "id": 126889104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932288
    },
    {
        "content": "<p>yeah. Which it is odd the old error wasn't doing that</p>",
        "id": 126889105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932294
    },
    {
        "content": "<p><span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span></p>",
        "id": 126889111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932302
    },
    {
        "content": "<p>not sure why not</p>",
        "id": 126889114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932311
    },
    {
        "content": "<p>anyway</p>",
        "id": 126889115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932312
    },
    {
        "content": "<p>i say \"meh\"</p>",
        "id": 126889117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932314
    },
    {
        "content": "<p>yeah</p>",
        "id": 126889119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932316
    },
    {
        "content": "<p>seems like next case is <span class=\"emoji emoji-1f4af\" title=\"100\">:100:</span> — NLL gets no error</p>",
        "id": 126889185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932383
    },
    {
        "content": "<p>hopefully correctly:)</p>",
        "id": 126889191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932388
    },
    {
        "content": "<p>I can't even tell what the original was trying to test</p>",
        "id": 126889198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932405
    },
    {
        "content": "<p>(do we want to record tests that we ought to update for NLL?)</p>",
        "id": 126889255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932451
    },
    {
        "content": "<p>okay next up</p>",
        "id": 126889260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932457
    },
    {
        "content": "<p>oh sorry</p>",
        "id": 126889264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932464
    },
    {
        "content": "<p>didn't keep up with you (lost my browser windows with the tests)</p>",
        "id": 126889269,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932473
    },
    {
        "content": "<p>we need to have a category for that, at lesast in terms of whether to <em>try</em> to reproduce the original</p>",
        "id": 126889277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932497
    },
    {
        "content": "<p>right</p>",
        "id": 126889290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932509
    },
    {
        "content": "<p>for some, the error will be <strong>inherently</strong> about testing lexical lifetimes</p>",
        "id": 126889291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932512
    },
    {
        "content": "<p>this particular test seems kind of .. like it must be covered elsewhere</p>",
        "id": 126889294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932521
    },
    {
        "content": "<p>but yeah</p>",
        "id": 126889295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932522
    },
    {
        "content": "<p>\"weak test\"</p>",
        "id": 126889298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932535
    },
    {
        "content": "<p>I added an <strong>update</strong> category</p>",
        "id": 126889301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932555
    },
    {
        "content": "<p>Hmm you really want to mark this as \"100\" ?</p>",
        "id": 126889343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932583
    },
    {
        "content": "<p>I guess your point is that it does not block NLL</p>",
        "id": 126889348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932589
    },
    {
        "content": "<p>but</p>",
        "id": 126889353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932595
    },
    {
        "content": "<p>it probably should ?</p>",
        "id": 126889355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932599
    },
    {
        "content": "<p>otherwise turning NLL on my default will then lead to risk of future regression  not being caught</p>",
        "id": 126889365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932617
    },
    {
        "content": "<p>ah</p>",
        "id": 126889374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932633
    },
    {
        "content": "<p>ok, we can add some new category</p>",
        "id": 126889380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932637
    },
    {
        "content": "<p>I suggested \"weak test\" before</p>",
        "id": 126889393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932653
    },
    {
        "content": "<p>ah ok</p>",
        "id": 126889455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932731
    },
    {
        "content": "<p>sounds good</p>",
        "id": 126889456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932733
    },
    {
        "content": "<p>I wrote \"update\" but \"weak test\" is fine</p>",
        "id": 126889459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932739
    },
    {
        "content": "<p>Update is fine, lets just make use of our last minute</p>",
        "id": 126889472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932753
    },
    {
        "content": "<p>oy that's a MY EYES</p>",
        "id": 126889476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932765
    },
    {
        "content": "<p>ah yeah definitely</p>",
        "id": 126889535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932805
    },
    {
        "content": "<p>though it actually ... might be close</p>",
        "id": 126889537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932806
    },
    {
        "content": "<p>if you squint just right. :)</p>",
        "id": 126889542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932813
    },
    {
        "content": "<p>the old one is .. light years better  =)</p>",
        "id": 126889552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932827
    },
    {
        "content": "<p>hard to know where to even begin</p>",
        "id": 126889554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932836
    },
    {
        "content": "<p>I guess it's a specificity fail</p>",
        "id": 126889559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932852
    },
    {
        "content": "<p>i do find it funny that NLL does point out that <code>let x</code> is not <code>let mut x</code></p>",
        "id": 126889568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932867
    },
    {
        "content": "<p>while the old diagnostic is focusing on the most fundamental issue to be addressed</p>",
        "id": 126889578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932894
    },
    {
        "content": "<p>hey, yes</p>",
        "id": 126889581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932904
    },
    {
        "content": "<p>I think that error is coming from regionck</p>",
        "id": 126889584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932912
    },
    {
        "content": "<p>so borrowck has not yet run</p>",
        "id": 126889624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I gotta another meeting now</p>",
        "id": 126889635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932955
    },
    {
        "content": "<p>but this was a good start</p>",
        "id": 126889636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932957
    },
    {
        "content": "<p>yeahs lets stop here</p>",
        "id": 126889642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526932964
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126889650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526932970
    },
    {
        "content": "<p>I'll try to at least guessetimate how long the remaing categorization would take us, vs the time it would take if we tried to farm it out</p>",
        "id": 126889669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526933009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so I was thinking of looking over the list and starting already to mentor people through some of the existing problems. For example, I thought maybe <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> might have interest in tackling the augmented-assignment problem (though I've not looked deeply at it)</p>",
        "id": 126974169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527078320
    },
    {
        "content": "<p>sure</p>",
        "id": 126974223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527078377
    },
    {
        "content": "<p>I added a column where we can add links to actual filed issues</p>",
        "id": 126974226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527078393
    },
    {
        "content": "<p>but I haven't filed any issues yet</p>",
        "id": 126974229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527078400
    },
    {
        "content": "<p>(I've just put in single letters to try to correlate the rows that should have the same issue)</p>",
        "id": 126974236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527078422
    },
    {
        "content": "<p>ok</p>",
        "id": 126974562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527079075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> wherever you need help :)</p>",
        "id": 126979697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527087096
    },
    {
        "content": "<p>I'm <em>almost</em> done going through the list</p>",
        "id": 126979772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527087171
    },
    {
        "content": "<p>have like 19 uncategorized rows left</p>",
        "id": 126979782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527087182
    },
    {
        "content": "<p>(I'll need to leave in perhaps 15 min or so... so we'll see ...)</p>",
        "id": 126979801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527087222
    },
    {
        "content": "<p>Okay, finished going through the whole list!</p>",
        "id": 126981188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088868
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa</a></p>",
        "id": 126981190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088873
    },
    {
        "content": "<p>I stopped trying to correlate the rows as I went</p>",
        "id": 126981201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088889
    },
    {
        "content": "<p>(in part because it was leading me to revise earlier rows as I identified commonalities)</p>",
        "id": 126981210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088909
    },
    {
        "content": "<p>but I hope to do another pass over the table and actually create the issues for the related rows.</p>",
        "id": 126981258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088928
    },
    {
        "content": "<p>Not right now though, have to go!</p>",
        "id": 126981260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527088936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> awesome</p>",
        "id": 126981487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527089210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so I was specifically looking at <code>augmented-assignments.stderr</code> from <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">the paper document</a> as a good starting diagnostics issue</p>",
        "id": 126985199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527094398
    },
    {
        "content": "<p>not sure if there is a rust issue filed for that or not yet</p>",
        "id": 126985202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527094407
    },
    {
        "content": "<p>looks like no, I filed <a href=\"https://github.com/rust-lang/rust/issues/51000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51000\">https://github.com/rust-lang/rust/issues/51000</a></p>",
        "id": 126985413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527094724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> added some <a href=\"https://github.com/rust-lang/rust/issues/51000#issuecomment-391425650\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51000#issuecomment-391425650\">mentoring notes</a></p>",
        "id": 126985720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527095231
    },
    {
        "content": "<p>cool</p>",
        "id": 126987061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527096988
    },
    {
        "content": "<p>will check all this out later</p>",
        "id": 126987070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527097018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm tackling this</p>",
        "id": 126995224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106918
    },
    {
        "content": "<p>was reading the issue</p>",
        "id": 126995229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106922
    },
    {
        "content": "<p>in the first part you said</p>",
        "id": 126995283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106934
    },
    {
        "content": "<p><code>unclear that the original selection is so great either. Maybe the += would be ideal.</code></p>",
        "id": 126995287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106936
    },
    {
        "content": "<p>what do you mean by original selection?</p>",
        "id": 126995293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106947
    },
    {
        "content": "<p>by original you meant non NLL?</p>",
        "id": 126995302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527106962
    },
    {
        "content": "<p>if I got it correctly by original selection you meant non NLL which is <code>x</code> the one after <code>+=</code></p>",
        "id": 126995443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107106
    },
    {
        "content": "<p>nll selection is <code>+= x</code></p>",
        "id": 126995454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107120
    },
    {
        "content": "<p>and you want just <code>+=</code></p>",
        "id": 126995459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107127
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 126995463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107132
    },
    {
        "content": "<p>it's weird to just highlight <code>+=</code></p>",
        "id": 126995471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107141
    },
    {
        "content": "<p>well I think the <code>+=</code> would be my ideal</p>",
        "id": 126995475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107144
    },
    {
        "content": "<p>but I guess it's a matter of taste :)</p>",
        "id": 126995482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107152
    },
    {
        "content": "<p>explain :)</p>",
        "id": 126995489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107160
    },
    {
        "content": "<p>anything that is not multi-line is going to be an improvement</p>",
        "id": 126995493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107161
    },
    {
        "content": "<p>(to start)</p>",
        "id": 126995538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107170
    },
    {
        "content": "<p>I mean with that selection the error will never show x</p>",
        "id": 126995542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107172
    },
    {
        "content": "<p>I personally find underlining the operator very clear:</p>",
        "id": 126995544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107177
    },
    {
        "content": "<p>the error occurs when executing this operator</p>",
        "id": 126995545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107182
    },
    {
        "content": "<p><em>typically</em> the stuff is all on one line</p>",
        "id": 126995560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107203
    },
    {
        "content": "<p>e.g., <code>x += x</code></p>",
        "id": 126995567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107207
    },
    {
        "content": "<p>I guess in that sense the test is kind of artificial</p>",
        "id": 126995573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107215
    },
    {
        "content": "<p>and maybe we over-rated its importance</p>",
        "id": 126995580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107221
    },
    {
        "content": "<p>anyway I suspect it's fine to just match the existing behavior</p>",
        "id": 126995587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107227
    },
    {
        "content": "<p>actually</p>",
        "id": 126995611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107252
    },
    {
        "content": "<p>in the existing behavior</p>",
        "id": 126995615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>23 |     x   //~ error: use of moved value: `x`\n   |     ^ value used here after move\n</pre></div>",
        "id": 126995622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107266
    },
    {
        "content": "<p>how do you know that <code>x</code> is used?</p>",
        "id": 126995632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107278
    },
    {
        "content": "<p>if <code>=</code> never shows up in the error</p>",
        "id": 126995674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107284
    },
    {
        "content": "<p>not sure in this kind of multi line statements that is helpful to remove parts of the statement that are in different lines</p>",
        "id": 126995712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107334
    },
    {
        "content": "<p>besides from what you highlight</p>",
        "id": 126995716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107339
    },
    {
        "content": "<p>that seems like an orthogonal concern</p>",
        "id": 126995735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107355
    },
    {
        "content": "<p>first, I guess is better to show the statement entirely</p>",
        "id": 126995736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107355
    },
    {
        "content": "<p>not if we underline it</p>",
        "id": 126995742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107363
    },
    {
        "content": "<p>:)</p>",
        "id": 126995744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107364
    },
    {
        "content": "<p>hehe yes</p>",
        "id": 126995749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107373
    },
    {
        "content": "<p>that is basically always worse</p>",
        "id": 126995751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107376
    },
    {
        "content": "<p>but you could imagine some kind of heuristic in the error reporter  that \"grows\" a span</p>",
        "id": 126995754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107381
    },
    {
        "content": "<p>but if you only underline += will x show up?</p>",
        "id": 126995758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107387
    },
    {
        "content": "<p>but .. it's kind of tricky</p>",
        "id": 126995759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107389
    },
    {
        "content": "<p>no, but so what?</p>",
        "id": 126995766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107400
    },
    {
        "content": "<p>I guess what I mean is that</p>",
        "id": 126995824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107424
    },
    {
        "content": "<p>I don't know how realistic this test is :)</p>",
        "id": 126995827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107428
    },
    {
        "content": "<p>more commonly, I think that the <code>+=</code> is not on a line by itself</p>",
        "id": 126995835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107443
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>24 |     +=\n   |      ^ value used here after move\n</pre></div>",
        "id": 126995845,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107459
    },
    {
        "content": "<p>(but that argues perhaps it's not an important bug to fix...)</p>",
        "id": 126995846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107462
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>24 |     +=\n   |      ^ value used here after move\n</pre></div>\n\n\n<p>this doesn't tell me anything :P</p>",
        "id": 126995873,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107490
    },
    {
        "content": "<p>it looks like in the original we underline the left-hand-side of the <code>+=</code></p>",
        "id": 126995882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107516
    },
    {
        "content": "<p>yes</p>",
        "id": 126995926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well, I mean, you have to look at the source, sure</p>",
        "id": 126995927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107527
    },
    {
        "content": "<p>anyway, so why don't we just match the original?</p>",
        "id": 126995932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107535
    },
    {
        "content": "<p>I think realistic output would be:</p>",
        "id": 126995938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107546
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>24 |     x +=\n   |       -- value used here after move\n</pre></div>",
        "id": 126995946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107562
    },
    {
        "content": "<p>which is perhaps clearer</p>",
        "id": 126995958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107577
    },
    {
        "content": "<p>yeah, I'm not sure if I'm saying something practical or easy to implement or even a better thing :P, was just thinking a bit on the thing</p>",
        "id": 126995963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107582
    },
    {
        "content": "<p>but anyway, let's match the current behavior, it's easier anyway =)</p>",
        "id": 126995965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107583
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126995982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107608
    },
    {
        "content": "<p>I think to do that, we have to extract the span of the LHS of the <code>+=</code></p>",
        "id": 126995984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107608
    },
    {
        "content": "<p>and use it in place of the current <code>expr_span</code></p>",
        "id": 126995989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107617
    },
    {
        "content": "<blockquote>\n<p>yeah, I'm not sure if I'm saying something practical or easy to implement or even a better thing :P, was just thinking a bit on the thing</p>\n</blockquote>\n<p>well it's good to question my assumptions :) to me underlining the operator is super clear, but my brain sometimes works differently than others</p>",
        "id": 126996001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107640
    },
    {
        "content": "<p>having doubts about what you think is like when you think you found a bug in the compiler, you will almost always be wrong ;)</p>",
        "id": 126996095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107726
    },
    {
        "content": "<p>but helps in trying to understand stuff</p>",
        "id": 126996102,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527107738
    },
    {
        "content": "<p>maybe not in this case...</p>",
        "id": 126996104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107742
    },
    {
        "content": "<p>I think like a compiler author :)</p>",
        "id": 126996106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107747
    },
    {
        "content": "<p>that said, I think there is precedent for this: e.g., clang underlines the operator sometimes</p>",
        "id": 126996159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107769
    },
    {
        "content": "<p>looks like both of you are having fun working on the diagnostics</p>",
        "id": 126996178,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527107809
    },
    {
        "content": "<p>will join you on one issue later today</p>",
        "id": 126996182,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527107819
    },
    {
        "content": "<p>there's a lot more, to be sure</p>",
        "id": 126996196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107832
    },
    {
        "content": "<p>I think the closure one is a good pick but I didn't want to do my homework to dig in :) happy to help answer questions though</p>",
        "id": 126996204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527107849
    },
    {
        "content": "<p>not sure which one you're talking about; is it issue-45983?</p>",
        "id": 126996299,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527107978
    },
    {
        "content": "<p>I meant e.g. borrowck/issue-45983.nll.stderr</p>",
        "id": 126996368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527108059
    },
    {
        "content": "<p>but borrowck/borrowck-move-error-with-note.stderr   is also pretty bad</p>",
        "id": 126996378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527108080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so it looks like, for that example, we used to offer a suggestion (\"consider adding <code>mut</code>\") that we no longer do; that is a simple enough thing, and might be worth re-adding</p>",
        "id": 126999635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> could probably advise, given their work on the \"unused mutability\" lint</p>",
        "id": 126999645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112434
    },
    {
        "content": "<p>however, not sure if it is top priority</p>",
        "id": 126999648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112440
    },
    {
        "content": "<p>let me look at the rest of the list</p>",
        "id": 126999688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112445
    },
    {
        "content": "<p>lots of the closure cases, which I think are also imp't</p>",
        "id": 126999730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112532
    },
    {
        "content": "<p>there is <code>lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr</code>, which is very odd</p>",
        "id": 126999732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> up for a challenge? :)</p>",
        "id": 126999789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112613
    },
    {
        "content": "<p>I think that investigating <code>lifetime-errors/ex2c-push-inference-variable.nll.stderr</code> would be great, and might give you some insight into how to solve some of the other tricky ones</p>",
        "id": 126999802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112630
    },
    {
        "content": "<p>I'm gonna have to run though shortly</p>",
        "id": 126999805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112643
    },
    {
        "content": "<p>it's interesting to compare the <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">NLL error</a> and the <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">non-NLL</a> <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">from the paper doc though</a></p>",
        "id": 126999852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527112689
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126999898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527112782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> opened up <a href=\"https://github.com/rust-lang/rust/issues/51012\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51012\">https://github.com/rust-lang/rust/issues/51012</a></p>",
        "id": 127000065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527113041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ever figure out what was up w/ the span?</p>",
        "id": 127005232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527121185
    },
    {
        "content": "<p>will be back to the chat in a bit</p>",
        "id": 127005326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527121325
    },
    {
        "content": "<p>will you be around?</p>",
        "id": 127005330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527121338
    },
    {
        "content": "<p>short answer is ... kind is Call</p>",
        "id": 127005335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527121359
    },
    {
        "content": "<p>couldn’t debug properly yet because I had no more time</p>",
        "id": 127005348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527121419
    },
    {
        "content": "<blockquote>\n<p>will you be around?</p>\n</blockquote>\n<p>maybe</p>",
        "id": 127005425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527121560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so as I was saying yesterday kind is of type Call and not AssignOp</p>",
        "id": 127027358,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166370
    },
    {
        "content": "<p>well in reality it starts as kind Scope</p>",
        "id": 127027363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166379
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-05-24T12:45:35Z: rustc_mir::build::expr::stmt: expr=Expr { ty: (), temp_lifetime: Some(Node(ItemLocalId(10))), span: src/test/ui/augmented-assignments.rs:25:5: 28:6, kind: Scope { region_scope: Node(ItemLocalId(9)), lint_level: Explicit(NodeId(34)), value: Mirror(Expr { ty: (), temp_lifetime: Some(Node(ItemLocalId(10))), span: src/test/ui/augmented-assignments.rs:25:5: 28:6, kind: Call { ty: for&lt;&#39;r&gt; fn(&amp;&#39;r mut Int, Int) {&lt;Int as std::ops::AddAssign&gt;::add_assign}, fun: Mirror(Expr { ty: for&lt;&#39;r&gt; fn(&amp;&#39;r mut Int, Int) {&lt;Int as std::ops::AddAssign&gt;::add_assign}, temp_lifetime: Some(Node(ItemLocalId(10))), span: src/test/ui/augmented-assignments.rs:25:5: 28:6, kind: Literal { literal: const std::ops::AddAssign::add_assign } }), args: [Hair(expr(32: x)), Hair(expr(33: x))] } }) } }\n</pre></div>",
        "id": 127027368,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166384
    },
    {
        "content": "<p>and Scope arm does ...</p>",
        "id": 127027379,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166410
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">in_scope</span><span class=\"p\">((</span><span class=\"n\">region_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_info</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">lint_level</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">stmt_expr</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>",
        "id": 127027381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166415
    },
    {
        "content": "<p>and that second call gives an <code>ExprKind::Call</code></p>",
        "id": 127027429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166445
    },
    {
        "content": "<p>that's because the test does ...</p>",
        "id": 127027438,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166471
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>impl AddAssign for Int {\n    fn add_assign(&amp;mut self, _: Int) {\n        unimplemented!()\n    }\n}\n</pre></div>",
        "id": 127027441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166476
    },
    {
        "content": "<p>hmm I guess I know what we can do ... trying ...</p>",
        "id": 127027518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527166599
    },
    {
        "content": "<p>hmm I'm a bit confused :)</p>",
        "id": 127027524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527166615
    },
    {
        "content": "<p>I mean everything you've posted makes sense to me :)</p>",
        "id": 127027530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527166626
    },
    {
        "content": "<p>but one question I have: did you figure out which statement the span comes from in the MIR?</p>",
        "id": 127027532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527166638
    },
    {
        "content": "<p>haven't checked that</p>",
        "id": 127027797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167079
    },
    {
        "content": "<p>we have this ...</p>",
        "id": 127027802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167101
    },
    {
        "content": "<p>OK</p>",
        "id": 127027803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527167102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>            _ =&gt; {\n                let expr_ty = expr.ty;\n                let temp = this.temp(expr.ty.clone(), expr_span);\n                unpack!(block = this.into(&amp;temp, block, expr));\n                unpack!(block = this.build_drop(block, expr_span, temp, expr_ty));\n                block.unit()\n            }\n</pre></div>",
        "id": 127027821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167152
    },
    {
        "content": "<p>wanted to check quickly by doing ...</p>",
        "id": 127027861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167166
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>            ExprKind::Call { ty: _, fun, args: _} =&gt; {\n                let fun = this.hir.mirror(fun);\n                let expr_ty = expr.ty;\n                let temp = this.temp(expr.ty.clone(), expr_span);\n                unpack!(block = this.into(&amp;temp, block, expr));\n                unpack!(block = this.build_drop(block, fun.span, temp, expr_ty));\n                block.unit()\n            }\n</pre></div>",
        "id": 127027867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167181
    },
    {
        "content": "<p>basically for call change expr.span with fun.span</p>",
        "id": 127027871,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>152 |                 unpack!(block = this.into(&amp;temp, block, expr));\n    |                                                         ^^^^ value used here after move\n</pre></div>",
        "id": 127027942,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167297
    },
    {
        "content": "<p>:)</p>",
        "id": 127027943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you need to use <code>ref fun</code> or something?</p>",
        "id": 127028093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527167536
    },
    {
        "content": "<p>/me hasn't looked carefully at surrounding context; just a guess from the code as listed</p>",
        "id": 127028097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527167555
    },
    {
        "content": "<p>yeah, tried that but mirror need to take ownership of fun after that</p>",
        "id": 127028161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0507]: cannot move out of borrowed content\n   --&gt; librustc_mir/build/expr/stmt.rs:149:43\n    |\n149 |                 let fun = this.hir.mirror(*fun);\n    |                                           ^^^^ cannot move out of borrowed content\n\nerror[E0505]: cannot move out of `expr` because it is borrowed\n   --&gt; librustc_mir/build/expr/stmt.rs:152:57\n    |\n148 |             ExprKind::Call { ty: _, ref fun, args: _} =&gt; {\n    |                                     ------- borrow of `expr.kind.fun` occurs here\n...\n152 |                 unpack!(block = this.into(&amp;temp, block, expr));\n    |                                                         ^^^^ move out of `expr` occurs here\n</pre></div>",
        "id": 127028185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if I do <code>ref fun</code> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span></p>",
        "id": 127028229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527167784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can you send me a link into the source?</p>",
        "id": 127028374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168007
    },
    {
        "content": "<p>(the \"mirror\" stuff is a bit artificial; it is used to convert the HIR \"bit by bit\" into HAIR, but I've thought about just converting everything in one big pass for a given fn and removing the mirror traits...)</p>",
        "id": 127028385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168044
    },
    {
        "content": "<p>but if needed we can extend the trait with some peak to \"peek\" at the span</p>",
        "id": 127028389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168056
    },
    {
        "content": "<p>that said, usually it is possible to <code>mirror</code> first</p>",
        "id": 127028392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168063
    },
    {
        "content": "<p>and to pass the mirrored result</p>",
        "id": 127028397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/stmt.rs#L141-L147\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/stmt.rs#L141-L147\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/stmt.rs#L141-L147</a></p>",
        "id": 127028652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168460
    },
    {
        "content": "<p>I was just trying to extract <code>Call</code> from there</p>",
        "id": 127028705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168495
    },
    {
        "content": "<p>with the code I've showed you</p>",
        "id": 127028710,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168505
    },
    {
        "content": "<p>so I can use <code>fun.span</code></p>",
        "id": 127028720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168521
    },
    {
        "content": "<p>which I'm not 100% sure what it gives but I guess is what I need</p>",
        "id": 127028726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168538
    },
    {
        "content": "<p>you're saying that this <code>expr_span</code> (from the call) is where you think the error is ultimately coming from?</p>",
        "id": 127028727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> argh so .. what test are we looing at again? (just to make sure you and I are thinknig of the same test)</p>",
        "id": 127028749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168597
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/augmented-assignments.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/augmented-assignments.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/augmented-assignments.rs</a></p>",
        "id": 127028819,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168677
    },
    {
        "content": "<blockquote>\n<p>you're saying that this <code>expr_span</code> (from the call) is where you think the error is ultimately coming from?</p>\n</blockquote>\n<p>yes</p>",
        "id": 127028824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168706
    },
    {
        "content": "<p>I'm not 100% sure what expr.span and what fun.span are exactly</p>",
        "id": 127028869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168735
    },
    {
        "content": "<p>I'd need to investigate a bit more</p>",
        "id": 127028873,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168743
    },
    {
        "content": "<p>was just trying to quickly test</p>",
        "id": 127028877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168754
    },
    {
        "content": "<p>well if you have <code>foo(bar)</code> then <code>expr_span</code> would cover the whole call, and <code>fun.span</code> would just cover <code>foo</code></p>",
        "id": 127028878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168754
    },
    {
        "content": "<p>that said, I think the reaosn you are seeing this <em>here</em></p>",
        "id": 127028879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168763
    },
    {
        "content": "<p>:)</p>",
        "id": 127028880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168763
    },
    {
        "content": "<p>that's was my guess</p>",
        "id": 127028881,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168769
    },
    {
        "content": "<p>is because <code>x += y</code> is being desugared into a call to a trait method</p>",
        "id": 127028882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168771
    },
    {
        "content": "<p>so ... doing fun.span would work</p>",
        "id": 127028884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168779
    },
    {
        "content": "<p>yeah += is the fun</p>",
        "id": 127028890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168784
    },
    {
        "content": "<p>yeah so I'm not sure just how the spans got setup in that case</p>",
        "id": 127028897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168793
    },
    {
        "content": "<p>we'd have to consult the HAIR desugaring</p>",
        "id": 127028898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168798
    },
    {
        "content": "<p>now the thing is how do I get rid of borrowck issues with the code I'm trying to write :P</p>",
        "id": 127028910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527168831
    },
    {
        "content": "<p>specifically <a href=\"https://github.com/rust-lang/rust/blob/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src/librustc_mir/hair/cx/expr.rs#L306\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src/librustc_mir/hair/cx/expr.rs#L306\">this function call here</a></p>",
        "id": 127028913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168836
    },
    {
        "content": "<p>tracing through a bit I suspect the span on <code>fun</code> might be the same as <code>expr_span</code> =)</p>",
        "id": 127028983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527168929
    },
    {
        "content": "<p>:(</p>",
        "id": 127029044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527169000
    },
    {
        "content": "<p>interesting problem :)</p>",
        "id": 127029070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169044
    },
    {
        "content": "<p>see, here, my sense is that the span of <code>+=</code> is <em>perfect</em> to use for the span of the \"function being called\" in <code>x += y</code> :)</p>",
        "id": 127029080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169066
    },
    {
        "content": "<p>well, actually, this is coming back to a concern I had early on</p>",
        "id": 127029121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169089
    },
    {
        "content": "<p>remember <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> when I was saying that we might want to extend MIR to have each <code>Lvalue</code> have a span?</p>",
        "id": 127029124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169101
    },
    {
        "content": "<p>that seems relevant here</p>",
        "id": 127029125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169105
    },
    {
        "content": "<p>we are using the span of the <em>statement</em> but really we want the span (I suspect) of the <em><code>Place</code> within the statement</em></p>",
        "id": 127029129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169119
    },
    {
        "content": "<p>yeah, that or have assignments carry multiple spans...?</p>",
        "id": 127029154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527169170
    },
    {
        "content": "<p>(but that seems silly)</p>",
        "id": 127029155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527169180
    },
    {
        "content": "<p>((although it might be less painful to implement in the short term...?))</p>",
        "id": 127029162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527169194
    },
    {
        "content": "<p>hmm</p>",
        "id": 127029227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169230
    },
    {
        "content": "<p>this is not an assignment</p>",
        "id": 127029230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169238
    },
    {
        "content": "<p>it's an overloaded method call</p>",
        "id": 127029233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169243
    },
    {
        "content": "<p>so i'm looking at closure diagnostics rn, and one thing i immediately hit upon is the concept of \"free regions\"</p>",
        "id": 127029234,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527169243
    },
    {
        "content": "<p>i've no idea what those are</p>",
        "id": 127029238,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527169249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I was going to point you at the <a href=\"https://github.com/rust-lang-nursery/rustc-guide/blob/master/src/mir-regionck.md\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-guide/blob/master/src/mir-regionck.md\">rustc-guide coverage of the topic</a>, but it appears I left it TBD :(</p>",
        "id": 127029261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169312
    },
    {
        "content": "<p>a \"free region\" (aka \"universal region\") is basically a lifetime parameter</p>",
        "id": 127029323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169363
    },
    {
        "content": "<p>or some lifetime that appears in the fn signature</p>",
        "id": 127029327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well.. I'm not sure what's the best way to continue. This may turn into a larger refactoring.</p>",
        "id": 127029495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169574
    },
    {
        "content": "<p>that said, I think that maybe we should shelve this issue, because I'm not sure just how bad it is</p>",
        "id": 127029499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169587
    },
    {
        "content": "<p>that is, I Think it looks extra bad because the source is written in such a way that it spans multiple lines</p>",
        "id": 127029505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169598
    },
    {
        "content": "<p>though I think long term we <em>do</em> want to modify mir <code>Place</code> to carry a span</p>",
        "id": 127029520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169627
    },
    {
        "content": "<p>but that will mean reworking the borrowck a bit</p>",
        "id": 127029524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169632
    },
    {
        "content": "<p>it's probably not <em>that</em> hard really</p>",
        "id": 127029526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169637
    },
    {
        "content": "<p>it might really be needed to solve a bunch of diagnostic spans actually</p>",
        "id": 127029532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169648
    },
    {
        "content": "<p>i at least found out where exactly the error message is generated</p>",
        "id": 127029537,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527169664
    },
    {
        "content": "<p>/me goes back to sleep for a while before his day starts</p>",
        "id": 127029541,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527169674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I can try to give you some tips later perhaps</p>",
        "id": 127029588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527169702
    },
    {
        "content": "<p>(in response to \"these are overloaded method calls\") okay, true. But method calls as terminators are just really heavy weight instances of assignments,right?</p>",
        "id": 127029851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527170113
    },
    {
        "content": "<p>(anyway it was just a throwaway remark)</p>",
        "id": 127029860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527170147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> depends on your POV :) my point is that adding just to <code>StmtAssign</code> would not suffice</p>",
        "id": 127030066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527170457
    },
    {
        "content": "<p>agreed</p>",
        "id": 127030074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527170467
    },
    {
        "content": "<p>It was really just a question of \"would a series of band-aid extensions to individual Stmt/Terminator variants be 'simpler' to implement than trying to add span to every Lvalue</p>",
        "id": 127030138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527170566
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well.. I'm not sure what's the best way to continue. This may turn into a larger refactoring.</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127030216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527170650
    },
    {
        "content": "<blockquote>\n<p>It was really just a question of \"would a series of band-aid extensions to individual Stmt/Terminator variants be 'simpler' to implement than trying to add span to every Lvalue</p>\n</blockquote>\n<p>yeah — and I guess the answer is ... maybe?</p>",
        "id": 127030790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527171514
    },
    {
        "content": "<p>another idea: we could refactor <code>Operand</code> to have a span</p>",
        "id": 127030802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527171526
    },
    {
        "content": "<p>that woudlnt' be too hard, might suffice</p>",
        "id": 127030816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527171534
    },
    {
        "content": "<blockquote>\n<p>a \"free region\" (aka \"universal region\") is basically a lifetime parameter</p>\n</blockquote>\n<p>Just to double check my understanding, these are also called \"universal regions\" right? Or are universal regions only things that actually live for every point in the CFG</p>",
        "id": 127032811,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527174067
    },
    {
        "content": "<p>same thing</p>",
        "id": 127032876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174148
    },
    {
        "content": "<p>I've been wrestling with the best terminology</p>",
        "id": 127032880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174153
    },
    {
        "content": "<p>\"free\" is a kind of general PL term though</p>",
        "id": 127032883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174160
    },
    {
        "content": "<p>referring to something that is not \"bound\" within a term or expression</p>",
        "id": 127032888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174167
    },
    {
        "content": "<p>so e.g. if we say that the statement <code>S</code> is <code>let x = y + z</code>, then <code>y</code> and <code>z</code> \"appear free\" in <code>S</code>, but <code>x</code> is bound in <code>S</code></p>",
        "id": 127032913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174197
    },
    {
        "content": "<p>I was calling them \"universal regions\" because they are universally quantified (\"forall\")</p>",
        "id": 127032922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174224
    },
    {
        "content": "<p>so e.g. <code>fn foo&lt;'a&gt; (...)</code> works for any region <code>'a</code></p>",
        "id": 127032926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174231
    },
    {
        "content": "<p>just as <code>fn foo&lt;T&gt;(...)</code> works any type <code>T</code></p>",
        "id": 127032928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527174238
    },
    {
        "content": "<p>So they are both free and universal, and we're lazy and occasionally only use one of those words?</p>",
        "id": 127033157,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527174567
    },
    {
        "content": "<p>There is also explicit universal quantification syntax though</p>",
        "id": 127033158,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527174567
    },
    {
        "content": "<p>which I think is used for declaring closures, where the incoming regions are neither free nor universal (unless declared to be so via <code>for &lt;'a&gt;</code> syntax if I'm understanding correctly)</p>",
        "id": 127033159,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527174567
    },
    {
        "content": "<p>I guess they're always free+universal from the perspective of type checking within the closure themselves? just not the body of the surrounding fn</p>",
        "id": 127033160,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527174567
    },
    {
        "content": "<p>as an observer, please dont let the super type theory leak out in the messages <span class=\"emoji emoji-1f649\" title=\"hear no evil\">:hear_no_evil:</span></p>",
        "id": 127033914,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527175478
    },
    {
        "content": "<p>No skolemization redux</p>",
        "id": 127033922,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527175492
    },
    {
        "content": "<p>I feel like \"generic lifetime parameter\" is an understood term. Could extend to \"implicit G..L..P..\" and \"higher-ranked g..l..p\" as needed</p>",
        "id": 127034001,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527175579
    },
    {
        "content": "<blockquote>\n<p>So they are both free and universal, and we're lazy and occasionally only use one of those words?</p>\n</blockquote>\n<p>yes, and — specifically — depending on your POV and the context, there may be free regions that are not universal</p>",
        "id": 127035274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527177397
    },
    {
        "content": "<blockquote>\n<p>No skolemization redux</p>\n</blockquote>\n<p>skolemization was never .. intentionally in the error messages :) but yes, of course I agree.. I don't think anyone was talking about the phrasing of error messages here.</p>",
        "id": 127035288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527177451
    },
    {
        "content": "<p>I just note its the diagnostics thread, so I was worried <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 127035581,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527177803
    },
    {
        "content": "<p>c'mon, it took me a while to learn how to spell skolemization properly, now I want to inflict this pain on others &lt;/sarcasm&gt;</p>",
        "id": 127035692,
        "sender_full_name": "qmx",
        "timestamp": 1527177926
    },
    {
        "content": "<p>\"free regions associated with closures\" how?</p>",
        "id": 127064974,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527224540
    },
    {
        "content": "<p>i'm guessing that happens when you have a lifetime'd variable as a fn arg and then you reference it in a closure created inside the fn body?</p>",
        "id": 127064986,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527224586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> well, [issue-45983.rs(<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/issue-45983.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/issue-45983.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/issue-45983.rs</a>) shows things like <code>fn give_any&lt;F: for&lt;'r&gt; FnOnce(&amp;'r ())&gt;(f: F) { ... }</code> and then elsewhere a call like <code>give_any(|y| x = Some(y));</code></p>",
        "id": 127070549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527236370
    },
    {
        "content": "<p>was in fact looking at that</p>",
        "id": 127070551,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527236385
    },
    {
        "content": "<p>yeah I'd suggest perhaps start by surveying all the tests</p>",
        "id": 127070600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527236460
    },
    {
        "content": "<p>to identify the cases that lead to this</p>",
        "id": 127070606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527236471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> not sure if this answers your question, but you may find <a href=\"https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src/librustc_mir/borrow_check/nll/universal_regions.rs#L159-L199\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src/librustc_mir/borrow_check/nll/universal_regions.rs#L159-L199\">this comment</a> interesting — it describes the different \"categories\" of universal regions and how each arises</p>",
        "id": 127071357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527238193
    },
    {
        "content": "<p>I have to say: Working on <a href=\"https://github.com/rust-lang/rust/issues/51025\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51025\">rust-lang/rust#51025</a>, I become contintually impressed by how much <em>more sane</em> Rust seems to be with NLL in place.</p>",
        "id": 127073361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527241722
    },
    {
        "content": "<p>I'm pretty excited to see its effects</p>",
        "id": 127073372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527241767
    },
    {
        "content": "<p>e.g. there were behaviors before that one sort of justified by saying \"ah there are borrows, and lifetimes are lexical, so the compiler rejects this code, but oh it accepts this one, watch me wave my hands wildly\"</p>",
        "id": 127073375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527241777
    },
    {
        "content": "<p>I was quite surprised to see this test in particular: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/vec_refs_data_with_early_death.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/vec_refs_data_with_early_death.rs\">vec_refs_data_with_early_death.rs</a></p>",
        "id": 127073430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527241843
    },
    {
        "content": "<p>Of all things that one would expect <code>#[may_dangle]</code> to take care of ...</p>",
        "id": 127073432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527241854
    },
    {
        "content": "<p>woot: <a href=\"https://github.com/rust-lang/rust/pull/51057\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51057\">https://github.com/rust-lang/rust/pull/51057</a></p>",
        "id": 127075631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527245653
    },
    {
        "content": "<p>So I've got my cannot-move-from errors branch using an approach that I'm a bit happier with.</p>",
        "id": 127205634,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527513850
    },
    {
        "content": "<p>If anyone wants to suggest anything some examples of the output are here: <a href=\"https://gist.github.com/matthewjasper/15eac85086ee6a8adb806450b046c57a\" target=\"_blank\" title=\"https://gist.github.com/matthewjasper/15eac85086ee6a8adb806450b046c57a\">https://gist.github.com/matthewjasper/15eac85086ee6a8adb806450b046c57a</a>.</p>",
        "id": 127205641,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527513881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ooh, nice</p>",
        "id": 127205666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is there an open issue that you know of? did you make a PR?</p>",
        "id": 127249983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527598328
    },
    {
        "content": "<p>I decided to call it <a href=\"https://github.com/rust-lang/rust/issues/45699\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45699\">#45699</a></p>",
        "id": 127251498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527600317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are you looking at <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a> ?</p>",
        "id": 127261274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527612431
    },
    {
        "content": "<p>yes</p>",
        "id": 127261777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613193
    },
    {
        "content": "<p>was starting now</p>",
        "id": 127261778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613196
    },
    {
        "content": "<p>do you still want me to do it?</p>",
        "id": 127261834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613214
    },
    {
        "content": "<p>yep</p>",
        "id": 127261928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527613344
    },
    {
        "content": "<p>tell me :)</p>",
        "id": 127261955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613402
    },
    {
        "content": "<p>ahh sorry, I read it wrong</p>",
        "id": 127262040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613508
    },
    {
        "content": "<p>ok starting this thing</p>",
        "id": 127262048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how do I test this?</p>",
        "id": 127262301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613894
    },
    {
        "content": "<p>or better asked, what's the example you're using that triggers this issue?</p>",
        "id": 127262309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613910
    },
    {
        "content": "<p>ahh sorry sorry, Felix, added a lot of examples</p>",
        "id": 127262352,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613926
    },
    {
        "content": "<p>forget about what I've said :P</p>",
        "id": 127262362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527613945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there a way now to compile in nll mode without changing the file?</p>",
        "id": 127262824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614625
    },
    {
        "content": "<p><code>rustc -Znll</code> :'(</p>",
        "id": 127262865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> there is, <code>-Zborrowck=mir -Zallow-two-phase-borrows</code> I think will do it</p>",
        "id": 127262931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614748
    },
    {
        "content": "<p>I was just complaining to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> earlier that this is too complicated :)</p>",
        "id": 127262938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614759
    },
    {
        "content": "<p>I'd take a PR to change it to <code>-Zdisallow-two-phase-borrows</code> =)</p>",
        "id": 127262979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614768
    },
    {
        "content": "<p>or perhaps <code>-Ztwo-phase-borrows=no</code> with <code>-Zallow-two-phase-borrows</code> being a deprecated no-op (I think it apperas in some places like perf?)</p>",
        "id": 127262992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614795
    },
    {
        "content": "<p>ya, saw that way yesterday</p>",
        "id": 127262993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614799
    },
    {
        "content": "<blockquote>\n<p>I'd take a PR to change it to <code>-Zdisallow-two-phase-borrows</code> =)</p>\n</blockquote>\n<p>don't understand why that?</p>",
        "id": 127262995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614807
    },
    {
        "content": "<p>or what you mean exactly</p>",
        "id": 127263000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614817
    },
    {
        "content": "<p>so right now <code>#![feature(nll)]</code> implies those two <code>-Z</code> flags</p>",
        "id": 127263013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614844
    },
    {
        "content": "<p>We want to retain the ability to isolate two phase borrows</p>",
        "id": 127263015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527614846
    },
    {
        "content": "<p>For debugging</p>",
        "id": 127263019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527614856
    },
    {
        "content": "<p>what I mean is that I think we should <em>default</em> to the behavior that <code>#![feature(nll)]</code> gives you</p>",
        "id": 127263020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614858
    },
    {
        "content": "<p>and make you give add'l flags to disable 2-phase borrows</p>",
        "id": 127263023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614866
    },
    {
        "content": "<p>or make other changes</p>",
        "id": 127263026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614869
    },
    {
        "content": "<p>so you meant to say that <code>-Zborrowck=mir</code> implies <code>-Ztwo-phase-borrows</code>?</p>",
        "id": 127263091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614932
    },
    {
        "content": "<p>and in order to turn off you can <code>-Zdisallow-two-phase-borrows</code>?</p>",
        "id": 127263105,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614949
    },
    {
        "content": "<p>did I follow correctly</p>",
        "id": 127263107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527614957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yes</p>",
        "id": 127263215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615061
    },
    {
        "content": "<p>ok</p>",
        "id": 127263231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615082
    },
    {
        "content": "<p>or even <code>-Znll</code> imply those things and add <code>-Zdisallow-two-phase-borrows</code></p>",
        "id": 127263296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615125
    },
    {
        "content": "<p>was reading comments on <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a></p>",
        "id": 127263397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615297
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Notably, this call to is_mutable — when it returns Err — also returns some information about why this path is not mutable:\n</pre></div>",
        "id": 127263405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615308
    },
    {
        "content": "<p>I guess what you mean is that given the if let the result when Err is being discarded and we need that</p>",
        "id": 127263417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615341
    },
    {
        "content": "<p>sorry if I ask trivial questions but from time to time I'm pretty sure I got 98% of the wording on things because of english issues and I want 100% :D</p>",
        "id": 127263470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615369
    },
    {
        "content": "<p>yes, right</p>",
        "id": 127263481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615392
    },
    {
        "content": "<p>and the other thing is</p>",
        "id": 127263484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615400
    },
    {
        "content": "<p>you mentioned calling <code>report_illegal_reassignment</code> function with parts of that Err stuff</p>",
        "id": 127263502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615442
    },
    {
        "content": "<p>that thing is already being called in the iter_incoming loop</p>",
        "id": 127263506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615457
    },
    {
        "content": "<p>is it there being called with other purposes?</p>",
        "id": 127263509,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615468
    },
    {
        "content": "<p>don't know :)</p>",
        "id": 127263609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615577
    },
    {
        "content": "<p>but I doubt it</p>",
        "id": 127263618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615590
    },
    {
        "content": "<p>you'd have to ripgrep around</p>",
        "id": 127263620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615593
    },
    {
        "content": "<p>I should mention, once we fix this part, there are probably a few other cases w'ell want to tweak in similar ways — e.g., when you have an example like <code>&amp;mut foo</code> where <code>let foo</code></p>",
        "id": 127263675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615621
    },
    {
        "content": "<p>ok</p>",
        "id": 127263704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527615680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is rustc::infer::lexical_region_resolve intrinsically tied to AST-borrowck? Or will that remain in place even after a full switch to NLL ?</p>",
        "id": 127276379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527630853
    },
    {
        "content": "<p>I hope to kill it after a full switch to NLL</p>",
        "id": 127276387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630871
    },
    {
        "content": "<p>but it's going to take a bit of work</p>",
        "id": 127276392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630886
    },
    {
        "content": "<p>it is also used to report some other errors unrelated to borrowck</p>",
        "id": 127276396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630898
    },
    {
        "content": "<p>So the cases where our only good diagnostic spans are attached to that \"not reporting region error due to nll\" message ...</p>",
        "id": 127276399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527630905
    },
    {
        "content": "<p><em>well</em>, in the long term, we should get good spans from borrowck</p>",
        "id": 127276411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630929
    },
    {
        "content": "<p>but this is that case I was tlaking about</p>",
        "id": 127276417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630934
    },
    {
        "content": "<p>where regionck today reports an error</p>",
        "id": 127276419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630937
    },
    {
        "content": "<p>that NLL ought to accept</p>",
        "id": 127276422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630940
    },
    {
        "content": "<p>I am not sure whether we want to \"silence\" those in this brave new future or what</p>",
        "id": 127276432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630952
    },
    {
        "content": "<p>maybe we do</p>",
        "id": 127276434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630954
    },
    {
        "content": "<p>just like we silence AST borrowck</p>",
        "id": 127276438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630957
    },
    {
        "content": "<p>/me pops his mental stack a few frames</p>",
        "id": 127276501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631018
    },
    {
        "content": "<p>The overarching thing I'm trying to figure out right now</p>",
        "id": 127276512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631032
    },
    {
        "content": "<p>is how many bugs that I'm about to file</p>",
        "id": 127276516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631040
    },
    {
        "content": "<p>are actually instances of \"this needs to be fixed by producing better explanations for how our region constraints arose\"</p>",
        "id": 127276531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631079
    },
    {
        "content": "<p>A concrete example is: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr</a></p>",
        "id": 127276575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631089
    },
    {
        "content": "<p>where AST-borrowck produces a readable series of lines explaining the constraints that led us to require <code>'a</code> to outlive <code>'static</code></p>",
        "id": 127276587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631130
    },
    {
        "content": "<blockquote>\n<p>readable</p>\n</blockquote>\n<p>maybe... but better than NLL I suppose :)</p>",
        "id": 127276599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631149
    },
    {
        "content": "<p>but NLL just says \"<code>'a needs to outlive </code>'static`\", and doesn't say <em>why</em></p>",
        "id": 127276600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631150
    },
    {
        "content": "<p>I don't quite understand the question</p>",
        "id": 127276610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631162
    },
    {
        "content": "<p>(Yeah I debated about how to phrase that)</p>",
        "id": 127276611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631165
    },
    {
        "content": "<p>I guess you are saying: Is this something we have to fix, or could we rely on the old errors here?</p>",
        "id": 127276616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631171
    },
    {
        "content": "<p>(in terms of whether to assert readability or not)</p>",
        "id": 127276617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631172
    },
    {
        "content": "<blockquote>\n<p>I guess you are saying: Is this something we have to fix, or could we rely on the old errors here?</p>\n</blockquote>\n<p>Well, I haven't even gotten that far in my thinking.</p>",
        "id": 127276671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631206
    },
    {
        "content": "<p>I'm honestly just trying to create a github issue</p>",
        "id": 127276684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631215
    },
    {
        "content": "<p>but I wasn't sure whether I should be looking for a pre-existing one</p>",
        "id": 127276697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631231
    },
    {
        "content": "<p>Or rather, I tried looking for a pre-existing one</p>",
        "id": 127276702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631243
    },
    {
        "content": "<p>but none of the search terms I thought would yield results (like \"regionck\") actually did</p>",
        "id": 127276711,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631262
    },
    {
        "content": "<p>I think that sort of falls under <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span>'s \"ungreat\" issue?</p>",
        "id": 127276716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631265
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/49397\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49397\">https://github.com/rust-lang/rust/issues/49397</a></p>",
        "id": 127276722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631272
    },
    {
        "content": "<p>(I am thinking it's probably time for us/me to do some diagnostic sprinting, though)</p>",
        "id": 127276724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631293
    },
    {
        "content": "<p>the problem is that <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> 's issue there has multiple ungreat things</p>",
        "id": 127276729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631303
    },
    {
        "content": "<p>there's the fact that it uses the empty string</p>",
        "id": 127276732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631316
    },
    {
        "content": "<p>true</p>",
        "id": 127276734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631321
    },
    {
        "content": "<p>but I think they're all kinda related</p>",
        "id": 127276777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631330
    },
    {
        "content": "<p>Well, you have more experience than I do writing tutorial instructions</p>",
        "id": 127276786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631359
    },
    {
        "content": "<p>I was assuming that it was better</p>",
        "id": 127276787,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631363
    },
    {
        "content": "<p>if the issue were more targetted</p>",
        "id": 127276789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631367
    },
    {
        "content": "<p>problems like \"present something better than an empty string for this region\"</p>",
        "id": 127276795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631381
    },
    {
        "content": "<p>are in my mind separate from</p>",
        "id": 127276799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631386
    },
    {
        "content": "<p>well partly it's beacuse I don't expect to be able to mentor this one out :)</p>",
        "id": 127276804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631396
    },
    {
        "content": "<p>\"present the series of constraints that cause us to relate these two lifetimes\"</p>",
        "id": 127276805,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631402
    },
    {
        "content": "<p>heh</p>",
        "id": 127276808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631410
    },
    {
        "content": "<p>So that may be getting at something</p>",
        "id": 127276813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631424
    },
    {
        "content": "<p>I think in your head, you know something fundamental that needs to change</p>",
        "id": 127276818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631437
    },
    {
        "content": "<p>in order to even provide the infrastructure that we will need</p>",
        "id": 127276856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631444
    },
    {
        "content": "<p>to produce useful diagnsotics</p>",
        "id": 127276861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631448
    },
    {
        "content": "<p>in my head, even after that fundemental change is made</p>",
        "id": 127276865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631462
    },
    {
        "content": "<p>there is still plumbing that will need to be done</p>",
        "id": 127276867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631467
    },
    {
        "content": "<p>I think we actually probably have the info</p>",
        "id": 127276880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631503
    },
    {
        "content": "<p>So I was wondering if we could separate the fundamental kernel  from the plumbing that hooks that kernel up to all the diagnsotics</p>",
        "id": 127276882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631504
    },
    {
        "content": "<p>that is, we have the full set of constraints etc</p>",
        "id": 127276889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631512
    },
    {
        "content": "<p>though we don't have quite as many details as the old code</p>",
        "id": 127276891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631519
    },
    {
        "content": "<p>that is, we don't have \"causes\"</p>",
        "id": 127276897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631536
    },
    {
        "content": "<p>just the set of constraints</p>",
        "id": 127276903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631542
    },
    {
        "content": "<p>(I'm not entirely convinced the old causes were good though)</p>",
        "id": 127276906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631549
    },
    {
        "content": "<p>(which is why I didn't recreate them)</p>",
        "id": 127276909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631554
    },
    {
        "content": "<p>but yes, you're probably right re: plumbing</p>",
        "id": 127276910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631561
    },
    {
        "content": "<p>I sort of expected for this case to just have to \"play around\" with various examples</p>",
        "id": 127276949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631569
    },
    {
        "content": "<p>maybe I'm being too much of a perfectionist</p>",
        "id": 127276952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631577
    },
    {
        "content": "<p>Okay so that may be a question we need to resolve: Are causes a must-have for deploying NLL</p>",
        "id": 127276954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631578
    },
    {
        "content": "<p>and we should try to reproduce the old \"egads I need a pager\" style errors</p>",
        "id": 127276959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631590
    },
    {
        "content": "<p>I assume you would agree that this is not acceptable in the long term: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr</a></p>",
        "id": 127276975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631627
    },
    {
        "content": "<p>clearly not</p>",
        "id": 127276978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631638
    },
    {
        "content": "<p>would you then interpret that as at least evidence that we need causes?</p>",
        "id": 127276985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631654
    },
    {
        "content": "<p>or do you expect that there is some way to usefully present the constraints?</p>",
        "id": 127276990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631673
    },
    {
        "content": "<p>I suspect we need some form of causes, yes</p>",
        "id": 127276992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631680
    },
    {
        "content": "<p>in a way that the user would be able to take action?</p>",
        "id": 127276993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631680
    },
    {
        "content": "<p>okay</p>",
        "id": 127277004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631684
    },
    {
        "content": "<p>but I sort of want to drive the causes from the errors we want to make</p>",
        "id": 127277041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527631700
    },
    {
        "content": "<p>I'm going to just say \"NLL needs causes\" for the issue I file in association with this entry in the stderr-deviations Paper then</p>",
        "id": 127277044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527631702
    },
    {
        "content": "<p>I'm willing to work on diagnostics stuff if that's what needs to be done. I have a branch lying around somewhere that sort-of fixed the problems, but the code was pretty gross and the output ended up more verbose than I'd like</p>",
        "id": 127277228,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527632033
    },
    {
        "content": "<p>*the problems = the specific case the \"ungreat\" issue was targetting</p>",
        "id": 127277271,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527632052
    },
    {
        "content": "<p>I haven't had a chance to take a look at the diagnostics triage doc yet. I've been pretty busy for the last couple weeks and that doesn't seem like it'll significantly lighten up any time soon</p>",
        "id": 127277373,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527632209
    },
    {
        "content": "<p>hopefully I'll be able to find a few hours a week to hack on this stuff though</p>",
        "id": 127277379,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527632227
    },
    {
        "content": "<p>okay I just finished a review of all the cases in <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa</a> that were updated by PR #51025</p>",
        "id": 127280409,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637114
    },
    {
        "content": "<p>almost all of the rows labelled \"weak test\" are now \"100!\" instead</p>",
        "id": 127280412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637132
    },
    {
        "content": "<p>the only exceptions are: 1. some weak tests that were unrelated to #51025</p>",
        "id": 127280418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637152
    },
    {
        "content": "<p>and 2. <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr</a></p>",
        "id": 127280424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637184
    },
    {
        "content": "<p>the latter I think is still a little weak. In NLL it reports 3 errors while AST-borrowck reports 4 errors, and I <em>think</em> this is because the test is not doing a good enough job of poking the dropck</p>",
        "id": 127280475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637255
    },
    {
        "content": "<p>oh, yeah: What prompted this review is that I think I have finished tagging all of the non-\"meh\" rows with github issues</p>",
        "id": 127280491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637296
    },
    {
        "content": "<p>which means we can probably retire <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa</a> itself at any time that we decide its not pulling its weight anymore</p>",
        "id": 127280541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637338
    },
    {
        "content": "<p>(for now it is kind of fun to at least scroll through it and see how many cases are now tagged as <span class=\"emoji emoji-1f4af\" title=\"hundred points\">:hundred_points:</span> )</p>",
        "id": 127280547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527637368
    },
    {
        "content": "<p>/me suddenly realized that an actual spreadsheet may have been much better than a Paper doc for NLL-stderr-diagnostic-deviations</p>",
        "id": 127357075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527765472
    },
    {
        "content": "<p>luckily cut-and-paste into a google sheet seems like it actually ... works... (even preserves urls amazingly)</p>",
        "id": 127357146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527765549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> link?</p>",
        "id": 127360440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771117
    },
    {
        "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/16Hoy5CASZOYkjZO0p85xrUberY2PnxeAHqxlT4VFurM/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/16Hoy5CASZOYkjZO0p85xrUberY2PnxeAHqxlT4VFurM/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/16Hoy5CASZOYkjZO0p85xrUberY2PnxeAHqxlT4VFurM/edit?usp=sharing</a></p>",
        "id": 127360489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771164
    },
    {
        "content": "<p>its not meant to be permanent though</p>",
        "id": 127360494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771181
    },
    {
        "content": "<p>can each of these \"channels\" which I see are called topics have a topic like on IRC or a description</p>",
        "id": 127360498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771185
    },
    {
        "content": "<p>#diagnostics and all these threads are called topics</p>",
        "id": 127360504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771201
    },
    {
        "content": "<p>so my guess is that is not possible</p>",
        "id": 127360510,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771209
    },
    {
        "content": "<p>I just wanted to sort it by the issue number to ease creating a summary table at the bottom of the NLL stderr deviations Paper</p>",
        "id": 127360517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771223
    },
    {
        "content": "<p>could be nice to be able to put this spreadsheet in the thread description</p>",
        "id": 127360521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771227
    },
    {
        "content": "<p>let me note again: Its not meant to be permanent</p>",
        "id": 127360531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771241
    },
    {
        "content": "<p>just a sketch area</p>",
        "id": 127360567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771247
    },
    {
        "content": "<blockquote>\n<p>I just wanted to sort it by the issue number to ease creating a summary table at the bottom of the NLL stderr deviations Paper</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127360570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771248
    },
    {
        "content": "<p>(though I do admit that if I put more effort into my spreadsheet-fu, I'd be able to make something that automatically generated the counts in that table)</p>",
        "id": 127360603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771315
    },
    {
        "content": "<p>:)</p>",
        "id": 127360757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771508
    },
    {
        "content": "<p>columns are a bit tight (if that's the right way to say what I'm thinking)</p>",
        "id": 127360763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771523
    },
    {
        "content": "<p>some text doesn't fit and it's a bit harder to read it</p>",
        "id": 127360772,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527771535
    },
    {
        "content": "<p>/me considers deleting the spreadsheet now that he's done with it</p>",
        "id": 127360903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527771698
    },
    {
        "content": "<p>ahh ok :)</p>",
        "id": 127361523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527772645
    },
    {
        "content": "<p>I'm not using it just wanted to take a look</p>",
        "id": 127361530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527772657
    },
    {
        "content": "<p>so don't worry about me</p>",
        "id": 127361535,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527772673
    },
    {
        "content": "<p>I still need to start with my diagnostics issue</p>",
        "id": 127361574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527772683
    },
    {
        "content": "<p>and it's clear what's going on</p>",
        "id": 127361578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527772689
    },
    {
        "content": "<blockquote>\n<p>let me note again: Its not meant to be permanent</p>\n</blockquote>\n<p>why?</p>",
        "id": 127363526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527775472
    },
    {
        "content": "<p>that is, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, why would we not have a spreadsheet that we aim to keep up to date?</p>",
        "id": 127363532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527775489
    },
    {
        "content": "<p>it's maybe useful to have correlations in both ways I think</p>",
        "id": 127363537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527775501
    },
    {
        "content": "<p>we can. but that was not the purpose of <em>that</em> sheet</p>",
        "id": 127363548,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527775507
    },
    {
        "content": "<p>or maybe it's too much work, not sure</p>",
        "id": 127363553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527775509
    },
    {
        "content": "<p>ok</p>",
        "id": 127363554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527775511
    },
    {
        "content": "<p>(it could well be repurposed for such. I just saw <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> 's feedback and thought \"I dont want to worry about this right now)</p>",
        "id": 127363570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527775541
    },
    {
        "content": "<p>hehe don't worry about my feedback, I can just deal with the way it is :)</p>",
        "id": 127365250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527777470
    },
    {
        "content": "<p>I just needed to increase cells span a bit</p>",
        "id": 127365302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527777507
    },
    {
        "content": "<p>but don't worry about that</p>",
        "id": 127365310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527777519
    },
    {
        "content": "<p>I'm not using the spreadsheet</p>",
        "id": 127365319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527777532
    },
    {
        "content": "<p>I was starting to go over <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a></p>",
        "id": 127376963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792158
    },
    {
        "content": "<p>told Niko that I'm going to try to investigate a bit more about structures involved there because I use to forget or not know what are most of the structures that we use around</p>",
        "id": 127376982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792194
    },
    {
        "content": "<p>great I'll put your name in there</p>",
        "id": 127376984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792196
    },
    {
        "content": "<p>(on the table I've put at the bottom of the paper doc.)</p>",
        "id": 127376994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792210
    },
    {
        "content": "<p>like in that example Context, (Place, Span), Flows, etc</p>",
        "id": 127376998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792219
    },
    {
        "content": "<p>((you know, that paper doc that we <em>also</em> didn't want to become a canonical Database. :)  ))</p>",
        "id": 127377003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792228
    },
    {
        "content": "<p>so many things :), going to keep saying stuff and asking questions here</p>",
        "id": 127377007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792236
    },
    {
        "content": "<blockquote>\n<p>great I'll put your name in there</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127377051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792247
    },
    {
        "content": "<p>Okay. For once I actually know what all four of those things are</p>",
        "id": 127377052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792248
    },
    {
        "content": "<p>so ...</p>",
        "id": 127377059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792260
    },
    {
        "content": "<p>Context is a Location wrapper that hols a ContextKind which says what's going on in that Location</p>",
        "id": 127377076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792282
    },
    {
        "content": "<p>you can correct me</p>",
        "id": 127377078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792289
    },
    {
        "content": "<p>will try to build an NLL data types Glossary</p>",
        "id": 127377094,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792316
    },
    {
        "content": "<p>yes that's right. My memory/intent was that <code>Context</code> would only be used for <del>debugging</del> compiler instrumentation info</p>",
        "id": 127377110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792334
    },
    {
        "content": "<p>as in, knowing the context of a call in a bit of <code>debug!</code> output</p>",
        "id": 127377162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792371
    },
    {
        "content": "<p>ok, btw, one weird thing is that <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1375-L1380\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1375-L1380\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1375-L1380</a> is receiving the Context</p>",
        "id": 127377163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792374
    },
    {
        "content": "<p>to pass it in here <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1395\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1395\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1395</a></p>",
        "id": 127377169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792381
    },
    {
        "content": "<p>and then that's discarded here <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L598\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L598\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L598</a></p>",
        "id": 127377211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792445
    },
    {
        "content": "<p>yeah the Context is not a full call chain</p>",
        "id": 127377214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792447
    },
    {
        "content": "<p>it just reports what part of the MIR we were in when we reached that point</p>",
        "id": 127377220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792460
    },
    {
        "content": "<p>I guess this is to avoid breaking the API</p>",
        "id": 127377222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792460
    },
    {
        "content": "<p>at some point we should be able to discard <code>Context</code> entirely,  I think/hope, as long as no one has put in code that actually inspects them</p>",
        "id": 127377280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792502
    },
    {
        "content": "<p>I have seen this happen in several parts of the code</p>",
        "id": 127377297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792526
    },
    {
        "content": "<p>that is, the only thing that should be reading the <code>context</code> is the <code>debug!</code> calls</p>",
        "id": 127377304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792535
    },
    {
        "content": "<p>couldn't be nice to use _context there?</p>",
        "id": 127377306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792538
    },
    {
        "content": "<p>I mean, even when used</p>",
        "id": 127377317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792552
    },
    {
        "content": "<p>you mean name it <code>_context</code> just to make it clear that no one should be reading from it?</p>",
        "id": 127377322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792562
    },
    {
        "content": "<p>because you use it to pass it to a function that doesn't use it</p>",
        "id": 127377323,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792567
    },
    {
        "content": "<p>oh I guess some code is reading the <code>context.loc</code> for the purpose of identifying spans</p>",
        "id": 127377411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792637
    },
    {
        "content": "<p>that was not my intent, but we can always replace <code>context</code> with just the <code>loc</code> in the future.</p>",
        "id": 127377424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792659
    },
    {
        "content": "<p>I'm not sure I follow you</p>",
        "id": 127377440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792684
    },
    {
        "content": "<p>all I'm saying is that in check_if_reassignment_to_immutable_state context is just used to pass it to report_illegal_reassignment</p>",
        "id": 127377454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792713
    },
    {
        "content": "<p>sure</p>",
        "id": 127377462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792722
    },
    {
        "content": "<p>but in report_illegal_reassignment context is _context which is just discarded</p>",
        "id": 127377503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792729
    },
    {
        "content": "<p>I'm saying that my <em>intent</em> was that everywhere in the code, the <code>context</code> argument would not have any effect on the compiler's behavior</p>",
        "id": 127377520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792766
    },
    {
        "content": "<p>so I'm saying why don't we use _context in check_if_reassignment_to_immutable_state and pass it to the other function as _context too, kind of in a way to describe that the thing is not used</p>",
        "id": 127377521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792769
    },
    {
        "content": "<p>otherwise just remove from the signature</p>",
        "id": 127377526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792776
    },
    {
        "content": "<p>I have no problem with the idea of naming it <code>_context</code></p>",
        "id": 127377530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792778
    },
    {
        "content": "<p>but I guess that breaks stuff</p>",
        "id": 127377533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792780
    },
    {
        "content": "<p>but I do not want it removed from the sginature</p>",
        "id": 127377542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792787
    },
    {
        "content": "<p>because I find it useful when adding <code>debug!</code> statemnets</p>",
        "id": 127377546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792795
    },
    {
        "content": "<p>such as here: <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L560\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L560\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L560</a></p>",
        "id": 127377553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792802
    },
    {
        "content": "<p>I understand</p>",
        "id": 127377559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792812
    },
    {
        "content": "<p>not every method has such a debug! statement, but I will sometimes throw them in temporarily</p>",
        "id": 127377571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792825
    },
    {
        "content": "<p>you want it there so you can add debug! calls when you're coding?</p>",
        "id": 127377572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792826
    },
    {
        "content": "<p>exactly</p>",
        "id": 127377574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792830
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127377577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792839
    },
    {
        "content": "<p>and its a lot more effort to rethread the <code>context</code> through everything</p>",
        "id": 127377578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792840
    },
    {
        "content": "<p>that's what I wanted to know :)</p>",
        "id": 127377615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792844
    },
    {
        "content": "<p>so I prefer to keep it</p>",
        "id": 127377617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792845
    },
    {
        "content": "<p>makes sense</p>",
        "id": 127377623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792853
    },
    {
        "content": "<p>but I don't mind naming it <code>_context</code>.</p>",
        "id": 127377625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792853
    },
    {
        "content": "<p>was just trying to understand</p>",
        "id": 127377629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792859
    },
    {
        "content": "<p>I <em>do</em> think we should probably change this code: <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L269\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L269\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/error_reporting.rs#L269</a></p>",
        "id": 127377637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792874
    },
    {
        "content": "<p>to not read from <code>context.loc</code></p>",
        "id": 127377640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792880
    },
    {
        "content": "<p>it may be useful for this kind of things to name it _context to explain that is just for debug purposes or something like that</p>",
        "id": 127377642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792884
    },
    {
        "content": "<p>but ... its a nitpick</p>",
        "id": 127377643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792888
    },
    {
        "content": "<p>you mean, not read from context.loc and pass the loc to the funcion?</p>",
        "id": 127377669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792926
    },
    {
        "content": "<p>yeah that's what I was thinking</p>",
        "id": 127377672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792933
    },
    {
        "content": "<p>but its a really minor detail</p>",
        "id": 127377675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792937
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127377677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792938
    },
    {
        "content": "<p>yes</p>",
        "id": 127377679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792940
    },
    {
        "content": "<p>I see</p>",
        "id": 127377680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792942
    },
    {
        "content": "<p>and we have bigger fish to fry at the moment</p>",
        "id": 127377681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792943
    },
    {
        "content": "<p>thanks, it helps understanding</p>",
        "id": 127377687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792949
    },
    {
        "content": "<p>yeah, I'm not going to do that</p>",
        "id": 127377692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792958
    },
    {
        "content": "<p>just asking to get some understanding of these structs involved</p>",
        "id": 127377739,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527792977
    },
    {
        "content": "<p>then Place is described like</p>",
        "id": 127377778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793038
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/// A path to a value; something that can be evaluated without\n/// changing or disturbing program state.\n</pre></div>",
        "id": 127377785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793044
    },
    {
        "content": "<p>I thought more about Place as place in memory</p>",
        "id": 127377848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793085
    },
    {
        "content": "<p>where values are stored</p>",
        "id": 127377861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793100
    },
    {
        "content": "<blockquote>\n<p>at some point we should be able to discard <code>Context</code> entirely,  I think/hope, as long as no one has put in code that actually inspects them</p>\n</blockquote>\n<p>what is wrong with having a context?</p>",
        "id": 127377872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793119
    },
    {
        "content": "<p>in particular polonius integration uses it I think ;)</p>",
        "id": 127377885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793135
    },
    {
        "content": "<p>it uses it to get the location</p>",
        "id": 127377897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793157
    },
    {
        "content": "<p>(I guess I don't know why it's an important invariant that <code>context</code> doesn't affect behavior)</p>",
        "id": 127377912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793187
    },
    {
        "content": "<p>mm</p>",
        "id": 127377921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793193
    },
    {
        "content": "<p>I guess it doesn't matter</p>",
        "id": 127377928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793197
    },
    {
        "content": "<p>otoh threading an explicit location also seems ok — or even baking it into the flows</p>",
        "id": 127377998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793218
    },
    {
        "content": "<p>most of the code kind of \"implicitly knows\" where it is</p>",
        "id": 127378003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793226
    },
    {
        "content": "<p>via the <code>flows</code> state</p>",
        "id": 127378006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793230
    },
    {
        "content": "<p>or at least implicitly knows the state of the various bitsets at the point where it is</p>",
        "id": 127378010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793240
    },
    {
        "content": "<p>just once you start reading structure of <code>context,</code> then you have to actually commit to its form to some degree</p>",
        "id": 127378011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793242
    },
    {
        "content": "<p>but if all you are using it for is as a token with useful <code>fmt::Debug</code> output ...</p>",
        "id": 127378043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793278
    },
    {
        "content": "<p>then that leaves the developer with more freedom for what does or doesn't go in it.</p>",
        "id": 127378052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793291
    },
    {
        "content": "<p>But really, I don't actually have much justification.</p>",
        "id": 127378061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793305
    },
    {
        "content": "<p>Attaching the location to the <code>flows</code> state ... that would indeed be interesting...</p>",
        "id": 127378122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527793342
    },
    {
        "content": "<blockquote>\n<p>I thought more about Place as place in memory<br>\nwhere values are stored</p>\n</blockquote>\n<p>is this correct?</p>",
        "id": 127378209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793456
    },
    {
        "content": "<p>confused because</p>",
        "id": 127378246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793538
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#[derive(Copy, Clone, Debug)]\npub enum Place {\n    /// A place referring to a value allocated in the `Memory` system.\n    Ptr {\n        /// A place may have an invalid (integral or undef) pointer,\n        /// since it might be turned back into a reference\n        /// before ever being dereferenced.\n        ptr: Scalar,\n        align: Align,\n        extra: PlaceExtra,\n    },\n\n    /// A place referring to a value on the stack. Represented by a stack frame index paired with\n    /// a Mir local index.\n    Local { frame: usize, local: mir::Local },\n}\n</pre></div>",
        "id": 127378249,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/// A path to a value; something that can be evaluated without\n/// changing or disturbing program state.\n#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\npub enum Place&lt;&#39;tcx&gt; {\n    /// local variable\n    Local(Local),\n\n    /// static or static mut variable\n    Static(Box&lt;Static&lt;&#39;tcx&gt;&gt;),\n\n    /// projection out of a place (access a field, deref a pointer, etc)\n    Projection(Box&lt;PlaceProjection&lt;&#39;tcx&gt;&gt;),\n}\n</pre></div>",
        "id": 127378299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793567
    },
    {
        "content": "<p>I was looking at the second one</p>",
        "id": 127378312,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527793588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 127380673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797129
    },
    {
        "content": "<p>sort of</p>",
        "id": 127380746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797196
    },
    {
        "content": "<p>in a meeting</p>",
        "id": 127380747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797201
    },
    {
        "content": "<p>but it hasn't started yet :)</p>",
        "id": 127380751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797204
    },
    {
        "content": "<p>what I 'm understanding from your comment here <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a> about <code>report_illegal_reassignment</code> is that I needed to call that, but that thing doesn't report the <code>consider using a mut thing</code>.<code>check_access_permissions</code> is the one that does but unsure how do they play together if shouldn't</p>",
        "id": 127380767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797241
    },
    {
        "content": "<p>I'm adding some code to call it and see what happens, compile times killing me</p>",
        "id": 127380956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797439
    },
    {
        "content": "<p>:(</p>",
        "id": 127380957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797443
    },
    {
        "content": "<p>mm let me check</p>",
        "id": 127380973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797489
    },
    {
        "content": "<p>I think that makes the thing</p>",
        "id": 127380978,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797503
    },
    {
        "content": "<p>but I'm getting cannot mutate suggestion</p>",
        "id": 127380984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797511
    },
    {
        "content": "<p>I'm probably passing the wrong stuff</p>",
        "id": 127380987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797517
    },
    {
        "content": "<p>checking</p>",
        "id": 127380989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797519
    },
    {
        "content": "<p>I may have been confused</p>",
        "id": 127381048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797566
    },
    {
        "content": "<p>the Place need to be a projection with base Local</p>",
        "id": 127381069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797611
    },
    {
        "content": "<p>for this error to show up</p>",
        "id": 127381072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797616
    },
    {
        "content": "<p>I'm not sure about that case, seems like the fix it's not just calling a function, I can just build that thing up and call it a day</p>",
        "id": 127381204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527797775
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> here now</p>",
        "id": 127381310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527797985
    },
    {
        "content": "<p>btw did you ever try gdb?</p>",
        "id": 127381364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798009
    },
    {
        "content": "<p>hmm so there is <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1708-L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1708-L1709\">this code already</a></p>",
        "id": 127381372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798049
    },
    {
        "content": "<p>though it doesn't appear to be executing here...?</p>",
        "id": 127381388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798099
    },
    {
        "content": "<p>ah, I see why</p>",
        "id": 127381444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798142
    },
    {
        "content": "<p>are you there <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 127381452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798152
    },
    {
        "content": "<p>sorry read that wrong, yes here</p>",
        "id": 127381481,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798204
    },
    {
        "content": "<p>well I was debating whether to leave revised notes here or in the issue</p>",
        "id": 127381488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798216
    },
    {
        "content": "<p>if you're around we can \"chat live\"</p>",
        "id": 127381492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798221
    },
    {
        "content": "<p>so it seems like we have <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1708-L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1708-L1709\">this code already</a>, which tries to tell you \"which variable is causing the path not to be mutable\"</p>",
        "id": 127381504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798240
    },
    {
        "content": "<p>that code is sort of like a poor version of the suggestion we are trying to add</p>",
        "id": 127381546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798256
    },
    {
        "content": "<p>we can chat live yes</p>",
        "id": 127381550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798259
    },
    {
        "content": "<p>or I can try to take a look at what you're saying</p>",
        "id": 127381570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798300
    },
    {
        "content": "<p>so that code compares the borrowed path against the path which must be mut</p>",
        "id": 127381608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798337
    },
    {
        "content": "<p>and does nothing if they are the same</p>",
        "id": 127381613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798340
    },
    {
        "content": "<p>I'm not .. 100% sure the point of that, but I think what it <em>should do</em></p>",
        "id": 127381617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798350
    },
    {
        "content": "<p>is to check if this is a local, find its declaration, and issue a suggestion</p>",
        "id": 127381665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798371
    },
    {
        "content": "<p>much like what I wrote already</p>",
        "id": 127381667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798374
    },
    {
        "content": "<p>hold on a bit</p>",
        "id": 127381685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798397
    },
    {
        "content": "<p>(to be clear, I think we can delete the code that's there now)</p>",
        "id": 127381726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798448
    },
    {
        "content": "<p>(looking through <code>ui</code> tests, it doesn't seem to add much)</p>",
        "id": 127381730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798456
    },
    {
        "content": "<p>back</p>",
        "id": 127381742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798479
    },
    {
        "content": "<p>example: </p>\n<div class=\"codehilite\"><pre><span></span>error[E0594]: cannot assign to immutable item `x`\n  --&gt; $DIR/issue-45983.rs:17:18\n   |\nLL |     give_any(|y| x = Some(y));\n   |                  ^^^^^^^^^^^ cannot mutate\n   |\n   = note: the value which is causing this path not to be mutable is...: `x`\n</pre></div>",
        "id": 127381779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798484
    },
    {
        "content": "<p>let me read what you've said</p>",
        "id": 127381783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798487
    },
    {
        "content": "<blockquote>\n<p>btw did you ever try gdb?</p>\n</blockquote>\n<p>about gdb couldn't, I mean, I can but it takes ages to compile with <code>debug = true</code></p>",
        "id": 127381811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798537
    },
    {
        "content": "<p>seriously like 30 mins</p>",
        "id": 127381813,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798541
    },
    {
        "content": "<p>k</p>",
        "id": 127381824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798551
    },
    {
        "content": "<p>ok read the stuff</p>",
        "id": 127381915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798632
    },
    {
        "content": "<p>not sure what you want to do</p>",
        "id": 127381918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798638
    },
    {
        "content": "<p>maybe I didn't understand something</p>",
        "id": 127381924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798645
    },
    {
        "content": "<p>do you want the poor version?</p>",
        "id": 127381926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798652
    },
    {
        "content": "<p>I do not</p>",
        "id": 127381927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798655
    },
    {
        "content": "<p>I want to replace it</p>",
        "id": 127381928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798657
    },
    {
        "content": "<p>with this new suggestion</p>",
        "id": 127381929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798660
    },
    {
        "content": "<p>so you meant that the stuff I need is at that place?</p>",
        "id": 127381944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798684
    },
    {
        "content": "<p>I believe so, yes</p>",
        "id": 127381953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798707
    },
    {
        "content": "<p>the <code>place_err</code> variable is I think the \"reason\" for the error</p>",
        "id": 127382007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798756
    },
    {
        "content": "<p>but this thing is not triggering in my example if that's what you mean</p>",
        "id": 127382014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798781
    },
    {
        "content": "<p>that's because of the <code>if place != place_err</code></p>",
        "id": 127382020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798791
    },
    {
        "content": "<p>I mean, I'm not getting this poor version</p>",
        "id": 127382021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798791
    },
    {
        "content": "<p>we would remove that</p>",
        "id": 127382022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798793
    },
    {
        "content": "<p>at least, that's my theory</p>",
        "id": 127382025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798802
    },
    {
        "content": "<p>ahh</p>",
        "id": 127382027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798807
    },
    {
        "content": "<p>I see</p>",
        "id": 127382028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798813
    },
    {
        "content": "<p>ok</p>",
        "id": 127382030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798814
    },
    {
        "content": "<p>let me try to figure out with all this info</p>",
        "id": 127382031,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527798821
    },
    {
        "content": "<p>ok, I'm dumping a few notes in the issue, but maybe I should stop :)</p>",
        "id": 127382101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798958
    },
    {
        "content": "<p>I didn't put too many details :) <a href=\"https://github.com/rust-lang/rust/issues/51031#issuecomment-393671271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031#issuecomment-393671271\">here</a></p>",
        "id": 127382149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527798996
    },
    {
        "content": "<p>yep</p>",
        "id": 127382171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527799049
    },
    {
        "content": "<p>I've done all what you're suggesting</p>",
        "id": 127382174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527799055
    },
    {
        "content": "<p>but was doing in the function we were talking about at the beginning</p>",
        "id": 127382181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527799072
    },
    {
        "content": "<p>I'm trying removing the if to see if this thing shows up</p>",
        "id": 127382225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527799087
    },
    {
        "content": "<p>and then will do all that</p>",
        "id": 127382228,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527799092
    },
    {
        "content": "<p>one thing that is bothering me</p>",
        "id": 127382231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799102
    },
    {
        "content": "<p>there are many arms to this match</p>",
        "id": 127382237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799113
    },
    {
        "content": "<p>eg, the <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1695-L1696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1695-L1696\">one we have been looking at</a></p>",
        "id": 127382247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799127
    },
    {
        "content": "<p>but also <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1717\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1717\">this one</a></p>",
        "id": 127382250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799137
    },
    {
        "content": "<p>these are all reporting errors</p>",
        "id": 127382265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799165
    },
    {
        "content": "<p>but for different causes</p>",
        "id": 127382267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799168
    },
    {
        "content": "<p>e.g., we use different wording for <code>x = 3</code> vs <code>&amp;mut x</code></p>",
        "id": 127382273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799179
    },
    {
        "content": "<p><em>however</em></p>",
        "id": 127382274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799182
    },
    {
        "content": "<p>in all cases we probably want to issue the same kinds of suggestions</p>",
        "id": 127382275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799190
    },
    {
        "content": "<p>I feel like the setup of this method could be changed</p>",
        "id": 127382282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799200
    },
    {
        "content": "<p>right now, each arm fully constructs an error and invokes <code>err.emit()</code></p>",
        "id": 127382333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799216
    },
    {
        "content": "<p>but I think we would rather have something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Reservation</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">construct_err_object</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Reservation</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* some variant of the preivous arm */</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Reservation</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"c1\">// If we get here, then there *is* an error</span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place_err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Place</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// suggest changing to `mut` variable</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// suggest changing to `&amp;mut` borrow (see [link 1])</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\">link 1</a></p>",
        "id": 127382410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527799350
    },
    {
        "content": "<p>ok, will check this as soon as I have this working</p>",
        "id": 127383106,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800095
    },
    {
        "content": "<p>one question</p>",
        "id": 127383110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800098
    },
    {
        "content": "<p>why did you say source_info gives me the span?</p>",
        "id": 127383128,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800117
    },
    {
        "content": "<p>wouldn't it be local.span?</p>",
        "id": 127383133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800121
    },
    {
        "content": "<p>I don't think there is any such field</p>",
        "id": 127383148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800160
    },
    {
        "content": "<p>but <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.SourceInfo.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.SourceInfo.html\">the <code>SourceInfo</code> struct</a> has one</p>",
        "id": 127383190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800172
    },
    {
        "content": "<p>so you're talking about the local_decl</p>",
        "id": 127383239,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800269
    },
    {
        "content": "<p>I was trying to get it from the local</p>",
        "id": 127383280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800283
    },
    {
        "content": "<p>Place::Local(local)</p>",
        "id": 127383288,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800289
    },
    {
        "content": "<p>that local inside has a span</p>",
        "id": 127383292,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800293
    },
    {
        "content": "<p>now I'm confused about what's each thing</p>",
        "id": 127383295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800308
    },
    {
        "content": "<p>the <code>Local</code> is just an index</p>",
        "id": 127383306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800328
    },
    {
        "content": "<p>you can think of it as the name of the local variable</p>",
        "id": 127383310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800337
    },
    {
        "content": "<p>the <code>LocalDecl</code> tells you information about its declaration</p>",
        "id": 127383317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800344
    },
    {
        "content": "<p>so when I navigate to the Local definition I'm probably seeing something that's unrelated</p>",
        "id": 127383325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800375
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  # pri kind tag               file\n  1 F   s    Local             src/librustc/hir/mod.rs\n               pub struct Local {\n  2 F   s    Local             src/libsyntax/ast.rs\n               pub struct Local {\n</pre></div>",
        "id": 127383330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800394
    },
    {
        "content": "<p>those things are unrelated</p>",
        "id": 127383397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800430
    },
    {
        "content": "<p>that is because <code>Local</code> is an index created by the <code>newtype_index</code> macro</p>",
        "id": 127383401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800440
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html</a></p>",
        "id": 127383404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800450
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/50337\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50337\">https://github.com/rust-lang/rust/issues/50337</a> :)</p>",
        "id": 127383414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800473
    },
    {
        "content": "<p>yes that's in my todo list</p>",
        "id": 127383503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800608
    },
    {
        "content": "<p>but yeah, I remember it comes from there</p>",
        "id": 127383508,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527800625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in a local_decl, I see that name is an Option</p>",
        "id": 127385398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803362
    },
    {
        "content": "<p>but if the declaration is_user_variable it should have a name, right?</p>",
        "id": 127385410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803402
    },
    {
        "content": "<p>so it's safe to unwrap?</p>",
        "id": 127385453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803408
    },
    {
        "content": "<p>I think that is true :)</p>",
        "id": 127385456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527803417
    },
    {
        "content": "<p>when can map_or anyway if you prefer</p>",
        "id": 127385460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803453
    },
    {
        "content": "<p>I think the thing is working</p>",
        "id": 127385468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803484
    },
    {
        "content": "<p>will check, compile times are giving me a hard time</p>",
        "id": 127385472,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803516
    },
    {
        "content": "<p>it does seem like a lot of stuff here might just be finding fixes to small bugs in <code>fn check_access_permissions</code></p>",
        "id": 127385729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527803908
    },
    {
        "content": "<p>I've been personally musing about whether it actually makes sense to be doing these checks (which seem <em>very</em> AST oriented to me) on the MIR... is there any chance this would be better off as a pass over the HAIR?</p>",
        "id": 127385750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527803949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (suggest-use-mut-in-nll)]$ rustc +stage1 src/test/ui/codemap_tests/huge_multispan_highlight.rs\nwarning: unused variable: `y`\n   --&gt; src/test/ui/codemap_tests/huge_multispan_highlight.rs:100:9\n    |\n100 |     let y = &amp;mut x; //~ ERROR cannot borrow\n    |         ^ help: consider using `_y` instead\n    |\n    = note: #[warn(unused_variables)] on by default\n\nerror[E0596]: cannot borrow immutable local variable `x` as mutable\n   --&gt; src/test/ui/codemap_tests/huge_multispan_highlight.rs:100:18\n    |\n12  |     let x = &quot;foo&quot;;\n    |         - consider changing this to `mut x`\n...\n100 |     let y = &amp;mut x; //~ ERROR cannot borrow\n    |                  ^ cannot borrow mutably\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0596`.\n</pre></div>",
        "id": 127385752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527803953
    },
    {
        "content": "<p>ah excellent</p>",
        "id": 127385768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527803991
    },
    {
        "content": "<p>running tests</p>",
        "id": 127385832,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804039
    },
    {
        "content": "<p>and will push a PR</p>",
        "id": 127385834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804047
    },
    {
        "content": "<p>I was expecting to see something failing but unsure if there's some of this cases being run in nll mode</p>",
        "id": 127385990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> remember me, how was to make src/test/ui/codemap_tests/huge_multispan_highlight.rs run in both modes</p>",
        "id": 127385997,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804338
    },
    {
        "content": "<p>everything in <code>ui/</code> should be getting tested under NLL, when x.py runs the tests that say \"ui (nll)\" at the beginning</p>",
        "id": 127386064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527804396
    },
    {
        "content": "<p>ahh ok ok</p>",
        "id": 127386067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804409
    },
    {
        "content": "<p>is happening now</p>",
        "id": 127386068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804411
    },
    {
        "content": "<p>but you'll only see the \"ui (nll)\" stuf if you get through all the \"ui\" ones</p>",
        "id": 127386071,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527804422
    },
    {
        "content": "<p>thing is still running</p>",
        "id": 127386074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804424
    },
    {
        "content": "<p>yeah, now is running nll</p>",
        "id": 127386077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804430
    },
    {
        "content": "<p>(and <em>some</em> of the \"ui/\" tests do test nll)</p>",
        "id": 127386079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527804432
    },
    {
        "content": "<p>((via <code>#![feature(nll)]</code> or <code>// compile-flags: -Z borrowck=mir</code>))</p>",
        "id": 127386088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527804456
    },
    {
        "content": "<p>hmm seems like there's something wrong</p>",
        "id": 127386218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804643
    },
    {
        "content": "<p>anyway, I'm going to open a PR to start discussing there</p>",
        "id": 127386221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/51260\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51260\">https://github.com/rust-lang/rust/pull/51260</a></p>",
        "id": 127386309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804768
    },
    {
        "content": "<p>first ... it's suggesting this <a href=\"https://github.com/rust-lang/rust/pull/51260/files#diff-578a4b3f2943cb22662f35f6a89da7c5R22\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51260/files#diff-578a4b3f2943cb22662f35f6a89da7c5R22\">https://github.com/rust-lang/rust/pull/51260/files#diff-578a4b3f2943cb22662f35f6a89da7c5R22</a> two times</p>",
        "id": 127386335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804828
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/pull/51260/files#diff-d19757776de8707f9d197b79b47bd13cR4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51260/files#diff-d19757776de8707f9d197b79b47bd13cR4\">https://github.com/rust-lang/rust/pull/51260/files#diff-d19757776de8707f9d197b79b47bd13cR4</a> seems to be wrong</p>",
        "id": 127386378,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804847
    },
    {
        "content": "<p>same here <a href=\"https://github.com/rust-lang/rust/pull/51260/files#diff-1d29243a06fb339b8c5db5217d279a3aR4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51260/files#diff-1d29243a06fb339b8c5db5217d279a3aR4\">https://github.com/rust-lang/rust/pull/51260/files#diff-1d29243a06fb339b8c5db5217d279a3aR4</a></p>",
        "id": 127386384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804863
    },
    {
        "content": "<p>need to check it out, tomorrow will take a look at it</p>",
        "id": 127386403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527804936
    },
    {
        "content": "<p>yeah both those things seem wrong</p>",
        "id": 127386406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527804951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> In the first one, the \"second error\" is in the source?</p>",
        "id": 127386466,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527805004
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> In the first one, the \"second error\" is in the source?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> you're right so it's correct</p>",
        "id": 127398012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527825691
    },
    {
        "content": "<p>I need to check all this</p>",
        "id": 127398013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527825696
    },
    {
        "content": "<p>was in a rush and did everything quickly</p>",
        "id": 127398014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527825708
    },
    {
        "content": "<p>tomorrow will take a look at it</p>",
        "id": 127398015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527825713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that PR includes various changes to the stderr files — are those the complete set of effects? (also, you know about <code>--bless</code>, right?)</p>",
        "id": 127406268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527842232
    },
    {
        "content": "<p>it looks like an awesome start!</p>",
        "id": 127406271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527842250
    },
    {
        "content": "<p>left some comments anyway</p>",
        "id": 127406638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527843005
    },
    {
        "content": "<p>hey niko, I've been wondering (and I may have said this on a github issue comment somewhere...): Might it make more sense to do these access checks on something closer to the AST, like the HAIR? Right now the suggestion code is going through machinations to try to reconstruct spans of initializing expressions based on searches over the assignment statements.</p>",
        "id": 127408252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527845893
    },
    {
        "content": "<p>But access checks do not need regions nor control-flow graph info.</p>",
        "id": 127408255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527845908
    },
    {
        "content": "<p>They are really shallow inspections of the types, right?</p>",
        "id": 127408263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527845922
    },
    {
        "content": "<p>(maybe I'm overlooking some that do need that more MIR-oriented info...)</p>",
        "id": 127408268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527845942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 127408275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527845960
    },
    {
        "content": "<p>plausibly</p>",
        "id": 127408325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846026
    },
    {
        "content": "<p>we have no such IR at this point</p>",
        "id": 127408326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846030
    },
    {
        "content": "<p>so we'd have to split up the borrow-ck</p>",
        "id": 127408329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846042
    },
    {
        "content": "<p>and/or maybe do these things at typeck time</p>",
        "id": 127408331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846046
    },
    {
        "content": "<p>(which might be fine)</p>",
        "id": 127408335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846057
    },
    {
        "content": "<p>I'd be ok with borrowck getting to live in a world where all variables can be assumed to be mut</p>",
        "id": 127408340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846066
    },
    {
        "content": "<p>oh, I remember why we don't do that</p>",
        "id": 127408345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846085
    },
    {
        "content": "<p>well</p>",
        "id": 127408349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846100
    },
    {
        "content": "<p>it's because of the flow sensitivity for <code>let x</code></p>",
        "id": 127408352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846109
    },
    {
        "content": "<p>we need to ensure <code>let x;</code> is initialized once and only once</p>",
        "id": 127408353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846110
    },
    {
        "content": "<p>Right. So <em>that</em> is a control-flow graph thing</p>",
        "id": 127408355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846122
    },
    {
        "content": "<p>I guess \"how bad is it\" is a question :)</p>",
        "id": 127408395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846142
    },
    {
        "content": "<p>like, finding assignments seems... not so hard</p>",
        "id": 127408397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846148
    },
    {
        "content": "<p>Anyway either way the current code for<code>fn check_access_permissions</code> is a real mess</p>",
        "id": 127408407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846171
    },
    {
        "content": "<p>otoh if borrowck could just assume all locals are mutable for purposes of borrowing — even if it is also checked assignments for no doubl assignment — that might be really nice</p>",
        "id": 127408416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846180
    },
    {
        "content": "<p>I hate that \"treat-local-as-mutable\" flag</p>",
        "id": 127408420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846185
    },
    {
        "content": "<p>I'm experimenting with trying to simplify it, in much the way that you proposed in some comment</p>",
        "id": 127408421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846186
    },
    {
        "content": "<p>yeah, it is</p>",
        "id": 127408426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846198
    },
    {
        "content": "<p>luckily some of the ugliness in the code is easy to undo</p>",
        "id": 127408430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846210
    },
    {
        "content": "<p>e.g. there were some refactorings that were ... poorly chosen.</p>",
        "id": 127408433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846221
    },
    {
        "content": "<p>I think borrowck has accumulated some amount of technical debt</p>",
        "id": 127408436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846240
    },
    {
        "content": "<p>sort of amazing for code so young :)</p>",
        "id": 127408473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846244
    },
    {
        "content": "<p>and some pyramid of doom stuff that is also easy to fix</p>",
        "id": 127408476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846247
    },
    {
        "content": "<p>but it needs to be smoothed over...</p>",
        "id": 127408479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846251
    },
    {
        "content": "<p>Well we had a <em>lot</em> of enthusiastic volunteers</p>",
        "id": 127408480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846259
    },
    {
        "content": "<p>during the 2017 impl period</p>",
        "id": 127408482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846267
    },
    {
        "content": "<p>and I think the scattered style in the code reflects that mix of volunteers</p>",
        "id": 127408484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846288
    },
    {
        "content": "<p>right, I imagine that part of it is just a byproduct of many people hacking</p>",
        "id": 127408485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846292
    },
    {
        "content": "<p>So here's an example of something that I would like to fix and am not sure how best to do so</p>",
        "id": 127408540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846369
    },
    {
        "content": "<p>(this is output from a local branch of the code)</p>",
        "id": 127408543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846399
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>6 |     fn f(&amp;self) {\n  |          ----- help: consider changing this to be a mutable reference: `&amp;mut Foo&lt;&#39;_&gt;`\n</pre></div>",
        "id": 127408546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846410
    },
    {
        "content": "<p>you can see (if you scroll or if you window is large enough), that my attempt to fix rust-lang/rust#51032 is currently suggesting <code>&amp;mut Foo&lt;'_&gt;</code> as the code to write when its highlighting <code>&amp;self</code></p>",
        "id": 127408561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846475
    },
    {
        "content": "<p>fwiw, this is also a problem in typeck</p>",
        "id": 127408605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846502
    },
    {
        "content": "<p>Does the MIR LocalDecl  actually carry the info I would need to distinguish this,</p>",
        "id": 127408607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846514
    },
    {
        "content": "<p>we often exclude <code>self</code> from suggestions because we've not got a nice helper for handling it</p>",
        "id": 127408608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846514
    },
    {
        "content": "<p>or do I add such info</p>",
        "id": 127408612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846524
    },
    {
        "content": "<p>or do we try to put these checks on the HAIR instead</p>",
        "id": 127408615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846533
    },
    {
        "content": "<blockquote>\n<p>fwiw, this is also a problem in typeck</p>\n</blockquote>\n<p>that is interesting. (I assume here you mean mir-typeck)</p>",
        "id": 127408626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846555
    },
    {
        "content": "<p>no</p>",
        "id": 127408628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846560
    },
    {
        "content": "<p>I mean AST type check</p>",
        "id": 127408629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846563
    },
    {
        "content": "<p>Really?</p>",
        "id": 127408631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846567
    },
    {
        "content": "<p>So the cases where I see it suggested, its because some coder has put in heroics?</p>",
        "id": 127408635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846590
    },
    {
        "content": "<p>presumably</p>",
        "id": 127408636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846600
    },
    {
        "content": "<p>hmm</p>",
        "id": 127408676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846604
    },
    {
        "content": "<p>Another option here of course</p>",
        "id": 127408684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846611
    },
    {
        "content": "<p>it seems like we can add some info the MIR here</p>",
        "id": 127408686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846615
    },
    {
        "content": "<p>would be for me to actually convert the span to a snippet and then inspect that snippet</p>",
        "id": 127408687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846621
    },
    {
        "content": "<p>but I really don't like that</p>",
        "id": 127408692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846634
    },
    {
        "content": "<p>yeah, that seems unfortuante</p>",
        "id": 127408694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846649
    },
    {
        "content": "<p>I guess I think that <code>LocalDecl</code> could well carry more info than just \"is-user-variable\"</p>",
        "id": 127408697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846659
    },
    {
        "content": "<p>e.g., that might be an enum that tells you if this is <code>self</code></p>",
        "id": 127408704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846670
    },
    {
        "content": "<p>or some pattern binding</p>",
        "id": 127408706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846676
    },
    {
        "content": "<blockquote>\n<p>would be for me to actually convert the span to a snippet and then inspect that snippet</p>\n</blockquote>\n<p>its especially bad because it leads to things like this: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1753\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1753</a></p>",
        "id": 127408707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846677
    },
    {
        "content": "<p>Okay I think I'm going to look into extending <code>LocalDecl</code>. That at least sounds like the most direct solution to the family of problems I am encountering here.</p>",
        "id": 127408713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846712
    },
    {
        "content": "<p>that said, I don't disagree that some suggestions are easier to make on the expression tree, that must be true :/</p>",
        "id": 127408757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846733
    },
    {
        "content": "<p>but it would be a significant refactoring to move analysis to the HAIR</p>",
        "id": 127408762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846755
    },
    {
        "content": "<p>I'd be more in favor of moving checks to the initial typeck</p>",
        "id": 127408768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846770
    },
    {
        "content": "<p>though I am also wary</p>",
        "id": 127408770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846776
    },
    {
        "content": "<p>particularly because it's not always obvious</p>",
        "id": 127408777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846788
    },
    {
        "content": "<p>e.g., <code>let x = &amp;mut foo.bar.baz</code></p>",
        "id": 127408779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846794
    },
    {
        "content": "<p>even if you have <code>let mut foo</code>, if <code>bar</code> implements <code>Deref</code> but not <code>DerefMut</code>, this is an error</p>",
        "id": 127408780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846810
    },
    {
        "content": "<p>indeed dodging all these horrible things is part of the point of MIR :)</p>",
        "id": 127408794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846828
    },
    {
        "content": "<p>I forget just how explicit that stuff is in HAIR</p>",
        "id": 127408834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846862
    },
    {
        "content": "<p>much more so than HIR</p>",
        "id": 127408837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846871
    },
    {
        "content": "<p>I don't know, I think it's an interesting idea we should think about</p>",
        "id": 127408840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846895
    },
    {
        "content": "<p>but also sounds like a big distraction</p>",
        "id": 127408849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527846913
    },
    {
        "content": "<p>true</p>",
        "id": 127408851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846917
    },
    {
        "content": "<p>Probably too much work to try to do in short term</p>",
        "id": 127408852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846925
    },
    {
        "content": "<p>better to perhaps release something based entirely on MIR</p>",
        "id": 127408854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846935
    },
    {
        "content": "<p>in short term</p>",
        "id": 127408855,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846937
    },
    {
        "content": "<p>with some missing diagnostics or subpar ones</p>",
        "id": 127408859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846949
    },
    {
        "content": "<p>and investigate doing it atop HAIR later</p>",
        "id": 127408863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527846961
    },
    {
        "content": "<p>yeah; I'd like to make HAIR more of a \"first-class\" IR</p>",
        "id": 127408928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527847061
    },
    {
        "content": "<p>in particular</p>",
        "id": 127408931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527847066
    },
    {
        "content": "<p>I also think we should do the \"effect check\" on HAIR</p>",
        "id": 127408933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527847071
    },
    {
        "content": "<p>the unsafe check, that is</p>",
        "id": 127408935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527847076
    },
    {
        "content": "<p>gotta go but my hope is to focus on NLL today</p>",
        "id": 127408977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527847107
    },
    {
        "content": "<p>I'd be more than happy to help with refactoring if you decide so at some point</p>",
        "id": 127417108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527861207
    },
    {
        "content": "<p>I think this kind of tasks are a very nice way to learn projects in general and the compiler in this case in particular</p>",
        "id": 127417112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527861227
    },
    {
        "content": "<p>the problem is I think not knowing <em>exactly</em> what to do yet</p>",
        "id": 127420030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527864852
    },
    {
        "content": "<p>I'm hoping to have something to share soon</p>",
        "id": 127420037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527864884
    },
    {
        "content": "<p>its almost certainly going to stomp all over the PR that you put up, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 127420046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527864902
    },
    {
        "content": "<p>but its good that you put up that PR</p>",
        "id": 127420053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527864911
    },
    {
        "content": "<p>because it makes me confident that you can give me some solid feedback on this branch. :)</p>",
        "id": 127420060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527864934
    },
    {
        "content": "<p>(but my branch is much broader; its trying to resolve a <em>lot</em> of the issues we have with suggestions that arise from <code>fn check_access_permissions</code>)</p>",
        "id": 127420117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527864982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> cool :)</p>",
        "id": 127421157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527866185
    },
    {
        "content": "<p>still couldn't get into this thing</p>",
        "id": 127421165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527866203
    },
    {
        "content": "<p>will do in ~30mins</p>",
        "id": 127421171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527866217
    },
    {
        "content": "<p>Okay so here's the start of my big revision to <code>fn check_access_permissions</code> (which necessitated changes more broadly): <a href=\"https://github.com/rust-lang/rust/pull/51275\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51275\">https://github.com/rust-lang/rust/pull/51275</a></p>",
        "id": 127422081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867331
    },
    {
        "content": "<p>I have to go home now</p>",
        "id": 127422128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867367
    },
    {
        "content": "<p>but you can tell from that how many things I'm looking at touching</p>",
        "id": 127422132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867382
    },
    {
        "content": "<p>(also ... in one case the error code emitted by the NLL error changed, which surprised me...)</p>",
        "id": 127422160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867442
    },
    {
        "content": "<p>(maybe more than one case, not sure yet...)</p>",
        "id": 127422163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867454
    },
    {
        "content": "<p>Hopefully I'll have a chance this weekend to follow up on that PR</p>",
        "id": 127422170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867468
    },
    {
        "content": "<p>((oh and in some cases the suggestion to use <code>&amp;mut</code> needs to be silenced. that should be readily doable with the changes I made to <code>mir::LocalDecl</code> in that PR...))</p>",
        "id": 127422233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527867536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> making the changes now</p>",
        "id": 127424093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527870005
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51260#discussion_r192332562\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51260#discussion_r192332562\">https://github.com/rust-lang/rust/pull/51260#discussion_r192332562</a></p>",
        "id": 127424097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527870006
    },
    {
        "content": "<p>link 1 is not a link</p>",
        "id": 127424104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527870010
    },
    {
        "content": "<p>what the</p>",
        "id": 127426510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873145
    },
    {
        "content": "<p>should be <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728</a></p>",
        "id": 127426536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873181
    },
    {
        "content": "<p>not sure what's up w/ github and links</p>",
        "id": 127426934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873620
    },
    {
        "content": "<p>that said, we should compare against what pnkfelix did</p>",
        "id": 127426938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873625
    },
    {
        "content": "<p>I was going to mention a couple of things</p>",
        "id": 127426955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873656
    },
    {
        "content": "<p>first</p>",
        "id": 127426956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873657
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1789-L1798\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1789-L1798\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1789-L1798</a></p>",
        "id": 127426967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873675
    },
    {
        "content": "<p>err.emit() not being called there</p>",
        "id": 127426971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873681
    },
    {
        "content": "<p>unsure why</p>",
        "id": 127426973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873684
    },
    {
        "content": "<p>and if I move emit() outside it will be called when it wasn't in that case</p>",
        "id": 127426981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873701
    },
    {
        "content": "<p>second</p>",
        "id": 127426982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873705
    },
    {
        "content": "<p>match would need to return a pair</p>",
        "id": 127426985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873716
    },
    {
        "content": "<p>(err, place_err)</p>",
        "id": 127427029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I don't think that <code>delay_span_bug</code> needs to be emitted; in cases like that, I would expect to just return early and not fall through to the latter code.</p>",
        "id": 127427164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873934
    },
    {
        "content": "<p>ok</p>",
        "id": 127427224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527873975
    },
    {
        "content": "<blockquote>\n<p>match would need to return a pair</p>\n</blockquote>\n<p>sure, ok</p>",
        "id": 127427242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527873999
    },
    {
        "content": "<p>seems fine...</p>",
        "id": 127427249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874010
    },
    {
        "content": "<p>but that case doesn't need the Local and Projection checks we will be doing outside?</p>",
        "id": 127427266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874036
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>            Reservation(WriteKind::Move)\n            | Write(WriteKind::Move)\n            | Reservation(WriteKind::StorageDeadOrDrop)\n            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shared))\n            | Write(WriteKind::StorageDeadOrDrop)\n            | Write(WriteKind::MutableBorrow(BorrowKind::Shared)) =&gt; {\n                if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                    self.tcx.sess.delay_span_bug(\n                        span,\n                        &amp;format!(\n                            &quot;Accessing `{:?}` with the kind `{:?}` shouldn&#39;t be possible&quot;,\n                            place, kind\n                        ),\n                    );\n                }\n\n                return;\n            }\n</pre></div>",
        "id": 127427280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874076
    },
    {
        "content": "<p>so the match place_err won't execute</p>",
        "id": 127427319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874085
    },
    {
        "content": "<p>well, <code>delay_span_bug</code> basically says: if this happens, abort compilation</p>",
        "id": 127427457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874286
    },
    {
        "content": "<p>in doesn't abort <em>immediately</em></p>",
        "id": 127427460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874292
    },
    {
        "content": "<p>it aborts only if no type errors occur</p>",
        "id": 127427463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874296
    },
    {
        "content": "<p>it means that this condition should not happen,</p>",
        "id": 127427467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874307
    },
    {
        "content": "<p>but might happen if the user's code doesn't type check</p>",
        "id": 127427470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874313
    },
    {
        "content": "<p>so in general we should not report further errors in that case anyway</p>",
        "id": 127427508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874322
    },
    {
        "content": "<p>ok</p>",
        "id": 127427778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874651
    },
    {
        "content": "<p>interesting, this is dead code <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1733-L1735\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1733-L1735\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1733-L1735</a></p>",
        "id": 127427839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874687
    },
    {
        "content": "<p>yes, yes it is :)</p>",
        "id": 127428003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874848
    },
    {
        "content": "<p>not sure if it <em>should be</em></p>",
        "id": 127428008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874857
    },
    {
        "content": "<p>I don't really get what that <code>if</code> is trying to do</p>",
        "id": 127428032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527874902
    },
    {
        "content": "<p>what does blame says?</p>",
        "id": 127428092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527874959
    },
    {
        "content": "<p>added here <a href=\"https://github.com/rust-lang/rust/commit/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc\">https://github.com/rust-lang/rust/commit/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc</a></p>",
        "id": 127428281,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875173
    },
    {
        "content": "<p>it was before</p>",
        "id": 127428341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875250
    },
    {
        "content": "<p>looking</p>",
        "id": 127428343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> have you looked at <a href=\"https://github.com/rust-lang/rust/pull/51275\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51275\">@**pnkfelix**'s PR</a>? It definitely changes all this code</p>",
        "id": 127428399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875285
    },
    {
        "content": "<p>I think it incorporates some of your work</p>",
        "id": 127428405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875289
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/7d590b533ea93ef916cc82498506a373db1843b6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/7d590b533ea93ef916cc82498506a373db1843b6\">https://github.com/rust-lang/rust/commit/7d590b533ea93ef916cc82498506a373db1843b6</a></p>",
        "id": 127428436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no</p>",
        "id": 127428441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875341
    },
    {
        "content": "<p>I was compiling this thing</p>",
        "id": 127428456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875354
    },
    {
        "content": "<p>changing stuff</p>",
        "id": 127428463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875359
    },
    {
        "content": "<p>so ... should I place my work on top of Felix?</p>",
        "id": 127428468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875367
    },
    {
        "content": "<p>or should I land this?</p>",
        "id": 127428476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875373
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 127428537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875406
    },
    {
        "content": "<p>too bad <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is not around</p>",
        "id": 127428544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875409
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51275/files#diff-5b4d01d26caf43976125ba0f877e78c0R1808\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51275/files#diff-5b4d01d26caf43976125ba0f877e78c0R1808\">this part I think is from your PR</a></p>",
        "id": 127428572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875442
    },
    {
        "content": "<p>I guess I can fix this stuff and provide the PR so we can merge</p>",
        "id": 127428594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875467
    },
    {
        "content": "<p>and then work on top of Felix's or I can redo my stuff</p>",
        "id": 127428607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875481
    },
    {
        "content": "<p>whatever :)</p>",
        "id": 127428609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875482
    },
    {
        "content": "<p>so ... when you were poiting to this <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728\">https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1723-L1728</a></p>",
        "id": 127428621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875498
    },
    {
        "content": "<p>were you referring to move that outside of this match?</p>",
        "id": 127428629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875508
    },
    {
        "content": "<p>or to reuse the match condition?</p>",
        "id": 127428632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875515
    },
    {
        "content": "<p>I was reusing the condition</p>",
        "id": 127428676,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875526
    },
    {
        "content": "<p>but I may have understood wrong</p>",
        "id": 127428683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875530
    },
    {
        "content": "<blockquote>\n<p>were you referring to move that outside of this match?</p>\n</blockquote>\n<p>I think this is what I meant</p>",
        "id": 127428709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875582
    },
    {
        "content": "<p>basically, that code is conflating two things</p>",
        "id": 127428717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875590
    },
    {
        "content": "<p>pnkfelix's PR kind of pulls them apart</p>",
        "id": 127428719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875594
    },
    {
        "content": "<p>the first is the \"main\" error msg</p>",
        "id": 127428720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875599
    },
    {
        "content": "<p>the second is the suggestions for fixing it</p>",
        "id": 127428722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875603
    },
    {
        "content": "<p>we want to use distinct main error messages in different cases</p>",
        "id": 127428726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875609
    },
    {
        "content": "<p>but the suggestions apply to all cases</p>",
        "id": 127428728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875614
    },
    {
        "content": "<p>right now, the code is applying those suggestions (e.g., make this variable <code>mut</code>) only in particular cases though</p>",
        "id": 127428738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875629
    },
    {
        "content": "<p>my feeling <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is that your current PR is subsumed by what <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> was doing;</p>",
        "id": 127428803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875689
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s PR still could use some add'l cases</p>",
        "id": 127428807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875697
    },
    {
        "content": "<p>not sure whether it makes sense to wait or what</p>",
        "id": 127428811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875703
    },
    {
        "content": "<p>(e.g., I don't think that their PR handles upvars)</p>",
        "id": 127428823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875727
    },
    {
        "content": "<p>unsure</p>",
        "id": 127428826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875733
    },
    {
        "content": "<p>I can wait for him to finish the stuff and then try to continue with this</p>",
        "id": 127428829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875750
    },
    {
        "content": "<p>I'm fine with both things :)</p>",
        "id": 127428831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875756
    },
    {
        "content": "<p>but yeah current code it's confusing</p>",
        "id": 127428924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875874
    },
    {
        "content": "<p>hmm</p>",
        "id": 127428966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875888
    },
    {
        "content": "<p>maybe we should look for a bug in a related area?</p>",
        "id": 127428971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875896
    },
    {
        "content": "<p>that is, now that you're getting familiar with those data structures</p>",
        "id": 127428976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875906
    },
    {
        "content": "<p>prob doesn't make sense for you to extend their PR</p>",
        "id": 127428989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875928
    },
    {
        "content": "<p>especially as <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> may have uncommited edits or something</p>",
        "id": 127429002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875947
    },
    {
        "content": "<p>yep</p>",
        "id": 127429003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527875948
    },
    {
        "content": "<p>maybe this one? <a href=\"https://github.com/rust-lang/rust/issues/51217\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51217\">https://github.com/rust-lang/rust/issues/51217</a></p>",
        "id": 127429013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875964
    },
    {
        "content": "<p>I don't think that is caused by this same fn</p>",
        "id": 127429019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875970
    },
    {
        "content": "<p>when <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> finish the stuff we can check if he added all what I have, if he didn't I add this and done :)</p>",
        "id": 127429069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527876004
    },
    {
        "content": "<p>it comes from <a href=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1395\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61f35e507a56dcdce88bfce99bb2d1eeacb0e9d1/src/librustc_mir/borrow_check/mod.rs#L1395\">this call to <code>report_illegal_reassignment</code> right here</a></p>",
        "id": 127429103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876033
    },
    {
        "content": "<p>hmm</p>",
        "id": 127429128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876069
    },
    {
        "content": "<p>oh, I see that <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> assigned themselves on that one</p>",
        "id": 127429143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876093
    },
    {
        "content": "<p>maybe this one? <a href=\"https://github.com/rust-lang/rust/issues/51195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51195\">https://github.com/rust-lang/rust/issues/51195</a></p>",
        "id": 127429201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876142
    },
    {
        "content": "<p>I've not looked precisely at the conditions in which that msg is emitted</p>",
        "id": 127429224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876194
    },
    {
        "content": "<p>ok</p>",
        "id": 127429290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527876289
    },
    {
        "content": "<p>won't have that much time today</p>",
        "id": 127429293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527876294
    },
    {
        "content": "<p>but will have it as the next thing to do</p>",
        "id": 127429297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527876301
    },
    {
        "content": "<p>ok; first thing to do would be to look at the old borrow checker</p>",
        "id": 127429317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876344
    },
    {
        "content": "<p>and see where that msg is emitted and under which conditions</p>",
        "id": 127429321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876352
    },
    {
        "content": "<p>then we can think about the equivalent in MIR land</p>",
        "id": 127429363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527876369
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127430478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527877770
    },
    {
        "content": "<p>I've force pushed to my branch in case there's something useful there</p>",
        "id": 127430556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527877824
    },
    {
        "content": "<p>I'm talking about the other PR</p>",
        "id": 127430569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527877850
    },
    {
        "content": "<p>if <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> covers everything there great :)</p>",
        "id": 127430586,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527877869
    },
    {
        "content": "<p>Re 51217, I thought it would be fixed with some of the MIR generation changes that I made for better move permissions errors, but they ended up having undesirable consequences. I'll try to write up where I got to on that issue this weekend.</p>",
        "id": 127430589,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527877871
    },
    {
        "content": "<p>otherwise I can take another look at the thing</p>",
        "id": 127430600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527877886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/46020\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46020\">https://github.com/rust-lang/rust/issues/46020</a> I guess the report about this issue is duplicated with <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a>, maybe I guess would be nice to relate them?</p>",
        "id": 127465009,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527944076
    },
    {
        "content": "<p>(By the way, I would <em>love</em> for anyone to take a stab at figuring out a way to attack <a href=\"https://github.com/rust-lang/rust/issues/51167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51167\">rust-lang/rust#51167</a> ... I guess I could try to throw on some mentoring instructions, but producing good ones might require just as much work as finding the actual implementation of a solution...)</p>",
        "id": 127543111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528116389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> should I still tackle this <a href=\"https://github.com/rust-lang/rust/issues/51195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51195\">https://github.com/rust-lang/rust/issues/51195</a> ?</p>",
        "id": 127556380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528133798
    },
    {
        "content": "<p>Niko told me about it on friday, couldn't do anything yet</p>",
        "id": 127556391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528133813
    },
    {
        "content": "<p>and I'm about to start to work on something ...</p>",
        "id": 127556408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528133829
    },
    {
        "content": "<p>I'll wait for thoughts</p>",
        "id": 127556410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528133842
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 127559774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138122
    },
    {
        "content": "<p>that does sound like it would be useful to investigate</p>",
        "id": 127559776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138133
    },
    {
        "content": "<p>I forget what you were doing before, I know we had some issue?</p>",
        "id": 127559780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138142
    },
    {
        "content": "<p>was it that one?</p>",
        "id": 127559783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138145
    },
    {
        "content": "<p>no</p>",
        "id": 127559796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528138178
    },
    {
        "content": "<p>I was with <a href=\"https://github.com/rust-lang/rust/issues/51031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51031\">https://github.com/rust-lang/rust/issues/51031</a></p>",
        "id": 127559850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528138211
    },
    {
        "content": "<p>the code <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> was writing it supposed to deal with that, so we closed the PR</p>",
        "id": 127559863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528138239
    },
    {
        "content": "<p>btw <a href=\"https://github.com/rust-lang/rust/issues/46020\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46020\">https://github.com/rust-lang/rust/issues/46020</a> seems like a dup</p>",
        "id": 127559867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528138250
    },
    {
        "content": "<p>true</p>",
        "id": 127560200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138685
    },
    {
        "content": "<p>ok so</p>",
        "id": 127560204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138691
    },
    {
        "content": "<p>regarding  <a href=\"https://github.com/rust-lang/rust/issues/51195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51195\">https://github.com/rust-lang/rust/issues/51195</a></p>",
        "id": 127560212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138725
    },
    {
        "content": "<p>I guess the thing to do is to run it and dump the MIR output and also kind of get a backtrace — that is, where is the error coming from within the <code>borrow_check/mod.rs</code> execution</p>",
        "id": 127560228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138755
    },
    {
        "content": "<p>I guess most likely it comes when we are checking the <code>StorageDead</code>, but I'm not entirely sure</p>",
        "id": 127560323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528138853
    },
    {
        "content": "<p>ok</p>",
        "id": 127560916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528139591
    },
    {
        "content": "<p>thanks</p>",
        "id": 127560919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528139595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry I missed your earlier question; but yes, I do believe rust-lang/rust#51195 is worth investigating, and I do not think such investigation will overlap with big rewrite of <code>fn check_access_permissions</code>.</p>",
        "id": 127567761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528148209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> cool, will do tomorrow</p>",
        "id": 127567782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528148259
    },
    {
        "content": "<p>if a given diagnostic under NLL gets to the point where it is providing the same info as AST-borrowck, and the only difference is in how the wording is phrased in the diagnostic...</p>",
        "id": 127595822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528199727
    },
    {
        "content": "<p>... should we perhaps just change the wording to match AST-borrowck (even if it is \"inferior\" in some sense), just to ease comparison between the two as we continue on this task?</p>",
        "id": 127595867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528199767
    },
    {
        "content": "<p>example?</p>",
        "id": 127597001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201569
    },
    {
        "content": "<blockquote>\n<p>example?</p>\n</blockquote>\n<p>let me see, I think the latest version of my <code>check_access_permissions</code> PR should have at least one test that illustrates this</p>",
        "id": 127597136,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528201761
    },
    {
        "content": "<p>okay so consider: <a href=\"https://github.com/pnkfelix/rust/blob/f0570baddc57f10400cfa017986476e14548dfac/src/test/ui/did_you_mean/issue-38147-1.nll.stderr\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/blob/f0570baddc57f10400cfa017986476e14548dfac/src/test/ui/did_you_mean/issue-38147-1.nll.stderr\">https://github.com/pnkfelix/rust/blob/f0570baddc57f10400cfa017986476e14548dfac/src/test/ui/did_you_mean/issue-38147-1.nll.stderr</a></p>",
        "id": 127597398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202113
    },
    {
        "content": "<p>here's the diff of that nll.stderr file against the AST-borrowck stderr: <a href=\"https://gist.github.com/pnkfelix/c766479dea9706660f8f5dba22dacabd\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/c766479dea9706660f8f5dba22dacabd\">https://gist.github.com/pnkfelix/c766479dea9706660f8f5dba22dacabd</a></p>",
        "id": 127597403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202132
    },
    {
        "content": "<p>If you ask me, saying \"cannot borrow as mutable\" for <code>self.s.push('x')</code> is \"better\" than saying \"assignment into an immutable reference\"</p>",
        "id": 127597451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202174
    },
    {
        "content": "<p>agreed</p>",
        "id": 127597458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202188
    },
    {
        "content": "<p>in terms of conveying what is actually happening in the code and what the compiler is objecting to</p>",
        "id": 127597459,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202192
    },
    {
        "content": "<p>I'm not crazy about either of them</p>",
        "id": 127597462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202197
    },
    {
        "content": "<p>but in terms of our own process going forward</p>",
        "id": 127597464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202199
    },
    {
        "content": "<p>but it's better</p>",
        "id": 127597467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202200
    },
    {
        "content": "<p>I would sort of like to say \"cannot write\" :)</p>",
        "id": 127597470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202204
    },
    {
        "content": "<p>but that's .. probably a separate conversation</p>",
        "id": 127597473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202215
    },
    {
        "content": "<p>it may be \"better\" to make it exactly match the AST-borrowck output</p>",
        "id": 127597475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202215
    },
    {
        "content": "<p>until we turn NLL on by default</p>",
        "id": 127597481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202223
    },
    {
        "content": "<p>I'm torn</p>",
        "id": 127597482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202224
    },
    {
        "content": "<p>Having said that</p>",
        "id": 127597487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202232
    },
    {
        "content": "<p>on the one hand, i've been wanting to do a \"review\" of borrowck diagnostics</p>",
        "id": 127597490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202234
    },
    {
        "content": "<p>its not<em>so</em> bad looking at the diffs</p>",
        "id": 127597491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202237
    },
    {
        "content": "<p>and try to agree on consistent, minimal vocabulary</p>",
        "id": 127597494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202240
    },
    {
        "content": "<p>and use it everywhere</p>",
        "id": 127597496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202243
    },
    {
        "content": "<p>on the other hand, I see the value in matching</p>",
        "id": 127597498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202247
    },
    {
        "content": "<p>that said</p>",
        "id": 127597499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202253
    },
    {
        "content": "<p>(especially if you use a tool like ediff that highlights within the line)</p>",
        "id": 127597500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202253
    },
    {
        "content": "<p>and plus</p>",
        "id": 127597504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202259
    },
    {
        "content": "<p>it is easy enough to modify AST to match in cases where we think it's better now</p>",
        "id": 127597507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202263
    },
    {
        "content": "<p>that said</p>",
        "id": 127597508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202265
    },
    {
        "content": "<p>some of these diffs seem better for AST</p>",
        "id": 127597509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202270
    },
    {
        "content": "<p>getting <strong>exact</strong> matching on the spans is likely going to be a real rathole</p>",
        "id": 127597512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202276
    },
    {
        "content": "<p>ah, yes, definitely</p>",
        "id": 127597553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202285
    },
    {
        "content": "<p>and without exact matching on spans</p>",
        "id": 127597556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202287
    },
    {
        "content": "<p>I think achieving zero diff doesn't have to be a goal</p>",
        "id": 127597560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202293
    },
    {
        "content": "<p>its pointless to sweat about exact matching on wording</p>",
        "id": 127597564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202299
    },
    {
        "content": "<blockquote>\n<p>cannot borrow data mutably in a <code>&amp;</code> reference</p>\n</blockquote>",
        "id": 127597566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202301
    },
    {
        "content": "<p>that seems better for the AST</p>",
        "id": 127597568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202305
    },
    {
        "content": "<p>I definitely agree that the AST wording is better in some cases</p>",
        "id": 127597570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202308
    },
    {
        "content": "<p>hmm</p>",
        "id": 127597577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202327
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>cannot borrow data mutably in a <code>&amp;</code> reference</p>\n</blockquote>\n</blockquote>\n<p>we can put that back. The NLL diagnostics were actually attempting to do this before</p>",
        "id": 127597592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202361
    },
    {
        "content": "<p>but they were not doing it well and it was complicating the code</p>",
        "id": 127597595,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202370
    },
    {
        "content": "<p>so I removed it</p>",
        "id": 127597596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202372
    },
    {
        "content": "<p>well</p>",
        "id": 127597597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202374
    },
    {
        "content": "<p>but after the cleanup</p>",
        "id": 127597601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202376
    },
    {
        "content": "<p>I also don't love it :)</p>",
        "id": 127597602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202377
    },
    {
        "content": "<p>it should be easier to come up with proper wording, I think</p>",
        "id": 127597607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202392
    },
    {
        "content": "<p>I lean towards this:</p>",
        "id": 127597611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202398
    },
    {
        "content": "<p>Oh, since I have your attention</p>",
        "id": 127597614,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202402
    },
    {
        "content": "<p>we should not try to \"blindly match\"</p>",
        "id": 127597648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202403
    },
    {
        "content": "<p>rather, I think we should take some time and try to make \"new and improved diagnostics\" a feature too</p>",
        "id": 127597664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202415
    },
    {
        "content": "<p>but that's assuming it's not too much overhead</p>",
        "id": 127597673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202426
    },
    {
        "content": "<p>to track the diffs for now</p>",
        "id": 127597683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202441
    },
    {
        "content": "<p>What is the \"right way\" to find out if there was a user-written lifetime for a region on a <code>ty::TyRef</code> within <code>rustc_mir::borrow_check</code> ?</p>",
        "id": 127597687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202451
    },
    {
        "content": "<p>in particular we should mostly (for now) try to get it to the point where it's just wording</p>",
        "id": 127597692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202460
    },
    {
        "content": "<blockquote>\n<p>in particular we should mostly (for now) try to get it to the point where it's just wording</p>\n</blockquote>\n<p>yes this is what I'm basically doing for now</p>",
        "id": 127597705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202477
    },
    {
        "content": "<p>because that's the \"hard part\"</p>",
        "id": 127597706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202480
    },
    {
        "content": "<p>we can delegate fine tuning</p>",
        "id": 127597709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202487
    },
    {
        "content": "<p>to arbitrary people</p>",
        "id": 127597711,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202493
    },
    {
        "content": "<p>right</p>",
        "id": 127597882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202730
    },
    {
        "content": "<blockquote>\n<p>What is the \"right way\" to find out if there was a user-written lifetime for a region on a <code>ty::TyRef</code> within <code>rustc_mir::borrow_check</code> ?</p>\n</blockquote>\n<p>I think there is no way to do that?</p>",
        "id": 127597888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202745
    },
    {
        "content": "<p>I mean this is the whole problem around user-written annotations, right?</p>",
        "id": 127597892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202758
    },
    {
        "content": "<p>I was thinking some more about it recently</p>",
        "id": 127597937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202767
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 127597939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202771
    },
    {
        "content": "<p>maybe it'd be cool to not embed types <em>directly</em> into MIR</p>",
        "id": 127597940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202776
    },
    {
        "content": "<p>but rather via a kind of indirection</p>",
        "id": 127597942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202780
    },
    {
        "content": "<p>so that we can attach annotations to them</p>",
        "id": 127597945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202784
    },
    {
        "content": "<p>I'm already adding code to thread down the span of any explicit type provided for a local in the source</p>",
        "id": 127597950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202797
    },
    {
        "content": "<p>so that we can highlight <em>that</em> span instead of the span of the identifier</p>",
        "id": 127597955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202806
    },
    {
        "content": "<p>so I <em>could</em> similarly thread down information about the type itself, namely if it had an explicit lifetime parameter</p>",
        "id": 127597971,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202826
    },
    {
        "content": "<p>that was actually also a use case I had in mind</p>",
        "id": 127597973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202833
    },
    {
        "content": "<p>I'm not sure how you could do that</p>",
        "id": 127597976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202842
    },
    {
        "content": "<p>the info is not in the MIR now</p>",
        "id": 127597978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202849
    },
    {
        "content": "<p>right</p>",
        "id": 127597981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202852
    },
    {
        "content": "<p>I'd have to add it</p>",
        "id": 127597986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202862
    },
    {
        "content": "<p>but being able to add spans is exactly why I was thinking that maybe we should have the MIR have <code>TyIndex</code></p>",
        "id": 127597992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202870
    },
    {
        "content": "<p>alternatively, we could embed more than <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 127598041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202895
    },
    {
        "content": "<p>Where <code>TyIndex</code> would be the indirection you mentioned above?</p>",
        "id": 127598044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528202899
    },
    {
        "content": "<p>right, the idea would be that the MIR embeds a \"Type index\" and then we hvae a separate array of \"Types\" that maps each of those to various bits of info</p>",
        "id": 127598051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202918
    },
    {
        "content": "<p>e.g., span but maybe also the user-given version</p>",
        "id": 127598056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202926
    },
    {
        "content": "<p>(the canonicalized stuff)</p>",
        "id": 127598060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202929
    },
    {
        "content": "<p>I guess in some cases it could be a sparse mapping</p>",
        "id": 127598069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202945
    },
    {
        "content": "<p>Can I safely assume that we need not block the diagnostics work on such a change?</p>",
        "id": 127598205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203070
    },
    {
        "content": "<p>I wouldn't block on it, but it maybe something we want to think about</p>",
        "id": 127598212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203100
    },
    {
        "content": "<p>e.g. I should feel free in the short term to just make do adding <code>Option&lt;TySourceStuff&gt;</code> to <code>LocalDecl</code></p>",
        "id": 127598219,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203108
    },
    {
        "content": "<p>yes I agree we should think about it.</p>",
        "id": 127598226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203118
    },
    {
        "content": "<p>that seems ok</p>",
        "id": 127598271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203124
    },
    {
        "content": "<p>also</p>",
        "id": 127598317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203200
    },
    {
        "content": "<p>since I still have your attention (maybe)</p>",
        "id": 127598323,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203208
    },
    {
        "content": "<p>If I wanted to add the NodeId to this <code>TySourceStuff</code></p>",
        "id": 127598335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203226
    },
    {
        "content": "<p>doing so blindly seems to break DepInfo</p>",
        "id": 127598340,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203236
    },
    {
        "content": "<p>is that something where I need to not use the <code>impl_stable_hash!</code> macro?</p>",
        "id": 127598389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203250
    },
    {
        "content": "<p>and instead write the impl explicitly and make it not include the <code>NodeId</code> in the hash it computes?</p>",
        "id": 127598405,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203268
    },
    {
        "content": "<p>you should not add the node-id</p>",
        "id": 127598409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203273
    },
    {
        "content": "<p>under any circumstances :)</p>",
        "id": 127598411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203277
    },
    {
        "content": "<p>That is the other answer I was expecting. :)</p>",
        "id": 127598412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203280
    },
    {
        "content": "<p>okay</p>",
        "id": 127598415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203283
    },
    {
        "content": "<p>I don't mind that</p>",
        "id": 127598417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203285
    },
    {
        "content": "<p>you could maybe add the <code>HirId</code></p>",
        "id": 127598424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203296
    },
    {
        "content": "<p>though .. I'd sort of prefer to avoid it ...</p>",
        "id": 127598439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203307
    },
    {
        "content": "<p>It just means I cannot e.g. put in <code>Option&lt;ast::Ty&gt;</code> as the <code>Option&lt;TySourceStuff&gt;</code></p>",
        "id": 127598442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203309
    },
    {
        "content": "<p>mostly because I'd rather MIR is a standalone IR</p>",
        "id": 127598444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203312
    },
    {
        "content": "<p>oh dear god no</p>",
        "id": 127598453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203320
    },
    {
        "content": "<p>but I guess you meant <code>hir::</code>?</p>",
        "id": 127598458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203324
    },
    {
        "content": "<p>I dont think I mean <code>hir::</code></p>",
        "id": 127598461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203331
    },
    {
        "content": "<p>well I think we've thrown away the AST by this time</p>",
        "id": 127598468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203343
    },
    {
        "content": "<p>unless that does carry the user-written name for the liftime?</p>",
        "id": 127598469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203345
    },
    {
        "content": "<p>so it would be hard to use that</p>",
        "id": 127598471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203347
    },
    {
        "content": "<p>let me go check</p>",
        "id": 127598474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203352
    },
    {
        "content": "<p>in any case we <em>should</em> throw it away</p>",
        "id": 127598475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203357
    },
    {
        "content": "<p>HIR does carry the info but I think it's the wrong thing to use</p>",
        "id": 127598521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203368
    },
    {
        "content": "<p>we already <em>have</em> the info you want</p>",
        "id": 127598522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203371
    },
    {
        "content": "<p>in the <code>UserAssertTy</code> declarations</p>",
        "id": 127598526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203375
    },
    {
        "content": "<p>oh it does have a name</p>",
        "id": 127598529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203377
    },
    {
        "content": "<p>maybe you should move those into <code>LocalDecl</code></p>",
        "id": 127598531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203384
    },
    {
        "content": "<p>or, I don't <em>know</em> if it's the wrong thing I guess</p>",
        "id": 127598536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203401
    },
    {
        "content": "<p>but it's not obviously the right thing</p>",
        "id": 127598542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203410
    },
    {
        "content": "<p>so use a <code>Option&lt;CanonicalTy&gt;</code> in the <code>LocalDecl</code>, let me see...</p>",
        "id": 127598546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203414
    },
    {
        "content": "<p>I guess it depends on what we want to underline though</p>",
        "id": 127598547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203415
    },
    {
        "content": "<p>in particular, the HIR gives much finer-grained span info</p>",
        "id": 127598555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203427
    },
    {
        "content": "<p>so maybe you <em>do</em> want that</p>",
        "id": 127598558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203432
    },
    {
        "content": "<p>but interpreting it can be sort of non-trivial</p>",
        "id": 127598564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203436
    },
    {
        "content": "<p>what msg are you trying to emulate exactly?</p>",
        "id": 127598572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203448
    },
    {
        "content": "<p>right now we always suggest types like <code>&amp;mut Foo</code></p>",
        "id": 127598636,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203493
    },
    {
        "content": "<p>when the user had written <code>&amp;Foo</code> or <code>&amp;'a Foo</code></p>",
        "id": 127598647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203505
    },
    {
        "content": "<p>so I'm trying to get it to suggest <code>&amp;'a mut Foo</code></p>",
        "id": 127598653,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203516
    },
    {
        "content": "<p>ah</p>",
        "id": 127598655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203519
    },
    {
        "content": "<p>how does AST borrowck do that?</p>",
        "id": 127598658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203521
    },
    {
        "content": "<p>let me go see</p>",
        "id": 127598659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203528
    },
    {
        "content": "<p>hmm</p>",
        "id": 127598776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203668
    },
    {
        "content": "<p><code>self.tcx.sess.codemap().span_to_snippet(lifetime.span)</code></p>",
        "id": 127598781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203681
    },
    {
        "content": "<p>specifically in: <a href=\"https://github.com/rust-lang/rust/blob/f9157f5b869fdb14308eaf6778d01ee3d0e1268a/src/librustc_borrowck/borrowck/mod.rs#L1131\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f9157f5b869fdb14308eaf6778d01ee3d0e1268a/src/librustc_borrowck/borrowck/mod.rs#L1131\">https://github.com/rust-lang/rust/blob/f9157f5b869fdb14308eaf6778d01ee3d0e1268a/src/librustc_borrowck/borrowck/mod.rs#L1131</a></p>",
        "id": 127598829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203735
    },
    {
        "content": "<p>(and its getting the <code>lifetime</code> off of the <code>hir::TyRptr</code>)</p>",
        "id": 127598841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203776
    },
    {
        "content": "<p>ok</p>",
        "id": 127598856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203806
    },
    {
        "content": "<p>so I think <code>HirId</code> is ok</p>",
        "id": 127598861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203815
    },
    {
        "content": "<p>that should be hashable too</p>",
        "id": 127598865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203826
    },
    {
        "content": "<p>in general NodeId is deprecated</p>",
        "id": 127598869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203831
    },
    {
        "content": "<p>though it's been one of those long, slow deprecations</p>",
        "id": 127598872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528203840
    },
    {
        "content": "<p>okay. I'll try passing down a <code>HirId</code> instead of a <code>Span</code> then</p>",
        "id": 127599022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528203995
    },
    {
        "content": "<p>and see whether I can reconstruct everything I need from that.</p>",
        "id": 127599030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> you can convert one to a <code>NodeId</code>, still sadly needed much of the time</p>",
        "id": 127599052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204047
    },
    {
        "content": "<p>okay</p>",
        "id": 127599058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204066
    },
    {
        "content": "<p>sorry for my ignorance here</p>",
        "id": 127599126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204132
    },
    {
        "content": "<p>but</p>",
        "id": 127599128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204136
    },
    {
        "content": "<p>but I was adding <code>ty_span: Span</code> field to <code>hir::Arg</code></p>",
        "id": 127599141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204148
    },
    {
        "content": "<p>as part of the threading</p>",
        "id": 127599143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204153
    },
    {
        "content": "<p>down of information</p>",
        "id": 127599147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204159
    },
    {
        "content": "<p><code>hir::Arg</code> already carries a <code>hir_id: HirId</code>, presumably the <code>id</code> of the <code>Arg</code> itself in the map</p>",
        "id": 127599161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204185
    },
    {
        "content": "<p>is there a way to map that arg's <code>hir_id</code> to the <code>HirId</code> of the type, if any, attached to that arg?</p>",
        "id": 127599214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204217
    },
    {
        "content": "<p>Or in other words: Would an attempt in the PR to add <code>ty_id: HirId</code> to <code>Arg</code> be instantly be \"r-'ed\"  with a note saying \"don't do this; use this map over here instead.\"</p>",
        "id": 127599232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204262
    },
    {
        "content": "<p>hmm.</p>",
        "id": 127599259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204318
    },
    {
        "content": "<p>I guess they are found in the <code>FnDecl</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.FnDecl.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.FnDecl.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.FnDecl.html</a></p>",
        "id": 127599305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204341
    },
    {
        "content": "<p>I think that's because of incremental etc</p>",
        "id": 127599308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204348
    },
    {
        "content": "<p>i.e., we wanted to separate out the \"fn-local part of it\"</p>",
        "id": 127599310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204354
    },
    {
        "content": "<p>from the \"interface part\"</p>",
        "id": 127599312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204359
    },
    {
        "content": "<p>hmm did I overlook trying to use the <code>hir::Ty</code>'s there ..</p>",
        "id": 127599337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204390
    },
    {
        "content": "<p>I would imagine you could have the <code>DefId</code> for the corresponding fn on hand, and could fetch the <code>FnDecl</code> — you'd have to know the index of the argument</p>",
        "id": 127599341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204398
    },
    {
        "content": "<p>in any case, <code>hir::Ty</code> of course <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.Ty.html#structfield.hir_id\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.Ty.html#structfield.hir_id\">also has a <code>HirId</code></a></p>",
        "id": 127599353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204423
    },
    {
        "content": "<p>right, I just wanted to get my hands on the <code>hir::Ty</code> itself or a <code>HirId</code> for the <code>hir::Ty</code></p>",
        "id": 127599403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204466
    },
    {
        "content": "<p>in the context of some code that is enumerating over a series of <code>hir::Arg</code></p>",
        "id": 127599411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204480
    },
    {
        "content": "<p>yeah it seems like that is not convenient</p>",
        "id": 127599413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204487
    },
    {
        "content": "<p>but I need to double check</p>",
        "id": 127599418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204495
    },
    {
        "content": "<p>my preference would be to have that code enumerate over a series of <code>(hir::Arg, hir::Ty)</code> pairs</p>",
        "id": 127599423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204503
    },
    {
        "content": "<p>I may have simply overlooked the fact that the <code>hir::Ty</code> was also availalbe to cosnult</p>",
        "id": 127599425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204506
    },
    {
        "content": "<p>which would require fetching the <code>FnDecl</code> etc</p>",
        "id": 127599430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204510
    },
    {
        "content": "<p>I suspect it has enough context</p>",
        "id": 127599431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204513
    },
    {
        "content": "<p>and/or already has its hands on the <code>FnDecl</code></p>",
        "id": 127599433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204519
    },
    {
        "content": "<p>this is context: <a href=\"https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src/librustc_mir/build/mod.rs#L89\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src/librustc_mir/build/mod.rs#L89\">https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src/librustc_mir/build/mod.rs#L89</a></p>",
        "id": 127599501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204601
    },
    {
        "content": "<p>I know from prior work in past few days</p>",
        "id": 127599504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204617
    },
    {
        "content": "<p>yeah so it has everything it needs</p>",
        "id": 127599510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204627
    },
    {
        "content": "<p>that I should be able to extract the <code>FnDecl</code></p>",
        "id": 127599512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204631
    },
    {
        "content": "<p>it doesn't already have the <code>FnDecl</code>; the <code>fn_sig</code> there is different</p>",
        "id": 127599516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204641
    },
    {
        "content": "<p>though it might be a bit of a pain</p>",
        "id": 127599522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204654
    },
    {
        "content": "<p>well, it has everything \"in principle\" :)</p>",
        "id": 127599525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204659
    },
    {
        "content": "<p>Yeah. I had to add some code to lookup an <code>FnDecl</code> from a body's owner</p>",
        "id": 127599532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204678
    },
    {
        "content": "<p>I wonder if e.g. closures will cause you pain here</p>",
        "id": 127599534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204680
    },
    {
        "content": "<p>it seems like it would be ok</p>",
        "id": 127599573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204687
    },
    {
        "content": "<p>to add to <code>hir::Arg</code> the <code>HirId</code> of the type</p>",
        "id": 127599575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204697
    },
    {
        "content": "<p>thinking on it a bit more</p>",
        "id": 127599577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204702
    },
    {
        "content": "<p>(or an <code>Option&lt;FnDecl&gt;</code>, I guess. Can't remember. )</p>",
        "id": 127599578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204705
    },
    {
        "content": "<p>what you really <em>don't</em> want is info flow the other way</p>",
        "id": 127599579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204708
    },
    {
        "content": "<p>what do you mean by info flow the other way?</p>",
        "id": 127599584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204722
    },
    {
        "content": "<p>but if the type changes, code using the <code>Arg</code> is gonna have to be recompiled</p>",
        "id": 127599587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204729
    },
    {
        "content": "<p>I mean that if the <code>hir::Ty</code> embedded patterns and stuff</p>",
        "id": 127599593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204737
    },
    {
        "content": "<p>ah</p>",
        "id": 127599594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204740
    },
    {
        "content": "<p>er, not the <code>hir::Ty</code> but the <code>hir::FnDecl</code></p>",
        "id": 127599597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204744
    },
    {
        "content": "<p>oka yes</p>",
        "id": 127599604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204757
    },
    {
        "content": "<p>things that are details of the implementation of the <code>fn</code> body</p>",
        "id": 127599609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204768
    },
    {
        "content": "<p>i am also influenced by all the various forms functions and methods can take in the HIR</p>",
        "id": 127599610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204769
    },
    {
        "content": "<p>should not leak out into the <code>hir::FnDecl</code></p>",
        "id": 127599616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204777
    },
    {
        "content": "<p>they probably all do have a <code>FnDecl</code> hiding somewhere</p>",
        "id": 127599619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204783
    },
    {
        "content": "<p>but at minimum you'd have to do a bunch of mapping to get it, right?</p>",
        "id": 127599622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204794
    },
    {
        "content": "<p>or else write a helper in the hir map</p>",
        "id": 127599624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204797
    },
    {
        "content": "<blockquote>\n<p>or else write a helper in the hir map</p>\n</blockquote>\n<p>yeah that's what I did</p>",
        "id": 127599707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204867
    },
    {
        "content": "<p>k,  that also seems fine</p>",
        "id": 127599723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204910
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51275/files#diff-2611048bb760f028c808ed4a14b07c00R173\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51275/files#diff-2611048bb760f028c808ed4a14b07c00R173\">https://github.com/rust-lang/rust/pull/51275/files#diff-2611048bb760f028c808ed4a14b07c00R173</a></p>",
        "id": 127599727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528204914
    },
    {
        "content": "<p>it's times like these I wish we had made progress on \"virtual structs\"</p>",
        "id": 127599775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204931
    },
    {
        "content": "<p>such a pain</p>",
        "id": 127599777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528204935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> oh, and... which diagnostic issue were you working on again?</p>",
        "id": 127671424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310936
    },
    {
        "content": "<p>I had this <a href=\"https://github.com/rust-lang/rust/issues/51195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51195\">https://github.com/rust-lang/rust/issues/51195</a> one pending</p>",
        "id": 127671859,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311479
    },
    {
        "content": "<p>didn't do any work yet</p>",
        "id": 127671865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311483
    },
    {
        "content": "<p>ok, let me know if you want any tips, but I basically think my plan there would be to examine <em>when</em> each msg is printed. My theory is that they are printed in basic block order, which is semi-arbitrary.</p>",
        "id": 127674464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528314754
    },
    {
        "content": "<p>and that we should just iterate over the basic blocks in a distinct order (I'd guess RPO)</p>",
        "id": 127674468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528314765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> interesting. So the same change might fix both rust-lang/rust#51195 and rust-lang/rust#51167 ?</p>",
        "id": 127676799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528317635
    },
    {
        "content": "<p>oh shoot</p>",
        "id": 127676804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528317651
    },
    {
        "content": "<p>no I think I was mixing them up maybe</p>",
        "id": 127676809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528317655
    },
    {
        "content": "<p>(I definitely think we should prioritize the RPO experiment.)</p>",
        "id": 127677431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528318388
    },
    {
        "content": "<p>Hmm. Been playing around with fixing <a href=\"https://github.com/rust-lang/rust/issues/51191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51191\">rust-lang/rust#51191</a> but I'm starting to wonder if this is a diagnostic that may do more harm than good?</p>",
        "id": 127681860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528323653
    },
    {
        "content": "<p>ah well I guess we can revisit the \"should we actually do this?\" later</p>",
        "id": 127681870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528323677
    },
    {
        "content": "<blockquote>\n<p>ok, let me know if you want any tips, but I basically think my plan there would be to examine <em>when</em> each msg is printed. My theory is that they are printed in basic block order, which is semi-arbitrary.</p>\n</blockquote>\n<p>I'm not sure I understood what you meant here</p>",
        "id": 127727697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528390614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't the issue talking about a note that is not printed?, why is that related to the order of things that are printed?</p>",
        "id": 127727724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528390659
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 127727774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528390704
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I may have been mixing up two issues</p>",
        "id": 127747941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528420037
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127749386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528422550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the connection between src/librustc_mir/borrow_check/error_reporting.rs and src/librustc_mir/util/borrowck_errors.rs ?</p>",
        "id": 127790081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487300
    },
    {
        "content": "<p>got me :)</p>",
        "id": 127790195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487437
    },
    {
        "content": "<p>it looks like there is some setup to let HIR and MIR borrowck share code</p>",
        "id": 127790220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487472
    },
    {
        "content": "<p>but there's reporting in both</p>",
        "id": 127790233,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487500
    },
    {
        "content": "<p>so ...</p>",
        "id": 127790235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487505
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/util/borrowck_errors.rs#L427\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/util/borrowck_errors.rs#L427\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/util/borrowck_errors.rs#L427</a></p>",
        "id": 127790285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487541
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L493\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L493</a></p>",
        "id": 127790305,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487590
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L544\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L544\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L544</a></p>",
        "id": 127790310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487603
    },
    {
        "content": "<p>last two ok</p>",
        "id": 127790377,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487682
    },
    {
        "content": "<p>the one in <a href=\"http://borrowck_errors.rs\" target=\"_blank\" title=\"http://borrowck_errors.rs\">borrowck_errors.rs</a> unsure what's about</p>",
        "id": 127790379,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487695
    },
    {
        "content": "<p>well, I see this:</p>\n<div class=\"codehilite\"><pre><span></span>&gt; /home/nmatsakis/.cargo/bin/rg --no-heading --color never <span class=\"s1\">&#39;path_does_not_live_long_enough&#39;</span>\nsrc/librustc_borrowck/borrowck/mod.rs:913:                <span class=\"nb\">let</span> mut <span class=\"nv\">db</span> <span class=\"o\">=</span> self.path_does_not_live_long_enough<span class=\"o\">(</span>error_span, <span class=\"p\">&amp;</span>msg, Origin::Ast<span class=\"o\">)</span><span class=\"p\">;</span>\nsrc/librustc_mir/borrow_check/error_reporting.rs:492:            tcx.path_does_not_live_long_enough<span class=\"o\">(</span>borrow_span, <span class=\"p\">&amp;</span>format!<span class=\"o\">(</span><span class=\"s2\">&quot;`{}`&quot;</span>, name<span class=\"o\">)</span>, Origin::Mir<span class=\"o\">)</span><span class=\"p\">;</span>\nsrc/librustc_mir/borrow_check/error_reporting.rs:513:            tcx.path_does_not_live_long_enough<span class=\"o\">(</span>proper_span, <span class=\"s2\">&quot;borrowed value&quot;</span>, Origin::Mir<span class=\"o\">)</span><span class=\"p\">;</span>\nsrc/librustc_mir/borrow_check/error_reporting.rs:543:            tcx.path_does_not_live_long_enough<span class=\"o\">(</span>borrow_span, <span class=\"p\">&amp;</span>format!<span class=\"o\">(</span><span class=\"s2\">&quot;`{}`&quot;</span>, name<span class=\"o\">)</span>, Origin::Mir<span class=\"o\">)</span><span class=\"p\">;</span>\nsrc/librustc_mir/borrow_check/error_reporting.rs:569:            tcx.path_does_not_live_long_enough<span class=\"o\">(</span>proper_span, <span class=\"s2\">&quot;borrowed value&quot;</span>, Origin::Mir<span class=\"o\">)</span><span class=\"p\">;</span>\nsrc/librustc_mir/util/borrowck_errors.rs:421:    fn path_does_not_live_long_enough<span class=\"o\">(</span>self,\n</pre></div>",
        "id": 127790401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487749
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 127790460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487794
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 127790464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487797
    },
    {
        "content": "<p>oh, I see, <code>rustc_borrowck</code> depends on <code>rustc_mir</code></p>",
        "id": 127790465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487798
    },
    {
        "content": "<p>/me did not expect that</p>",
        "id": 127790468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487800
    },
    {
        "content": "<p>I suspect in part it's a bit chaotic</p>",
        "id": 127790476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487815
    },
    {
        "content": "<p>and not well organized</p>",
        "id": 127790479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487819
    },
    {
        "content": "<p>so ... if this is for code reuse I got it</p>",
        "id": 127790490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487831
    },
    {
        "content": "<p>but basically <code>borrowck_errors.rs</code> is a way to share code yeah</p>",
        "id": 127790494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487834
    },
    {
        "content": "<p>but seems like src/librustc_mir/borrow_check/error_reporting.rs is not reusing then?</p>",
        "id": 127790504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528487854
    },
    {
        "content": "<p>but I wouldn't be surprised if we also wound up with some duplication</p>",
        "id": 127790505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528487856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (diagnostic-suggest-drop-in-reverse)]$ rustc +stage1 -Zborrowck=mir src/test/ui/error-codes/E0597.rs\nerror[E0597]: `y` does not live long enough\n  --&gt; src/test/ui/error-codes/E0597.rs:18:16\n   |\n18 |     x.x = Some(&amp;y);\n   |                ^^ borrowed value does not live long enough\n19 |     //~^ `y` does not live long enough [E0597]\n20 | }\n   | -\n   | |\n   | borrowed value only lives until here\n   | borrow later used here, when `x` is dropped\n   |\n   = note: values in a scope are dropped in the opposite order they are defined 3\n   = note: values in a scope are dropped in the opposite order they are defined 2\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n</pre></div>",
        "id": 127793088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span></p>",
        "id": 127793152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491624
    },
    {
        "content": "<p>you can see what are <code>3</code> and <code>2</code> here ...</p>",
        "id": 127793157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (diagnostic-suggest-drop-in-reverse)]$ git diff\ndiff --git a/src/librustc_mir/borrow_check/error_reporting.rs b/src/librustc_mir/borrow_check/error_reporting.rs\nindex 9061af1b68..e8e6eadddb 100644\n--- a/src/librustc_mir/borrow_check/error_reporting.rs\n+++ b/src/librustc_mir/borrow_check/error_reporting.rs\n@@ -496,6 +496,8 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n             format!(&quot;`{}` dropped here while still borrowed&quot;, name),\n         );\n         self.explain_why_borrow_contains_point(context, borrow, &amp;mut err);\n+        err.note(&quot;values in a scope are dropped in the opposite order \\\n+                  they are defined 1&quot;);\n         err.emit();\n     }\n\n@@ -545,6 +547,9 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n         err.span_label(drop_span, &quot;borrowed value only lives until here&quot;);\n\n         self.explain_why_borrow_contains_point(context, borrow, &amp;mut err);\n+\n+        err.note(&quot;values in a scope are dropped in the opposite order \\\n+                  they are defined 2&quot;);\n         err.emit();\n     }\n\ndiff --git a/src/librustc_mir/util/borrowck_errors.rs b/src/librustc_mir/util/borrowck_errors.rs\nindex d6b3e674f8..85726648b0 100644\n--- a/src/librustc_mir/util/borrowck_errors.rs\n+++ b/src/librustc_mir/util/borrowck_errors.rs\n@@ -424,9 +424,12 @@ pub trait BorrowckErrors&lt;&#39;cx&gt;: Sized + Copy {\n                                       o: Origin)\n                                       -&gt; DiagnosticBuilder&lt;&#39;cx&gt;\n     {\n-        let err = struct_span_err!(self, span, E0597, &quot;{} does not live long enough{OGN}&quot;,\n+        let mut err = struct_span_err!(self, span, E0597, &quot;{} does not live long enough{OGN}&quot;,\n                                    path, OGN=o);\n\n+        err.note(&quot;values in a scope are dropped in the opposite order \\\n+                  they are defined 3&quot;);\n+\n         self.cancel_if_wrong_origin(err, o)\n     }\n\n ```\n</pre></div>",
        "id": 127793167,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491656
    },
    {
        "content": "<p>I'm confused what I am looking at</p>",
        "id": 127793172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528491661
    },
    {
        "content": "<p>ah ok</p>",
        "id": 127793181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528491666
    },
    {
        "content": "<p>both execute</p>",
        "id": 127793183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491667
    },
    {
        "content": "<p>uh.. oookay :)</p>",
        "id": 127793200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528491702
    },
    {
        "content": "<p>well probably the latter one (<code>util</code>) creates the <code>err</code></p>",
        "id": 127793246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528491728
    },
    {
        "content": "<p>hehe</p>",
        "id": 127793247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491729
    },
    {
        "content": "<p>and then returns it to the other one?</p>",
        "id": 127793249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528491731
    },
    {
        "content": "<p>unsure ... checking</p>",
        "id": 127793273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528491778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this issue</p>",
        "id": 127796135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495856
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/error-codes/E0597.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/error-codes/E0597.rs\">https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/error-codes/E0597.rs</a></p>",
        "id": 127796136,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495859
    },
    {
        "content": "<p>this happens when you assign to a field of a local a borrow of another local</p>",
        "id": 127796144,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495875
    },
    {
        "content": "<p>so ...</p>",
        "id": 127796148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495887
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/librustc_mir/borrow_check/error_reporting.rs#L519\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/librustc_mir/borrow_check/error_reporting.rs#L519\">https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/librustc_mir/borrow_check/error_reporting.rs#L519</a></p>",
        "id": 127796201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495948
    },
    {
        "content": "<p>adding a call to note here with the text ends up firing way more than I want</p>",
        "id": 127796205,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528495966
    },
    {
        "content": "<p>like <a href=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/issue-46471.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/issue-46471.rs\">https://github.com/rust-lang/rust/blob/2e104a77cfb6b83f725512210c88dc970426a354/src/test/ui/issue-46471.rs</a> and a lot more</p>",
        "id": 127796284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528496106
    },
    {
        "content": "<p>I need to check if this is when assigning to a field of a local a borrow of another local</p>",
        "id": 127796334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528496175
    },
    {
        "content": "<p>maybe that's something I can get from BorrowData?</p>",
        "id": 127796343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528496214
    },
    {
        "content": "<p>will try to continue tomorrow or on monday</p>",
        "id": 127796776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528496914
    },
    {
        "content": "<p>maybe checking that <code>borrow.borrowed_place</code> and <code>borrow.assigned_place</code> are <code>Place::Local</code> ?</p>",
        "id": 127799027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528500978
    },
    {
        "content": "<blockquote>\n<p>I need to check if this is when assigning to a field of a local a borrow of another local</p>\n</blockquote>\n<p>Yeah I was afraid of that</p>",
        "id": 127800888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504816
    },
    {
        "content": "<p>let me take a look at the original</p>",
        "id": 127800891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504822
    },
    {
        "content": "<p>this could be a bit trickier in MIR than in AST land</p>",
        "id": 127800893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504835
    },
    {
        "content": "<p>I think though</p>",
        "id": 127800895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504847
    },
    {
        "content": "<p>we might want to approach this a slightly different way, also</p>",
        "id": 127800898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504854
    },
    {
        "content": "<p>like maybe we don't want to issue <em>precisely</em> the same message, but we can get a similar point across</p>",
        "id": 127800904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> what is the actual example again? (Which is the issue # again?)</p>",
        "id": 127800915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504912
    },
    {
        "content": "<p>ok, I see it's <a href=\"https://github.com/rust-lang/rust/issues/51195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51195\">https://github.com/rust-lang/rust/issues/51195</a>...</p>",
        "id": 127800961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504957
    },
    {
        "content": "<p>I'm gonna open a new topic instead of this general purpose one =)</p>",
        "id": 127800964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528504964
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51651\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51651\">https://github.com/rust-lang/rust/pull/51651</a> &amp; <a href=\"https://github.com/rust-lang/rust/pull/51638\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51638\">https://github.com/rust-lang/rust/pull/51638</a> were merged</p>",
        "id": 128373029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529515382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess you should update the doc</p>",
        "id": 128373036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529515400
    },
    {
        "content": "<p>and btw ... it surprised me how fast were merged, what's going on with the queue and the system in general?</p>",
        "id": 128373047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529515423
    },
    {
        "content": "<p>is it faster for some reason?</p>",
        "id": 128373048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529515428
    },
    {
        "content": "<p>I think the queue is empty now yeah</p>",
        "id": 128373409,
        "sender_full_name": "lqd",
        "timestamp": 1529515907
    },
    {
        "content": "<p>wonder what's going on :P</p>",
        "id": 128373465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529515946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you looking for something else to do? =)</p>",
        "id": 128378206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529522015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you gave me this one <a href=\"https://github.com/rust-lang/rust/issues/51512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51512\">https://github.com/rust-lang/rust/issues/51512</a></p>",
        "id": 128378716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529522760
    },
    {
        "content": "<p>but haven't started yet</p>",
        "id": 128378757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529522768
    },
    {
        "content": "<p>do you want me to do something different?</p>",
        "id": 128378761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529522774
    },
    {
        "content": "<p>nope</p>",
        "id": 128378774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529522812
    },
    {
        "content": "<p>I just assigned you</p>",
        "id": 128378779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529522821
    },
    {
        "content": "<p>ok :)</p>",
        "id": 128378867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529522994
    },
    {
        "content": "<p>i've been trying hard to continue working on <a href=\"https://github.com/rust-lang/rust/issues/51027\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51027\">https://github.com/rust-lang/rust/issues/51027</a>, but i fear that there's a lot of things that i need to read up before i can be productive about it</p>",
        "id": 128380628,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1529525287
    },
    {
        "content": "<p>might be good to look at lower hanging fruit to start</p>",
        "id": 128380950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529525681
    },
    {
        "content": "<p>one simple thing to investigate might be <a href=\"https://github.com/rust-lang/rust/issues/51167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51167\">https://github.com/rust-lang/rust/issues/51167</a></p>",
        "id": 128380963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529525702
    },
    {
        "content": "<p>which doesn't <em>super</em> important but might simplify our lives</p>",
        "id": 128380973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529525708
    },
    {
        "content": "<p>the theory was that we could try just visiting the MIR in \"reverse post order\" when we issue errors</p>",
        "id": 128380979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529525717
    },
    {
        "content": "<p>why do we have some error messages duplicated?</p>",
        "id": 128386108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529531881
    },
    {
        "content": "<p>I see that a lot along some of the things I've been fixing</p>",
        "id": 128386149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529531891
    },
    {
        "content": "<p>like ...</p>",
        "id": 128386151,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529531892
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (master)]$ rg &quot;move occurs because&quot; src/lib*\nsrc/librustc_borrowck/borrowck/mod.rs\n745:                &quot;move occurs because {} has type `{}`, which does not implement the `Copy` trait&quot;,\n\nsrc/librustc_mir/borrow_check/error_reporting.rs\n125:                        &quot;move occurs because {} has type `{}`, \\\n</pre></div>",
        "id": 128386156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529531897
    },
    {
        "content": "<p>why is there the same error message twice over those two files?</p>",
        "id": 128386163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529531918
    },
    {
        "content": "<p>one is the old borrow checker, the other is the new borrow checker</p>",
        "id": 128408227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529572391
    },
    {
        "content": "<p>ahh ya, facepalm</p>",
        "id": 128414537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529583015
    },
    {
        "content": "<p>I was confused because I've seen error messages more than twice</p>",
        "id": 128414545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529583036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> were you seeing ICE failures in <code>E0657.rs</code> and <code>impl_trait_projection.rs</code>?</p>",
        "id": 128419681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529590379
    },
    {
        "content": "<p>yes</p>",
        "id": 128419697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529590414
    },
    {
        "content": "<p>I think were those</p>",
        "id": 128419699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529590418
    },
    {
        "content": "<p>I'm seeing them too. Even on master. Very odd.</p>",
        "id": 128419962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529590756
    },
    {
        "content": "<p>I have no idea why bors passes</p>",
        "id": 128419964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529590759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/spastorino/d0a75bfac0d2c76c9d5b70753cc1911f\" target=\"_blank\" title=\"https://gist.github.com/spastorino/d0a75bfac0d2c76c9d5b70753cc1911f\">https://gist.github.com/spastorino/d0a75bfac0d2c76c9d5b70753cc1911f</a></p>",
        "id": 128422325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529593559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yep I get the same thing</p>",
        "id": 128423466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594864
    },
    {
        "content": "<p>not with nightly it seems</p>",
        "id": 128423468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594868
    },
    {
        "content": "<p>but with local builds of master</p>",
        "id": 128423469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594870
    },
    {
        "content": "<p>I am investigating</p>",
        "id": 128423471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594873
    },
    {
        "content": "<p>actually wait</p>",
        "id": 128423511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594886
    },
    {
        "content": "<p>I <em>do</em> get it with nightly</p>",
        "id": 128423512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529594889
    },
    {
        "content": "<p>Okay, here is a perhaps silly question. When you see diagnostic output like this:  <a href=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr#L8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr#L8\">borrowck-move-out-of-vec-tail.nll.stderr</a> ...</p>",
        "id": 130273213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532522978
    },
    {
        "content": "<p>Which I'll paste inline for ease of reference:</p>",
        "id": 130273227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532522997
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>help: to prevent move, use ref or ref mut\n   |\nLL |                 &amp;[Foo { string: ref a },\n   |                                 ^^^^^\nhelp: to prevent move, use ref or ref mut\n   |\nLL |                   Foo { string: ref b }] =&gt; {\n   |                                 ^^^^^\n</pre></div>",
        "id": 130273229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532522999
    },
    {
        "content": "<p>Do you read those lines that are highlighted as saying \"here I have <em>literally</em> transcribed your original source code that you need to edit in some manner\"</p>",
        "id": 130273298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532523054
    },
    {
        "content": "<p>or do you read them as saying \"I am highlighting code that does not actually exist in your files. It rather is the <em>hypothetical</em> code that I am suggesting you put in there instead.\"</p>",
        "id": 130273315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532523084
    },
    {
        "content": "<p>Because as I understand it, our current diagnostics (at least from these NLL cases) are meant to be interpreted as the latter.</p>\n<ul>\n<li>(But my own personal reading is the former. I have done several double-takes trying to understand the compiler output in these cases.)</li>\n</ul>",
        "id": 130273332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532523112
    },
    {
        "content": "<p>... I don't know if I've seen us do highlighting like this in other cases outside of NLL. Is there precedent?</p>",
        "id": 130273388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532523131
    },
    {
        "content": "<p>(if there is precedent then I'll just accept this as current practice in our diagnostic system.)</p>",
        "id": 130273406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532523158
    },
    {
        "content": "<p>it depends but I also find that kind of confusing</p>",
        "id": 130274606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532524579
    },
    {
        "content": "<p>I feel like wording like \"to prevent move, use ref or ref mut, as shown here:\" would help</p>",
        "id": 130274611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532524596
    }
]