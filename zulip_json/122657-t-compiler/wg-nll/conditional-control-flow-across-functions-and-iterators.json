[
    {
        "content": "<p>I found a case where the boring, non-iterator based code works with NLL+Polonius, but the idiomatic iterator version does not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// rustc 1.28.0-nightly (ae46aefd5 2018-06-16)</span>\n<span class=\"c1\">// cargo +nightly rustc -- -Z polonius</span>\n<span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Reader</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Data</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Errors</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">handle_array</span><span class=\"p\">(</span><span class=\"n\">stream</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Reader</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Errors</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Works</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">array</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Does not work</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">_stream</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Reader</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Errors</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is this worth an issue?</p>",
        "id": 128495964,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529704892
    },
    {
        "content": "<p>I would think so :)</p>",
        "id": 128496268,
        "sender_full_name": "lqd",
        "timestamp": 1529705349
    },
    {
        "content": "<p>Oh, I guess that can't be safe. Since it could be collected into a <code>Vec&lt;Errors&gt;</code> which would then allow for mutable aliasing, yeah?</p>",
        "id": 128496274,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529705359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> For your example, the compiler reports what I would expect it to report. The type of the first array is <code>Vec&lt;Data&gt;</code> â€“ therefore, we know that it does not capture the <code>stream</code>. However, the type of the second array is <code>Vec&lt;Result&lt;Data, Errors&lt;'a&gt;&gt;&gt;</code>, which may capture the<code>stream</code>. I guess that if you managed to write something similar to <code>map(|_| handle_request(stream)?)</code>, then also the second version would compile.</p>",
        "id": 128599866,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529933249
    },
    {
        "content": "<p>that sounds like it agrees with my followup comment; do you concur?</p>",
        "id": 128599966,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529933360
    },
    {
        "content": "<p>I mostly agree with your follow up comment. To me, it seems that both versions are actually safe because <code>Errors</code> take a shared reference. However, since the compiler does the modular analysis, it does not see that and to be on the safe side reports an error. In other words: the compiler thinks that there could be mutable aliasing and, therefore, rejects the code.</p>",
        "id": 128600593,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529934205
    },
    {
        "content": "<blockquote>\n<p><code>Errors</code> take a shared reference.</p>\n</blockquote>\n<p>Well, but even if that's the case, something would be holding the immutable reference while the loop continues on trying to use the mutable reference. </p>\n<p>I agree it ultimately seems safe, but that's only because we \"know\" that the implementation of <code>&lt;Vec as FromIterator&gt;</code> / <code>Vec::push</code> doesn't look at the references it holds as it goes on to the next element</p>",
        "id": 128600856,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529934562
    },
    {
        "content": "<p>Yes, you are completely right. I forgot about the iterator.</p>",
        "id": 128609884,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1529945081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> a nit. I would've found this <strong>so much</strong> easier to read if you would use <code>'_</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">_stream</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Reader</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Errors</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>As is, I spent a long time being puzzled because I didn't realize that <code>Errors</code> carried a lifetime</p>",
        "id": 128618986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529955952
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> a nit. I would've found this <strong>so much</strong> easier to read if you would use <code>'_</code>:</p>\n</blockquote>\n<p>Hey, make it stable and I'll start getting used to it ;-)</p>",
        "id": 128619070,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956017
    },
    {
        "content": "<p>I think it is</p>",
        "id": 128619087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529956043
    },
    {
        "content": "<p>but maybe not?</p>",
        "id": 128619093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529956052
    },
    {
        "content": "<p>that said, the lint that encourages you to migrate I think still needs work</p>",
        "id": 128619096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529956062
    },
    {
        "content": "<blockquote>\n<p>I think it is</p>\n</blockquote>\n<p>Well, I'll be.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128619177,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956150
    },
    {
        "content": "<p>And yeah, there doesn't <em>seem</em> to be a lint...</p>",
        "id": 128619186,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956176
    },
    {
        "content": "<p>But yeah, that's cool it's stable. Wonder when that happened.</p>",
        "id": 128619191,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956188
    },
    {
        "content": "<p>there is a lint</p>",
        "id": 128619255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529956235
    },
    {
        "content": "<p>it's just not enabled by default</p>",
        "id": 128619258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529956239
    },
    {
        "content": "<blockquote>\n<p>it's just not enabled by default</p>\n</blockquote>\n<p>Dangerously close to \"if a tree falls in the forest\" territory here. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 128619294,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956307
    },
    {
        "content": "<p>Ok, It was only stabilized in 1.26, so that's not too long for me to have been missing out</p>",
        "id": 128619497,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529956568
    }
]