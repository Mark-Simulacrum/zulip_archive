[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> (and others) I've been working on some extensions to the region solver to address some existing limitations of impl trait (these are particularly important for async await). (cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>)</p>",
        "id": 167389453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742222
    },
    {
        "content": "<p>This raises some interesting questions in the context of the NLL solver</p>",
        "id": 167389487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742242
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-nll</span></p>",
        "id": 167389534,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742260
    },
    {
        "content": "<p>I was debating about how to discuss them -- I can certainly outline some of it here</p>",
        "id": 167389537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742264
    },
    {
        "content": "<p>but maybe it's worth doing a call or something</p>",
        "id": 167389546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742269
    },
    {
        "content": "<p>as in general I feel like this is the <em>sort</em> of issue I would like to think about how to document etc (i.e., kind of a meta issue re: lang spec)</p>",
        "id": 167389562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742287
    },
    {
        "content": "<p>anyway let me outline the thing I'm looking at real fast</p>",
        "id": 167389572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742295
    },
    {
        "content": "<p>if you have impl trait today, we can get in this strange scenario:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(..)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Here, the inferred return type can reference <code>'a</code> and <code>'b</code> but not other regions. The problem is that we have no way to express a cosntraint like that in our region solver.</p>",
        "id": 167389656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742360
    },
    {
        "content": "<p>The only sort of constraint our existing solvers know how to handle is <code>'r1: 'r2</code>, but this would be what I'm calling a <em>pick constraint</em>.</p>",
        "id": 167389735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742389
    },
    {
        "content": "<p>I've been writing it:</p>\n<div class=\"codehilite\"><pre><span></span>pick &#39;r0 from [&#39;r1...&#39;rN]\n</pre></div>",
        "id": 167389745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742397
    },
    {
        "content": "<p>i.e., it is satisfied if <code>'r0 == 'r[i]</code> for some <code>i &gt; 0</code></p>",
        "id": 167389760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742411
    },
    {
        "content": "<p>(In today's code, that impl Trait I gave above is an error because there is no \"least region\" we can use as a bound; I am basically lifting this restriction)</p>",
        "id": 167389795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742449
    },
    {
        "content": "<p>(As a further aside, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> and I realized that the existing inference scheme here was already a bit strange in that sometimes it has \"room\" to pick from a few sets of regions that would be sufficient; this is <em>mostly</em> unobservable, but not entirely, because of auto-trait leakage; i.e., you can have something like <code>impl Send for Foo&lt;'static&gt;</code> which can then observe if the region inferencer chose <code>'static</code> or not)</p>",
        "id": 167389916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742514
    },
    {
        "content": "<p>The extension I'm doing is fairly conservative: it basically ignores <code>pick</code> constraints unless there is exactly one least choice it can use. I can give a bit more details but it's not the question that I am pondering. :)</p>",
        "id": 167389967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742556
    },
    {
        "content": "<p>The interesting case is this one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167390049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742602
    },
    {
        "content": "<p>If you look carefully here, you will see that the return type is <code>&amp;'c u32</code> for some region <code>'c</code> where <code>'a: 'c</code> and <code>'b: 'c</code>. You could imagine writing this region as <code>'a &amp; 'b</code> (an intersection), though I've been thinking of it as a union <code>'a | 'b</code> because that fits the polonius model of regions as \"loan sets\"</p>",
        "id": 167390153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742652
    },
    {
        "content": "<p>you expect the compiler to infer that type there?</p>",
        "id": 167390177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742670
    },
    {
        "content": "<p>where its possible that <code>'c</code> is ReEmpty ?</p>",
        "id": 167390195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742686
    },
    {
        "content": "<p>Anyway, my lexical solver rejects this example, but I believe it would be sound to accept it, in the sense that the caller can only use <code>impl Trait&lt;'a, 'b&gt;</code> when both <code>'a</code> and <code>'b</code> are live</p>",
        "id": 167390197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742688
    },
    {
        "content": "<blockquote>\n<p>where its possible that <code>'c</code> is ReEmpty ?</p>\n</blockquote>\n<p>that is not possible</p>",
        "id": 167390215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742712
    },
    {
        "content": "<p>oh, hmm, you expect <code>'c</code> will always exist (and be non-trivial)</p>",
        "id": 167390217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742712
    },
    {
        "content": "<p>it must be live at the return site, for example</p>",
        "id": 167390270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742724
    },
    {
        "content": "<p>the lexical solver probably can't accept this example ever</p>",
        "id": 167390286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742733
    },
    {
        "content": "<p>because it can't really express what is needed</p>",
        "id": 167390291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742738
    },
    {
        "content": "<p>it assigns the result the lifetime of the \"Call site\" (the outermost scope)</p>",
        "id": 167390303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742747
    },
    {
        "content": "<p>actually i'm not sure if the NLL solver can easily do so either, now that I think about it</p>",
        "id": 167390332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742772
    },
    {
        "content": "<p>(I think polonius could)</p>",
        "id": 167390339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742775
    },
    {
        "content": "<p>I was thinking about how the NLL solver represents regions as a union of elements, where some of those elements can be \"free regions\" (like <code>'a</code> and <code>'b</code>)</p>",
        "id": 167390370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742797
    },
    {
        "content": "<p>but that's actually not what we need here, as I noted above, you need the <em>intersection</em> (in NLL terms)</p>",
        "id": 167390467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742850
    },
    {
        "content": "<p>right</p>",
        "id": 167390476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742858
    },
    {
        "content": "<blockquote>\n<p>(I think polonius could)</p>\n</blockquote>\n<p>but I haven't thought about this much and don't care to (yet)</p>",
        "id": 167390478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742859
    },
    {
        "content": "<p>ok so maybe there's not so much of a question :)</p>",
        "id": 167390481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742866
    },
    {
        "content": "<p>so maybe the representation could/should be a sum-of-products</p>",
        "id": 167390487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742877
    },
    {
        "content": "<p>or rather, union-of-intersections  (in NLL terms) ?</p>",
        "id": 167390498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742887
    },
    {
        "content": "<p>the reason I think polonius could handle this is that it is about tracking the <em>origins</em>, and basically you could imagine it saying something like \"The origins of all regions in the hidden type cannot exceed a|b\"</p>",
        "id": 167390518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742903
    },
    {
        "content": "<p>which is what we want</p>",
        "id": 167390531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742906
    },
    {
        "content": "<p>or is that not going to have the right properties, in terms of <del>lattices</del> glb's or whatnot</p>",
        "id": 167390533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742907
    },
    {
        "content": "<p>anyway I don't know that this example is very important</p>",
        "id": 167390551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742923
    },
    {
        "content": "<p>I just found it interesting as I was writing test cases</p>",
        "id": 167390561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742931
    },
    {
        "content": "<blockquote>\n<p>so maybe the representation could/should be a sum-of-products</p>\n</blockquote>\n<p>plausibly but I'm not inclined to do that without stronger motivation :)</p>",
        "id": 167390575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742947
    },
    {
        "content": "<p>that code is pretty perf sensitive, among other things</p>",
        "id": 167390644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742971
    },
    {
        "content": "<blockquote>\n<p>anyway I don't know that this example is very important</p>\n</blockquote>\n<p>can it arise meaningfully when you don't have such a wide blanket impl?</p>",
        "id": 167390651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742975
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 167390659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742981
    },
    {
        "content": "<p>e.g. something that actually uses the region parameters</p>",
        "id": 167390665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559742983
    },
    {
        "content": "<p>it's also a pure extension</p>",
        "id": 167390674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742995
    },
    {
        "content": "<p>i.e., we can do the thing I'm doing now, and see if people come up with good examples :)</p>",
        "id": 167390692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743005
    },
    {
        "content": "<p>good examples to motivate adding a more expressive system, you mean, right?</p>",
        "id": 167390722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743028
    },
    {
        "content": "<p>regardless, even if we don't go in this direction, it still raises interesting questions about impl Trait -- the existing rules and support lack any sort of documentation to my knowledge</p>",
        "id": 167390723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743028
    },
    {
        "content": "<blockquote>\n<p>good examples to motivate adding a more expressive system, you mean, right?</p>\n</blockquote>\n<p>correct</p>",
        "id": 167390731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743033
    },
    {
        "content": "<p>I would like to improve this situation (docs)</p>",
        "id": 167390742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743042
    },
    {
        "content": "<p>I guess I should be working on an amendment to the reference or something</p>",
        "id": 167390751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743049
    },
    {
        "content": "<blockquote>\n<p>regardless, even if we don't go in this direction, it still raises interesting questions about impl Trait -- the existing rules and support lack any sort of documentation to my knowledge</p>\n</blockquote>\n<p>I think there's some amount of active confusion w.r.t. the interaction between impl Trait and lifetimes</p>",
        "id": 167390755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743055
    },
    {
        "content": "<p>the rules are not very satisfying to me</p>",
        "id": 167390772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743068
    },
    {
        "content": "<p>I was trying to find the dialogue I had with alexreg about the impl vs the spec on this front</p>",
        "id": 167390776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743075
    },
    {
        "content": "<p>but I failed to find it quickly. I'll look again now</p>",
        "id": 167390834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743088
    },
    {
        "content": "<p>I think the existing solution (you can reference lifetimes that appear in bounds) is ungreat</p>",
        "id": 167390843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743094
    },
    {
        "content": "<p>or rather, it's a decent default, but I suspect we would do well to consider adding an explicit option</p>",
        "id": 167390867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743114
    },
    {
        "content": "<p>but that's <em>kind of</em> a separate story (only kind of)</p>",
        "id": 167390879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743125
    },
    {
        "content": "<p>(this is the issue I was thinking of : <a href=\"https://github.com/rust-lang/rust/issues/54184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54184\">#54184</a> )</p>",
        "id": 167390902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743149
    },
    {
        "content": "<p>what is the explicit option you are thinking of?</p>",
        "id": 167390922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743177
    },
    {
        "content": "<p>namely there are two directions , or maybe three, that I could imagine you going in...</p>",
        "id": 167390935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743188
    },
    {
        "content": "<p>we had discussed things like <code>impl&lt;'a&gt; Debug</code></p>",
        "id": 167391039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743240
    },
    {
        "content": "<p>strongly related to <a href=\"https://github.com/rust-lang/rust/issues/54184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54184\">#54184</a></p>",
        "id": 167391055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743248
    },
    {
        "content": "<p>it would basically desugar to a \"unused\" type parameter\"</p>",
        "id": 167391063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743255
    },
    {
        "content": "<p>Okay. So a way to add lifetimes that can be referenced by the impl Trait even if they do not (and perhaps cannot) appear in the Trait signature itself, right?</p>",
        "id": 167391099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743277
    },
    {
        "content": "<p>hmm somehow I never noticed PR <a href=\"https://github.com/rust-lang/rust/issues/57896\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57896\">#57896</a></p>",
        "id": 167391243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743348
    },
    {
        "content": "<blockquote>\n<p>Okay. So a way to add lifetimes that can be referenced by the impl Trait even if they do not (and perhaps cannot) appear in the Trait signature itself, right?</p>\n</blockquote>\n<p>yes. You can then imagine <code>impl Trait</code> as a default. The problem with this is the usual problem with defaults -- when you write <code>impl&lt;'a&gt;</code>, does that <em>add</em> to the default set?</p>",
        "id": 167392009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743828
    },
    {
        "content": "<p>Or does it \"reset\" the default set?</p>",
        "id": 167392018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743834
    },
    {
        "content": "<p>In particular, we default to capturing all type parameters -- what if you didn't want to?</p>",
        "id": 167392034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743846
    },
    {
        "content": "<p>I'd say we should have a (different) way to mark lifetimes in the signature as not intended to be captured.</p>",
        "id": 167392056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559743862
    },
    {
        "content": "<p>the expectation I think was that you would use an explicit <code>abstract type</code> (or <code>type Foo = impl Trait</code>, whatever) for this case</p>",
        "id": 167392066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743864
    },
    {
        "content": "<p>(which maybe is fine)</p>",
        "id": 167392079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743874
    },
    {
        "content": "<p>but I think is a big jump</p>",
        "id": 167392090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743882
    },
    {
        "content": "<p>I guess it depends how often</p>",
        "id": 167392111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743888
    },
    {
        "content": "<p>this comes up a lot in the compiler</p>",
        "id": 167392117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743893
    },
    {
        "content": "<p>often you want something like <code>fn foo&lt;'tcx, 'gcx&gt;() -&gt; impl Iterator&lt;Item = Ty&lt;'tcx&gt;&gt;</code> that wants to capture <code>'gcx</code></p>",
        "id": 167392140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743910
    },
    {
        "content": "<p>anyway</p>",
        "id": 167392142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559743912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't this <a href=\"https://github.com/rust-lang/rust/issues/60670\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60670\">https://github.com/rust-lang/rust/issues/60670</a> ?</p>",
        "id": 167405184,
        "sender_full_name": "centril",
        "timestamp": 1559751563
    },
    {
        "content": "<p>Related</p>",
        "id": 167405202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559751581
    },
    {
        "content": "<p>Something like an existential lifetime is one way to solve it; <code>impl&lt;'gcx&gt;</code> is another.</p>",
        "id": 167405287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559751615
    },
    {
        "content": "<p>Notably we could say:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span>: <span class=\"na\">&#39;c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span>: <span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167405511,
        "sender_full_name": "centril",
        "timestamp": 1559751779
    },
    {
        "content": "<p>plausible but not really the intended existential plan, which was more to make the <em>type</em> be <code>exists&lt;'c&gt; { ... }</code></p>",
        "id": 167506048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559844330
    }
]