[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as part of looking at <a href=\"https://github.com/rust-lang/rust/issues/52059\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52059\">#52059</a>, I am trying out a change that, in a number of cases, replaces the diagnostic \"borrowed value does not live long enough\" with \"borrow may still be in use when destructor runs\"</p>",
        "id": 134131231,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537223587
    },
    {
        "content": "<p>it certainly doesn't do that replacement in all cases; e.g. if you really do have a conflict between a StorageDead and a Borrow, then you get the old diagnostic</p>",
        "id": 134131262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537223627
    },
    {
        "content": "<p>But I basically wanted  to double check here if anyone was particularly wedded to trying to stick to phrasing of the form \"borrowed value does not live long enough\"</p>",
        "id": 134131337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537223669
    },
    {
        "content": "<p>The reason why that message does not suffice is that for cases like <a href=\"https://github.com/rust-lang/rust/issues/52059\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52059\">#52059</a>, the value being borrowed <em>does</em>  live long enough. The problem is that there's <strong>another</strong> value that isn't being borrowed whose destructor is going to run (and that dtor will require <code>&amp;mut</code> access to the borrow)</p>",
        "id": 134131402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537223762
    },
    {
        "content": "<p>(actually I think I found a reasonable way to differentiate the cases: if the borrowed_place is a prefix of the dropped place, then use the old \"does not live long enough\" phrasing. The new message is only interesting distinction to make when borrowed_place is not a prefix of it.)</p>",
        "id": 134134475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537226810
    },
    {
        "content": "<p>(updated topic so it now links to PR with proposed change)</p>",
        "id": 134136580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537229984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> actually that was on my short list to change</p>",
        "id": 134164864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276064
    },
    {
        "content": "<p>I had in mind a message much like the one you describe</p>",
        "id": 134164880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276072
    },
    {
        "content": "<p>in general, I think that we use the term drop in various ambiguous-y ways</p>",
        "id": 134164925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276087
    },
    {
        "content": "<p>I did find while working on <a href=\"https://github.com/rust-lang/rust/issues/54310\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54310\">#54310</a> that there are cases where the prior wording was nicer</p>",
        "id": 134164944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276112
    },
    {
        "content": "<p>namely when you have generic types</p>",
        "id": 134164946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276117
    },
    {
        "content": "<p>hmm, example?</p>",
        "id": 134164950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276126
    },
    {
        "content": "<p>I found while talking to various people that about this error specifically that there are a number of things people don't really understand</p>",
        "id": 134164971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276148
    },
    {
        "content": "<p>and that if we could be more specific about what is happening — e.g., \"when we run the destructor\" — it would be good</p>",
        "id": 134164978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276160
    },
    {
        "content": "<p>When you have e.g. <code>fn foo&lt;T&gt;(t: T) -&gt; ... { return &amp;t }</code>, I thought it seemed goofy to be talking about the destructor of <code>t</code></p>",
        "id": 134164989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276176
    },
    {
        "content": "<p>yes, its certainly possible <code>T</code> has a destructor</p>",
        "id": 134164996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276194
    },
    {
        "content": "<p>but its also just generally true that <code>t</code> simply \"does not live long enough\"</p>",
        "id": 134165047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276209
    },
    {
        "content": "<p>I think in that case we should say <em>that</em></p>",
        "id": 134165050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276212
    },
    {
        "content": "<p>no</p>",
        "id": 134165052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276215
    },
    {
        "content": "<p>er</p>",
        "id": 134165054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276217
    },
    {
        "content": "<p>I don't think that does not lvie long enough is basically ever a good message</p>",
        "id": 134165063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276233
    },
    {
        "content": "<p>Well</p>",
        "id": 134165064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276233
    },
    {
        "content": "<p>I think we  should talk about actions that are taking place</p>",
        "id": 134165071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276241
    },
    {
        "content": "<p>In that case, we can land PR <a href=\"https://github.com/rust-lang/rust/issues/54310\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54310\">#54310</a> as is</p>",
        "id": 134165074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276246
    },
    {
        "content": "<p>it is however sometimes a challenge to deal with \"may\" actions :)</p>",
        "id": 134165083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276255
    },
    {
        "content": "<p>and discuss whether to generalize it to apply elsewhere</p>",
        "id": 134165087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276263
    },
    {
        "content": "<p>that particular case is interesting because</p>",
        "id": 134165106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276285
    },
    {
        "content": "<p>some part of me wants to say that we should be saying something like \"returning borrowed reference to content owned by this function\"</p>",
        "id": 134165113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276297
    },
    {
        "content": "<p>but I think that particular wording is probably not good</p>",
        "id": 134165172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276330
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 134165185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276341
    },
    {
        "content": "<p>it might also be good for a \"help\" or \"note\"</p>",
        "id": 134165201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276354
    },
    {
        "content": "<blockquote>\n<p>here, drop of <code>foo</code> needs exclusive access to <code>foo.data</code>, because the type <code>Foo&lt;Concrete&lt;'_&gt;&gt;</code> implements the <code>Drop</code> trait</p>\n</blockquote>",
        "id": 134165248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276437
    },
    {
        "content": "<p>that is nice!</p>",
        "id": 134165249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276439
    },
    {
        "content": "<p>one thing about these errors is that the \"locus\" of the error feels mildly inconsistent</p>",
        "id": 134165325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276503
    },
    {
        "content": "<p>e.g., we are \"blaming\" the borrow</p>",
        "id": 134165332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276508
    },
    {
        "content": "<p>rather than the drop or the final use</p>",
        "id": 134165338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276522
    },
    {
        "content": "<p>often we blame the \"middle\" point — particularly since sometimes we don't have a good \"third point\", although I think we should work on that (in principle there ought to always be one...?)</p>",
        "id": 134165353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537276552
    },
    {
        "content": "<p><a href=\"https://imgflip.com/i/2i6w1u\" target=\"_blank\" title=\"https://imgflip.com/i/2i6w1u\">https://imgflip.com/i/2i6w1u</a></p>",
        "id": 134165422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537276617
    }
]