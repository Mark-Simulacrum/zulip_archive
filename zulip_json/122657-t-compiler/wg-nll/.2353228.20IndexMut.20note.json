[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Taking a look at this issue. Looking at the MIR, we've got the location <code>bb10[0]</code> where the mutability error is being reported, I can see where the <code>index</code> call is happening (where <code>_9</code> is assigned, <code>bb9[11]</code>, in <code>index-mut-help.rs</code>), what's the best way for me to get the location that assigned <code>_9</code> - so I can check the rvalue?</p>",
        "id": 133025197,
        "sender_full_name": "davidtwco",
        "timestamp": 1535580863
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 133060363,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636195
    },
    {
        "content": "<p>hey</p>",
        "id": 133060703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636528
    },
    {
        "content": "<p>is the MIR listed somewhere?</p>",
        "id": 133060717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636547
    },
    {
        "content": "<p>anyway, finding out where <code>_9</code> is assigned... I think we have a visitor for it .. but it's not like mega cheap</p>",
        "id": 133060726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636561
    },
    {
        "content": "<p>I guess that's ok if it's just when an error is reported</p>",
        "id": 133060731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/davidtwco/3c75a8d83682e689b57ba84be267f76d\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/3c75a8d83682e689b57ba84be267f76d\">https://gist.github.com/davidtwco/3c75a8d83682e689b57ba84be267f76d</a></p>",
        "id": 133060851,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636650
    },
    {
        "content": "<p>ok I see so the error is here:</p>\n<div class=\"codehilite\"><pre><span></span>_8 = &amp;mut (*_9);\n</pre></div>",
        "id": 133060885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636689
    },
    {
        "content": "<p>Yeah, and then <code>_9</code> is assigned above, here: <code>_9 = const std::ops::Index::index(move _10, move _11)</code>.</p>",
        "id": 133060914,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636715
    },
    {
        "content": "<p>actually</p>",
        "id": 133060928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636730
    },
    {
        "content": "<p>you can probably use the <code>MoveData</code> to answer this question</p>",
        "id": 133060933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636737
    },
    {
        "content": "<p>sec</p>",
        "id": 133060940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636751
    },
    {
        "content": "<p>I spent a while yesterday messing with <code>MoveData</code> to try get it to give me that - I've not interacted with <code>MoveData</code> at all so I wasn't really getting much of anywhere.</p>",
        "id": 133060995,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636777
    },
    {
        "content": "<p>I feel like there was some visitor for finding writes before</p>",
        "id": 133060999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636781
    },
    {
        "content": "<p>I keep meaning to try and document <code>MoveData</code> more</p>",
        "id": 133061006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636791
    },
    {
        "content": "<p>it's a bit opaque</p>",
        "id": 133061008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636793
    },
    {
        "content": "<p>and/or refactor it</p>",
        "id": 133061012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636796
    },
    {
        "content": "<p>I did notice that above some of the logging statements for the error, there was the <code>MirBorrowckCtxt::process_statement</code> logging statement, that listed the <code>move_outs</code> vec.</p>",
        "id": 133061019,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636805
    },
    {
        "content": "<p>In that vec, there was the location that I was hoping to get.</p>",
        "id": 133061026,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636814
    },
    {
        "content": "<p>that said, you can use the <code>init_path_map</code></p>",
        "id": 133061031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636823
    },
    {
        "content": "<p>Which led me down a rabbit hole of trying to figure out how to access it.</p>",
        "id": 133061033,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636823
    },
    {
        "content": "<p>to find all the initializations of a given <code>MovePathIndex</code></p>",
        "id": 133061044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636828
    },
    {
        "content": "<p>you can convert a <code>Local</code> to an MPI</p>",
        "id": 133061050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636836
    },
    {
        "content": "<p>Is that with <code>closest_move_path_to</code> (or something like that)?</p>",
        "id": 133061062,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636852
    },
    {
        "content": "<p>Yesterday when experimenting, I tried with that function (whatever it is actually called), then I looked up a <code>MoveOutIndex</code> and then tried to index the <code>moves</code>  - it worked but got me an entirely different location.</p>",
        "id": 133061167,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636939
    },
    {
        "content": "<p>basically something like this should work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"n\">local_variable</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">init_path_map</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">].</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">inits</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"c1\">// here `init` is a `Init`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133061175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636945
    },
    {
        "content": "<p><code>init_path_map</code> might be worth looking into.</p>",
        "id": 133061180,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636947
    },
    {
        "content": "<p>at least in the case where you have a single local</p>",
        "id": 133061190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636954
    },
    {
        "content": "<p>Yeah, I think that'd do it.</p>",
        "id": 133061198,
        "sender_full_name": "davidtwco",
        "timestamp": 1535636961
    },
    {
        "content": "<p>the <code>Init</code> structure has the things you need: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.Init.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.Init.html\">rustdoc</a></p>",
        "id": 133061274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637012
    },
    {
        "content": "<p>if you want to handle things that are not single locals, then \"closest to\" is probably good</p>",
        "id": 133061288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637027
    },
    {
        "content": "<p>if you have a path like <code>a.b.c.d</code>, then closest-to would give you the MPI for that path, or for some prefix is that path does not have an MPI -- really though once you get into that, you have to be concerned about all kinds of complications</p>",
        "id": 133061309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637064
    },
    {
        "content": "<p>and I suspect that for the purposes of this diagnostic</p>",
        "id": 133061314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637070
    },
    {
        "content": "<p>we can just ignore cases where it's not a local</p>",
        "id": 133061322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637076
    },
    {
        "content": "<blockquote>\n<p>if you have a path like <code>a.b.c.d</code>, then closest-to would give you the MPI for that path, or for some prefix is that path does not have an MPI -- really though once you get into that, you have to be concerned about all kinds of complications</p>\n</blockquote>\n<p>e.g., you really want all prefixes, since <code>a.b = ...</code> also \"reassigns\" <code>a.b.c.d</code></p>",
        "id": 133061335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535637095
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133061543,
        "sender_full_name": "davidtwco",
        "timestamp": 1535637278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure that works for this. If I'm not mistaken, I'll need a <code>Location</code> so I can access the terminator (<code>bb9[11]</code>) which is what will mention the call to <code>index</code>. However, your approach wouldn't give me a <code>Location</code>? Changing it slightly to do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">moi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">path_map</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">].</span><span class=\"n\">first</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// Only one item.</span>\n<span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">moves</span><span class=\"p\">[</span><span class=\"n\">moi</span><span class=\"p\">].</span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// gives bb13[2]</span>\n</pre></div>\n\n\n<p>That's the same location I got yesterday with however I managed to do it then - it isn't the <code>bb9[11]</code> that I'd like to access, <code>bb13[2]</code> is the upcoming <code>StorageDead(_9)</code> that follows from the error location <code>bb10[0]</code>.</p>",
        "id": 133062924,
        "sender_full_name": "davidtwco",
        "timestamp": 1535638641
    },
    {
        "content": "<p>not path-map</p>",
        "id": 133062947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535638680
    },
    {
        "content": "<p><code>init_path_map</code></p>",
        "id": 133062985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535638684
    },
    {
        "content": "<p>Yeah, I tried it with that, getting an <code>Init</code> - but I don't know how that helps me find the <code>Location</code>?</p>",
        "id": 133063000,
        "sender_full_name": "davidtwco",
        "timestamp": 1535638700
    },
    {
        "content": "<p>oh, I see, <code>Init</code> doesn't have a location</p>",
        "id": 133063008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535638712
    },
    {
        "content": "<p>well, maybe we should add one to <code>Init</code></p>",
        "id": 133063012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535638718
    },
    {
        "content": "<p>It seems like <code>Init</code> is made at <code>src/librustc_mir/dataflow/move_paths/builder.rs:430</code> and <code>src/librustc_mir/dataflow/move_paths/builder.rs:243</code>.</p>",
        "id": 133063196,
        "sender_full_name": "davidtwco",
        "timestamp": 1535638878
    },
    {
        "content": "<p>sounds about right</p>",
        "id": 133063472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639110
    },
    {
        "content": "<p>I would probably remove the <code>span</code> field</p>",
        "id": 133063489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639129
    },
    {
        "content": "<p>and replace it with a <code>location</code></p>",
        "id": 133063495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639132
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 133063502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639141
    },
    {
        "content": "<p>in the case of arguments, I guess, there is no \"location\"</p>",
        "id": 133063512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639150
    },
    {
        "content": "<p>It isn't obvious to me how to get the location for the first of those cases.</p>",
        "id": 133063518,
        "sender_full_name": "davidtwco",
        "timestamp": 1535639158
    },
    {
        "content": "<p>there is none</p>",
        "id": 133063558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639164
    },
    {
        "content": "<p>Yeah, what you said.</p>",
        "id": 133063563,
        "sender_full_name": "davidtwco",
        "timestamp": 1535639165
    },
    {
        "content": "<p>so perhaps it has to be an <code>Option&lt;Location&gt;</code></p>",
        "id": 133063577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639175
    },
    {
        "content": "<p>Should I still keep the span - since in some cases that won't be computable by the location?</p>",
        "id": 133063622,
        "sender_full_name": "davidtwco",
        "timestamp": 1535639216
    },
    {
        "content": "<p>yes</p>",
        "id": 133063652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639244
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 133063664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639255
    },
    {
        "content": "<p>I mean it's fine</p>",
        "id": 133063668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639259
    },
    {
        "content": "<p>the most concise representation would be to have some method that gets the span given the mir</p>",
        "id": 133063679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639271
    },
    {
        "content": "<p>and perhaps not use <code>Option&lt;Location&gt;</code> but a more meaningful custom enum, like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">InitLocation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"n\">Local</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Statement</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or something</p>",
        "id": 133063747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639304
    },
    {
        "content": "<p>but I think it's fine to just add an <code>opt_location</code> field and explain why it is sometimes <code>None</code></p>",
        "id": 133063763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What's the best way to check if the <code>rustc::ty::Const</code> I have is <code>std::ops::Index::index</code>?</p>",
        "id": 133066399,
        "sender_full_name": "davidtwco",
        "timestamp": 1535642174
    },
    {
        "content": "<p>that's not really a well-formed question</p>",
        "id": 133066471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642273
    },
    {
        "content": "<p>what is this \"const\"?</p>",
        "id": 133066479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642283
    },
    {
        "content": "<p>what I mean is: a <em>type</em> can implement <code>Index&lt;T&gt;</code></p>",
        "id": 133066522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642291
    },
    {
        "content": "<p>i'm not sure what it means for a <em>constant</em> to be <code>Index</code></p>",
        "id": 133066526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642300
    },
    {
        "content": "<p>what is the role that the constant plays? :)</p>",
        "id": 133066538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642327
    },
    {
        "content": "<p>Well, the terminator is <code>TerminatorKind::Call</code>, the <code>func</code> of that is a <code>Operand::Constant</code>, which contains a <code>ty::Const</code>, which when you print in a debug log, says <code>const std::ops::index::Index</code>.</p>",
        "id": 133066570,
        "sender_full_name": "davidtwco",
        "timestamp": 1535642361
    },
    {
        "content": "<p>I figure if we find out we called <code>index(..)</code> on a value and have a <code>AccessKind::MutableBorrow</code> then we should add the help message - I've got the function we called, I just don't know what to compare that against to confirm it is in fact <code>std::ops::index::Index</code>.</p>",
        "id": 133066652,
        "sender_full_name": "davidtwco",
        "timestamp": 1535642427
    },
    {
        "content": "<p>The terminator is what I got from the location <code>bb9[11]</code> that I was previously looking for, where <code>_9</code> was assigned.</p>",
        "id": 133066707,
        "sender_full_name": "davidtwco",
        "timestamp": 1535642510
    },
    {
        "content": "<blockquote>\n<p>Well, the terminator is <code>TerminatorKind::Call</code>, the <code>func</code> of that is a <code>Operand::Constant</code>, which contains a <code>ty::Const</code>, which when you print in a debug log, says <code>const std::ops::index::Index</code>.</p>\n</blockquote>\n<p>ah I misunderstood your question</p>",
        "id": 133066910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642694
    },
    {
        "content": "<p>yes, ok, so...</p>",
        "id": 133066919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642704
    },
    {
        "content": "<p>I think you want to check if the const is a <code>ConstVal::Unevaluated</code></p>",
        "id": 133067038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642844
    },
    {
        "content": "<p>we probably want some helpers for this</p>",
        "id": 133067040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642847
    },
    {
        "content": "<p>the def-id you can get from the lang items</p>",
        "id": 133067041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642853
    },
    {
        "content": "<p><code>self.tcx.lang_items().index_trait()</code></p>",
        "id": 133067054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535642872
    },
    {
        "content": "<p>Annoyingly, this is the <code>DefId</code> I'm getting (it ended up not being a <code>ConstVal::Unevaluated</code>): </p>\n<p><code>DefId(2/0:990 ~ core[177e]::ops[0]::index[0]::Index[0]::index[0])</code></p>\n<p>...and this is the <code>DefId</code> I expect (from lang items):</p>\n<p><code>DefId(2/0:988 ~ core[177e]::ops[0]::index[0]::Index[0]</code></p>",
        "id": 133069356,
        "sender_full_name": "davidtwco",
        "timestamp": 1535645264
    },
    {
        "content": "<p>Actually, pasting it out like that helped spot the difference I didn't see.</p>",
        "id": 133069413,
        "sender_full_name": "davidtwco",
        "timestamp": 1535645296
    },
    {
        "content": "<p>I feel like I know this stuff but I'm struggling to remember: what's the best way to get the not-a-compiler-temporary type from a place? Is there a helper function that'll work out the original type that the user was using?</p>",
        "id": 133071394,
        "sender_full_name": "davidtwco",
        "timestamp": 1535647746
    },
    {
        "content": "<p>do you mean <code>place.ty(tcx).to_ty()</code> ?</p>",
        "id": 133071931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535648378
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/tcx/enum.PlaceTy.html#method.to_ty\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/tcx/enum.PlaceTy.html#method.to_ty\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/tcx/enum.PlaceTy.html#method.to_ty</a></p>",
        "id": 133071939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535648388
    },
    {
        "content": "<p>It isn't that - it gives me a type to print, but it returns <code>std::string::String</code> rather than <code>std::collections::HashMap&lt;&amp;str, std::string::String&gt;</code> that I'd expect. <code>_9</code> has the value of <code>std::string::String</code> - it's correct; but that's a compiler temporary, the actual type that the user would expect is the hashmap.</p>",
        "id": 133072463,
        "sender_full_name": "davidtwco",
        "timestamp": 1535648938
    },
    {
        "content": "<p>what type are you looking for exactly?</p>",
        "id": 133072646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535649158
    },
    {
        "content": "<p>you want to find the type that failed to implement <code>IndexMut</code>?</p>",
        "id": 133072674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535649194
    },
    {
        "content": "<p>if so, you can extract it from the \"substs\" applied to <code>Index</code></p>",
        "id": 133072688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535649214
    },
    {
        "content": "<p>you should be able to extract the \"self type\" out of the constant</p>",
        "id": 133072697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535649232
    },
    {
        "content": "<p>and/or extract the type of the receiver (but I guess that will be a <code>&amp;HashMap&lt;...&gt;</code>)</p>",
        "id": 133072748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535649247
    },
    {
        "content": "<blockquote>\n<p>you want to find the type that failed to implement <code>IndexMut</code>?</p>\n</blockquote>\n<p>Sorry, I wasn't clear, this is the type I'm looking for, yeah.</p>",
        "id": 133072778,
        "sender_full_name": "davidtwco",
        "timestamp": 1535649303
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/53830\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53830\">#53830</a> - sorry about all the questions.</p>",
        "id": 133074681,
        "sender_full_name": "davidtwco",
        "timestamp": 1535651275
    },
    {
        "content": "<p>heh no worries!</p>",
        "id": 133074734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535651296
    },
    {
        "content": "<p>I'm clearly out of practice for having a lazy week or two.</p>",
        "id": 133074754,
        "sender_full_name": "davidtwco",
        "timestamp": 1535651315
    },
    {
        "content": "<p>I updated this to address your suggestion <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.</p>",
        "id": 133126801,
        "sender_full_name": "davidtwco",
        "timestamp": 1535725055
    },
    {
        "content": "<p>ah, great</p>",
        "id": 133126861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725085
    },
    {
        "content": "<p>Well, I guess I updated it with my suggestion regarding your question.</p>",
        "id": 133126874,
        "sender_full_name": "davidtwco",
        "timestamp": 1535725109
    },
    {
        "content": "<p>I like your suggestion</p>",
        "id": 133127325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725675
    },
    {
        "content": "<p>if you'll forgive me, I have some ideas for how to \"go for the gold\" here =)</p>",
        "id": 133127407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725746
    },
    {
        "content": "<p>that is, some further tweaks we could do</p>",
        "id": 133127413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725750
    },
    {
        "content": "<p>will leave a comment</p>",
        "id": 133127416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725758
    },
    {
        "content": "<p>actually hmm</p>",
        "id": 133127425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725772
    },
    {
        "content": "<p>this may not be the right place to do what I was going to suggest :)</p>",
        "id": 133127429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725777
    },
    {
        "content": "<p>nm, I'll leave a more limited comment</p>",
        "id": 133127433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725783
    },
    {
        "content": "<p>Do you want me to attempt making that change to use a predicate?</p>",
        "id": 133129784,
        "sender_full_name": "davidtwco",
        "timestamp": 1535728374
    },
    {
        "content": "<p>I've been debating. I guess I think it'd be better</p>",
        "id": 133129826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728423
    },
    {
        "content": "<p>I wanted to go and search and see where we do similar tings</p>",
        "id": 133129829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728428
    },
    {
        "content": "<p>see if we could make a helper</p>",
        "id": 133129833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728431
    },
    {
        "content": "<p>now that we have a proper rustc query this is <em>relatively</em> painless</p>",
        "id": 133129863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728442
    },
    {
        "content": "<p>I <a href=\"https://github.com/rust-lang/rust/blob/b75b0471a8b87c44e0bd953d2a5c36d896128723/src/librustc/traits/mod.rs#L589\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b75b0471a8b87c44e0bd953d2a5c36d896128723/src/librustc/traits/mod.rs#L589\">found this</a> which as far as I could tell looked similar to what we'd want.</p>",
        "id": 133129930,
        "sender_full_name": "davidtwco",
        "timestamp": 1535728526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Did you get a chance to work out if I should attempt to use a predicate here?</p>",
        "id": 133312758,
        "sender_full_name": "davidtwco",
        "timestamp": 1536070252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think it'd be better, but what I did not do was go and find the best example of doing so</p>",
        "id": 133328319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536086337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What's the best way for me to get access to <code>infcx</code> in order to call <code>predicate_{must|may}_hold</code> in <code>librustc_mir/borrow_check/mutability_errors.rs</code>?</p>",
        "id": 133363628,
        "sender_full_name": "davidtwco",
        "timestamp": 1536138271
    },
    {
        "content": "<p>I've mangled things around such that I can call <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/traits/fn.type_known_to_meet_bound.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/traits/fn.type_known_to_meet_bound.html\">type_known_to_meet_bound</a>. </p>\n<p>However, this thinks that <code>IndexMut</code> is not implemented. I can see in the logs that it is looking at <code>std::string::String</code> (which is the type I'm indexing in my \"has IndexMut\" test case) against all the implementations of <code>IndexMut</code> - however, I think it is because I've not specified what <code>T</code> I'm looking for in <code>IndexMut&lt;T&gt;</code> that it never finds it. Just guessing though. </p>\n<p>It also causes the other test case to panic with a \"region constraints already solved\" error - I've not bothered to look into that given that it isn't working on the primary case I'd like it to solve.</p>",
        "id": 133367672,
        "sender_full_name": "davidtwco",
        "timestamp": 1536144524
    },
    {
        "content": "<p>At least with the current implementation, if it incorrectly assumes <code>IndexMut</code> is implemented for the type then it only becomes less helpful rather than making a wrong suggestion.</p>",
        "id": 133367746,
        "sender_full_name": "davidtwco",
        "timestamp": 1536144705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> did you push your commit?</p>",
        "id": 133377071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155706
    },
    {
        "content": "<p>I haven't because it wasn't quite working.</p>",
        "id": 133377176,
        "sender_full_name": "davidtwco",
        "timestamp": 1536155826
    },
    {
        "content": "<p>I'll make another branch with it so I don't waste Travis time and include it in the PR, for now here's the diff: <a href=\"https://gist.github.com/davidtwco/399f769051d890af9aedbdf022ad6097\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/399f769051d890af9aedbdf022ad6097\">https://gist.github.com/davidtwco/399f769051d890af9aedbdf022ad6097</a></p>",
        "id": 133377284,
        "sender_full_name": "davidtwco",
        "timestamp": 1536155929
    },
    {
        "content": "<p>Here's it on a branch: <a href=\"https://github.com/davidtwco/rust/commit/f053d19716ce11f82fbb15356afe5eb9ad2cddbf\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/commit/f053d19716ce11f82fbb15356afe5eb9ad2cddbf\">https://github.com/davidtwco/rust/commit/f053d19716ce11f82fbb15356afe5eb9ad2cddbf</a></p>",
        "id": 133377572,
        "sender_full_name": "davidtwco",
        "timestamp": 1536156174
    },
    {
        "content": "<p>If it is easier for you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (if you're intending to do a build) then I could give you access to the box I have a build on. Could save some time. It's just some (relatively) beefy dedicated box I rent for faster compilations on Rust contributions and saving me rebuilding between machines - so there's nothing else on it.</p>",
        "id": 133385457,
        "sender_full_name": "davidtwco",
        "timestamp": 1536163552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok lemme look now..</p>",
        "id": 133385717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536163760
    },
    {
        "content": "<p><em>cough</em></p>",
        "id": 133398427,
        "sender_full_name": "davidtwco",
        "timestamp": 1536177330
    },
    {
        "content": "<p>sorry :)</p>",
        "id": 133399278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536178215
    },
    {
        "content": "<p>ok, so, I looked a bit more at <code>type_known_to_meet_bound</code>. It's not really what you are looking for. Among other things, it is designed for queries like <code>T: Copy</code> that have only one type involved. But in this case, we want to check <code>T: IndexMut&lt;U&gt;</code> -- two types.</p>\n<p>However, we do have access to the substs from the call, which is convenient.</p>",
        "id": 133401528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536180353
    },
    {
        "content": "<p>ok so I think that the <code>substs</code> we have is for the method call; this actually <em>extends</em> the substs from the trait with those of the method. In this case, though, that is probably equal.</p>",
        "id": 133402904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536181798
    },
    {
        "content": "<p>(yes)</p>",
        "id": 133402964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536181817
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">index_trait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lang_items</span><span class=\"p\">().</span><span class=\"n\">index_trait</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">index_trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TraitRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def_id</span>: <span class=\"cm\">/* DefId of IndexMut */</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Obligation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cause</span>: <span class=\"nc\">ObligationCause</span>::<span class=\"n\">misc</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">DUMMY_NODE_ID</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">recursion_depth</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">predicate</span>: <span class=\"nc\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">predicate_may_hold</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133403100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536181963
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 133403103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536181969
    },
    {
        "content": "<p>I could also imagine adding a few <code>assert!</code> in there</p>",
        "id": 133403118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536181982
    },
    {
        "content": "<p>in particular, asserting that the <code>generics.len()</code> for index-mut trait and index trait are equal, and that the method has an empty set of generics on its own</p>",
        "id": 133403148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182011
    },
    {
        "content": "<p>I assume <code>param_env</code> is <code>self.param_env</code>?</p>",
        "id": 133403152,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182015
    },
    {
        "content": "<p>I've tried almost essentially that.</p>",
        "id": 133403162,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182024
    },
    {
        "content": "<p>yes, param-env is <code>self.param_env</code></p>",
        "id": 133403174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182040
    },
    {
        "content": "<p>Except I used must hold rather than may hold.</p>",
        "id": 133403175,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182041
    },
    {
        "content": "<p>that is ok too</p>",
        "id": 133403216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182046
    },
    {
        "content": "<p>So perhaps that will make the difference.</p>",
        "id": 133403221,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182048
    },
    {
        "content": "<p>well, it may be ok let's say ;)</p>",
        "id": 133403229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182058
    },
    {
        "content": "<p>ok, if you hit problems, let me see that version?</p>",
        "id": 133403240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182070
    },
    {
        "content": "<p>Sure thing. I tried a handful of things so I'll give what you suggested a go and then let you know.</p>",
        "id": 133403374,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182169
    },
    {
        "content": "<p>Apparently if I had tried <code>predicate_may_hold</code> rather than <code>predicate_must_hold</code> then I'd have had it this morning.</p>",
        "id": 133404165,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182925
    },
    {
        "content": "<p>But it does ICE with the non-IndexMut-implementing case still.</p>",
        "id": 133404173,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182942
    },
    {
        "content": "<p>With \"region constraints already solved\".</p>",
        "id": 133404184,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182955
    },
    {
        "content": "<p>oh bother</p>",
        "id": 133404189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182967
    },
    {
        "content": "<p>hmm</p>",
        "id": 133404191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182981
    },
    {
        "content": "<p>Updated that temp branch.</p>",
        "id": 133404194,
        "sender_full_name": "davidtwco",
        "timestamp": 1536182992
    },
    {
        "content": "<p>can you run with <code>RUST_BACKTRACE=1</code></p>",
        "id": 133404280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183071
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/f1d5bfc80c8bb95708524930706e6a8c\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/f1d5bfc80c8bb95708524930706e6a8c\">https://gist.github.com/davidtwco/f1d5bfc80c8bb95708524930706e6a8c</a></p>",
        "id": 133404322,
        "sender_full_name": "davidtwco",
        "timestamp": 1536183123
    },
    {
        "content": "<p>oh, interesting</p>",
        "id": 133404358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183145
    },
    {
        "content": "<p>well that's annoying</p>",
        "id": 133404801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183673
    },
    {
        "content": "<p>there's not really a <em>good</em> reason for that code to fail</p>",
        "id": 133404803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183679
    },
    {
        "content": "<p><em>actually</em></p>",
        "id": 133404815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183718
    },
    {
        "content": "<p>that .. is kind of a bug in canonicalization, now that I think about it</p>",
        "id": 133404856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183727
    },
    {
        "content": "<p>in particular, if you have the various \"replace all free regions\" flags set...we still track if you have the same region variable appearing twice..which I think we didn't want to do</p>",
        "id": 133404873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183770
    },
    {
        "content": "<p>I'm not sure how I'd go about fixing that?</p>",
        "id": 133405303,
        "sender_full_name": "davidtwco",
        "timestamp": 1536184280
    },
    {
        "content": "<p>yeah, I wasn't suggesting you should</p>",
        "id": 133405394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536184414
    },
    {
        "content": "<p>maybe we should land your PR as is</p>",
        "id": 133405397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536184418
    },
    {
        "content": "<p>and file a follow-up issue</p>",
        "id": 133405403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536184421
    },
    {
        "content": "<p>with your diff here in the issue</p>",
        "id": 133405413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536184442
    },
    {
        "content": "<p>I can try to patch canonicalization in the meantime</p>",
        "id": 133405448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536184451
    },
    {
        "content": "<p>I can keep the branch around that I've been doing the experimentation on.</p>",
        "id": 133405455,
        "sender_full_name": "davidtwco",
        "timestamp": 1536184476
    }
]