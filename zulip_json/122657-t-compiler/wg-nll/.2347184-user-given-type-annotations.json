[
    {
        "content": "<p>So this is one of the major remaining bugs to fix</p>",
        "id": 130977159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560540
    },
    {
        "content": "<p>I was talking about it with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and we thought we could brainstorm how to fix</p>",
        "id": 130977164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560550
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> who did the existing work on this)</p>",
        "id": 130977170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560568
    },
    {
        "content": "<p>I think the first thing is to try to catalog where the points of concern are</p>",
        "id": 130977174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560576
    },
    {
        "content": "<p>the only case I that I believe works today is this one:</p>",
        "id": 130977186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where <code>x</code> is a single variable, not a pattern like <code>_</code> or <code>(x, y)</code></p>",
        "id": 130977190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560601
    },
    {
        "content": "<p>should we perhaps transcribe <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-372716098\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-372716098\">comment</a> with a categorization of cases remaing, transcribe that to the Issue Descriptioin</p>",
        "id": 130977238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533560644
    },
    {
        "content": "<p>with check boxes, even? :)</p>",
        "id": 130977241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533560651
    },
    {
        "content": "<p>the other cases then are :</p>\n<ul>\n<li><code>let</code> with a pattern</li>\n<li><code>foo::&lt;...&gt;</code> expressions </li>\n<li><code>Foo::&lt;...&gt; { .. .}</code> struct constructors</li>\n<li><code>foo.bar::&lt;...&gt;</code> method calls</li>\n<li><code>&lt;T as Foo&gt;::bar</code> sorts of paths maybe? This may be the same as a <code>foo::&lt;..&gt;</code> expression</li>\n</ul>",
        "id": 130977243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560657
    },
    {
        "content": "<p>ohj it had check boxes</p>",
        "id": 130977244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533560658
    },
    {
        "content": "<p>oh yes I think I remember going through that exercise with <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> before :)</p>",
        "id": 130977252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560675
    },
    {
        "content": "<p>i'm going to do it</p>",
        "id": 130977253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533560675
    },
    {
        "content": "<p>but it looks like that list is roughly the same as mine</p>",
        "id": 130977267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560701
    },
    {
        "content": "<p>I'm not entirely sure what</p>\n<blockquote>\n<p>Lifetimes defined but not used, this currently only occurs in the <a href=\"http://yield-subtype.rs\" target=\"_blank\" title=\"http://yield-subtype.rs\">yield-subtype.rs</a> test but that will also need resolved.</p>\n</blockquote>\n<p>was referring to, have to check that test, but I think it's maybe the (unrelated, really) issue <a href=\"https://github.com/rust-lang/rust/issues/51351\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51351\">#51351</a> that <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> fixed recently</p>",
        "id": 130977297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560738
    },
    {
        "content": "<p>(yes, I think I am correct)</p>",
        "id": 130977360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560794
    },
    {
        "content": "<p><a href=\"http://yield-subtype.rs\" target=\"_blank\" title=\"http://yield-subtype.rs\">yield-subtype.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;hi&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130977363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560798
    },
    {
        "content": "<p>so there are a couple of aspects to this</p>",
        "id": 130977390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560827
    },
    {
        "content": "<p>I think that the case of specifying types in substitutions is somewhat different from the other cases</p>",
        "id": 130977402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560849
    },
    {
        "content": "<p>e.g., like <code>foo::&lt;&amp;'a u32&gt;</code> or something</p>",
        "id": 130977411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560860
    },
    {
        "content": "<p>currently, in MIR, those types are just <code>Ty</code> that are embedded in the MIR directly</p>",
        "id": 130977421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560873
    },
    {
        "content": "<p>so I think that something like <code>let x = foo::&lt;&amp;'a u32&gt;(&amp;22)</code> would be a constant reference</p>",
        "id": 130977492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533560917
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span>TMP0 = foo::&lt;&amp;&#39;a u32&gt;\nTMP1 = TMP0(&amp;22)\n</pre></div>",
        "id": 130977601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561029
    },
    {
        "content": "<p>one thought I had for this is that the MIR could stop embedding <code>Ty&lt;'tcx&gt;</code> <em>directly</em></p>",
        "id": 130977613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561042
    },
    {
        "content": "<p>and instead include a <code>TypeIndex</code></p>",
        "id": 130977620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561049
    },
    {
        "content": "<p>and the <code>Mir</code> struct would have a list of types</p>",
        "id": 130977627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561056
    },
    {
        "content": "<p>(probably and substs)</p>",
        "id": 130977629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561061
    },
    {
        "content": "<p>and then we could have constraints</p>",
        "id": 130977637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561068
    },
    {
        "content": "<p>i'm not sure how easy that would be though, might be horribly annoying</p>",
        "id": 130977638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561076
    },
    {
        "content": "<p>the goal would be...</p>",
        "id": 130977641,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561084
    },
    {
        "content": "<p>basically the challenge is.. how do we distinguish \"this is a region that user wrote\"</p>",
        "id": 130977650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561110
    },
    {
        "content": "<p>from \"this is a region we inferred\"</p>",
        "id": 130977652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561114
    },
    {
        "content": "<p>alternatively we could, in those constraints we add, have some other way to \"uniquely identify\" the substs we are constraining</p>",
        "id": 130977717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561162
    },
    {
        "content": "<p>but it seems tricky to do</p>",
        "id": 130977725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561170
    },
    {
        "content": "<p>so the MIR after my change might \"look like\"</p>\n<div class=\"codehilite\"><pre><span></span>B0 {\n  TMP0 = foo::&lt;S0&gt;\n  TMP1 = TMP0(&amp;22)\n}\n\nSubsts {\n  S0 = [&amp;&#39;a u32]\n}\n</pre></div>\n\n\n<p>and then a side constraint like <code>User [ S0 = &amp;'a u32 ]</code> because that was given from the user</p>",
        "id": 130977750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561226
    },
    {
        "content": "<p>let me show a slightly more extended example...</p>",
        "id": 130977789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561243
    },
    {
        "content": "<p><code>foo::&lt;&amp;u32, _&gt;(...)</code></p>",
        "id": 130977803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561256
    },
    {
        "content": "<p>might wind up as <code>foo::&lt;S0&gt;</code> with</p>\n<div class=\"codehilite\"><pre><span></span>substs {\n  S0 = [&amp;&#39;a u32, &amp;&#39;b u32] // final inferred values\n}\n\nuser {\n  S0 = [&amp;&#39;a u32, _] // a canonical type\n}\n</pre></div>",
        "id": 130977821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561289
    },
    {
        "content": "<p>eventually the \"inferred\" values will actually be <em>erased</em> values</p>",
        "id": 130977839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561315
    },
    {
        "content": "<p>anyway, that's the rough idea I had for modifying the MIr. The next question is how to generate those <code>user { .. }</code> things, but let's  leave that aside for the second :)</p>",
        "id": 130977860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> thoughts?</p>",
        "id": 130978059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561559
    },
    {
        "content": "<p>i guess it seems more complicated than what I had idealized</p>",
        "id": 130978134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561624
    },
    {
        "content": "<p>I'm still happy to help out on this issue with any parts of it where I might be of use.</p>",
        "id": 130978144,
        "sender_full_name": "davidtwco",
        "timestamp": 1533561645
    },
    {
        "content": "<p>but I also am sure you know more about the problems that are going t oarise</p>",
        "id": 130978145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561647
    },
    {
        "content": "<p>(I think part of my problem is that I've forgotten your explanation for why emitting more UserAssertTy stmts is not going to suffice for all cases...)</p>",
        "id": 130978187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561712
    },
    {
        "content": "<p>e.g. for turbofish cases: if they wrote <code>\"2048\".parse::&lt;u32&gt;()</code>, I would have thought we could emit UserAssertTy</p>",
        "id": 130978263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561806
    },
    {
        "content": "<p>anyway I have to go AFK</p>",
        "id": 130978266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533561812
    },
    {
        "content": "<p>ok ttyl</p>",
        "id": 130978439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561984
    },
    {
        "content": "<p>we <em>might</em> be able to do <code>UserAssertTy</code> in that case, though it seems complicated, but I don't know about stuff like <code>x = foo::&lt;...&gt;(...)</code> calls</p>",
        "id": 130978466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533562034
    },
    {
        "content": "<p>since then the type parameter may not show up in any variable's type necessarily</p>",
        "id": 130978474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533562046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I definitely think this is going to need some refactoring / exploration help :)</p>",
        "id": 130978481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533562062
    },
    {
        "content": "<p>(oh yes, now I remember thinking that maybe UserAssertTy should take a Place ratehr than a Local or something along those lines</p>",
        "id": 130979404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533563098
    },
    {
        "content": "<p>so there is one other problem which is that things like <code>let PATTERN: TYPE</code> don't obviously have a type to annotate -- there I think  we probably <em>do</em> want to extend <code>UserAssertTy</code>, except that it would take -- not, I think -- a <code>Place</code> but rather some kind of \"pattern-like-thing\"?</p>",
        "id": 130979803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533563628
    },
    {
        "content": "<p>it's probably worth exploring those cases a bit too</p>",
        "id": 130979807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533563634
    },
    {
        "content": "<p>there is e.g.</p>",
        "id": 130979809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533563637
    },
    {
        "content": "<p>I'm making some progress here</p>",
        "id": 131134605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765028
    },
    {
        "content": "<p>I've got a branch that is now recording -- as part of type-check -- the user-given annotations in various fns and method scenarios</p>",
        "id": 131134610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765045
    },
    {
        "content": "<p>e.g., these cases seem to work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[rustc_dump_user_substs]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Here: nothing is given. In fact, it&#39;d be sort of nice to not</span>\n<span class=\"w\">    </span><span class=\"c1\">// have any annotation here.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [?0]</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Here: `u32` is given.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [u32]</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Here: we only want the `T` to be given, the rest should be variables.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Bazoom</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">method</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [?0, u32, ?1]</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Here: all are given</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Bazoom</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">method</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [u8, u16, u32]</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Here: we want in particular that *only* the method `U`</span>\n<span class=\"w\">    </span><span class=\"c1\">// annotation is given, the rest are variables.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22_</span><span class=\"k\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">method</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [?0, ?1, u32]</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Here: nothing is given. In fact, it&#39;d be sort of nice to not</span>\n<span class=\"w\">    </span><span class=\"c1\">// have any annotation here.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22_</span><span class=\"k\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR [?0, ?1, ?2]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131134704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765184
    },
    {
        "content": "<p>well, by work I mean \"we record the write thing\"</p>",
        "id": 131134710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765191
    },
    {
        "content": "<p>I have some thoughts about how to encode it in the MIR level, I think there is something relatively simple we can do</p>",
        "id": 131134711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765203
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 131135123,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> this won't help at all with the pattern case</p>",
        "id": 131135206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765869
    },
    {
        "content": "<p>I think we just have to handle that separately</p>",
        "id": 131135208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765874
    },
    {
        "content": "<p>that's actually the most common, of course</p>",
        "id": 131135211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765880
    },
    {
        "content": "<p>Will you be able to funnel all these cases through the same code that unpacks the complex cases? Or will they need their own handling?</p>",
        "id": 131135242,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765923
    },
    {
        "content": "<p>which do you mean by \"these cases\", sorry?</p>",
        "id": 131135251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765954
    },
    {
        "content": "<p>All the different places you are pulling annotations from.</p>",
        "id": 131135292,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765982
    },
    {
        "content": "<p>I think it will come down to two cases, basically:</p>",
        "id": 131136258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533767359
    },
    {
        "content": "<p>pattern annotations on <code>let</code></p>",
        "id": 131136261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533767363
    },
    {
        "content": "<p>and other annotations</p>",
        "id": 131136265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533767370
    },
    {
        "content": "<p>the latter is what I am focusing on now</p>",
        "id": 131136266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533767374
    },
    {
        "content": "<p>I don't think those two cases will be <em>particularly</em> unified though</p>",
        "id": 131136267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533767382
    },
    {
        "content": "<p>actually... I maybe take that back a bit. We may be able to re-use the <code>UserAssertTy</code> MIR statements</p>",
        "id": 131138417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533770548
    },
    {
        "content": "<p>opened PR <a href=\"https://github.com/rust-lang/rust/pull/53225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53225\">https://github.com/rust-lang/rust/pull/53225</a> — not a complete fix yet but covers a lot of the cases</p>",
        "id": 131181872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533830735
    },
    {
        "content": "<p>this test passes now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR borrowed value does not live long enough [E0597]</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()],</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR borrowed value does not live long enough [E0597]</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()],</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR borrowed value does not live long enough [E0597]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133154705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535758408
    },
    {
        "content": "<p>(on my branch)</p>",
        "id": 133154707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535758412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and whomever else: I'd like to have another change to talk over what we want to do here</p>",
        "id": 133532024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348553
    },
    {
        "content": "<p>the more I think about it, the more unsure I am :)</p>",
        "id": 133532027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348557
    },
    {
        "content": "<p>maybe Monday?</p>",
        "id": 133532028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348559
    },
    {
        "content": "<p>Sure Monday is good. I assume you meant to write “another <em>chance</em> ...”</p>",
        "id": 133537389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536354452
    },
    {
        "content": "<p>yes :)</p>",
        "id": 133539268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536356897
    },
    {
        "content": "<p>ok so on the topic of user-given type annotations...</p>\n<p>I just wrote up some mentoring instructions for <a href=\"https://github.com/rust-lang/rust/issues/54331\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54331\">https://github.com/rust-lang/rust/issues/54331</a>, describing how to handle the type ascription case. </p>\n<p>I realize now how much stuff has yet to be added to rustc-guide :P</p>",
        "id": 134191884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303451
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I had tagged both of you as possible folks for this</p>",
        "id": 134191892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303462
    },
    {
        "content": "<p>there is more than one case</p>",
        "id": 134191895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303468
    },
    {
        "content": "<p>it will require modifying the main type checker, as well as the \"HAIR\" and MIR construction...</p>",
        "id": 134191922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303518
    },
    {
        "content": "<p>does HIR/AST get lowered to HAIR first, before finally being lowered to MIR?</p>",
        "id": 134191923,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537303519
    },
    {
        "content": "<p>oh, dang it</p>",
        "id": 134191924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303520
    },
    {
        "content": "<p>yes, it does</p>",
        "id": 134191928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303524
    },
    {
        "content": "<p>just realized that I sort of left out a step</p>",
        "id": 134191929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303528
    },
    {
        "content": "<p>which is that we have to figure out how this will be reflected in MIR, and that is .. hmm. Potentially mildly tricky?</p>",
        "id": 134191936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303542
    },
    {
        "content": "<p>nah it's .. probably ok</p>",
        "id": 134191940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303555
    },
    {
        "content": "<p>well, we may have to make a new temporary or something, so that we can assert its type in MIR land</p>",
        "id": 134191988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303568
    },
    {
        "content": "<p>anyway the first few steps dont' require that</p>",
        "id": 134191993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537303578
    },
    {
        "content": "<blockquote>\n<p>but <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I had tagged both of you as possible folks for this</p>\n</blockquote>\n<p>I can take this</p>",
        "id": 134192444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537304035
    },
    {
        "content": "<p>I mean, unless <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> really want to do it :)</p>",
        "id": 134192504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537304057
    },
    {
        "content": "<p>i haven't really looked into it yet</p>",
        "id": 134192617,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537304190
    },
    {
        "content": "<p>there are other parts too</p>",
        "id": 134192662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304252
    },
    {
        "content": "<p>but I won't be able to write those up yet...</p>",
        "id": 134192667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304258
    },
    {
        "content": "<p>I am thinking mostly of <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\">what I described here</a></p>",
        "id": 134192682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304272
    },
    {
        "content": "<p>which may be enough to go on, but maybe not</p>",
        "id": 134192688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304278
    },
    {
        "content": "<blockquote>\n<p>i haven't really looked into it yet</p>\n</blockquote>\n<p>me neither but I have no tasks so, I guess when I start taking a look at it I just start tackling it :P</p>",
        "id": 134192695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537304283
    },
    {
        "content": "<blockquote>\n<p>there are other parts too</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span>, I'm fine to do whatever is needed :)</p>",
        "id": 134192916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537304465
    },
    {
        "content": "<p>i think i have an idea of what we wanna do for this issue right now</p>",
        "id": 134193539,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305098
    },
    {
        "content": "<p>we have indeed missed a step</p>",
        "id": 134193695,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305242
    },
    {
        "content": "<p>HAIR to MIR lowering</p>",
        "id": 134193718,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305248
    },
    {
        "content": "<p>Yeah so the challenge here is that</p>",
        "id": 134193844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305395
    },
    {
        "content": "<p>but i think it's a matter of creating a new Rvalue variant?</p>",
        "id": 134193961,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305470
    },
    {
        "content": "<p>or perhaps that is the challenge</p>",
        "id": 134194004,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305484
    },
    {
        "content": "<p>figuring out exactly what kind of node we wanna generate</p>",
        "id": 134194011,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305491
    },
    {
        "content": "<p>or really, what kind of statement</p>",
        "id": 134194031,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305511
    },
    {
        "content": "<p>there is presently a <code>AscribeUserType</code> statement</p>",
        "id": 134194046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305536
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.StatementKind.html#variant.AscribeUserType\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.StatementKind.html#variant.AscribeUserType\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.StatementKind.html#variant.AscribeUserType</a></p>",
        "id": 134194047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305537
    },
    {
        "content": "<p>so we basically want to lower to that</p>",
        "id": 134194060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305550
    },
    {
        "content": "<p>ah, i see it</p>",
        "id": 134194222,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305573
    },
    {
        "content": "<p>actually, I think I take back what I said about <code>Adt</code></p>",
        "id": 134194339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305607
    },
    {
        "content": "<p>well, I don't know</p>",
        "id": 134194347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305613
    },
    {
        "content": "<p>yeah, I think we could refactor that, I stand by what I wrote ;)</p>",
        "id": 134194390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305668
    },
    {
        "content": "<p>but first things first</p>",
        "id": 134194394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry, it looks like i got myself too invested in this right now :D mind if i tackle this instead?</p>",
        "id": 134194499,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537305789
    },
    {
        "content": "<p>heh :) I'll put <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> to work somehow</p>",
        "id": 134194621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305911
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134195145,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537306407
    },
    {
        "content": "<p>hmm... so i'm not sure what happens when we lower the HAIR expression to MIR</p>",
        "id": 134199655,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537312405
    },
    {
        "content": "<p>there are a couple of places that require changing</p>",
        "id": 134199660,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537312413
    },
    {
        "content": "<p><code>as_place.rs</code>, <code>as_rvalue.rs</code>, <code>category.rs</code> and <code>into.rs</code></p>",
        "id": 134199713,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537312451
    },
    {
        "content": "<p><code>category.rs</code> should be easy -- we just return None, since it doesn't match any of the category listed</p>",
        "id": 134199906,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537312740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> woah ok, now i'm feeling the trouble when attempting to lower it to MIR</p>",
        "id": 134201101,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537314598
    },
    {
        "content": "<p><code>AscribeUserType</code> requires an expression as one of its fields</p>",
        "id": 134201152,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537314615
    },
    {
        "content": "<p>and in the <code>ExprType</code> variant you proposed, it doesn't contain any information about the expression that the ascription is applied to</p>",
        "id": 134201155,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537314649
    },
    {
        "content": "<p>perhaps we need to extend it to contain that</p>",
        "id": 134201162,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537314659
    },
    {
        "content": "<p>... in which case, we really need to rename <code>ExprType</code> to maybe <code>TypeAscription</code></p>",
        "id": 134201300,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537314910
    },
    {
        "content": "<p>darn it, i mispoke</p>",
        "id": 134201648,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537315481
    },
    {
        "content": "<p><code>AscribeUserType</code> requires a <code>Place</code></p>",
        "id": 134201653,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537315492
    },
    {
        "content": "<p>ok, so here's what i'm thinking:</p>",
        "id": 134203734,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537319075
    },
    {
        "content": "<p>if i'm not mistaken, the only use of the <code>Place</code> field in <code>AscribeUserType</code> is to get the type of the <code>Place</code> <a href=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L984\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L984\">here</a></p>",
        "id": 134203806,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537319211
    },
    {
        "content": "<p>given that, i wonder if we can just thread through a <code>Ty</code> instead of a <code>Place</code>, in which case this would help us in lowering the type ascriptions, since we can provide the <code>Ty</code> of the ascribed expression</p>",
        "id": 134203955,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537319424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> so the HAIR node has to wrap an expression</p>",
        "id": 134257386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537379233
    },
    {
        "content": "<p>and if/when it is lowered to a MIR operand,  it has to store the result of evaluating that expression into a temporary, assert the type on that temporary, and then return that temporary as a MIR operand</p>",
        "id": 134257415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537379273
    },
    {
        "content": "<p>(if it is lowered to a place, it can do something mildly different)</p>",
        "id": 134257464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537379287
    },
    {
        "content": "<p>I can probably find an example of another HAIR form that works similarly</p>",
        "id": 134257471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537379299
    },
    {
        "content": "<p>huh, that poses some trouble, in particular the way we attempt to <a href=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/build/expr/category.rs#L14-L27\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/build/expr/category.rs#L14-L27\">categorize the expression</a> during MIR construction</p>",
        "id": 134293163,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537430140
    },
    {
        "content": "<p>it is most likely better to be categorized as an <code>Rvalue</code> that can be generated by <code>Into</code></p>",
        "id": 134293247,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537430220
    },
    {
        "content": "<p>but the fact that types can also be ascribed on places is a little problematic</p>",
        "id": 134293266,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537430269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I think there are other \"dual mode\" expressions</p>",
        "id": 134309449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450278
    },
    {
        "content": "<p>hmm</p>",
        "id": 134309465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450316
    },
    {
        "content": "<p>it seems like we don't</p>",
        "id": 134309468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450318
    },
    {
        "content": "<p>well, we can make multiple expressions then</p>",
        "id": 134309489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450322
    },
    {
        "content": "<p>since we do categorize <code>a.b.c: Foo</code> as a \"place expression\" in the HIR</p>",
        "id": 134309535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450354
    },
    {
        "content": "<p>and it's kind of important to preserve that</p>",
        "id": 134309537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450358
    },
    {
        "content": "<p>(That said, I think there is no fundamental reason we <em>can't</em> have the HAIR expression play two roles — but it might be simpler not to.)</p>",
        "id": 134309554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450386
    },
    {
        "content": "<p>I was thinking that you could do an analysis of what role the expression plays before you categorize it</p>",
        "id": 134309774,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537450648
    },
    {
        "content": "<p>There might be a function somewhere where you can input an expression, and it tells you whether it is acting as a place or an rvalue</p>",
        "id": 134309833,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537450707
    },
    {
        "content": "<p>there are such functions</p>",
        "id": 134310360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451292
    },
    {
        "content": "<p>when you say \"expression\" I don't quite know which stage of the IR you are referring to</p>",
        "id": 134310364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451306
    },
    {
        "content": "<p>e.g., for HAIR, there is <a href=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/build/expr/category.rs#L41-L44\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/build/expr/category.rs#L41-L44\"><code>Category::of</code></a></p>",
        "id": 134310376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451324
    },
    {
        "content": "<p>during typeck, we have <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/struct.FnCtxt.html#method.is_place_expr\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/struct.FnCtxt.html#method.is_place_expr\"><code>is_place_expr</code></a> that operates on the HIR</p>",
        "id": 134310398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451354
    },
    {
        "content": "<p>but there is no reason for that to be defined on the <code>FnCtxt</code> in particular, it could be moved very easily</p>",
        "id": 134310414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451384
    },
    {
        "content": "<p>crucially, though, you can see that <code>a.b.c: Foo</code> is <a href=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_typeck/check/mod.rs#L2459-L2461\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_typeck/check/mod.rs#L2459-L2461\">categorized as a place-expr here</a></p>",
        "id": 134310478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451434
    },
    {
        "content": "<p>so I think what we would want to do is — when lowering <code>HIR::ExprKind::Type</code> to HAIR — check if it is a place-expression (using that fn, lifted out from typeck)</p>",
        "id": 134310490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451457
    },
    {
        "content": "<p>and, if so, create a HAIR expression like <code>TypePlace</code> versus <code>TypeValue</code>, or something like that</p>",
        "id": 134310504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451478
    },
    {
        "content": "<p>the only difference between the two being that the first one always decorates a \"place\" expression inside</p>",
        "id": 134310518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451502
    },
    {
        "content": "<p>so it doesn't need to create a temporary to ascribe the type</p>",
        "id": 134310521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451507
    },
    {
        "content": "<p>sound reasonable?</p>",
        "id": 134310525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451510
    },
    {
        "content": "<p>probably we need a better name for those HAIR nodes</p>",
        "id": 134310529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451516
    },
    {
        "content": "<p>maybe <code>AscribeTypeToPlace</code> or something</p>",
        "id": 134310531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451522
    },
    {
        "content": "<p>yes, that's exactly the kind of function that i'm thinking of using during MIR lowering, i.e. in the body of <code>Category::of</code></p>",
        "id": 134311654,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537452574
    },
    {
        "content": "<p>but i suppose it also makes sense to use it during HAIR lowering</p>",
        "id": 134311759,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537452670
    },
    {
        "content": "<blockquote>\n<p>yes, that's exactly the kind of function that i'm thinking of using during MIR lowering, i.e. in the body of <code>Category::of</code></p>\n</blockquote>\n<p>MIR lowering already has this function</p>",
        "id": 134311780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452703
    },
    {
        "content": "<p>it's called <code>Category::of</code> :P</p>",
        "id": 134311786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452712
    },
    {
        "content": "<p>the point is, we don't <em>currently</em> at least have any nodes that require this \"recursive setup\" to figure out the answer</p>",
        "id": 134311833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452730
    },
    {
        "content": "<p>another option would be to try having <code>Type</code> do that</p>",
        "id": 134311844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452743
    },
    {
        "content": "<p>that is, to ask the base expression what category <em>it</em> has</p>",
        "id": 134311858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452754
    },
    {
        "content": "<p>indeed, that i didn't think of</p>",
        "id": 134311866,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537452762
    },
    {
        "content": "<p>but I think this may ultimately be a bit more complex</p>",
        "id": 134311869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452766
    },
    {
        "content": "<p>than figuring it out ahead of time in HAIR time</p>",
        "id": 134311874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452774
    },
    {
        "content": "<p>and in any case the MIR you want to generate is mildly different</p>",
        "id": 134311881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452782
    },
    {
        "content": "<p>yeah, it seems like it makes more sense to just create a new HAIR node</p>",
        "id": 134311889,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537452789
    },
    {
        "content": "<p>I guess i'm not sure, I'd probably try it the way I described first though</p>",
        "id": 134311900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537452808
    },
    {
        "content": "<p>i have a slight problem -- where should i put <code>is_place_expr</code>?</p>",
        "id": 134336012,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537476446
    },
    {
        "content": "<p>i <em>could</em> make it a free-standing function in <code>librustc_typeck/check/mod.rs</code>, but i'm not sure if that's the best place to do so</p>",
        "id": 134336126,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537476524
    },
    {
        "content": "<p>it does not appear to use <code>self</code></p>",
        "id": 134336176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537476574
    },
    {
        "content": "<p>I would make it a method of <code>hir::Expr</code></p>",
        "id": 134336178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537476578
    },
    {
        "content": "<p>if at all possible</p>",
        "id": 134336179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537476581
    },
    {
        "content": "<p>and hence put it in <code>src/librustc/hir/mod.rs</code></p>",
        "id": 134336189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537476593
    },
    {
        "content": "<p>status update: i'm onto the final step in actually asserting the ascribed type with the expression's type</p>",
        "id": 134397101,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537555987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> nice!</p>",
        "id": 134397498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537556402
    },
    {
        "content": "<p>actually, i'm not sure if i even need to do that</p>",
        "id": 134397568,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537556417
    },
    {
        "content": "<p>it seems to me that <a href=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L983-L997\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79fcc58b24d85743d025fd880fca55748662ed3e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L983-L997\">there's already code to assert the place's type with the ascribed type in MIR borrowck</a></p>",
        "id": 134397604,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537556478
    },
    {
        "content": "<p>so... yay?</p>",
        "id": 134397629,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537556515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span>  what did you end up doing about the problem described by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\">here</a> ?</p>",
        "id": 134397782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537556663
    },
    {
        "content": "<p>oh, i wasn't aware of that</p>",
        "id": 134397792,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537556695
    },
    {
        "content": "<p>i.e. I had assumed part of the problem was going to be generalizing the code so that you would assert that a Place matched not merely just a Ty, but rather a series of projections into the Ty</p>",
        "id": 134397798,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537556702
    },
    {
        "content": "<p>(the main reason why that idea appeals to me is that I already <em>tried</em> to take the approach of descending the Type structuring eagerly, in order to make it match up with the Places in the pattern structure. But  I couldn't get that to 100% work, while the idea posted there by Niko seems much more plausible...)</p>",
        "id": 134397881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537556794
    },
    {
        "content": "<blockquote>\n<p>i.e. I had assumed part of the problem was going to be generalizing the code so that you would assert that a Place matched not merely just a Ty, but rather a series of projections into the Ty</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> actually the steps that <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> is working on now are orthogonal from that</p>",
        "id": 134399121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558128
    },
    {
        "content": "<p>that is, they are working on the type ascription and cast expressions</p>",
        "id": 134399132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558144
    },
    {
        "content": "<p>oh sorry</p>",
        "id": 134399135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537558149
    },
    {
        "content": "<p>but we should probably have somebody on that</p>",
        "id": 134399136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558149
    },
    {
        "content": "<p>if <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> is game, it might make sense for them to continue</p>",
        "id": 134399139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558166
    },
    {
        "content": "<p>since their head is in the right space</p>",
        "id": 134399141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558174
    },
    {
        "content": "<p>i need to try and understand what the problem is...</p>",
        "id": 134399526,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537558587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> niko is right that its an orthogonal thing</p>",
        "id": 134399543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537558625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> namely I thought you were working on the part about making bindings like <code>let (a, b): Type;</code> work</p>",
        "id": 134399548,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537558646
    },
    {
        "content": "<p>ah</p>",
        "id": 134399556,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537558672
    },
    {
        "content": "<p>i guess i'm surprised that <code>relate_type_and_user_type</code> doesn't \"propagate downward to more complex type patterns\"</p>",
        "id": 134399625,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537558732
    },
    {
        "content": "<p>so, say given that we have <code>Foo&lt;'static&gt;</code> as a expression type, i would've expected <code>relate_type_and_user_type</code> to be able to relate that with <code>Foo&lt;'a&gt;</code></p>",
        "id": 134399664,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537558793
    },
    {
        "content": "<p>and tell us that there's a type mismatch</p>",
        "id": 134399706,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537558805
    },
    {
        "content": "<p>well hold on</p>",
        "id": 134399892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559050
    },
    {
        "content": "<p>the comment I linked is talking specifically about a <em>pattern</em> where the binding <code>x</code> is, well, \"deep\"</p>",
        "id": 134399905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559075
    },
    {
        "content": "<p><code>let &amp;Foo { x }: &amp;Foo&lt;'static&gt; = ...;</code></p>",
        "id": 134399909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559081
    },
    {
        "content": "<p>and so we end up descending the structure and trying to ascribe a type to <code>x</code> alone</p>",
        "id": 134399928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559103
    },
    {
        "content": "<p>the problem you are outlining, when you say \" say given that we have <code>Foo&lt;'static&gt;</code> as a expression type ...\"</p>",
        "id": 134399948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559129
    },
    {
        "content": "<p>I believe we <em>can</em> accomplish exactly what you describe, via <code>relate_type_and_user_type</code>; you just need to pass in the appropriate <code>ty::Variance</code></p>",
        "id": 134400032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559173
    },
    {
        "content": "<p>Unless I am just wrong about this?</p>",
        "id": 134400051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559191
    },
    {
        "content": "<p>you are not wrong :)</p>",
        "id": 134400060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537559207
    },
    {
        "content": "<p>the thing we cannot (yet) do is to extract the implications of that annotation for <code>x</code> (that is, some field of <code>Foo</code>)</p>",
        "id": 134400081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537559232
    },
    {
        "content": "<p>By the way, I <em>would</em> be interested in trying to attack this problem.  But I think <a href=\"https://github.com/rust-lang/rust/issues/21114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114\">#21114</a> is a better item for me to attack, since I think we can get other people to attack the former.</p>",
        "id": 134400159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559310
    },
    {
        "content": "<p>btw I've got a PR here <a href=\"https://github.com/rust-lang/rust/pull/54447\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54447\">https://github.com/rust-lang/rust/pull/54447</a></p>",
        "id": 134400857,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537560036
    },
    {
        "content": "<p>i might also want to do the refactoring that niko mentioned on the issue</p>",
        "id": 134400874,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537560055
    },
    {
        "content": "<p>heads up <code>ui/run-pass/mir/mir_ascription_coercion.rs</code> failed in CI</p>",
        "id": 134400991,
        "sender_full_name": "lqd",
        "timestamp": 1537560167
    },
    {
        "content": "<p>yeah, knew something was wrong</p>",
        "id": 134402077,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537561295
    },
    {
        "content": "<p>the logic for lowering type ascriptions to MIR is problematic</p>",
        "id": 134402102,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537561320
    },
    {
        "content": "<p>left a few comments <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span></p>",
        "id": 134403556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537562630
    },
    {
        "content": "<p>made changes according to comments</p>",
        "id": 134407750,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537567232
    },
    {
        "content": "<p>so my PR is currently failing on a const eval stack overflow, and I'm not exactly sure how to diagnose this</p>",
        "id": 134468678,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537686693
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 134535078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537804534
    },
    {
        "content": "<p>(doing a local build now)</p>",
        "id": 134557445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537824059
    },
    {
        "content": "<p>i also recently found out that i can use VS to debug on windows</p>",
        "id": 134557932,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537824560
    },
    {
        "content": "<p>so i don't necessarily have to get a linux or mac in order to use gdb/lldb to look at the stack</p>",
        "id": 134557950,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537824597
    },
    {
        "content": "<p>the problem is not specific to constants</p>",
        "id": 134558461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825056
    },
    {
        "content": "<p>hmm. what happens is:</p>\n<ul>\n<li><code>as_local_rvalue</code> is called which invokes</li>\n<li><code>as_operand</code>, which invokes</li>\n<li><code>as_temp</code>, which invokes</li>\n<li><code>into</code>, which invokes</li>\n<li><code>as_local_rvalue</code></li>\n</ul>",
        "id": 134558750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825386
    },
    {
        "content": "<p>I don't quite know why this problem seems to be specific to <code>ValueTypeAscription</code> though</p>",
        "id": 134558763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825404
    },
    {
        "content": "<p>well, it occurs with either case</p>",
        "id": 134558785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825441
    },
    {
        "content": "<p>it seems like the problem is</p>",
        "id": 134558875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825523
    },
    {
        "content": "<p>if you look, <code>into</code> <em>also</em> includes code for <code>Place</code> category things</p>",
        "id": 134558884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825535
    },
    {
        "content": "<p>I added a possible fix, will test and push</p>",
        "id": 134558992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537825668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I pushed a commit — the problem is that <code>into</code> seems to special-case \"places\" to avoid precisely this loop</p>",
        "id": 134559318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826044
    },
    {
        "content": "<p>I added an add'l assertion as well to catch this case...</p>",
        "id": 134559323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826053
    },
    {
        "content": "<p>huh, so it's actually a pre-existing bug</p>",
        "id": 134559369,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826140
    },
    {
        "content": "<p>because all Category::Place expressions aren't supposed to be handled in the catch-all branch</p>",
        "id": 134559424,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826170
    },
    {
        "content": "<p>there was a missing assertion, at minimum</p>",
        "id": 134559481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826244
    },
    {
        "content": "<p>also, i'm quite confused by the fact that it seems to <em>only</em> happen with const declarations -- tests with other rvalue ascriptions seemed to turn out okay</p>",
        "id": 134559482,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826245
    },
    {
        "content": "<p>no,they all fail</p>",
        "id": 134559483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826251
    },
    {
        "content": "<p>at least for me they did</p>",
        "id": 134559486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826255
    },
    {
        "content": "<p>i see, i suppose i only knew about the const eval case</p>",
        "id": 134559499,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826281
    },
    {
        "content": "<p>if travis is happy with this, i guess we're good to go</p>",
        "id": 134559550,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826306
    },
    {
        "content": "<p>i can also roll in the changes for typecasts though</p>",
        "id": 134559554,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826314
    },
    {
        "content": "<p>perhaps i should do that since merge times with bors is about 3-4 hours</p>",
        "id": 134559571,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537826344
    },
    {
        "content": "<p>I'd say yes, add them in, should be a small-ish change</p>",
        "id": 134559885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826733
    },
    {
        "content": "<p>it'd be nice to have some tests though</p>",
        "id": 134559887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826739
    },
    {
        "content": "<p>unless I missed 'em</p>",
        "id": 134559889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826742
    },
    {
        "content": "<p>this directory <code>src/test/ui/nll/user-annotations/</code></p>",
        "id": 134559935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537826767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> you are planning to add the <code>as</code> code into <a href=\"https://github.com/rust-lang/rust/pull/54447/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54447/\">https://github.com/rust-lang/rust/pull/54447/</a>, right?</p>",
        "id": 134765582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538073682
    },
    {
        "content": "<p>yes, sorry i haven't gotten into it yet</p>",
        "id": 134765595,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538073696
    },
    {
        "content": "<p>no worries just wanted to know, else I would r+</p>",
        "id": 134765685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538073764
    },
    {
        "content": "<p>hmm... so casts are a bit different in the sense that we already have <code>ExprKind::Cast</code> in the HAIR</p>",
        "id": 134862453,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538185510
    },
    {
        "content": "<p>according to issue <a href=\"https://github.com/rust-lang/rust/issues/54332\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54332\">#54332</a>, it says that i should instead lower it differently and reuse the <code>ExprKind::ValueTypeAscription</code> variant that i've created previously</p>",
        "id": 134862500,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538185592
    },
    {
        "content": "<p>I think Niko meant that <code>(x as T)</code> should be lowered as <code>ValueTypeAscription { source: Cast { /* same as currently */ }, user_ty: T }</code>, the <code>Cast</code> is still needed.</p>",
        "id": 134875737,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538212988
    },
    {
        "content": "<p>While your there can you also move the branch in <a href=\"http://expr.rs\" target=\"_blank\" title=\"http://expr.rs\">expr.rs</a> above the <code>// Now comes the rote stuff:</code>comment? Even currently it's in no way rote.</p>",
        "id": 134876214,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538213956
    },
    {
        "content": "<blockquote>\n<p>I think Niko meant that <code>(x as T)</code> should be lowered as <code>ValueTypeAscription { source: Cast { /* same as currently */ }, user_ty: T }</code>, the <code>Cast</code> is still needed.</p>\n</blockquote>\n<p>what you wrote there would mean that i have to box the ExprKind</p>",
        "id": 134888690,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538239858
    },
    {
        "content": "<p>oh, nevermind... I can use the ExprKind::to_ref method so that i don't need to box it</p>",
        "id": 134888878,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538240178
    },
    {
        "content": "<p>Doesn't <code>to_ref</code> box it?</p>",
        "id": 134889195,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538240772
    },
    {
        "content": "<p>not sure, i just know that it typechecks</p>",
        "id": 134890068,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538242388
    },
    {
        "content": "<p>NUPE, it doesn't type check</p>",
        "id": 134890984,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538244412
    },
    {
        "content": "<p>primarily because ExprKind doesn't implement ToRef</p>",
        "id": 134890995,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538244437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> yes you have to box the ExprKind... seems ok?</p>",
        "id": 134985577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416336
    },
    {
        "content": "<p>I did indeed mean what <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> suggested</p>",
        "id": 134985583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416345
    },
    {
        "content": "<p>i just haven't seen this pattern before for other variants</p>",
        "id": 134985591,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538416362
    },
    {
        "content": "<p>so wanted to double-check if that was the solution</p>",
        "id": 134985595,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538416373
    },
    {
        "content": "<p>well, I'm not sure about boxing</p>",
        "id": 134985611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416394
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb/src/librustc_mir/hair/cx/expr.rs#L159-L178\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb/src/librustc_mir/hair/cx/expr.rs#L159-L178\">here is an example where we do something similar</a></p>",
        "id": 134985622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416410
    },
    {
        "content": "<p>except there we are wrapping something else with a <code>Cast</code> node</p>",
        "id": 134985642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416437
    },
    {
        "content": "<p>in general, one HIR node can definitely to multiple HAIR nodes (e.g., for adjustments)</p>",
        "id": 134985756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416522
    },
    {
        "content": "<p>so is it true that i should follow this format?</p>",
        "id": 134986427,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538417050
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 134986454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417084
    },
    {
        "content": "<p>however</p>",
        "id": 134986462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417088
    },
    {
        "content": "<p>well..</p>",
        "id": 134986466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417092
    },
    {
        "content": "<p>i.e. create a <code>cast_expr</code>, and then put it inside of <code>ValueTypeAscription</code></p>",
        "id": 134986471,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538417100
    },
    {
        "content": "<p>so there are two options</p>",
        "id": 134986481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417107
    },
    {
        "content": "<p>we could just modify casts to always carry a user-type I guess..</p>",
        "id": 134986490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417114
    },
    {
        "content": "<p>but it seems better to nest it</p>",
        "id": 134986494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417117
    },
    {
        "content": "<p>however: we don't <em>always</em> have to do so</p>",
        "id": 134986500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417123
    },
    {
        "content": "<p>e.g. <code>foo as u32</code> would need a <code>ValueTypeAscription</code></p>",
        "id": 134986514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417138
    },
    {
        "content": "<p>there is some efficiency cost so it may be worth distinguishing</p>",
        "id": 134986521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417148
    },
    {
        "content": "<blockquote>\n<p>i.e. create a <code>cast_expr</code>, and then put it inside of <code>ValueTypeAscription</code></p>\n</blockquote>\n<p>right</p>",
        "id": 134986565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417165
    },
    {
        "content": "<p>I guess to start we can do it indiscriminantely</p>",
        "id": 134986569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417168
    },
    {
        "content": "<p>when perf becomes a problem we can revisit</p>",
        "id": 134986583,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538417179
    },
    {
        "content": "<p>exactly</p>",
        "id": 134986588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538417185
    },
    {
        "content": "<p>should probably write a note on that point</p>",
        "id": 134986607,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538417201
    },
    {
        "content": "<p>ok, so my naïve implementation didn't work</p>",
        "id": 135055354,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538506006
    },
    {
        "content": "<p>for casts?</p>",
        "id": 135055390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538506046
    },
    {
        "content": "<p>yes</p>",
        "id": 135055404,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538506054
    },
    {
        "content": "<p>in fact it passed my test case when it's supposed to fail</p>",
        "id": 135055469,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538506085
    },
    {
        "content": "<p>i wonder what the type of the cast expression is</p>",
        "id": 135055502,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538506122
    },
    {
        "content": "<p>perhaps i'm not using it correctly</p>",
        "id": 135055507,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538506129
    },
    {
        "content": "<p>maybe check the MIR you are generating?</p>",
        "id": 135055703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538506291
    },
    {
        "content": "<p>if you push the code, I'll take a look</p>",
        "id": 135055707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538506298
    },
    {
        "content": "<p>I have, in fact it's high five that told me about the error</p>",
        "id": 135058938,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538509257
    },
    {
        "content": "<p>That was in fact what I had in mind for next steps too</p>",
        "id": 135058975,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538509296
    },
    {
        "content": "<p>it might be something to do with constants</p>",
        "id": 135059064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538509359
    },
    {
        "content": "<p>hmm</p>",
        "id": 135060804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538511069
    },
    {
        "content": "<p>your PR <em>looks</em> reasonable</p>",
        "id": 135060806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538511074
    },
    {
        "content": "<p>I can imagine the problems around constants, but I'm not sure why the test is not passing yet...</p>",
        "id": 135060818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538511090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> make any progress here? We could land the type ascriptions and come back to the cast expressions</p>",
        "id": 135130268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597780
    },
    {
        "content": "<p>no, i haven't looked into this yesterday unfortunately</p>",
        "id": 135130279,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538597797
    },
    {
        "content": "<p>but yes, perhaps that's what we can do for now</p>",
        "id": 135130293,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538597812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i've just removed my last commit for the type casts</p>",
        "id": 135130406,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538597897
    },
    {
        "content": "<p>think it's ready to be r+'d</p>",
        "id": 135130408,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1538597901
    },
    {
        "content": "<p>ok</p>",
        "id": 135131455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538598490
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you think you'll be looking into the ICE on your PR <a href=\"https://github.com/rust-lang/rust/issues/54757\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54757\">#54757</a> any time soon?</p>",
        "id": 135249043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538739018
    },
    {
        "content": "<p>the reason that I ask is that it looks similar to ICE's that I am dealing with elsewhere, and so I am curious if you already have a fix in mind. (and/or if you think it overlaps with bugs related to normalization...)</p>",
        "id": 135249084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538739078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I am investigating this ICE right now, yes.</p>",
        "id": 135261590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753148
    },
    {
        "content": "<p>(if you have other examples, I'd like to see them)</p>",
        "id": 135261908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753407
    },
    {
        "content": "<p>Well some are on a development branch, so who knows...?</p>",
        "id": 135264497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538756203
    },
    {
        "content": "<p>here's the relevant sections of the MIR that gets generated with my attempt at the \"respect casts\" issue:</p>\n<p>first, the temporary created by <code>ValueTypeAscription</code> when lowering to MIR and the cast temporary is defined as such:</p>\n<div class=\"codehilite\"><pre><span></span>let _2: &amp;u32 as Canonical { variables: [CanonicalVarInfo { kind: Region }], value: &amp;u32 };\nlet mut _3: &amp;&#39;static u32;\n</pre></div>\n\n\n<p>then, the relevant lines pertaining to <code>ValueTypeAscription</code> is here:</p>\n<div class=\"codehilite\"><pre><span></span>        _2 = &amp;(*_3);\n        StorageDead(_4);\n        AscribeUserType(_2, o, Canonical { variables: [CanonicalVarInfo { kind: Region }], value: &amp;u32 });\n</pre></div>",
        "id": 135431451,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539037344
    },
    {
        "content": "<p>the question that immediately popped up in my head is \"how do you even represent a &amp;'static u32 in canonical types?\"</p>",
        "id": 135431471,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539037396
    },
    {
        "content": "<p>or is it impossible and we are stuck with this data structure?</p>",
        "id": 135431479,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539037437
    },
    {
        "content": "<p>because whatever it is doing right now seems to not be able to capture the intent of &amp;'static u32 for <code>_2</code>, which is what we need</p>",
        "id": 135431523,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539037465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I wonder if the cast problem was related to the bug I found in <a href=\"https://github.com/rust-lang/rust/pull/54757\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54757\">https://github.com/rust-lang/rust/pull/54757</a></p>",
        "id": 135468299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090862
    },
    {
        "content": "<p>we should try your commits again</p>",
        "id": 135468307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090867
    },
    {
        "content": "<blockquote>\n<p>the question that immediately popped up in my head is \"how do you even represent a &amp;'static u32 in canonical types?\"</p>\n</blockquote>\n<p>I don't know what the problem would be here, that should .. be fine?</p>",
        "id": 135468316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090879
    },
    {
        "content": "<p>I guess you're saying that we are getting the wrong \"user type\"; might be true, but it's not a limitation of <code>Canonical</code></p>",
        "id": 135468387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090939
    },
    {
        "content": "<p>yep, travis is not happy</p>",
        "id": 135500233,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539120321
    },
    {
        "content": "<p>and yes, i was attempting to express that the canonical types are not exactly \"canonical\", so to speak</p>",
        "id": 135500292,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539120365
    },
    {
        "content": "<p>as in, they're not exactly the type that the user has ascribed to the expression</p>",
        "id": 135500307,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539120379
    },
    {
        "content": "<p>or in this case, not the exact target type the user wishes to cast to</p>",
        "id": 135500323,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539120407
    },
    {
        "content": "<p>thing is, they <em>are</em>, so we must be canonicalizing the wrong thing</p>",
        "id": 135500440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539120508
    },
    {
        "content": "<p>would have to dig in a bit more to see why I guess</p>",
        "id": 135500448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539120524
    },
    {
        "content": "<p>they ought to e.g. preserve <code>'static</code>, unless the input type did not have <code>'static</code> to start with</p>",
        "id": 135500461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539120541
    },
    {
        "content": "<p>that's what i thought initially as well, and i can point to you where i think the culprit is</p>",
        "id": 135508387,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539129756
    },
    {
        "content": "<p>here: <a href=\"https://github.com/rust-lang/rust/pull/54938/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R4143\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54938/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R4143\">https://github.com/rust-lang/rust/pull/54938/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R4143</a></p>",
        "id": 135508412,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539129794
    },
    {
        "content": "<p>i've tried moving this up so that i use the canonicalized type directly</p>",
        "id": 135508426,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539129820
    },
    {
        "content": "<p>instead of it being passed through all the cast checks and whatnot</p>",
        "id": 135508437,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539129839
    },
    {
        "content": "<p>and it still didn't work</p>",
        "id": 135508472,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539129843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> argh forgot about this I will do some digging now</p>",
        "id": 135994625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539804066
    },
    {
        "content": "<p>ok, the problem is caused by shadowing</p>",
        "id": 135997206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806600
    },
    {
        "content": "<p>the <code>ty</code> you want to be referring to is bound in the <code>match</code> higher up, but the one you <em>are</em> referring to is bound here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135997226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806633
    },
    {
        "content": "<p>I don't know what's up with the const evaluation, otoh, I guess it's something caused by introducing a <code>let</code> and an <code>ascribeusertype</code> into the MIR</p>",
        "id": 135997281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806665
    },
    {
        "content": "<p>probably..harmless enough, but kind of lame</p>",
        "id": 135997284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806669
    },
    {
        "content": "<p>hmm</p>",
        "id": 135997398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806818
    },
    {
        "content": "<p>maybe not the whole story</p>",
        "id": 135997399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806820
    },
    {
        "content": "<p>test still doesn't pass for some reason</p>",
        "id": 135997404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539806825
    },
    {
        "content": "<p>what ended up being the problem for this?</p>",
        "id": 136242697,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1540179081
    },
    {
        "content": "<p>because i surely didn't spot what it was</p>",
        "id": 136242698,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1540179090
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span>, there was the shadowing I pointed out earlier (on this topic)</p>",
        "id": 136274518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540221986
    },
    {
        "content": "<p>but in terms of the consts, there is some const code that was a bit over-active in terms of issuing errors because we now emitted the <code>ValidateUserTypeAscription</code> opcode...</p>",
        "id": 136274543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222017
    },
    {
        "content": "<p>...I side-stepped that for the time being</p>",
        "id": 136274551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222022
    },
    {
        "content": "<p>by not emitting those MIR statements for ascriptions like <code>x as usize</code></p>",
        "id": 136274570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222034
    },
    {
        "content": "<p>since we don't need them anyway</p>",
        "id": 136274579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222038
    },
    {
        "content": "<p>the const code should prob be fixed though</p>",
        "id": 136274602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222051
    },
    {
        "content": "<p>so I was looking at breaking up <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">#47184</a> into issues for the remaining problems</p>",
        "id": 136792258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920401
    },
    {
        "content": "<p>we've really made good progress it seems</p>",
        "id": 136792266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920405
    },
    {
        "content": "<p>I see a few remaining cases:</p>\n<ul>\n<li>ref bindings: e.g. <code>let ref x: u32 = 3;</code>, broken out into <a href=\"https://github.com/rust-lang/rust/issues/55401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55401\">#55401</a></li>\n<li>Associated constants in patterns: <code>&lt;T as Foo&gt;::BAR</code> ?</li>\n<li>types are captured post normalization (<a href=\"https://github.com/rust-lang/rust/issues/54940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54940\">#54940</a>)</li>\n</ul>",
        "id": 136792284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920432
    },
    {
        "content": "<p>I'm not sure about the associated constants in patterns case</p>",
        "id": 136792313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920465
    },
    {
        "content": "<p>e.g., this does not error today:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136792367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920484
    },
    {
        "content": "<p>and it's not clear that it <em>should</em></p>",
        "id": 136792375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920489
    },
    {
        "content": "<p>ah, but this <strong>does</strong> error today (using a <code>Cell</code> to force invariance)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136792513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I see you put <a href=\"https://github.com/rust-lang/rust/issues/55401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55401\">https://github.com/rust-lang/rust/issues/55401</a> as NLL-deferred, you don't think it needs to be fixed for the release?</p>",
        "id": 136793197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540921213
    },
    {
        "content": "<p>I'm trying to think what would be an example of a program that (fails to) error as a result of <a href=\"https://github.com/rust-lang/rust/issues/55401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55401\">#55401</a></p>",
        "id": 136793251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540921276
    },
    {
        "content": "<p>I think that’s part of why I deferred it ...</p>",
        "id": 136795197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540922978
    },
    {
        "content": "<p>But at this point we can promote it to release milestone</p>",
        "id": 136795258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540923005
    },
    {
        "content": "<p>I wasn't able yet to come up with a problem program</p>",
        "id": 136795295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923058
    },
    {
        "content": "<p>hmm. this is worrisome. This code (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c9c5ca8bf871fcec58053dcc3dedb800\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c9c5ca8bf871fcec58053dcc3dedb800\">playpen</a>) errors, but if I <em>uncomment</em> <code>#![feature(nll)]</code>, the compiler <strong>accepts</strong> it.</p>",
        "id": 136800902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540927875
    },
    {
        "content": "<p>better file a ticket</p>",
        "id": 136800912,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540927892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that code looks ok to me though</p>",
        "id": 136801016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540927996
    },
    {
        "content": "<p>I'm not sure why we reject it outside of NLL</p>",
        "id": 136801020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928002
    },
    {
        "content": "<p>in particular I expect <code>&amp;22</code> to be promoted</p>",
        "id": 136801031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928017
    },
    {
        "content": "<p>its the basis of one of the <a href=\"http://patterns.rs\" target=\"_blank\" title=\"http://patterns.rs\">patterns.rs</a> tests</p>",
        "id": 136801032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928022
    },
    {
        "content": "<p>the ascription of <code>y</code> to have type <code>&amp;'a _</code></p>",
        "id": 136801044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928035
    },
    {
        "content": "<p>oh wait</p>",
        "id": 136801045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928036
    },
    {
        "content": "<p>I see I see</p>",
        "id": 136801048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928039
    },
    {
        "content": "<p>right, we should be pushing the <code>&amp;'a</code> <em>down</em> to <code>y</code></p>",
        "id": 136801097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928049
    },
    {
        "content": "<p>yeah so something is goofy</p>",
        "id": 136801101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928055
    },
    {
        "content": "<p>as a \"lower bound\" or \"upper bound\" or whichever</p>",
        "id": 136801105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928061
    },
    {
        "content": "<p>I'll have to look at it later</p>",
        "id": 136801106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928061
    },
    {
        "content": "<p>I'm assuming playpen is up to date</p>",
        "id": 136801113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928065
    },
    {
        "content": "<p>mabye that's assumption is wrong</p>",
        "id": 136801117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928069
    },
    {
        "content": "<p>oh no playpen is totally out of date, its from 10-25 or something</p>",
        "id": 136801141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928105
    },
    {
        "content": "<p>so that was my mistake, using the playpen as the basis for a test</p>",
        "id": 136801152,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540928115
    },
    {
        "content": "<p>ah :)</p>",
        "id": 136801163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540928130
    },
    {
        "content": "<p>I did find an example, I think.</p>",
        "id": 136802947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540929855
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">static_to_a_to_static_through_ref_in_tuple</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_z</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136802956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540929867
    },
    {
        "content": "<p>I <em>think</em> that's supposed to error, but does not today under <code>-Z borrowck=mir</code></p>",
        "id": 136802976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540929893
    },
    {
        "content": "<p>I see</p>",
        "id": 136803031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540929944
    },
    {
        "content": "<blockquote>\n<p>oh no playpen is totally out of date,</p>\n</blockquote>\n<p>The play<em>ground</em> is out of date because nightly cannot compile hyper.</p>",
        "id": 136805623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540932220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/55376\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55376\">https://github.com/rust-lang/rust/issues/55376</a></p>",
        "id": 136805685,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540932251
    },
    {
        "content": "<p>okay well it sounds like that is now resolved, so hopefully things will start working again soon-ish...?</p>",
        "id": 136810063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540936711
    },
    {
        "content": "<p>should - need to watch after today's nightly</p>",
        "id": 136810648,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540937357
    }
]