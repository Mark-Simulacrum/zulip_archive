[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Creating a separate thread for this.</p>",
        "id": 132947898,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535485402
    },
    {
        "content": "<p>So my idea on how to check this in <code>places_conflict</code></p>",
        "id": 132954309,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535492650
    },
    {
        "content": "<p>Check as normal until the access place runs out of projections and the two places are <code>DisjointOrEqual</code> at this point (this is the same place that shallow and deep accesses begin to differ)</p>",
        "id": 132954358,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535492729
    },
    {
        "content": "<p>After here we go through the remaining projections on the borrow place, if we find a field projection from an ADT which implements <code>Drop</code> we stop and return that the places conflict.</p>",
        "id": 132954456,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535492846
    },
    {
        "content": "<p>If we reach a deference of a built in reference then we stop and return that the places don't conflict.</p>",
        "id": 132954513,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535492896
    },
    {
        "content": "<p>If we run out of projections then we return that the places conflict.</p>",
        "id": 132954524,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535492913
    },
    {
        "content": "<p>Dereferencing a Box is special cased here (although it's special inherently). I think we could extend this using <code>#[may_dangle]</code> annotations, but other <code>#[may_dangle]</code> standard library types don't contain references and don't have any public fields.</p>",
        "id": 132954661,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535493112
    },
    {
        "content": "<p>We only consider ADTs because all of the other types with arbitrary Drop glue can't be the type of the base of a projection.</p>",
        "id": 132954846,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535493353
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> , so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I just noticed that we failed to followup here. (I'm posting here largely to bump up this topic in the list under the NLL stream)</p>",
        "id": 133733322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536673716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> so I'm finally taking some time to try to understand the idea you have sketched here.</p>",
        "id": 134160698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271156
    },
    {
        "content": "<p>Am I correct in inferring that your outline is responding to the scenario laid out by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> here: <a href=\"https://github.com/rust-lang/rust/issues/53569#issuecomment-414821527\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53569#issuecomment-414821527\">https://github.com/rust-lang/rust/issues/53569#issuecomment-414821527</a></p>",
        "id": 134160895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271382
    },
    {
        "content": "<p>namely, when you talk about changing the behavior of <code>places_conflict</code>, I infer that is to revise our behavior in the case where today we are erroring out when we hit the <code>Drop(v)</code> that conflicts with the outstanding loan of <code>v.as&lt;Ok&gt;.0</code> ?</p>",
        "id": 134160958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271438
    },
    {
        "content": "<p>I do think I'm starting to see how this works. Namely, we know that drop glue follows a structural pattern. We already do some recursive structural analysis when we look at the access itself (the <code>Drop(v)</code>), but this is extending that thinking to also apply to the outstanding borrows. If no destructors occur on the whole path (starting from and including the accessed place, but continuing on into the place described by the borrow), then we know the drop itself doesn't actually touch the borrow. Is that the basic idea?</p>",
        "id": 134161270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271834
    },
    {
        "content": "<p>For this to work we'd need to feed the WriteKind for the access down into places_conflict, right?</p>",
        "id": 134161290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271880
    },
    {
        "content": "<p>(or at least a boolean \"is_drop\"; but if you're going to do that you might as well do the whole WriteKind)</p>",
        "id": 134161349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537271913
    },
    {
        "content": "<blockquote>\n<p>(or at least a boolean \"is_drop\"; but if you're going to do that you might as well do the whole WriteKind)</p>\n</blockquote>\n<p>This (a new variant to either <code>WriteKind</code>, or to <code>ShallowOrDeep</code>) seemed like the best idea when I tried implementing it.</p>",
        "id": 134161589,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537272202
    },
    {
        "content": "<p>Yes I just started looking at hacking this up, and realized that a boolean flag <code>is_drop</code> on <code>ShallowOrDeep::Deep</code> might be best.</p>",
        "id": 134161777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537272465
    },
    {
        "content": "<p>How far did you get implementing it?</p>",
        "id": 134161845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537272544
    },
    {
        "content": "<p>It was pretty much done I think.</p>",
        "id": 134163346,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537274374
    },
    {
        "content": "<p>one problem with the idea as you have laid it out, depending on whether we are still tracking borrows of derefs of immutable-references ... it may signal false conflicts when you have a Drop(v) and a reborrow of <code>&amp;*v.a</code> where <code>v.a: &amp;State</code> and <code>v: SomeDropType</code></p>",
        "id": 134163613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537274657
    },
    {
        "content": "<p>i.e. it is okay to such borrows to be created and last beyond the destruction of <code>v</code></p>",
        "id": 134163632,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537274685
    },
    {
        "content": "<p>But one easy way around that is to not signal a conflict eagerly upon seeing a type that needs_drop.</p>",
        "id": 134163665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537274725
    },
    {
        "content": "<p>instead just remember that you saw it and keep descending</p>",
        "id": 134163673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537274733
    },
    {
        "content": "<p>okay so I've put up PR <a href=\"https://github.com/rust-lang/rust/issues/54324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54324\">#54324</a></p>",
        "id": 134170603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537281807
    },
    {
        "content": "<p>mostly for <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> to take a look at</p>",
        "id": 134170608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537281817
    },
    {
        "content": "<p>But I infer from the discussion that <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> had a much broader set of revisions in mind that covered more cases?</p>",
        "id": 134170664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537281847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> do you have a PR with your approach?</p>",
        "id": 134177478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288851
    },
    {
        "content": "<p>I think it might honestly be easier for me to see some code than to follow the writing here :)</p>",
        "id": 134177492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288868
    },
    {
        "content": "<p>branch: <a href=\"https://github.com/rust-lang/rust/compare/master...matthewjasper:better-drop-access\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...matthewjasper:better-drop-access\">https://github.com/rust-lang/rust/compare/master...matthewjasper:better-drop-access</a></p>",
        "id": 134183030,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537294710
    },
    {
        "content": "<p>Huh, I see. That's...quite clever.</p>",
        "id": 134183330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295043
    },
    {
        "content": "<blockquote>\n<p>93 additions and 366 deletions.</p>\n</blockquote>",
        "id": 134183391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295118
    },
    {
        "content": "<p>always nice</p>",
        "id": 134183393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295119
    },
    {
        "content": "<p>as an aside, I think that the name <code>places_conflict</code> is really bad. It seemed good, but it keeps leading me to wrong intuitions</p>",
        "id": 134183416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295151
    },
    {
        "content": "<p>I think <code>borrow_conflicts_with_access</code> would be much better</p>",
        "id": 134183428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295159
    },
    {
        "content": "<p>and the idea of adding a new kind of access — a <code>Drop</code> access — makes total sense</p>",
        "id": 134183479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295167
    },
    {
        "content": "<p>+1 from me</p>",
        "id": 134183484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295170
    },
    {
        "content": "<blockquote>\n<p>as an aside, I think that the name <code>places_conflict</code> is really bad. It seemed good, but it keeps leading me to wrong intuitions</p>\n</blockquote>\n<p>specifically, it sounds like it is testing a property of two \"places in isolation\"...but that's not really true</p>",
        "id": 134183530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537295209
    },
    {
        "content": "<p>+1 from me too. That branch seems like the right direction to go in.</p>",
        "id": 134185357,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537296959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you want to close <a href=\"https://github.com/rust-lang/rust/pull/54324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54324\">https://github.com/rust-lang/rust/pull/54324</a> then?</p>",
        "id": 134185455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537297023
    },
    {
        "content": "<p>yeah I was just putting a commnet up on it</p>",
        "id": 134185468,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537297036
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/issues/54509\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54509\">#54509</a></p>",
        "id": 134482233,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537717509
    }
]