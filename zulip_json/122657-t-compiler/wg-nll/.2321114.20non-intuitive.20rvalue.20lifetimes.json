[
    {
        "content": "<p>So I've been looking at the examples from <a href=\"https://github.com/rust-lang/rust/issues/21114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114\">#21114</a>, and I had a thought</p>",
        "id": 134233848,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537365811
    },
    {
        "content": "<p>a lot of the discussion centers around trying to make the examples compile, e.g. by changing our rvalue lifetime rules</p>",
        "id": 134233863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537365839
    },
    {
        "content": "<p>but I was just now wondering: If we could emit a more targetted diagnostic, focused on this case</p>",
        "id": 134233913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537365854
    },
    {
        "content": "<p>that could provide links to the explanation of why this is happening, and the standard workarounds</p>",
        "id": 134233933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537365874
    },
    {
        "content": "<p>That seems like it would be a marked improvement over today, where you just see \"does not live long enough\" without enough context to understand why...</p>",
        "id": 134233976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537365907
    },
    {
        "content": "<p>(I'm thinking in particular of targeting the diagnostic to the scenario where you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">TAIL</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// semi, or at end of `-&gt; ()` fn</span>\n</pre></div>\n\n\n<p>so the result of the block is unused and thus dropped. We don't have to change language semantics to suggest to the user that they could put a semi immediately after TAIL if we see that the extended lifetime is causing a \"does not live long enough\" error for some temp created within TAIL.)</p>",
        "id": 134234494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537366420
    },
    {
        "content": "<p>In essence: I'm suggesting that while the status quo is annoying, what makes it especially annoying is <strong>tracking down</strong> the issue when it arises. Exceptionally so for newcomers.  If the compiler feedback guided one to blindly insert the semi-colon, then some people might gripe momentarily as they type it in, but I doubt we'd see bug reports.</p>",
        "id": 134234963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537366803
    },
    {
        "content": "<blockquote>\n<p>I doubt we'd see bug reports.</p>\n</blockquote>\n<p>Wouldn't that be a net negative end result? People are subtly annoyed, but not enough to tell us. When they talk to friends they say \"oh, Rust has weird magical problems with stuff, I don't even remember what, so I don't recommend using it\"</p>",
        "id": 134236010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537367780
    },
    {
        "content": "<p>Okay well maybe that was flippant of me. A more positive way to phrase it: this could cause people to shift their viewpoint over whether this is a bug.</p>",
        "id": 134236163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537367909
    },
    {
        "content": "<p>The drop order for these temporaries <em>is</em> observable, and thus the presence of that semicolon immediately after TAIL does matter, even when the type is <code>TAIL: ()</code>.</p>",
        "id": 134236204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537367963
    },
    {
        "content": "<p>(I mean the order is observable with respect to the locals bound in the block)</p>",
        "id": 134236226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537367981
    },
    {
        "content": "<p>as demonstrated e.g. on this <a href=\"https://play.rust-lang.org/?gist=b5ed18445883a9e1eb7dd3c3614b7a0d&amp;version=stable&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=b5ed18445883a9e1eb7dd3c3614b7a0d&amp;version=stable&amp;mode=debug&amp;edition=2015\">playpen</a></p>",
        "id": 134236474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537368154
    },
    {
        "content": "<p>And sure, some people may still get frustrated and abandon ship</p>",
        "id": 134236541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537368227
    },
    {
        "content": "<p>but the diagnostics in the compiler, especially the help explanations, try hard to counteract that...</p>",
        "id": 134236628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537368273
    },
    {
        "content": "<p>Part of my response here is influenced by my <a href=\"https://github.com/rust-lang/rfcs/pull/210\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/210\">past experience</a> attempting to propose changes to the dynamic semantics of drop</p>",
        "id": 134236767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537368367
    },
    {
        "content": "<p>because a change to the rvalue lifetimes in this scenario is, in some ways, a more limited version of what was being proposed for RFC 210. And there was a lot of fear there about silently breaking existing code.</p>",
        "id": 134236962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537368554
    },
    {
        "content": "<p>I do think that telling people 'maybe insert a ; here' and pointing to some longer form documentation in --explain for that error could be a good way of 'solving' this</p>",
        "id": 134239211,
        "sender_full_name": "simulacrum",
        "timestamp": 1537370446
    },
    {
        "content": "<p>We could even say something like \"drop order changes\", possibly even providing that order to the user</p>",
        "id": 134239245,
        "sender_full_name": "simulacrum",
        "timestamp": 1537370504
    },
    {
        "content": "<blockquote>\n<p>to shift their viewpoint over whether this is a bug</p>\n</blockquote>\n<p>Which is a crucial thing, I believe. <em>Is</em> it a bug? (I know that bug vs feature request is a fuzzy line). Your discussion of observable effects seems to indicate that it is <strong>not</strong> a bug, but a hard fact within the current set of rules. If that's the case, I agree there are two primary options: improve diagnostics and/or change the rules. NLL is an example of changing the rules, but there was also effort put into improving diagnostics for AST borrowck before MIR borrowck could exist.</p>\n<p>I think it's mostly your phrasing that is throwing me, which sounds like \"let's pull a fast one on the users so they stop complaining\". I'm <span class=\"emoji emoji-1f4af\" title=\"100\">:100:</span> on improving diagnostics to explain a rule that is non-intuitive, however.</p>",
        "id": 134243831,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537373161
    },
    {
        "content": "<p>yes, I think my phrasing was poor.</p>",
        "id": 134245662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537373244
    },
    {
        "content": "<p>When I wrote: </p>\n<blockquote>\n<p>... some people might gripe momentarily as they type it in, but I doubt we'd see bug reports.</p>\n</blockquote>\n<p>I was half-thinking of cases like my own griping <a href=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/134164409\" title=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/134164409\">here</a>, which was actually a case where the borrow-checker is <em>right</em> to reject my code.</p>",
        "id": 134251681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537373532
    },
    {
        "content": "<p>my feeling <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is that we ought to start with a diganostic, yes</p>",
        "id": 134258145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537380006
    },
    {
        "content": "<p>makes a lot of sense</p>",
        "id": 134258155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537380010
    },
    {
        "content": "<p>it's something we can do in the short term</p>",
        "id": 134258161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537380014
    },
    {
        "content": "<p>that said, I think maybe longer term we should see if we can make some targeted changes hereâ€” but you're not wrong that changing drop order is a scary thing</p>",
        "id": 134258173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537380035
    },
    {
        "content": "<p>(before doing it, I would want to try and assess impact, e.g. by devising some sort of lint to detect cases where we think it would maybe be significant and doing crater runs)</p>",
        "id": 134258213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537380073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> FWIW, \"NLL is an example of changing the rules\" isn't really true -- that is, NLL should have no effects on runtime execution -- unlike changes to drop order</p>",
        "id": 134263454,
        "sender_full_name": "simulacrum",
        "timestamp": 1537385239
    },
    {
        "content": "<p>Perhaps my wording wasn't the clearest. What I mean is that pre-NLL, it was <em>expected</em> that certain sound code would not compile. It was not a <strong>bug</strong> that that code didn't compile, but it was unfortunate. The rules were overly conservative and then NLL \"changed the rules\".</p>\n<p>It sounds similar to this case, as presumably there's code that is sound w.r.t these conditions at the end of blocks but the compiler doesn't allow it. (I assume this because I don't imagine that someone is trying to change the rules to allow for unsoundness). <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> saying \" change to the rvalue lifetimes\" sounds like \"a change to the rules\"</p>",
        "id": 134263881,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537385701
    },
    {
        "content": "<p>NLL is <em>literally</em> a change to the rules of what the compiler allows though...</p>",
        "id": 134263898,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537385733
    },
    {
        "content": "<p>In truth NLL did change a <em>few</em> of the rules of the dynamic semantics</p>",
        "id": 134263959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537385809
    },
    {
        "content": "<p>Perhaps y'all are meaning a different set of rules than what I mean, but I cannot figure out how to state what I have stated in a different manner :-)</p>",
        "id": 134263978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537385850
    },
    {
        "content": "<p>Now, if <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> means that \"the changes we call NLL\" and \"the proposed changes to rvalue lifetimes \" would have different amounts / kinds of end-user behavior, that's totally possible; I don't know anything about that (other than what <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> just spilled <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> )</p>",
        "id": 134264116,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537386005
    },
    {
        "content": "<p>Yes, I think different amounts is what I meant to imply; NLL is intended to be mostly or all 'transparent' as I understand it</p>",
        "id": 134264156,
        "sender_full_name": "simulacrum",
        "timestamp": 1537386088
    },
    {
        "content": "<p>(in any case I am looking into trying to improve the diagnostics here now)</p>",
        "id": 134400523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537559689
    },
    {
        "content": "<p>So, for this example (<a href=\"https://play.rust-lang.org/?gist=5749c428b2f05a75415856aff3a98dd9&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=5749c428b2f05a75415856aff3a98dd9&amp;version=nightly&amp;mode=debug&amp;edition=2015\">play</a>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_thing1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;thing1&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// D(&quot;other&quot;).next(&amp;_thing1).end()</span>\n<span class=\"w\">        </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">_thing1</span><span class=\"p\">).</span><span class=\"n\">end</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>what do people think of this new diagnostic output i've managed to hack up:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `_thing1` does not live long enough\n  --&gt; ../../issue-21114-demo-borrow-of-temp.rs:7:11\n   |\n7  |         D(&amp;_thing1).end()\n   |           ^^^^^^^^ borrowed value does not live long enough\n8  |     }\n   |     - `_thing1` dropped here while still borrowed\n9  |\n10 |     ;\n   |     - borrow later used here, when temporary is dropped\n   |\nnote: temporary is formed when evaluating this expresion\n  --&gt; ../../issue-21114-demo-borrow-of-temp.rs:7:9\n   |\n7  |         D(&amp;_thing1).end()\n   |         ^^^^^^^^^^^\n   = note: temporary is part of a block-tail expression. Consider adding semicolon to drop its temporaries sooner\n</pre></div>",
        "id": 134407000,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566412
    },
    {
        "content": "<p>I recognize there is likely to be overlap/conflicts between some of what I've done here and <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> 's work on <a href=\"https://github.com/rust-lang/rust/issues/54164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54164\">#54164</a>. But hopefully it will be more synergistic rather than actual conflicts...</p>",
        "id": 134407121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I like it -- I like in particular calling out the expression where temporary is formed. That said, I think it's a bit misleading here. In particular, the temporary is formed because of <code>end</code> being an <code>&amp;self</code> method, I suppose?</p>",
        "id": 134407218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537566673
    },
    {
        "content": "<p>I think we should work harder to call that out</p>",
        "id": 134407220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537566677
    },
    {
        "content": "<p>that's one of the more confusing things</p>",
        "id": 134407231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537566689
    },
    {
        "content": "<p><code>end</code> being a <code>&amp;self</code> method rather than a <code>self</code> method, you mean?</p>",
        "id": 134407251,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566713
    },
    {
        "content": "<p>(i mean, a temporary is formed in the latter case; it just gets moved into <code>end()</code> and dies sooner...)</p>",
        "id": 134407314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566764
    },
    {
        "content": "<p>but it <em>is</em> an interesting idea, to tie in the relevance of the signature of <code>end</code></p>",
        "id": 134407350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566798
    },
    {
        "content": "<p>(The playpen link I provided provides the full context, as you might expect; so that's a better place to play around with the example.)</p>",
        "id": 134407363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566825
    },
    {
        "content": "<p>Anyway I'm pretty happy with even this smallish hack that I've gotten working</p>",
        "id": 134407372,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566841
    },
    {
        "content": "<p><del>Perhaps amazingly ... this change doesn't seem to have affected our test suite ???</del></p>",
        "id": 134407524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537566996
    },
    {
        "content": "<p><del>as in... we aren't <em>testing</em> the behavior on this test, even in <code>[ui (nll)]</code>  ???</del></p>",
        "id": 134407552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567028
    },
    {
        "content": "<p>wait no, strike that</p>",
        "id": 134407563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567052
    },
    {
        "content": "<p>I'd suggest explaining \"a block-tail expression\" or changing that wording.</p>",
        "id": 134407620,
        "sender_full_name": "davidtwco",
        "timestamp": 1537567095
    },
    {
        "content": "<p><del>What's the old diagnostic for that look like?</del> I'll just look at the playground link.</p>",
        "id": 134407629,
        "sender_full_name": "davidtwco",
        "timestamp": 1537567117
    },
    {
        "content": "<blockquote>\n<p>(i mean, a temporary is formed in the latter case; it just gets moved into <code>end()</code> and dies sooner...)</p>\n</blockquote>\n<p>my point is that the underlined thing â€”Â <code>D(&amp;_thing1)</code> â€”Â is the value that goes <em>into</em> the temporary, but not the <em>reason</em> we make a temporary</p>",
        "id": 134407647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567147
    },
    {
        "content": "<p>(I misread my test output; it never got to <code>[ui (nll)]</code>, due to problems with my test set up)</p>",
        "id": 134407648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567148
    },
    {
        "content": "<p>and in particular the reason that we are making a temporary is not visible</p>",
        "id": 134407659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567170
    },
    {
        "content": "<p>okay. Its late and I have to go, but this provides interesting food for thought</p>",
        "id": 134407749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567231
    },
    {
        "content": "<p>I'll try to explore whether I can encode a bit more information here</p>",
        "id": 134407769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567254
    },
    {
        "content": "<p>but I don't know if I agree that the diagnostic as written is \"misleading\" per se</p>",
        "id": 134407780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567264
    },
    {
        "content": "<p>I.e. its not claiming to say <em>why</em> the temporary is made ...</p>",
        "id": 134407795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567273
    },
    {
        "content": "<p>For me, not knowing why that error is happening, reading that error doesn't make it much clearer.</p>",
        "id": 134407827,
        "sender_full_name": "davidtwco",
        "timestamp": 1537567315
    },
    {
        "content": "<p>I don't disagree</p>",
        "id": 134407829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567316
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 134407831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567317
    },
    {
        "content": "<p>its just saying \"a temporary was made. Here's the expression that produced \"it\" -- though as you point out, it would be more acccurrte to say that's the expression  used to initialize it, I guess...</p>",
        "id": 134407833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567320
    },
    {
        "content": "<p>it took me a while to understand it</p>",
        "id": 134407876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567325
    },
    {
        "content": "<p>I kept thinking \"but <code>&amp;_thing1</code> shouldn't make a temporary...\"</p>",
        "id": 134407896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567347
    },
    {
        "content": "<p>I didn't highlight <code>&amp;_thing1</code> alone</p>",
        "id": 134407910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567366
    },
    {
        "content": "<p>yes, and that also confused me</p>",
        "id": 134407915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567372
    },
    {
        "content": "<p>until I realized what was going on :)</p>",
        "id": 134407921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567376
    },
    {
        "content": "<p>It would perhaps be nice to provide the highlight of the bigger expression sooner</p>",
        "id": 134407939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567396
    },
    {
        "content": "<p>perhaps via multispan magic?</p>",
        "id": 134407942,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567404
    },
    {
        "content": "<p>not really sure if that API is right thing to use here...</p>",
        "id": 134407951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> part of the problem is that there is a confluence of <em>many</em> factors here</p>",
        "id": 134407958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0597]: `_thing1` does not live long enough\n  --&gt; ../../issue-21114-demo-borrow-of-temp.rs:7:11\n   |\n7  |         D(&amp;_thing1).end()\n   |           ^^^^^^^^ borrowed value does not live long enough\n8  |     }\n   |     - `_thing1` dropped here while still borrowed\n9  |\n10 |     ;\n   |     - borrow later used here, when temporary is dropped\n   |\nnote: temporary is formed because this is an `&amp;self` method\n  --&gt; ../../issue-21114-demo-borrow-of-temp.rs:7:9\n   |\n7  |         D(&amp;_thing1).end()\n   |                     ^^^\n   = note: temporary is part of a block-tail expression. Consider adding semicolon to drop its temporaries sooner\n</pre></div>",
        "id": 134407976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567442
    },
    {
        "content": "<p>I think that's better, but not quite there</p>",
        "id": 134408003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567453
    },
    {
        "content": "<p>wait, surely you would want us to still highlight the whole expression ... ?</p>",
        "id": 134408014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567483
    },
    {
        "content": "<p>I thought identifying it as <code>D(&amp;_thing1)</code> was important</p>",
        "id": 134408021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567497
    },
    {
        "content": "<p>I'd prefer not, but maybe we would in practice</p>",
        "id": 134408023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567499
    },
    {
        "content": "<p>hmm</p>",
        "id": 134408029,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567503
    },
    {
        "content": "<p>I guess I don't know</p>",
        "id": 134408039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567510
    },
    {
        "content": "<p>maybe in the common case the expression would be unwieldy and just noise...</p>",
        "id": 134408046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567525
    },
    {
        "content": "<p>my micro-test may be misleading me as to the utility of the message</p>",
        "id": 134408054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567537
    },
    {
        "content": "<p>but part of the reason why I think its important to highlight the expression</p>",
        "id": 134408106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567564
    },
    {
        "content": "<p>is the fact that it implements <code>Drop</code></p>",
        "id": 134408110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567569
    },
    {
        "content": "<p>obviously we could alternatively highlight the <code>impl Drop for D</code></p>",
        "id": 134408125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567611
    },
    {
        "content": "<p>hmm</p>",
        "id": 134408142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567634
    },
    {
        "content": "<p>i may not have the full picture of the example in question</p>",
        "id": 134408143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567642
    },
    {
        "content": "<p>i definitely recommend playing with it in the playpen</p>",
        "id": 134408150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567656
    },
    {
        "content": "<p>every piece is necessary...</p>",
        "id": 134408152,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537567666
    },
    {
        "content": "<p>I guess I am thinking a bit more generally</p>",
        "id": 134408163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567682
    },
    {
        "content": "<p>I think in general our temporary rules are a big source of confusion</p>",
        "id": 134408205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567689
    },
    {
        "content": "<p>and I think it is not helpful that the reason there is a temporary is often \"hidden\"</p>",
        "id": 134408215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567710
    },
    {
        "content": "<p>(though even <code>&amp;foo()</code> is probably not obvious to most folks)</p>",
        "id": 134408222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537567721
    },
    {
        "content": "<p>The example, to my untrained eye, would be confused by more diagnostics - I read it and think \"oh, we're creating a <code>D</code> that has a borrow in it, and we're returning that but the borrow won't live long enough\".  It feels like something similar to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Q</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"n\">_y</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Q</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>At least with this example, I don't understand why the error is confusing, because I'd need to understand what is happening at a much deeper level than I do to realise the error isn't right? I think that's what I think?</p>",
        "id": 134408489,
        "sender_full_name": "davidtwco",
        "timestamp": 1537568077
    },
    {
        "content": "<p>well, maybe the answer is I should try out my branch on some of the examples from <a href=\"https://github.com/rust-lang/rust/issues/21114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114\">#21114</a></p>",
        "id": 134408514,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568122
    },
    {
        "content": "<p>because there <em>are</em> plenty of cases of tail-exprs where our users <del>get mad about having</del> don't understand why they have to add <code>;</code></p>",
        "id": 134408522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568137
    },
    {
        "content": "<p>e.g. note that in the code I wrote, the block isn't returning a <code>D</code>. Its returning <code>()</code>.</p>",
        "id": 134408579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568191
    },
    {
        "content": "<p>and so people say \"why is the borrow lasting so long?\"</p>",
        "id": 134408586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568206
    },
    {
        "content": "<p>and the answer is \"because the <code>D</code> you created gets killed after locals in the block are dropped.\" But then you get into \"well why is <strong>that</strong> happening?\"</p>",
        "id": 134408606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568243
    },
    {
        "content": "<p>and the answer then is \"our r-value lifetime rules\"</p>",
        "id": 134408613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537568256
    },
    {
        "content": "<p>Perhaps a good way to explain that is to \"expand\" the confusing part, have a little note at the bottom with a code snippet that splits the confusing statement into multiple statements that approximates how the compiler understands the code and is more obviously wrong to someone who has an intuition for the borrow rules? Not sure if that would work, just a thought.</p>",
        "id": 134408850,
        "sender_full_name": "davidtwco",
        "timestamp": 1537568566
    },
    {
        "content": "<p>by the way, one of the few tests that this change <em>did</em> affect was <a href=\"https://github.com/rust-lang/rust/commits/0957ede5027c0bffe208904998675a17bfd4cd59/src/test/ui/issue-47646.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commits/0957ede5027c0bffe208904998675a17bfd4cd59/src/test/ui/issue-47646.stderr\">issue-47646.stderr</a></p>",
        "id": 134409229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537569081
    },
    {
        "content": "<p>I linked to that commit, <a href=\"https://github.com/rust-lang/rust/commit/0957ede5027c0bffe208904998675a17bfd4cd59\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/0957ede5027c0bffe208904998675a17bfd4cd59\">0957ede5027c0bffe208904998675a17bfd4cd59</a> , in particular, because it looks to me like that PR might have regressed the diagnostics that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> carefully plotted out for <a href=\"https://github.com/rust-lang/rust/issues/47646\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47646\">#47646</a> ?</p>",
        "id": 134409291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537569138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ^</p>",
        "id": 134409297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537569150
    },
    {
        "content": "<p>(I'll leave a note on PR <a href=\"https://github.com/rust-lang/rust/issues/51889\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51889\">#51889</a> about this)</p>",
        "id": 134409306,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537569182
    },
    {
        "content": "<p>its not hard to \"fix\"; or at least, a fix will be a natural consequence of the branch I'm playing with for <a href=\"https://github.com/rust-lang/rust/issues/21114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114\">#21114</a>. But I'm just curious about whether this was deliberate or accidental.</p>",
        "id": 134409461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537569379
    },
    {
        "content": "<p>I ended up pushing the current state to a branch. I'm a little shocked at how few of our tests needed to be updated: <a href=\"https://github.com/pnkfelix/rust/commits/issue-21114-semi-on-tail-diagnostic\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commits/issue-21114-semi-on-tail-diagnostic\">https://github.com/pnkfelix/rust/commits/issue-21114-semi-on-tail-diagnostic</a></p>",
        "id": 134410513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537570906
    },
    {
        "content": "<p>(the test updates are on <a href=\"https://github.com/pnkfelix/rust/commit/98cd11d8f8a78c3bb7e916d2b299eeeade7c6392\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commit/98cd11d8f8a78c3bb7e916d2b299eeeade7c6392\">this commit</a> in particular)</p>",
        "id": 134410562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537570932
    },
    {
        "content": "<p>Also, this <a href=\"https://github.com/pnkfelix/rust/blob/98cd11d8f8a78c3bb7e916d2b299eeeade7c6392/src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/blob/98cd11d8f8a78c3bb7e916d2b299eeeade7c6392/src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr\">test</a> shows a clear case where the blind suggestion to add a semicolon is bogus</p>",
        "id": 134410652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537571060
    },
    {
        "content": "<p>(as I alluded to in the commit message of the <a href=\"https://github.com/pnkfelix/rust/commit/053de3952a08036e4db3bac5213418cdf3183366\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commit/053de3952a08036e4db3bac5213418cdf3183366\">parent commit</a> to that one linked above)</p>",
        "id": 134410670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537571089
    },
    {
        "content": "<p>I may change it to only suggest adding the semi-colon if the tail expression has type <code>()</code>. Not sure yet.</p>",
        "id": 134410759,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537571176
    },
    {
        "content": "<p>(because then that won't catch the case where the context surrounding the block-expression in question  is itself supplying the <code>;</code> that causes the returned value to be discarded... but maybe that's okay, as long as we highlight <em>that</em> semicolon when we presumably say \"temporary is dropped here\")</p>",
        "id": 134410811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537571242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> cool that you bring this up</p>",
        "id": 134420209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537587905
    },
    {
        "content": "<p>to be honest I do not remember why we changed that</p>",
        "id": 134420213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537587921
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 134420214,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537587924
    },
    {
        "content": "<blockquote>\n<p>its not hard to \"fix\"; or at least, a fix will be a natural consequence of the branch I'm playing with for <a href=\"https://github.com/rust-lang/rust/issues/21114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114\">#21114</a>. But I'm just curious about whether this was deliberate or accidental.</p>\n</blockquote>\n<p>it wasn't <em>deliberate</em>, I don't think.</p>",
        "id": 134532224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537801898
    }
]