[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> — I didn't find a previous topic for this, so I created one</p>",
        "id": 135213358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538683897
    },
    {
        "content": "<p>did the mentoring instructions I put on the issue make sense?</p>",
        "id": 135213362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538683903
    },
    {
        "content": "<p>Kind of <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span>.</p>",
        "id": 135213523,
        "sender_full_name": "blitzerr",
        "timestamp": 1538684014
    },
    {
        "content": "<p>I say that because I am going through the code in type_check/mod.rs and trying to figure out what's going on and what the terms such as well formed, prove_predicate, cannonical types and values mean</p>",
        "id": 135213643,
        "sender_full_name": "blitzerr",
        "timestamp": 1538684107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> while the contents of this RFC aren't <em>directly</em> related, it may help with the general background (<a href=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html\">RFC 1214</a>)</p>",
        "id": 135213726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538684178
    },
    {
        "content": "<p>Cool thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 135213746,
        "sender_full_name": "blitzerr",
        "timestamp": 1538684208
    },
    {
        "content": "<p>Also I will be away for a couple of weeks from Oct 8-23. So might not get it to PR approved state by then. Will that be an issue ?</p>",
        "id": 135213847,
        "sender_full_name": "blitzerr",
        "timestamp": 1538684304
    },
    {
        "content": "<p>Hmm, could be, yes</p>",
        "id": 135213876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538684352
    },
    {
        "content": "<p>since we're trying to land this by Oct 25</p>",
        "id": 135213878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538684356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nAfter the fix, we expect the error to be the same as it would be without NLL turned on right as it is here?<br>\n<a href=\"https://play.rust-lang.org/?gist=a6399e527836280d98889172fd919223&amp;version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=a6399e527836280d98889172fd919223&amp;version=nightly&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?gist=a6399e527836280d98889172fd919223&amp;version=nightly&amp;mode=debug&amp;edition=2018</a></p>",
        "id": 135262520,
        "sender_full_name": "blitzerr",
        "timestamp": 1538754081
    },
    {
        "content": "<p>yes, more or less</p>",
        "id": 135263877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755545
    },
    {
        "content": "<p>at least in the same fns</p>",
        "id": 135263882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755550
    },
    {
        "content": "<p>Does someone know how to convert </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">b</span>: <span class=\"nc\">CanonicalTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">into</span><span class=\"w\"></span>\n<span class=\"n\">var</span>: <span class=\"nc\">CanonicalVar</span><span class=\"w\"></span>\n\n<span class=\"n\">So</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"></span>\n\n<span class=\"n\">canonical_var_values</span><span class=\"w\"> </span><span class=\"err\">```</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135358435,
        "sender_full_name": "blitzerr",
        "timestamp": 1538930480
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">relate_type_and_user_type</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">infcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">InferCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"nc\">ty</span>::<span class=\"n\">Variance</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nc\">CanonicalTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">locations</span>: <span class=\"nc\">Locations</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">category</span>: <span class=\"nc\">ConstraintCategory</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">borrowck_context</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">BorrowCheckContext</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"s\">&quot;sub_type_and_user_type(a={:?}, b={:?}, locations={:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">locations</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">variables</span>: <span class=\"nc\">b_variables</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">value</span>: <span class=\"nc\">b_value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Here one could use <code>b_variables</code> instead of <code>b.variables</code> ?</p>",
        "id": 135359197,
        "sender_full_name": "blitzerr",
        "timestamp": 1538932054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nIt does not look like I will be able to take the PR for <a href=\"https://github.com/rust-lang/rust/issues/54620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54620\">#54620</a> to finish line by Oct 25 as I will be traveling. So it might be worthwhile to assign it to someone else. Sorry about that.</p>",
        "id": 135361345,
        "sender_full_name": "blitzerr",
        "timestamp": 1538936804
    },
    {
        "content": "<p>I'm doing some things that are related, so I might pick it up with them.</p>",
        "id": 135361890,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538937982
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 135409519,
        "sender_full_name": "blitzerr",
        "timestamp": 1539011059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> the question -- how to convert a canonical-ty into a canonical-var -- doesn't  really make sense, I'm afraid</p>",
        "id": 135411044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539012640
    },
    {
        "content": "<p>but maybe a moot point</p>",
        "id": 135411049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539012646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nIn <br>\n<code>fn relate_type_and_user_type </code>  the argument is <code>CanonicalTy&lt;'tcx&gt;</code><br>\nbut the <code>canonical_var_values: IndexVec&lt;CanonicalVar, Option&lt;Kind&lt;'tcx&gt;&gt;&gt;</code><br>\nis an index vector of CanonicalVar. So wouldn't it require a conversion ?</p>",
        "id": 135411679,
        "sender_full_name": "blitzerr",
        "timestamp": 1539013221
    },
    {
        "content": "<p>Because this is what my interpretation of the mentorship note was:<br>\n- Instantiate the canonical types with their canonical variables using (substitute function).<br>\n- Then create the well formed predicate for each.</p>",
        "id": 135412008,
        "sender_full_name": "blitzerr",
        "timestamp": 1539013551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 135432186,
        "sender_full_name": "blitzerr",
        "timestamp": 1539038490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> so you are taking this issue?</p>",
        "id": 135480403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101343
    },
    {
        "content": "<p>(I was debating about fixing it, but I can do other things)</p>",
        "id": 135480412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> mainly because that type is not a key to that vector — you might want to read up on the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\">rustc-guide chapter on canonicalization</a></p>",
        "id": 135480426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101388
    },
    {
        "content": "<p>Yes, I should have a PR up later today.</p>",
        "id": 135480468,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539101404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I was thinking of ripping out the code from <code>relate_tys</code> that tries to figure out the values for canonical values</p>",
        "id": 135480475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101406
    },
    {
        "content": "<p>and instead just instantiating with \"fresh inference variables\"</p>",
        "id": 135480490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101413
    },
    {
        "content": "<p>I think.. at this point... there is no reason not to do that? Ah, well, I guess it might mean I have to make <code>relate_tys</code> able to handle unbound type variables</p>",
        "id": 135480502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101441
    },
    {
        "content": "<p>but we have the generalization code</p>",
        "id": 135480508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101451
    },
    {
        "content": "<p>oh I guess we have the ability to \"Substitute\" into a canonical ty</p>",
        "id": 135480548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101518
    },
    {
        "content": "<p>I remember now that this was a decent alternative</p>",
        "id": 135480586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> to elaborate a bit more, the \"canonical type\" is basically a \"type with holes in it\" (missing bits) and the values in that vector are the values that go into those holes</p>",
        "id": 135480604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539101554
    },
    {
        "content": "<blockquote>\n<p>Ah, well, I guess it might mean I have to make <code>relate_tys</code> able to handle unbound type variables</p>\n</blockquote>\n<p>How would that be different to now?</p>",
        "id": 135480626,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539101597
    },
    {
        "content": "<p>right now I think it panics</p>",
        "id": 135482385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539103504
    },
    {
        "content": "<p>but the logic to handle an unbound type variable would not be particularly different from the logic we are using to handle canonical vars</p>",
        "id": 135482397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539103523
    },
    {
        "content": "<p>instead, if we found a canonical var, we would panic</p>",
        "id": 135482400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539103530
    },
    {
        "content": "<p>So, unreachable type annotations get removed from the MIR before we get to borrowck.</p>",
        "id": 135493568,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114345
    },
    {
        "content": "<p>obvious solution 1: keep them around. problem: the RHS of <code>let _: T = ...</code>is a coercion site, so the type annotation applies to what looks like just a local variable only sometimes.</p>",
        "id": 135493748,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114500
    },
    {
        "content": "<p>I am not sure if we really care</p>",
        "id": 135493777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114540
    },
    {
        "content": "<p>interesting question</p>",
        "id": 135493787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114554
    },
    {
        "content": "<p>solution 2: only keep around the types and only check wf-ness of them. But this results in this:</p>\n<blockquote>\n<p>instead, if we found a canonical var, we would panic</p>\n</blockquote>",
        "id": 135493791,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114559
    },
    {
        "content": "<p>always hard to tell what to do with dead code for things like this</p>",
        "id": 135493793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114561
    },
    {
        "content": "<p>solution 3: leave for another PR</p>",
        "id": 135493803,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114580
    },
    {
        "content": "<p>This could be a compiler tests only issue</p>",
        "id": 135493908,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114678
    },
    {
        "content": "<p>i.e., something that won't arise in practice?</p>",
        "id": 135493917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114702
    },
    {
        "content": "<p>yes</p>",
        "id": 135493929,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539114711
    },
    {
        "content": "<p>i'm thinking about it; in general, regions are now a \"location-sensitive thing\"</p>",
        "id": 135493934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114718
    },
    {
        "content": "<p>e.g., I think that if you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// foo need not be borrowed here</span>\n</pre></div>",
        "id": 135493994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114756
    },
    {
        "content": "<p>this isn't really true today but hopefully will be with polonius</p>",
        "id": 135494000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114765
    },
    {
        "content": "<p>so in some sense if the code is dead, you can make a case that the region-oriented parts of the annotation don't \"count\" -- similar to how we don't really borrow check such code</p>",
        "id": 135494031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539114801
    },
    {
        "content": "<p>Link to the test that I'm try to get working (after enabling compare mode) <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs</a></p>",
        "id": 135494376,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115147
    },
    {
        "content": "<p>yeah, so the code is not reachable...hmm.</p>",
        "id": 135494396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115182
    },
    {
        "content": "<p>so we do have a version of the type-checker</p>",
        "id": 135494401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115193
    },
    {
        "content": "<p>er, the MIR</p>",
        "id": 135494402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115195
    },
    {
        "content": "<p>before dead code is stripped</p>",
        "id": 135494405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115201
    },
    {
        "content": "<p>but I think running the borrowck on it would be maybe a big change</p>",
        "id": 135494505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115240
    },
    {
        "content": "<p>otoh there <em>is</em> something annoying about this being accepted</p>",
        "id": 135494521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115258
    },
    {
        "content": "<p>it doesn't <em>feel</em> like a \"flow-sensitive\" property</p>",
        "id": 135494533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115267
    },
    {
        "content": "<blockquote>\n<p>solution 2: only keep around the types and only check wf-ness of them. But this results in this:</p>\n<blockquote>\n<p>instead, if we found a canonical var, we would panic</p>\n</blockquote>\n</blockquote>\n<p>I don't understand what you meant here</p>",
        "id": 135494542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115282
    },
    {
        "content": "<p>I mean that my attempt at solving this would panic if any types needed to be inferred.</p>",
        "id": 135494616,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115343
    },
    {
        "content": "<p>hmm</p>",
        "id": 135494658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115387
    },
    {
        "content": "<p>so the user types could involve things like <code>_</code></p>",
        "id": 135494673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115410
    },
    {
        "content": "<p>the main type-check will have inferred those — modulo regions —</p>",
        "id": 135494685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115422
    },
    {
        "content": "<p>I guess the question is what you mean by \"keep the types around\"</p>",
        "id": 135494755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115459
    },
    {
        "content": "<p>i.e., <em>where</em> would we do so</p>",
        "id": 135494763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115465
    },
    {
        "content": "<p>So attempt 1 was to preserve the AscribeUserTypes in the simplify cfg pass: this results in surprising behaviour depending on whether the compiler coerces or not</p>",
        "id": 135494852,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115552
    },
    {
        "content": "<p>Attempt 2 was to just keep the canonical types, but then there's nothing to substitute</p>",
        "id": 135494902,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115573
    },
    {
        "content": "<p>yeah, this is what I was pondering</p>",
        "id": 135494930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115620
    },
    {
        "content": "<p>neither of those really <em>feel right</em></p>",
        "id": 135494934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115625
    },
    {
        "content": "<p>Indeed</p>",
        "id": 135494971,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115668
    },
    {
        "content": "<p>I guess in the end that it feels like the most consistent option might be to not strip dead code</p>",
        "id": 135494976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115676
    },
    {
        "content": "<p>until after borrow check</p>",
        "id": 135494978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115679
    },
    {
        "content": "<p>if we wanted to issue errors here</p>",
        "id": 135495021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115684
    },
    {
        "content": "<p>I'm a bit wary of accepting types that are so clearly not well-formed</p>",
        "id": 135495041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115717
    },
    {
        "content": "<blockquote>\n<p>I guess in the end that it feels like the most consistent option might be to not strip dead code</p>\n</blockquote>\n<p>I wonder what would break if we tried to do that, feels like a big change</p>",
        "id": 135495060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115749
    },
    {
        "content": "<p>it sort of requires you to deal with a notion of control-flow graphs that have multiple entry points</p>",
        "id": 135495064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115764
    },
    {
        "content": "<p>e.g., <em>ideally</em> we would issue errors that are \"local\" to a dead region</p>",
        "id": 135495070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115777
    },
    {
        "content": "<p>so something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135495077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115795
    },
    {
        "content": "<p>seems clearly out of scope for <em>this</em> PR</p>",
        "id": 135495125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115807
    },
    {
        "content": "<p>There are problems like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// unitialized</span>\n</pre></div>",
        "id": 135495143,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115841
    },
    {
        "content": "<p>yep</p>",
        "id": 135495165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115866
    },
    {
        "content": "<p>it's a big ol' can of worms</p>",
        "id": 135495175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115874
    },
    {
        "content": "<p>and the same sort of applies to these WF rules, I think</p>",
        "id": 135495192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115889
    },
    {
        "content": "<p>Fake edges on <code>return/goto</code>?</p>",
        "id": 135495202,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539115900
    },
    {
        "content": "<p>no, because that would make borrows extend too long</p>",
        "id": 135495211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115912
    },
    {
        "content": "<p>I don't really know what set of things you would need</p>",
        "id": 135495297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115961
    },
    {
        "content": "<p>we decided a while back to just <em>not</em> report borrow check errors in dead code for simplicity</p>",
        "id": 135495301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115968
    },
    {
        "content": "<p>rightly or wrongly, I feel like backing up on that decision is going to be a major shipping risk :)</p>",
        "id": 135495316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115983
    },
    {
        "content": "<p>and isn't <em>really</em> an option</p>",
        "id": 135495329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539115993
    },
    {
        "content": "<p>so the question is whether to do something targeted to this WF case</p>",
        "id": 135495337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116005
    },
    {
        "content": "<p>Yes</p>",
        "id": 135495346,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539116018
    },
    {
        "content": "<p>in general, the rules around unreachable code are a kind of \"best effort\" basis in any case</p>",
        "id": 135495357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116035
    },
    {
        "content": "<p>(as in that's the question)</p>",
        "id": 135495358,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539116038
    },
    {
        "content": "<p>I guess the thing we are baking in here is the idea of things being \"Well-formed modulo regions\"</p>",
        "id": 135495451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116085
    },
    {
        "content": "<p>that is, we accept this code, but we wouldn't accept some other variations</p>",
        "id": 135495473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116101
    },
    {
        "content": "<p>(because the type-checker will catch them early on)</p>",
        "id": 135495491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116109
    },
    {
        "content": "<p>this is .. probably ok, it's a concept that applies elsewhere, it's just one of the bits of the traits story that I've been wanting to get a better handle on</p>",
        "id": 135495514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116130
    },
    {
        "content": "<p>I would say that for now you should file the PR without \"fixing\" this test as is, and file a follow-up issue</p>",
        "id": 135495530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116156
    },
    {
        "content": "<p>(the test can be modified to avoid <code>loop { }</code>)</p>",
        "id": 135495583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116165
    },
    {
        "content": "<p>e.g., <code>fn foo&lt;T&gt;() -&gt; T</code></p>",
        "id": 135495598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116174
    },
    {
        "content": "<p>sound reasonable?</p>",
        "id": 135495617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116187
    },
    {
        "content": "<p>Yes, and borrowck=migrate catches this.</p>",
        "id": 135495774,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539116301
    },
    {
        "content": "<p>what do you mean by it \"catches this\"?</p>",
        "id": 135496145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539116568
    },
    {
        "content": "<p>It gives an error for <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-outlives-projection-container-wc.rs</a></p>",
        "id": 135497002,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539117256
    },
    {
        "content": "<p>ah, because we re-enable region errors during migration?</p>",
        "id": 135497131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539117388
    },
    {
        "content": "<p>well ok that gives a bit of breathing room I guess</p>",
        "id": 135497137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539117396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> can I see your WIP branch too?</p>",
        "id": 135501321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121516
    },
    {
        "content": "<p>and/or do you expect to open a PR soon?</p>",
        "id": 135501324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121527
    },
    {
        "content": "<p>I'll have a PR soon</p>",
        "id": 135501336,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539121551
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54942\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54942\">#54942</a></p>",
        "id": 135502362,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539122698
    },
    {
        "content": "<p>cool</p>",
        "id": 135502901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539123384
    },
    {
        "content": "<p>gotta run now, took a quick look, pondering a bit</p>",
        "id": 135502905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539123391
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54942#pullrequestreview-163117501\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54942#pullrequestreview-163117501\">left a review</a></p>",
        "id": 135503083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539123646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  </p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> to elaborate a bit more, the \"canonical type\" is basically a \"type with holes in it\" (missing bits) and the values in that vector are the values that go into those holes</p>\n</blockquote>\n<p>that part I got. I will look at <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  's PR to understand it better.</p>",
        "id": 135522922,
        "sender_full_name": "blitzerr",
        "timestamp": 1539154476
    },
    {
        "content": "<blockquote>\n<p>I guess the thing we are baking in here is the idea of things being \"Well-formed modulo regions\"</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  what did you mean by this ? Also when I tried to read up on regions, I found this  <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits/regions.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/traits/regions.html\">https://rust-lang-nursery.github.io/rustc-guide/traits/regions.html</a>. Is there some other doc that I can read to understand the concept and the discussion?</p>",
        "id": 135522927,
        "sender_full_name": "blitzerr",
        "timestamp": 1539154495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> \"region\" is a synonym for \"lifetime\"</p>",
        "id": 135538804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539176107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> did you ever open an issue re: enforcing WF conditions in dead code?</p>",
        "id": 135538882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539176174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> what I meant by \"well-formed modulo regions\": the goal is to eventually have a first type-check that basically \"ignores\" (\"erases\") all specific lifetime information. So we don't track if something is <code>&amp;'a u32</code> or <code>&amp;'b u32</code>, just <code>&amp;u32</code>. The results of that type-check are used to build the MIR. Then we run the borrow check. So I said \"well-formed modulo regions\" because you would get errors if your type is ill-formed in some way that is <em>not</em> dependent on the specific regions involved (<code>'a</code> vs <code>'b</code>) but — if the code is dead code — you would not get errors even if the regions involved were incorrect.</p>",
        "id": 135538940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539176258
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a></p>",
        "id": 135543252,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539180404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> great, I was thinking we should <a href=\"https://github.com/rust-lang/rust/pull/54942#pullrequestreview-163339721\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54942#pullrequestreview-163339721\">add a FIXME into the test case</a></p>",
        "id": 135543529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539180681
    },
    {
        "content": "<p>Thanks a lot for explaining <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . Makes sense.</p>",
        "id": 135548225,
        "sender_full_name": "blitzerr",
        "timestamp": 1539184489
    }
]