[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I was planning to experiment with <a href=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409023250\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409023250\">this diagnostic improvement</a>. </p>\n<p>As far as I can gather, there's no existing code that might help with determining if we're in the \"used in future iteration\" case - closest I can find is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L86-L95\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/error_reporting.rs#L86-L95\">this code</a> but that doesn't seem useful here.</p>\n<p>Do you think a reasonable approach to take is to try follow the MIR statements from where the borrow is used through the basic blocks until I can find the borrow use location again (perhaps require that I pass over the borrow being made)? That seems a little contrived but I'm not sure how else I'd determine if the statements are in a loop.</p>",
        "id": 130712997,
        "sender_full_name": "davidtwco",
        "timestamp": 1533129540
    },
    {
        "content": "<p>I was wondering if we could get away with just comparing the spans?</p>",
        "id": 130713285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129835
    },
    {
        "content": "<p>How do you mean?</p>",
        "id": 130713355,
        "sender_full_name": "davidtwco",
        "timestamp": 1533129877
    },
    {
        "content": "<p>i.e. if the span of the use occurs earlier in the source than that of the borrow, then assume that this can only happen due to loop's iterating</p>",
        "id": 130713358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129880
    },
    {
        "content": "<p>and adjust the message accordingly</p>",
        "id": 130713365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129885
    },
    {
        "content": "<p>Ah.</p>",
        "id": 130713368,
        "sender_full_name": "davidtwco",
        "timestamp": 1533129888
    },
    {
        "content": "<p>Its a hack, I know</p>",
        "id": 130713373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129895
    },
    {
        "content": "<p>I thought about that, but wasn't sure if there were cases I wasn't considering that might trip it up.</p>",
        "id": 130713379,
        "sender_full_name": "davidtwco",
        "timestamp": 1533129899
    },
    {
        "content": "<p>so the main case I can think of that might trip that up</p>",
        "id": 130713394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129913
    },
    {
        "content": "<p>I guess I could try it and find out.</p>",
        "id": 130713397,
        "sender_full_name": "davidtwco",
        "timestamp": 1533129917
    },
    {
        "content": "<p>would be (maybe) something with <code>if let PAT = EXPR;</code></p>",
        "id": 130713403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129934
    },
    {
        "content": "<p>but I dont think you can have a use in the PAT there...</p>",
        "id": 130713411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129948
    },
    {
        "content": "<p>oh</p>",
        "id": 130713466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129970
    },
    {
        "content": "<p>function_call(..., &amp;something_borrowed, ...)</p>",
        "id": 130713475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129985
    },
    {
        "content": "<p>that might break it</p>",
        "id": 130713478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129988
    },
    {
        "content": "<p>you might have to double check that the <em>end</em> of the use's span occurs before the beginning of the borrow's span</p>",
        "id": 130713503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533130016
    },
    {
        "content": "<p>rather than just comparing the starts of the two spans</p>",
        "id": 130713513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533130032
    },
    {
        "content": "<p>(but maybe try the simpler way first, and just see if you can break it with an example like that.)</p>",
        "id": 130713534,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533130070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that approach results in <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/send-is-not-static-std-sync-2.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/send-is-not-static-std-sync-2.rs\">this test</a> with no loops changing from <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr\">this result</a> to <a href=\"https://gist.github.com/davidtwco/0c6db68d89d7e37344e63bba42772d65\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/0c6db68d89d7e37344e63bba42772d65\">this result</a>. It also affects <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/lifetimes/borrowck-let-suggestion.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/lifetimes/borrowck-let-suggestion.rs\">this test</a>.</p>",
        "id": 130714543,
        "sender_full_name": "davidtwco",
        "timestamp": 1533130963
    },
    {
        "content": "<p>oh of course</p>",
        "id": 130714741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533131175
    },
    {
        "content": "<p>you dont' even need <code>if let</code>; just a move does it. Sigh.</p>",
        "id": 130714754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533131189
    },
    {
        "content": "<p>what a pain</p>",
        "id": 130714877,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533131314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Submitted <a href=\"https://github.com/rust-lang/rust/issues/52948\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52948\">#52948</a> for this with my initial suggested approach. I think it caught more cases than the span comparison.</p>",
        "id": 130722514,
        "sender_full_name": "davidtwco",
        "timestamp": 1533138217
    },
    {
        "content": "<p>oh cool!</p>",
        "id": 130723047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138692
    },
    {
        "content": "<p>219326</p>",
        "id": 130723073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138722
    },
    {
        "content": "<blockquote>\n<p>219326</p>\n</blockquote>\n<p>wait, you've all gotten used to this, right?</p>",
        "id": 130738840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533154885
    },
    {
        "content": "<p>I hit that OTP button all the time by accident. Usually I catch it quickly enough to delete it (just to keep noise out of the channel), but this time I failed.</p>",
        "id": 130738923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533154946
    }
]