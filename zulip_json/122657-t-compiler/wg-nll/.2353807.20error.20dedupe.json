[
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. Submitted <a href=\"https://github.com/rust-lang/rust/issues/53995\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53995\">#53995</a>. Not sure if the approach is fantastic but the result seems to be fairly decent.</p>",
        "id": 133443852,
        "sender_full_name": "davidtwco",
        "timestamp": 1536242322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you have any thoughts on the issue reported by kennytm from the merge testing? Wasn't sure whether to <code>r=</code> on it or not.</p>",
        "id": 133730807,
        "sender_full_name": "davidtwco",
        "timestamp": 1536671490
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> is probably correct in their analysis</p>",
        "id": 133730901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671584
    },
    {
        "content": "<p>I'm not sure <em>why</em> this PR is at fault mind you :P</p>",
        "id": 133730910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671592
    },
    {
        "content": "<p>have you tried 32 bit linux by any chance?</p>",
        "id": 133730913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671598
    },
    {
        "content": "<p>I haven't.</p>",
        "id": 133730922,
        "sender_full_name": "davidtwco",
        "timestamp": 1536671606
    },
    {
        "content": "<p>often these things are due to use of a <code>FxHashMap</code> or something</p>",
        "id": 133730925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671607
    },
    {
        "content": "<p>though I'm not sure why that would be the case</p>",
        "id": 133730931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671619
    },
    {
        "content": "<p>(maybe it differs per platform?)</p>",
        "id": 133730936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671623
    },
    {
        "content": "<p>It does use a <code>FxHashMap</code>.</p>",
        "id": 133730938,
        "sender_full_name": "davidtwco",
        "timestamp": 1536671625
    },
    {
        "content": "<p>in particular iterating over such a hashmap</p>",
        "id": 133730943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671632
    },
    {
        "content": "<p>let me look over the PR again</p>",
        "id": 133730990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536671647
    },
    {
        "content": "<p>Well, we iterate over the hashmap. But the map contains one error per the move out indices which are then buffered and sorted as before when the buffered errors are emitted.</p>",
        "id": 133731020,
        "sender_full_name": "davidtwco",
        "timestamp": 1536671696
    },
    {
        "content": "<p>but the sort may not be total?</p>",
        "id": 133731124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536671806
    },
    {
        "content": "<p>(or rather, the order used in the sort might not be total)</p>",
        "id": 133731131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536671818
    },
    {
        "content": "<p>so we do sort the errors?</p>",
        "id": 133731351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672047
    },
    {
        "content": "<p>that are buffered?</p>",
        "id": 133731356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672052
    },
    {
        "content": "<p>(I couldn't remember)</p>",
        "id": 133731357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672055
    },
    {
        "content": "<p>I thought we did. By line number at least</p>",
        "id": 133731367,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536672063
    },
    {
        "content": "<p>which of course is not a total order</p>",
        "id": 133731376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536672074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> how do we pick which error to keep? I guess we ought to be producing the errors in the same order</p>",
        "id": 133731380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672079
    },
    {
        "content": "<p>but is enough of an order to probably fool most tests</p>",
        "id": 133731388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536672086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  In the order that errors were buffered previously, we check whether or not to keep them based on the last error we saw (in particular, whether the last error is a prefix of the current one), if we opt to keep it, we replace it in the hashmap (against the move out indices), then, before errors are emited, we iterate over the hashmap, adding each error to the error buffer. The error buffer code, as it always has, sorts by primary span.</p>",
        "id": 133732036,
        "sender_full_name": "davidtwco",
        "timestamp": 1536672681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you might try a <code>BTreeMap</code> instead of a <code>FxHashMap</code></p>",
        "id": 133732061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672718
    },
    {
        "content": "<p>for catching the duplicates</p>",
        "id": 133732111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672729
    },
    {
        "content": "<p>I don't know how to test it as I can't reproduce a different order.</p>",
        "id": 133732129,
        "sender_full_name": "davidtwco",
        "timestamp": 1536672744
    },
    {
        "content": "<p>alternatively, you could do some local experiments:</p>",
        "id": 133732130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672745
    },
    {
        "content": "<p>e.g., store the hashmap into a vector</p>",
        "id": 133732134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672756
    },
    {
        "content": "<p>sort it randomly</p>",
        "id": 133732138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672759
    },
    {
        "content": "<p>and see if it affects your local output order :)</p>",
        "id": 133732148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672766
    },
    {
        "content": "<p>let me see if the sort is obviously non-total (and \"obviously\" should have been total)</p>",
        "id": 133732207,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536672823
    },
    {
        "content": "<p>Yeah, this is suspect: <code>mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span())</code></p>",
        "id": 133732267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536672861
    },
    {
        "content": "<p>Both errors have the same primary span. So the sort of buffered errors doesn't make a difference in this case.</p>",
        "id": 133732278,
        "sender_full_name": "davidtwco",
        "timestamp": 1536672871
    },
    {
        "content": "<p>What was previously insertion order into the buffer is now the same insertion order as into the map (when they are inserted). So the only point where it can happen is when the map is iterated over to re-add into buffer. I think a <code>BTreeMap</code>'ll do it.</p>",
        "id": 133732327,
        "sender_full_name": "davidtwco",
        "timestamp": 1536672920
    },
    {
        "content": "<p>another alterantive is to keep a vector</p>",
        "id": 133732416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536672997
    },
    {
        "content": "<p>that sort of stores the \"canonical order\"</p>",
        "id": 133732425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536673006
    },
    {
        "content": "<p>or something</p>",
        "id": 133732428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536673008
    },
    {
        "content": "<p>anyway, I'm sure it's this somehow</p>",
        "id": 133732429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536673011
    },
    {
        "content": "<p>Yeah, thinking about it with a fresh perspective, it makes sense.</p>",
        "id": 133732482,
        "sender_full_name": "davidtwco",
        "timestamp": 1536673067
    },
    {
        "content": "<p>Pushed a commit for this.</p>",
        "id": 133734417,
        "sender_full_name": "davidtwco",
        "timestamp": 1536674588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> were you able to observe whether it made a difference locally to alter the \"buffer order\"?</p>",
        "id": 133734713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536674854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The test that failed that one time changed the output order.</p>",
        "id": 133735174,
        "sender_full_name": "davidtwco",
        "timestamp": 1536675251
    },
    {
        "content": "<p>cool</p>",
        "id": 133735189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675268
    },
    {
        "content": "<p>usually I solve these things by a judicious change from <code>FxHashMap</code> to <code>BTreeMap</code></p>",
        "id": 133735203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675287
    },
    {
        "content": "<p>I wish there were a more automatic way to figure it out</p>",
        "id": 133735208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675293
    },
    {
        "content": "<p>I would <em>almost</em> say I wish that <code>FxHashMap</code> didn't expose an iterator at all</p>",
        "id": 133735217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675304
    },
    {
        "content": "<p>probably what would be better is just if <code>FxHashMap</code> would preserve insertion order</p>",
        "id": 133735238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675317
    },
    {
        "content": "<p>oh well</p>",
        "id": 133735239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675317
    },
    {
        "content": "<p>I just realised I didn't run all the tests, just that one. Let me double check the rest.</p>",
        "id": 133735240,
        "sender_full_name": "davidtwco",
        "timestamp": 1536675320
    },
    {
        "content": "<p>Alright, I've confirmed they all pass.</p>",
        "id": 133735806,
        "sender_full_name": "davidtwco",
        "timestamp": 1536675763
    },
    {
        "content": "<p>nice</p>",
        "id": 133735946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675886
    },
    {
        "content": "<p>left a quick review</p>",
        "id": 133735994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536675940
    },
    {
        "content": "<p>Oops, forgot about that. Fixed.</p>",
        "id": 133736216,
        "sender_full_name": "davidtwco",
        "timestamp": 1536676127
    }
]