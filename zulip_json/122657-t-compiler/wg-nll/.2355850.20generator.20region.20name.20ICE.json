[
    {
        "content": "<p>I've been looking into this issue. It seems like the region naming code is struggling to get the <code>'a</code> from the parent function of a generator. Locally I've made some changes so the constraint is categorized as a yield rather than a return, then in that case I can try and name the region from the <code>mir.yield_ty</code>. However, that region ends up being a <code>ty::RegionKind::ReVar</code> that I can't really do anything with in terms of the existing naming code. Any ideas?</p>",
        "id": 150768208,
        "sender_full_name": "davidtwco",
        "timestamp": 1543840607
    },
    {
        "content": "<p>in my opinion I'd focus on getting rid of the ICE even if it means giving up on getting any name at all</p>",
        "id": 150768967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543841573
    },
    {
        "content": "<p>especially since I assume this is a PR we'd want to backport</p>",
        "id": 150768974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543841584
    },
    {
        "content": "<p>and therefore its probably better to ensure the PR is easily to verify and backport?</p>",
        "id": 150768991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543841605
    },
    {
        "content": "<p>(i don't have immediate advice for how to extract a good name)</p>",
        "id": 150769006,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543841626
    },
    {
        "content": "<p>Alright, I'll look into doing that instead, at least as a first step.</p>",
        "id": 150769010,
        "sender_full_name": "davidtwco",
        "timestamp": 1543841638
    },
    {
        "content": "<p>Alright, code is a little less nice now I'm needing to return an <code>Option</code> where there was a panic before, but it doesn't ICE.</p>",
        "id": 150769406,
        "sender_full_name": "davidtwco",
        "timestamp": 1543842087
    },
    {
        "content": "<p>Put a PR in with that fix: <a href=\"https://github.com/rust-lang/rust/issues/56460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56460\">#56460</a>. Can decide if it makes more sense just to land that or continue to work on it so that it correctly names the region.</p>",
        "id": 150774986,
        "sender_full_name": "davidtwco",
        "timestamp": 1543848342
    },
    {
        "content": "<p>Given that this seems specific to generators which aren't stable, I'd argue it's fine to iterate on it for a while instead of landing quickly.</p>",
        "id": 150775038,
        "sender_full_name": "davidtwco",
        "timestamp": 1543848366
    },
    {
        "content": "<p>hmm out of curiosity, why did you opt to make it produce BorrowExplanation::Unexplained rather than have BorrowExplanation::MustBeValidFor carry an Option&lt;RegionName&gt; instead of a RegionName?</p>",
        "id": 150775084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543848450
    },
    {
        "content": "<p>(maybe it doesn't matter; I haven't yet looked at the tests)</p>",
        "id": 150775151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543848492
    },
    {
        "content": "<p>or does MustBeValidFor become meaningless if you cannot attach a name to the region?</p>",
        "id": 150775165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543848529
    },
    {
        "content": "<p>I don't think it'd really do much without the name.</p>",
        "id": 150775195,
        "sender_full_name": "davidtwco",
        "timestamp": 1543848585
    },
    {
        "content": "<p>Yeah, it normally highlights where the region is defined (in the fn signature normally) and then labels the place that causes the error saying \"this lives for X, must live for Y\" (or something along those lines) - but we wouldn't have the place where the region is defined or the name Y - that's the region naming part.</p>",
        "id": 150775362,
        "sender_full_name": "davidtwco",
        "timestamp": 1543848734
    },
    {
        "content": "<p>ok</p>",
        "id": 150775416,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543848830
    },
    {
        "content": "<p>Looking into this more and I'm not really sure what a solution would look like. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">GenIter</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GenIter</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">G</span>: <span class=\"nc\">Generator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">G</span>::<span class=\"n\">Yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">resume</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Yielded</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bug</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">GenIter</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">[..]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>In the generator MIR, there's no outlives constraint between the yield type (<code>'_#4r</code> which is constrained to external region <code>'_#2r</code>) and the lifetime it would need to have <code>'a</code> (external region <code>'_#1r</code>) - so when the borrow checker realises there's an error, there's no way for it find <code>'a</code>. It's difficult because the relationship between <code>'a</code> and the yield type is only apparent when you check the <code>Iterator</code> impl.</p>",
        "id": 150837733,
        "sender_full_name": "davidtwco",
        "timestamp": 1543920216
    },
    {
        "content": "<p>(as a reminder, the goal is to be able to add the NLL equivalent of this diagnostic note:)</p>\n<div class=\"codehilite\"><pre><span></span>note: borrowed value must be valid for the lifetime &#39;a as defined on the function body at 35:8...\n  --&gt; $DIR/issue-55850.rs:35:8\n   |\nLL | fn bug&lt;&#39;a&gt;() -&gt; impl Iterator&lt;Item = &amp;&#39;a str&gt; {\n   |        ^^\n</pre></div>",
        "id": 150838028,
        "sender_full_name": "davidtwco",
        "timestamp": 1543920599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I assume you marked PR <a href=\"https://github.com/rust-lang/rust/issues/56460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56460\">#56460</a> as WIP  because, since it uses generators, you figure we can take a bit more time exploring the solution space?</p>",
        "id": 150854356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543936685
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 150854369,
        "sender_full_name": "davidtwco",
        "timestamp": 1543936696
    },
    {
        "content": "<p>maybe we can land the fix to the ICE and file an issue for follow-up attempt to improve diagnostic here?</p>",
        "id": 150854388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543936730
    },
    {
        "content": "<p>(i looked over the PR again just now and it seems fine to me)</p>",
        "id": 150854420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543936758
    },
    {
        "content": "<p>If you want to do that, feel free to un-WIP that PR and review. We can open a follow-up issue.</p>",
        "id": 150854425,
        "sender_full_name": "davidtwco",
        "timestamp": 1543936761
    },
    {
        "content": "<p>okay</p>",
        "id": 150854427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543936766
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/56508\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56508\">#56508</a> as the followup issue.</p>",
        "id": 150854736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543937090
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 150854959,
        "sender_full_name": "davidtwco",
        "timestamp": 1543937331
    }
]