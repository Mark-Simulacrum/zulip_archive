[
    {
        "content": "<p>okay, so i'm currently looking at this issue, and the first thing i'd like to know now is which function MIR borrowck calls in order to generate that error message</p>",
        "id": 131007960,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533595006
    },
    {
        "content": "<p>i currently have a few ideas: <code>check_access_conflict</code> or <code>check_access_permissions</code></p>",
        "id": 131007968,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533595035
    },
    {
        "content": "<p><code>check_access_conflict</code>, I believe</p>",
        "id": 131009079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533596924
    },
    {
        "content": "<p><code>check_access_permissions</code> is different -- it checks just one borrow to see if you have sufficient permissions to do that (e.g., an <code>&amp;mut</code> borrow of something that is not mutable is just a plain error)</p>",
        "id": 131009089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533596952
    },
    {
        "content": "<p>i'm forgetting things, but I recall that there's a BasicBlock data structure that i can access somewhere</p>",
        "id": 131965137,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534013590
    },
    {
        "content": "<p>bingo, it's MIR</p>",
        "id": 131965192,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534013682
    },
    {
        "content": "<p>i'm planning to use this to look for the next MIR statements that have a function call argument containing the \"starting borrow's\" temporary</p>",
        "id": 131965204,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534013741
    },
    {
        "content": "<p>actually, that is not necessary, because function calls are only done in terminators</p>",
        "id": 131975021,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534035301
    },
    {
        "content": "<p>now here comes a problem: i have two <code>Place</code>s, and i want to know if one of them is assigned from another (or if they're both equal)</p>",
        "id": 131975160,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534035628
    },
    {
        "content": "<p>oh, looks like i can call <code>base_path</code> to achieve that effect</p>",
        "id": 131975260,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534035889
    },
    {
        "content": "<p>nope, that's only for dereffing Projections</p>",
        "id": 131976068,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534037682
    },
    {
        "content": "<p>what does \"assigned from another\" mean? can you give an example?</p>",
        "id": 131988954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534063702
    },
    {
        "content": "<p>you might want <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/places_conflict/fn.places_conflict.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/places_conflict/fn.places_conflict.html\"><code>places_conflict</code></a>?</p>",
        "id": 131988959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534063737
    },
    {
        "content": "<p>i meant \"from the other\"</p>",
        "id": 131990525,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534067187
    },
    {
        "content": "<p>i have two <code>Place</code>s, and i want to determine whether there is a relationship between them</p>",
        "id": 131990527,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534067219
    },
    {
        "content": "<p>it doesn't look like <code>places_conflict</code> does what i need, since it doesn't trace the \"assignment path\" that a place took</p>",
        "id": 132021073,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129246
    },
    {
        "content": "<p>here's an MIR example:</p>\n<p>_2 = _1<br>\n_3 = _2<br>\n_4 = const Foo::foo(move _3)</p>",
        "id": 132021088,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129312
    },
    {
        "content": "<p>now, suppose that i have _1 and _3</p>",
        "id": 132021129,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129329
    },
    {
        "content": "<p>my objective here is to show that they're the same place</p>",
        "id": 132021131,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129339
    },
    {
        "content": "<p>aside from that, I seem to be running into trouble getting the correct span for the function call i want</p>",
        "id": 132021296,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">buckets</span><span class=\"p\">.</span><span class=\"n\">slice_mut</span><span class=\"p\">()[(</span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">).</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">).</span><span class=\"n\">wrapping_rem</span><span class=\"p\">(</span><span class=\"n\">buckets</span><span class=\"p\">.</span><span class=\"n\">sweep</span><span class=\"p\">())]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132021303,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129612
    },
    {
        "content": "<p>for some reason, the basic block terminator's span underlines <code>buckets.slice_mut()</code> and not <code>buckets.sweep()</code></p>",
        "id": 132021312,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534129641
    },
    {
        "content": "<p>huh, so i was looking at the wrong bb</p>",
        "id": 132022225,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534131103
    },
    {
        "content": "<p>also, i'm heavily overthinking this, the relevant data that i need is all in <code>BorrowData</code></p>",
        "id": 132022708,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534131987
    },
    {
        "content": "<p>alright, PR out <a href=\"https://github.com/rust-lang/rust/pull/53305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53305\">https://github.com/rust-lang/rust/pull/53305</a></p>",
        "id": 132025698,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534138115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm thinking that your suggestion as written doesn't quite work the way we want it</p>",
        "id": 132270609,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534460965
    },
    {
        "content": "<p>in my PR, i ignore the \"starting borrow\" altogether, and only focused on looking at the location that the conflicting borrow occured</p>",
        "id": 132270663,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534461017
    },
    {
        "content": "<p>that's obviously not the correct way, but factoring the \"starting borrow\" into consideration doesn't help much</p>",
        "id": 132270695,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534461113
    },
    {
        "content": "<p>because the lvalue on that starting borrow immediately gets used as an argument to a function, and so there's nothing in between the \"starting borrow\" and the error location</p>",
        "id": 132270741,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534461160
    },
    {
        "content": "<p>i suspect you wanted to say \"the error case between the lvalue of the return value of the function and the time it's dropped\", instead of \"the error case between the starting borrow and the call\"?</p>",
        "id": 132270801,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534461276
    },
    {
        "content": "<p>possibly also with the additional requirement that the return value of that function contains a lifetime associated with the \"starting borrow\"</p>",
        "id": 132273135,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534465047
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> quite possibly so!</p>",
        "id": 132527083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868690
    },
    {
        "content": "<p>can I check your PR for context?</p>",
        "id": 132527105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868707
    },
    {
        "content": "<p>Yeah, it's  <a href=\"https://github.com/rust-lang/rust/pull/53305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53305\">https://github.com/rust-lang/rust/pull/53305</a></p>",
        "id": 132528288,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534870125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  regarding the comments you left, i think what you have in mind is significantly less in scope than what I have imagined</p>",
        "id": 132662113,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060085
    },
    {
        "content": "<p>because it seems that we're only interested in solving the cases where <code>foo(xxx, ..., yyy)</code> causes a problem</p>",
        "id": 132662131,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060116
    },
    {
        "content": "<p>whereas in the problematic code where the issue was raised, the line of code is:</p>",
        "id": 132662189,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060166
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>buckets.slice_mut()[(key as usize).wrapping_add(22).wrapping_rem(buckets.sweep())] = 22;\n</pre></div>",
        "id": 132662192,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060171
    },
    {
        "content": "<p>and this is a conflict between <code>buckets.slice_mut()</code> and <code>buckets.sweep()</code></p>",
        "id": 132662212,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060208
    },
    {
        "content": "<p>it does not follow the format of <code>foo(xxx, ..., yyy)</code></p>",
        "id": 132662219,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060227
    },
    {
        "content": "<p>well, it does</p>",
        "id": 132662291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060334
    },
    {
        "content": "<p>if you desugar, you get</p>",
        "id": 132662294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060337
    },
    {
        "content": "<p><code>wrapping_rem(&amp;mut buckets.slice_mut()[(key as usize).wrapping_add(22), buckets.sweep())</code> or something like that...</p>",
        "id": 132662302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060356
    },
    {
        "content": "<p>I'm not sure how much that matters though</p>",
        "id": 132662305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060366
    },
    {
        "content": "<p>all this stuff disappears in MIR to some extent</p>",
        "id": 132662307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060371
    },
    {
        "content": "<p>that doesn't seem to look like what you described in the MIR</p>",
        "id": 132662310,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060382
    },
    {
        "content": "<p>oh, you were talking strictly about HIR?</p>",
        "id": 132662348,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060402
    },
    {
        "content": "<p>no, not at all</p>",
        "id": 132662367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060417
    },
    {
        "content": "<p>I mean .. we're analyzing the MIR</p>",
        "id": 132662371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060425
    },
    {
        "content": "<p>I'm not proposing we look at the HIR</p>",
        "id": 132662374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060428
    },
    {
        "content": "<p>but in the MIR there is somewhere a <code>Call(A, B)</code> -- and producing that value <code>A</code> creates a mut borrow, whereas producing <code>B</code> takes a shared borrow of same path</p>",
        "id": 132662385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060456
    },
    {
        "content": "<p>but I'm not sure it's the right way to think about it</p>",
        "id": 132662400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060474
    },
    {
        "content": "<p>huh, i'm not seeing that...</p>",
        "id": 132662412,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060505
    },
    {
        "content": "<p>here's the MIR in question <a href=\"https://github.com/rust-lang/rust/pull/53305#issuecomment-412427620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53305#issuecomment-412427620\">https://github.com/rust-lang/rust/pull/53305#issuecomment-412427620</a></p>",
        "id": 132662417,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060511
    },
    {
        "content": "<p>it's the terminator for bb0 and bb4</p>",
        "id": 132662469,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060527
    },
    {
        "content": "<p>they both take a reference of _1, bb0 uses it mutably while bb4 uses it immutably</p>",
        "id": 132662476,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060543
    },
    {
        "content": "<p>well, the call that brings them togther is</p>\n<div class=\"codehilite\"><pre><span></span>_5 = const core::num::&lt;impl usize&gt;::wrapping_rem(move _6, move _9)\n</pre></div>",
        "id": 132662495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060577
    },
    {
        "content": "<p>from <code>bb5</code></p>",
        "id": 132662498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060582
    },
    {
        "content": "<p>i see, but the error is raised at bb4</p>",
        "id": 132662509,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060597
    },
    {
        "content": "<p>I didn't mean to imply that the point where the error is raised</p>",
        "id": 132662513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060610
    },
    {
        "content": "<p>is the call that brings them together</p>",
        "id": 132662515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060614
    },
    {
        "content": "<p>in fact, I would not expect that</p>",
        "id": 132662516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060617
    },
    {
        "content": "<p>the point where error is part of creating the <em>argument</em> (probably the 2nd one)</p>",
        "id": 132662523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060633
    },
    {
        "content": "<p>so e.g. this call from bb4 produces <code>_9</code></p>",
        "id": 132662566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060649
    },
    {
        "content": "<p>which then feeds into the call at <code>bb6</code> (along with <code>_6</code>)</p>",
        "id": 132662570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060662
    },
    {
        "content": "<p>and here the bug is because there is some mut borrow that is held live because of <code>_6</code></p>",
        "id": 132662575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060676
    },
    {
        "content": "<p>but I'm not sure how relevant that is</p>",
        "id": 132662582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060701
    },
    {
        "content": "<p>like, we're basically trying to say \"maybe you should pull this subcomputation out and do it earlier\"</p>",
        "id": 132662599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060721
    },
    {
        "content": "<p>and that could apply in many cases</p>",
        "id": 132662600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060723
    },
    {
        "content": "<p>for example</p>",
        "id": 132662602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132662615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060741
    },
    {
        "content": "<p>maybe we can identify that <code>foo + 1</code> could be extracted earlier</p>",
        "id": 132662622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060756
    },
    {
        "content": "<p>I guess to be <em>really</em> right here we'd want to do a more involved \"availability\" analysis</p>",
        "id": 132662679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060794
    },
    {
        "content": "<p>(e.g., this is a kind of code motion)</p>",
        "id": 132662682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060801
    },
    {
        "content": "<p>that seems a bit much</p>",
        "id": 132662686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060808
    },
    {
        "content": "<p>yeah, i feel like with the tools we currently have in the compiler, we aren't able to accomplish this analysis yet</p>",
        "id": 132662696,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060825
    },
    {
        "content": "<p>we could do something hackier involving spans or something but..ugh</p>",
        "id": 132662705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060854
    },
    {
        "content": "<p>but that does sound like the correct way</p>",
        "id": 132662707,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060856
    },
    {
        "content": "<p>yeah I mean the code motion thing is the <em>right</em> thing</p>",
        "id": 132662715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060881
    },
    {
        "content": "<p>the only problem is whether we'd want a reduced (and perhaps a bit incorrect) subset of this analysis</p>",
        "id": 132662732,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535060882
    },
    {
        "content": "<p>it's sort of unclear because we might want to make the suggestion</p>",
        "id": 132662777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060896
    },
    {
        "content": "<p>even if we can't be sure it wouldn't affect semantics..?</p>",
        "id": 132662781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060909
    },
    {
        "content": "<p>anyway</p>",
        "id": 132662782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060911
    },
    {
        "content": "<p>the alternative is</p>",
        "id": 132662783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060913
    },
    {
        "content": "<p>we don't necessarily <em>suggest</em> anything</p>",
        "id": 132662785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060918
    },
    {
        "content": "<p>well</p>",
        "id": 132662790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060926
    },
    {
        "content": "<p>we can make a more generic suggestion like</p>",
        "id": 132662794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060934
    },
    {
        "content": "<p>\"is it possible to move the shared borrow so it executes earlier?\"</p>",
        "id": 132662797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060941
    },
    {
        "content": "<p>this could apply a lot of times</p>",
        "id": 132662803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060950
    },
    {
        "content": "<p>and/or we somehow explain what is happening better</p>",
        "id": 132662808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535060973
    },
    {
        "content": "<p>sorry, i'm still stuck at looking at the MIR for this particular issue</p>",
        "id": 132662892,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061094
    },
    {
        "content": "<p>i can't see how <code>_6</code> matters here</p>",
        "id": 132662894,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061102
    },
    {
        "content": "<p>it doesn't <em>in particular</em></p>",
        "id": 132662897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061119
    },
    {
        "content": "<p>the question is basically \"when do we offer a suggestion\"</p>",
        "id": 132662941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061148
    },
    {
        "content": "<p>basically from the MIR POV there is no difference between \"a[x] += a[y]\" and <code>let p = &amp;mut a[x]; let v = a[y]; *p += v</code></p>",
        "id": 132662948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061181
    },
    {
        "content": "<p>which is exactly the problem</p>",
        "id": 132662952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061185
    },
    {
        "content": "<p>i.e., why we have an error</p>",
        "id": 132662954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061188
    },
    {
        "content": "<p>but so either we just suggest \"maybe move the shared borrow earlier\" like... all the time</p>",
        "id": 132662958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061200
    },
    {
        "content": "<p>or we compare lines or something</p>",
        "id": 132662960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061207
    },
    {
        "content": "<p>I was thinking \"or else we try to see if this arose as part of generating temporaries for a method call\"</p>",
        "id": 132662968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061228
    },
    {
        "content": "<p>ahh ok, so all we're really concerned about is whether the problematic borrow is later used as an argument to a funciton</p>",
        "id": 132662970,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061234
    },
    {
        "content": "<p>which kind of suggests that it was a <code>foo(&amp;mut a[x], a[y])</code> situation</p>",
        "id": 132663006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061243
    },
    {
        "content": "<p>but there is no particular reason that this suggestion only applies then</p>",
        "id": 132663017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061259
    },
    {
        "content": "<p>and we don't check what happens with the \"starting borrow\"</p>",
        "id": 132663019,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061262
    },
    {
        "content": "<p>except it's sort of... mildly less likely that there is \"interference\"</p>",
        "id": 132663024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535061269
    },
    {
        "content": "<p>hmm... i would've expected <code>let p = &amp;mut a[x]; let v = a[y]; *p += v</code> to compile</p>",
        "id": 132663186,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061518
    },
    {
        "content": "<p>but <code>a[x] += a[y]</code> would not</p>",
        "id": 132663204,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1535061546
    },
    {
        "content": "<p><code>a[x] += a[y]</code> only sometimes does, I think; only if a is a <code>&amp;mut [u32]</code> or some such thing</p>",
        "id": 132669003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071404
    }
]