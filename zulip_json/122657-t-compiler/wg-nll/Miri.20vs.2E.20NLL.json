[
    {
        "content": "<p>In <a href=\"https://github.com/solson/miri/issues/628\" target=\"_blank\" title=\"https://github.com/solson/miri/issues/628\">https://github.com/solson/miri/issues/628</a>, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> showed me how Miri can treat a function call differently from how NLL treats it based on the ordering of arguments. Specifically:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">x_0</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x_1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x_0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// OK by Miri</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}, {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">x_0</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Flagged by Miri</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}, {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_0</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158130853,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549989102
    },
    {
        "content": "<p>And it appears that this extends to straight-forward function calls: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">double_drop</span><span class=\"o\">&lt;</span><span class=\"n\">T0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T1</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">T1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"c1\">//let _val = *y;</span>\n<span class=\"w\">    </span><span class=\"c1\">//let _val = *x;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Bad</span>\n<span class=\"w\">    </span><span class=\"c1\">// let _val = *x;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let _val = *y;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"c1\">// double_drop(*y, *x);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Bad</span>\n<span class=\"w\">    </span><span class=\"c1\">// double_drop(*x, *y);</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158131149,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549989332
    },
    {
        "content": "<p>Is it just that the formatting macros are doing something complicated compared to a function?</p>",
        "id": 158131218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549989374
    },
    {
        "content": "<p>I do know that they do some trickery</p>",
        "id": 158131233,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549989391
    },
    {
        "content": "<p>it's not really Miri treating it \"differently\", at least not in the sense of there being a conflict. Miri accepts more code than NLL does, for sure -- by design. NLL and Miri both care about the order in which accesses happen. Miri, being a dynamic check, should IMO not give a meaning to the \"statement boundary\" (that's C \"sequence points\" all over again, no thanks). NLL decides to be somewhat more conservative here.</p>",
        "id": 158387497,
        "sender_full_name": "RalfJ",
        "timestamp": 1550005652
    },
    {
        "content": "<blockquote>\n<p>And it appears that this extends to straight-forward function calls</p>\n</blockquote>\n<p>is \"Ok\"/\"Bad\" here describing Miri or NLL behavior?</p>",
        "id": 158387588,
        "sender_full_name": "RalfJ",
        "timestamp": 1550005707
    },
    {
        "content": "<blockquote>\n<p>NLL decides to be somewhat more conservative here.</p>\n</blockquote>\n<p>I think that was my (unstated) question â€” should/can NLL not have that conservatism?</p>\n<blockquote>\n<p>is \"Ok\"/\"Bad\" here describing Miri or NLL behavior?</p>\n</blockquote>\n<p><code>OK</code> means that the code can compile, <code>Bad</code> means it does not; Miri is not involved there</p>",
        "id": 158458424,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1550077965
    }
]