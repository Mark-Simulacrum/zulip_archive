[
    {
        "content": "<p>FYI, this test case no longer ICEs on the latest master - it still produces an incorrect error though.</p>",
        "id": 136367697,
        "sender_full_name": "davidtwco",
        "timestamp": 1540329227
    },
    {
        "content": "<p>progess :P</p>",
        "id": 136367935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329472
    },
    {
        "content": "<p>Do you have any plans for how you'd like this tackled? It seems like the cause is the constraint to static created as a result of the <code>AscribeUserTy</code> statement.</p>",
        "id": 136371108,
        "sender_full_name": "davidtwco",
        "timestamp": 1540332998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> i think we need to modify the promotion code to permit promotion even when there is a <code>AscribeUserTy</code> statement; <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> or <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> may have more insights, or I can take a closer look tomorrow</p>",
        "id": 136376313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540339791
    },
    {
        "content": "<p>Most likely, in <code>qualify_const.rs</code> one needs to prevent the visitor from recursing into <code>AscribeUserTy</code> (I'm not sure where though), because otherwise the const qualifier will see the place that is ascribed twice and assume that there are two accesses and thus the value cannot be promoted</p>",
        "id": 136392866,
        "sender_full_name": "oli",
        "timestamp": 1540367838
    },
    {
        "content": "<p>Unless I'm being naive and this isn't the only place where that might happen, <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/qualify_consts.rs#L1124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/qualify_consts.rs#L1124\"><code>AscribeUserTy</code> is only visited once</a>?</p>",
        "id": 136393724,
        "sender_full_name": "davidtwco",
        "timestamp": 1540368941
    },
    {
        "content": "<p>That's what I thought, too, but I haven't been able to figure out what else could have caused this. Did the MIR around the <code>AscribeUserTy</code> change? Or was the statement just added additionally without any other MIR changes?</p>",
        "id": 136395655,
        "sender_full_name": "oli",
        "timestamp": 1540371553
    },
    {
        "content": "<p>As I understand it, the <code>AscribeUserTy</code> statement was added for this case to support user type annotations in cast statements - but in this particular instance, that new statement is resulting in a constraint that the lifetime must be <code>'static</code>. I think what is happening is that the error caused by that new constraint is happening before the promotion to <code>'static</code>.</p>",
        "id": 136395848,
        "sender_full_name": "davidtwco",
        "timestamp": 1540371801
    },
    {
        "content": "<p>As before, without this constraint, there wouldn't be an error generated by that constraint not being met and then it will get to be promoted and everything ends up fine.</p>",
        "id": 136395991,
        "sender_full_name": "davidtwco",
        "timestamp": 1540371862
    },
    {
        "content": "<p>That's my working theory, at least.</p>",
        "id": 136395996,
        "sender_full_name": "davidtwco",
        "timestamp": 1540371868
    },
    {
        "content": "<p>I think you're on the right track</p>",
        "id": 136397064,
        "sender_full_name": "oli",
        "timestamp": 1540373145
    },
    {
        "content": "<p>the borrow checker runs after promotion</p>",
        "id": 136397073,
        "sender_full_name": "oli",
        "timestamp": 1540373155
    },
    {
        "content": "<p>the value that <code>AscribeUserTy</code> refers to was promoted successfully</p>",
        "id": 136397119,
        "sender_full_name": "oli",
        "timestamp": 1540373176
    },
    {
        "content": "<p>the problem is that <code>AscribeUserTy</code> still points to the unpromoted value</p>",
        "id": 136397120,
        "sender_full_name": "oli",
        "timestamp": 1540373188
    },
    {
        "content": "<p>Ah, so I should try update that during promotion?</p>",
        "id": 136397133,
        "sender_full_name": "davidtwco",
        "timestamp": 1540373222
    },
    {
        "content": "<p>Or is that not a thing that can be done?</p>",
        "id": 136397141,
        "sender_full_name": "davidtwco",
        "timestamp": 1540373231
    },
    {
        "content": "<p>jup, and it can be done</p>",
        "id": 136397144,
        "sender_full_name": "oli",
        "timestamp": 1540373247
    },
    {
        "content": "<p>but not in <code>qualify_const.rs</code></p>",
        "id": 136397146,
        "sender_full_name": "oli",
        "timestamp": 1540373255
    },
    {
        "content": "<p>you'll need to do it in <code>promote_consts.rs</code></p>",
        "id": 136397148,
        "sender_full_name": "oli",
        "timestamp": 1540373264
    },
    {
        "content": "<p>that's where the actual promotion is happening</p>",
        "id": 136397152,
        "sender_full_name": "oli",
        "timestamp": 1540373281
    },
    {
        "content": "<p>Alright. I'll see what I can come up with. Thanks.</p>",
        "id": 136397195,
        "sender_full_name": "davidtwco",
        "timestamp": 1540373292
    },
    {
        "content": "<p>interesting</p>",
        "id": 136415140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540393085
    },
    {
        "content": "<p>So, having just had a chance to look at this a little, in both cases (the working case where I remove the cast and the not-working case where I don't remove the cast), I only see <code>rustc_mir::transform::promote_consts: promote_candidates([])</code> - as if there isn't any promotion happening, in either case?</p>\n<p><a href=\"https://gist.github.com/davidtwco/f529f630b4599ebbf4b4e680bd5ddd97\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/f529f630b4599ebbf4b4e680bd5ddd97\">This is the MIR without the cast</a>.<br>\n<a href=\"https://gist.github.com/davidtwco/85082eac3665afc9ae9f8969ba3b61d8\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/85082eac3665afc9ae9f8969ba3b61d8\">This is the MIR with the cast</a>.</p>",
        "id": 136438653,
        "sender_full_name": "davidtwco",
        "timestamp": 1540417792
    },
    {
        "content": "<p>Hoping I'll have some more time tomorrow night to properly dig in and see if I can't work anything out.</p>",
        "id": 136438916,
        "sender_full_name": "davidtwco",
        "timestamp": 1540418110
    },
    {
        "content": "<p>I think that the partial log statement I sent above comes from the empty main function - since const promotion is limited to either functions or const functions. It is not coming from the static map.</p>",
        "id": 136439088,
        "sender_full_name": "davidtwco",
        "timestamp": 1540418316
    },
    {
        "content": "<p>(I've double checked this, the <code>mode</code> variable that decides which branch we go into in <code>qualify_consts.rs</code> is <code>Mode::Static</code> which doesn't end up calling <code>promote_consts::promote_candidates</code>)</p>",
        "id": 136439119,
        "sender_full_name": "davidtwco",
        "timestamp": 1540418363
    },
    {
        "content": "<p>There's either somewhere else in <code>qualify_consts</code> that makes the working case work; or it's something else entirely. I'm not sure.</p>",
        "id": 136439146,
        "sender_full_name": "davidtwco",
        "timestamp": 1540418400
    },
    {
        "content": "<p>This looks suspicious</p>\n<div class=\"codehilite\"><pre><span></span>_3 = &amp;_4;                        // bb0[16]: scope 0 at src/test/ui/nll/issue-55288.rs:17:27: 19:2\n// ...\nStorageDead(_4); // bb0[21]: scope 0 at src/test/ui/nll/issue-55288.rs:19:2: 19:3\n</pre></div>",
        "id": 136439686,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540418913
    },
    {
        "content": "<p>Hmm, yes, curious. I agree with <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> that the immediate <em>cause</em> of the error is that we have a <code>StorageDead</code></p>",
        "id": 136477953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475281
    },
    {
        "content": "<p>Why is that <code>StorageDead</code> strange?</p>",
        "id": 136478010,
        "sender_full_name": "davidtwco",
        "timestamp": 1540475305
    },
    {
        "content": "<p>of course the next question is <em>why</em></p>",
        "id": 136478013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475310
    },
    {
        "content": "<p>IIRC, in statics/constants, we emit <code>StorageDead</code> only for temporaries that doesn't escape into static scope — so why does it consider this a temporary etc in one case but not the other?</p>",
        "id": 136478016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475313
    },
    {
        "content": "<p>well, it's not whether it's strange or not, but it causes the error for sure— we are reporting the error because we see a <code>StorageDead</code> and we have an outstanding borrow</p>",
        "id": 136478039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475340
    },
    {
        "content": "<p>Ah, I didn't know that we used <code>StorageDead</code> differently in statics/consts.</p>",
        "id": 136478081,
        "sender_full_name": "davidtwco",
        "timestamp": 1540475376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you familiar with the temporary lifetime rules?</p>",
        "id": 136478434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475666
    },
    {
        "content": "<p>e.g., <code>let x = foo(&amp;something())</code> -- in this, the return value of <code>something()</code> is saved into a temporary that is freed before the next statement</p>",
        "id": 136478455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475691
    },
    {
        "content": "<p><code>let x = &amp;something()</code> -- but here we extend the lifetime till the end of the block</p>",
        "id": 136478463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475702
    },
    {
        "content": "<p>the idea for statics/consts is to apply the same rules to the value of the static -- if it would have been \"extended till end of block\", it is never freed, but otherwise, it is</p>",
        "id": 136478490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475726
    },
    {
        "content": "<p>in this case, I would <em>expect</em> the <code>StorageDead</code></p>",
        "id": 136478499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475737
    },
    {
        "content": "<p>(but I would also have expected promotion to kick in, maybe it a bit of a moot point)</p>",
        "id": 136478513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475756
    },
    {
        "content": "<p>so actually the question is more why <strong>doesn't</strong> the <code>StorageDead</code> get emitted?</p>",
        "id": 136478516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475760
    },
    {
        "content": "<p>(in the case that compiles successfully)</p>",
        "id": 136478565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540475768
    },
    {
        "content": "<p>That makes sense. Hadn't considered how those rules would apply to statics.</p>",
        "id": 136478568,
        "sender_full_name": "davidtwco",
        "timestamp": 1540475775
    },
    {
        "content": "<p>I can dig into that more when I'm next looking at this.</p>",
        "id": 136478577,
        "sender_full_name": "davidtwco",
        "timestamp": 1540475787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, I've worked out what the issue is here.</p>",
        "id": 136506055,
        "sender_full_name": "davidtwco",
        "timestamp": 1540500496
    },
    {
        "content": "<p>In the below snippet of MIR, the use of <code>_6</code> in the <code>AscribeUserType</code> statement is causing the const promotion (which is actually happening despite my theory otherwise because of the branch it was falling into) to not happen, as was the suspicion all along.</p>\n<div class=\"codehilite\"><pre><span></span>        _6 = move _7;                    // bb0[12]: scope 0 at src/test/ui/nll/issue-55288.rs:18:5: 18:35\n        AscribeUserType(_6, o, Ty(Canonical { variables: [], value: &amp;&#39;static [u8] })); // bb0[13]: scope 0 at src/test/ui/nll/issue-55288.rs:18:5: 18:35\n       _5 = _6; // bb0[14]: scope 0 at src/test/ui/nll/issue-55288.rs:18:5: 18:35\n</pre></div>\n\n\n<p>In particular, what was happening was that the <code>TempState</code> for <code>_6</code> is being marked as <code>Unpromotable</code> and then that meant it got flagged as <code>Qualif::NOT_PROMOTABLE</code> so didn't become a promotion candidate and as a result, didn't get the <code>StorageDead</code> statements removed by the <code>qualify_consts</code> pass.</p>\n<p><code>_6</code> is being marked as <code>Unpromotable</code> because the <code>PlaceContext::Validate</code> returns <code>false</code> from <code>is_nonmutating_use</code>. That made a difference <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L118-L128\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L118-L128\">in this code</a>. Without the <code>PlaceContext::Validate</code> introduced by the user type assertions, visiting the local never resulted in a <code>TempState::Unpromotable</code> and therefore was always promoted and the relevant <code>StorageDead</code> statements removed. I guess the solution if we want to make this code work is to either special-case <code>PlaceContext::Validate</code> as <code>true</code> just like <code>PlaceContext::Borrow</code> here, or change the return value of <code>is_nonmutating_use</code> to <code>true</code> for that <code>PlaceContext</code> variant.</p>",
        "id": 136506364,
        "sender_full_name": "davidtwco",
        "timestamp": 1540500844
    },
    {
        "content": "<p>Or something else that you think of.</p>",
        "id": 136506375,
        "sender_full_name": "davidtwco",
        "timestamp": 1540500856
    },
    {
        "content": "<p>I would imagine <code>Validate</code> would be a non-mutating use. But I don't know the const promotion code...</p>",
        "id": 136506784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501239
    },
    {
        "content": "<p>but you say that this same code is also special-casing <code>PlaceContext::Borrow</code>  ?</p>",
        "id": 136506809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501278
    },
    {
        "content": "<p>ah I see, you linked it. Hmm.</p>",
        "id": 136506823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501306
    },
    {
        "content": "<p>IIRC there was a topic in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> like this a bit ago.</p>",
        "id": 136506880,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501345
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/subject/PlaceContext.20for.20AscribeUserType/near/136343874\" title=\"#narrow/stream/131828-t-compiler/subject/PlaceContext.20for.20AscribeUserType/near/136343874\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/subject/PlaceContext.20for.20AscribeUserType/near/136343874</a></p>",
        "id": 136506991,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501454
    },
    {
        "content": "<p>It looks like this might fix itself if whatever change <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was landing changes the variant used by <code>AscribeUserType</code> in <code>PlaceContext</code> and that variant returns <code>true</code> from <code>is_nonmutating_use</code>.</p>",
        "id": 136507102,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501574
    },
    {
        "content": "<p>It seems wrong to make any change if <code>PlaceContext::Validate</code> is intended for use by miri and not just <code>AscribeUserType</code>?</p>",
        "id": 136507120,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501634
    },
    {
        "content": "<p>yeah I agree. It sounds like I misunderstood what Validate is used for</p>",
        "id": 136507124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501642
    },
    {
        "content": "<p>maybe coordinate with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> here. Find out where they are in their PR</p>",
        "id": 136507128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501659
    },
    {
        "content": "<p>worst case scenario: Add a new PlaceContext yourself</p>",
        "id": 136507132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501667
    },
    {
        "content": "<p>Yeah, I think that makes sense. If they have a big PR that might not land for a while then I'll make something small that adds the new variant so we can get this fixed, otherwise I'll leave it.</p>",
        "id": 136507180,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501696
    },
    {
        "content": "<p>right. and your adding a new PlaceContext will force <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> to deal with it upon rebase. Or vice versa, depending on who wins the race.</p>",
        "id": 136507190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501726
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 136507194,
        "sender_full_name": "davidtwco",
        "timestamp": 1540501738
    },
    {
        "content": "<p>(I agree with all this; adding a new <code>PlaceContext</code> is indeed what I expected the fix would be)</p>",
        "id": 136507624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> My PR at <a href=\"https://github.com/rust-lang/rust/pull/55316\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55316\">https://github.com/rust-lang/rust/pull/55316</a> does add a <code>PlaceContext</code> variant for <code>AscribeUserType</code></p>",
        "id": 136529690,
        "sender_full_name": "RalfJ",
        "timestamp": 1540537025
    },
    {
        "content": "<p>but I made it neither mutating nor nonmutating use because that's what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> told me to do ;)</p>",
        "id": 136529699,
        "sender_full_name": "RalfJ",
        "timestamp": 1540537044
    },
    {
        "content": "<p>Awesome. I guess this fixes itself then. Presumably the test case from the issue here doesn’t fail to compile on your branch?</p>",
        "id": 136529906,
        "sender_full_name": "davidtwco",
        "timestamp": 1540537341
    },
    {
        "content": "<p>In fact, re-reading your message, this still won't be fixed as the <code>is_nonmutating_use</code> is <code>false</code> (which is correct). We'd still need to special-case the new variant <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L121\">here</a> to make this issue pass.</p>",
        "id": 136533069,
        "sender_full_name": "davidtwco",
        "timestamp": 1540542611
    },
    {
        "content": "<p>(that and adding a test for the example in the issue)</p>",
        "id": 136533168,
        "sender_full_name": "davidtwco",
        "timestamp": 1540542815
    },
    {
        "content": "<p>I'm wondering why else branch in that code is <code>context.is_nonmutating_use()</code> and not <code>!context.is_mutating_use()</code></p>",
        "id": 136536020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540546846
    },
    {
        "content": "<p>Is it because it increments <code>*uses</code> ?</p>",
        "id": 136536033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540546892
    },
    {
        "content": "<p>I'd have assumed that <code>context.is_nonmutating_use()</code> was just <code>!context.is_mutating_use()</code>.</p>",
        "id": 136536080,
        "sender_full_name": "davidtwco",
        "timestamp": 1540546939
    },
    {
        "content": "<p>except its not, since <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> made it \"neither mutating nor nonmutating use\"</p>",
        "id": 136536091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540546966
    },
    {
        "content": "<p>Yeah, I realise that now. That's where it threw my expections.</p>",
        "id": 136536101,
        "sender_full_name": "davidtwco",
        "timestamp": 1540546988
    },
    {
        "content": "<p>note in particular that there's an <code>is_use()</code> method that just does the <em>OR</em> of <code>is_mutating_use()</code> and <code>is_nonmutating_use()</code></p>",
        "id": 136536102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540546991
    },
    {
        "content": "<p>right, gotcha</p>",
        "id": 136536104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540546993
    },
    {
        "content": "<p>But that is why, if someone had the understanding I did, they might call <code>is_nonmutating_use</code> when they really meant <code>!is_mutating_use</code>.</p>",
        "id": 136536110,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547021
    },
    {
        "content": "<p>true</p>",
        "id": 136536111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547030
    },
    {
        "content": "<p>I dont understand what these classifiers are used for at all</p>",
        "id": 136536157,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547060
    },
    {
        "content": "<p><code>Validate</code> was for miri's validation statements though, so that was definitely wrong</p>",
        "id": 136536163,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547072
    },
    {
        "content": "<p>oh dear, I was hoping <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was our local expert. :)</p>",
        "id": 136536165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547075
    },
    {
        "content": "<p>this is NLL land. or borrowck. or so. I know nothing about any of that^^</p>",
        "id": 136536174,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547091
    },
    {
        "content": "<p>I know a lot about CTFE/miri and that's pretty much the end of my rustc knowledge :)</p>",
        "id": 136536177,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547102
    },
    {
        "content": "<p>well its actually const promotion code</p>",
        "id": 136536183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547107
    },
    {
        "content": "<p>/me runs away screaming</p>",
        "id": 136536186,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547114
    },
    {
        "content": "<p>I can understand why <code>AscribeUserTy</code> isn't a mutating use or a nonmutating use - since it isn't using the value, just doing a check.</p>",
        "id": 136536190,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547129
    },
    {
        "content": "<p>const promotion doesn't overlap with CTFE ?</p>",
        "id": 136536194,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^ ?</p>",
        "id": 136536197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547141
    },
    {
        "content": "<p>now that <code>Validate</code> is gone, there is <code>Retag</code>. that has a side-effect in miri, it mutates the content of the place, so I made it a mutating use....^^</p>",
        "id": 136536201,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> const promotion is a static analysis on MIR</p>",
        "id": 136536206,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547158
    },
    {
        "content": "<p>it has no code overlap with CTFE</p>",
        "id": 136536208,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547162
    },
    {
        "content": "<p>but a lot of overlap of concerns</p>",
        "id": 136536246,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547166
    },
    {
        "content": "<p>okay</p>",
        "id": 136536249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547168
    },
    {
        "content": "<p>I think the correct approach here is actually to change that line to <code>!is_mutating_use</code>.</p>",
        "id": 136536250,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547172
    },
    {
        "content": "<p>also, it exists twice (once on HIR and once on MIR)</p>",
        "id": 136536251,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547172
    },
    {
        "content": "<p>and both passes are a mess</p>",
        "id": 136536254,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547178
    },
    {
        "content": "<p>But I don't know if that would break other things.</p>",
        "id": 136536255,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547178
    },
    {
        "content": "<p>so, generally, it's just bad^^</p>",
        "id": 136536257,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547182
    },
    {
        "content": "<p>maybe that's where my confusion lies: I had assumed that since there is an overlap of concerns, it might make sense for the code to overlap. Like reuse common elements</p>",
        "id": 136536259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547196
    },
    {
        "content": "<p>but when it comes to const promotion I'd like to summon <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span></p>",
        "id": 136536262,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547202
    },
    {
        "content": "<p>they know that mess way better than I do^^</p>",
        "id": 136536265,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  const promotion runs on runtime MIR though</p>",
        "id": 136536276,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547226
    },
    {
        "content": "<p>on non-monomorphized runtime mir</p>",
        "id": 136536279,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547237
    },
    {
        "content": "<p>it has to statically determine if we want to promote this</p>",
        "id": 136536281,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547242
    },
    {
        "content": "<p>that has nothing to do with what CTFE does, which is to actually execute fully monomorphized MIR</p>",
        "id": 136536283,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547260
    },
    {
        "content": "<p>It seems like <code>StorageDead</code>, <code>StorageLive</code> and <code>Validate</code> (or whatever the new variant is called) all return <code>false</code> for either.</p>",
        "id": 136536287,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547280
    },
    {
        "content": "<p>IOW, CTFE is \"dynamic\" -- it runs at compile-time, but it is an interpreter so it is dynamic the same way running a python program is dynamic. const promotion is static.</p>",
        "id": 136536330,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> the new <code>Validate</code> is called <code>Retag</code> and I made it return <code>true</code> for <code>is_mutating_use</code></p>",
        "id": 136536343,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547325
    },
    {
        "content": "<p>because it mutates. in my model.</p>",
        "id": 136536346,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547335
    },
    {
        "content": "<p>I guessed I had figured that much of the expressions that we can promote are also things that we can CTFE ?</p>",
        "id": 136536347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547339
    },
    {
        "content": "<p>I meant the new variant for <code>AscribeUserTy</code>.</p>",
        "id": 136536356,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547353
    },
    {
        "content": "<p>(apart from stuff that actually references statically allocated state ...?)</p>",
        "id": 136536357,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547355
    },
    {
        "content": "<blockquote>\n<p>I guessed I had figured that much of the expressions that we can promote are also things that we can CTFE ?</p>\n</blockquote>\n<p>it must be the case that everything we promote, we can run in CTFE.</p>",
        "id": 136536362,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547364
    },
    {
        "content": "<p>but its like a static analysis: running on the source code to see if later doing CTFE will work.</p>",
        "id": 136536364,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547375
    },
    {
        "content": "<p>I am not certain we need this static analysis on the MIR</p>",
        "id": 136536368,
        "sender_full_name": "oli",
        "timestamp": 1540547386
    },
    {
        "content": "<p>I think <code>!is_mutating_use</code> would work, since we exit early in that function for <code>StorageDead</code> and <code>StorageLive</code> before the check.</p>",
        "id": 136536370,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547389
    },
    {
        "content": "<p>I've been trying to formulate my thoughts (e.g. in <a href=\"https://github.com/rust-lang/rust/issues/53819\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53819\">https://github.com/rust-lang/rust/issues/53819</a>), but I guess that's orthogonal</p>",
        "id": 136536422,
        "sender_full_name": "oli",
        "timestamp": 1540547407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> if the only other case is the variant for AscribeUserType, maybe it would be clearer to just put that in as a special case...</p>",
        "id": 136536438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547427
    },
    {
        "content": "<p>not obvious to me. Depends on what the supposed \"specs\" are for <code>fn is_[non]mutating_use</code>.</p>",
        "id": 136536441,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547431
    },
    {
        "content": "<p>what is the trouble with making <code>AscribeUserType</code> a nonmutating use?</p>",
        "id": 136536449,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547445
    },
    {
        "content": "<p>then const promotion should be fine with it</p>",
        "id": 136536452,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547455
    },
    {
        "content": "<p>It depends what the intent of that code was - was it to check for a use that doesn't mutate, or a nonmutating use - since those seem to be different.</p>",
        "id": 136536465,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547478
    },
    {
        "content": "<p>I was assuming the problem is that <code>AscribeUserTy</code> doesn't correspond to an actual use ?</p>",
        "id": 136536468,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547482
    },
    {
        "content": "<p>just a constraint on the type of the <del>local</del> place</p>",
        "id": 136536471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547492
    },
    {
        "content": "<p>yes that</p>",
        "id": 136536474,
        "sender_full_name": "oli",
        "timestamp": 1540547501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I dont think they are different. just some of them arent uses at all</p>",
        "id": 136536475,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547502
    },
    {
        "content": "<p>Yeah, it isn't a use at all.</p>",
        "id": 136536476,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547503
    },
    {
        "content": "<p>i.e., <code>StorageDead</code>/<code>StorageLive</code></p>",
        "id": 136536484,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547512
    },
    {
        "content": "<p>but <code>AscribeUserTy</code> is a use, right?</p>",
        "id": 136536520,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547523
    },
    {
        "content": "<p>it takes a value and returns the same value, or so</p>",
        "id": 136536529,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547532
    },
    {
        "content": "<p>changing its type</p>",
        "id": 136536530,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547535
    },
    {
        "content": "<p>no?</p>",
        "id": 136536531,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547536
    },
    {
        "content": "<p>No, it doesn't do anything</p>",
        "id": 136536532,
        "sender_full_name": "oli",
        "timestamp": 1540547538
    },
    {
        "content": "<p>oh</p>",
        "id": 136536536,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547549
    },
    {
        "content": "<p>it's just a marker for nll</p>",
        "id": 136536538,
        "sender_full_name": "oli",
        "timestamp": 1540547551
    },
    {
        "content": "<p>Does it make sense to back out early <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L96-L101\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L96-L101\">in this conditional</a> then?</p>",
        "id": 136536539,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547552
    },
    {
        "content": "<p>maybe that conditional should then be <code>!is_use()</code></p>",
        "id": 136536544,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547566
    },
    {
        "content": "<p>backing out early might be the right call.</p>",
        "id": 136536545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547568
    },
    {
        "content": "<p>and <code>AscribeUserTy</code> should return <code>false</code> for both (mutating and nonmutating)</p>",
        "id": 136536552,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547575
    },
    {
        "content": "<p>what does <code>is_storage_marker</code> mean?</p>",
        "id": 136536562,
        "sender_full_name": "oli",
        "timestamp": 1540547595
    },
    {
        "content": "<p>sounds about right?</p>",
        "id": 136536566,
        "sender_full_name": "oli",
        "timestamp": 1540547606
    },
    {
        "content": "<p>It's defined as <code>context == PlaceContext::StorageDead || context == PlaceContext::StorageLive</code></p>",
        "id": 136536593,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547620
    },
    {
        "content": "<p>/me is going to let you three hash this out. :)</p>",
        "id": 136536596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547622
    },
    {
        "content": "<p>the other use is <a href=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/librustc_mir/transform/copy_prop.rs#L257\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/librustc_mir/transform/copy_prop.rs#L257\">https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/librustc_mir/transform/copy_prop.rs#L257</a></p>",
        "id": 136536644,
        "sender_full_name": "oli",
        "timestamp": 1540547658
    },
    {
        "content": "<p>so I say yes, most definitely is <code>AscribeUserTy</code> a storage marker</p>",
        "id": 136536648,
        "sender_full_name": "oli",
        "timestamp": 1540547672
    },
    {
        "content": "<p>not sure if that sounds right</p>",
        "id": 136536666,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547705
    },
    {
        "content": "<p>maybe redefine this function as an exhaustive match, so future changes to <code>PlaceContext</code> will hit it</p>",
        "id": 136536667,
        "sender_full_name": "oli",
        "timestamp": 1540547705
    },
    {
        "content": "<p>Would making it a storage marker result in the pass you just linked removing the statements before they can be checked by NLL?</p>",
        "id": 136536675,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547712
    },
    {
        "content": "<p>storage_marker sounds very specific to StorageDead/Live</p>",
        "id": 136536676,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547714
    },
    {
        "content": "<p>but maybe rename it to <code>is_marker</code>?</p>",
        "id": 136536686,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547747
    },
    {
        "content": "<p><code>is_local_marker</code> then</p>",
        "id": 136536722,
        "sender_full_name": "oli",
        "timestamp": 1540547762
    },
    {
        "content": "<p>and then declare that every <code>PlaceContext</code> must be exactly one of mutating use, nonmutating use, marker</p>",
        "id": 136536726,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547765
    },
    {
        "content": "<p>I assumed <code>strorage</code> to mean <code>Local</code></p>",
        "id": 136536731,
        "sender_full_name": "oli",
        "timestamp": 1540547773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> no, the copy prop pass runs after nll</p>",
        "id": 136536738,
        "sender_full_name": "oli",
        "timestamp": 1540547796
    },
    {
        "content": "<p>I'd add a new function that is <code>is_use</code> - returning false for <code>AscribeUserTy</code>, <code>StorageDead</code> and <code>StorageLive</code>. I'd change <code>is_nonmutating_use</code> and <code>is_mutating_use</code> to return <code>false</code> straight away as a match arm if that the new <code>is_use</code> returns <code>true</code>. That makes it much clearer why those variants return <code>false</code> for both.</p>",
        "id": 136536739,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> <code>AscribeUserTy</code> works on any <code>Place</code> though</p>",
        "id": 136536743,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547810
    },
    {
        "content": "<p>oh</p>",
        "id": 136536745,
        "sender_full_name": "oli",
        "timestamp": 1540547816
    },
    {
        "content": "<p>well, then <code>is_use</code> sounds great</p>",
        "id": 136536753,
        "sender_full_name": "oli",
        "timestamp": 1540547829
    },
    {
        "content": "<p>And then change the condition to be <code>!is_use() || is_nonmutating_use()</code> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\">here</a>.</p>",
        "id": 136536759,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547850
    },
    {
        "content": "<p>at which point we might change <code>is_nonmutating_use</code> to an <code>Option&lt;bool&gt;</code>?</p>",
        "id": 136536762,
        "sender_full_name": "oli",
        "timestamp": 1540547866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> the problem with that is that the non-use variants still have to be repeated in nonmutating use</p>",
        "id": 136536763,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547875
    },
    {
        "content": "<p>I'd rather we classify <code>PlaceContext</code> in three disjoint classes, than in a hierarchy with some excluded</p>",
        "id": 136536805,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547891
    },
    {
        "content": "<p>three disjoint classes covering everything seem clearer to me</p>",
        "id": 136536807,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547902
    },
    {
        "content": "<p>That's true...</p>",
        "id": 136536808,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547903
    },
    {
        "content": "<p>So... split the enum into 4?</p>",
        "id": 136536812,
        "sender_full_name": "oli",
        "timestamp": 1540547911
    },
    {
        "content": "<p>the classes being: mutating use, nonmutating use, marker</p>",
        "id": 136536813,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547917
    },
    {
        "content": "<p>into 4?</p>",
        "id": 136536814,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547918
    },
    {
        "content": "<p>you can leave it as one enum</p>",
        "id": 136536815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547922
    },
    {
        "content": "<p>just make a new <del>4</del> K variant enum</p>",
        "id": 136536816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547925
    },
    {
        "content": "<p>but why 4?</p>",
        "id": 136536817,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547932
    },
    {
        "content": "<p>and a method that maps from the first to the second</p>",
        "id": 136536818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540547933
    },
    {
        "content": "<p>we have 3 classes^^</p>",
        "id": 136536819,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547935
    },
    {
        "content": "<p>We could have three <code>is_x</code> functions with the invariant that any given variant can only return <code>true</code> for one of them.</p>",
        "id": 136536826,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547947
    },
    {
        "content": "<p>If we split the enum we don't need the methods anymore</p>",
        "id": 136536829,
        "sender_full_name": "oli",
        "timestamp": 1540547955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that was my thinking but having this encoded in the types would be even nicer</p>",
        "id": 136536833,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547968
    },
    {
        "content": "<p>Yeah, definitely.</p>",
        "id": 136536837,
        "sender_full_name": "davidtwco",
        "timestamp": 1540547974
    },
    {
        "content": "<p>yea, base enum with 3 variants + one enum for each variant</p>",
        "id": 136536838,
        "sender_full_name": "oli",
        "timestamp": 1540547975
    },
    {
        "content": "<p><code>enum PlaceContextKind { Mutating, Nonmutating, Marker }</code></p>",
        "id": 136536841,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547978
    },
    {
        "content": "<p><code>fn classify(PlaceContext) -&gt; PlaceContextKind</code></p>",
        "id": 136536846,
        "sender_full_name": "RalfJ",
        "timestamp": 1540547989
    },
    {
        "content": "<p>s/Marker/StaticEffect/ ?</p>",
        "id": 136536939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540548021
    },
    {
        "content": "<p>or what <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> said. no strong preference, just it seems overkill to have 4 enums here</p>",
        "id": 136536947,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548034
    },
    {
        "content": "<p>(just a thought. I don't find \"Marker\" intuitive)</p>",
        "id": 136536948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540548034
    },
    {
        "content": "<p><code>enum PlaceContext { Mutating(MutPlaceUse), Nonmutating(NonMutPlaceUse), Marker(PlaceNonUse) }</code></p>",
        "id": 136536949,
        "sender_full_name": "oli",
        "timestamp": 1540548037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm happy to bikeshed the name^^</p>",
        "id": 136536950,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548039
    },
    {
        "content": "<p>That would work. Then we'd change the condition <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\">here</a> to be <code>context_kind == PlaceContextKind::NonMutatingUse || context_kind == PlaceContextKind::NoUse</code> and this test would pass.</p>",
        "id": 136536972,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548092
    },
    {
        "content": "<p>Or do we handle the <code>NoUse</code> case by exiting early.</p>",
        "id": 136536976,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548110
    },
    {
        "content": "<p>That'd probably be better.</p>",
        "id": 136536977,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548118
    },
    {
        "content": "<p>I still think it's more fragile if we don't do it in the type</p>",
        "id": 136537024,
        "sender_full_name": "oli",
        "timestamp": 1540548139
    },
    {
        "content": "<p>but I'm not blocking it on that</p>",
        "id": 136537027,
        "sender_full_name": "oli",
        "timestamp": 1540548153
    },
    {
        "content": "<p>there's a reasonable argument for doing it in the type</p>",
        "id": 136537030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540548160
    },
    {
        "content": "<p>it can be nice to narrow to the specific subset of variants relevant to a given branch</p>",
        "id": 136537036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540548177
    },
    {
        "content": "<p>but are there instances where you'd want to handle two of the three cases in one branch?</p>",
        "id": 136537046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540548217
    },
    {
        "content": "<p>Is this change going to be made in <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s current PR that adds the <code>AscribeUserTy</code> variant or should I branch off that and make this change to fix this issue?</p>",
        "id": 136537050,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548235
    },
    {
        "content": "<blockquote>\n<p>That would work. Then we'd change the condition <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L122\">here</a> to be <code>context_kind == PlaceContextKind::NonMutatingUse || context_kind == PlaceContextKind::NoUse</code> and this test would pass.</p>\n</blockquote>\n<p>we can still have the <code>is_</code> methods</p>",
        "id": 136537183,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548405
    },
    {
        "content": "<p>just they would internally use <code>classify</code></p>",
        "id": 136537186,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I'd say do one of the two variants we discussed here (<span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>'s or mine), ignore my PR</p>",
        "id": 136537208,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548445
    },
    {
        "content": "<p>whoever lands last has to rebase^^</p>",
        "id": 136537213,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548452
    },
    {
        "content": "<p>Easy to say when you've got the open PR that'll be in the queue earlier, but sure thing <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 136537218,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> well my PR depends on another PR that didnt land yet though</p>",
        "id": 136537256,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548484
    },
    {
        "content": "<p>so I have two PRs that need to land. both are earlier in the queue but the race isnt entirely settled^^</p>",
        "id": 136537266,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548507
    },
    {
        "content": "<p>if you want you can do it on top of my PR</p>",
        "id": 136537267,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548514
    },
    {
        "content": "<p>I just thought we'd not want to tie these things together</p>",
        "id": 136537270,
        "sender_full_name": "RalfJ",
        "timestamp": 1540548521
    },
    {
        "content": "<p>Sure thing, works for me.</p>",
        "id": 136537279,
        "sender_full_name": "davidtwco",
        "timestamp": 1540548545
    },
    {
        "content": "<p>Alright, submitted <a href=\"https://github.com/rust-lang/rust/issues/55385\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55385\">#55385</a>, let the race begin.</p>",
        "id": 136540467,
        "sender_full_name": "davidtwco",
        "timestamp": 1540553382
    },
    {
        "content": "<p>Responded to review comments.</p>",
        "id": 136545909,
        "sender_full_name": "davidtwco",
        "timestamp": 1540559654
    },
    {
        "content": "<p>glad you all sorted this out :)</p>",
        "id": 136562986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540576365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that's unfair, you got priority :P</p>",
        "id": 136645937,
        "sender_full_name": "RalfJ",
        "timestamp": 1540721625
    },
    {
        "content": "<p>Might have cheated a little bit, yeah.</p>",
        "id": 136645978,
        "sender_full_name": "davidtwco",
        "timestamp": 1540721650
    }
]