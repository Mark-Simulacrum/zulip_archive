[
    {
        "content": "<p>Just a quick note</p>",
        "id": 147303819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688423
    },
    {
        "content": "<p>I'm doing a little subroutine call over here from the T-compiler triage I'm doing</p>",
        "id": 147303830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688448
    },
    {
        "content": "<p>as to reduce noise over there</p>",
        "id": 147303837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688456
    },
    {
        "content": "<p>I'm going to take \"two-phase-borrows need a specification\" <a href=\"https://github.com/rust-lang/rust/issues/46901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46901\">#46901</a> off Release milestone, and nominate for discussion at next meeting (Tuesday).</p>",
        "id": 147303919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688501
    },
    {
        "content": "<p>next \"dropck: track order of destruction for r-value temporaries\" <a href=\"https://github.com/rust-lang/rust/issues/22323\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/22323\">#22323</a></p>",
        "id": 147304085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688654
    },
    {
        "content": "<p>this is tagged as NLL-fixed-by-NLL</p>",
        "id": 147304088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688659
    },
    {
        "content": "<p>Our policy has to keep such issues open, until NLL becomes the default ... at least for the 2018 release itself. I'm not sure whether we'll continue keeping them open until NLL becomes the default for 2015</p>",
        "id": 147304174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688728
    },
    {
        "content": "<p>But It certainly seems like keeping this open is just going to confuse people who are trying to figure out the Release milestone issues.</p>",
        "id": 147304186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688758
    },
    {
        "content": "<p>I think the right answer here is to remove NLL-fixed-by-NLL issues from the Release milestone, but continue to leave them open.</p>",
        "id": 147304201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541688775
    },
    {
        "content": "<p>That seems like a sensible approach.</p>",
        "id": 147304207,
        "sender_full_name": "davidtwco",
        "timestamp": 1541688786
    },
    {
        "content": "<p>Looked next at \"NLL reports \"borrow used here in later iteration of loop\" in cases outside of loop\" <a href=\"https://github.com/rust-lang/rust/issues/53773\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53773\">#53773</a>. It is still a problem.</p>",
        "id": 147304560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541689126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> do you think you'll have time to look at this in the near future? It does not appear to have been resolved by PR <a href=\"https://github.com/rust-lang/rust/issues/54343\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54343\">#54343</a>, despite niko saying it should be</p>",
        "id": 147304591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541689158
    },
    {
        "content": "<p>(i'm not being fair to niko there; he was really talking about a related issue and saying that a hypothetical ideal fix to it would also resolve this.)</p>",
        "id": 147304618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541689199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  I will take a look.</p>",
        "id": 147304682,
        "sender_full_name": "blitzerr",
        "timestamp": 1541689214
    },
    {
        "content": "<p>it seems like i forgot to write a note here saying that I took \"figure out how to integrate constants and the MIR type checker\" <a href=\"https://github.com/rust-lang/rust/issues/46702\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46702\">#46702</a> off the Release milestone, (and simultaneously I-nominated it for discussion at NLL meeting on Tuesda)</p>",
        "id": 147310097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541693673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^ just thought you should be aware of those changes on <a href=\"https://github.com/rust-lang/rust/issues/46702\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46702\">#46702</a> and <a href=\"https://github.com/rust-lang/rust/issues/46901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46901\">#46901</a></p>",
        "id": 147310123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541693693
    },
    {
        "content": "<p>what, if anything, is our most comprehensive source of information (documentation) on how NLL works and/or changes things?</p>",
        "id": 147437497,
        "sender_full_name": "Gankra",
        "timestamp": 1541864766
    },
    {
        "content": "<p>The RFC (unless you consider the compiler \"documentation\"), maybe Niko's blog posts as well.</p>",
        "id": 147437738,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541865257
    },
    {
        "content": "<p>What RFC?</p>",
        "id": 147437858,
        "sender_full_name": "Gankra",
        "timestamp": 1541865487
    },
    {
        "content": "<p>The original NLL RFC (<a href=\"https://rust-lang.github.io/rfcs/2094-nll.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2094-nll.html\">https://rust-lang.github.io/rfcs/2094-nll.html</a>). It's not comprehensive for all the bug fixes and contains position dependent outlives, but I don't think that anyone's written anything better.</p>",
        "id": 147437979,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541865613
    },
    {
        "content": "<p>hrm, so basically I'll need to pick niko's brain for a picture of the final design?</p>",
        "id": 147438035,
        "sender_full_name": "Gankra",
        "timestamp": 1541865693
    },
    {
        "content": "<p>Pretty much. To give a very short (and possibly incomprehensible) version of the changes (maybe missing stuff)</p>",
        "id": 147438464,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541866465
    },
    {
        "content": "<p>Lifetime inference changes:</p>\n<ul>\n<li>\n<p>Lifetimes are now sets of points in the CFG and universal regions. (i.e. named or elided regions from the item signature)<br>\n    * Lifetimes are the minimal sets in the CFG such that:<br>\n        * They're a superset of any lifetime that they outlive<br>\n        * They contain any point an initialized variable that has that lifetime in its type is live<br>\n        * They contain any point where an initialized variable that has that lifetime as a dropck lifetime in its type may be dropped in the future</p>\n</li>\n<li>\n<p>Borrows of a value start at the borrow expression and end when either<br>\n    * The lifetime of the borrow ends<br>\n    * The place being borrowed is behind a dereference of a reference and that reference gets assigned to</p>\n</li>\n</ul>",
        "id": 147438467,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541866472
    },
    {
        "content": "<p>Extras:</p>\n<ul>\n<li>Assigning to a mutable reference <code>x</code>, where <code>*x</code> is borrowed is allowed.</li>\n<li>Universe based subtyping</li>\n<li>Variables bound in the same pattern are (known to be) dropped in reverse declaration order.</li>\n</ul>",
        "id": 147438469,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541866479
    },
    {
        "content": "<p>Soundness fixes:</p>\n<ul>\n<li>If <code>T: Drop</code> and <code>P</code> is a place where some prefix has type <code>T</code>, then <code>*P</code> may not be borrowed when <code>T</code> is dropped.</li>\n<li>Matching and branching based on a value reads that value.</li>\n<li>The place being matched on cannot be mutated in a <code>match</code> guard in a way that potentially breaks exhaustiveness (usually there's an AST check that prevents this)</li>\n<li>The CFG for <code>match</code> now has edges for the case when a match guard evaluates false (so moving in a match guard is forbidden when it should be).</li>\n<li>Correct evaluation order of overloaded compound assignment</li>\n<li>Closures return types can't contain the lifetime of the reference to self in <code>Fn::call(&amp;self, _: Args)</code></li>\n<li>Partial initialization is not allowed</li>\n</ul>",
        "id": 147438470,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541866485
    },
    {
        "content": "<p>Oh, and Box gets fully special cased</p>",
        "id": 147438736,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541866993
    },
    {
        "content": "<p>oh? why?</p>",
        "id": 147438793,
        "sender_full_name": "Gankra",
        "timestamp": 1541867092
    },
    {
        "content": "<p>I think there's a comment on the tracking issue about this.</p>",
        "id": 147438972,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541867465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> good idea  to post that on irlo or on the nll rfc/tracking issue :)</p>",
        "id": 147450453,
        "sender_full_name": "DPC",
        "timestamp": 1541888968
    },
    {
        "content": "<p>Hmm, maybe</p>",
        "id": 147450520,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541889121
    },
    {
        "content": "<p>Just commit it with the message \"come fight me\"</p>",
        "id": 147450840,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1541889793
    },
    {
        "content": "<p>other topic?</p>",
        "id": 147450977,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1541890062
    },
    {
        "content": "<p>indeed :-)</p>",
        "id": 147460707,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1541906175
    }
]