[
    {
        "content": "<p>I am looking at this <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> fyi. Getting kind of worried about these ICEs.</p>",
        "id": 136364257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325871
    },
    {
        "content": "<p>okay i'm glad you're looking at it</p>",
        "id": 136364303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540325886
    },
    {
        "content": "<p>ah, wait, I ran my test in the wrong branch</p>",
        "id": 136364309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325892
    },
    {
        "content": "<p>I am hoping my PR fixes it :P</p>",
        "id": 136364319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325900
    },
    {
        "content": "<p>I was going to try to look at the ICE's after I finished trying to fix my PR</p>",
        "id": 136364323,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540325903
    },
    {
        "content": "<p>I remember fixing some similar asserions</p>",
        "id": 136364327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325905
    },
    {
        "content": "<p>sadly, still fails</p>",
        "id": 136364399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325987
    },
    {
        "content": "<p>are you also looking at the \"ICE when accessing an associated constant of a generic impl\" <a href=\"https://github.com/rust-lang/rust/issues/55219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55219\">#55219</a> ?</p>",
        "id": 136364400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540325989
    },
    {
        "content": "<p>not yet</p>",
        "id": 136364466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326021
    },
    {
        "content": "<p>that one, <a href=\"https://github.com/rust-lang/rust/issues/55219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55219\">#55219</a>, I <em>hope</em> will have a straight forward fix</p>",
        "id": 136364471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326029
    },
    {
        "content": "<p>oh, this is one of those weird bugs... goes away with incremental rebuilds</p>",
        "id": 136364475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326031
    },
    {
        "content": "<p>that one was also reported on <a href=\"https://github.com/rust-lang/rust/issues/55241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55241\">#55241</a></p>",
        "id": 136364506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326066
    },
    {
        "content": "<p>yeah I was going to make a comment about that</p>",
        "id": 136364521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326086
    },
    {
        "content": "<p>but I didn't get a chance to look at the tar.gz</p>",
        "id": 136364524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326091
    },
    {
        "content": "<p>to verify that it really was a duplicate</p>",
        "id": 136364527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326095
    },
    {
        "content": "<p>in terms of being a case of <code>impl&lt;T&gt; Foo&lt;T&gt; { const C: Other = ...; ... }</code></p>",
        "id": 136364549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326114
    },
    {
        "content": "<p>that one at least has a minimzed test case I guess</p>",
        "id": 136364603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326128
    },
    {
        "content": "<p>it still reproduces with my PR too :)</p>",
        "id": 136364609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326133
    },
    {
        "content": "<p>I can imagine <em>why</em> it happens</p>",
        "id": 136364629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326149
    },
    {
        "content": "<p><code>impl&lt;T&gt; Foo&lt;T&gt; { const C: u32 = 10; ... }</code></p>",
        "id": 136364638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326160
    },
    {
        "content": "<p>it not surprising that <code>T</code> is in some sense floating around as an infer type when we look at the <code>const C</code></p>",
        "id": 136364653,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326182
    },
    {
        "content": "<p>hmm</p>",
        "id": 136364662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326197
    },
    {
        "content": "<p>true</p>",
        "id": 136364677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326223
    },
    {
        "content": "<p>I also mused about suggesting that we just ... kill the assertion ..</p>",
        "id": 136364678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326225
    },
    {
        "content": "<p>well</p>",
        "id": 136364684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326230
    },
    {
        "content": "<p>but I suspect that would be bad</p>",
        "id": 136364687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326234
    },
    {
        "content": "<p>plausible</p>",
        "id": 136364692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326239
    },
    {
        "content": "<p>better to find a more principled fix</p>",
        "id": 136364696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326242
    },
    {
        "content": "<p>we could maybe <em>move</em> it</p>",
        "id": 136364735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326247
    },
    {
        "content": "<p>I think there is another one</p>",
        "id": 136364740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326255
    },
    {
        "content": "<p>in particular, the goal is to ensure that we don't instantiate a type variable with a value that contains another type variable</p>",
        "id": 136364752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326268
    },
    {
        "content": "<p>well that would probably happen</p>",
        "id": 136364755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326277
    },
    {
        "content": "<p>occurs check!</p>",
        "id": 136364756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326279
    },
    {
        "content": "<p>(not exactly, I know)</p>",
        "id": 136364760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540326285
    },
    {
        "content": "<p>right we could basically just implement the proper path</p>",
        "id": 136364761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326286
    },
    {
        "content": "<p>or at least more of it</p>",
        "id": 136364765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326291
    },
    {
        "content": "<p>and then this assert wouldn't be needed</p>",
        "id": 136364768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326296
    },
    {
        "content": "<p>that may be the right fix</p>",
        "id": 136364773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326300
    },
    {
        "content": "<p>e.g., maybe we allow a type variable, but only if it is unbound or something...?</p>",
        "id": 136364800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326322
    },
    {
        "content": "<p>the other ICE (<a href=\"https://github.com/rust-lang/rust/issues/55241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55241\">#55241</a>) definitely worries me more</p>",
        "id": 136364815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326335
    },
    {
        "content": "<p>ah, I think I see what it is</p>",
        "id": 136365039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540326526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I <em>think</em> I might be able to fix both of those ICEs at once</p>",
        "id": 136365774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540327307
    },
    {
        "content": "<p>so the problem here is basically that the NLL type checker is a bit too rigid, I think</p>",
        "id": 136367418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328940
    },
    {
        "content": "<p>(also that we are encoding tons more user-type annotations than we really need, but I guess it's good to be able to handle them)</p>",
        "id": 136367428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328954
    },
    {
        "content": "<p>/me rubber ducks a bit</p>",
        "id": 136367436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328969
    },
    {
        "content": "<p>e.g., in one of the ICE cases, we have <code>C::Out</code>, which expands to <code>&lt;C as Hasher&lt;_&gt;&gt;::Out</code></p>",
        "id": 136367446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328983
    },
    {
        "content": "<p>this fails to normalize because we don't know what the <code>_</code> is</p>",
        "id": 136367455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328991
    },
    {
        "content": "<p>the only reason it works ever is that we have <code>C: Hasher&lt;H&gt;</code> in the environment</p>",
        "id": 136367514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329009
    },
    {
        "content": "<p>and hence we can infer that <code>_</code> must be <code>H</code> because there is no other way to prove <code>C: Hasher</code></p>",
        "id": 136367524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329019
    },
    {
        "content": "<p>problem is, in the NLL type checker, we normalize <em>first</em> and <em>then</em> solve predicates</p>",
        "id": 136367540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329036
    },
    {
        "content": "<p>but if we swap the order, I think other things will fail, because the predicates might depend on stuff that proving type equality needed</p>",
        "id": 136367569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329072
    },
    {
        "content": "<p>what we can do though is to add a query that creates a fresh infcx and adds all these constraints so that they can get solved in any order</p>",
        "id": 136367578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329100
    },
    {
        "content": "<p>this would also let us go through the more general infcx code paths and avoid the limitations around type variables that triggered that other assertion</p>",
        "id": 136367630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540329128
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you've already extracted a standalone test case for <a href=\"https://github.com/rust-lang/rust/issues/55421\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55421\">#55421</a>, would you mind posting it to the issue for posterity's sake (and so that I or others don't waste time trying to do so in parallel) ?</p>",
        "id": 136400049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540376862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I haven't yet but I prob can later this morning</p>",
        "id": 136400099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540376894
    },
    {
        "content": "<p>or .. did I ..</p>",
        "id": 136400101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540376903
    },
    {
        "content": "<p>I forget :)</p>",
        "id": 136400102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540376905
    },
    {
        "content": "<p>no problem, just wanted to make sure I mentioned it somewhere</p>",
        "id": 136400104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540376913
    },
    {
        "content": "<p>(i'm going through all my issues and trying to close off the easy tasks before I embark on round 3 of .stderr review for NLL)</p>",
        "id": 136400109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540376932
    }
]