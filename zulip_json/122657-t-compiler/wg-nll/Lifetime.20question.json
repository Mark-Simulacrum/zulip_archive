[
    {
        "content": "<p>I got this program:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It currently compiles fine on current stable. However i feel that the two borrow region should not overlap...  In my naive understanding i thought this should be a compile error...  Did i miss something?</p>",
        "id": 209061869,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599203600
    },
    {
        "content": "<p><code>l2</code> there is being coerced to a <code>&amp;i32</code>, so it is never actually used like a unique reference</p>",
        "id": 209062188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599203859
    },
    {
        "content": "<p>I think you can argue this is correct using two-stage borrows (where the second stage never happens, so it is effectively just as if you had declared two shared references and compared them)</p>",
        "id": 209062337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599203990
    },
    {
        "content": "<p>Thanks, but i thought two-stage borrows is still in proposal stage instead of reaching stable release?</p>",
        "id": 209062719,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599204274
    },
    {
        "content": "<p>Also, i tried to \"activate\" those references:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">234</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This compiles too.</p>",
        "id": 209063007,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599204503
    },
    {
        "content": "<p>The first borrow ends with the last use of l1, which is the println in line 4. It is not borrowed anymore when you borrow it for l2.</p>",
        "id": 209063272,
        "sender_full_name": "NeoRaider",
        "timestamp": 1599204725
    },
    {
        "content": "<p>yes, i can understand that. but if i name the immutable borrow lifetime <code>'a</code> and unique borrow lifetime <code>'b</code>, they should not overlap, and l1's type is <code>&amp;'a i32</code> and it's incompatible with <code>&amp;'b mut i32</code> or <code>&amp;'b i32</code>, isn't it?</p>",
        "id": 209064310,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599205592
    },
    {
        "content": "<p><code>'a</code> ends after the first <code>println</code> and starts again on the second assignment</p>",
        "id": 209064367,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1599205653
    },
    {
        "content": "<p>yes, i imagine this is fine. but doesn't <code>'a</code> and <code>'b</code> have to exclude each other?</p>",
        "id": 209064459,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599205709
    },
    {
        "content": "<p>(maybe not in two-stage borrows i think.)</p>",
        "id": 209064502,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599205761
    },
    {
        "content": "<p>The borrows can't overlap. The immutable borrow is only for the first part of <code>'a</code>.</p>",
        "id": 209064741,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1599205929
    },
    {
        "content": "<p>i can understand why this is fine:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>just not sure about the validity of the assignment <code>l1 = l2</code>, i thought their lifetimes are mutual exclusive.</p>",
        "id": 209064871,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599206038
    },
    {
        "content": "<p>This code is certainly dynamically okay, in the sense that it doesn't actually execute undefined behavior, and the analyses have become more complex to try to statically determine that it is okay. I missed the fact that <code>l1</code> is dead after its definition because it is not reused. I know that polonius will explicitly allow the new <code>l1</code> value to have a different lifetime than the first one, and stacked borrows will definitely allow this because it doesn't actually use the values in any interesting way, but I'm not exactly sure how the NLL analysis proves this one.</p>",
        "id": 209071041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599210936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Are you saying that <code>'a</code> is not an interval in time?</p>",
        "id": 209071256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599211038
    },
    {
        "content": "<p><code>'a</code> is a set of points in the CFG, it can have gaps.</p>",
        "id": 209071415,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1599211110
    },
    {
        "content": "<p>I didn't think NLL allows lifetimes that are not contiguous (in dynamic execution time)</p>",
        "id": 209071417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599211113
    },
    {
        "content": "<p>Like variable live regions, it should be an interval-closed subset of the CFG</p>",
        "id": 209071468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599211179
    },
    {
        "content": "<p>If you just let borrow regions drop out you can get easy bad behavior, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">).</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>We could say that <code>'a</code> covers lines 2 and 4 and <code>'b</code> covers line 3 and then they are disjoint</p>",
        "id": 209071624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599211314
    },
    {
        "content": "<p>btw if you dump the NLL MIR you'll have at the top of the file the inferred values of the cfg points per region; <code> -Zdump-mir=nll</code> -&gt; <code>./mir_dump/$function.mir</code> like</p>\n<div class=\"codehilite\"><pre><span></span><code>| Inferred Region Values\n| &#39;_#0r | U0 | {bb0[0..=34], bb1[0], bb2[0..=9], bb3[0..=2], bb4[0..=44], bb5[0..=9], bb6[0..=2], bb7[0..=12], &#39;_#0r, &#39;_#1r}\n| &#39;_#1r | U0 | {bb0[0..=34], bb1[0], bb2[0..=9], bb3[0..=2], bb4[0..=44], bb5[0..=9], bb6[0..=2], bb7[0..=12], &#39;_#1r}\n| &#39;_#2r | U0 | {bb0[12], bb4[22]}\n</code></pre></div>",
        "id": 209080240,
        "sender_full_name": "lqd",
        "timestamp": 1599217514
    }
]