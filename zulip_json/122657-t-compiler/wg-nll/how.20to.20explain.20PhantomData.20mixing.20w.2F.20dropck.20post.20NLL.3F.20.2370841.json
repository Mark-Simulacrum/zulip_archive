[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I reclassified <a href=\"https://github.com/rust-lang/rust/issues/70841\" title=\"https://github.com/rust-lang/rust/issues/70841\">#70841</a> as a documentation issue</p>",
        "id": 193492974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586457993
    },
    {
        "content": "<p>but I will admit I'm at a bit of a loss about how best to describe the semantics</p>",
        "id": 193492996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586458012
    },
    {
        "content": "<p>\"PhantomData&lt;T&gt; acts like it holds a T, if it is embedded in a type that has drop glue?\"</p>",
        "id": 193493042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586458036
    },
    {
        "content": "<p>I suspect the <em>intent</em> is for it to behave that way when it is in a type with a destructor</p>",
        "id": 193493079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586458055
    },
    {
        "content": "<p>I would avoid \"drop glue\" in docs but that's just me</p>",
        "id": 193493096,
        "sender_full_name": "eddyb",
        "timestamp": 1586458061
    },
    {
        "content": "<p>but right now, a neighboring field that holds the destructor will cause dropck to flag the <code>PhantomData</code> too</p>",
        "id": 193493146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586458079
    },
    {
        "content": "<p>so I don't know the best way to describe that. Maybe just \"if its embedded in a type that <code>needs_drop</code> \" ?</p>",
        "id": 193493215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586458104
    },
    {
        "content": "<p><code>PhantomData&lt;T&gt;</code> affecting dropck is primarily for types with a <code>#[may_dangle] T</code> <code>Drop</code> impl.</p>",
        "id": 193496500,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1586459642
    },
    {
        "content": "<p>that's true, I had mentioned that somewhere (stackoverflow? a running issue?)</p>",
        "id": 193496644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586459723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm surprised that a neighboring field has an effect</p>",
        "id": 193570789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586526759
    },
    {
        "content": "<p>But I think I would explain it like this:</p>\n<ul>\n<li>By itself, <code>PhantomData</code> has no semantics, but it used to inform various analyses about what kind of data your type may access using unsafe code or other means.</li>\n<li>A <code>PhantomData&lt;T&gt;</code> field affects variance of lifetimes, as it implies that operations on values of this type may wind up accessing values of type <code>T</code>.</li>\n<li>The borrow checker sometimes needs to decide what types of values a type may access when dropped. If your type defines a <code>Drop</code> impl, then a <code>PhantomData&lt;T&gt;</code> will be interpreted to mean that your destructor may drop or access values of type <code>T</code>. (If there is no <code>Drop</code> impl, then <code>PhantomData&lt;T&gt;</code> has no effect on the types of values we assume might be accessed.)</li>\n</ul>",
        "id": 193571133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586526995
    },
    {
        "content": "<p>But it sounds like that's not quite correct</p>",
        "id": 193571141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586526999
    },
    {
        "content": "<p>I wonder if we <em>should</em> consider this a bug :)</p>",
        "id": 193571156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586527010
    },
    {
        "content": "<p>It's kind of a corner case I guess</p>",
        "id": 193571172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586527021
    },
    {
        "content": "<p>One thing I have been thinking about</p>",
        "id": 193800628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800812
    },
    {
        "content": "<p>it <em>might</em> actually make sense that the neighboring field has an effect</p>",
        "id": 193800652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800824
    },
    {
        "content": "<p>(even if it is unclear whether anyone actually planned for this.)</p>",
        "id": 193800693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800843
    },
    {
        "content": "<p>Specifically: There can be read/write effects to a state behind that neighboring field</p>",
        "id": 193800739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800870
    },
    {
        "content": "<p>and if the struct designer added the <code>PhantomData</code> due to such read/write effects from the neighboring field's destructor</p>",
        "id": 193800914,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800958
    },
    {
        "content": "<p>(that are not otherwise modeled by <code>dropck</code>, due to use of ... I don't know, <code>*mut</code>/<code>*const</code>) ?</p>",
        "id": 193800949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586800978
    },
    {
        "content": "<p>then this choice seems like it would make sense.</p>",
        "id": 193800988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586801006
    },
    {
        "content": "<p>(I continue to think it would be <em>simpler</em> to document if we were more restrictive here. But given that it would inject breakage without actually adding value, it seems pretty hard to justify...)</p>",
        "id": 193801087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586801052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/122657-t-compiler.2Fwg-nll/topic/how.20to.20explain.20PhantomData.20mixing.20w.2F.20dropck.20post.20NLL.3F.20.2370841/near/193496644\" title=\"#narrow/stream/122657-t-compiler.2Fwg-nll/topic/how.20to.20explain.20PhantomData.20mixing.20w.2F.20dropck.20post.20NLL.3F.20.2370841/near/193496644\">said</a>:</p>\n<blockquote>\n<p>that's true, I had mentioned that somewhere (stackoverflow? a running issue?)</p>\n</blockquote>\n<p>yes: <a href=\"https://stackoverflow.com/a/42721125/155423\" title=\"https://stackoverflow.com/a/42721125/155423\">Why is it useful to use PhantomData to inform the compiler that a struct owns a generic if I already implement Drop?</a></p>",
        "id": 193900411,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1586872615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> well, we don't know how much breakage, right?</p>",
        "id": 194539677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209302
    },
    {
        "content": "<p>I think there's a case to be made that it's a bug fix, it's definitely a grey line</p>",
        "id": 194539679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209313
    },
    {
        "content": "<p>Might be worth testing</p>",
        "id": 194539680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209317
    },
    {
        "content": "<p>I found your argument persuasive</p>",
        "id": 194539682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209325
    }
]