[
    {
        "content": "<p>Hello.<br>\nI might have found compiler issue around borrow checker, but I'm not sure this is a bug or intended behavior, so I report (and ask) it here.</p>\n<p>Code:<br>\n<a href=\"https://play.rust-lang.org/?gist=3fe95bb18c586e411fc8bdea957a869f&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=3fe95bb18c586e411fc8bdea957a869f&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=3fe95bb18c586e411fc8bdea957a869f&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>\n<p>Usage:</p>\n<ul>\n<li>Try with NLL enabled and disabled.</li>\n<li>Uncomment ones from (1a -- 1b), (2a -- 2b), (3a -- 3c) respectively.<ul>\n<li>e.g. uncomment (1a), (2a), (3a) / uncomment (1b), (2a), (3c) / ...</li>\n</ul>\n</li>\n</ul>\n<p>Problematic cases:</p>\n<ul>\n<li>If none of (1b) and (2b) is not uncommented, the code does not compile no matter whether NLL is enabled or not.</li>\n<li>If (1a), (2a), and (3b) is uncommented,<ul>\n<li>it compiles with NLL disabled, but</li>\n<li>does not compile with NLL enabled.</li>\n</ul>\n</li>\n</ul>\n<p>Error message example of (1a), (2a), and (3a), with NLL enabled:</p>\n<div class=\"codehilite\"><pre><span></span>warning: unused variable: `b`\n  --&gt; src/main.rs:33:21\n   |\n33 |                 let b: &amp;B = (*owned).borrow(); // (3a)\n   |                     ^ help: consider using `_b` instead\n   |\n   = note: #[warn(unused_variables)] on by default\n\nerror: unsatisfied lifetime constraints\n  --&gt; src/main.rs:33:29\n   |\n27 |     pub fn to_shared(&amp;self) -&gt; Arc&lt;B&gt; { // (2a) does not compile.\n   |                      - let&#39;s call the lifetime of this reference `&#39;1`\n...\n33 |                 let b: &amp;B = (*owned).borrow(); // (3a)\n   |                             ^^^^^^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;a`\n\nerror: aborting due to previous error\n</pre></div>\n\n\n<p>Question:</p>\n<ul>\n<li>(q1) Are these errors intended, or compiler bug?<ul>\n<li>It feels intuitively wrong for me, but I'm not sure...</li>\n</ul>\n</li>\n<li>(q2) If these are intended,<ul>\n<li>(q2-1) Why <code>(*owned).borrow()</code> outlives <code>to_shared()</code> function?</li>\n<li>(q2-2) Why unused <code>Into&lt;Arc&lt;B&gt;&gt;</code> trait bound cause or prevent the compilation error?</li>\n</ul>\n</li>\n</ul>\n<p>Thank you.</p>",
        "id": 130699087,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533110219
    },
    {
        "content": "<p>That's a lot of permutations that you are asking about...</p>\n<p>Let's start with some easy questions as I wake up:</p>\n<p>1. Why are you doing (<code>(*owned).borrow()</code>) instead of <code>owned.borrow()</code><br>\n2. Why are there no trait bounds that use <code>Borrow</code>?</p>",
        "id": 130711867,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533128388
    },
    {
        "content": "<p>1. It doesn't need to be <code>(*owned).borrow()</code>. <code>owned.borrow()</code> causes the same error.<br>\n  (I've tried some code variations to avoid this error, and explicit deref is one of them.)<br>\n2. I didn't specify <code>Borrow&lt;B&gt;</code> bound explilitly, because <code>Owned</code> variant has <code>&lt;B as ToOwned&gt;::Owned</code> field, and <code>B: ToOwned</code> requires <code>&lt;B as ToOwned&gt;::Owned: Borrow&lt;B&gt;</code>.<br>\n  (<a href=\"https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#associatedtype.Owned\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#associatedtype.Owned\">https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#associatedtype.Owned</a>)</p>",
        "id": 130713804,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533130308
    },
    {
        "content": "<p>My first thoughts on <code>let _: &amp;B = owned.borrow();</code> is that there's a <em>possibility</em> of that being an NLL difference. The <code>_</code> pattern is special and acts as if you didn't bind anything. It's <em>possible</em> that NLL doesn't know / care about it and is always giving you the error</p>",
        "id": 130714190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533130642
    },
    {
        "content": "<p>If true, seems like something that could be tested with a smaller / simpler case</p>",
        "id": 130714344,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533130800
    },
    {
        "content": "<p>Ok, created smaller cases.<br>\nI think two cases below are almost same.</p>\n<p>toplevel-fn ver.: <a href=\"https://play.rust-lang.org/?gist=8fd178829fb82b2e02bfe0ec7edcd419&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=8fd178829fb82b2e02bfe0ec7edcd419&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=8fd178829fb82b2e02bfe0ec7edcd419&amp;version=nightly&amp;mode=debug&amp;edition=2015</a><br>\nimpl ver.: <a href=\"https://play.rust-lang.org/?gist=ea53abfa145a2ec7f2462e9b14866f51&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=ea53abfa145a2ec7f2462e9b14866f51&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=ea53abfa145a2ec7f2462e9b14866f51&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>\n<p>A case to see NLL difference: <a href=\"https://play.rust-lang.org/?gist=7c4ecdbf2500e3241c5fdfa667643612&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=7c4ecdbf2500e3241c5fdfa667643612&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=7c4ecdbf2500e3241c5fdfa667643612&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>\n<p>code (NLL difference ver, 7c4e...):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">borrow</span>::<span class=\"n\">Borrow</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Arc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">OwnedWrap</span><span class=\"o\">&lt;</span><span class=\"n\">B</span>: <span class=\"nb\">ToOwned</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">ToOwned</span><span class=\"o\">&gt;</span>::<span class=\"n\">Owned</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">to_arc</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">wrap</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">OwnedWrap</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">ToOwned</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// (1a)</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">OwnedWrap</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">owned</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wrap</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">owned</span><span class=\"p\">).</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// (3b)</span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">// comment in when using 3c.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>error (with NLL enabled):</p>\n<div class=\"codehilite\"><pre><span></span>error[E0621]: explicit lifetime required in the type of `wrap`\n  --&gt; src/main.rs:14:21\n   |\n8  | fn to_arc&lt;&#39;a, B&gt;(wrap: &amp;OwnedWrap&lt;B&gt;) -&gt; Arc&lt;B&gt;\n   |                  ---- consider changing the type of `wrap` to `&amp;&#39;a OwnedWrap&lt;B&gt;`\n...\n14 |         let _: &amp;B = (*owned).borrow(); // (3b)\n   |                     ^^^^^^^^^^^^^^^^^ lifetime `&#39;a` required\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 130715836,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533132138
    },
    {
        "content": "<p>The smaller cases look unnatural, because they require <code>'a</code> as lifetime parameter while it does not appear in parameter list.<br>\nBut in original case, <code>'a</code> is used for the type to be impl'ed, and <code>B: 'a</code> is absolutely necessary.</p>",
        "id": 130717195,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533133283
    },
    {
        "content": "<p>I've forgotten replacing <code>(*owned).borrow()</code> with <code>owned.borrow()</code>, but both emits the same error: <a href=\"https://play.rust-lang.org/?gist=ff33de12788eab2c1bdc8b39f2ea6b7f&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=ff33de12788eab2c1bdc8b39f2ea6b7f&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=ff33de12788eab2c1bdc8b39f2ea6b7f&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 130757837,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533183836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123879\">@YOSHIOKA Takuma</span> it seems like there might be some bugs lurking here</p>",
        "id": 130974857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557789
    },
    {
        "content": "<p>I'm looking now at the where clause <code>&amp;'a B: Into&lt;Arc&lt;B&gt;&gt;</code></p>",
        "id": 130974875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557811
    },
    {
        "content": "<p>adding that causes it not to compile, it seems -- tbh, that's always been an area where the compiler is weak</p>",
        "id": 130974881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557824
    },
    {
        "content": "<p>(e.g., where clauses for \"generic\" types like <code>&amp;u32</code>)</p>",
        "id": 130974889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557836
    },
    {
        "content": "<p>but I'm not sure I understand where the <code>Into</code> trait even comes into play here</p>",
        "id": 130974906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557859
    },
    {
        "content": "<p>oh, wait, the where clauses causes a problem with or without NLL it seems</p>",
        "id": 130974968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533557913
    },
    {
        "content": "<p>Yes, in (1a)+(2a)+(3b) case, NLL causes different result (compilation success or error).<br>\nIn other cases (without (1b) and (2b)), it always fails to compile with and without NLL, but I can't believe they should be error.<br>\nSo I am wondering whether the compilation failure should be fixed, or it is intended behavior (that won't be \"fixed\").</p>",
        "id": 130977917,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533561393
    },
    {
        "content": "<p>probably somewhere in between... \"won't be fixed now\"</p>",
        "id": 130978018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561503
    },
    {
        "content": "<p>still we ought to file some bugs at least for the cases where NLL diverges</p>",
        "id": 130978034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561521
    },
    {
        "content": "<p>and we can decide how to classify</p>",
        "id": 130978037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561525
    },
    {
        "content": "<p>it would be helpful if you could file not one issue but multiple :)</p>",
        "id": 130978044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533561541
    },
    {
        "content": "<p>Ok, I'll file issues on GitHub later.<br>\nThank you.</p>",
        "id": 130978191,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533561717
    },
    {
        "content": "<p><code>Borrow::borrow()</code> causes compile error with NLL, but compiles without NLL · Issue <a href=\"https://github.com/rust-lang/rust/issues/53151\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53151\">#53151</a> · rust-lang/rust<br>\n<a href=\"https://github.com/rust-lang/rust/issues/53151\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53151\">https://github.com/rust-lang/rust/issues/53151</a><br>\nUnused trait bound with lifetime causes compile error · Issue <a href=\"https://github.com/rust-lang/rust/issues/53156\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53156\">#53156</a> · rust-lang/rust<br>\n<a href=\"https://github.com/rust-lang/rust/issues/53156\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53156\">https://github.com/rust-lang/rust/issues/53156</a></p>\n<p>Filed.</p>",
        "id": 131042644,
        "sender_full_name": "YOSHIOKA Takuma",
        "timestamp": 1533646828
    },
    {
        "content": "<p>thank you</p>",
        "id": 131042677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533646889
    },
    {
        "content": "<p>both are sort of \"dups\", but the NLL one is clearly actionable..</p>",
        "id": 131043808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648022
    },
    {
        "content": "<p>I guess that <a href=\"https://github.com/rust-lang/rust/issues/51356\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51356\">#51356</a> argues for a slightly more general fix than the hackiest of hacks I had considered</p>",
        "id": 131043827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648062
    },
    {
        "content": "<p>since it seems like it is also related to <code>Into</code></p>",
        "id": 131043832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648065
    }
]