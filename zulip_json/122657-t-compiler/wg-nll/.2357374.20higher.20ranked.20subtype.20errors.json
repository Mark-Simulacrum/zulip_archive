[
    {
        "content": "<p>so I started looking at this during my lunchbreak: I'll summarize what I think I understood (or more likely \"misunderstood\", heh). The \"bad\" error comes from <a href=\"https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1217\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1217\">check_bound_universal_region</a>. We're checking '10 when we notice the error that the bb0/0 Location is present in its scc and emit an error where we think this \"'10: '0\" (IIUC) constraint is coming from, and we might have needed (if we wanted to mimick the AST borrowck behaviour) to emit a <code>TypeError::RegionsPlaceholderMismatch</code> placeholder failure error (\"one type is more general than the other\") between the 2 regions ? (however, in order to do that I'm not sure where to get a <code>SubregionOrigin::Subtype</code> constraint origin, or the <code>TypeTrace</code> needed by <code>InferCtxt::report_and_explain_type_error</code>)</p>",
        "id": 154918388,
        "sender_full_name": "lqd",
        "timestamp": 1547215169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that sounds about right</p>",
        "id": 154947293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240961
    },
    {
        "content": "<p>we probably can't get exactly that information</p>",
        "id": 154947317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240981
    },
    {
        "content": "<p>I'm not sure if I recall what information we <em>can</em> get</p>",
        "id": 154947321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240989
    },
    {
        "content": "<p>I'll try to find out</p>",
        "id": 154948806,
        "sender_full_name": "lqd",
        "timestamp": 1547242343
    },
    {
        "content": "<p>(but if somehow you recall, maybe while working on the similar \"one type is more general than the other\" error  <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a>, please let me know ;)</p>",
        "id": 154949554,
        "sender_full_name": "lqd",
        "timestamp": 1547243037
    },
    {
        "content": "<p>ok so after more hours looking at this: I'm not sure how/if to reuse the parts of  <code>rustc::infer::error_reporting</code> and <code>TypeError::RegionsPlaceholderMismatch</code> in region_infer's error reporting. The 4-5 directions I've tried seemed to ultimately require some information I don't know how to get or whether it can be gotten (hitting these dead-ends is more indicative that <em>I</em> couldn't make them build/work rather than them not being the correct direction, possibly after some modifications, of course).</p>",
        "id": 155103200,
        "sender_full_name": "lqd",
        "timestamp": 1547489265
    },
    {
        "content": "<p>While I know I can manually craft an error message which adds notes and such, I'm not sure how it should look in the handful of cases in our tests (whether it should look more like the \"one type is more general than the other\" or \"expected concrete lifetime, found bound lifetime parameter 'a\" errors). So I unfortunately haven't made a lot of progress per se, apart from maybe knowing a bit more about what didn't immediately work out of the box</p>",
        "id": 155103259,
        "sender_full_name": "lqd",
        "timestamp": 1547489311
    },
    {
        "content": "<p>(or maybe noticing the span returned from <code>find_outlives_blame_span</code> seems to do subtly different things in these cases, as we can see in <a href=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.rs\">the hr-fn-aaa-as-aba test</a>'s <a href=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr\">output</a>; or that I'm not sure whether disabling leak-check actually has an impact on these errors)</p>",
        "id": 155103287,
        "sender_full_name": "lqd",
        "timestamp": 1547489348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ok let me see here</p>",
        "id": 155196743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580346
    },
    {
        "content": "<p>sorry I've faile to give you much actionable advice yet</p>",
        "id": 155196745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580352
    },
    {
        "content": "<p>oh no worries !</p>",
        "id": 155196861,
        "sender_full_name": "lqd",
        "timestamp": 1547580437
    },
    {
        "content": "<p>the other thing is that there is the other bug</p>",
        "id": 155196887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580468
    },
    {
        "content": "<p>I have some better idea what is needed there</p>",
        "id": 155196899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580474
    },
    {
        "content": "<p>I should leave some notes</p>",
        "id": 155196905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580476
    },
    {
        "content": "<p>it might be a good starter issue :P</p>",
        "id": 155196908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580481
    },
    {
        "content": "<p>haha :) sure why not</p>",
        "id": 155196962,
        "sender_full_name": "lqd",
        "timestamp": 1547580500
    },
    {
        "content": "<p>I am referring to <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">https://github.com/rust-lang/rust/issues/57362</a></p>",
        "id": 155196963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580501
    },
    {
        "content": "<p>let me try to leave a few notes on the issue</p>",
        "id": 155196978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580524
    },
    {
        "content": "<p>awesome, thank you</p>",
        "id": 155197006,
        "sender_full_name": "lqd",
        "timestamp": 1547580557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <a href=\"https://github.com/rust-lang/rust/issues/57362#issuecomment-454540850\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362#issuecomment-454540850\">some notes here</a></p>",
        "id": 155201902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584457
    },
    {
        "content": "<p>I don't really know <em>precisely</em> how I would fix it</p>",
        "id": 155201904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584462
    },
    {
        "content": "<p>but I think that's the \"lay of the land\" in terms of what's causing the problem</p>",
        "id": 155201914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584469
    },
    {
        "content": "<p>I guess I can imagine a few different things to tweak</p>",
        "id": 155201921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584478
    },
    {
        "content": "<p>it does overlap nicely with the investigation I had been doing for the higher ranked subtyping errors</p>",
        "id": 155202073,
        "sender_full_name": "lqd",
        "timestamp": 1547584594
    },
    {
        "content": "<p>thanks for the notes, I'll dig into this part and see what stumbling blocks I find in order to construct such a message :)</p>",
        "id": 155202147,
        "sender_full_name": "lqd",
        "timestamp": 1547584659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> re: <a href=\"https://github.com/rust-lang/rust/issues/57374#issuecomment-458900638\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374#issuecomment-458900638\">GH comment</a> yeah my understanding is <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a> is specific to MIR borrowck, while <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> was the dual in AST borrowck, and there's another similar one for non-NLLs <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a> which IIUC should be a dupe of <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a> under NLLs (but haven't investigated yet)</p>",
        "id": 157184765,
        "sender_full_name": "lqd",
        "timestamp": 1548853097
    },
    {
        "content": "<p>yeah I had just had an idle hope that whatever fixed <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> would apply to <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a>. But it seems pretty obvious in hindsight based on  skimming PR <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> that it was independent.</p>",
        "id": 157185332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853593
    },
    {
        "content": "<p>if you have any ideas on how I might \"generalize\" the PR to handle <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a> as well (the problem there being very similar, but with PolyTraitRefs instead of TraitRefs) -- or how to go at fixing <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a>, it would also ofc be very helpful :)</p>",
        "id": 157185705,
        "sender_full_name": "lqd",
        "timestamp": 1548853943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> right, so, now that you dug into the \"error\" code for non-NLL, we can come back to this point I guess =)</p>",
        "id": 157217420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548878820
    },
    {
        "content": "<p>we definitely can :)</p>",
        "id": 157217457,
        "sender_full_name": "lqd",
        "timestamp": 1548878853
    },
    {
        "content": "<p>I feel like it'll be similar for NLLs ?</p>",
        "id": 157217613,
        "sender_full_name": "lqd",
        "timestamp": 1548878963
    },
    {
        "content": "<p>hum I feel I can investigate this better, and experiment with it, now that I've seen the non-NLL scaffolding</p>",
        "id": 157218215,
        "sender_full_name": "lqd",
        "timestamp": 1548879382
    },
    {
        "content": "<p>it should be similar, the main question is how to get the information about the traits being solved. I can't recall what we have and what we don't off hand</p>",
        "id": 157219523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880421
    },
    {
        "content": "<p>yeah, after looking a bit at it, I remembered getting this information or knowing which info we had access to, was the area where I had the most difficulty. Maybe a roundabount way of finding the PlaceholderRegion's BoundRegion elsewhere. Or maybe it'd need to be added.</p>",
        "id": 157220248,
        "sender_full_name": "lqd",
        "timestamp": 1548881138
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> -- I've noticed you're also assigned to <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a>, and wondered if you could give me a couple pointers as to how/where to find some of the information we need to display the correct error message in this case (maybe some expected/found TraitRefs if it's anything like <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a>) from <a href=\"https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1217\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1217\">check_bound_universal_region</a> ? I have a Placeholder and a couple erroneous regions and everything I've tried has turned up a dead-end; I'm not sure where to look anymore :)</p>",
        "id": 157265681,
        "sender_full_name": "lqd",
        "timestamp": 1548934788
    },
    {
        "content": "<p>let me look</p>",
        "id": 157265744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548934817
    },
    {
        "content": "<p>thank you</p>",
        "id": 157265755,
        "sender_full_name": "lqd",
        "timestamp": 1548934847
    },
    {
        "content": "<p>(hmm, I hadn't previously noticed that NLL is highlighting the type annotation for <code>let x</code> (while without NLL we are highlighting the use of <code>x</code> on the RHS of the <code>let y</code> statement)</p>",
        "id": 157266057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935251
    },
    {
        "content": "<p>I don't have any immediate answers for you, but I've been sort of wandering around looking for something to poke at, so I might as well keep looking at this with you. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 157266114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935287
    },
    {
        "content": "<p>yeah I had noticed <code>find_outlives_blame_span</code> seemed to do subtly different things for these error cases, <a href=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr\">e.g. this test</a> has both</p>",
        "id": 157266134,
        "sender_full_name": "lqd",
        "timestamp": 1548935351
    },
    {
        "content": "<p>so, I don't know if this helps</p>",
        "id": 157266501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935830
    },
    {
        "content": "<p>but I do notice that the RUST_LOG debug output indicates that best_blame_constraint is being fed three things on the path</p>",
        "id": 157266527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935873
    },
    {
        "content": "<p>(the path being the constraint path between regions)</p>",
        "id": 157266576,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935896
    },
    {
        "content": "<p>and one of the three things is an assignment at bb0[8], <code>_3 = _1;</code></p>",
        "id": 157266602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935942
    },
    {
        "content": "<p>and <code>_3</code> has the type <code>for&lt;'a&gt; fn(&amp;'a ())</code></p>",
        "id": 157266615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935972
    },
    {
        "content": "<p>while <code>_1</code> has the type <code>fn(&amp;())</code></p>",
        "id": 157266617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548935981
    },
    {
        "content": "<p>so its possible one might try to reconstruct the useful diagnostic from that</p>",
        "id": 157266624,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548936001
    },
    {
        "content": "<p>I had difficulty finding out how to go from the regions themselves to the types and def_id (maybe substs as well) they came from</p>",
        "id": 157266693,
        "sender_full_name": "lqd",
        "timestamp": 1548936054
    },
    {
        "content": "<p>but maybe these are accessible from the path</p>",
        "id": 157266718,
        "sender_full_name": "lqd",
        "timestamp": 1548936105
    },
    {
        "content": "<p>you might also consider generalizing the callback that we pass into <code>best_blame_constraint</code></p>",
        "id": 157266823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548936235
    },
    {
        "content": "<p>well, maybe \"generalizing\" is the wrong word</p>",
        "id": 157266871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548936249
    },
    {
        "content": "<p>\"arbitrarily changing\" :)</p>",
        "id": 157266878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548936264
    },
    {
        "content": "<p>alright I'll poke in this direction and see what happens, thanks Felix!</p>",
        "id": 157266986,
        "sender_full_name": "lqd",
        "timestamp": 1548936374
    },
    {
        "content": "<p>(I want to better understand what's happening in this code path anyway, so I'll keep looking even if I don't keep posting notes here.)</p>",
        "id": 157266996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548936403
    },
    {
        "content": "<p>thanks to Felix's pointers I've made a bit of progress: I think the problem revolves around <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L121-L133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L121-L133\">this part of best_blame_constraint</a> in our case we have a path starting with an Assignment constraint <em>but</em> followed by a TypeAnnotation, which will be immediately chosen as the best one (and the reason why the span seems incorrect for example). The same will happen with other categories, say, a function call argument. I tried returning the Assignment in this case, just so that I could access the Tys of the locals, and see the fallout. It didn't seem to change our existing tests (so it's likely there are other similar cases to uncover here)</p>",
        "id": 157301017,
        "sender_full_name": "lqd",
        "timestamp": 1548964582
    },
    {
        "content": "<p>(err, I meant changing <code>find_outlives_blame_span</code> to return the assignment didn't seem to make tests fail: changing <code>best_blame_constraint</code> itself (eg the piece of code I linked) instead would impact tests for sure)</p>",
        "id": 157307479,
        "sender_full_name": "lqd",
        "timestamp": 1548969619
    },
    {
        "content": "<p>to be clear: did returning the Assignment at least help the particular case of <a href=\"https://github.com/rust-lang/rust/issues/57374\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57374\">#57374</a> itself? Or did it not even have an affect on that test (which to my knowledge is not part of our existing test suite)</p>",
        "id": 159553040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551302093
    },
    {
        "content": "<p>I'll have to retry this and get back to you to be sure about the details, but it was not \"the solution\" for sure. It just pointed to the correct span which seems like only a smaller part of the problem, but not the error itself. in particular I remember thinking, \"ok I can now see this MIR assignment should have been an error before getting to this point, so how do I reemit the same error ?\"</p>",
        "id": 159553359,
        "sender_full_name": "lqd",
        "timestamp": 1551302293
    },
    {
        "content": "<p>omfg after 2 months, I <em>finally</em> have a lead on this</p>",
        "id": 160028443,
        "sender_full_name": "lqd",
        "timestamp": 1551811380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you remember what you were looking for <a href=\"https://github.com/rust-lang/rust/blob/a21d82438b72a0394a670b6bfe95e3e62ee08802/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1294-L1300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a21d82438b72a0394a670b6bfe95e3e62ee08802/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1294-L1300\">here</a> ?</p>",
        "id": 160045523,
        "sender_full_name": "lqd",
        "timestamp": 1551823986
    },
    {
        "content": "<p>nvm, I'll add it to my notes and send them to the both of you for guidance</p>",
        "id": 160091536,
        "sender_full_name": "lqd",
        "timestamp": 1551876085
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so here's the (long-ish) <a href=\"https://hackmd.io/s/HyBGK9SLN\" target=\"_blank\" title=\"https://hackmd.io/s/HyBGK9SLN\">summary of my understanding</a> so far, and with that done I don't think I can make any more progress on this (maybe I should unassign myself from the issue until then)</p>",
        "id": 160100261,
        "sender_full_name": "lqd",
        "timestamp": 1551882723
    },
    {
        "content": "<p>okay thanks for writing this up</p>",
        "id": 160100343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551882792
    },
    {
        "content": "<p>I wonder if it is worthwhile to post this in a comment (hidden in a <code>&lt;details&gt;</code> block) on the issue itself...</p>",
        "id": 160100378,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551882832
    },
    {
        "content": "<p>in any case, yes, please do unassign yourself for now then</p>",
        "id": 160100442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551882864
    },
    {
        "content": "<p>there are questions and meanderings in there</p>",
        "id": 160100448,
        "sender_full_name": "lqd",
        "timestamp": 1551882869
    },
    {
        "content": "<p>yeah I can understand being hesitant to post that in a github comment</p>",
        "id": 160100496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551882899
    },
    {
        "content": "<p>maybe after you vet it, let's say</p>",
        "id": 160100522,
        "sender_full_name": "lqd",
        "timestamp": 1551882923
    },
    {
        "content": "<p>my immediate reaction is that points 1 (\"The span points at the type of x.\") and 2 (\"The span can be incorrect in other similar cases\") seem of general interest and to the point. Point 3 may be useful but it definitely meanders; I'd like to figure out a way to condense it before transcribing to the issue.</p>",
        "id": 160100857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551883196
    },
    {
        "content": "<p>depending on how long we'll keep the leak check, this may be less important than P-high</p>",
        "id": 160100861,
        "sender_full_name": "lqd",
        "timestamp": 1551883198
    },
    {
        "content": "<p>yeah I had kept point 3 because of the similarity of the path with an existing test</p>",
        "id": 160100981,
        "sender_full_name": "lqd",
        "timestamp": 1551883270
    },
    {
        "content": "<p>(To be clear, I'm not saying to kill off point 3. It is interesting, I think.)</p>",
        "id": 160101020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551883298
    },
    {
        "content": "<p>yeah, just more information on subtly different things</p>",
        "id": 160101170,
        "sender_full_name": "lqd",
        "timestamp": 1551883384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> sorry but I seem to have lost writing rights or something on the repo so can't unassign myself, if you could please do it</p>",
        "id": 160101226,
        "sender_full_name": "lqd",
        "timestamp": 1551883437
    },
    {
        "content": "<p>oh sure, no problem</p>",
        "id": 160101288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551883446
    },
    {
        "content": "<p>thanks</p>",
        "id": 160101305,
        "sender_full_name": "lqd",
        "timestamp": 1551883466
    },
    {
        "content": "<p>you mind linking to your notes from the ticket, at least?</p>",
        "id": 160101328,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551883484
    },
    {
        "content": "<p>yeah no problem</p>",
        "id": 160101340,
        "sender_full_name": "lqd",
        "timestamp": 1551883498
    },
    {
        "content": "<p>(just so I don't have to go digging through the zulip log to find it)</p>",
        "id": 160101343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551883501
    },
    {
        "content": "<p>done</p>",
        "id": 160101462,
        "sender_full_name": "lqd",
        "timestamp": 1551883565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> btw, sorry for dropping the ball, can you point me to the latest thing I should be reading? :P</p>",
        "id": 160127949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901511
    },
    {
        "content": "<p>no worries</p>",
        "id": 160127996,
        "sender_full_name": "lqd",
        "timestamp": 1551901549
    },
    {
        "content": "<p>it's a bit long but <a href=\"https://hackmd.io/s/HyBGK9SLN\" target=\"_blank\" title=\"https://hackmd.io/s/HyBGK9SLN\">here's</a> a summary of my explorations / meandering</p>",
        "id": 160128070,
        "sender_full_name": "lqd",
        "timestamp": 1551901579
    },
    {
        "content": "<p>(it also has some questions I had, which are both tied to understanding the current behaviour and the reasons behind it, and what it is we want to do here, and ofc how to do it)</p>",
        "id": 160128278,
        "sender_full_name": "lqd",
        "timestamp": 1551901791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> have you been able to look at this btw ?</p>",
        "id": 161749863,
        "sender_full_name": "lqd",
        "timestamp": 1553597549
    },
    {
        "content": "<p>no</p>",
        "id": 161749871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553597563
    },
    {
        "content": "<p>given the return of the leak-check, I think in my subconscious this bug has become P-medium (even though the actual bug is still marked P-high)</p>",
        "id": 161749932,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553597641
    },
    {
        "content": "<p>I was typing the same thing</p>",
        "id": 161749985,
        "sender_full_name": "lqd",
        "timestamp": 1553597653
    },
    {
        "content": "<p>I'm still unsure on how long the check is supposed to stay though</p>",
        "id": 161750003,
        "sender_full_name": "lqd",
        "timestamp": 1553597678
    },
    {
        "content": "<p>and there are other issues involving higher rank subtypes as well</p>",
        "id": 161750034,
        "sender_full_name": "lqd",
        "timestamp": 1553597712
    },
    {
        "content": "<p>sure</p>",
        "id": 161750558,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553598166
    }
]