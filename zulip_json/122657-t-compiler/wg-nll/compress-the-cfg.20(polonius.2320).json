[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117910\">@Julien Cretin</span> so — the idea there is to compress the points in some way — <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> pointed out that we could probably look for edges <code>P -&gt; Q</code> where the set of live regions is the same for both P and Q. That's a good starting point, though I think we'd have to do better.</p>",
        "id": 127201300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506473
    },
    {
        "content": "<p>Ok, I'll start with that. Should I create a new algorithm or edit an existing one?</p>",
        "id": 127201350,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527506546
    },
    {
        "content": "<p>I thnk that to start you should make a new algorithm \"forked\" from the naive</p>",
        "id": 127201353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506562
    },
    {
        "content": "<p>it's a lot smaller and easier to wrap your head around</p>",
        "id": 127201357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506571
    },
    {
        "content": "<p>we can port the concept to the optimized one</p>",
        "id": 127201358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506577
    },
    {
        "content": "<p>ok</p>",
        "id": 127201361,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527506585
    },
    {
        "content": "<p>FYI: My current status is reading the naive algorithm</p>",
        "id": 127201641,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527507031
    },
    {
        "content": "<p>Progress checkpoint: We are going to write a function condense_cfg(all_facts: AllFacts&lt;Region, Loan, Point&gt;) -&gt; AllFacts&lt;Region, Loan, Point&gt; that we're going to call before naive::compute.<br>\nThis function would \"merge\" successor points into predecessor points according to the criteria defined in polonius#20 (and \"fixing\" the facts that mention the removed successor point)</p>",
        "id": 127203110,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527509479
    },
    {
        "content": "<p>(Sorry on my phone — I think the exact algo from the issue won’t have much impact on clap; the last criteria has no matches in the dataset IIRC. Compressing is definitely the next big speedup for sure; just FYI wrt these exact rules)</p>",
        "id": 127203251,
        "sender_full_name": "lqd",
        "timestamp": 1527509723
    },
    {
        "content": "<p>(I think 15 out the 60-61 cfg edges from the “issue” dataset have no impact on the result)</p>",
        "id": 127204014,
        "sender_full_name": "lqd",
        "timestamp": 1527511149
    },
    {
        "content": "<p>(I agree the precise criteria in the issue are prob not the right ones; not 100% sure what the right ones are — but experimenting a bit seems good)</p>",
        "id": 127204399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527511788
    },
    {
        "content": "<p>inputs/issue-47680/nll-facts/main has 37 nodes to be merged according to the polonius#20 criteria. I'll experiment on this one. I haven't implemented the merge yet, just the filtering of nodes to be merged.</p>",
        "id": 127204745,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527512305
    },
    {
        "content": "<p>I guess there are two mildly separable concerns — which nodes to merge, and how to adjust the rules to reflect the merging of nodes</p>",
        "id": 127205502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513651
    },
    {
        "content": "<p>I think probably two points which have the same live regions can be merged so long as there is no <code>Invalidate</code> at either of them</p>",
        "id": 127205512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513674
    },
    {
        "content": "<p>well, sorry, and there is only one outgoing cfg edge from the prior point</p>",
        "id": 127205514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513690
    },
    {
        "content": "<p>(basically, points within a basic block)</p>",
        "id": 127205515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513705
    },
    {
        "content": "<p>but I might be missing something</p>",
        "id": 127205516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527513710
    },
    {
        "content": "<p>(A bunch of the Start to Mid edges looked very filterable)</p>",
        "id": 127206376,
        "sender_full_name": "lqd",
        "timestamp": 1527515045
    },
    {
        "content": "<p>yes certainly those; I expect the majority mid-to-start edges can also be filtered</p>",
        "id": 127206463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515239
    },
    {
        "content": "<p>but we have to figure out just the right rules I guess, not sure if what I wrote is in fact correct</p>",
        "id": 127206466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515263
    },
    {
        "content": "<p>I suppose this might be a case where #19 could help</p>",
        "id": 127206471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515281
    },
    {
        "content": "<p>in particular, there are some patterns in the way we generate facts that may not be evident from the current setup I think</p>",
        "id": 127206510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515298
    },
    {
        "content": "<p>agreed</p>",
        "id": 127206512,
        "sender_full_name": "lqd",
        "timestamp": 1527515301
    },
    {
        "content": "<p>though I'm trying to think of some concrete examples</p>",
        "id": 127206516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515311
    },
    {
        "content": "<p>presuming that the set of live regions at each point is the same....</p>",
        "id": 127206529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515338
    },
    {
        "content": "<p>I suppose the danger would be something where you setup half a path in one opint</p>",
        "id": 127206535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515346
    },
    {
        "content": "<p>and the other half in the other</p>",
        "id": 127206538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515352
    },
    {
        "content": "<p>but they are never connected</p>",
        "id": 127206539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515355
    },
    {
        "content": "<p>e.g., say that A and B are live at P and Q (and only A and B), and you have outlives facts like:</p>\n<div class=\"codehilite\"><pre><span></span>outlives(A, TMP1, P)\noutlives(TMP1, B, Q)\n</pre></div>",
        "id": 127206551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515397
    },
    {
        "content": "<p>but I .. sort of doubt we ever do that</p>",
        "id": 127206591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515406
    },
    {
        "content": "<p>(I guess we could merge points where the regions in outlives relations are disjoint or something, though computing that takes some work)</p>",
        "id": 127206605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515440
    },
    {
        "content": "<blockquote>\n<p>e.g., say that A and B are live at P and Q (and only A and B), and you have outlives facts like:</p>\n</blockquote>\n<p>to spool this out a bit more:</p>\n<p>If we had this scenario, under the naive rules, we would not find that <code>A: B</code>, because transitioning from A to B that outlives relation would be dropped. But if we merged P and Q, we might, because we would have <code>outlives(A, TMP1</code>) and <code>outlives(TMP1, B)</code> at the same (merged) point.</p>",
        "id": 127206617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515508
    },
    {
        "content": "<p>in any case I can imagine various ways to handle that</p>",
        "id": 127206624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515520
    },
    {
        "content": "<p>frank has interesting « equiv/InEquiv edges/points » rules I had implemented in a datafrog computation — how to produce the expected borrow_live_at + errors we needed was a bit more complex :)</p>",
        "id": 127206666,
        "sender_full_name": "lqd",
        "timestamp": 1527515537
    },
    {
        "content": "<p>yeah, I should look at those in more depth</p>",
        "id": 127206670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515553
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> (but should also enjoy the holiday ;)</p>",
        "id": 127206682,
        "sender_full_name": "lqd",
        "timestamp": 1527515605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can you send a link? :)</p>",
        "id": 127206686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527515640
    },
    {
        "content": "<p>I can try (phone + subway ;)</p>",
        "id": 127206745,
        "sender_full_name": "lqd",
        "timestamp": 1527515723
    },
    {
        "content": "<p>The mobile app doesnt really havie links but Franks message was : «  E.g. we could put together a relation Equiv(P,Q) which is CFG(P,Q) minus any pairs for which RLA(R,P), !RLA(R,Q) or any Killed(R,P) or Killed(R,Q). » if Search works. He had exact datalog rules  a bit later; I coded them and gisted them on Zulip recently — I’ll now look for them</p>",
        "id": 127206886,
        "sender_full_name": "lqd",
        "timestamp": 1527515989
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03\" target=\"_blank\" title=\"https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03\">https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03</a></p>",
        "id": 127207183,
        "sender_full_name": "lqd",
        "timestamp": 1527516396
    },
    {
        "content": "<p><a href=\"https://github.com/ia0/polonius/compare/master...ia0:condense_cfg\" target=\"_blank\" title=\"https://github.com/ia0/polonius/compare/master...ia0:condense_cfg\">https://github.com/ia0/polonius/compare/master...ia0:condense_cfg</a>  &lt;=  current implementation, I'll try to look at small examples manually and compare with the naive algorithm</p>",
        "id": 127207833,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527517378
    },
    {
        "content": "<p>Hello! Here's my first attempt: <a href=\"https://github.com/jvff/polonius/compare/master...jvff:condense-cfg\" target=\"_blank\" title=\"https://github.com/jvff/polonius/compare/master...jvff:condense-cfg\">https://github.com/jvff/polonius/compare/master...jvff:condense-cfg</a></p>",
        "id": 127208365,
        "sender_full_name": "Janito Vaqueiro Ferreira Filho",
        "timestamp": 1527518095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117910\">@Julien Cretin</span> <span class=\"user-mention\" data-user-id=\"117912\">@Janito Vaqueiro Ferreira Filho</span> (are you two working together or are these competing sets of changes?)</p>",
        "id": 127208443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518172
    },
    {
        "content": "<p>Those are \"competing\" set of changes</p>",
        "id": 127208453,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527518194
    },
    {
        "content": "<p>ok</p>",
        "id": 127208465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518215
    },
    {
        "content": "<p>seems ok, we can take the \"best of both\", just wanted to know whether to look at them both</p>",
        "id": 127208472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518229
    },
    {
        "content": "<p>We're three people doing 3 different implementations, but we're mostly learning about the code and learning with each other</p>",
        "id": 127208487,
        "sender_full_name": "Janito Vaqueiro Ferreira Filho",
        "timestamp": 1527518267
    },
    {
        "content": "<p>I too am working on a competing solution.  But I'm pretty far behind at this point in time.</p>",
        "id": 127209087,
        "sender_full_name": "emilsp",
        "timestamp": 1527519135
    },
    {
        "content": "<p>/me looks at these branches (sorry for delay)</p>",
        "id": 127209618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527519864
    },
    {
        "content": "<p>ok, so, <span class=\"user-mention\" data-user-id=\"117910\">@Julien Cretin</span>, i'm curious if you got back any stats on how often those changes apply</p>",
        "id": 127209776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520116
    },
    {
        "content": "<p>if I understood your branch, I guess it does a kind of \"pre-pass\" to compress the facts?</p>",
        "id": 127209781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520128
    },
    {
        "content": "<p>one thing I like about this approach: if we rework the <code>AllFacts</code> with custom code, we can then feed them into the naive and optimized algorithms and measure the difference in speed — it gives us a kind of \"lower bound\" on how effective this can be</p>",
        "id": 127209806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520184
    },
    {
        "content": "<p>I suspect longer term we would want to code up the compression in <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> or else maybe even do it on the rustc side, not entirely clear, depends on what precise conditions we wind up with (I suspect we may find that some conditions hold sort of \"structurally\" much of the time and that rustc could enforce them quite cheaply)</p>",
        "id": 127209863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117912\">@Janito Vaqueiro Ferreira Filho</span> looking at your branch, which I think is taking a similar approach, similar comments apply — though I am a bit confused by the <code>merge_edge</code> routine, which seems to basically just delete things relating to the <code>second</code> point, right? (not so much \"merging\" then...)</p>",
        "id": 127209939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520337
    },
    {
        "content": "<p>Yes, true. It merges the <code>cfg_edge</code> vector though. But the code needs some improvements, and I think tomorrow I'll start playing with the <code>edge_is_mergeable</code> function to see what rules can be applied.</p>",
        "id": 127210078,
        "sender_full_name": "Janito Vaqueiro Ferreira Filho",
        "timestamp": 1527520560
    },
    {
        "content": "<p>We're wrapping up for today, but we'll be back here tomorrow</p>",
        "id": 127210209,
        "sender_full_name": "Janito Vaqueiro Ferreira Filho",
        "timestamp": 1527520689
    },
    {
        "content": "<p>great :)</p>",
        "id": 127210304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520861
    },
    {
        "content": "<p>I'll try to wake up early tomorrow to overlap with CET as much as possible</p>",
        "id": 127210315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527520871
    },
    {
        "content": "<p>another data point: 2870 cfg edges out of the 51896 have no impact on the <code>borrow_live_at</code> results of clap, and most of <em>those</em> are goto edges between blocks. (instead of trying to think about the rules I bruteforced the checks while I was away, here are those <a href=\"https://gist.github.com/lqd/cfdea07f4a6abfb4007919e5ffef347a\" target=\"_blank\" title=\"https://gist.github.com/lqd/cfdea07f4a6abfb4007919e5ffef347a\">results</a>) -- I'll check later today whether filtering those 5% out has interesting performance benefits, if anyone doesn't get to it first :) (maybe we can also easily reverse engineer the rules from the data)</p>",
        "id": 127243010,
        "sender_full_name": "lqd",
        "timestamp": 1527586675
    },
    {
        "content": "<p>I have not had time to pursue <a href=\"https://github.com/rust-lang/rust/pull/50938\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50938\">https://github.com/rust-lang/rust/pull/50938</a> any further, but it seems related. In particular, it removes a lot of \"duplicate\" outlives relations — strangely, when I tested polonius with it, it seemed to make things go slower. :/ Not sure why that would be yet!</p>",
        "id": 127243414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527587482
    },
    {
        "content": "<p>that said, we got to land the rustc integration — it was showing some problems with polonius (actually related to #24), in terms of failing tests. This may indicate a problem with the optimized variant.</p>",
        "id": 127243420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527587520
    },
    {
        "content": "<p>/me goes back to his coffee</p>",
        "id": 127243457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527587524
    },
    {
        "content": "<p>oh yes I remember we talked about Location:All temporarily creating <code>outlives</code> facts -- the slowdown is interesting indeed. So there are at least 2 directions to investigate, both the <code>outlives</code> and <code>cfg_edge</code> relations</p>",
        "id": 127243559,
        "sender_full_name": "lqd",
        "timestamp": 1527587698
    },
    {
        "content": "<p>I guess a problem located solely in the optimized variant would be surprising, since it has the same output as the naive variant (except if we're talking <code>errors</code> ofc)</p>",
        "id": 127243853,
        "sender_full_name": "lqd",
        "timestamp": 1527588156
    },
    {
        "content": "<blockquote>\n<p>I guess a problem located solely in the optimized variant would be surprising, since it has the same output as the naive variant</p>\n</blockquote>\n<p>on our tests so far :)</p>\n<blockquote>\n<p>(except if we're talking <code>errors</code> ofc)</p>\n</blockquote>\n<p>I would expect the result to be the same for <code>errors</code> =)</p>",
        "id": 127244356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527589195
    },
    {
        "content": "<p>haha yes :)</p>",
        "id": 127244411,
        "sender_full_name": "lqd",
        "timestamp": 1527589257
    },
    {
        "content": "<p>as I mentioned to Felix, it's also why I really wanted to add the frontend to be able to have more diverse tests on our side :) eg these potentially diverging ones that are only in rustc at the moment</p>",
        "id": 127244469,
        "sender_full_name": "lqd",
        "timestamp": 1527589335
    },
    {
        "content": "<p>yes my expectation is that once we have integration going we will add more tests as we find interesting examples</p>",
        "id": 127244523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527589493
    },
    {
        "content": "<p>(Note: I have no evidence that the problem is the opt diverging from naive, just saying it's possible)</p>",
        "id": 127244555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527589557
    },
    {
        "content": "<p>anyway, gotta run for a bit — I should add that I've seen these failures before, they are caused by the return type not being properly enforced everywhere...</p>",
        "id": 127244598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527589588
    },
    {
        "content": "<p>sure :)</p>",
        "id": 127244600,
        "sender_full_name": "lqd",
        "timestamp": 1527589599
    },
    {
        "content": "<p>Shouldn't the region_live_at relation be closed under the subset relation? I mean adding the following rule:<br>\nregion_live_at(R2, P) :- region_live_at(R1, P), subset(R1, R2, P).<br>\nOr is this somehow guaranteed in the nll-facts input?</p>",
        "id": 127248928,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527596768
    },
    {
        "content": "<p>that is not necessarily true, no</p>",
        "id": 127249025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527596934
    },
    {
        "content": "<p>region-live-at implies that a reference whose type includes <em>that region</em> will be used</p>",
        "id": 127249035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527596953
    },
    {
        "content": "<p>you can think of regions as sets of loans</p>",
        "id": 127249038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527596981
    },
    {
        "content": "<p>and it is true that loans \"flow through\" subset in this way</p>",
        "id": 127249084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527597006
    },
    {
        "content": "<p>(that is, if you have <code>L in R1</code> and <code>R1 &lt;= R2</code> and <code>region_live_at(R2)</code> at a given point, then <code>borrow_live_at(L)</code>)</p>",
        "id": 127249106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527597047
    },
    {
        "content": "<p>Ok I see, thanks!</p>",
        "id": 127249306,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527597370
    },
    {
        "content": "<p># Status<br>\nAdded a --condense-cfg flag in <a href=\"https://github.com/ia0/polonius/compare/master...ia0:condense_cfg\" target=\"_blank\" title=\"https://github.com/ia0/polonius/compare/master...ia0:condense_cfg\">https://github.com/ia0/polonius/compare/master...ia0:condense_cfg</a>.<br>\nAdded the example A of the blog in <a href=\"https://github.com/ia0/polonius/compare/master...ia0:blog_example\" target=\"_blank\" title=\"https://github.com/ia0/polonius/compare/master...ia0:blog_example\">https://github.com/ia0/polonius/compare/master...ia0:blog_example</a>.<br>\nPrint errors for naive algorithm in <a href=\"https://github.com/ia0/polonius/compare/master...ia0:naive_errors\" target=\"_blank\" title=\"https://github.com/ia0/polonius/compare/master...ia0:naive_errors\">https://github.com/ia0/polonius/compare/master...ia0:naive_errors</a>.<br>\n# Observations<br>\nThe set of errors is preserved for inputs/{{blog,issue-47680}/nll-facts/main,clap-rs/app-parser-\\{\\{impl\\}\\}-add_defaults}.<br>\nOnly issue-47680 has merged nodes.<br>\nThe clap-rs example is slightly slower when condensing the CFG although the facts are equivalent (only the order changes).</p>",
        "id": 127255584,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527605564
    }
]