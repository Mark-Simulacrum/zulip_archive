[
    {
        "content": "<p>Spinning off from #4, I was thinking that a way to go faster would be to do a \"location-insensitive pre-pass\". I sketched the idea here <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/29\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/29\">https://github.com/rust-lang-nursery/borrow-check/issues/29</a>. Basically we can do a less precise analysis, find out where errors <em>might</em> lie, and then do the more precise version only for those loans etc that are potentially problematic.</p>",
        "id": 126581165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526372512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> one thing to clarify — re: #29 — although we sketched out how to compute the transitive closure for the subset relation, I don't actually think we need to do that in the code</p>",
        "id": 126600148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526401935
    },
    {
        "content": "<p>I <em>do</em> think we'll want to compute the transitive <code>requires</code> relation</p>",
        "id": 126600151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526401942
    },
    {
        "content": "<p>or at least somewhere we need transitivity :)</p>",
        "id": 126600157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526401951
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/29\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/29\">#29</a>, I sketched out the <code>requires</code> relation like so:</p>\n<div class=\"codehilite\"><pre><span></span>requires(R1, L1) :- borrow_region(R1, L1, _P).\nrequires(R2, L1) :- requires(R1, L1), subset(R1, R2).\n</pre></div>\n\n\n<p>This version, notably, doesn't require a transitive <code>subset</code> relation to be correct — the second clause will propagate \"along\" the subset relation. So e.g. if you have two tuples:</p>\n<div class=\"codehilite\"><pre><span></span>R1 &lt;= R2\nR2 &lt;= R3\n</pre></div>\n\n\n<p>and you have <code>borrow_region(R1, L0)</code>, then the second rule would compute a first pass with just one fact:</p>\n<div class=\"codehilite\"><pre><span></span>requires(R1, L0)\n</pre></div>\n\n\n<p>On the second pass, it would use that fact to compute:</p>\n<div class=\"codehilite\"><pre><span></span>requires(R2, L0)\n</pre></div>\n\n\n<p>and then in the third round it would add <code>requires(R3, L0)</code>.</p>",
        "id": 126600475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526402494
    },
    {
        "content": "<p>hey, I'm back, going to start, thanks for the comments</p>",
        "id": 126602619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526405804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> how goes?</p>",
        "id": 126604778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526408746
    },
    {
        "content": "<p>(btw I tried earlier these rules with soufflé on clap, and it was indeed fast, a good sign since it should be faster with the Invalidates facts)</p>",
        "id": 126605088,
        "sender_full_name": "lqd",
        "timestamp": 1526409051
    },
    {
        "content": "<p>one thing I am not sure about: today's borrow checker <em>is</em> location-sensitive for the <code>requires</code> relation, but not the <code>subset</code>. We may want that. But since this is only a \"pre-filter\", we may find we don't need it.</p>",
        "id": 126605129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526409109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was interrupted here several times so I'm reading the thing and now focused to do it</p>",
        "id": 126605335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526409287
    },
    {
        "content": "<p>was reading the issue</p>",
        "id": 126605339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526409297
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// requires(R1, L1) :- borrow_region(R1, L1, _P).\n</pre></div>",
        "id": 126605834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526409985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for this example borrow_region is <strong>decl</strong>ared, right?</p>",
        "id": 126605842,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410019
    },
    {
        "content": "<p>what do you mean by \"declared\"?</p>",
        "id": 126605850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410029
    },
    {
        "content": "<p>oh, well, <code>borrow_region</code> is an input</p>",
        "id": 126605853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410039
    },
    {
        "content": "<p>that is, it comes from <code>AllFacts</code></p>",
        "id": 126605857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410045
    },
    {
        "content": "<p>like <code>outlives</code></p>",
        "id": 126605858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410050
    },
    {
        "content": "<p>yes</p>",
        "id": 126605861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410052
    },
    {
        "content": "<p>so it comes with a .decl clause</p>",
        "id": 126605869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410062
    },
    {
        "content": "<p>in datalog</p>",
        "id": 126605872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410065
    },
    {
        "content": "<p>yeah, and a <code>.input</code> as well, strictly speaking :)</p>",
        "id": 126605919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410097
    },
    {
        "content": "<p>.decl + input yes</p>",
        "id": 126605920,
        "sender_full_name": "lqd",
        "timestamp": 1526410099
    },
    {
        "content": "<p>yep</p>",
        "id": 126605924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410108
    },
    {
        "content": "<p>just in case asking :)</p>",
        "id": 126605933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410122
    },
    {
        "content": "<p>I was trying to mimic what you were doing like in here ...</p>",
        "id": 126606044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410270
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                // .decl subset(Ra, Rb) -- `R1 &lt;= R2` holds\n                //\n                // subset_base(Ra, Rb) :- outlives(Ra, Rb, _P)\n</pre></div>",
        "id": 126606047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410275
    },
    {
        "content": "<p>but unsure why you use .decl, didn't you mean input?</p>",
        "id": 126606061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410296
    },
    {
        "content": "<p>nope</p>",
        "id": 126606063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410300
    },
    {
        "content": "<p>I don't think I added comments for the inputs</p>",
        "id": 126606066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410305
    },
    {
        "content": "<p>but rather the \"derived relations\"</p>",
        "id": 126606068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> here's how it looks with the naive rules for the soufflé datalog engine <a href=\"https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe\" target=\"_blank\" title=\"https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe\">https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe</a></p>",
        "id": 126606079,
        "sender_full_name": "lqd",
        "timestamp": 1526410321
    },
    {
        "content": "<p>so in this case there might be something like: <code>// .decl requires(R, L)</code></p>",
        "id": 126606123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe explain what you mean exactly in that comment?</p>",
        "id": 126606131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410339
    },
    {
        "content": "<p>I read that as a declaration</p>",
        "id": 126606132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410345
    },
    {
        "content": "<p>and then it could come from input or derived</p>",
        "id": 126606137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410354
    },
    {
        "content": "<p>if my definition is right, decl by itself unsure what is telling me</p>",
        "id": 126606147,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that is correct, but <code>subset</code> is not coming from <code>AllFacts</code></p>",
        "id": 126606152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410382
    },
    {
        "content": "<p><code>outlives</code> is</p>",
        "id": 126606156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410384
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> here's how it looks with the naive rules for the soufflé datalog engine <a href=\"https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe\" target=\"_blank\" title=\"https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe\">https://gist.github.com/lqd/1db97eb478a504314cc47d7d087faefe</a></p>\n</blockquote>\n<p>checking ...</p>",
        "id": 126606160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410394
    },
    {
        "content": "<p>the inputs come from <code>AllFacts</code>, you can see them <a href=\"https://github.com/rust-lang-nursery/borrow-check/blob/4945c130cb1f3af7c072dc9856b6fe21b3a9f1f7/src/output/timely_opt.rs#L74-L82\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/blob/4945c130cb1f3af7c072dc9856b6fe21b3a9f1f7/src/output/timely_opt.rs#L74-L82\">being setup here</a></p>",
        "id": 126606161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410394
    },
    {
        "content": "<blockquote>\n<p>if my definition is right, decl by itself unsure what is telling me</p>\n</blockquote>\n<p>it's just telling you what the \"types\" of the tuple are</p>",
        "id": 126606172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410429
    },
    {
        "content": "<p>ahh so you're adding decl for stuff that is not in AllFacts?</p>",
        "id": 126606174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410431
    },
    {
        "content": "<p>right</p>",
        "id": 126606178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410435
    },
    {
        "content": "<p>ok</p>",
        "id": 126606181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410439
    },
    {
        "content": "<p>the types for <code>AllFacts</code> you can find in the struct itself</p>",
        "id": 126606220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410445
    },
    {
        "content": "<p>so I didn't bother to document them</p>",
        "id": 126606232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410454
    },
    {
        "content": "<p>ok</p>",
        "id": 126606254,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410481
    },
    {
        "content": "<p>truth is, it doesn't tell you that much :)</p>",
        "id": 126606275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410517
    },
    {
        "content": "<p>also</p>",
        "id": 126606345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                    let borrow_region = borrow_region.enter(&amp;requires.scope());\n                    let subset = subset.enter(&amp;requires.scope());\n                    let killed = killed.enter(&amp;requires.scope());\n                    let region_live_at = region_live_at.enter(&amp;requires.scope());\n                    let cfg_edge = cfg_edge.enter(&amp;requires.scope());\n                    let universal_region = universal_region.enter(&amp;requires.scope());\n</pre></div>",
        "id": 126606347,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410614
    },
    {
        "content": "<p>why did you do all that in the naive part?</p>",
        "id": 126606354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410625
    },
    {
        "content": "<p>you need to do that whenever you have an <code>iterate</code> call</p>",
        "id": 126606382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410674
    },
    {
        "content": "<p>ahh I remember you mention something about this subtlety in the video</p>",
        "id": 126606383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410677
    },
    {
        "content": "<p>yep</p>",
        "id": 126606387,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410681
    },
    {
        "content": "<p>ok</p>",
        "id": 126606416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410682
    },
    {
        "content": "<p>that is how you bring the things from \"outside\" the iteration into scope</p>",
        "id": 126606422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410682
    },
    {
        "content": "<p>within the iteration</p>",
        "id": 126606427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410684
    },
    {
        "content": "<p>if you don't do that, you will find you get various compilation errors :)</p>",
        "id": 126606433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526410698
    },
    {
        "content": "<p>:)</p>",
        "id": 126606565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526410834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> a couple of questions ...</p>",
        "id": 126609456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414546
    },
    {
        "content": "<p>ok, ask quick :) I am leaving in 2 minutes</p>",
        "id": 126609463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414559
    },
    {
        "content": "<p>1. what am I supposed to do with borrow_live_at?</p>",
        "id": 126609465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414565
    },
    {
        "content": "<p>2. I have some stuff unsure if I'm in the right direction :P</p>",
        "id": 126609471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414578
    },
    {
        "content": "<p>2 is not a question, it's kind you look at the code and tell me if we are going in good direction :), hehe</p>",
        "id": 126609507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414638
    },
    {
        "content": "<blockquote>\n<p>1. what am I supposed to do with borrow_live_at?</p>\n</blockquote>\n<p>I think we can define it like:</p>\n<div class=\"codehilite\"><pre><span></span>borrow_live_at(L, P) :-\n  requires(R, L), region_live_at(R, P)\n</pre></div>",
        "id": 126609550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414646
    },
    {
        "content": "<p>maybe I need to figure out how to test this</p>",
        "id": 126609554,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414647
    },
    {
        "content": "<blockquote>\n<p>2. I have some stuff unsure if I'm in the right direction :P</p>\n</blockquote>\n<p>send me a link ?</p>",
        "id": 126609558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414653
    },
    {
        "content": "<blockquote>\n<p>maybe I need to figure out how to test this</p>\n</blockquote>\n<p>well, this is the problem :) this is why I was saying we need to work on the integration</p>",
        "id": 126609567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414663
    },
    {
        "content": "<p>I basically don't know how to test</p>",
        "id": 126609570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414666
    },
    {
        "content": "<p>but I can probably vet it pretty easily for now</p>",
        "id": 126609572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414672
    },
    {
        "content": "<p>ok, gotta go, I may be reachable on mobile</p>",
        "id": 126609580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526414680
    },
    {
        "content": "<p><a href=\"https://gist.github.com/spastorino/2913826a97e56aa5f3470152d3ec4c04\" target=\"_blank\" title=\"https://gist.github.com/spastorino/2913826a97e56aa5f3470152d3ec4c04\">https://gist.github.com/spastorino/2913826a97e56aa5f3470152d3ec4c04</a></p>",
        "id": 126609585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414682
    },
    {
        "content": "<p>mainly check the requires part</p>",
        "id": 126609607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526414716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the requires is not quite setup right</p>",
        "id": 126614070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526420672
    },
    {
        "content": "<p>The return value of iterate closure should include the base facts too</p>",
        "id": 126614081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526420697
    },
    {
        "content": "<p>If you look at the transitive subset relation we setup you will see what I mean</p>",
        "id": 126614103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526420758
    },
    {
        "content": "<p>Also it occurs to me can can write some unit tests with hard coded facts</p>",
        "id": 126614152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526420785
    },
    {
        "content": "<p>should requires also depend on subset rather than subset_base ?</p>",
        "id": 126615002,
        "sender_full_name": "lqd",
        "timestamp": 1526421954
    },
    {
        "content": "<blockquote>\n<p>The return value of iterate closure should include the base facts too</p>\n</blockquote>\n<p>can you explain why?</p>",
        "id": 126615868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526423255
    },
    {
        "content": "<p>I may have thought in a wrong way</p>",
        "id": 126615874,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526423275
    },
    {
        "content": "<p>what I thought was exactly that those facts were already included in subsets, why do I need to add that in requires?</p>",
        "id": 126616124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526423623
    },
    {
        "content": "<p>I'm not quite sure I understand</p>",
        "id": 126616265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526423827
    },
    {
        "content": "<p>so you have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// requires(R, L) :- borrow_region(R, L, _P).</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">borrow_region</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">distinct_total</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// requires(R2, L) :- requires(R1, L), subset(R1, R2).</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"p\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">requires</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subset_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subset_base</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">requires</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"n\">requires</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_base</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">distinct_total</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126616332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526423885
    },
    {
        "content": "<p>but you need something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// requires(R, L) :- borrow_region(R, L, _P).</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">borrow_region</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">distinct_total</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// requires(R2, L) :- requires(R1, L), subset(R1, R2).</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">requires_base</span><span class=\"p\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">requires</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subset_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subset_base</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">requires</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">requires_base</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">requires</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">requires_base</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">requires2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_base</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"n\">requires1</span><span class=\"p\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">requires2</span><span class=\"p\">).</span><span class=\"n\">distinct_total</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126616371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526423958
    },
    {
        "content": "<blockquote>\n<p>should requires also depend on subset rather than subset_base ?</p>\n</blockquote>\n<p>well, yes, but really the distinction isnt' needed; that is, we should remove <code>subset</code> (which is just transitive closure of <code>subset_base</code>) and rename <code>subset_base</code> to <code>subset</code></p>",
        "id": 126616400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526423998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> </p>\n<blockquote>\n<p>can you explain why?</p>\n</blockquote>\n<p>anyway, the reason for that setup:</p>\n<ul>\n<li>the <code>iterate</code> closure takes as input the tuples in round N</li>\n<li>it returns the set of tuples in round N+1</li>\n</ul>\n<p>this return set doesn't <em>have</em> to include the tuples from round N; but in our case, we want it to, because we want the final set to  be strictly growing and getting bigger</p>",
        "id": 126616488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526424095
    },
    {
        "content": "<p>ahhh I see</p>",
        "id": 126616630,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526424287
    },
    {
        "content": "<p>this explaination makes sense</p>",
        "id": 126616638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526424301
    },
    {
        "content": "<p>will get back to this tomorrow</p>",
        "id": 126616649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526424312
    },
    {
        "content": "<p>ah yes haha, I had tested the query before and actually forgot we specifically didn't want the subset TC here <span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span></p>",
        "id": 126616840,
        "sender_full_name": "lqd",
        "timestamp": 1526424580
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, as I was saying <a href=\"#narrow/stream/122657-wg-nll/subject/integrating-borrow-check-and-rustc/near/126635433\" title=\"#narrow/stream/122657-wg-nll/subject/integrating-borrow-check-and-rustc/near/126635433\">in this message</a> I resurrected my branch of rustc that directly uses the borrow-check logic. We could in principle test your analysis by forking this branch and copying-and-pasting it in. It's not very convenient but it would be a kind of \"sanity check\"</p>",
        "id": 126641852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526472097
    },
    {
        "content": "<p>ok</p>",
        "id": 126642131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526472623
    },
    {
        "content": "<p>yeah, when I've said test yesterday I didn't mean to do anything fancy, just run the thing and see if it does something :)</p>",
        "id": 126642135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526472650
    },
    {
        "content": "<p>but anyway, what you say seems to make more sense anyway (?)</p>",
        "id": 126642140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526472666
    },
    {
        "content": "<p>well it would be nice if we had a cleaner way of integrating the borrow-check execution with rustc</p>",
        "id": 126642151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526472703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the code you pasted yesterday</p>",
        "id": 126642892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474060
    },
    {
        "content": "<p>do we need to call distinct_total or distinct?</p>",
        "id": 126642895,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474069
    },
    {
        "content": "<p>you put distinct_total but in naive analysis for requires distinct is being called</p>",
        "id": 126642897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474090
    },
    {
        "content": "<p>unsure if in this part we have the subtleties you mentioned me on the call</p>",
        "id": 126642905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474107
    },
    {
        "content": "<p>distinct_total (distinct does more stuff we probably don't need here, IIRC)</p>",
        "id": 126642909,
        "sender_full_name": "lqd",
        "timestamp": 1526474153
    },
    {
        "content": "<p>yep, Niko told me that yesterday</p>",
        "id": 126642949,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474171
    },
    {
        "content": "<p>but in naive for the same case distinct was called</p>",
        "id": 126642951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474178
    },
    {
        "content": "<p>so I was unsure if was a case where we need it or not</p>",
        "id": 126642954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474189
    },
    {
        "content": "<p>anyway, it's true that naive requires part is more complex than this one ... so ... unsure</p>",
        "id": 126642970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474243
    },
    {
        "content": "<p>will leave as distinct_total then :)</p>",
        "id": 126642972,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> they could both be <code>distinct_total</code></p>",
        "id": 126642976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474267
    },
    {
        "content": "<p>Naive is older and less optimized yeah</p>",
        "id": 126642979,
        "sender_full_name": "lqd",
        "timestamp": 1526474274
    },
    {
        "content": "<p>ok</p>",
        "id": 126643017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474283
    },
    {
        "content": "<p>I left it that way to make timely-opt look faster in comparison :P</p>",
        "id": 126643021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474294
    },
    {
        "content": "<p>hehe</p>",
        "id": 126643024,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526474311
    },
    {
        "content": "<p>(and because I didn't want to change it — it is kind of the \"most obviously correct\" thing the way it is)</p>",
        "id": 126643025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so ... as we were talking yesterday, in location insensitive we also want borrow_live_at which considers a fixed point P, right?</p>",
        "id": 126644825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477058
    },
    {
        "content": "<p>yeah, but it would use the results of the <code>requires</code> location which <em>doesn't</em> take <code>P</code></p>",
        "id": 126644834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477080
    },
    {
        "content": "<p>exactly</p>",
        "id": 126644835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477087
    },
    {
        "content": "<p>so basically the \"location sensitivity\" comes from the <code>region_live_at</code> tuples</p>",
        "id": 126644847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477109
    },
    {
        "content": "<p>yes</p>",
        "id": 126644850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477121
    },
    {
        "content": "<p>what about universal regions?</p>",
        "id": 126644927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477192
    },
    {
        "content": "<p>heh, good timing for that question</p>",
        "id": 126645025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477338
    },
    {
        "content": "<p>I'm planning to remove that distinction; see <a href=\"#narrow/stream/122657-wg-nll/subject/pending-nll-simplifications/near/126645015\" title=\"#narrow/stream/122657-wg-nll/subject/pending-nll-simplifications/near/126645015\">this comment</a></p>",
        "id": 126645037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477360
    },
    {
        "content": "<p>but for now you could transform the <code>universal_regions</code> facts into <code>region_live_at</code> facts the same way that <code>timely_opt</code> does</p>",
        "id": 126645040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477376
    },
    {
        "content": "<p>ok</p>",
        "id": 126645044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477385
    },
    {
        "content": "<p>(I linked to the code in that comment)</p>",
        "id": 126645049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477395
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126645051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526477402
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                // borrow_live_at(L, P) :-\n                //     requires(R, L), region_live_at(R, P)\n                let borrow_live_at = requires\n                    .semijoin(&amp;region_live_at)\n                    .map(|(_r, l, p)| (l, p));\n</pre></div>",
        "id": 126650363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484562
    },
    {
        "content": "<p>I'm getting this ...</p>",
        "id": 126650366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484573
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n   --&gt; src/output/location_insensitive.rs:132:31\n    |\n132 |                     .semijoin(&amp;region_live_at)\n    |                               ^^^^^^^^^^^^^^^ expected struct `facts::Region`, found tuple\n    |\n    = note: expected type `&amp;differential_dataflow::Collection&lt;timely::dataflow::scopes::Child&lt;&#39;_, timely::dataflow::scopes::Root&lt;timely_communication::allocator::generic::Generic&gt;, ()&gt;, facts::Region, _&gt;`\n               found type `&amp;differential_dataflow::Collection&lt;timely::dataflow::scopes::Child&lt;&#39;_, timely::dataflow::scopes::Root&lt;timely_communication::allocator::generic::Generic&gt;, ()&gt;, (facts::Region, facts::Point)&gt;`\n</pre></div>",
        "id": 126650368,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484577
    },
    {
        "content": "<p>unsure exactly why is semijoin expecting that</p>",
        "id": 126650425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484615
    },
    {
        "content": "<p>maybe that's affected after the fix for universal regions?</p>",
        "id": 126650447,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484673
    },
    {
        "content": "<p>no, it's not</p>",
        "id": 126650460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484704
    },
    {
        "content": "<p>can you send me link to the current commit?</p>",
        "id": 126650532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484785
    },
    {
        "content": "<p>sure</p>",
        "id": 126650548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484811
    },
    {
        "content": "<p>gimme a sec</p>",
        "id": 126650550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484814
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/borrow-check/commit/b08864f42c14bb69c004215deca6639d4a64668c\" target=\"_blank\" title=\"https://github.com/spastorino/borrow-check/commit/b08864f42c14bb69c004215deca6639d4a64668c\">https://github.com/spastorino/borrow-check/commit/b08864f42c14bb69c004215deca6639d4a64668c</a></p>",
        "id": 126650611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484863
    },
    {
        "content": "<p>I think you just want <code>join</code></p>",
        "id": 126650724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484970
    },
    {
        "content": "<p>not <code>semijoin</code></p>",
        "id": 126650725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484972
    },
    {
        "content": "<p>that is, you want to take information from both sides</p>",
        "id": 126650730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484981
    },
    {
        "content": "<p>the <code>L</code> from one, the <code>P</code> from the other</p>",
        "id": 126650738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484987
    },
    {
        "content": "<p><code>semijoin</code> is more like \"intersect\"</p>",
        "id": 126650744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526484992
    },
    {
        "content": "<p>can you explain again the difference?</p>",
        "id": 126650747,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526484997
    },
    {
        "content": "<p>it's roughly what I just wrote :0</p>",
        "id": 126650751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485007
    },
    {
        "content": "<p>ok</p>",
        "id": 126650755,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485013
    },
    {
        "content": "<p>that is, if you do <code>foo.semijoin(bar)</code></p>",
        "id": 126650757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485017
    },
    {
        "content": "<p>that is basically <code>foo - bar</code></p>",
        "id": 126650760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485024
    },
    {
        "content": "<p>I read something about empty collections for semijoin</p>",
        "id": 126650762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485024
    },
    {
        "content": "<p>er</p>",
        "id": 126650766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485028
    },
    {
        "content": "<p>sorry</p>",
        "id": 126650767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485029
    },
    {
        "content": "<p><code>foo &amp;&amp; bar</code></p>",
        "id": 126650771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485033
    },
    {
        "content": "<p>like, the tuples that are in both</p>",
        "id": 126650774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485037
    },
    {
        "content": "<p>but for that to make sense they must have the same types of tuples</p>",
        "id": 126650780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485054
    },
    {
        "content": "<p>that's not 100% true, I think it only considers the first half of <code>foo</code>...</p>",
        "id": 126650790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485077
    },
    {
        "content": "<p>that is, <code>foo</code> might look like <code>(K, V)</code> but then <code>bar</code> must have type <code>K</code></p>",
        "id": 126650833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485085
    },
    {
        "content": "<p>in this case you have <code>foo</code> with type <code>(R, L)</code> and <code>bar</code> with type <code>(R, P)</code></p>",
        "id": 126650839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485105
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126651025,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485355
    },
    {
        "content": "<p>another thing now</p>",
        "id": 126651027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485361
    },
    {
        "content": "<p>what do you want to do with the dump_enabled part?</p>",
        "id": 126651031,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485369
    },
    {
        "content": "<p>should I make that work? remove something or what's the idea?</p>",
        "id": 126651042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485382
    },
    {
        "content": "<p>and case to make it work, Output struct for subset has Point, Region, Region, now there's no Point anymore</p>",
        "id": 126651110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485485
    },
    {
        "content": "<p>we want to create a new Output struct?</p>",
        "id": 126651112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485493
    },
    {
        "content": "<p>or what was your idea?</p>",
        "id": 126651114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526485500
    },
    {
        "content": "<p>hmm good question =)</p>",
        "id": 126651224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485678
    },
    {
        "content": "<p>I guess add more fields .. ?</p>",
        "id": 126651265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485688
    },
    {
        "content": "<p>it seems ok to add more fields</p>",
        "id": 126651266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485694
    },
    {
        "content": "<p>that is, those are basically meant to be debug data</p>",
        "id": 126651268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485701
    },
    {
        "content": "<p>so if we have a <code>subset_anywhere</code> field or something</p>",
        "id": 126651273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485713
    },
    {
        "content": "<p>and at most one has data</p>",
        "id": 126651275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485715
    },
    {
        "content": "<p>depending on the algorithm</p>",
        "id": 126651278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485718
    },
    {
        "content": "<p>that .. would be ok</p>",
        "id": 126651281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485721
    },
    {
        "content": "<p>probably a good idea to add that so that we can at least dump the results</p>",
        "id": 126651284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485735
    },
    {
        "content": "<p>and get some idea what it is doing :)</p>",
        "id": 126651285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526485738
    },
    {
        "content": "<p>ok</p>",
        "id": 126652307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526487157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's update_degrees ?</p>",
        "id": 126652630,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526487636
    },
    {
        "content": "<p>that also needs a Point</p>",
        "id": 126652632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526487642
    },
    {
        "content": "<p>oh, you can just delete that</p>",
        "id": 126652634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526487648
    },
    {
        "content": "<p>that was tracking the in-degree and out-degree of each region in the subset graph</p>",
        "id": 126652640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526487661
    },
    {
        "content": "<p>(we could probably just delete that whole set of code...)</p>",
        "id": 126652651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526487678
    },
    {
        "content": "<p>but at least I would delete the call in your branch</p>",
        "id": 126652654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526487687
    },
    {
        "content": "<p>er, your module</p>",
        "id": 126652659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526487692
    },
    {
        "content": "<p>hey, back ... ok <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126654061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526489797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/spastorino/borrow-check/commit/18c5b7f63db904c71f61391add1ae50a93a88495\" target=\"_blank\" title=\"https://github.com/spastorino/borrow-check/commit/18c5b7f63db904c71f61391add1ae50a93a88495\">https://github.com/spastorino/borrow-check/commit/18c5b7f63db904c71f61391add1ae50a93a88495</a></p>",
        "id": 126654953,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526490967
    },
    {
        "content": "<p>it's kind of ready I guess</p>",
        "id": 126654960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526490976
    },
    {
        "content": "<p>unsure how to follow</p>",
        "id": 126654970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526490979
    },
    {
        "content": "<p>at least is compiling</p>",
        "id": 126654974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526490983
    },
    {
        "content": "<p>haven't tried anything with it yet</p>",
        "id": 126654976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526490989
    },
    {
        "content": "<p>maybe remove the subset transitive closure ? :)</p>",
        "id": 126655084,
        "sender_full_name": "lqd",
        "timestamp": 1526491109
    },
    {
        "content": "<p>(the part marked with \"remove this\")</p>",
        "id": 126655097,
        "sender_full_name": "lqd",
        "timestamp": 1526491137
    },
    {
        "content": "<p>ouch :)</p>",
        "id": 126655110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491165
    },
    {
        "content": "<p>hehe</p>",
        "id": 126655111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491167
    },
    {
        "content": "<p>I need to code review myself again</p>",
        "id": 126655112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491172
    },
    {
        "content": "<p>fixed</p>",
        "id": 126655208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491312
    },
    {
        "content": "<p>and maybe even better</p>",
        "id": 126655209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491316
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/32\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/32\">https://github.com/rust-lang-nursery/borrow-check/pull/32</a></p>",
        "id": 126655211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span></p>",
        "id": 126655258,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> good job :) did you try to run it on clap to see how fast it runs btw ?</p>",
        "id": 126655287,
        "sender_full_name": "lqd",
        "timestamp": 1526491401
    },
    {
        "content": "<p>haven't done anything yet</p>",
        "id": 126655331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491446
    },
    {
        "content": "<p>just pushed that to start discussing following steps</p>",
        "id": 126655337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526491455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux borrow-check (location_insensitive)]$ cargo run --release -- --skip-tuples inputs/clap-rs/app-parser-\\{\\{impl\\}\\}-add_defaults/ | head\n    Finished release [optimized] target(s) in 0.07s\n     Running `target/release/borrow-check --skip-tuples &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39;`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 117.131s\n[santiago@archlinux borrow-check (location_insensitive)]$ cargo run --release -- --skip-tuples -a LocationInsensitive inputs/clap-rs/app-parser-\\{\\{impl\\}\\}-add_defaults/ | head\n    Finished release [optimized] target(s) in 0.07s\n     Running `target/release/borrow-check --skip-tuples -a LocationInsensitive &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39;`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 2.058s\n</pre></div>",
        "id": 126661470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526499830
    },
    {
        "content": "<p>it's just a bit faster :P</p>",
        "id": 126661515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526499857
    },
    {
        "content": "<p>~57x faster for that example</p>",
        "id": 126661537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526499941
    },
    {
        "content": "<p>unsure how representative it is</p>",
        "id": 126661583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526499973
    },
    {
        "content": "<p>just for comparison how fast does <code>-a timelyopt</code>run on your machine btw ?</p>",
        "id": 126661815,
        "sender_full_name": "lqd",
        "timestamp": 1526500276
    },
    {
        "content": "<p>(Naive — the default slow one is mostly here for \"historical\" purposes :)</p>",
        "id": 126661999,
        "sender_full_name": "lqd",
        "timestamp": 1526500513
    },
    {
        "content": "<p>~8x faster</p>",
        "id": 126662006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526500536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux borrow-check (location_insensitive)]$ cargo run --release -- --skip-tuples -a TimelyOpt inputs/clap-rs/app-parser-\\{\\{impl\\}\\}-add_defaults/ | head\n    Finished release [optimized] target(s) in 0.10s\n     Running `target/release/borrow-check --skip-tuples -a TimelyOpt &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39;`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 16.729s\n</pre></div>",
        "id": 126662007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526500542
    },
    {
        "content": "<p>awesome, thank you</p>",
        "id": 126662063,
        "sender_full_name": "lqd",
        "timestamp": 1526500598
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126662077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526500648
    },
    {
        "content": "<p>also added that info to the PR</p>",
        "id": 126662079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526500653
    },
    {
        "content": "<p>hopefully adding the Invalidates facts allows avoiding even more computation, as this would just be a first quick pass, before timelyopt</p>",
        "id": 126662340,
        "sender_full_name": "lqd",
        "timestamp": 1526500980
    },
    {
        "content": "<p>(I think, at least :)</p>",
        "id": 126662456,
        "sender_full_name": "lqd",
        "timestamp": 1526501155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> nice! So</p>",
        "id": 126663931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503019
    },
    {
        "content": "<p>the next part is the interesting part, really :)</p>",
        "id": 126663943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503029
    },
    {
        "content": "<p>:)</p>",
        "id": 126664021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526503123
    },
    {
        "content": "<p>shoot</p>",
        "id": 126664023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526503127
    },
    {
        "content": "<p>the one funny thing about zulip :)</p>",
        "id": 126664054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503189
    },
    {
        "content": "<p>threads are so good at keeping state</p>",
        "id": 126664055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503192
    },
    {
        "content": "<p>I have to decide what to put in the issue vs here ;)</p>",
        "id": 126664056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503196
    },
    {
        "content": "<p>luckily we can have good links :)</p>",
        "id": 126664103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503213
    },
    {
        "content": "<p>anyway, the idea is roughly what <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> said: that we can use this as a pre-pass to narrow down <em>where</em> we might have errors</p>",
        "id": 126664109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503228
    },
    {
        "content": "<p>specifically, which (L, P) points may be in error</p>",
        "id": 126664115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503246
    },
    {
        "content": "<p>to truly figure that out we need the <code>invalidates</code> facts that <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> has a PR for</p>",
        "id": 126664122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503260
    },
    {
        "content": "<p>but we can do some of the follow-up work even now</p>",
        "id": 126664128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503266
    },
    {
        "content": "<p>just \"as if\" we had them</p>",
        "id": 126664131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503271
    },
    {
        "content": "<p>the idea then is: if we know which (L, P) pairs are potentially in error,</p>",
        "id": 126664137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503287
    },
    {
        "content": "<p>we should be able to narrow down and avoid work</p>",
        "id": 126664167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503322
    },
    {
        "content": "<p>one annoying problem:</p>",
        "id": 126664335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503511
    },
    {
        "content": "<p>without some integration into rustc</p>",
        "id": 126664339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503517
    },
    {
        "content": "<p>it's going to be kinda hard to test this</p>",
        "id": 126664342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> let me first check your PR :)</p>",
        "id": 126664429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503594
    },
    {
        "content": "<p>looks pretty good, found one nit</p>",
        "id": 126664512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503704
    },
    {
        "content": "<p>I have to run to a meeting now</p>",
        "id": 126664670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526503904
    },
    {
        "content": "<p>hey just checked all this, tomorrow morning will try to tackle some of the stuff, did you open an issue?</p>",
        "id": 126677233,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526525185
    },
    {
        "content": "<p>and fixed the PR</p>",
        "id": 126677381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526525546
    },
    {
        "content": "<p>I didn't open a new issue, I think this still falls under the original one</p>",
        "id": 126686385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526544580
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm with time now to tackle this</p>",
        "id": 126700739,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526568468
    },
    {
        "content": "<p>but unsure I follow exactly what's next</p>",
        "id": 126700751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526568478
    },
    {
        "content": "<p>the information of what needs to be done you said is in the issue?</p>",
        "id": 126700804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526568503
    },
    {
        "content": "<p>yeah, sort of — sorry, in rustc meeting right now, but done soon</p>",
        "id": 126701678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526569557
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, I'm around now, are you?</p>",
        "id": 126703156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526571207
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 126704017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back</p>",
        "id": 126704069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572104
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm skimming to see if I left any relevant notes anywhere ;)</p>",
        "id": 126704114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572178
    },
    {
        "content": "<p>we have to kind of decide where in the pipeline to start from</p>",
        "id": 126704117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572184
    },
    {
        "content": "<p>are you clear on the overall flow I have in mind though? (like, how we can use this \"prepass\" to speed up second half?)</p>",
        "id": 126704174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572206
    },
    {
        "content": "<p>so ... what I got is that you want to run this first because a lot of programs may just be ok with it</p>",
        "id": 126704285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572348
    },
    {
        "content": "<p>and if fails</p>",
        "id": 126704287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572351
    },
    {
        "content": "<p>we need finer grained checks like what other algorithms do</p>",
        "id": 126704295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572370
    },
    {
        "content": "<p>I don't know exactly what timely_opt does</p>",
        "id": 126704300,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572378
    },
    {
        "content": "<p>right so</p>",
        "id": 126704323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572417
    },
    {
        "content": "<p>the idea is also that from this first analysis</p>",
        "id": 126704330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572426
    },
    {
        "content": "<p>we can get back a set of (L, P) pairs where there may be errors</p>",
        "id": 126704331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572432
    },
    {
        "content": "<p>i.e., this loan L is invalidated at the point P, but it is still required because of some live references</p>",
        "id": 126704379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572447
    },
    {
        "content": "<p>in fact, we can actually get (R, L, P) pairs I suppose</p>",
        "id": 126704385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572458
    },
    {
        "content": "<p>where R is the region of the live reference</p>",
        "id": 126704388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572463
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>potential_errors(R, L, P) :-\n  invalidated(L, P),\n  requires(R, L),\n  region_live_at(R, P).\n</pre></div>",
        "id": 126704434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572549
    },
    {
        "content": "<p>well with R added you said</p>",
        "id": 126704474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572564
    },
    {
        "content": "<p>so there are two important parts to flesh out (but maybe not in this order):</p>\n<ul>\n<li>how do we go from the results you have to those (R, L, P) errors?<ul>\n<li>this depends on <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span>'s PR basically to generate the <code>Invalidated</code> tuples. As I wrote just now in a different thread, we can actually just build that PR locally and run it if we want to generate the input data, we don't have to wait for it to land.</li>\n</ul>\n</li>\n<li>given those (R, L, P) tuples, how can we use that to speed up the second analysis?<ul>\n<li>my thought was maybe we should play with this, and synthesize some of the tuples oursleves for testing purposes, but I'm not 100% sure</li>\n</ul>\n</li>\n</ul>",
        "id": 126704477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572566
    },
    {
        "content": "<p>yeah that's the basic idea</p>",
        "id": 126704482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572580
    },
    {
        "content": "<p>what does <code>how do we go from the results you have to those (R, L, P) errors?</code> means?</p>",
        "id": 126704574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572688
    },
    {
        "content": "<p>my question is related to my english disability to understand exactly what do I need to do with that</p>",
        "id": 126704591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572722
    },
    {
        "content": "<p><code>given those (R, L, P) tuples, how can we use that to speed up the second analysis?</code> what's the \"second\" analysis?</p>",
        "id": 126704605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572743
    },
    {
        "content": "<p><code>my thought was maybe we should play with this, and synthesize some of the tuples oursleves for testing purposes, but I'm not 100% sure</code> not sure what this means</p>",
        "id": 126704623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572780
    },
    {
        "content": "<p>so 3 questions :)</p>",
        "id": 126704624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526572784
    },
    {
        "content": "<blockquote>\n<p>what does <code>how do we go from the results you have to those (R, L, P) errors?</code> means?</p>\n</blockquote>\n<p>currently your branch computes <code>region_live_at</code> tuples or something like that, right?</p>",
        "id": 126704629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572795
    },
    {
        "content": "<p>all I was saying is: we could try to implement <a href=\"#narrow/stream/122657-wg-nll/subject/location-insensitive.20pre-pass.20(.2329)/near/126704434\" title=\"#narrow/stream/122657-wg-nll/subject/location-insensitive.20pre-pass.20(.2329)/near/126704434\">these rules that you already gave</a></p>",
        "id": 126704694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572823
    },
    {
        "content": "<blockquote>\n<p><code>given those (R, L, P) tuples, how can we use that to speed up the second analysis?</code> what's the \"second\" analysis?</p>\n</blockquote>\n<p>the second one is the \"precise one\" — TimelyOpt. Put another way, your \"location insensitive analysis\" would get integrated into <code>TimelyOpt</code>, not be a distinct thing.</p>",
        "id": 126704704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572857
    },
    {
        "content": "<blockquote>\n<p><code>my thought was maybe we should play with this, and synthesize some of the tuples oursleves for testing purposes, but I'm not 100% sure</code> not sure what this means</p>\n</blockquote>\n<p>OK, so, the pipeline is this:</p>",
        "id": 126704726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572886
    },
    {
        "content": "<ul>\n<li>insensitive analysis takes raw inputs, produces a <code>PotentialError(R, L, P)</code> relation</li>\n</ul>",
        "id": 126704736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572905
    },
    {
        "content": "<ul>\n<li>TimelyOpt takes <code>PotentialError(R, L, P)</code> (plus raw inputs) to produce <code>TrueError(L, P)</code></li>\n</ul>",
        "id": 126704778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572924
    },
    {
        "content": "<p>internally, <code>TrueError(L, P)</code> is based on the same rules as today, but we only have to compute it for those <code>(L, P)</code> pairs for which there are potential errors</p>",
        "id": 126704792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526572963
    },
    {
        "content": "<p>got it</p>",
        "id": 126704874,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526573063
    },
    {
        "content": "<p>makes perfect sense</p>",
        "id": 126704881,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526573071
    },
    {
        "content": "<p>that doesn't mean I won't have more questions, though :P</p>",
        "id": 126704886,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526573084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so specifically I was thinking we should focus on this very last bit</p>",
        "id": 126704917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573147
    },
    {
        "content": "<p>how can we speed up timely-opt given that set of potential errors</p>",
        "id": 126704921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573160
    },
    {
        "content": "<p>I think it is roughly this:</p>",
        "id": 126704964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573171
    },
    {
        "content": "<p>we can use the <code>subset_anywhere</code> and <code>requires_anywhere</code> relations you've already built</p>",
        "id": 126704968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573183
    },
    {
        "content": "<p>to find out which regions <em>might</em> be involved</p>",
        "id": 126704969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573188
    },
    {
        "content": "<p>then we can limit the <code>subset</code> computation to only take place for those regions</p>",
        "id": 126704978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573220
    },
    {
        "content": "<p>maybe we should rename things, e.g. <code>subset_anywhere</code> and <code>subset_somewhere</code></p>",
        "id": 126704985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526573229
    },
    {
        "content": "<p>so you want me to start from this last part?</p>",
        "id": 126705412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526573974
    },
    {
        "content": "<p>if I got it correctly first part shouldn't be hard</p>",
        "id": 126705415,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526573985
    },
    {
        "content": "<p>I mean, I just need to figure out how to add invalidates</p>",
        "id": 126705416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526574001
    },
    {
        "content": "<p>and from there should be easy</p>",
        "id": 126705461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526574006
    },
    {
        "content": "<p>but anyway I can start from that last part</p>",
        "id": 126705469,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526574018
    },
    {
        "content": "<blockquote>\n<p>so you want me to start from this last part?</p>\n</blockquote>\n<p>I think so? but we could look at the first part too, it's just that it needs some <code>Invalidates</code> tuples as inputs</p>",
        "id": 126706211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526575257
    },
    {
        "content": "<p>that part kind of continues the other PR I had</p>",
        "id": 126708401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526577954
    },
    {
        "content": "<p>which just added the fields</p>",
        "id": 126708403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526577957
    },
    {
        "content": "<p>but yeah, I guess we would need a proper invalidates input file</p>",
        "id": 126708455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526577983
    },
    {
        "content": "<p>you said that I can get that from Reed's PR, right?</p>",
        "id": 126708458,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526577992
    },
    {
        "content": "<p>we can yes</p>",
        "id": 126708478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578035
    },
    {
        "content": "<p>if you do a local build</p>",
        "id": 126708480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578038
    },
    {
        "content": "<p>we need a test too</p>",
        "id": 126708482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578040
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/32\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/32\">https://github.com/rust-lang-nursery/polonius/pull/32</a> done!</p>",
        "id": 126708679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526578266
    },
    {
        "content": "<p>merged</p>",
        "id": 126708866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578479
    },
    {
        "content": "<p>so do you know what to do next?</p>",
        "id": 126709196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578844
    },
    {
        "content": "<p>yes</p>",
        "id": 126709225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526578907
    },
    {
        "content": "<p>going to start now</p>",
        "id": 126709230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526578920
    },
    {
        "content": "<p>ok. I'm not sure <em>I</em> know what you are going to do but I'm excited to see =)</p>",
        "id": 126709296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526578969
    },
    {
        "content": "<p>it's a surprise</p>",
        "id": 126709451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579153
    },
    {
        "content": "<p>:P</p>",
        "id": 126709453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579154
    },
    {
        "content": "<p>that you will figure out right now because I have a question</p>",
        "id": 126709505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579174
    },
    {
        "content": "<p>lol</p>",
        "id": 126709506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                // potential_errors(R, L, P) :-\n                //   invalidated(L, P),\n                //   requires(R, L),\n                //   region_live_at(R, P).\n</pre></div>",
        "id": 126709507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579180
    },
    {
        "content": "<p>isn't that equals to ...</p>",
        "id": 126709513,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                // potential_errors(R, L, P) :-\n                //   invalidated(L, P),\n                //   borrow_live_at(L, P)\n</pre></div>",
        "id": 126709526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579218
    },
    {
        "content": "<p>I know it lacks the R</p>",
        "id": 126709531,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579225
    },
    {
        "content": "<p>now I wonder if we should discard R from borrow_live_at</p>",
        "id": 126709545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579249
    },
    {
        "content": "<p>that looks equivalent, yes</p>",
        "id": 126709709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579406
    },
    {
        "content": "<p>I'm not sure if we need the <code>R</code></p>",
        "id": 126709722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579415
    },
    {
        "content": "<p>we can start without it</p>",
        "id": 126709725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579417
    },
    {
        "content": "<p>ok</p>",
        "id": 126709731,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579424
    },
    {
        "content": "<p>originally I just had in mind to narrow down to a set of (L, P) pairs</p>",
        "id": 126709732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579426
    },
    {
        "content": "<p>or even just <em>loans</em></p>",
        "id": 126709733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579430
    },
    {
        "content": "<p>but both seem useful:</p>",
        "id": 126709745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579445
    },
    {
        "content": "<p>e.g., we only need the information for the loan L for those points on the path from the entry to P</p>",
        "id": 126709755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579460
    },
    {
        "content": "<p>but maybe we just start by narrowing down to gather facts for a specific loan</p>",
        "id": 126709769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579474
    },
    {
        "content": "<p>we could actually test that independently pretty easily</p>",
        "id": 126709774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579480
    },
    {
        "content": "<p>invalidated or invalidates?</p>",
        "id": 126709851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579531
    },
    {
        "content": "<p>have seen both terms used</p>",
        "id": 126709854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579536
    },
    {
        "content": "<p>I think <code>invalidates</code> — I feel like we mostly use present tense :)</p>",
        "id": 126709882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579585
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126709899,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579617
    },
    {
        "content": "<p>another question, why borrow_live_at lives outside of if dump_enabled?</p>",
        "id": 126709981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579690
    },
    {
        "content": "<p>maybe I added it in the wrong place <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 126709987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579701
    },
    {
        "content": "<p>?</p>",
        "id": 126709988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579702
    },
    {
        "content": "<p>checking</p>",
        "id": 126709993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579706
    },
    {
        "content": "<p>well in naive algorithm happens the same</p>",
        "id": 126710005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579730
    },
    {
        "content": "<p>it was just copied and pasted</p>",
        "id": 126710010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579739
    },
    {
        "content": "<p>unsure if that's fine or should all be inside of dump_enabled</p>",
        "id": 126710017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579751
    },
    {
        "content": "<blockquote>\n<p>another question, why borrow_live_at lives outside of if dump_enabled?</p>\n</blockquote>\n<p>do you mean, if <code>dump_enabled</code> is false, then when do we still compute <code>borrow_live_at</code>  ?</p>",
        "id": 126710136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579862
    },
    {
        "content": "<p>yes</p>",
        "id": 126710201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579906
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L161-L174\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L161-L174\">https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L161-L174</a></p>",
        "id": 126710202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579907
    },
    {
        "content": "<p>if so, the reason is because — in the absence of <code>invalidates</code> facts — that was the \"final output\" from the analysis</p>",
        "id": 126710207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579911
    },
    {
        "content": "<p>is outside the if dump_enabled</p>",
        "id": 126710208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579913
    },
    {
        "content": "<p>which we then fed to the borrow checker</p>",
        "id": 126710212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579916
    },
    {
        "content": "<p>once we add the <code>invalidates</code> though, we should be able to change that</p>",
        "id": 126710223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579928
    },
    {
        "content": "<p>so it is just an 'internal detail'</p>",
        "id": 126710226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579931
    },
    {
        "content": "<p>and we want to return invalidates?</p>",
        "id": 126710239,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579947
    },
    {
        "content": "<p>and the final output is rather the <code>(L, P)</code> pairs</p>",
        "id": 126710242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579951
    },
    {
        "content": "<p>no, <code>invalidates</code> is an input</p>",
        "id": 126710256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579958
    },
    {
        "content": "<p>telling us which loan is invalidated where</p>",
        "id": 126710259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579961
    },
    {
        "content": "<p>the <em>output</em> is the set of loans which are invalidated but <em>still required</em></p>",
        "id": 126710262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579973
    },
    {
        "content": "<p>yep, I'm not sure how the output of this thing is used</p>",
        "id": 126710265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526579976
    },
    {
        "content": "<p>(<code>borrow_live_at</code> tells us which loans are <em>still required</em> and where)</p>",
        "id": 126710270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579985
    },
    {
        "content": "<p>so it's basically the intersection of <code>invalidates</code> and <code>borrow_live_at</code>)</p>",
        "id": 126710275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526579993
    },
    {
        "content": "<p>when I've said <code>and we want to return invalidates?</code> I meant we want to return potential_errors?</p>",
        "id": 126710478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526580222
    },
    {
        "content": "<p>so that's basically what timely_opt will use</p>",
        "id": 126710590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526580358
    },
    {
        "content": "<blockquote>\n<p>when I've said <code>and we want to return invalidates?</code> I meant we want to return potential_errors?</p>\n</blockquote>\n<p>right</p>",
        "id": 126710660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526580404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34\">https://github.com/rust-lang-nursery/polonius/pull/34</a></p>",
        "id": 126711237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581177
    },
    {
        "content": "<p>to start discussion again</p>",
        "id": 126711240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581181
    },
    {
        "content": "<p>need to check this but I like to push soon</p>",
        "id": 126711241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581191
    },
    {
        "content": "<p>(in a call just now)</p>",
        "id": 126711277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526581203
    },
    {
        "content": "<p>(the <code>potential_errors(L, P) :- invalidates(L, P), borrow_live_at(L, P).</code> is interesting because we can probably use a <code>semijoin</code> there)</p>",
        "id": 126711738,
        "sender_full_name": "lqd",
        "timestamp": 1526581819
    },
    {
        "content": "<p>doh, I forgot to fix that</p>",
        "id": 126711759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581898
    },
    {
        "content": "<p>a join is \"wrong\"</p>",
        "id": 126711761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581906
    },
    {
        "content": "<p>it's an intersection what we need there</p>",
        "id": 126711764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581921
    },
    {
        "content": "<p>going to check differential-dataflow API to check how to do an intersection</p>",
        "id": 126711810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526581951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe something like <code>invalidates.semijoin(&amp;borrow_live_at)</code></p>",
        "id": 126711982,
        "sender_full_name": "lqd",
        "timestamp": 1526582169
    },
    {
        "content": "<p>semijoin is intersection?</p>",
        "id": 126711999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526582199
    },
    {
        "content": "<p>where is that more or less explained?</p>",
        "id": 126712004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526582207
    },
    {
        "content": "<p>it's a bit like filter IIRC (bear in mind I'm a beginner in this too)</p>",
        "id": 126712023,
        "sender_full_name": "lqd",
        "timestamp": 1526582228
    },
    {
        "content": "<p><a href=\"https://docs.rs/differential-dataflow/0.5.0/differential_dataflow/operators/join/trait.Join.html#tymethod.semijoin\" target=\"_blank\" title=\"https://docs.rs/differential-dataflow/0.5.0/differential_dataflow/operators/join/trait.Join.html#tymethod.semijoin\">https://docs.rs/differential-dataflow/0.5.0/differential_dataflow/operators/join/trait.Join.html#tymethod.semijoin</a></p>",
        "id": 126712035,
        "sender_full_name": "lqd",
        "timestamp": 1526582248
    },
    {
        "content": "<p>the thing is that uses a K and I have a pair</p>",
        "id": 126712121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526582353
    },
    {
        "content": "<p>I would need to semijoin against the first element then reverse the pairs to semijoin against the second element and reverse again to return</p>",
        "id": 126712135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526582384
    },
    {
        "content": "<blockquote>\n<p>semijoin is intersection?</p>\n</blockquote>\n<p>yes</p>",
        "id": 126712646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526583089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but it receives just one key</p>",
        "id": 126712782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583257
    },
    {
        "content": "<p>I guess I need to do what I've mentioned then</p>",
        "id": 126712790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583273
    },
    {
        "content": "<blockquote>\n<p>I would need to semijoin against the first element then reverse the pairs to semijoin against the second element and reverse again to return</p>\n</blockquote>\n<p><span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span></p>",
        "id": 126712798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583302
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but it receives just one key</p>\n</blockquote>\n<p>well, it is sort of filter + intersection :) that is, you start out with a set of of type <code>(K, V)</code> and you semijoin with another set of type <code>K</code>; you get at the end all the <code>(K, V)</code> pairs where the keys appeared in both</p>",
        "id": 126712988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526583563
    },
    {
        "content": "<p>probably, yes, or we could potentially reorder the arguments :) but as a general rule of thumb, <code>map</code> is pretty cheap</p>",
        "id": 126713058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526583629
    },
    {
        "content": "<p>ok</p>",
        "id": 126713180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583778
    },
    {
        "content": "<p>thought there was a simpler way to do it</p>",
        "id": 126713190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                let potential_errors = borrow_live_at\n                    .semijoin(&amp;invalidates.map(|(l, _p)| l))\n                    .map(|(l, p)| (p, l))\n                    .semijoin(&amp;invalidates.map(|(_l, p)| p))\n                    .map(|(p, l)| (l, p))\n                    .distinct_total();\n</pre></div>",
        "id": 126713363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526583974
    },
    {
        "content": "<p>that's the way I can think of doing it</p>",
        "id": 126713464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526584104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm a bit confused by your Pr</p>",
        "id": 126720449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594193
    },
    {
        "content": "<p>well, by that snippet you quoted right there, acutally</p>",
        "id": 126720452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594204
    },
    {
        "content": "<p><code>borrow_live_at</code> has what type? doesn't it have the type <code>(L, P)</code></p>",
        "id": 126720459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594222
    },
    {
        "content": "<p><em>oh</em> I think I see</p>",
        "id": 126720465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594245
    },
    {
        "content": "<p>yah that's not right :P</p>",
        "id": 126720466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594249
    },
    {
        "content": "<p>I think we want to compute basically <code>invalidates intersect borrow_live_at</code></p>",
        "id": 126720468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594263
    },
    {
        "content": "<p>you probably want to do:</p>",
        "id": 126720469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>borrow_live_at.map(|(l, p)| ((l, p), ()))\n  .semijoin(&amp;invalidates)\n  .distinct_total()\n</pre></div>",
        "id": 126720470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594269
    },
    {
        "content": "<p>the first map is the key :)</p>",
        "id": 126720512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594313
    },
    {
        "content": "<p>introducing the dummy <code>()</code> type means that the \"key\" you are intersecting on is the <code>(l, p)</code> pair</p>",
        "id": 126720514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594327
    },
    {
        "content": "<p>there should probably be a helper for that, blame <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> :)</p>",
        "id": 126720515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594339
    },
    {
        "content": "<p>(or, I don't know, maybe there is...)</p>",
        "id": 126720522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594352
    },
    {
        "content": "<p>oh, I've tried something very similar but not that</p>",
        "id": 126720577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526594406
    },
    {
        "content": "<p>did <code>borrow_live_at.map(|(l, p)| ((l, p)))</code></p>",
        "id": 126720589,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526594419
    },
    {
        "content": "<p>ah</p>",
        "id": 126720592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594423
    },
    {
        "content": "<p>but you need a value, now I see :)</p>",
        "id": 126720597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526594433
    },
    {
        "content": "<p>re: testing, it is hard to test the location-insensitive analysis in isolation</p>",
        "id": 126720599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594435
    },
    {
        "content": "<p>because it produces a different set of tuples from the location-sensitive one</p>",
        "id": 126720602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594441
    },
    {
        "content": "<p>so we can't compare them against each other</p>",
        "id": 126720603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594444
    },
    {
        "content": "<p>but if we add the <em>invalidates</em> facts</p>",
        "id": 126720606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594447
    },
    {
        "content": "<p>that is different</p>",
        "id": 126720608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594449
    },
    {
        "content": "<p>since now we shoudl be producing just the set of errors</p>",
        "id": 126720610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594458
    },
    {
        "content": "<p>and that should be a relatively small set we can inspect by hand</p>",
        "id": 126720613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594464
    },
    {
        "content": "<p>anyway, I gotta run now</p>",
        "id": 126720620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594485
    },
    {
        "content": "<p>I think what we're going to want to do next is to kind of integrate the location-insensitive and the timely-opt into one, as I was trying to describe earlier</p>",
        "id": 126720624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594515
    },
    {
        "content": "<p>roughly the idea is this:</p>",
        "id": 126720625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594517
    },
    {
        "content": "<p>actually, I'll note this part in github</p>",
        "id": 126720679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594569
    },
    {
        "content": "<p>never mind, that was a bit trickier than I thought</p>",
        "id": 126720751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594737
    },
    {
        "content": "<p>I wrote <a href=\"https://github.com/rust-lang-nursery/polonius/issues/29#issuecomment-390028969\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/29#issuecomment-390028969\">something</a> but not much</p>",
        "id": 126720752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526594739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> don't remember what was expected for get_default but the example does not compile</p>",
        "id": 126729171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526612086
    },
    {
        "content": "<p>anyway generated the facts, have the invalidates.facts in particular</p>",
        "id": 126729226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526612273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm here</p>",
        "id": 126747854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648484
    },
    {
        "content": "<p>so</p>",
        "id": 126747855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648485
    },
    {
        "content": "<p>first get_default doesn't compile, I guess that was the expected result</p>",
        "id": 126747869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648518
    },
    {
        "content": "<p>anyway I got the invalidates.facts</p>",
        "id": 126747910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648524
    },
    {
        "content": "<p>have ran examples</p>",
        "id": 126747915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648528
    },
    {
        "content": "<p>we would need to check that everything is correct I guess :)</p>",
        "id": 126747938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648574
    },
    {
        "content": "<p>where are those formats explained?</p>",
        "id": 126747957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648590
    },
    {
        "content": "<p>and also ... should I use Reed's new example with it's inputs or get_default?</p>",
        "id": 126748127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648856
    },
    {
        "content": "<blockquote>\n<p>first get_default doesn't compile, I guess that was the expected result</p>\n</blockquote>\n<p>yes, it is</p>",
        "id": 126748132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526648869
    },
    {
        "content": "<blockquote>\n<p>and also ... should I use Reed's new example with it's inputs or get_default?</p>\n</blockquote>\n<p>I think we should continue with <code>get_default</code> first</p>",
        "id": 126748171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526648885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&quot;Mid(bb5[1])&quot;   &quot;bw1&quot;\n</pre></div>",
        "id": 126748177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648889
    },
    {
        "content": "<p>the format is just one tuple per line, separated by tabs</p>",
        "id": 126748182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526648902
    },
    {
        "content": "<p>I'm getting just that for ok function of get_default</p>",
        "id": 126748196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648919
    },
    {
        "content": "<p>which relation is that?</p>",
        "id": 126748205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526648939
    },
    {
        "content": "<p>unsure what do you mean</p>",
        "id": 126748228,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526648971
    },
    {
        "content": "<p>where is that output coming from? :)</p>",
        "id": 126748241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526648998
    },
    {
        "content": "<p>ok function of <a href=\"http://get_default.rs\" target=\"_blank\" title=\"http://get_default.rs\">get_default.rs</a></p>",
        "id": 126748295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649010
    },
    {
        "content": "<p>let me paste the code</p>",
        "id": 126748296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">ok</span><span class=\"p\">(</span><span class=\"n\">map</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// Just AST errors here</span>\n<span class=\"w\">                </span><span class=\"c1\">//~^ ERROR borrowed as immutable (Ast)</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126748307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649032
    },
    {
        "content": "<p>would be nice to have the mir dump around for when you run the stuff</p>",
        "id": 126748329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649056
    },
    {
        "content": "<p>I'm generating it, otherwise I have no idea what bb5 is</p>",
        "id": 126748351,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649078
    },
    {
        "content": "<p>:)</p>",
        "id": 126748353,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649080
    },
    {
        "content": "<p>what is bw1?</p>",
        "id": 126748376,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that is \"loan 1\"</p>",
        "id": 126748640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649392
    },
    {
        "content": "<p>in the compiler, we still call that <code>Borrow</code></p>",
        "id": 126748644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649398
    },
    {
        "content": "<p>and the <code>Debug</code> impl prints <code>bw</code></p>",
        "id": 126748647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649402
    },
    {
        "content": "<p>ok :)</p>",
        "id": 126748650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649411
    },
    {
        "content": "<p>so basically you have to look at the <code>-Zmir-dump</code> to correlate</p>",
        "id": 126748652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649414
    },
    {
        "content": "<p>yes</p>",
        "id": 126748654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649420
    },
    {
        "content": "<p>will do later</p>",
        "id": 126748657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649424
    },
    {
        "content": "<p>but that is telling you that bb5[1], whatever that is, has <code>bw1</code> in scope (or maybe it is the error?)</p>",
        "id": 126748669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649436
    },
    {
        "content": "<p>I'm still not sure what output you are showing me</p>",
        "id": 126748674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649439
    },
    {
        "content": "<p>today is a day a bit more complicated than usual</p>",
        "id": 126748675,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649440
    },
    {
        "content": "<p>I gues I have to look at your brancvh</p>",
        "id": 126748678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649442
    },
    {
        "content": "<p>yeah sorry chatting also with @pnkfelix (as you can probably see :)</p>",
        "id": 126748687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649452
    },
    {
        "content": "<p>so I'm a bit lagged</p>",
        "id": 126748689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649454
    },
    {
        "content": "<p>no worries</p>",
        "id": 126748699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649462
    },
    {
        "content": "<p>this output did come from your branch, right?</p>",
        "id": 126748752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649495
    },
    {
        "content": "<p>the thing I'm showing is the content of invalidates.facts when ran using Reed's branch for the function ok of the <a href=\"http://get_default.rs\" target=\"_blank\" title=\"http://get_default.rs\">get_default.rs</a></p>",
        "id": 126748758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649504
    },
    {
        "content": "<blockquote>\n<p>the thing I'm showing is the content of invalidates.facts when ran using Reed's branch for the function ok of the <a href=\"http://get_default.rs\" target=\"_blank\" title=\"http://get_default.rs\">get_default.rs</a></p>\n</blockquote>\n<p>ah ok</p>",
        "id": 126748762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649511
    },
    {
        "content": "<p>so that is saying:</p>",
        "id": 126748764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649517
    },
    {
        "content": "<p>sorry for not clarifying that</p>",
        "id": 126748765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649518
    },
    {
        "content": "<p>at that point</p>",
        "id": 126748767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649519
    },
    {
        "content": "<p>the loan <code>bw1</code> is invalidated</p>",
        "id": 126748773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649527
    },
    {
        "content": "<p>yep</p>",
        "id": 126748776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649532
    },
    {
        "content": "<p>what I think would be a good goal now, on your branch,</p>",
        "id": 126748778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649534
    },
    {
        "content": "<p>is to combine that with <code>region_live_at</code></p>",
        "id": 126748779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649538
    },
    {
        "content": "<p>er,</p>",
        "id": 126748781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649541
    },
    {
        "content": "<p><code>borrow_live_at</code></p>",
        "id": 126748785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649543
    },
    {
        "content": "<p>basically the intersection of those</p>",
        "id": 126748791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649550
    },
    {
        "content": "<p>is the set of <em>errors</em></p>",
        "id": 126748792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649553
    },
    {
        "content": "<p>and we expect some errors in this example</p>",
        "id": 126748800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649566
    },
    {
        "content": "<p>yep, all that is already done</p>",
        "id": 126748802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649570
    },
    {
        "content": "<p>I need just to check if it's correct by hand</p>",
        "id": 126748807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649579
    },
    {
        "content": "<p>given we said that tests are a bit complex to build</p>",
        "id": 126748814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34\">https://github.com/rust-lang-nursery/polonius/pull/34</a></p>",
        "id": 126748896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649662
    },
    {
        "content": "<p>sorry for not giving more context, I assumed you were following the talk we had yesterday</p>",
        "id": 126748917,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649706
    },
    {
        "content": "<p>which is impossible given the amount of talks you're having at the same time :P</p>",
        "id": 126748966,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649726
    },
    {
        "content": "<p>how many open threads do you have? :P</p>",
        "id": 126748975,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649734
    },
    {
        "content": "<p>ah right :) we did that already</p>",
        "id": 126748977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649737
    },
    {
        "content": "<blockquote>\n<p>how many open threads do you have? :P</p>\n</blockquote>\n<p>don't ask</p>",
        "id": 126748983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649743
    },
    {
        "content": "<p>ok so yeah that looks right</p>",
        "id": 126748989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649748
    },
    {
        "content": "<p>hehehe</p>",
        "id": 126748993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649751
    },
    {
        "content": "<p>one thing</p>",
        "id": 126749005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649776
    },
    {
        "content": "<p>yeah, it wasn't that much empathetic to go just straight to a very particular part of the code :)</p>",
        "id": 126749011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649783
    },
    {
        "content": "<p>I think we should alter the output</p>",
        "id": 126749017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649790
    },
    {
        "content": "<p>that is, the <code>Output</code> struct</p>",
        "id": 126749022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649798
    },
    {
        "content": "<p>ok</p>",
        "id": 126749023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649798
    },
    {
        "content": "<p>tell me</p>",
        "id": 126749026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649799
    },
    {
        "content": "<p>so that this new result is the \"main\" result</p>",
        "id": 126749029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649802
    },
    {
        "content": "<p>and <code>borrow_live_at</code> etc is only populated when we have the 'verbose' output</p>",
        "id": 126749041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649818
    },
    {
        "content": "<p>er, hmm, not sure, it depends how we want to go</p>",
        "id": 126749056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649828
    },
    {
        "content": "<p>anyway we should at least make sure to dump <code>potential_errors</code></p>",
        "id": 126749074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649837
    },
    {
        "content": "<p>I'm already doing that</p>",
        "id": 126749075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649837
    },
    {
        "content": "<p>ok</p>",
        "id": 126749079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649839
    },
    {
        "content": "<p>I couldn't quite tell from a quick glance</p>",
        "id": 126749123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649845
    },
    {
        "content": "<p>or I didn't follow you correctly :P</p>",
        "id": 126749126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649848
    },
    {
        "content": "<p>anyway however we do it, can you get the results of <code>potential_errors</code> for the <code>get_default</code> example?</p>",
        "id": 126749134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526649863
    },
    {
        "content": "<p>so ...</p>",
        "id": 126749152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649894
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-9ff1367614ea2af6c399ce0c2500c4d4R38\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-9ff1367614ea2af6c399ce0c2500c4d4R38\">https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-9ff1367614ea2af6c399ce0c2500c4d4R38</a></p>",
        "id": 126749153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649895
    },
    {
        "content": "<p>that's Output modified</p>",
        "id": 126749174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649911
    },
    {
        "content": "<p>here <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R169\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R169\">https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R169</a>, I've moved borrow_live_at to when it's verbose</p>",
        "id": 126749192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649943
    },
    {
        "content": "<p>and here <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R185\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R185\">https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R185</a> we are returning potential_errors</p>",
        "id": 126749244,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526649964
    },
    {
        "content": "<p>you're right, I need to do something else in output/mod.rs</p>",
        "id": 126749477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650212
    },
    {
        "content": "<p>it dumps borrow_live_at</p>",
        "id": 126749478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650219
    },
    {
        "content": "<p>I need to dump that for all the algorithms but for insensitive one</p>",
        "id": 126749484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650242
    },
    {
        "content": "<p>I wonder if it's really time to merge the insensitive one with <code>timely-opt</code></p>",
        "id": 126749521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650292
    },
    {
        "content": "<p>I can't decide between trying to keep it as its own thing</p>",
        "id": 126749525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650298
    },
    {
        "content": "<p>and merging</p>",
        "id": 126749535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650304
    },
    {
        "content": "<p>that said</p>",
        "id": 126749538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe you should make a new branch and just integrate the \"errors\" into the other algorithsm</p>",
        "id": 126749545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650318
    },
    {
        "content": "<p>modify <code>Output</code> then so that this is the \"main output\" for everything</p>",
        "id": 126749591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650327
    },
    {
        "content": "<p>or, maybe not a separate branch</p>",
        "id": 126749596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650331
    },
    {
        "content": "<p>but point is, you can do the same thing for all algorithms</p>",
        "id": 126749601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650337
    },
    {
        "content": "<p>yeah, makes sense</p>",
        "id": 126749613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650358
    },
    {
        "content": "<p>anyway, I wanted to run this real quick, looking how to enabled dump from command line</p>",
        "id": 126749643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650389
    },
    {
        "content": "<p>ok, found it</p>",
        "id": 126749743,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650464
    },
    {
        "content": "<p>in this case potential_errors is empty for both ok and err fns</p>",
        "id": 126749764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650495
    },
    {
        "content": "<p>I'd need to check all this properly</p>",
        "id": 126749790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650527
    },
    {
        "content": "<blockquote>\n<p>in this case potential_errors is empty for both ok and err fns</p>\n</blockquote>\n<p>hmm :)</p>",
        "id": 126749879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650614
    },
    {
        "content": "<p>yeah it seems like we need to Dump All The tuples then</p>",
        "id": 126749888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650638
    },
    {
        "content": "<p>to try and see what's up w/ that</p>",
        "id": 126749889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650641
    },
    {
        "content": "<p>yeah I did that, dumped all</p>",
        "id": 126749907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650655
    },
    {
        "content": "<p>but yeah, I need to take a look more carefully</p>",
        "id": 126749914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650665
    },
    {
        "content": "<p>ok, yeah, it's kind of annoying to process the raw data</p>",
        "id": 126749987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650738
    },
    {
        "content": "<p>you sort of have to cross-reference with the mir-dump</p>",
        "id": 126749989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650743
    },
    {
        "content": "<p>this is why I wanted to connect it to rustc :)</p>",
        "id": 126749994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650747
    },
    {
        "content": "<p>:)</p>",
        "id": 126749998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650753
    },
    {
        "content": "<p>in a bit maybe we can look it over together...</p>",
        "id": 126750000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650758
    },
    {
        "content": "<p>ok</p>",
        "id": 126750003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650767
    },
    {
        "content": "<p>ping me</p>",
        "id": 126750004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650769
    },
    {
        "content": "<p>I'm not sure I have time today</p>",
        "id": 126750010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650774
    },
    {
        "content": "<p>may have some spare minutes between meetings and stuff but ping me</p>",
        "id": 126750018,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526650791
    },
    {
        "content": "<p>k</p>",
        "id": 126750079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650809
    },
    {
        "content": "<p>just checking, we're still not 100% sure on how to best integrate the location-insensitive analysis results into the sensitive analysis right ?</p>",
        "id": 126927454,
        "sender_full_name": "lqd",
        "timestamp": 1527001228
    },
    {
        "content": "<p>well I'm not sure the <em>best</em> way. I can think of a few simple ways.</p>",
        "id": 126927470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001247
    },
    {
        "content": "<p>simplest possible way: does clap pass?</p>",
        "id": 126927473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001252
    },
    {
        "content": "<p>if so, we can just use it as a binary test :)</p>",
        "id": 126927475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001256
    },
    {
        "content": "<p>that's what I was thinking at first :)</p>",
        "id": 126927493,
        "sender_full_name": "lqd",
        "timestamp": 1527001273
    },
    {
        "content": "<p>next simplest way: take the set of loans where potential errors occur; use that to limit the <code>requires</code></p>",
        "id": 126927494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001273
    },
    {
        "content": "<p>next next simplest way: take the set of regions \"linked\" to those borrows, limit <code>subset</code> to those regions</p>",
        "id": 126927509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001292
    },
    {
        "content": "<p>that was roughly what I had in mind</p>",
        "id": 126927512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001297
    },
    {
        "content": "<p>clap does pass the loc-insensitive quite fast</p>",
        "id": 126927524,
        "sender_full_name": "lqd",
        "timestamp": 1527001317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> how fast? :)</p>",
        "id": 126927709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001478
    },
    {
        "content": "<p>you'll be pleased I think</p>",
        "id": 126927720,
        "sender_full_name": "lqd",
        "timestamp": 1527001489
    },
    {
        "content": "<p>I hope at least</p>",
        "id": 126927729,
        "sender_full_name": "lqd",
        "timestamp": 1527001503
    },
    {
        "content": "<p>datafrog_opt on this machine is around 5.5s on clap, loc-insensitive is 700-800ms</p>",
        "id": 126927753,
        "sender_full_name": "lqd",
        "timestamp": 1527001533
    },
    {
        "content": "<p>awesome!</p>",
        "id": 126927812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001587
    },
    {
        "content": "<p>I should have mentioned this yesterday sorry, I thought we wouldn't only want to check if any potential errors were found before rerunning the sensitive analysis</p>",
        "id": 126927841,
        "sender_full_name": "lqd",
        "timestamp": 1527001657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> well, it seems fine, though we still have to account for \"universal regions\" in the analysis, which we haven't, but that should be easy enough</p>",
        "id": 126927901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001728
    },
    {
        "content": "<p>and I think clap would still pass</p>",
        "id": 126927905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001732
    },
    {
        "content": "<p>it's also why I/we were wondering with Frank whether clap was a representative worst case</p>",
        "id": 126927906,
        "sender_full_name": "lqd",
        "timestamp": 1527001733
    },
    {
        "content": "<p>probably not</p>",
        "id": 126927919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001750
    },
    {
        "content": "<p>I think we're definitely at the point where the right thing to focus on is rustc integration</p>",
        "id": 126927940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001785
    },
    {
        "content": "<p>which will add overhead of its own that must be sanded down</p>",
        "id": 126927946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001796
    },
    {
        "content": "<p>account for universal regions in the loc-insensitive analysis ?</p>",
        "id": 126927951,
        "sender_full_name": "lqd",
        "timestamp": 1527001799
    },
    {
        "content": "<p>just in general</p>",
        "id": 126928010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001839
    },
    {
        "content": "<p>we're not accounting for them</p>",
        "id": 126928014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001842
    },
    {
        "content": "<p>in particular:</p>",
        "id": 126928016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001846
    },
    {
        "content": "<p>(ofc datafrog_opt with leapjoin is &lt;4.4s)</p>",
        "id": 126928020,
        "sender_full_name": "lqd",
        "timestamp": 1527001852
    },
    {
        "content": "<p>in an example like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we would compute a <code>subset('a, 'b)</code> relation, which we can use to report an error. But we have to use this to inform the set of \"potential errors\". I've not really thought much about how to do this but shouldn't be very hard.</p>",
        "id": 126928036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001890
    },
    {
        "content": "<p>(right now all the errors we are reporting have to do with violated loans)</p>",
        "id": 126928040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001911
    },
    {
        "content": "<p>(but that's not the only kind of error we have the responsibility to detect)</p>",
        "id": 126928048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001922
    },
    {
        "content": "<p>oh ok, I guess the diagnostics work will have an impact on the analysis, to get the data it needs</p>",
        "id": 126928101,
        "sender_full_name": "lqd",
        "timestamp": 1527001963
    },
    {
        "content": "<p>(that said, it's a fundamentally similar analysis)</p>",
        "id": 126928106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001971
    },
    {
        "content": "<p>you .. might even be able to model universal regions as loans? (that never get killed) .. at one point I was doing that, I forget why I stopped. Anyway.</p>",
        "id": 126928121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527002002
    },
    {
        "content": "<p>that said, datafrog_opt doesn't produce error points yet, so it's still not \"realistic\" -- want me to do that ?</p>",
        "id": 126928303,
        "sender_full_name": "lqd",
        "timestamp": 1527002223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> yes</p>",
        "id": 126928471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527002409
    },
    {
        "content": "<p>that goes with what <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were saying about how it would be useful to make \"errors\" the <em>primary</em> output for all analyses (and <code>borrow_live_at</code> just a \"detail\" you see with <code>-v</code>)</p>",
        "id": 126928476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527002435
    },
    {
        "content": "<p>I'm going to do all this if you're fine</p>",
        "id": 126928653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527002701
    },
    {
        "content": "<p>need to read all that you've said :)</p>",
        "id": 126928665,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527002709
    },
    {
        "content": "<p>need to do some minor things unrelated to Rust before also</p>",
        "id": 126928673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527002720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> \"all this\" being the switch to \"errors\" being the primary output you mean ? (I was almost done producing errors in datafrog_opt)</p>",
        "id": 126929071,
        "sender_full_name": "lqd",
        "timestamp": 1527003125
    },
    {
        "content": "<p>@lqd yes, and other things :)</p>",
        "id": 126933581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527009268
    },
    {
        "content": "<p>but great if you already did :)</p>",
        "id": 126933590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527009291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw producing the errors will slow down clap as we now have to do a big join with <code>borrow_live_at</code>. I'm not too worried because 1) leapjoin should help with these a lot (and I will try it out just after posting the PR in a couple minutes) 2) it's not strictly necessary to maintain this relation, except for the verbose mode where we display it, otherwise we can fold it into <code>errors</code> 3) for the precise clap benchmark, the loc-insensitive pass will make it that this one never runs (or limit its work, as we talked about)</p>",
        "id": 126933591,
        "sender_full_name": "lqd",
        "timestamp": 1527009292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> no worries we can work on it together <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> I will not modify the dumped output and so on</p>",
        "id": 126933625,
        "sender_full_name": "lqd",
        "timestamp": 1527009334
    },
    {
        "content": "<p>can producing errors only be done if there is an error? would that speed anything up?</p>",
        "id": 126933632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527009350
    },
    {
        "content": "<p>or do \"the other things\" :)</p>",
        "id": 126933635,
        "sender_full_name": "lqd",
        "timestamp": 1527009351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> there's something planned in that vein if I understand correctly what you mean: a fast pass that tries to find \"potential errors\" to either bypass the more complete analysis or at least filter the data for which it will run</p>",
        "id": 126933804,
        "sender_full_name": "lqd",
        "timestamp": 1527009534
    },
    {
        "content": "<p>Isn't that the \"location-insensitive pre-pass\"? I was mostly wondering if the useful error details (the 3 point notes, etc) could be skipped until theres a known error, following the same ideas</p>",
        "id": 126933944,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527009697
    },
    {
        "content": "<p>I hope so :) it's a bit unclear at the moment how the diagnostics work currently being done will impact the analyses in polonius, the data they will require, but it should be hopefully possible to avoid doing extra work</p>",
        "id": 126934157,
        "sender_full_name": "lqd",
        "timestamp": 1527009971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> good observations. Seems fine.</p>",
        "id": 126934214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527010026
    }
]