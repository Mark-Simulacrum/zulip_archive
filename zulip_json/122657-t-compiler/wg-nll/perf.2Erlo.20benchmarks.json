[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you think it's time to enable more of the currently disabled for NLL crates on perf? We've lowered the max to ~300% now, and I think you have further fixes in the works. I'm uncertain whether it'd be helpful to enable a few more -- what do you think?</p>",
        "id": 128834738,
        "sender_full_name": "simulacrum",
        "timestamp": 1530286675
    },
    {
        "content": "<p>can't hurt, I suppose =) I'm still only profiling a subset of what we have, but having a better \"overall picture\" would be good</p>",
        "id": 128838954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530291852
    },
    {
        "content": "<p>btw, I guess some of those perf runs may have completed by now? I guess I should just test, eh?</p>",
        "id": 128839441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530292536
    },
    {
        "content": "<p>it'd be so nice if the queue were visible :)</p>",
        "id": 128839442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530292541
    },
    {
        "content": "<p>I don't think they have</p>",
        "id": 128839494,
        "sender_full_name": "simulacrum",
        "timestamp": 1530292581
    },
    {
        "content": "<p>looks like no</p>",
        "id": 128839515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530292629
    },
    {
        "content": "<p>They should start in around an hour and then it'll be ~6 hours before they all finish</p>",
        "id": 128839629,
        "sender_full_name": "simulacrum",
        "timestamp": 1530292776
    },
    {
        "content": "<p>heh, ok</p>",
        "id": 128839643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530292790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> New project for you: <code>tuple-stress    17,715,830,784.00   2,917,195,841,536.00    16,466.60%</code></p>",
        "id": 128926033,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463113
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 128926036,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463129
    },
    {
        "content": "<p>lol</p>",
        "id": 128926044,
        "sender_full_name": "lqd",
        "timestamp": 1530463166
    },
    {
        "content": "<p>80x worse time-wise</p>",
        "id": 128926045,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463179
    },
    {
        "content": "<p>IIRC it's a very synthetic test, not extracted from real code ?</p>",
        "id": 128926112,
        "sender_full_name": "lqd",
        "timestamp": 1530463215
    },
    {
        "content": "<p>Yes, but I've seen cases of similar code in std library and elsewhere</p>",
        "id": 128926117,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463232
    },
    {
        "content": "<p>(less extreme -- but still similar)</p>",
        "id": 128926118,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463239
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 128926124,
        "sender_full_name": "lqd",
        "timestamp": 1530463276
    },
    {
        "content": "<p>it's a program with ~65k lines of tuples; the type of the static is  <code>[(i32, (f64, f64, f64)); 0xffff]</code></p>",
        "id": 128926169,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463345
    },
    {
        "content": "<p>But technically I don't see why NLL would need to spend so much time on verifying this since there's no particular behavior that looks relevant to NLL (i.e., it's all constant data)</p>",
        "id": 128926175,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463395
    },
    {
        "content": "<p>at least this one doesn't OOM :) I'll try and see what callgrind says — that is to say the valgrind run will take at least 800x longer</p>",
        "id": 128926180,
        "sender_full_name": "lqd",
        "timestamp": 1530463435
    },
    {
        "content": "<p>it's probably doing the same thing over and over again</p>",
        "id": 128926221,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463474
    },
    {
        "content": "<p>yeah, and not caching it</p>",
        "id": 128926226,
        "sender_full_name": "lqd",
        "timestamp": 1530463522
    },
    {
        "content": "<p>IIRC it was the case for the previous outlier (coercions?) which was at 1000% until niko's caching PR landed</p>",
        "id": 128926232,
        "sender_full_name": "lqd",
        "timestamp": 1530463540
    },
    {
        "content": "<p>The good news is that the other benchmark I enabled (<a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>) is only 123% of clean so much better</p>",
        "id": 128926330,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463727
    },
    {
        "content": "<p>were they disabled because of performance problems at the time ?</p>",
        "id": 128926337,
        "sender_full_name": "lqd",
        "timestamp": 1530463775
    },
    {
        "content": "<p>good news indeed for <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>, that's not so bad :)</p>",
        "id": 128926389,
        "sender_full_name": "lqd",
        "timestamp": 1530463861
    },
    {
        "content": "<p>Somewhat, I think so</p>",
        "id": 128926396,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463914
    },
    {
        "content": "<p>Before we enable NLL by default we'd want to make sure it's performant enough across the suite of benchmarks we do have though I think</p>",
        "id": 128926438,
        "sender_full_name": "simulacrum",
        "timestamp": 1530463943
    },
    {
        "content": "<p>yeah, and thanks for looking at those on perf.rlo</p>",
        "id": 128926449,
        "sender_full_name": "lqd",
        "timestamp": 1530464024
    },
    {
        "content": "<p>for those following at home, <code>tuple-stress</code> took around 3 hours in callgrind :) and it seems 97% is in liveness (of which the work seems to be split in between a couple different<code>rustc::ty::fold::TypeFoldable</code> visit fns, and a closure inside MIR borrowck's <code>add_liveness_constraints</code>)</p>",
        "id": 128967168,
        "sender_full_name": "lqd",
        "timestamp": 1530542296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> huh. which SHA are you benchmarking?</p>",
        "id": 128970684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530545877
    },
    {
        "content": "<p>this morning's 45935640f058405c95c96308f3acfd5ac1535698</p>",
        "id": 128970755,
        "sender_full_name": "lqd",
        "timestamp": 1530545915
    },
    {
        "content": "<p>ok, I wonder if <a href=\"https://github.com/rust-lang/rust/pull/51896\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51896\">https://github.com/rust-lang/rust/pull/51896</a> will help</p>",
        "id": 128970924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546105
    },
    {
        "content": "<p>I'm curious though why it's spending so much time in folding</p>",
        "id": 128970927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546117
    },
    {
        "content": "<p>perhaps you mean a different liveness code than I meant :)</p>",
        "id": 128970931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546121
    },
    {
        "content": "<p>ah, I guess you mean the \"liveness constraint\" code</p>",
        "id": 128970982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546137
    },
    {
        "content": "<p>I should do a quick perf profile</p>",
        "id": 128970990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546141
    },
    {
        "content": "<p>yeah somewhere in liveness indeed ;)</p>",
        "id": 128970999,
        "sender_full_name": "lqd",
        "timestamp": 1530546157
    },
    {
        "content": "<p>I rewrote region inference over the weekend ;) hoping to open a PR soon, I've <em>just</em> gotten it compiling (haven't even run the tests yet)... should be faster though, I would <strong>think</strong>...</p>",
        "id": 128971023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546200
    },
    {
        "content": "<p>now computing the SCCs instead of just iterating to fixed point</p>",
        "id": 128971034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546218
    },
    {
        "content": "<p>sounds fast just talking about it :)</p>",
        "id": 128971080,
        "sender_full_name": "lqd",
        "timestamp": 1530546243
    },
    {
        "content": "<p>do you want me to check with the dirty list PR ? (or do you already have a build with it?)</p>",
        "id": 128971124,
        "sender_full_name": "lqd",
        "timestamp": 1530546283
    },
    {
        "content": "<p>(I can look at the profile again to be more precise about the bits of liveness I was casually mentioning)</p>",
        "id": 128971172,
        "sender_full_name": "lqd",
        "timestamp": 1530546345
    },
    {
        "content": "<p>I don't think the PR will help</p>",
        "id": 128971252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546382
    },
    {
        "content": "<p>if you have the profile around though</p>",
        "id": 128971261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546396
    },
    {
        "content": "<p>and can cite the actual fn names</p>",
        "id": 128971263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546399
    },
    {
        "content": "<p>that might be helpful</p>",
        "id": 128971268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546401
    },
    {
        "content": "<p>its a bit mangled + it's a closure but this is the 12% of time spent in liveness <a href=\"/user_uploads/4715/PhNjhyjOABUJDx7uZwh0uAX1/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PhNjhyjOABUJDx7uZwh0uAX1/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/PhNjhyjOABUJDx7uZwh0uAX1/pasted_image.png\"></a></div>",
        "id": 128971378,
        "sender_full_name": "lqd",
        "timestamp": 1530546507
    },
    {
        "content": "<p>yep, ok. Curious.</p>",
        "id": 128971393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546532
    },
    {
        "content": "<p>the rest are all in TypeFoldable</p>",
        "id": 128971396,
        "sender_full_name": "lqd",
        "timestamp": 1530546538
    },
    {
        "content": "<p>(so I'm guessing visits of some kind, <code>visit_with</code> and <code>super_visit_with</code>)</p>",
        "id": 128971432,
        "sender_full_name": "lqd",
        "timestamp": 1530546570
    },
    {
        "content": "<p>could be the canonicalization logic</p>",
        "id": 128971511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546614
    },
    {
        "content": "<p>lots of stuff builds on type-foldable really</p>",
        "id": 128971515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546619
    },
    {
        "content": "<p>I guess I can do a profile of my own readily enough</p>",
        "id": 128971519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546629
    },
    {
        "content": "<p>btw did you see this weekend's other \"interesting discovery\" of the memory consumption in the html5ever benchmark ?</p>",
        "id": 128971558,
        "sender_full_name": "lqd",
        "timestamp": 1530546685
    },
    {
        "content": "<p>I saw that there was a lot of memory consumption</p>",
        "id": 128971655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546757
    },
    {
        "content": "<p>did we track down cause at all?</p>",
        "id": 128971657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546761
    },
    {
        "content": "<p>I don't think so no</p>",
        "id": 128971662,
        "sender_full_name": "lqd",
        "timestamp": 1530546774
    },
    {
        "content": "<p>ok</p>",
        "id": 128971697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530546837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> in case you are curious, this is the region inference work I was talking about <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a></p>",
        "id": 128973982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530549333
    },
    {
        "content": "<p>narrator \"lqd was, in fact, curious\"</p>",
        "id": 128974935,
        "sender_full_name": "lqd",
        "timestamp": 1530550361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do we want/need updated benchmark versions for 1) clap-rs ? (cargo check NLL on clap master almost is 3x faster than the perf.rlo version), 2) inflate ? (cargo check NLL on inflate master is almost 25x faster than the perf.rlo version) — and if so, what to call them since perf.rlo has switched from having the crate's version in the benchmark name ?</p>",
        "id": 128986053,
        "sender_full_name": "lqd",
        "timestamp": 1530563986
    },
    {
        "content": "<p>Generally this is a unanswered question -- we might want to add them, but our capacity for adding new benchmarks to perf.rlo is somewhat limited</p>",
        "id": 128986142,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564073
    },
    {
        "content": "<p>We're already regularly behind 3-5 commits and probably have many holes in history because of how slow the server is</p>",
        "id": 128986150,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564092
    },
    {
        "content": "<p>unfortunate</p>",
        "id": 128986214,
        "sender_full_name": "lqd",
        "timestamp": 1530564142
    },
    {
        "content": "<p>I think the long-term future here is shifting to some sort of architecture were we push this work off to multiple machines (but keep a single benchmark on a single machine)</p>",
        "id": 128986280,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564242
    },
    {
        "content": "<p>in any case, if/when we decide we need and can afford them, I can take care of it so you don't have to do it all ;)</p>",
        "id": 128986322,
        "sender_full_name": "lqd",
        "timestamp": 1530564257
    },
    {
        "content": "<p>Sure, yeah -- clap and inflate should go fairly quickly if we want to add them I imagine</p>",
        "id": 128986331,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564277
    },
    {
        "content": "<p>yeah IIRC adam (anp) wanted/needed a similar setup for lolbench</p>",
        "id": 128986343,
        "sender_full_name": "lqd",
        "timestamp": 1530564297
    },
    {
        "content": "<p>I'm not sure if it's worth the benefits, though, nor am I sure what the benefits <em>are</em></p>",
        "id": 128986344,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564298
    },
    {
        "content": "<p>I assume it was to track a more modern version so that it would be more up-to-date with what people would experience compiling them, rather than versions exercising particular slow paths in the compiler at the time we added the benchmarks</p>",
        "id": 128986550,
        "sender_full_name": "lqd",
        "timestamp": 1530564507
    },
    {
        "content": "<p>but yeah indeed, the cost / reward seems high for these cases and maybe in general — in any case, I have PRs ready if/when we want those 2, just let me know</p>",
        "id": 128986558,
        "sender_full_name": "lqd",
        "timestamp": 1530564531
    },
    {
        "content": "<p>sure, yeah -- it's a question though of how often we should then \"update\", sort of, I think</p>",
        "id": 128986561,
        "sender_full_name": "simulacrum",
        "timestamp": 1530564540
    },
    {
        "content": "<p>I wonder if \"transient\" benchmarks would do the job</p>",
        "id": 128986588,
        "sender_full_name": "lqd",
        "timestamp": 1530564573
    },
    {
        "content": "<p>not as data points to track how we improve on a specific rev</p>",
        "id": 128986596,
        "sender_full_name": "lqd",
        "timestamp": 1530564589
    },
    {
        "content": "<p>but just to say \"the current version of clap, which changes all the time, how often TBD, now compiles this fast\"</p>",
        "id": 128986650,
        "sender_full_name": "lqd",
        "timestamp": 1530564623
    },
    {
        "content": "<p>I guess it's a bit more telemetry-like than perf.rlo like</p>",
        "id": 128986694,
        "sender_full_name": "lqd",
        "timestamp": 1530564707
    },
    {
        "content": "<p>(also I forgot mw's specific needs/issues so this might be stupid :)</p>",
        "id": 128986776,
        "sender_full_name": "lqd",
        "timestamp": 1530564813
    },
    {
        "content": "<p>Hm, that might be an idea -- instead of benchmarking everything every commit have a \"core set\" and then do the others for every, say, 20th commit or something</p>",
        "id": 128987256,
        "sender_full_name": "simulacrum",
        "timestamp": 1530565335
    },
    {
        "content": "<p>and for \"tracking\" how these crate users experience compiling, we could just remember some points of interest, eg the data at Rust releases: rust version + benchmark crate version</p>",
        "id": 128987361,
        "sender_full_name": "lqd",
        "timestamp": 1530565453
    },
    {
        "content": "<p>I think that for the purpose of judging whether NLL is \"fast enough to ship\", it would be very useful to have numbers for modern crates</p>",
        "id": 128987447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530565563
    },
    {
        "content": "<p>i.e, things representative of user's \"soon to be\" lived experiences</p>",
        "id": 128987464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530565570
    },
    {
        "content": "<p>sure -- we already have <a href=\"https://perf.rust-lang.org/dashboard.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/dashboard.html\">https://perf.rust-lang.org/dashboard.html</a> which is sort of like that</p>",
        "id": 128987466,
        "sender_full_name": "simulacrum",
        "timestamp": 1530565572
    },
    {
        "content": "<p>Anyway, @lqd -- I'd feel okay updating clap/inflate either in-place (with a rename) or by adding a new clap-sdfsdf where that would be the commit sha prefix</p>",
        "id": 128987484,
        "sender_full_name": "simulacrum",
        "timestamp": 1530565612
    },
    {
        "content": "<p>(yeah, I'm guessing the dashboard was an answer to me ;)</p>",
        "id": 128987496,
        "sender_full_name": "lqd",
        "timestamp": 1530565628
    },
    {
        "content": "<p>yes</p>",
        "id": 128987515,
        "sender_full_name": "simulacrum",
        "timestamp": 1530565665
    },
    {
        "content": "<p>I'll let you and niko decide whichever way you feel is best, for whichever of the crates we track, and I will do it (as you both know what we need and the tradeoffs involved)</p>",
        "id": 128987615,
        "sender_full_name": "lqd",
        "timestamp": 1530565788
    },
    {
        "content": "<p>(btw I think I showed this mostly to mw and haven't had the chance to continue since: an old-ish slow bad mockup I was working on to try and make the perf result \"summarized\" <a href=\"https://lqd.github.io/perf/report.html\" target=\"_blank\" title=\"https://lqd.github.io/perf/report.html\">https://lqd.github.io/perf/report.html</a> — it doesn't yet achieve this goal as I'd need to generate more of a useful summary so that you wouldn't need to glance at the results, but it's a starting point at least)</p>",
        "id": 128988145,
        "sender_full_name": "lqd",
        "timestamp": 1530566502
    },
    {
        "content": "<p>Looks quite interesting!</p>",
        "id": 128988418,
        "sender_full_name": "simulacrum",
        "timestamp": 1530566791
    },
    {
        "content": "<p>oh the SCC PR results are not available yet (<a href=\"https://github.com/rust-lang/rust/pull/51987#issuecomment-401876530\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987#issuecomment-401876530\">https://github.com/rust-lang/rust/pull/51987#issuecomment-401876530</a>) dit it fail maybe ? or just taking more time than expected probably</p>",
        "id": 129006174,
        "sender_full_name": "lqd",
        "timestamp": 1530599580
    },
    {
        "content": "<p>I think something's messed up, yeah.</p>",
        "id": 129012142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530609543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would you rather we stop tracking the old versions of clap/inflate by updating the benchmark crates to a new version, or have the modern versions as additional benchmarks ? (clap is not _that old_ so the added cost of tracking each commit might be prohibitive vs us regularly checking a set of crates ? that is, until we have lighterweight tracking like we talked about yesterday)</p>",
        "id": 129013681,
        "sender_full_name": "lqd",
        "timestamp": 1530612267
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I <em>think</em> that on perf I would ideally want to track both</p>",
        "id": 129029755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530631843
    },
    {
        "content": "<p>it seems good to have stress tests</p>",
        "id": 129029766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530631850
    },
    {
        "content": "<p>ok then I'll prepare a PR adding those 2 -- but just out of curiosity, does having a set of benchmarks we track \"casually\" (and not commit by commit) be interesting to you ? (to have both precise tracking on a _bespoke set_ <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> of benchmarks for every commit + try builds, and a lighter weight different set, which could be to have an idea of users' \"soon to be lived\" experience)</p>",
        "id": 129030066,
        "sender_full_name": "lqd",
        "timestamp": 1530632135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ok looking at tuple-stress it seems like ~50% of the time is spent looking at the types of <strong>live</strong> variables; an additional 20% is spent iterating and doing other stuff around liveness.</p>",
        "id": 129035022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530636997
    },
    {
        "content": "<p>so it may be that there are a few related sources to improve</p>",
        "id": 129035026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637007
    },
    {
        "content": "<p>(the silver lining is I think polonius handles itself shakespearly with <code>tuple-stress</code>)</p>",
        "id": 129035031,
        "sender_full_name": "lqd",
        "timestamp": 1530637016
    },
    {
        "content": "<p>well, all of this liveness code still executes even with polonius</p>",
        "id": 129035039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637032
    },
    {
        "content": "<p>lol</p>",
        "id": 129035042,
        "sender_full_name": "lqd",
        "timestamp": 1530637040
    },
    {
        "content": "<p>though maybe someday we'll rewrite it all to be datafrog based</p>",
        "id": 129035043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637042
    },
    {
        "content": "<p>I retract my previous statement!</p>",
        "id": 129035049,
        "sender_full_name": "lqd",
        "timestamp": 1530637049
    },
    {
        "content": "<p>then let's improve it until/if we do  switch to <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> :)</p>",
        "id": 129035106,
        "sender_full_name": "lqd",
        "timestamp": 1530637111
    },
    {
        "content": "<p>actually almost all of the optimization we've been doing would still benefit <code>-Zpolonius</code></p>",
        "id": 129035215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637237
    },
    {
        "content": "<p>the SCC stuff is the one exception I think</p>",
        "id": 129035221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637241
    },
    {
        "content": "<p>at least as currently architected</p>",
        "id": 129035228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637252
    },
    {
        "content": "<p>since we're in a constant array, do those live variables have mostly the same type ?</p>",
        "id": 129035243,
        "sender_full_name": "lqd",
        "timestamp": 1530637264
    },
    {
        "content": "<p>the visit_ty should be mostly the same from point to point (but can't tell if caching here would be interesting)</p>",
        "id": 129035542,
        "sender_full_name": "lqd",
        "timestamp": 1530637575
    },
    {
        "content": "<p>I suspect that none of the types involved even have regions</p>",
        "id": 129035738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637803
    },
    {
        "content": "<p>I was going to open an issue to experiment with a small tweak that checks the type flags and skips the <code>for_each_free_region</code> call entirely in that case</p>",
        "id": 129035794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637827
    },
    {
        "content": "<p>is there an easy way to check if the types have regions in the mir output ? I do have part of it handy</p>",
        "id": 129035835,
        "sender_full_name": "lqd",
        "timestamp": 1530637903
    },
    {
        "content": "<p>not sure but I am doing a run now that should dump it w/ a <code>debug!</code></p>",
        "id": 129035899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530637984
    },
    {
        "content": "<p>(maybe the regions are dumped in the comments I mean ;)</p>",
        "id": 129035903,
        "sender_full_name": "lqd",
        "timestamp": 1530637988
    },
    {
        "content": "<p>oh good</p>",
        "id": 129035909,
        "sender_full_name": "lqd",
        "timestamp": 1530638002
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/52027\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52027\">https://github.com/rust-lang/rust/issues/52027</a></p>",
        "id": 129040195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530642614
    },
    {
        "content": "<p>yay :) we can talk about it a today's meeting but I'll glady do it</p>",
        "id": 129040363,
        "sender_full_name": "lqd",
        "timestamp": 1530642770
    },
    {
        "content": "<p>probably a good idea to get it done. It's a simple change. I suspect we'll want to do more afterwards, though.</p>",
        "id": 129040458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530642851
    },
    {
        "content": "<p>this is about 50% but we need something like 90% :)</p>",
        "id": 129040464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530642857
    },
    {
        "content": "<p>sure :)</p>",
        "id": 129040939,
        "sender_full_name": "lqd",
        "timestamp": 1530643361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> this is a good follow-up re: tuple-stress =) <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">https://github.com/rust-lang/rust/issues/52034</a></p>",
        "id": 129050250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530655503
    },
    {
        "content": "<p>nice :D</p>",
        "id": 129050825,
        "sender_full_name": "lqd",
        "timestamp": 1530656346
    },
    {
        "content": "<p>I opened the PR for the previous tuple-stress issue, will r? ping when it passes travis if I'm still awake</p>",
        "id": 129051406,
        "sender_full_name": "lqd",
        "timestamp": 1530657231
    },
    {
        "content": "<p>that is, <a href=\"https://github.com/rust-lang/rust/pull/52037\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52037\">https://github.com/rust-lang/rust/pull/52037</a></p>",
        "id": 129054822,
        "sender_full_name": "lqd",
        "timestamp": 1530662674
    },
    {
        "content": "<p>and matthew has found why webrender and piston-image didn't compile <a href=\"https://github.com/rust-lang/rust/issues/51372#issuecomment-402306996\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51372#issuecomment-402306996\">https://github.com/rust-lang/rust/issues/51372#issuecomment-402306996</a></p>",
        "id": 129055442,
        "sender_full_name": "lqd",
        "timestamp": 1530663675
    },
    {
        "content": "<p>hmm, didn't futures have issues as well ? answer: doesn't seem like it no — so, good news again :)</p>",
        "id": 129055708,
        "sender_full_name": "lqd",
        "timestamp": 1530664113
    },
    {
        "content": "<p>(apart from the CPU cost of <code>tuple-stress</code>and the memory cost of <code>html5ever</code>)</p>",
        "id": 129055856,
        "sender_full_name": "lqd",
        "timestamp": 1530664398
    },
    {
        "content": "<p>nll benchmarks for servo crates are in: 130/120% worse</p>",
        "id": 129056881,
        "sender_full_name": "simulacrum",
        "timestamp": 1530666419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I updated 52037 to remove <code>super_ty</code></p>",
        "id": 129068423,
        "sender_full_name": "lqd",
        "timestamp": 1530687161
    },
    {
        "content": "<p>great! r+</p>",
        "id": 129074043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530695407
    },
    {
        "content": "<p>oh but this new #52034 issue has already been requested by another contributor, too bad but I guess I'll focus on triaging the crater results when they are available</p>",
        "id": 129077920,
        "sender_full_name": "lqd",
        "timestamp": 1530701681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw I'm going to want a perf run for <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a> — I just started the bors try though</p>",
        "id": 129083778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530709299
    },
    {
        "content": "<p>ok I got a new profile of clap-rs with the SCC stuff in place</p>",
        "id": 129084568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530710180
    },
    {
        "content": "<p>solving regions is now 3% of MIR borrowck (and hence a <em>very</em> small percentage of total time)</p>",
        "id": 129084610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530710267
    },
    {
        "content": "<p>type-checking remains 25% of MIR borrowck, split amongst:</p>\n<ul>\n<li>liveness (7%), which I suspect <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span>'s work on <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">https://github.com/rust-lang/rust/issues/52034</a> will help</li>\n<li>typeck-mir is 12%, of which canonicalizing is 7%</li>\n<li>constraint generation is 5%, mostly adding elements; could maybe be sped up a <em>bit</em> more (I'm currently maintaining two copies of the information, for more precision with error reporting)</li>\n<li>do-dataflow is now 41%, which is kind of astounding<ul>\n<li>this seems like an area where I suspect we can do better, though I'm not sure how yet :)</li>\n<li>maybe sparse bit sets</li>\n</ul>\n</li>\n</ul>",
        "id": 129084993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530710767
    },
    {
        "content": "<p>(regarding dataflow, this <em>does</em> include <span class=\"user-mention\" data-user-id=\"116191\">@Pramod Bisht</span>'s improvements, though iirc they were not especially beneficial to clap-rs)</p>",
        "id": 129086359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712455
    },
    {
        "content": "<p>I should profile another case or two</p>",
        "id": 129086362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712458
    },
    {
        "content": "<p>I need a \"go faster\" emoji response</p>",
        "id": 129086481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530712653
    },
    {
        "content": "<p>interesting; cargo looks similiar-<em>ish</em> but more time in liveness</p>",
        "id": 129086572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712781
    },
    {
        "content": "<p>#52034 seems more imp't than ever</p>",
        "id": 129086576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712791
    },
    {
        "content": "<p>oh, hmm, interesting</p>",
        "id": 129086664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712848
    },
    {
        "content": "<p>looking more closely at <code>Liveness::defs_uses</code>, I see more room for improvement</p>",
        "id": 129086677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712864
    },
    {
        "content": "<p>although... huh. I thought that njn optimized this</p>",
        "id": 129086685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712887
    },
    {
        "content": "<p>ah, <a href=\"https://github.com/rust-lang/rust/pull/51870\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51870\">https://github.com/rust-lang/rust/pull/51870</a> didn't land yet</p>",
        "id": 129086693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530712907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Gankro's version of Ferris, Sonic-like \"gotta go fast\" comes to mind :)</p>",
        "id": 129087024,
        "sender_full_name": "lqd",
        "timestamp": 1530713364
    },
    {
        "content": "<p>\\+ it looks like liveness is also linked to the html5ever OOM, from njn's comments on the issue</p>",
        "id": 129087872,
        "sender_full_name": "lqd",
        "timestamp": 1530714389
    },
    {
        "content": "<p>njn's 51870 has now landed <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 129094721,
        "sender_full_name": "lqd",
        "timestamp": 1530722856
    },
    {
        "content": "<p>woot. Now if only the perf server would finish <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a> :)</p>",
        "id": 129095314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530723813
    },
    {
        "content": "<p>I doubt it will happen today though</p>",
        "id": 129095316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530723816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Working on a queue now :)</p>",
        "id": 129095581,
        "sender_full_name": "simulacrum",
        "timestamp": 1530724195
    },
    {
        "content": "<p>what do you mean by a queue?</p>",
        "id": 129095666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530724310
    },
    {
        "content": "<p>i.e. you can see what order, and probably estimate when, things will be benchmarked</p>",
        "id": 129095709,
        "sender_full_name": "simulacrum",
        "timestamp": 1530724327
    },
    {
        "content": "<p>nice :)</p>",
        "id": 129095715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530724341
    },
    {
        "content": "<p>it will also mean soon-ish that people can request try builds for benchmarking, possibly with a priority</p>",
        "id": 129095720,
        "sender_full_name": "simulacrum",
        "timestamp": 1530724352
    },
    {
        "content": "<p>will these perf build requests possibly be using \"craterbot\" ?</p>",
        "id": 129095816,
        "sender_full_name": "lqd",
        "timestamp": 1530724557
    },
    {
        "content": "<p>could, but maybe just the same account -- it'll for now be a different service for sure</p>",
        "id": 129095890,
        "sender_full_name": "simulacrum",
        "timestamp": 1530724667
    },
    {
        "content": "<p>was it recently enabling some NLL benchmarks which caused problems for perf.rlo ?</p>",
        "id": 129098942,
        "sender_full_name": "lqd",
        "timestamp": 1530729726
    },
    {
        "content": "<p>it doesn't help, but perf's turnaround times have always been long-ish</p>",
        "id": 129099115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530730061
    },
    {
        "content": "<p>I wonder if we could commission a second machine</p>",
        "id": 129099118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530730073
    },
    {
        "content": "<p>(to be used for new benchmarks)</p>",
        "id": 129099121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530730078
    },
    {
        "content": "<p>obviously for any one benchmark we probably prefer to keep a consistent piece of hardware</p>",
        "id": 129099165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530730087
    },
    {
        "content": "<p>We can -- however, that's rather expensive on most cloud platforms because we need dedicated hardware</p>",
        "id": 129099826,
        "sender_full_name": "simulacrum",
        "timestamp": 1530731100
    },
    {
        "content": "<p>We're moving in the direction where that's easier on the code part, too</p>",
        "id": 129099839,
        "sender_full_name": "simulacrum",
        "timestamp": 1530731138
    },
    {
        "content": "<p>I thought perf stuff was running on an actual computer under somebody-or-other's desk?</p>",
        "id": 129099976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530731388
    },
    {
        "content": "<p>It is</p>",
        "id": 129100276,
        "sender_full_name": "simulacrum",
        "timestamp": 1530731819
    },
    {
        "content": "<p>so presumably we could buy a second one</p>",
        "id": 129100298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530731868
    },
    {
        "content": "<p>but anyway</p>",
        "id": 129100299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530731870
    },
    {
        "content": "<p>or we can get NLL up to snuff so we don't have to run 2 rounds of profiles :)</p>",
        "id": 129100318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530731883
    },
    {
        "content": "<p>Sure, though I don't know that NLL costs us all that much today. Now, eliminating Servo... that's an hour of savings.</p>",
        "id": 129100406,
        "sender_full_name": "simulacrum",
        "timestamp": 1530732005
    },
    {
        "content": "<p>(IIRC)</p>",
        "id": 129100411,
        "sender_full_name": "simulacrum",
        "timestamp": 1530732011
    },
    {
        "content": "<p>:)</p>",
        "id": 129100462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530732101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Queue is live, <a href=\"https://perf.rust-lang.org/status.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a> (bottom of page)</p>",
        "id": 129102783,
        "sender_full_name": "simulacrum",
        "timestamp": 1530735411
    },
    {
        "content": "<p>Haven't worked on the on-demand adding of try commits but it's coming</p>",
        "id": 129102797,
        "sender_full_name": "simulacrum",
        "timestamp": 1530735431
    },
    {
        "content": "<p>nice :) (perf seems offline now but I'm sure it <em>is</em> nice)</p>",
        "id": 129103395,
        "sender_full_name": "lqd",
        "timestamp": 1530736255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  DNS is changing over -- if you flush local cache that might be enough</p>",
        "id": 129103408,
        "sender_full_name": "simulacrum",
        "timestamp": 1530736271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that is very exciting!</p>",
        "id": 129103427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736320
    },
    {
        "content": "<p>I guess I have to figure out how to flush my DNS :)</p>",
        "id": 129103467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736327
    },
    {
        "content": "<p><code>sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder</code> on macOS apparently</p>",
        "id": 129103470,
        "sender_full_name": "simulacrum",
        "timestamp": 1530736355
    },
    {
        "content": "<p>ok, that worked</p>",
        "id": 129103488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736413
    },
    {
        "content": "<p>I see something very ... text-y</p>",
        "id": 129103492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736422
    },
    {
        "content": "<p>but it does include a queue</p>",
        "id": 129103494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736425
    },
    {
        "content": "<p>ah, this is the \"status\" page, ok</p>",
        "id": 129103495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736434
    },
    {
        "content": "<p>what could be nice if it also showed the future \"perf results URL\"</p>",
        "id": 129103546,
        "sender_full_name": "lqd",
        "timestamp": 1530736476
    },
    {
        "content": "<p>oh dear god yes please :)</p>",
        "id": 129103553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736492
    },
    {
        "content": "<p>I take it from this that try commit 8e6d8db2bf93a  is next?</p>",
        "id": 129103566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736507
    },
    {
        "content": "<p>if so, I think that's my SCC PR</p>",
        "id": 129103575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736520
    },
    {
        "content": "<p>which is excited to me :P</p>",
        "id": 129103588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736536
    },
    {
        "content": "<p>how timely</p>",
        "id": 129103591,
        "sender_full_name": "lqd",
        "timestamp": 1530736537
    },
    {
        "content": "<p>runs do take a couple hours right ?</p>",
        "id": 129103653,
        "sender_full_name": "lqd",
        "timestamp": 1530736585
    },
    {
        "content": "<p>Well, you're going to have to adjust your master URL or wait for like 12 more hours but yes</p>",
        "id": 129103655,
        "sender_full_name": "simulacrum",
        "timestamp": 1530736592
    },
    {
        "content": "<p>2.5 hours on average per commit, yes</p>",
        "id": 129103658,
        "sender_full_name": "simulacrum",
        "timestamp": 1530736602
    },
    {
        "content": "<blockquote>\n<p>Well, you're going to have to adjust your master URL or wait for like 12 more hours but yes</p>\n</blockquote>\n<p>yeah, I know</p>",
        "id": 129103663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736615
    },
    {
        "content": "<p>but I think I can compare against more-or-less any recent commit and get useful-ish info</p>",
        "id": 129103680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736625
    },
    {
        "content": "<p>probably should not include njn's latest PR</p>",
        "id": 129103685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530736641
    },
    {
        "content": "<p>ok, <a href=\"https://perf.rust-lang.org/compare.html?start=a739c51d108b1958a1c3e145588035c580e7973a&amp;end=8e6d8db2bf93a7c311c0a7a4cc7e1b4b7a5a5c04&amp;stat=instructions%3Au\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=a739c51d108b1958a1c3e145588035c580e7973a&amp;end=8e6d8db2bf93a7c311c0a7a4cc7e1b4b7a5a5c04&amp;stat=instructions%3Au\">the updated results for the SCC branch are available</a></p>",
        "id": 129109083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746277
    },
    {
        "content": "<p>43% win for inflate :)</p>",
        "id": 129109122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746289
    },
    {
        "content": "<p>the rest kind of looks like noise to me</p>",
        "id": 129109126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746317
    },
    {
        "content": "<p>though I do see a fair amount of red</p>",
        "id": 129109134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746365
    },
    {
        "content": "<p>still seems probably worth it</p>",
        "id": 129109137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746369
    },
    {
        "content": "<p>(there are e.g. comparable swings in the NON-nll build times, which I cannot imagine being affected)</p>",
        "id": 129109140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746392
    },
    {
        "content": "<p>noise is small time-wise anyway</p>",
        "id": 129109195,
        "sender_full_name": "simulacrum",
        "timestamp": 1530746479
    },
    {
        "content": "<p>might be side-effects of me checking on it every couple minutes, honestly</p>",
        "id": 129109197,
        "sender_full_name": "simulacrum",
        "timestamp": 1530746496
    },
    {
        "content": "<p>heh :)</p>",
        "id": 129109237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530746523
    },
    {
        "content": "<p>Fancy in-progress commit status display is in (but, who knows, could break): <a href=\"https://perf.rust-lang.org/status.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a></p>",
        "id": 129115882,
        "sender_full_name": "simulacrum",
        "timestamp": 1530761760
    },
    {
        "content": "<p>I also need to test out the try commit on demand code -- so, basically, go run a try commit :)</p>",
        "id": 129115921,
        "sender_full_name": "simulacrum",
        "timestamp": 1530761779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thought: Stop running NLL benchmarks on anything except check</p>",
        "id": 129152762,
        "sender_full_name": "simulacrum",
        "timestamp": 1530812900
    },
    {
        "content": "<p>I don't see how optimizations or debug can make any difference to NLL times/perf so that seems like a cheap win</p>",
        "id": 129152775,
        "sender_full_name": "simulacrum",
        "timestamp": 1530812928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 129153486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530813679
    },
    {
        "content": "<p>deployed</p>",
        "id": 129154542,
        "sender_full_name": "simulacrum",
        "timestamp": 1530814661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Try build requests are live: <a href=\"https://github.com/rust-lang/rust/pull/52083#issuecomment-402838238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52083#issuecomment-402838238\">https://github.com/rust-lang/rust/pull/52083#issuecomment-402838238</a></p>",
        "id": 129164444,
        "sender_full_name": "simulacrum",
        "timestamp": 1530824765
    },
    {
        "content": "<p>(you should have permissions and I think that wall of comments resolved the quirks, mostly)</p>",
        "id": 129164452,
        "sender_full_name": "simulacrum",
        "timestamp": 1530824784
    },
    {
        "content": "<p>holy macarel</p>",
        "id": 129164525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530824895
    },
    {
        "content": "<p>how do I use it exactly?</p>",
        "id": 129164531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530824899
    },
    {
        "content": "<p>do I still have to schedule a try build?</p>",
        "id": 129164541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530824919
    },
    {
        "content": "<p>or does it handle all of that?</p>",
        "id": 129164543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530824923
    },
    {
        "content": "<p>apparently you schedule a try build, and ask the bot to queue the merge commit that bors answered</p>",
        "id": 129165184,
        "sender_full_name": "lqd",
        "timestamp": 1530825717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> was correct -- you need to wait for the try build to go through in Travis but then you can schedule it with this bot and it'll queue in perf (visible on the status page). Right now it won't let you know when the build is complete, but at least it's a start</p>",
        "id": 129167096,
        "sender_full_name": "simulacrum",
        "timestamp": 1530827893
    },
    {
        "content": "<p><code>@rust-timer build &lt;full commit hash&gt;</code> is the invocation</p>",
        "id": 129167110,
        "sender_full_name": "simulacrum",
        "timestamp": 1530827904
    },
    {
        "content": "<p>very cool</p>",
        "id": 129168322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530829315
    },
    {
        "content": "<p>rustc-guide please :)</p>",
        "id": 129168324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530829318
    },
    {
        "content": "<p>I am hypocritical, I have at least 2 or 3 things I should open PRs for</p>",
        "id": 129168365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530829327
    },
    {
        "content": "<p>/me goes to do that now maybe</p>",
        "id": 129168369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530829332
    },
    {
        "content": "<p>/me mumbles about wanting to add more before doing that</p>",
        "id": 129168395,
        "sender_full_name": "simulacrum",
        "timestamp": 1530829387
    },
    {
        "content": "<p>but yes, I should document it somewhere</p>",
        "id": 129168399,
        "sender_full_name": "simulacrum",
        "timestamp": 1530829395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can we close <a href=\"https://github.com/rust-lang/rust/issues/51372\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51372\">#51372</a> ?</p>",
        "id": 129206386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530889008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Let me enable the relevant benchmarks on perf.r-l.o and then we can make sure they compile, I'll close after that</p>",
        "id": 129209767,
        "sender_full_name": "simulacrum",
        "timestamp": 1530892860
    },
    {
        "content": "<p>Enabled, should appear in the next run I think</p>",
        "id": 129210636,
        "sender_full_name": "simulacrum",
        "timestamp": 1530893823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Both finished successfully so I closed the issue</p>",
        "id": 129224942,
        "sender_full_name": "simulacrum",
        "timestamp": 1530910957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FYI, all benchmarks on perf.rlo are now enabled</p>",
        "id": 129626372,
        "sender_full_name": "simulacrum",
        "timestamp": 1531513674
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/nll-dashboard.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html\">https://perf.rust-lang.org/nll-dashboard.html</a></p>",
        "id": 129626381,
        "sender_full_name": "simulacrum",
        "timestamp": 1531513681
    },
    {
        "content": "<p>5,731.76% <span class=\"emoji emoji-1f635\" title=\"dizzy face\">:dizzy_face:</span></p>",
        "id": 129626610,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1531513835
    },
    {
        "content": "<p>seems like html5ever-opt got worse due to my PR (<a href=\"https://github.com/rust-lang/rust/issues/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51987\">#51987</a>) but then worse again due to some other seemingly unrelated change (<a href=\"https://github.com/rust-lang/rust/issues/52266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52266\">#52266</a>)</p>",
        "id": 129647186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531544661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did I do something <a href=\"https://github.com/rust-lang/rust/pull/52190#issuecomment-405330478\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52190#issuecomment-405330478\">wrong here</a>? I'm trying to enqueue that build</p>",
        "id": 129766828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531764961
    },
    {
        "content": "<p>I don't see it in <a href=\"https://perf.rust-lang.org/status.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/status.html\">the status page</a> though</p>",
        "id": 129766870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531764974
    },
    {
        "content": "<p>hm, it doesn't look like it, let me look at logs</p>",
        "id": 129766887,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765007
    },
    {
        "content": "<p>I'll take care of it once I figure out what the bug is</p>",
        "id": 129767130,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765268
    },
    {
        "content": "<p>Seems like it's probably not you</p>",
        "id": 129767134,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765277
    },
    {
        "content": "<p>hm, okay, no idea what was wrong</p>",
        "id": 129767344,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765558
    },
    {
        "content": "<p>Seems to have resolved itself though so \"great\"</p>",
        "id": 129767387,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765566
    },
    {
        "content": "<p>oh, might be a GH problem <a href=\"https://status.github.com/messages\" target=\"_blank\" title=\"https://status.github.com/messages\">https://status.github.com/messages</a></p>",
        "id": 129767455,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765666
    },
    {
        "content": "<p>while using the playground earlier, the github gists API was very slow as well</p>",
        "id": 129767514,
        "sender_full_name": "lqd",
        "timestamp": 1531765724
    },
    {
        "content": "<p>that's going to be not so great for our bot heavy infra :)</p>",
        "id": 129767651,
        "sender_full_name": "lqd",
        "timestamp": 1531765838
    },
    {
        "content": "<p>Most bots are resilient internally, just not when interacting with humans :/</p>",
        "id": 129767680,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765871
    },
    {
        "content": "<p>i.e perf will mostly work fine without GH I think, it'll go through the existing queue just fine</p>",
        "id": 129767701,
        "sender_full_name": "simulacrum",
        "timestamp": 1531765904
    },
    {
        "content": "<p>Are there issues that I could jump in on to help get the <a href=\"https://perf.rust-lang.org/nll-dashboard.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html\">https://perf.rust-lang.org/nll-dashboard.html</a> to look happier?</p>",
        "id": 129880501,
        "sender_full_name": "Eh2406",
        "timestamp": 1531929972
    },
    {
        "content": "<p>we have one bigger idea for exploring, but I had another thought recently I've been meaning to write-up that might be a bit more targeted...</p>",
        "id": 129880756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531930322
    },
    {
        "content": "<p>Well <a href=\"https://github.com/rust-lang/rust/pull/52250#issuecomment-406015802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52250#issuecomment-406015802\">https://github.com/rust-lang/rust/pull/52250#issuecomment-406015802</a> looks promising!</p>",
        "id": 129886025,
        "sender_full_name": "Eh2406",
        "timestamp": 1531936045
    },
    {
        "content": "<p>Certainly...</p>",
        "id": 129886235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531936282
    },
    {
        "content": "<p>I'm not clear on how fully rebased that is though</p>",
        "id": 129886239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531936290
    },
    {
        "content": "<p>The try builds parent is <a href=\"https://github.com/rust-lang/rust/commit/cd5f5a129fab998a1ee7c72204d093dc475981d1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cd5f5a129fab998a1ee7c72204d093dc475981d1\">https://github.com/rust-lang/rust/commit/cd5f5a129fab998a1ee7c72204d093dc475981d1</a><br>\nand looking at the changes <a href=\"https://github.com/rust-lang/rust/pull/52364\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52364\">https://github.com/rust-lang/rust/pull/52364</a><br>\nmight be a problem?</p>",
        "id": 129886660,
        "sender_full_name": "Eh2406",
        "timestamp": 1531936720
    },
    {
        "content": "<p>hmm, that might PR might screw up my in-progress PR...</p>",
        "id": 129887029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531937083
    },
    {
        "content": "<p>95% of the time in <code>html5ever</code>is because of <a href=\"https://play.rust-lang.org/?gist=4de78cad514bf7c40445e949e0501b88&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=4de78cad514bf7c40445e949e0501b88&amp;version=nightly&amp;mode=debug&amp;edition=2015\">this huge static</a></p>",
        "id": 130214336,
        "sender_full_name": "lqd",
        "timestamp": 1532442343
    },
    {
        "content": "<p>That's quite the static.</p>",
        "id": 130214399,
        "sender_full_name": "davidtwco",
        "timestamp": 1532442389
    },
    {
        "content": "<p>AFAICT it's a phf map of the tokenizer's named entities</p>",
        "id": 130214420,
        "sender_full_name": "lqd",
        "timestamp": 1532442422
    },
    {
        "content": "<p>that was similar to tuple-stress</p>",
        "id": 130214442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442443
    },
    {
        "content": "<p>very</p>",
        "id": 130214446,
        "sender_full_name": "lqd",
        "timestamp": 1532442447
    },
    {
        "content": "<p>except that there are lifetimes -- just <code>'static</code></p>",
        "id": 130214449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442451
    },
    {
        "content": "<p>we could plausibly special case it...</p>",
        "id": 130214450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442457
    },
    {
        "content": "<p>as we were thinking for tuple stress :)</p>",
        "id": 130214459,
        "sender_full_name": "lqd",
        "timestamp": 1532442469
    },
    {
        "content": "<p>this is the thing which was taking 11GB to compile as well, before David's PR</p>",
        "id": 130214470,
        "sender_full_name": "lqd",
        "timestamp": 1532442477
    },
    {
        "content": "<p>There's still too much memory being used even post that-PR though, right?</p>",
        "id": 130214595,
        "sender_full_name": "davidtwco",
        "timestamp": 1532442549
    },
    {
        "content": "<p>2GB IIRC</p>",
        "id": 130214607,
        "sender_full_name": "lqd",
        "timestamp": 1532442561
    },
    {
        "content": "<p>so the main thing is</p>",
        "id": 130214616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442568
    },
    {
        "content": "<p>in the case of html5ever</p>",
        "id": 130214619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442570
    },
    {
        "content": "<p>we.. maybe? don't really need to compute liveness.. all regions are <code>'static</code></p>",
        "id": 130214625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442581
    },
    {
        "content": "<p>or at least we might be able to readily detect that</p>",
        "id": 130214630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442586
    },
    {
        "content": "<p>that also explains why the bit sets were so densely occupied</p>",
        "id": 130214695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442609
    },
    {
        "content": "<p>I was trying to get some logs to see which functions were the most problematic, but probably the ones njn has mentioned before</p>",
        "id": 130215983,
        "sender_full_name": "lqd",
        "timestamp": 1532443797
    },
    {
        "content": "<p>said log gathering is still running, 52GB of liveness logs so far :)</p>",
        "id": 130222982,
        "sender_full_name": "lqd",
        "timestamp": 1532451932
    },
    {
        "content": "<p>niko and santiago have been working around this area before, like 3 weeks ago</p>",
        "id": 130223332,
        "sender_full_name": "lqd",
        "timestamp": 1532452332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could we / would it help if we only <code>push_type_live_constraint</code>d once per (live_local_ty x location), rather than per (live_local x location) <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L90-L93\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L90-L93\">here</a></p>",
        "id": 130231190,
        "sender_full_name": "lqd",
        "timestamp": 1532460092
    },
    {
        "content": "<p>plausibly, depends how many locals there are w/ duplicate types I suppose :)</p>",
        "id": 130231277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460198
    },
    {
        "content": "<p>all of them :3</p>",
        "id": 130231283,
        "sender_full_name": "lqd",
        "timestamp": 1532460207
    },
    {
        "content": "<p>would probably be a relatively easy change to try</p>",
        "id": 130231284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460207
    },
    {
        "content": "<p>I see, I see</p>",
        "id": 130231289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460218
    },
    {
        "content": "<p>in this particular case you mean</p>",
        "id": 130231291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460223
    },
    {
        "content": "<p>I'm just seeing them through the logs so I might be mistaken</p>",
        "id": 130231340,
        "sender_full_name": "lqd",
        "timestamp": 1532460250
    },
    {
        "content": "<p>no I mean seems very plausible actually</p>",
        "id": 130231347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460271
    },
    {
        "content": "<p>particularly for big constants</p>",
        "id": 130231351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460275
    },
    {
        "content": "<p>right</p>",
        "id": 130231353,
        "sender_full_name": "lqd",
        "timestamp": 1532460279
    },
    {
        "content": "<p>where e.g. you are assembling a <code>[Foo; N]</code></p>",
        "id": 130231355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460282
    },
    {
        "content": "<p>there are likely to be about <code>N</code> instances of type <code>Foo</code> =)</p>",
        "id": 130231357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460290
    },
    {
        "content": "<p>well we could just add a little hash set or whatever</p>",
        "id": 130231359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460301
    },
    {
        "content": "<p>here there's around 90k I think, which are all AFAICT tuples of (&amp;str, (u32, u32))</p>",
        "id": 130231373,
        "sender_full_name": "lqd",
        "timestamp": 1532460314
    },
    {
        "content": "<p>and that's per location I think, which might be around 90k as well</p>",
        "id": 130231383,
        "sender_full_name": "lqd",
        "timestamp": 1532460335
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L105\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L105\">here</a> there doesn't seem to be any live locals in those 92K points</p>",
        "id": 130231562,
        "sender_full_name": "lqd",
        "timestamp": 1532460502
    },
    {
        "content": "<p>hmm one problem probably is</p>",
        "id": 130231616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460549
    },
    {
        "content": "<p>each of those tuples has a distinct lifetime in its type</p>",
        "id": 130231620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460554
    },
    {
        "content": "<p>I suspect</p>",
        "id": 130231623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460557
    },
    {
        "content": "<p>do they show up in the logs by any chance (maybe would I need verbose mode) ?</p>",
        "id": 130231723,
        "sender_full_name": "lqd",
        "timestamp": 1532460621
    },
    {
        "content": "<p>that would probably help, yes</p>",
        "id": 130231737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460631
    },
    {
        "content": "<p><code>-Zverbose</code></p>",
        "id": 130231742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532460635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there anything I can do to help y'all investigate html5ever ? tracing / debugging / profiling (I have a callgrind profile) etc ?</p>",
        "id": 130289862,
        "sender_full_name": "lqd",
        "timestamp": 1532539769
    },
    {
        "content": "<p>hmm so can you summarize for me again — there are basically a ton of local variables, each with a type like <code>&amp;'X T</code>?</p>",
        "id": 130290055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539913
    },
    {
        "content": "<p>I'm wondering what tricks we can play :)</p>",
        "id": 130290118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539951
    },
    {
        "content": "<p>there seem to be multiple areas this test shows</p>",
        "id": 130290120,
        "sender_full_name": "lqd",
        "timestamp": 1532539952
    },
    {
        "content": "<p>some quadratic behaviour njn reported</p>",
        "id": 130290127,
        "sender_full_name": "lqd",
        "timestamp": 1532539961
    },
    {
        "content": "<p>I guess the main trick would be</p>",
        "id": 130290132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539967
    },
    {
        "content": "<p>or, one trick we might do....</p>",
        "id": 130290137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539973
    },
    {
        "content": "<p>if we are in a static or constant, maybe we can just skip liveness somehow</p>",
        "id": 130290144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539985
    },
    {
        "content": "<p>I'm trying to remember though if that is true</p>",
        "id": 130290151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539988
    },
    {
        "content": "<p>and the thing I was seeing wrt to these locals having effectively &amp;'static str strings, but in the liveness code it was seeing it as separate regions (I'm not sure the logs shoud/would show them as 'static at this point)</p>",
        "id": 130290174,
        "sender_full_name": "lqd",
        "timestamp": 1532540024
    },
    {
        "content": "<p>I was imagining essentially adding some kind of <code>'static</code> bound to everything</p>",
        "id": 130290175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540026
    },
    {
        "content": "<p>the logs wouldn't show them that way</p>",
        "id": 130290186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540036
    },
    {
        "content": "<p>i.e., the first step in MIR land is that we erase all the regions and make them fresh variables</p>",
        "id": 130290229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540044
    },
    {
        "content": "<p>then find out the required relationships between them</p>",
        "id": 130290235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540049
    },
    {
        "content": "<p>at this stage, we won't have computed that they have to live for static lifetime</p>",
        "id": 130290236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540056
    },
    {
        "content": "<p>the question then is -- in a static -- is there some way to have a shorter-lived region that's important</p>",
        "id": 130290242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540072
    },
    {
        "content": "<p>(and I'm not even sure this would matter a lot even if this simulate_block was more efficient wrt to these common types)</p>",
        "id": 130290248,
        "sender_full_name": "lqd",
        "timestamp": 1532540082
    },
    {
        "content": "<p>but yes the other option is just to increase the efficiency</p>",
        "id": 130290255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540097
    },
    {
        "content": "<p>in some way</p>",
        "id": 130290276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540111
    },
    {
        "content": "<p>yeah and njn pointed other areas which looked interesting</p>",
        "id": 130290285,
        "sender_full_name": "lqd",
        "timestamp": 1532540122
    },
    {
        "content": "<p>let me get you a link to one of those</p>",
        "id": 130290304,
        "sender_full_name": "lqd",
        "timestamp": 1532540161
    },
    {
        "content": "<p>eg <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/places_conflict.rs#L32-L37\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/places_conflict.rs#L32-L37\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/places_conflict.rs#L32-L37</a></p>",
        "id": 130290374,
        "sender_full_name": "lqd",
        "timestamp": 1532540228
    },
    {
        "content": "<p>so that I have an idea for</p>",
        "id": 130290382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540241
    },
    {
        "content": "<p>I've been meaning to write it up</p>",
        "id": 130290387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540245
    },
    {
        "content": "<p>I may have left a cryptic comment somewhere</p>",
        "id": 130290389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540256
    },
    {
        "content": "<p>what %age of time does that fn account for?</p>",
        "id": 130290394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540265
    },
    {
        "content": "<p>the good news is that optimizing that fn would help across the board</p>",
        "id": 130290400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540273
    },
    {
        "content": "<p>right now we do a pretty naive comparison</p>",
        "id": 130290405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540280
    },
    {
        "content": "<p>my basic idea would be to reorganize how <code>mir::Place</code> is represented, to start</p>",
        "id": 130290452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540294
    },
    {
        "content": "<p>I think it's the hottest function of them all 28,184,735,859 instr</p>",
        "id": 130290459,
        "sender_full_name": "lqd",
        "timestamp": 1532540301
    },
    {
        "content": "<p>I think we would want something like <code>Place { base: PlaceBase, projections: &amp;[PlaceProjections] }</code></p>",
        "id": 130290469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540312
    },
    {
        "content": "<p>and then we would try to hash the \"loans in scope\" by the base</p>",
        "id": 130290483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540326
    },
    {
        "content": "<p>so that e.g. if yo have a borrow of the variable _X and an access to _Y</p>",
        "id": 130290493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540337
    },
    {
        "content": "<p>we don't ever have to compare them against one another</p>",
        "id": 130290497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540343
    },
    {
        "content": "<p>in particular when the number of loans is growing linearly as we traverse the code...</p>",
        "id": 130290515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540358
    },
    {
        "content": "<p>I've been wanting to write it up but also wanting to dig in and figure out in a bit more detail how that would work</p>",
        "id": 130290586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540406
    },
    {
        "content": "<p>actually just changing the structure of places</p>",
        "id": 130290592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540410
    },
    {
        "content": "<p>would already let us write that fn more efficiently</p>",
        "id": 130290598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540417
    },
    {
        "content": "<p>oh sounds interesting indeed</p>",
        "id": 130290599,
        "sender_full_name": "lqd",
        "timestamp": 1532540418
    },
    {
        "content": "<p>we wouldn't have to do the \"unroll\" trick</p>",
        "id": 130290601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540420
    },
    {
        "content": "<p>I know eddyb wanted it anyway</p>",
        "id": 130290604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540428
    },
    {
        "content": "<p><em>that</em> I can write up right now</p>",
        "id": 130290612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540436
    },
    {
        "content": "<p>for %age I think the various unroll_place monomorphizations tally up to 12-13% of the total</p>",
        "id": 130290706,
        "sender_full_name": "lqd",
        "timestamp": 1532540545
    },
    {
        "content": "<p>fascinating</p>",
        "id": 130290710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540553
    },
    {
        "content": "<p>lots of loans :)</p>",
        "id": 130290713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540557
    },
    {
        "content": "<p>and lots of accesses :)</p>",
        "id": 130290715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540559
    },
    {
        "content": "<p>it's really called a lot for this static variable :)</p>",
        "id": 130290725,
        "sender_full_name": "lqd",
        "timestamp": 1532540572
    },
    {
        "content": "<p>without the hashing, you'd still have to do the comparisons, but they'd be a lot faster</p>",
        "id": 130290727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540573
    },
    {
        "content": "<p>njn also mentioned <code>precompute_borrows_out_of_scope</code> being problematic but I haven't looked at it yet</p>",
        "id": 130290822,
        "sender_full_name": "lqd",
        "timestamp": 1532540673
    },
    {
        "content": "<p>and ofc the <code>push_type_live_constraint</code> we mentioned before, where they all end up being the same type but we don't know/notice it here or before; indeed it seems like we could handle 'static in some quick/fast way somewhere :/</p>",
        "id": 130290988,
        "sender_full_name": "lqd",
        "timestamp": 1532540844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I wrote up <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">https://github.com/rust-lang/rust/issues/52708</a></p>",
        "id": 130291012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540877
    },
    {
        "content": "<p>as for <code>precompute_borrows_out_of_scope</code>, I don't really know how to do that much better tbh</p>",
        "id": 130291062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532540890
    },
    {
        "content": "<p>super, thanks for writing this up :)</p>",
        "id": 130291136,
        "sender_full_name": "lqd",
        "timestamp": 1532540972
    },
    {
        "content": "<p>do you think you might poke at it? :)</p>",
        "id": 130291525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541293
    },
    {
        "content": "<p>I could try to be more specific</p>",
        "id": 130291533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541301
    },
    {
        "content": "<p>it's one of those \"nice, pure refactoring\" sort of tasks I guess</p>",
        "id": 130291545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541309
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> might be interested :)</p>",
        "id": 130291552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, wasn't following up, interested in what?</p>",
        "id": 130291616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541366
    },
    {
        "content": "<p>do you think it's something one can get done in a couple days (before I leave on vacation) ?</p>",
        "id": 130291617,
        "sender_full_name": "lqd",
        "timestamp": 1532541369
    },
    {
        "content": "<p>maybe more than a couple of days</p>",
        "id": 130291627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541378
    },
    {
        "content": "<p>hard to tell</p>",
        "id": 130291631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541382
    },
    {
        "content": "<p>i can chip in if you don't complete it</p>",
        "id": 130291634,
        "sender_full_name": "DPC",
        "timestamp": 1532541384
    },
    {
        "content": "<p>but it will affect a non-trivial chunk of code</p>",
        "id": 130291637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> interestedin <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">#52708</a></p>",
        "id": 130291649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541395
    },
    {
        "content": "<p>sounds good</p>",
        "id": 130291659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541410
    },
    {
        "content": "<p>I'd have to think about the order of steps to take</p>",
        "id": 130291666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541416
    },
    {
        "content": "<p>I'm also curious to hear what <span class=\"user-mention\" data-user-id=\"119009\">@Eduard-Mihai Burtescu</span> thinks</p>",
        "id": 130291673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541424
    },
    {
        "content": "<p>but didn't understand if @lqd was going to tackle it</p>",
        "id": 130291677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541429
    },
    {
        "content": "<p>I think it's still up in the air :)</p>",
        "id": 130291683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541438
    },
    {
        "content": "<p>I can do it if you want</p>",
        "id": 130291699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541456
    },
    {
        "content": "<p>apart from time constraint I'm game, that is we can collaborate on it :)</p>",
        "id": 130291700,
        "sender_full_name": "lqd",
        "timestamp": 1532541457
    },
    {
        "content": "<p>had no tasks right now</p>",
        "id": 130291703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> if you want, go ahead</p>",
        "id": 130291718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541474
    },
    {
        "content": "<p>I'm fine with whatever you guys want :)</p>",
        "id": 130291779,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532541506
    },
    {
        "content": "<p>is there something we can do about the 'statics specifically as well ?</p>",
        "id": 130291781,
        "sender_full_name": "lqd",
        "timestamp": 1532541509
    },
    {
        "content": "<p>it feels like there must be</p>",
        "id": 130291830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541566
    },
    {
        "content": "<p>so e.g.</p>",
        "id": 130291833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541573
    },
    {
        "content": "<p>any variable that winds up in the final value</p>",
        "id": 130291841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541586
    },
    {
        "content": "<p>clearly, all of its lifetimes must be <code>'static</code></p>",
        "id": 130291864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541595
    },
    {
        "content": "<p>so maybe we could skip computing liveness on it</p>",
        "id": 130291867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541601
    },
    {
        "content": "<p>I guess I should dump the html5ever MIR</p>",
        "id": 130291915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> do you have a minimized version of the troublesome code?</p>",
        "id": 130291924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541617
    },
    {
        "content": "<p>that would be helpful actually</p>",
        "id": 130291926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532541620
    },
    {
        "content": "<p>sure</p>",
        "id": 130291927,
        "sender_full_name": "lqd",
        "timestamp": 1532541622
    },
    {
        "content": "<p>of the source not the MIR right ?</p>",
        "id": 130291938,
        "sender_full_name": "lqd",
        "timestamp": 1532541635
    },
    {
        "content": "<p>if so: <a href=\"https://play.rust-lang.org/?gist=c3e6c21848eb4c2aee3ec047e1b9d911&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=c3e6c21848eb4c2aee3ec047e1b9d911&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=c3e6c21848eb4c2aee3ec047e1b9d911&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 130291948,
        "sender_full_name": "lqd",
        "timestamp": 1532541651
    },
    {
        "content": "<p>(rustc will OOM if you compile tho ;)</p>",
        "id": 130291958,
        "sender_full_name": "lqd",
        "timestamp": 1532541664
    },
    {
        "content": "<p>although I'm not sure one could call that \"minimized\" :/ (but easy to do so, reducing the number of entries in the arrays, à la <a href=\"https://play.rust-lang.org/?gist=c80f5a6133a739bcb084677f09ae4501&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=c80f5a6133a739bcb084677f09ae4501&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=c80f5a6133a739bcb084677f09ae4501&amp;version=nightly&amp;mode=debug&amp;edition=2015</a>)</p>",
        "id": 130292090,
        "sender_full_name": "lqd",
        "timestamp": 1532541834
    },
    {
        "content": "<p>right</p>",
        "id": 130292469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542259
    },
    {
        "content": "<p>that seems awfully minimal :)</p>",
        "id": 130292484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542271
    },
    {
        "content": "<p>it should at least show the &amp;str regions :)</p>",
        "id": 130292561,
        "sender_full_name": "lqd",
        "timestamp": 1532542337
    },
    {
        "content": "<p>presumably something like this ought to show the general pattern, right</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">K</span>: <span class=\"nb\">&#39;static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">disps</span>: <span class=\"nc\">Slice</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">entries</span>: <span class=\"nc\">Slice</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">NAMED_ENTITIES</span>: <span class=\"nc\">Map</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">key</span>: <span class=\"mi\">1897749892740154578</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">disps</span>: <span class=\"nc\">Slice</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">entries</span>: <span class=\"nc\">Slice</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"s\">&quot;GreaterSlan&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130292596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542402
    },
    {
        "content": "<p>I believe so</p>",
        "id": 130292621,
        "sender_full_name": "lqd",
        "timestamp": 1532542438
    },
    {
        "content": "<p>ok so I could imagine doing a special-cased analysis targeting huge statics</p>",
        "id": 130292698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542498
    },
    {
        "content": "<p>which seems to occur with non-trivial frequency ;)</p>",
        "id": 130292703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542505
    },
    {
        "content": "<p>basically starting from <code>_0</code>, we walk backwards to find those locals whose data gets stored into <code>_0</code></p>",
        "id": 130292712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542528
    },
    {
        "content": "<p>and we don't compute liveness for them</p>",
        "id": 130292716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542534
    },
    {
        "content": "<p>but rather for all their regions to <code>'static</code></p>",
        "id": 130292720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542538
    },
    {
        "content": "<p>something like that</p>",
        "id": 130292721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542540
    },
    {
        "content": "<p>we ought to be able to do this pretty fast using a union-find sort of thing</p>",
        "id": 130292728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542551
    },
    {
        "content": "<p>linear pass over the MIR I imagine</p>",
        "id": 130292729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542557
    },
    {
        "content": "<p>basically whenever you have <code>_1 = _2</code> or <code>_1 = Aggregate { _2 }</code>,</p>",
        "id": 130292795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542623
    },
    {
        "content": "<p>you would union <code>_1</code> and <code>_2</code></p>",
        "id": 130292801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542627
    },
    {
        "content": "<p>then we would look at the end at the set of things union'd with <code>_0</code></p>",
        "id": 130292804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542632
    },
    {
        "content": "<p>something like that</p>",
        "id": 130292805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542635
    },
    {
        "content": "<p>would we do this right before the liveness:generate calls ?</p>",
        "id": 130292870,
        "sender_full_name": "lqd",
        "timestamp": 1532542719
    },
    {
        "content": "<p>presumably yes</p>",
        "id": 130292877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532542731
    },
    {
        "content": "<p>I can investigate that</p>",
        "id": 130292897,
        "sender_full_name": "lqd",
        "timestamp": 1532542774
    },
    {
        "content": "<p>should I open another issue about it?</p>",
        "id": 130293116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543080
    },
    {
        "content": "<p>it'd also be good I think to look again at tuple-stress...</p>",
        "id": 130293153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543133
    },
    {
        "content": "<p>since IIRC it is still pretty slow</p>",
        "id": 130293170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543154
    },
    {
        "content": "<p>even though we basically eliminated liveness entirely there, right?</p>",
        "id": 130293175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543161
    },
    {
        "content": "<p>might give us a hint what the next bottleneck will be</p>",
        "id": 130293218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543167
    },
    {
        "content": "<p>opening an issue would be <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 130293231,
        "sender_full_name": "lqd",
        "timestamp": 1532543181
    },
    {
        "content": "<p>I can check tuple-stress, I feel like liveness is not a bottleneck there anymore but can't remember for sure hmm</p>",
        "id": 130293256,
        "sender_full_name": "lqd",
        "timestamp": 1532543218
    },
    {
        "content": "<p>shouldn't be</p>",
        "id": 130293272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543234
    },
    {
        "content": "<p>agreed</p>",
        "id": 130293282,
        "sender_full_name": "lqd",
        "timestamp": 1532543251
    },
    {
        "content": "<p>but statics again could come into play</p>",
        "id": 130293287,
        "sender_full_name": "lqd",
        "timestamp": 1532543261
    },
    {
        "content": "<p>tuple stress is one big static, isn't it?</p>",
        "id": 130293291,
        "sender_full_name": "simulacrum",
        "timestamp": 1532543278
    },
    {
        "content": "<p>yeah</p>",
        "id": 130293328,
        "sender_full_name": "lqd",
        "timestamp": 1532543284
    },
    {
        "content": "<p>since it's surely not liveness there anymore, it would interesting to see what this static exercises so much</p>",
        "id": 130293372,
        "sender_full_name": "lqd",
        "timestamp": 1532543350
    },
    {
        "content": "<p>exactly</p>",
        "id": 130293554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543575
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/52713\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52713\">https://github.com/rust-lang/rust/issues/52713</a></p>",
        "id": 130293556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543577
    },
    {
        "content": "<p>thanks niko</p>",
        "id": 130293560,
        "sender_full_name": "lqd",
        "timestamp": 1532543586
    },
    {
        "content": "<p>whatever is affecting tuple-stress will probably affect html5ever once we do <a href=\"https://github.com/rust-lang/rust/issues/52713\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52713\">#52713</a> :)</p>",
        "id": 130293563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532543587
    },
    {
        "content": "<p>I assume any big lump of statics will exercise regions renumbering</p>",
        "id": 130293746,
        "sender_full_name": "lqd",
        "timestamp": 1532543782
    },
    {
        "content": "<p>is this a different walk/visit, should we skip tys without regions here <em>also</em> ? (maybe it's just log heavy and doesn't contribute much to the overall time, I'll need to check)</p>",
        "id": 130293778,
        "sender_full_name": "lqd",
        "timestamp": 1532543832
    },
    {
        "content": "<blockquote>\n<p>I assume any big lump of statics will exercise regions renumbering</p>\n</blockquote>\n<p>region renumbering? it shows up on the profiles, but usually very small</p>",
        "id": 130295131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545373
    },
    {
        "content": "<p>here, dataflow looks interesting, looking at logs while valgrind slowly runs</p>",
        "id": 130295493,
        "sender_full_name": "lqd",
        "timestamp": 1532545788
    },
    {
        "content": "<p>eg drop_flag_effects</p>",
        "id": 130295498,
        "sender_full_name": "lqd",
        "timestamp": 1532545796
    },
    {
        "content": "<p>of which there are a lot</p>",
        "id": 130295551,
        "sender_full_name": "lqd",
        "timestamp": 1532545809
    },
    {
        "content": "<p>hmmmmmmm</p>",
        "id": 130295562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545847
    },
    {
        "content": "<p>what on earth <em>is</em> that</p>",
        "id": 130295569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545851
    },
    {
        "content": "<p>and the logs are coming slooooowly</p>",
        "id": 130295572,
        "sender_full_name": "lqd",
        "timestamp": 1532545856
    },
    {
        "content": "<p>I've seen it on the profiles before</p>",
        "id": 130295573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545857
    },
    {
        "content": "<p>not very familiar to me</p>",
        "id": 130295574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545860
    },
    {
        "content": "<p>oh, it's just general manipulation of drop paths etc</p>",
        "id": 130295590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545876
    },
    {
        "content": "<p>so I guess this is just computing what is initialized etc hmm</p>",
        "id": 130295593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545884
    },
    {
        "content": "<p>we mgiht be able to speed that up, that code is kinda old and not (I don't think) esp optimized, iirc</p>",
        "id": 130295608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532545897
    },
    {
        "content": "<p>I'm looking forward to the profile, if it has clear indicators, otherwise it's just talkative logs</p>",
        "id": 130295675,
        "sender_full_name": "lqd",
        "timestamp": 1532545956
    },
    {
        "content": "<p>the profile is <a href=\"https://www.dropbox.com/s/s9rwnot3rvfq4z7/tuple-stress-nll.txt?dl=0\" target=\"_blank\" title=\"https://www.dropbox.com/s/s9rwnot3rvfq4z7/tuple-stress-nll.txt?dl=0\">available</a> -- 35% memset, 43% <code>bitslice::bitwise</code> -- mostly called from <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/flows.rs#L100-L102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/flows.rs#L100-L102\">here</a> apparently, and from other places in dataflow, do_mir_borrowck -- all in all mostly from <code>FlowsAtLocation</code>: <code>apply_local_effect</code>, and <code>reconstruct_statement_effect</code></p>\n<div class=\"message_inline_ref\"><a href=\"https://www.dropbox.com/s/s9rwnot3rvfq4z7/tuple-stress-nll.txt?dl=0\" target=\"_blank\" title=\"tuple-stress-nll.txt\"><img src=\"https://www.dropbox.com/static/images/spectrum-icons/generated/content/content-txt-large.png\"></a><div><div class=\"message_inline_image_title\">tuple-stress-nll.txt</div><desc class=\"message_inline_image_desc\"></desc></div></div>",
        "id": 130297295,
        "sender_full_name": "lqd",
        "timestamp": 1532547603
    },
    {
        "content": "<p>(bbl)</p>",
        "id": 130297317,
        "sender_full_name": "lqd",
        "timestamp": 1532547637
    },
    {
        "content": "<p>huh</p>",
        "id": 130297669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532547826
    },
    {
        "content": "<p>interesting</p>",
        "id": 130297672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532547832
    },
    {
        "content": "<p>I'm guessing Ariel would be the most familiar with this, slightly unfortunate :)</p>",
        "id": 130301158,
        "sender_full_name": "lqd",
        "timestamp": 1532551415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> too</p>",
        "id": 130301213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551452
    },
    {
        "content": "<p>but basically it sounds like</p>",
        "id": 130301221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551461
    },
    {
        "content": "<p>it's computing the initializtion sets</p>",
        "id": 130301225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551471
    },
    {
        "content": "<p>and the other various bits of moveck</p>",
        "id": 130301229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551478
    },
    {
        "content": "<p>those are a lot of bits and a lot of variables</p>",
        "id": 130301232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551482
    },
    {
        "content": "<p>not sure yet how we can avoid that... maybe there are some tricks we can do</p>",
        "id": 130301246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551501
    },
    {
        "content": "<p>yeah maybe Felix will have ideas as well</p>",
        "id": 130301268,
        "sender_full_name": "lqd",
        "timestamp": 1532551536
    },
    {
        "content": "<p>So folks: which benchmarks do you think we should focus on?</p>\n<p>Here are the measurements that <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did: <a href=\"https://hackmd.io/3r1ZnkUyRD2NMU-dnm_RPg?view#Timings-using-the-master-version-of-each-crate\" target=\"_blank\" title=\"https://hackmd.io/3r1ZnkUyRD2NMU-dnm_RPg?view#Timings-using-the-master-version-of-each-crate\">link</a>. These compare the <strong>current master</strong> performance for most crates. Looking at these, <code>cargo</code> is the worst (at 16%). It's also part of bootstrap, so that seems important.</p>\n<p>The latest clap-rs and html5ever are also ungreat, at about 15% each.</p>\n<p>It'd be a nice goal to get the \"master\" versions of all crates under 10% overhead I think. Perhaps that should be the goal.</p>",
        "id": 131067669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533674320
    },
    {
        "content": "<p>I'd also like to measure the html5ever that's on perf but <em>with</em> the liveness optimization applied, just to get a sense of that.</p>",
        "id": 131067672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533674339
    },
    {
        "content": "<p>Do we know if/feel like the non-liveness parts of html5ever and tuple stress will happen in the wild ?</p>",
        "id": 131068169,
        "sender_full_name": "lqd",
        "timestamp": 1533674898
    },
    {
        "content": "<p>don't know</p>",
        "id": 131068304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675063
    },
    {
        "content": "<p>I mean I suppose other people will make massive constants :)</p>",
        "id": 131068315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675068
    },
    {
        "content": "<p>I think we should definitely optimize them</p>",
        "id": 131068322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675073
    },
    {
        "content": "<p>another round of profiling on the master crates might be worthwhile to find “in the wild” patterns we don’t know about yet, vs the ones on perf.rlo we already know about and are working on; cargo, clap, html5ever just to see if there’s low hanging fruit ?</p>",
        "id": 131068449,
        "sender_full_name": "lqd",
        "timestamp": 1533675219
    },
    {
        "content": "<p>I'm currently profiling cargo master</p>",
        "id": 131068543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675320
    },
    {
        "content": "<p>hopefully it matches with the other perf ideas you hand and mentioned recently. 10% seems an interesting goal (I wonder how much parallel queries improve things)</p>",
        "id": 131068872,
        "sender_full_name": "lqd",
        "timestamp": 1533675649
    },
    {
        "content": "<p>well, initial results on cargo...</p>",
        "id": 131068888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675668
    },
    {
        "content": "<p>most of the time is in <code>nll::compute_regions</code> (58% of borrowck) and in particular the typeck (48%)</p>",
        "id": 131068922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675721
    },
    {
        "content": "<p>canonicalization winds up at about 6% of borrowck (not a ton)</p>",
        "id": 131068997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675767
    },
    {
        "content": "<p>there's no <em>glaringly obvious</em> hot spots</p>",
        "id": 131069000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675777
    },
    {
        "content": "<p>on html5ever on perf, disabling liveness altogether yielded -25% IIRC, so with the liveness perf optimization it will probably still be too slow</p>",
        "id": 131069089,
        "sender_full_name": "lqd",
        "timestamp": 1533675887
    },
    {
        "content": "<p>well we know how fast it is</p>",
        "id": 131069091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675897
    },
    {
        "content": "<p>2,081.20%</p>",
        "id": 131069103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675912
    },
    {
        "content": "<p>instead of 3000%</p>",
        "id": 131069111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675921
    },
    {
        "content": "<p>so yeah a solid win but not there yet :)</p>",
        "id": 131069114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533675928
    },
    {
        "content": "<p>true :) I had completely forgotten you had finished this line of work</p>",
        "id": 131069183,
        "sender_full_name": "lqd",
        "timestamp": 1533675972
    },
    {
        "content": "<p>the rest should be the moveck/tuple stress situation, I don't think Felix was able to look at it before leaving</p>",
        "id": 131069227,
        "sender_full_name": "lqd",
        "timestamp": 1533676044
    },
    {
        "content": "<p>so a promising areas albeit harder to tackle I guess</p>",
        "id": 131069244,
        "sender_full_name": "lqd",
        "timestamp": 1533676066
    },
    {
        "content": "<p>wins are definitely getting harder :)</p>",
        "id": 131069307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676125
    },
    {
        "content": "<p>it's interesting that we spent 11% of our time in <code>prove_predicate</code></p>",
        "id": 131069328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676156
    },
    {
        "content": "<p>actually also kind of interesting...the typeck seems to have a lot of overhead that is just kind of \"looking at the MIR\" I guess</p>",
        "id": 131069386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676204
    },
    {
        "content": "<p>ok, well, I should look at some other tests</p>",
        "id": 131069393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676211
    },
    {
        "content": "<p>I don't think i'm seeing anything too obvious in cargo</p>",
        "id": 131069395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676216
    },
    {
        "content": "<p>I have some vague ideas but they are along the lines of \"try this refactoring and see if we can clean it up\"</p>",
        "id": 131069401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676241
    },
    {
        "content": "<p>are there such mir passes we can maybe combine so we \"look at the mir\" less in typeck ?</p>",
        "id": 131069428,
        "sender_full_name": "lqd",
        "timestamp": 1533676307
    },
    {
        "content": "<p>it does do 2 passes I think</p>",
        "id": 131069467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676323
    },
    {
        "content": "<p>not necessarily for a good reason</p>",
        "id": 131069474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676329
    },
    {
        "content": "<p>might help</p>",
        "id": 131069475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676332
    },
    {
        "content": "<p>iirc the first pass is a kind of sanity check</p>",
        "id": 131069483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676348
    },
    {
        "content": "<p>to let the later pass make more assertions</p>",
        "id": 131069486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676352
    },
    {
        "content": "<p>in case you are curious <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm taking some notes <a href=\"https://docs.google.com/spreadsheets/d/1YRlzuDhZoYJXagvT09TacuT8vck2lEMrtBkDJ8h7_8M/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1YRlzuDhZoYJXagvT09TacuT8vck2lEMrtBkDJ8h7_8M/edit?usp=sharing\">in this google spreadsheet</a></p>",
        "id": 131069775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676733
    },
    {
        "content": "<p>(pretty minimal, still it's interesting how similar the two are)</p>",
        "id": 131069858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533676817
    },
    {
        "content": "<p>oh nice! I was indeed curious :)</p>",
        "id": 131069874,
        "sender_full_name": "lqd",
        "timestamp": 1533676842
    },
    {
        "content": "<p><code>liveness::generate</code> is still a non-trivial percentage, interestingly</p>",
        "id": 131070041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677044
    },
    {
        "content": "<p>approx. 10%</p>",
        "id": 131070045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> to build html5ever, it seems like <code>cargo-curl</code> didnt' work for me</p>",
        "id": 131070052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677070
    },
    {
        "content": "<p>did you download from the main repo?</p>",
        "id": 131070054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677074
    },
    {
        "content": "<p>I guess they have tags</p>",
        "id": 131070074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677109
    },
    {
        "content": "<p>though they don't have a v0.5.4 tag :)</p>",
        "id": 131070092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677147
    },
    {
        "content": "<p>well I can just use the version in rustc-perf I guess</p>",
        "id": 131070145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677172
    },
    {
        "content": "<p>yeah so the html5ever (from perf) profile is completely different</p>",
        "id": 131070546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677687
    },
    {
        "content": "<p><code>each_borrow_involving_path</code> is 41%</p>",
        "id": 131070550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677698
    },
    {
        "content": "<p>which means that <a href=\"https://github.com/rust-lang/rust/issues/53159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53159\">https://github.com/rust-lang/rust/issues/53159</a> might be huge</p>",
        "id": 131070561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677715
    },
    {
        "content": "<p>html5ever I git cloned IIRC</p>",
        "id": 131070627,
        "sender_full_name": "lqd",
        "timestamp": 1533677766
    },
    {
        "content": "<p>basically all the rest is the \"collect borrows in scope\"</p>",
        "id": 131070634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677784
    },
    {
        "content": "<p>I don't yet have a smart idea how to do <em>that</em> much better</p>",
        "id": 131070639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677791
    },
    {
        "content": "<p>but we could get it down to 10x overhead ;)</p>",
        "id": 131070645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677800
    },
    {
        "content": "<p>ooh, I had an idea just now...</p>",
        "id": 131070652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677822
    },
    {
        "content": "<p>well, might not work</p>",
        "id": 131070659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677827
    },
    {
        "content": "<p>in particular, it might force us to compute liveness again :</p>",
        "id": 131070673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677844
    },
    {
        "content": "<p>but, for posterity, the idea is:</p>",
        "id": 131070683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677854
    },
    {
        "content": "<p>right now, we trace out the blocks where each borow is in scope</p>",
        "id": 131070692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677866
    },
    {
        "content": "<p>we do this in a kind fo silly way and I think I could get some wins from refactoring that</p>",
        "id": 131070694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677874
    },
    {
        "content": "<p>but leave that aside</p>",
        "id": 131070695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677876
    },
    {
        "content": "<p>well, what I want to do is: if, during this trace, we were also looking for accesses to paths that conflict with the borrow</p>",
        "id": 131070746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677894
    },
    {
        "content": "<p>then we could stop tracing as soon as we see that the borrowed path is dead</p>",
        "id": 131070750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677900
    },
    {
        "content": "<p>but .. I think that this might not help here, because the paths do not go dead until the very end</p>",
        "id": 131070755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677914
    },
    {
        "content": "<p>still, I also think...</p>",
        "id": 131070758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677922
    },
    {
        "content": "<p>hmm</p>",
        "id": 131070759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677924
    },
    {
        "content": "<p>for some borrows, there is no reason to record the borrow,</p>",
        "id": 131070764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677930
    },
    {
        "content": "<p>because there is no possible thing that the user could do</p>",
        "id": 131070767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677936
    },
    {
        "content": "<p>which could conflict with the borrow</p>",
        "id": 131070768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677941
    },
    {
        "content": "<p>this might be the case here</p>",
        "id": 131070775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677943
    },
    {
        "content": "<p>an example of such a borrow:</p>",
        "id": 131070779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677952
    },
    {
        "content": "<p>if you have <code>x: &amp;u32</code> and you do <code>let y = &amp;*x</code></p>",
        "id": 131070785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677966
    },
    {
        "content": "<p>there is no action that you can do with <code>x</code> that invalidates <code>y</code></p>",
        "id": 131070792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533677973
    },
    {
        "content": "<p>html5ever 0.5.4 is from perf though right ? if so, and for all other perf crates, I timed them from a rustc-perf repo clone, as the version is not enough a lot of times, that is perf had a specific commit rather than a released version</p>",
        "id": 131070854,
        "sender_full_name": "lqd",
        "timestamp": 1533678009
    },
    {
        "content": "<p>this is not quite true for <code>let y = &amp;x</code>, even if <code>x</code> is not mutable, because we have to ensure that you don't move <code>x</code> etc</p>",
        "id": 131070861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678018
    },
    {
        "content": "<p>but if <code>x</code> is a <em>static value</em></p>",
        "id": 131070865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678023
    },
    {
        "content": "<p>as is the case here</p>",
        "id": 131070867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678034
    },
    {
        "content": "<p>then I think maybe we can just not track this borrow at all</p>",
        "id": 131070873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678045
    },
    {
        "content": "<p>that would basically \"crack\" the case I think</p>",
        "id": 131070882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678057
    },
    {
        "content": "<p>actually maybe these cases are even just the simpler <code>&amp;*</code> sort of thing</p>",
        "id": 131070905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678101
    },
    {
        "content": "<p>...looks like a bit of both, but most of the borrows are <code>&amp;*</code> borrows</p>",
        "id": 131070954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678128
    },
    {
        "content": "<p>the other case is a bit trickier</p>",
        "id": 131070979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678169
    },
    {
        "content": "<p>we sometimes at least have <code>StorageDead</code> for temporaries; I don't quite remember the rules we wound up with there, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> might</p>",
        "id": 131070997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533678187
    },
    {
        "content": "<p>would hashing the borrows in <a href=\"https://github.com/rust-lang/rust/issues/53159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53159\">#53159</a> depend on the new Place repr from <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">#52708</a> ?</p>",
        "id": 131072150,
        "sender_full_name": "lqd",
        "timestamp": 1533679711
    },
    {
        "content": "<p>I thought at first it would but I realize now it doesn't</p>",
        "id": 131072174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679750
    },
    {
        "content": "<p>that would just make it mildly faster</p>",
        "id": 131072178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679755
    },
    {
        "content": "<p>I went ahead and implemented <a href=\"https://github.com/rust-lang/rust/issues/53176\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53176\">https://github.com/rust-lang/rust/issues/53176</a></p>",
        "id": 131072185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679775
    },
    {
        "content": "<p>it is part of <a href=\"https://github.com/rust-lang/rust/pull/53177\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53177\">https://github.com/rust-lang/rust/pull/53177</a></p>",
        "id": 131072191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679783
    },
    {
        "content": "<p>so we can measure the performance</p>",
        "id": 131072195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679786
    },
    {
        "content": "<p>already :) oh this one should be good</p>",
        "id": 131072369,
        "sender_full_name": "lqd",
        "timestamp": 1533680035
    },
    {
        "content": "<p>I'll do a local opt build to see if it works .. I've not really tested it very hard I guess</p>",
        "id": 131072787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533680625
    },
    {
        "content": "<p>but I basically gotta go now</p>",
        "id": 131072837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533680645
    },
    {
        "content": "<p>ok so assuming that this change is not wildly unsound...</p>",
        "id": 131073343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681320
    },
    {
        "content": "<p>my local measurements suggest that html5ever goes to 2983msec (NLL) vs 1912msc (AST)</p>",
        "id": 131073348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681340
    },
    {
        "content": "<p>ratio of 1.516 <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 131073391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681364
    },
    {
        "content": "<p>still not great but ...</p>",
        "id": 131073401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681376
    },
    {
        "content": "<p>tuple-stress gets to a ratio of 2.29</p>",
        "id": 131073433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681445
    },
    {
        "content": "<p>nicely done :)</p>",
        "id": 131073515,
        "sender_full_name": "lqd",
        "timestamp": 1533681573
    },
    {
        "content": "<p>there seems to be a new bench since I did the measurements — keccak — which is at x1.8 now</p>",
        "id": 131073580,
        "sender_full_name": "lqd",
        "timestamp": 1533681623
    },
    {
        "content": "<p>hmm</p>",
        "id": 131073613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681708
    },
    {
        "content": "<p>never heard of it :)</p>",
        "id": 131073616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533681713
    },
    {
        "content": "<p>me neither</p>",
        "id": 131073663,
        "sender_full_name": "lqd",
        "timestamp": 1533681730
    },
    {
        "content": "<p>but will be interesting to analyze :)</p>",
        "id": 131073701,
        "sender_full_name": "lqd",
        "timestamp": 1533681797
    },
    {
        "content": "<p>1.516 is huge for html5ever, awesome</p>",
        "id": 131073874,
        "sender_full_name": "lqd",
        "timestamp": 1533682075
    },
    {
        "content": "<p>I'm wondering what the rest is</p>",
        "id": 131073919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682089
    },
    {
        "content": "<p>I can do a <code>perf record</code>...</p>",
        "id": 131073920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682094
    },
    {
        "content": "<p>presuambly it's the dataflow stuff</p>",
        "id": 131073921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682099
    },
    {
        "content": "<p>It would make <em>some</em> sense that it is</p>",
        "id": 131074173,
        "sender_full_name": "lqd",
        "timestamp": 1533682446
    },
    {
        "content": "<p>actually, no</p>",
        "id": 131074206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682559
    },
    {
        "content": "<p>oh and perf.rlo is testing the latest \"escaping paths\" PR so we'll have more numbers soon</p>",
        "id": 131074207,
        "sender_full_name": "lqd",
        "timestamp": 1533682561
    },
    {
        "content": "<p>/me's world crumbles</p>",
        "id": 131074249,
        "sender_full_name": "lqd",
        "timestamp": 1533682579
    },
    {
        "content": "<p>at least, not just that</p>",
        "id": 131074253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682591
    },
    {
        "content": "<p>e.g. type-check is 19%</p>",
        "id": 131074257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682598
    },
    {
        "content": "<p>(of borrowck)</p>",
        "id": 131074259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682602
    },
    {
        "content": "<p>liveness is still relatively expensive... kind of interesting... I think we're still paying some cost to \"walk the flow graph\" or something</p>",
        "id": 131074269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682633
    },
    {
        "content": "<p>we should check for the cast where there are literally zero variables that we are computing liveness for</p>",
        "id": 131074277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682648
    },
    {
        "content": "<p>I believe that is the case here</p>",
        "id": 131074278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682650
    },
    {
        "content": "<p>that'd be like a 13% win :)</p>",
        "id": 131074286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682660
    },
    {
        "content": "<p>:)</p>",
        "id": 131074333,
        "sender_full_name": "lqd",
        "timestamp": 1533682694
    },
    {
        "content": "<p>otherwise I think some non-trivial percentage is just that the bit sets are really, really big</p>",
        "id": 131074339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682714
    },
    {
        "content": "<p>I would have not expected that it'd be so different from tuple-stress at this point :/</p>",
        "id": 131074412,
        "sender_full_name": "lqd",
        "timestamp": 1533682805
    },
    {
        "content": "<p>even though some percentage of the time for the rest of the crate is not coming from the big static ofc</p>",
        "id": 131074443,
        "sender_full_name": "lqd",
        "timestamp": 1533682880
    },
    {
        "content": "<p>something that occurred to me</p>",
        "id": 131074460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682891
    },
    {
        "content": "<p>if we have a constraint <code>'foo: 'static</code></p>",
        "id": 131074462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682901
    },
    {
        "content": "<p>it's kind of a special case</p>",
        "id": 131074465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682909
    },
    {
        "content": "<p>we could tweak the SCC computation</p>",
        "id": 131074469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682920
    },
    {
        "content": "<p>to <em>always</em> put them in the same SCC</p>",
        "id": 131074507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682924
    },
    {
        "content": "<p>that might dramatically reduce the number of regions we need to worry about</p>",
        "id": 131074510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682934
    },
    {
        "content": "<p>in the case of html5ever, anyway</p>",
        "id": 131074511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682937
    },
    {
        "content": "<p>(we'd basically be adding synthetic edges from <code>'static</code> to every other region, from the POV of the SCC computation)</p>",
        "id": 131074534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533682998
    },
    {
        "content": "<p>basically SCC is not aware that <code>for&lt;'a&gt; 'static: 'a</code></p>",
        "id": 131074537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533683009
    },
    {
        "content": "<p>grr I guess I should file an issue for that too</p>",
        "id": 131074542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533683022
    },
    {
        "content": "<p>I really gotta go :)</p>",
        "id": 131074544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533683027
    },
    {
        "content": "<p>:) we can file it later</p>",
        "id": 131074592,
        "sender_full_name": "lqd",
        "timestamp": 1533683070
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/53178\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53178\">https://github.com/rust-lang/rust/issues/53178</a></p>",
        "id": 131074629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533683136
    },
    {
        "content": "<p>ok, ciao!</p>",
        "id": 131074631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533683138
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 131074679,
        "sender_full_name": "lqd",
        "timestamp": 1533683165
    },
    {
        "content": "<p>as expected from previous results <a href=\"https://github.com/rust-lang/rust/issues/53168\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53168\">#53168</a> improves html5ever's cpu and memory usage nicely :) <a href=\"https://perf.rust-lang.org/nll-dashboard.html?commit=aea424935d9666ab3a7efc69c7e88452e460479c&amp;stat=instructions%3Au\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html?commit=aea424935d9666ab3a7efc69c7e88452e460479c&amp;stat=instructions%3Au\">dashboard for convenience</a></p>",
        "id": 131082369,
        "sender_full_name": "lqd",
        "timestamp": 1533694858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I just did a profile of keccak</p>",
        "id": 131095764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718528
    },
    {
        "content": "<p>one thing jumps out immediately: dominators computation at 17% !</p>",
        "id": 131095769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718537
    },
    {
        "content": "<p>type-check only 9%</p>",
        "id": 131095814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718563
    },
    {
        "content": "<p>it must have some crazy control flow</p>",
        "id": 131095817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718567
    },
    {
        "content": "<p>also, lots of time in <code>unroll_place</code></p>",
        "id": 131095834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718597
    },
    {
        "content": "<p>There's not a lot in <code>keccak</code>: <a href=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/benchmarks/keccak/src/lib.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/benchmarks/keccak/src/lib.rs\">https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/benchmarks/keccak/src/lib.rs</a></p>",
        "id": 131095839,
        "sender_full_name": "davidtwco",
        "timestamp": 1533718619
    },
    {
        "content": "<p>well, those <code>unroll24!</code> macros etc</p>",
        "id": 131095861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718672
    },
    {
        "content": "<p>presumably are generating just a lot of code</p>",
        "id": 131095866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718679
    },
    {
        "content": "<p>but basically zero long-term borrows</p>",
        "id": 131095912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718706
    },
    {
        "content": "<p>unroll_place should be bypassed with the « hash borrows » issue right ?</p>",
        "id": 131096004,
        "sender_full_name": "lqd",
        "timestamp": 1533718847
    },
    {
        "content": "<p>that was the goal, yes</p>",
        "id": 131096061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718959
    },
    {
        "content": "<p>I updated the <a href=\"https://docs.google.com/spreadsheets/d/1YRlzuDhZoYJXagvT09TacuT8vck2lEMrtBkDJ8h7_8M/edit#gid=0\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1YRlzuDhZoYJXagvT09TacuT8vck2lEMrtBkDJ8h7_8M/edit#gid=0\">google drive spreadsheet</a></p>",
        "id": 131096066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533718976
    },
    {
        "content": "<p>one thing that occurs to me with the hash borrows issue.. at least for the simplistic variant I proposed to do first ... if that if you have a lot of small borrows of the same place, then every access to that place will iterate over all of them</p>",
        "id": 131096088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719019
    },
    {
        "content": "<p>I had an idea that required a lot more refactoring that would solve that though</p>",
        "id": 131096101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719033
    },
    {
        "content": "<p>I should try to write it up, the idea was basically to combine determining the borrow's scope with checking for errors</p>",
        "id": 131096148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719067
    },
    {
        "content": "<p>essentially, we walk forward from the point of each borrow until it goes out of scope (as today)</p>",
        "id": 131096152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719079
    },
    {
        "content": "<p>we stop if we encounter something that kills the borrow</p>",
        "id": 131096157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719086
    },
    {
        "content": "<p>and — as we go — we check each place that is accessed for conflicts with <strong>just that borrow</strong></p>",
        "id": 131096160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719101
    },
    {
        "content": "<p>instead of walking the set of places, and checking against all active borrows</p>",
        "id": 131096170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719124
    },
    {
        "content": "<p>sort of similar to the \"invert liveness\" idea</p>",
        "id": 131096171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719128
    },
    {
        "content": "<p>I think this would be better but it requires us doing some non-trivial refactoring</p>",
        "id": 131096173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719142
    },
    {
        "content": "<p>among other things, if you have many borrows with small duration, you will only check the things that occur in their (small) durations against them</p>",
        "id": 131096176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719158
    },
    {
        "content": "<p>e.g., here, in keccak, we have many accesses to <code>array[x][y]</code></p>",
        "id": 131096215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719181
    },
    {
        "content": "<p>those may or may not be borrows, not sure</p>",
        "id": 131096218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719192
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 131096596,
        "sender_full_name": "lqd",
        "timestamp": 1533719838
    },
    {
        "content": "<p>from keccak:</p>\n<div class=\"codehilite\"><pre><span></span>    bb25993: {\n</pre></div>",
        "id": 131096687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719922
    },
    {
        "content": "<p>wow</p>",
        "id": 131096690,
        "sender_full_name": "lqd",
        "timestamp": 1533719936
    },
    {
        "content": "<p>there may be no borrows at all...</p>",
        "id": 131096696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719963
    },
    {
        "content": "<p>emacs is very slow to search this file :)</p>",
        "id": 131096698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533719967
    },
    {
        "content": "<p>well, there must be <em>some</em></p>",
        "id": 131096753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720016
    },
    {
        "content": "<p>but still:</p>\n<div class=\"codehilite\"><pre><span></span>rg &#39;= &amp;&#39; mir_dump/rustc.f1600.-------.nll.0.mir\n</pre></div>",
        "id": 131096761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720036
    },
    {
        "content": "<p>but then how could <code>unroll_place</code> take so much time....?</p>",
        "id": 131096762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720045
    },
    {
        "content": "<p>oh...</p>",
        "id": 131096833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720144
    },
    {
        "content": "<p><code>check_for_invalidation_at_exit</code> also calls it</p>",
        "id": 131096835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720148
    },
    {
        "content": "<p>as does <code>check_if_reassignment_to_immutable_state</code></p>",
        "id": 131096842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720170
    },
    {
        "content": "<p>hmm</p>",
        "id": 131096844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720175
    },
    {
        "content": "<p>that last one is atrocious</p>",
        "id": 131096856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720194
    },
    {
        "content": "<p><code>check_for_invalidation_at_exit</code> is only called for each borrow</p>",
        "id": 131096980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720246
    },
    {
        "content": "<p>something about <code>check_if_reassignment_to_immutable_state</code> seems very wrong to me</p>",
        "id": 131096989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720257
    },
    {
        "content": "<p>it's iterating over <strong>all things that have been initialized</strong></p>",
        "id": 131097000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720293
    },
    {
        "content": "<p>there must be some faster way to map to the bit we are interested in</p>",
        "id": 131097002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533720300
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/53189\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53189\">https://github.com/rust-lang/rust/issues/53189</a> — I think that <code>check_if_reassignment_to_immutable_state</code> is both slow <em>and</em> wrong</p>",
        "id": 131098863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533722871
    },
    {
        "content": "<p>a good combination :)</p>",
        "id": 131098865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533722874
    },
    {
        "content": "<p>OK, I was doing some more benchmarks...</p>",
        "id": 131224831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890434
    },
    {
        "content": "<p>it seems like tuple-stress -- as <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> has noted in the past-- is entirely dominated by the \"initialization\" checks for some reason that is not clear to me</p>",
        "id": 131224842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890458
    },
    {
        "content": "<p>i.e., I don't know why it is so different from html5ever but it appears to be?</p>",
        "id": 131224848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890467
    },
    {
        "content": "<p>though <code>reconstruct_statement_effect</code> and friends are still prominent in html5ever</p>",
        "id": 131224932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890557
    },
    {
        "content": "<p>it feels like we ought to be able to skip some of that work \"by construction\"</p>",
        "id": 131224967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890633
    },
    {
        "content": "<p>for example, the compiler temporaries that we generate</p>",
        "id": 131224969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890640
    },
    {
        "content": "<p>we do not need to do the full initialization checks on them</p>",
        "id": 131225009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890647
    },
    {
        "content": "<p>After <a href=\"https://github.com/rust-lang/rust/pull/53258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53258\">https://github.com/rust-lang/rust/pull/53258</a>, I see html5ever as a 1.40 ratio on my machine</p>",
        "id": 131929893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533947709
    },
    {
        "content": "<p>before:</p>\n<p><a href=\"/user_uploads/4715/KssL1vZBoH_p-tfuWRqqtdWB/Screen-Shot-2018-08-10-at-9.27.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-9.27.01-PM.png\">Screen-Shot-2018-08-10-at-9.27.01-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/KssL1vZBoH_p-tfuWRqqtdWB/Screen-Shot-2018-08-10-at-9.27.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-9.27.01-PM.png\"><img src=\"/user_uploads/4715/KssL1vZBoH_p-tfuWRqqtdWB/Screen-Shot-2018-08-10-at-9.27.01-PM.png\"></a></div><p>after:</p>\n<p><a href=\"/user_uploads/4715/fcq5us8jKI7M2LNypx_ib5RB/Screen-Shot-2018-08-10-at-9.27.31-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-9.27.31-PM.png\">Screen-Shot-2018-08-10-at-9.27.31-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fcq5us8jKI7M2LNypx_ib5RB/Screen-Shot-2018-08-10-at-9.27.31-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-9.27.31-PM.png\"><img src=\"/user_uploads/4715/fcq5us8jKI7M2LNypx_ib5RB/Screen-Shot-2018-08-10-at-9.27.31-PM.png\"></a></div>",
        "id": 131931901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533951626
    },
    {
        "content": "<p>nicht schlim</p>",
        "id": 131931903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533951631
    },
    {
        "content": "<p>now if only the try build would finish on <a href=\"https://github.com/rust-lang/rust/pull/53258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53258\">https://github.com/rust-lang/rust/pull/53258</a> so I could run perf...</p>",
        "id": 131931926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533951690
    },
    {
        "content": "<p>/me -&gt; bed</p>",
        "id": 131931932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533951718
    },
    {
        "content": "<blockquote>\n<p>I see html5ever as a 1.40 ratio on my machine</p>\n</blockquote>\n<p>This buries the lede a bit. It previously was 31.5x! Now html5ever is no longer the slowest!</p>",
        "id": 131931986,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533951766
    },
    {
        "content": "<p>At least a few percent improvement on almost every other test as well</p>",
        "id": 131932001,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533951817
    },
    {
        "content": "<p>wow awesome job! (and perf is running the PR as I write this)</p>",
        "id": 131943387,
        "sender_full_name": "lqd",
        "timestamp": 1533972717
    },
    {
        "content": "<p>That's awesome.</p>",
        "id": 131943724,
        "sender_full_name": "davidtwco",
        "timestamp": 1533973365
    },
    {
        "content": "<p>I’ll rerun the up-to-date versions once I’m back, and try and help simulacrum with the lightweight/daily tracking</p>",
        "id": 131945943,
        "sender_full_name": "lqd",
        "timestamp": 1533978181
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53258\">#53258</a> looks <a href=\"https://perf.rust-lang.org/compare.html?start=0aa8d0320266b5579428312095fe49af05ada972&amp;end=1cb82c2cd55f855bf84a37a9c20236fab3e9c685\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=0aa8d0320266b5579428312095fe49af05ada972&amp;end=1cb82c2cd55f855bf84a37a9c20236fab3e9c685\">pretty good</a>. Not quite as good as I had hoped...</p>",
        "id": 131947645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533981540
    },
    {
        "content": "<p>but very good on keccak</p>",
        "id": 131947651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533981554
    },
    {
        "content": "<p>the escaping paths and redundant borrows optimization worked beautifully <em>kisses fingers</em></p>",
        "id": 131948454,
        "sender_full_name": "lqd",
        "timestamp": 1533982967
    },
    {
        "content": "<p>yeah, I'm happy with that</p>",
        "id": 131948927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983762
    },
    {
        "content": "<p>I'm toying a bit with <a href=\"https://github.com/rust-lang/rust/issues/52460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52460\">https://github.com/rust-lang/rust/issues/52460</a> locally</p>",
        "id": 131948935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983777
    },
    {
        "content": "<p>I've been looking at cargo and some of the other cases</p>",
        "id": 131948937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983795
    },
    {
        "content": "<p>vs the outliers</p>",
        "id": 131948938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983797
    },
    {
        "content": "<p>and I have to admit that it is getting hard to see places to improve :/</p>",
        "id": 131948942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983805
    },
    {
        "content": "<p>I still think we'll be able to make further progress, but I think the best avenue is sort of stepping back and seeing if we can do things smarter</p>",
        "id": 131948974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983880
    },
    {
        "content": "<p>though I'd like to get njn's opinion, they have an eye for hotspots</p>",
        "id": 131949018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983887
    },
    {
        "content": "<p>I'll ping them on irc maybe (done)</p>",
        "id": 131949023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533983891
    },
    {
        "content": "<p>they do have an eye for hotspots, said eye which they put into writing the cachegrind tool :D</p>",
        "id": 131953719,
        "sender_full_name": "lqd",
        "timestamp": 1533991377
    },
    {
        "content": "<p>so good</p>",
        "id": 131953735,
        "sender_full_name": "lqd",
        "timestamp": 1533991423
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/4_gSXZuSY1iWBywpVBSXL6eY/IMG_0748.PNG\" target=\"_blank\" title=\"IMG_0748.PNG\">IMG_0748.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4_gSXZuSY1iWBywpVBSXL6eY/IMG_0748.PNG\" target=\"_blank\" title=\"IMG_0748.PNG\"><img src=\"/user_uploads/4715/4_gSXZuSY1iWBywpVBSXL6eY/IMG_0748.PNG\"></a></div>",
        "id": 132470096,
        "sender_full_name": "memoryruins",
        "timestamp": 1534786848
    },
    {
        "content": "<p>keccak no longer up top and tuple-stress is so far down the list</p>",
        "id": 132470147,
        "sender_full_name": "memoryruins",
        "timestamp": 1534786905
    },
    {
        "content": "<p>(html5ever is missing from the list since it doesn't currently build)</p>",
        "id": 132470262,
        "sender_full_name": "lqd",
        "timestamp": 1534787039
    },
    {
        "content": "<p>(rip)</p>",
        "id": 132470310,
        "sender_full_name": "memoryruins",
        "timestamp": 1534787052
    },
    {
        "content": "<p>curious if this will have noticeable change of html5ever build memory usage <a href=\"https://github.com/rust-lang/rust/pull/53384#issuecomment-414089811\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53384#issuecomment-414089811\">https://github.com/rust-lang/rust/pull/53384#issuecomment-414089811</a></p>",
        "id": 132470847,
        "sender_full_name": "memoryruins",
        "timestamp": 1534787616
    },
    {
        "content": "<p>it doesn't seem like max-rss changed</p>",
        "id": 132471045,
        "sender_full_name": "lqd",
        "timestamp": 1534787868
    },
    {
        "content": "<p>max-rss for html5ever is down significantly in <a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a>: <a href=\"https://perf.rust-lang.org/compare.html?start=50503497492e9bab8bc8c5ad3fe403a3a80276d3&amp;end=ed285b7a46c0949465c4c1af1d968de39cc1dbbc&amp;stat=max-rss\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=50503497492e9bab8bc8c5ad3fe403a3a80276d3&amp;end=ed285b7a46c0949465c4c1af1d968de39cc1dbbc&amp;stat=max-rss\">https://perf.rust-lang.org/compare.html?start=50503497492e9bab8bc8c5ad3fe403a3a80276d3&amp;end=ed285b7a46c0949465c4c1af1d968de39cc1dbbc&amp;stat=max-rss</a></p>",
        "id": 132471397,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534788220
    },
    {
        "content": "<p>wow, down to 600MB :)</p>",
        "id": 132471462,
        "sender_full_name": "lqd",
        "timestamp": 1534788258
    },
    {
        "content": "<p>Yeah, still a ways to go :)</p>",
        "id": 132471577,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534788438
    },
    {
        "content": "<p>640MB ought to be enough for anybody</p>",
        "id": 132478052,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534796040
    },
    {
        "content": "<p>except for my vps ;-; (really should upgrade that node..)</p>",
        "id": 132480235,
        "sender_full_name": "memoryruins",
        "timestamp": 1534798462
    },
    {
        "content": "<blockquote>\n<p>(html5ever is missing from the list since it doesn't currently build)</p>\n</blockquote>\n<p>wait what</p>",
        "id": 132523523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534864839
    },
    {
        "content": "<p>I missed that...</p>",
        "id": 132523526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534864845
    },
    {
        "content": "<p>why doesn't it build?</p>",
        "id": 132523530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534864849
    },
    {
        "content": "<p>the errors encountered by perf can be found in <a href=\"https://perf.rust-lang.org/status.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a></p>",
        "id": 132523642,
        "sender_full_name": "kennytm",
        "timestamp": 1534864936
    },
    {
        "content": "<p>caused by use_extern_macro i think</p>",
        "id": 132523656,
        "sender_full_name": "kennytm",
        "timestamp": 1534864973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n  --&gt; /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/string_cache-0.2.29/src/lib.rs:71:13\n   |\n71 |     pub use atom;\n   |             ^^^^\n   |\nnote: the macro is defined here\n  --&gt; /tmp/.tmpVgWdo3/target/debug/build/string_cache-3124df44a494850b/out/atom_macro.rs:2:1\n   |\n2  | / macro_rules! atom {\n3  | | (\\&quot;sdev\\&quot;) =&gt; { $crate::Atom { unsafe_data: 0x2 } };\n4  | | (\\&quot;onstart\\&quot;) =&gt; { $crate::Atom { unsafe_data: 0x100000002 } };\n5  | | (\\&quot;overflow\\&quot;) =&gt; { $crate::Atom { unsafe_data: 0x200000002 } };\n...  |\n127| | (\\&quot;stroke-miterlimit\\&quot;) =&gt; { $crate::Atom { unsafe_data: 0x4f400000002 } };\n127| | }\n   | |_^\n</pre></div>",
        "id": 132523680,
        "sender_full_name": "kennytm",
        "timestamp": 1534865003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> hmm -- seems .. bad? That was compiling on stable, I believe? Are we tracking this?</p>",
        "id": 132527076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> said it was needed but we can make it a future compat warning for now</p>",
        "id": 132527353,
        "sender_full_name": "simulacrum",
        "timestamp": 1534868954
    },
    {
        "content": "<p>ok</p>",
        "id": 132527360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868974
    },
    {
        "content": "<p>can we workaround for the purpose of perf? it's a shame to not be tracking html5ever...</p>",
        "id": 132527368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868997
    },
    {
        "content": "<p>Yeah I need to write up a patch, hoping for sometime today</p>",
        "id": 132527477,
        "sender_full_name": "simulacrum",
        "timestamp": 1534869105
    },
    {
        "content": "<p>(it's actually in a dependency, string-cache)</p>",
        "id": 132527485,
        "sender_full_name": "simulacrum",
        "timestamp": 1534869120
    },
    {
        "content": "<p>I believe it should be trivial to fix</p>",
        "id": 132527526,
        "sender_full_name": "simulacrum",
        "timestamp": 1534869130
    },
    {
        "content": "<p>so I did a bit of measurements on clap-rs. After <a href=\"https://github.com/rust-lang/rust/issues/53314\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53314\">#53314</a>, I get the following results (very coarse-grained, intentionally) for clap-rs:</p>\n<div class=\"codehilite\"><pre><span></span>athena. perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-min-percent 5 --tree-max-depth 2 --relative\nMatcher    : {do_mir_borrowck}\nMatches    : 91\nNot Matches: 378\nPercentage : 100%\n\nTree\n| matched `{do_mir_borrowck}` (100% total, 0% self)\n: | rustc_mir::dataflow::do_dataflow (41% total, 3% self)\n: : | &lt;rustc_mir::dataflow::DataflowAnalysis&lt;&#39;a, &#39;tcx, BD&gt;&gt;::propagate (15% total, 1% self) [...]\n: : | &lt;rustc_mir::dataflow::DataflowAnalysis&lt;&#39;a, &#39;tcx, D&gt;&gt;::propagate_bits_into_entry_set_for (14% total, 13% self) [...]\n: | rustc_mir::borrow_check::nll::compute_regions (37% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check (28% total, 0% self) [...]\n</pre></div>",
        "id": 132580658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534947565
    },
    {
        "content": "<p>based on this, it seems like <a href=\"https://github.com/rust-lang/rust/issues/53328\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53328\">#53328</a> might be a win (since it reduces the amount of dataflow we do), but it's a bit hard to tell (in particular, it'd be useful to separate out the various dataflows)</p>",
        "id": 132580735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534947612
    },
    {
        "content": "<p>improving the <code>compute_regions</code> and <code>type_check</code> code is the other avenue; I guess more digging is in order there</p>",
        "id": 132580757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534947647
    },
    {
        "content": "<p>did some more measurements. This time I broke down the dataflow by inserting dummy fns</p>",
        "id": 132669190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071722
    },
    {
        "content": "<p>It looks like <code>flow_inits</code>, <code>flow_ever_inits</code>, and <code>flow_move_outs</code> each compromise about 1/3 of the dataflow time</p>",
        "id": 132669207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071772
    },
    {
        "content": "<p>this explains why <a href=\"https://github.com/rust-lang/rust/issues/53394\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53394\">#53394</a> is a win (which <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you and I have to get working on again)</p>",
        "id": 132669211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071792
    },
    {
        "content": "<p>it is kind of amazing that <code>flow_ever_inits</code> is so expensive</p>",
        "id": 132669243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071802
    },
    {
        "content": "<p>I think we are computing way more bits there than we probably have to</p>",
        "id": 132669262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071810
    },
    {
        "content": "<p>however <a href=\"https://github.com/rust-lang/rust/issues/53328\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53328\">#53328</a> is less obviously going to be a win -- it <em>might</em> be, but it won't really come from skipping the dataflow per se</p>",
        "id": 132669270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071843
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/ikftdgnaUD2LQoKQz91Iwa7W/Screen-Shot-2018-08-23-at-8.51.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-23-at-8.51.01-PM.png\">Screen-Shot-2018-08-23-at-8.51.01-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ikftdgnaUD2LQoKQz91Iwa7W/Screen-Shot-2018-08-23-at-8.51.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-23-at-8.51.01-PM.png\"><img src=\"/user_uploads/4715/ikftdgnaUD2LQoKQz91Iwa7W/Screen-Shot-2018-08-23-at-8.51.01-PM.png\"></a></div>",
        "id": 132669280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071876
    },
    {
        "content": "<p>that's the relevant part of the profile</p>",
        "id": 132669281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071880
    },
    {
        "content": "<p>(those are \"percent of time spent in borrowck\")</p>",
        "id": 132669289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071912
    },
    {
        "content": "<p>also, this is a handy macro</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">inline_never</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$body</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"cp\">$name</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$name</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"cp\">$body</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132669350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071975
    },
    {
        "content": "<p>have to keep that in my back pocket...</p>",
        "id": 132669352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535071981
    },
    {
        "content": "<p>you can basically do <code>let foo = inline_never!(bar, something);</code> and the time spent evaluating <code>something</code> will show up in the profile labeled <code>bar</code></p>",
        "id": 132669363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535072002
    },
    {
        "content": "<p>yeah so we only ever lookup locals in the ever_inits map</p>",
        "id": 132669426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535072057
    },
    {
        "content": "<p>though this could plausibly change in the future</p>",
        "id": 132669427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535072078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let’s get into it whenever you want/like <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 132671582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535076367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does this look correct to you ? <a href=\"https://github.com/rust-lang-nursery/rustc-perf/pull/278\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/pull/278\">https://github.com/rust-lang-nursery/rustc-perf/pull/278</a></p>",
        "id": 132704405,
        "sender_full_name": "lqd",
        "timestamp": 1535127370
    },
    {
        "content": "<p>oh but there's CI so we'll see soon enough :)</p>",
        "id": 132704408,
        "sender_full_name": "lqd",
        "timestamp": 1535127402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Left a comment, but looks good</p>",
        "id": 132704428,
        "sender_full_name": "simulacrum",
        "timestamp": 1535127476
    },
    {
        "content": "<p>only one run coming up</p>",
        "id": 132704471,
        "sender_full_name": "lqd",
        "timestamp": 1535127499
    },
    {
        "content": "<p>done</p>",
        "id": 132704542,
        "sender_full_name": "lqd",
        "timestamp": 1535127624
    },
    {
        "content": "<p>Ping me when CI passes but I'll try to check in later today as well</p>",
        "id": 132704556,
        "sender_full_name": "simulacrum",
        "timestamp": 1535127668
    },
    {
        "content": "<p>how long does CI usually take ?</p>",
        "id": 132704566,
        "sender_full_name": "lqd",
        "timestamp": 1535127700
    },
    {
        "content": "<p>(answering my own question, and for people at home, from travis' history, around 30-40mins)</p>",
        "id": 132704686,
        "sender_full_name": "lqd",
        "timestamp": 1535127855
    },
    {
        "content": "<p>And this is with servo's and cargo removed because benchmarks are so slow....</p>",
        "id": 132704844,
        "sender_full_name": "simulacrum",
        "timestamp": 1535128085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I waited patiently for it ... to fail, because even though I knew a Cargo.lock was needed, the crate .gitignore'd and I didn't notice :)</p>",
        "id": 132706409,
        "sender_full_name": "lqd",
        "timestamp": 1535129959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> CI's green <a href=\"https://github.com/rust-lang-nursery/rustc-perf/pull/278\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/pull/278\">https://github.com/rust-lang-nursery/rustc-perf/pull/278</a></p>",
        "id": 132710038,
        "sender_full_name": "lqd",
        "timestamp": 1535133885
    },
    {
        "content": "<p>ok so I automated a bit of the timings similar to rustc-perf (but I can't use <code>perf</code> so it's just manual), it's more destined to be informative (as I don't have the same exact profiles as perf.rlo, and I might have made mistakes) but this is on the nightly from 2 days ago, looking good I think (if accurate...):</p>\n<table>\n<thead>\n<tr>\n<th>crate</th>\n<th align=\"right\">version</th>\n<th align=\"right\"><code>cargo check</code> range</th>\n<th align=\"right\">NLL <code>cargo check</code> range</th>\n<th align=\"right\">min ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cargo</td>\n<td align=\"right\">perf.rlo – 0.29.0 69d61e</td>\n<td align=\"right\">8158 ms - 8879 ms</td>\n<td align=\"right\">8953 ms - 9139 ms</td>\n<td align=\"right\">1.09</td>\n</tr>\n<tr>\n<td>cargo</td>\n<td align=\"right\">master – 0.30.0 4e53ce</td>\n<td align=\"right\">8512 ms - 8856 ms</td>\n<td align=\"right\">9342 ms - 9374 ms</td>\n<td align=\"right\">1.09</td>\n</tr>\n<tr>\n<td>clap-rs</td>\n<td align=\"right\">perf.rlo – 2.29.0</td>\n<td align=\"right\">4241 ms - 4486 ms</td>\n<td align=\"right\">5342 ms - 5552 ms</td>\n<td align=\"right\">1.26</td>\n</tr>\n<tr>\n<td>clap-rs</td>\n<td align=\"right\">latest – 2.32.0</td>\n<td align=\"right\">2674 ms - 2720 ms</td>\n<td align=\"right\">2936 ms - 2968 ms</td>\n<td align=\"right\">1.09</td>\n</tr>\n<tr>\n<td>html5ever</td>\n<td align=\"right\">perf.rlo – 0.5.4</td>\n<td align=\"right\">2203 ms - 2394 ms</td>\n<td align=\"right\">TODO</td>\n<td align=\"right\">TODO</td>\n</tr>\n<tr>\n<td>html5ever</td>\n<td align=\"right\">latest – 0.22.3</td>\n<td align=\"right\">1416 ms - 1449 ms</td>\n<td align=\"right\">1532 ms - 1564 ms</td>\n<td align=\"right\">1.08</td>\n</tr>\n<tr>\n<td>hyper</td>\n<td align=\"right\">perf.rlo – 0.5.0</td>\n<td align=\"right\">1584 ms - 1650 ms</td>\n<td align=\"right\">1687 ms - 1773 ms</td>\n<td align=\"right\">1.06</td>\n</tr>\n<tr>\n<td>hyper</td>\n<td align=\"right\">latest – 0.12.7</td>\n<td align=\"right\">2311 ms - 2464 ms</td>\n<td align=\"right\">2454 ms - 2742 ms</td>\n<td align=\"right\">1.06</td>\n</tr>\n<tr>\n<td>inflate</td>\n<td align=\"right\">perf.rlo – 0.1.0</td>\n<td align=\"right\">1836 ms - 1882 ms</td>\n<td align=\"right\">2286 ms - 2369 ms</td>\n<td align=\"right\">1.24</td>\n</tr>\n<tr>\n<td>inflate</td>\n<td align=\"right\">latest – 0.4.3</td>\n<td align=\"right\">507 ms - 537 ms</td>\n<td align=\"right\">540 ms - 629 ms</td>\n<td align=\"right\">1.06</td>\n</tr>\n<tr>\n<td>piston-image</td>\n<td align=\"right\">perf.rlo – 0.10.3</td>\n<td align=\"right\">2279 ms - 2490 ms</td>\n<td align=\"right\">2438 ms - 2597 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n<tr>\n<td>piston-image</td>\n<td align=\"right\">latest – 0.19.0</td>\n<td align=\"right\">2727 ms - 2944 ms</td>\n<td align=\"right\">2912 ms - 2948 ms</td>\n<td align=\"right\">1.06</td>\n</tr>\n<tr>\n<td>ripgrep</td>\n<td align=\"right\">perf.rlo – 0.8.1 a383d5</td>\n<td align=\"right\">1284 ms - 1326 ms</td>\n<td align=\"right\">1374 ms - 1465 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n<tr>\n<td>ripgrep</td>\n<td align=\"right\">master – 0.8.1 d857ad</td>\n<td align=\"right\">1310 ms - 1315 ms</td>\n<td align=\"right\">1404 ms - 1551 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n<tr>\n<td>serde</td>\n<td align=\"right\">perf.rlo – 1.0.37 6e206c</td>\n<td align=\"right\">5273 ms - 5324 ms</td>\n<td align=\"right\">5886 ms - 6241 ms</td>\n<td align=\"right\">1.11</td>\n</tr>\n<tr>\n<td>serde</td>\n<td align=\"right\">master – 1.0.70 4e54aa</td>\n<td align=\"right\">5785 ms - 6277 ms</td>\n<td align=\"right\">6023 ms - 6088 ms</td>\n<td align=\"right\">1.04</td>\n</tr>\n<tr>\n<td>style-servo</td>\n<td align=\"right\">perf.rlo</td>\n<td align=\"right\">32209 ms - 33289 ms</td>\n<td align=\"right\">34631 ms - 35339 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n<tr>\n<td>syn</td>\n<td align=\"right\">perf.rlo – 0.11.11</td>\n<td align=\"right\">1131 ms - 1206 ms</td>\n<td align=\"right\">1217 ms - 1258 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n<tr>\n<td>syn</td>\n<td align=\"right\">latest – 0.14.5</td>\n<td align=\"right\">2031 ms - 2138 ms</td>\n<td align=\"right\">2111 ms - 2259 ms</td>\n<td align=\"right\">1.04</td>\n</tr>\n<tr>\n<td>ucd</td>\n<td align=\"right\">perf.rlo</td>\n<td align=\"right\">6533 ms - 6809 ms</td>\n<td align=\"right\">54169 ms - 55417 ms</td>\n<td align=\"right\">I don't wanna talk about it ok it's 8.29</td>\n</tr>\n<tr>\n<td>webrender</td>\n<td align=\"right\">perf.rlo – 0.57.2 bb354a</td>\n<td align=\"right\">4152 ms - 4369 ms</td>\n<td align=\"right\">4480 ms - 4826 ms</td>\n<td align=\"right\">1.08</td>\n</tr>\n<tr>\n<td>webrender</td>\n<td align=\"right\">master – 0.57.2 cf9b7803</td>\n<td align=\"right\">4312 ms - 4609 ms</td>\n<td align=\"right\">4618 ms - 4816 ms</td>\n<td align=\"right\">1.07</td>\n</tr>\n</tbody>\n</table>",
        "id": 132942125,
        "sender_full_name": "lqd",
        "timestamp": 1535484556
    },
    {
        "content": "<p>\\o/ nice</p>",
        "id": 132942145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535484591
    },
    {
        "content": "<p>(that was with 3 warmups builds + 5 timed builds, and the min ratio between those, a mean would be more realistic but less good looking ;)</p>",
        "id": 132942355,
        "sender_full_name": "lqd",
        "timestamp": 1535484734
    }
]