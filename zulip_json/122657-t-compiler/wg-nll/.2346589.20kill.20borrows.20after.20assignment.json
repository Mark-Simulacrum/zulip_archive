[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Picked up this issue today to finish it off, doesn't look like there's much to do. I've got a fix locally that's a really minor change but it isn't what you suggested in the issue, so just want to double check I've not did something too naive.</p>\n<p>Am I right in understanding that the original issue was that if you assigned into a variable then that didn't kill any borrows of a projection of that variable? And what wasn't then finished was that if you assigned into a projection, instead of directly into a local, then it still doesn't kill any borrows.</p>\n<p>I've got a naive fix that effectively just makes it work for deref projections too - this removes the error on the remaining test case you had in a comment. Am I right in my understanding that we don't actually want all borrows of a local to get killed for other types of projections - eg. field accesses, indexing? It doesn't touch the place conflict code that you suggested (though I did implement the change you suggested before being unable to work out where it fit into the problem).</p>",
        "id": 151013855,
        "sender_full_name": "davidtwco",
        "timestamp": 1544109640
    },
    {
        "content": "<p>I'll have to refresh my memory, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 151017116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544111916
    },
    {
        "content": "<p>No worries, appreciate you taking a look.</p>",
        "id": 151017133,
        "sender_full_name": "davidtwco",
        "timestamp": 1544111932
    },
    {
        "content": "<p>(just submitted a WIP PR with what I had for this, only because I'll forget I did it otherwise)</p>",
        "id": 151231013,
        "sender_full_name": "davidtwco",
        "timestamp": 1544379895
    },
    {
        "content": "<blockquote>\n<p>Am I right in my understanding that we don't actually want all borrows of a local to get killed for other types of projections - eg. field accesses, indexing?</p>\n</blockquote>\n<p>Definitely not. Assigning to <code>x.f</code>should not kill loans of <code>*x.g</code>, since this would allow a second mutable borrow of <code>*x.g</code>.</p>",
        "id": 151232043,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1544381763
    },
    {
        "content": "<blockquote>\n<p>Definitely not. Assigning to <code>x.f</code>should not kill loans of <code>*x.g</code>, since this would allow a second mutable borrow of <code>*x.g</code>.</p>\n</blockquote>\n<p>Does that mean my understanding is definitely not correct, or we definitely don't want all borrows killed for other types of projections?</p>",
        "id": 151232462,
        "sender_full_name": "davidtwco",
        "timestamp": 1544382356
    },
    {
        "content": "<p>I'm having a real hard time parsing sentences today and I don't know why.</p>",
        "id": 151232505,
        "sender_full_name": "davidtwco",
        "timestamp": 1544382369
    },
    {
        "content": "<p>We definitely don't want assigning to a projection to kill all borrows of places with the same base.</p>",
        "id": 151232790,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1544382923
    },
    {
        "content": "<p>I think I realised what was intended by Niko‚Äôs notes on the issue last night. Hold off on reviewing until I‚Äôve had a chance to revisit the PR. <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span>üèª‚Äç‚ôÇÔ∏è</p>",
        "id": 151256037,
        "sender_full_name": "davidtwco",
        "timestamp": 1544427945
    },
    {
        "content": "<p>I think I meant for assignments to <code>x.f</code> to kill all borrows of <code>x.f.*</code>, basically</p>",
        "id": 151561521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646839
    },
    {
        "content": "<p>The main thing I wasn't sure of was, after generalizing the conflicting places logic like you described, what place should I check for conflict with?</p>",
        "id": 151561625,
        "sender_full_name": "davidtwco",
        "timestamp": 1544646914
    },
    {
        "content": "<p>I've tried a few things and couldn't find something that seemed quite right.</p>",
        "id": 151561634,
        "sender_full_name": "davidtwco",
        "timestamp": 1544646926
    },
    {
        "content": "<p>remind me <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, is there a PR? it's a bit out of cache but I can take a look</p>",
        "id": 151563270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544648446
    },
    {
        "content": "<p>There is, but it's with the initial naive fix that didn't do anything with places conflicting.</p>",
        "id": 151563301,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648466
    },
    {
        "content": "<p>I've not pushed my experimenting with the place conflict code route yet.</p>",
        "id": 151563312,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648478
    },
    {
        "content": "<p>ok well give me a sec and I can maybe remember :)</p>",
        "id": 151563458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544648597
    },
    {
        "content": "<p>I mostly experimented with doing the place conflict with the base local being assigned into and then the actual place that was being assigned into.</p>",
        "id": 151563634,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648749
    },
    {
        "content": "<p>So, <code>_1</code> and <code>(*(_1.0))</code> for example. Hoping that it would consider something like <code>_1</code> and <code>*(_1)</code> in conflict and therefore can be killed and something like <code>_1</code> and <code>(*(_1.0))</code> not and therefore not killed. But it didn't quite work out like that - it was close. After tweaking the <code>BorrowKind</code> and <code>AccessDepth</code> parameters a bunch (since they don't really make sense in this context as far as I understand) I got it so that one or the other worked.</p>",
        "id": 151563774,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648864
    },
    {
        "content": "<p>(or something along those lines, I've still got the working directory so I can check)</p>",
        "id": 151563785,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648881
    },
    {
        "content": "<p>I'm a bit confused</p>",
        "id": 151563968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649039
    },
    {
        "content": "<p>ah, you are considering using that function to decide whether something is killed?</p>",
        "id": 151563977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649049
    },
    {
        "content": "<p>I think that's probably not the right one to use</p>",
        "id": 151563979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649056
    },
    {
        "content": "<p>I think the RFC basically imagined just using a strict notion of \"prefix\" -- i.e., if you assign to some place P0, then you find all loans of any <code>Place</code> with P0 as a base and kill them</p>",
        "id": 151564004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649088
    },
    {
        "content": "<p>You mentioned it in the issue, so figured I'd need it somewhere, couldn't think of where initially and then a few days later thought \"hmm, maybe it is for deciding to kill things\" and experimented with that.</p>",
        "id": 151564005,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649090
    },
    {
        "content": "<p>That's what my understanding was.</p>",
        "id": 151564013,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649105
    },
    {
        "content": "<p>this sort of kills more than necessary, but in some of those cases the assignment itself is illegal</p>",
        "id": 151564016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649107
    },
    {
        "content": "<p>I just tried to find a way to use that function.</p>",
        "id": 151564018,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649111
    },
    {
        "content": "<p>Since it was mentioned.</p>",
        "id": 151564023,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649114
    },
    {
        "content": "<p>well</p>",
        "id": 151564026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649119
    },
    {
        "content": "<p>let me re-read the issue :)</p>",
        "id": 151564028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649122
    },
    {
        "content": "<p>ok, ok, <em>right</em></p>",
        "id": 151564086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649161
    },
    {
        "content": "<p>I'm trying to decide if I was right to mention that function</p>",
        "id": 151564135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649233
    },
    {
        "content": "<p>in other words: what I wrote is all true</p>",
        "id": 151564137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649240
    },
    {
        "content": "<p>well I guess it's just that we don't have an efficient way to compare places per se</p>",
        "id": 151564197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649283
    },
    {
        "content": "<p>I tried to look through Gitter to see if there was some context of how it would be used that the issue assumed as known, but couldn't see anything.</p>",
        "id": 151564198,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649283
    },
    {
        "content": "<p>apart from <code>places_conflict</code></p>",
        "id": 151564202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649289
    },
    {
        "content": "<p>but <code>places_conflict</code> is really written (as I wrote) for a different purpose:</p>",
        "id": 151564209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649297
    },
    {
        "content": "<p>it is used to say: if you have a loan of the place <code>P</code> and an access to the place <code>P2</code>, does that access potentially overlap with the borrowed place <code>P</code>?</p>",
        "id": 151564235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649321
    },
    {
        "content": "<p>naturally that wants to be conservative: if P2 <em>may</em> overlap P, it returns true</p>",
        "id": 151564245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649332
    },
    {
        "content": "<p>anyway I suspect you just want to write a separate function in the end</p>",
        "id": 151564311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649375
    },
    {
        "content": "<p>Yeah, I think I've implemented giving that function a bias toward overlapping or not (at least for the <code>j[x]</code> case).</p>",
        "id": 151564318,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649386
    },
    {
        "content": "<p>something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">assignment_kills_loan</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assigned_place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Place</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">borrowed_place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Place</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151564330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649406
    },
    {
        "content": "<p>Where would I get the <code>borrowed_place</code> from?</p>",
        "id": 151564355,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649439
    },
    {
        "content": "<p>well e.g. in <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/borrow_check/nll/constraint_generation.rs#L139-L151\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/borrow_check/nll/constraint_generation.rs#L139-L151\">the polonius code</a> you can find it in the loop, I'm trying to find the other code</p>",
        "id": 151564383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649476
    },
    {
        "content": "<p>(incidentally, I think that Simon's example from the issue is not going to be fixed by this issue, but rather requires polonius)</p>",
        "id": 151564453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649506
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/dataflow/impls/borrows.rs#L238-L242\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/dataflow/impls/borrows.rs#L238-L242\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/dataflow/impls/borrows.rs#L238-L242</a></p>",
        "id": 151564454,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649507
    },
    {
        "content": "<p>right, just found it</p>",
        "id": 151564475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649548
    },
    {
        "content": "<p>(I had a working fix for that in the PR as it is by just extending the existing code to accept <code>*_1</code> as a kill for <code>_1</code> as well as <code>_1</code> - not sure if that is correct though, but only that test changed)</p>",
        "id": 151564476,
        "sender_full_name": "davidtwco",
        "timestamp": 1544649550
    },
    {
        "content": "<p>the naive thing of course would be to iterate over all the borrows</p>",
        "id": 151564490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649574
    },
    {
        "content": "<p>but that will kill perf</p>",
        "id": 151564492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649577
    },
    {
        "content": "<p>I suppose we'd want to index them in some way such that we can walk down the assigned path</p>",
        "id": 151564500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649595
    },
    {
        "content": "<p>it feels like a lot of work :) but an ideal thing would be some sort of tree I guess</p>",
        "id": 151564552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649607
    },
    {
        "content": "<p>this would all be easier/nicer if <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>'s refactoring were landed -- I need to get back to them on that <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 151564580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649631
    },
    {
        "content": "<p>so e.g. if there were borrows of <code>a.b</code> and <code>a.c</code> and <code>a.c.d</code>, you could imagine some sort of tree like:</p>\n<div class=\"codehilite\"><pre><span></span>a\n|- b\n|- c\n   |- d\n</pre></div>\n\n\n<p>then when you have an assignment to (say) <code>a.c</code>, you'd walk down to that node and kill all the borrows in that node or its descendants</p>",
        "id": 151564667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649685
    },
    {
        "content": "<p>(gotta run)</p>",
        "id": 151564674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544649690
    },
    {
        "content": "<p>I've updated this PR so the approach it takes is now much more reasonable. There's one test that has less errors that isn't ideal, but I'm not really sure how to work around that case - it isn't wrong necessarily, but it's not great.</p>",
        "id": 152023538,
        "sender_full_name": "davidtwco",
        "timestamp": 1545049904
    },
    {
        "content": "<p>I wrote a few more comments (on the issue), mostly explaining the code to myself as I went</p>",
        "id": 152026092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545052819
    },
    {
        "content": "<p>The only real issue I have is the one about whether we need to look at <code>propagate_call_return</code> as well. But to be honest, that might be left over (as in, whatever earlier PR started inspecting the <code>Local</code> should also have made changes to <code>propagate_call_return</code> ...</p>",
        "id": 152026135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545052881
    },
    {
        "content": "<p>I think your PR as it stands is sound. And given the conditional nature of the overwrite caused in <code>propagate_call_return</code>, <del>I think you should not do the similar <code>kill_borrows</code> over there.</del> Update: no, I don't know what to think yet....</p>",
        "id": 152026224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545052962
    },
    {
        "content": "<p><del>So I think I just answered my own Q.</del></p>",
        "id": 152026230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545052969
    },
    {
        "content": "<p>A bit of explanation here: <code>propagate_call_return</code> is a hack that is working around the fact that our data-flow system is not designed to be as general purpose as we really require.</p>",
        "id": 152026325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053072
    },
    {
        "content": "<p>In particular, we (I) designed it so that most of the interesting effects on the dataflow bitsets occur at the statement level, as we progress directly from statement to statement</p>",
        "id": 152026353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053116
    },
    {
        "content": "<p>The problem with that model is that a <code>Terminator::Call</code> has a side-effect that is control-flow dependent: On a successful call, it will overwrite the given <code>dest_place</code>. On a call that unwinds (e.g. due to panic), it will not overwrite the given <code>dest_place</code>.</p>",
        "id": 152026442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053182
    },
    {
        "content": "<p>So the hack is that in the dataflow system itself, we add in those control-flow edge effects while we are doing the fixed-point iteration.</p>",
        "id": 152026460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053218
    },
    {
        "content": "<p>that (if my memory correctly matches the current state of the code) is the purpose of <code>propagate_call_return</code>.</p>",
        "id": 152026494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053249
    },
    {
        "content": "<p>Let me just catch up with what you've written.</p>",
        "id": 152026583,
        "sender_full_name": "davidtwco",
        "timestamp": 1545053329
    },
    {
        "content": "<p>In particular, <code>propagate_call_return</code> is <em>only</em> invoked to update the dataflow bitset when the control flow traverses from the call's basic block (every call is a terminator, so there is a mapping from every call to its unique BB) to the basic block that we jump to on successful (non-unwinding) call.</p>",
        "id": 152026698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053441
    },
    {
        "content": "<p>And the main effect you want to model in that scenario is that the <code>dest_place</code> will be overwritten, <em>just</em> as it is by an <code>Assign</code> statement.</p>",
        "id": 152026721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053473
    },
    {
        "content": "<p>(I'm starting to wonder if we'd just be better served with a default method  in the <code>DataflowAnalysis</code> trait that just said \"this is called for assignment-like things, namely Assign statements and a successful return from a Call terminator\" ...)</p>",
        "id": 152026807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053548
    },
    {
        "content": "<p>So this is all a long-winded way of me saying: \"I think the same code that you've added to the Assign case might also be good to add to the propagate_call_return method.\" It should be <em>sound</em> for you to leave it out, but I think it will also be sound for you to put it in, and will lead to us accepting more code.</p>",
        "id": 152026843,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053608
    },
    {
        "content": "<p>But to confirm this I guess I should make some illustrative example.</p>",
        "id": 152026864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545053628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I know I wrote a lot (both here and on the PR) and maybe you want to finish reading it all before you answer Q's, but here's maybe a simple one: Would you prefer me to r+ this one now, and leave the <code>propagate_call_return</code> generalization for later? Or do you feel like trying to throw that in with a follow-on commit + testcase?</p>",
        "id": 152028043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054605
    },
    {
        "content": "<p>Pushed a commit with better comments.</p>",
        "id": 152028047,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054607
    },
    {
        "content": "<p>I'm happy to add it in.</p>",
        "id": 152028068,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054623
    },
    {
        "content": "<p>It doesn't sound like a large change.</p>",
        "id": 152028077,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054631
    },
    {
        "content": "<p>Yeah I think the hardest part might be adding a test</p>",
        "id": 152028088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054641
    },
    {
        "content": "<p>since I'm not certain whether you can even generate code that would get into the case</p>",
        "id": 152028097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054655
    },
    {
        "content": "<p>I.e. I may be wrong but based on the way we generated MIR today, calls might always write into locals</p>",
        "id": 152028111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054667
    },
    {
        "content": "<p>In that case, r+ and file a follow-up if you're happy with the new comments?</p>",
        "id": 152028123,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054680
    },
    {
        "content": "<p>(but then again ... there's not even code to handle <em>locals</em> yet in <code>propagate_call_return</code>, right? That's sort of what I was getting at when I said I wasn't sure whether people in the past had been acknowledging the comment in the first place.)</p>",
        "id": 152028165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054709
    },
    {
        "content": "<p>It's really easy to glaze over and not really notice those comments if they don't seem immediately relevant.</p>",
        "id": 152028234,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054745
    },
    {
        "content": "<p>I know.</p>",
        "id": 152028246,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054756
    },
    {
        "content": "<p>I'm guilty of it too</p>",
        "id": 152028256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054764
    },
    {
        "content": "<p>Does this demonstrate your case?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![allow(warnings)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nll_fail</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"sc\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">&#39;c&#39;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">capitalize</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">capitalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"sc\">&#39;e&#39;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// one error here if assign &#39;e&#39; directly, one error here if call</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">capitalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"sc\">&#39;f&#39;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// one error here if call</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">capitalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"sc\">&#39;g&#39;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// one error here if call</span>\n<span class=\"w\">    </span><span class=\"n\">capitalize</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">capitalize</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">char</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sc\">&#39;f&#39;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>It's similar to the <code>loan_ends_mid_block_pair</code> test - but instead of assigning characters directly into <code>data.0</code> (which as of this PR, produces one error), it produces three errors when replaced with a call?</p>",
        "id": 152028425,
        "sender_full_name": "davidtwco",
        "timestamp": 1545054953
    },
    {
        "content": "<p>Hmm. So am I right in my understanding that this change didn't turn any test from compile-fail into run-pass, and the only place where you saw anything like that was in <code>src/test/ui/nll/loan_ends_mid_block_pair.rs</code> (where you removed two Mir cases in the borrowck=compare output) ?</p>",
        "id": 152028472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545054968
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 152028522,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055014
    },
    {
        "content": "<blockquote>\n<p>It's similar to the <code>loan_ends_mid_block_pair</code> test - but instead of assigning characters directly into <code>data.0</code> (which as of this PR, produces one error), it produces three errors when replaced with a call?</p>\n</blockquote>\n<p>Yes I think that (putting a call on the RHS rather than a more-trivial expression) is exactly what I expected to illustrate the difference.</p>",
        "id": 152028537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055028
    },
    {
        "content": "<p>I wasn't sure that was better, but couldn't see a way around it.</p>",
        "id": 152028545,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055036
    },
    {
        "content": "<p>You should add the example (perhaps adapted in some way) from <a href=\"https://github.com/rust-lang/rust/issues/46589\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46589\">#46589</a> as an explicit run-pass test, IMO.</p>",
        "id": 152028574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055067
    },
    {
        "content": "<p>i.e. solely relying on the change from <code>load_ends_mid_block_pair</code> to illustrate/test the increased expressiveness here is too subtle, in my opinion.</p>",
        "id": 152028633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055096
    },
    {
        "content": "<p>Yeah, the test as was there had another error that remained after this.</p>",
        "id": 152028634,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055097
    },
    {
        "content": "<p>There is a test from that issue that I added.</p>",
        "id": 152028638,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055106
    },
    {
        "content": "<p>Just not as run-pass.</p>",
        "id": 152028646,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055117
    },
    {
        "content": "<p>right, the one you added was a compile-fail to double-check that we don't generalize <strong>too</strong> much, right?</p>",
        "id": 152028661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055133
    },
    {
        "content": "<p>No, it's exactly what was on the issue, it removed the error that it was supposed to with assigning into a deref projection but there was another unrelated error that test case would cause.</p>",
        "id": 152028685,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055172
    },
    {
        "content": "<p>what about the example that SimonSapin had posted to that issue? Does that pass under your branch, or does it still error then too?</p>",
        "id": 152028686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055175
    },
    {
        "content": "<p>(as far as I understood it)</p>",
        "id": 152028688,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055177
    },
    {
        "content": "<p>Forgot to try that one.</p>",
        "id": 152028697,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055186
    },
    {
        "content": "<p>In some ways thats the most important one to get working, since that represents a real \"customer request\" <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152028760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055215
    },
    {
        "content": "<p>It looks like it gets the same error.</p>",
        "id": 152028806,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055257
    },
    {
        "content": "<p>ah well that's too bad.</p>",
        "id": 152028871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055315
    },
    {
        "content": "<p>I'll look into it and see if I can't add something to <code>propagate_call_return</code> for that too.</p>",
        "id": 152028927,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055330
    },
    {
        "content": "<p>let me look again at the test you added and see if I can tease out a run-pass test that won't hit the error then</p>",
        "id": 152028931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055332
    },
    {
        "content": "<p>oh also, if you can</p>",
        "id": 152028953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055354
    },
    {
        "content": "<p>try to make a different title for your PR than the text of the issue it fixes</p>",
        "id": 152028974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055373
    },
    {
        "content": "<p>Sure, that's all I've done for the last 50 PRs or something because it meant I didn't need to get creative.</p>",
        "id": 152028997,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055406
    },
    {
        "content": "<p>I think bors includes the title in the commit message, but more importantly, different text helps people like me who have the issue and the PR in two different tabs in one browser window.</p>",
        "id": 152029010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055428
    },
    {
        "content": "<p>Fair enough, I'll do that in future.</p>",
        "id": 152029059,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055451
    },
    {
        "content": "<p>It's annoying that <code>propagate_call_return</code> takes a <code>BitSet</code> rather than the <code>BlockSets</code> of <code>statement_effect</code>.</p>",
        "id": 152029243,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055627
    },
    {
        "content": "<p>Makes this a tad more work.</p>",
        "id": 152029252,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055636
    },
    {
        "content": "<p>Well</p>",
        "id": 152029265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055648
    },
    {
        "content": "<p>I think the intent was that the effect of a call could be non-local</p>",
        "id": 152029274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055657
    },
    {
        "content": "<p>Yeah, it makes sense, just adds a little friction to this change.</p>",
        "id": 152029286,
        "sender_full_name": "davidtwco",
        "timestamp": 1545055672
    },
    {
        "content": "<p>but maybe it should have done the look up for the blockset for the call block and the dest block</p>",
        "id": 152029332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055684
    },
    {
        "content": "<p>and passed those two blocks in</p>",
        "id": 152029338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545055688
    },
    {
        "content": "<p>Ran into an error that might need improved:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0521]: borrowed data escapes outside of function\n   --&gt; src/librustc_mir/dataflow/impls/borrows.rs:391:9\n    |\n385 |         &amp;self,\n    |         ----- `self` is declared here, outside of the function body\n...\n389 |         dest_place: &amp;mir::Place,\n    |         ---------- `dest_place` is a reference that is only valid in the function body\n390 |     ) {\n391 |         self.kill_borrows_on_call_return(in_out, dest_place);\n| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dest_place` escapes the function body here\n</pre></div>",
        "id": 152030112,
        "sender_full_name": "davidtwco",
        "timestamp": 1545056286
    },
    {
        "content": "<p>Doesn't make sense to me that parameters should simultaneously be in and outside the function body.</p>",
        "id": 152030139,
        "sender_full_name": "davidtwco",
        "timestamp": 1545056310
    },
    {
        "content": "<p>You know its <em>possible</em> fixing the <code>propagate_call_return</code> could help with the test you added, since that <em>is</em> a method call happening in <code>None =&gt; (*other).new_self()</code>... not sure yet.</p>",
        "id": 152030143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056313
    },
    {
        "content": "<p>I'm finding the borrow checker surprisingly impenetrable being able to call a function from this <code>propagate_call_return</code> function.</p>",
        "id": 152031924,
        "sender_full_name": "davidtwco",
        "timestamp": 1545057660
    },
    {
        "content": "<p>okay. Maybe just file a follow-up issue and don't worry about this now.</p>",
        "id": 152032090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057802
    },
    {
        "content": "<p>It should be easy enough to do, but I just can't get the lifetimes to work out in order to use <code>self</code> from <code>propagate_call_return</code>.</p>",
        "id": 152032970,
        "sender_full_name": "davidtwco",
        "timestamp": 1545058417
    },
    {
        "content": "<p>I assume you've already skimmed over other impls of <code>fn propagate_call_return</code>  for inspiration?</p>",
        "id": 152033244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058585
    },
    {
        "content": "<p>Yeah, they either don't use <code>dest_place</code> or call some function on it to get owned data (such as <code>MoveData</code>) and then use that in combination with something from <code>self</code> and then that seems to work.</p>",
        "id": 152033315,
        "sender_full_name": "davidtwco",
        "timestamp": 1545058645
    },
    {
        "content": "<p>I think it ends up being this that is the issue:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n   --&gt; src/librustc_mir/dataflow/impls/borrows.rs:398:55\n    |\n286 | impl&lt;&#39;a, &#39;gcx, &#39;tcx&gt; BitDenotation for Borrows&lt;&#39;a, &#39;gcx, &#39;tcx&gt; {\n    |      -- lifetime `&#39;a` defined here\n...\n396 |         dest_place: &amp;mir::Place,\n    |         ---------- has type `&amp;rustc::mir::Place&lt;&#39;1&gt;`\n397 |     ) {\n398 |         kill_borrows_on_call_return(&amp;self.borrow_set, self.tcx, self.mir, in_out, dest_place);\n    |                                                       ^^^^^^^^ copying this value requires that `&#39;1` must outlive `&#39;a`\n</pre></div>",
        "id": 152033717,
        "sender_full_name": "davidtwco",
        "timestamp": 1545058980
    },
    {
        "content": "<p>(after moving things around to get rid of some errors)</p>",
        "id": 152033729,
        "sender_full_name": "davidtwco",
        "timestamp": 1545058991
    },
    {
        "content": "<p>If I manually specify <code>Place&lt;'tcx&gt;</code> then I can never get it to match what the trait expects, no matter what I do.</p>",
        "id": 152033952,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059188
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0308]: method not compatible with trait\n   --&gt; src/librustc_mir/dataflow/impls/borrows.rs:343:5\n    |\n343 | /     fn propagate_call_return(\n344 | |         &amp;self,\n345 | |         set: &amp;mut BitSet&lt;BorrowIndex&gt;,\n346 | |         _call_bb: mir::BasicBlock,\n...   |\n386 | |         }\n387 | |     }\n    | |_____^ lifetime mismatch\n    |\n    = note: expected type `fn(&amp;dataflow::impls::borrows::Borrows&lt;&#39;a, &#39;gcx, &#39;tcx&gt;, &amp;mut rustc_data_structures::bit_set::BitSet&lt;dataflow::move_paths::indexes::BorrowIndex&gt;, rustc::mir::BasicBlock, rustc::mir::BasicBlock, &amp;rustc::mir::Place&lt;&#39;tcx&gt;)`\n               found type `fn(&amp;dataflow::impls::borrows::Borrows&lt;&#39;a, &#39;gcx, &#39;tcx&gt;, &amp;mut rustc_data_structures::bit_set::BitSet&lt;dataflow::move_paths::indexes::BorrowIndex&gt;, rustc::mir::BasicBlock, rustc::mir::BasicBlock, &amp;rustc::mir::Place&lt;&#39;tcx&gt;)`\nnote: the lifetime &#39;tcx as defined on the method body at 343:5...\n   --&gt; src/librustc_mir/dataflow/impls/borrows.rs:343:5\n    |\n343 | /     fn propagate_call_return(\n344 | |         &amp;self,\n345 | |         set: &amp;mut BitSet&lt;BorrowIndex&gt;,\n346 | |         _call_bb: mir::BasicBlock,\n...   |\n386 | |         }\n387 | |     }\n    | |_____^\nnote: ...does not necessarily outlive the lifetime &#39;tcx as defined on the impl at 238:16\n   --&gt; src/librustc_mir/dataflow/impls/borrows.rs:238:16\n    |\n238 | impl&lt;&#39;a, &#39;gcx, &#39;tcx&gt; BitDenotation for Borrows&lt;&#39;a, &#39;gcx, &#39;tcx&gt; {\n</pre></div>",
        "id": 152033989,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059239
    },
    {
        "content": "<p>hmm. something seems sketchy there</p>",
        "id": 152034274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059520
    },
    {
        "content": "<p>Yeah, my ability to decode lifetime errors degrades quickly in cases like this.</p>",
        "id": 152034344,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059551
    },
    {
        "content": "<p>hmm</p>",
        "id": 152034560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059682
    },
    {
        "content": "<p>I wonder if the problem is that the trait definiton</p>",
        "id": 152034566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059690
    },
    {
        "content": "<p>should be using</p>",
        "id": 152034571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059695
    },
    {
        "content": "<p><code>Place&lt;'tcx&gt;</code></p>",
        "id": 152034577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059698
    },
    {
        "content": "<p>on the header for <code>propagate_call_return</code> ?</p>",
        "id": 152034592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059706
    },
    {
        "content": "<p>That second error is what I get when I change it to that.</p>",
        "id": 152034596,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059708
    },
    {
        "content": "<p>(and then update my impl of it to match)</p>",
        "id": 152034635,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059731
    },
    {
        "content": "<p>don't you have to update all the other impls too?</p>",
        "id": 152034662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059748
    },
    {
        "content": "<p>The first error is when I'm (without having changed the signature) just trying to pass in the relevant information to a function.</p>",
        "id": 152034736,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059767
    },
    {
        "content": "<p>I'd expect so, yeah. But I'd expect errors saying they don't match, instead of my impl not matching?</p>",
        "id": 152034751,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059783
    },
    {
        "content": "<p>true, that is what I'd expect too</p>",
        "id": 152034764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059794
    },
    {
        "content": "<p>Maybe if I do that it'll resolve itself, might be a worth a shot.</p>",
        "id": 152034776,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059812
    },
    {
        "content": "<p>Do you want me to r+ you current PR as is, in any case?</p>",
        "id": 152034892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059885
    },
    {
        "content": "<p>(and you'll do this stuff in some follow-up?)</p>",
        "id": 152034899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059891
    },
    {
        "content": "<p>Or shall we wait a bit to see if you work this lifetime issue out?</p>",
        "id": 152034910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059905
    },
    {
        "content": "<p>Before you do that, I'm looking at SimonSapin's test case and not sure if it is a instance of this issue.</p>",
        "id": 152034925,
        "sender_full_name": "davidtwco",
        "timestamp": 1545059918
    },
    {
        "content": "<p>ah okay</p>",
        "id": 152034931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545059924
    },
    {
        "content": "<p>If I update all of the impls, then they all complain that they don't match.</p>",
        "id": 152035214,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060123
    },
    {
        "content": "<p>interesting</p>",
        "id": 152035236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060132
    },
    {
        "content": "<p>wait a minute... does this trait definition even have a <code>'tcx</code> on it?</p>",
        "id": 152035303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060190
    },
    {
        "content": "<p>/me looks some more</p>",
        "id": 152035307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060195
    },
    {
        "content": "<p>Don't think so.</p>",
        "id": 152035313,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060200
    },
    {
        "content": "<p>well then what does <code>'tcx</code> even mean in that context...?</p>",
        "id": 152035324,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060212
    },
    {
        "content": "<p>that might be the source of the problem here</p>",
        "id": 152035329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060219
    },
    {
        "content": "<p>i.e. this may be a combination of that new lifetime header feature</p>",
        "id": 152035400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060245
    },
    {
        "content": "<p>where <code>'tcx</code> gets implicitly bound at teh method level (I think)</p>",
        "id": 152035423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060259
    },
    {
        "content": "<p>if you don't explicitly declare it otherwise?</p>",
        "id": 152035438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060271
    },
    {
        "content": "<p>in other words, you might need to change <code>trait BitDenotation</code> to <code>trait BitDenotation&lt;'tcx&gt;</code></p>",
        "id": 152035467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060292
    },
    {
        "content": "<p>I'll go through and try that then.</p>",
        "id": 152035476,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060297
    },
    {
        "content": "<p>(and lordy that means a lot more churn)</p>",
        "id": 152035479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060300
    },
    {
        "content": "<p>seems like all of this is going to be churn that may not buy us anything</p>",
        "id": 152035513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060326
    },
    {
        "content": "<p>but we'll see</p>",
        "id": 152035517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060330
    },
    {
        "content": "<p>in any case, the <em>exercise</em> may be good</p>",
        "id": 152035522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060337
    },
    {
        "content": "<p>since the frustration you had with the error diagnostic above</p>",
        "id": 152035532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060349
    },
    {
        "content": "<p>indicates that we need to improve our diagnostic reporting here a lot. This is a new feature which means no one may be prepared for this kind of error when we hit it.</p>",
        "id": 152035610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060390
    },
    {
        "content": "<p>Yeah, there's definitely work to do with errors like that.</p>",
        "id": 152035642,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060430
    },
    {
        "content": "<p>So, did that and down to two lifetime errors relating to closures in the graphviz code - which anecdotally whenever I make a change like this, it always feels like it ends up in the graphviz code.</p>",
        "id": 152037338,
        "sender_full_name": "davidtwco",
        "timestamp": 1545061716
    },
    {
        "content": "<p>I wish we had telemetry on how often that code is used</p>",
        "id": 152037985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545062228
    },
    {
        "content": "<p>I was probably its biggest client at one point but now ... who knows who uses it, if anyone.</p>",
        "id": 152038004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545062245
    },
    {
        "content": "<p>Managed to get around it.</p>",
        "id": 152038090,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062286
    },
    {
        "content": "<p>Got <code>rustc_mir</code> to compile with <code>Place&lt;'tcx&gt;</code>, so I suspect the lifetime situation is all resolved.</p>",
        "id": 152038150,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the MIR of the test case for the calls instead of assignments ends up assigning into a local that the next block assigns into the field - so it doesn't end up using the code path for the <code>propagate_call_return</code>.</p>",
        "id": 152039210,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063207
    },
    {
        "content": "<p>But, it still has three errors instead of the one I'd expect because the borrow indices set that we iterate over end up being empty - which is odd.</p>",
        "id": 152039285,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063244
    },
    {
        "content": "<p>Looks like those sets only have the borrows from that block, which is why.</p>",
        "id": 152039332,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063290
    },
    {
        "content": "<p>Oh, well... propagate_call_return is called <em>during</em> data flow solving (the iteration to a fixed point)</p>",
        "id": 152039668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545063538
    },
    {
        "content": "<p>So I‚Äôd expect it to be called many times? And potentially the sets change between the calls...?</p>",
        "id": 152039695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545063563
    },
    {
        "content": "<p>I'd like to keep the lifetime changes in because I think they're more correct and someone else will need to do it if they end up doing something similar in that function in future.</p>",
        "id": 152039712,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063587
    },
    {
        "content": "<p>(that is, the <code>BitDenotation&lt;'tcx&gt;</code> change)</p>",
        "id": 152039765,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063605
    },
    {
        "content": "<p>I'm fairly sure (would appreciate if you could take a look at confirm) that SimonSapin's test case isn't related. I could be wrong, but I don't think it is assigning into a projection of anything and then relying on that to kill a borrow.</p>",
        "id": 152040157,
        "sender_full_name": "davidtwco",
        "timestamp": 1545063946
    },
    {
        "content": "<p>Other than that, happy for you to r+ - just pushed a change with the lifetime fixes.</p>",
        "id": 152040300,
        "sender_full_name": "davidtwco",
        "timestamp": 1545064063
    },
    {
        "content": "<blockquote>\n<p>I'm fairly sure (would appreciate if you could take a look at confirm) that SimonSapin's test case isn't related. I could be wrong, but I don't think it is assigning into a projection of anything and then relying on that to kill a borrow.</p>\n</blockquote>\n<p>If it is related then I think it is worth trying to fix that before landing?</p>",
        "id": 152040814,
        "sender_full_name": "davidtwco",
        "timestamp": 1545064463
    },
    {
        "content": "<blockquote>\n<p>what about the example that SimonSapin had posted to that issue? Does that pass under your branch, or does it still error then too?</p>\n</blockquote>\n<p>I think that @simonsapin's example requires polonius</p>",
        "id": 152058174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078761
    },
    {
        "content": "<p>at least that was my belief when I last looked</p>",
        "id": 152058298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078896
    }
]