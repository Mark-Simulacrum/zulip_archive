[
    {
        "content": "<p>(obligatory note: let me know if I'm doing this wrong or if I should ask somewhere else.) (also I know it's Friday evening. there's no hurry.)</p>",
        "id": 129232539,
        "sender_full_name": "ashtneoi",
        "timestamp": 1530921408
    },
    {
        "content": "<p>so I'm hacking on librustc_mir/borrow_check, and I'm having trouble telling the difference between an auto-deref binding and a literal <code>ref</code>/<code>ref mut</code> binding.</p>",
        "id": 129232630,
        "sender_full_name": "ashtneoi",
        "timestamp": 1530921571
    },
    {
        "content": "<p>I found BindingMode::BindByReference but it seems to apply to both. in theory I could check if the source span starts with \"ref\" followed by Pattern_Whitespace or whatever it's called, but that feels kinda hacky.</p>",
        "id": 129232695,
        "sender_full_name": "ashtneoi",
        "timestamp": 1530921658
    },
    {
        "content": "<p>actually I think this is almost exactly the same question I asked in the PR itself (and got an answer to). oopsie.</p>",
        "id": 129237301,
        "sender_full_name": "ashtneoi",
        "timestamp": 1530929662
    },
    {
        "content": "<p>by \"auto-deref binding\" do you mean something like the default ref that occurs here <code>match &amp;foo { Some(x) =&gt; .. }</code>?</p>",
        "id": 129253504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962595
    },
    {
        "content": "<p>in the past, we have sometimes extended the data structures to carry more information about what kind of \"syntactic sugar\" was used</p>",
        "id": 129253508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962620
    },
    {
        "content": "<p>so e.g. you imagine extending <code>BindingMode</code> to indicate whether this <code>ref</code> was explicit or added by us</p>",
        "id": 129253509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962639
    },
    {
        "content": "<p>I also think span-hacking .. isn't the worst thing ever, if it's simple to do, but I agree it's on the hack-y side.</p>",
        "id": 129253562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962718
    },
    {
        "content": "<p>(in the <em>HIR</em> at least the explicit binding mode vs actual binding mode distinction is visible...)</p>",
        "id": 129253610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962816
    },
    {
        "content": "<p>I think what we <em>could</em> try to do is to thread the HIR's <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.BindingAnnotation.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.BindingAnnotation.html\"><code>BindingAnnotation</code></a> information into the MIR, but I'd have to look at how easy/hard that would be</p>",
        "id": 129253661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530962910
    },
    {
        "content": "<p>hmm. sounds like it's not worth the effort unless we need it in lots of places.</p>",
        "id": 129265023,
        "sender_full_name": "ashtneoi",
        "timestamp": 1530983700
    },
    {
        "content": "<p>yeah, my impression is it's not worth it right now, but it might be worth taking a look later to try as a cleanup</p>",
        "id": 129269468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530991846
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"120442\">@ashtneoi</span> I am back from my leave of absence and had started last week looking at rebasing this PR. It sounds like you're close to getting something working though?</p>",
        "id": 129337170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531128072
    },
    {
        "content": "<p>(I think I just now actually got it working on my end; I ended up going with span inspection and snippet rewriting, the same way your original PR did.)</p>",
        "id": 129337830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531129016
    },
    {
        "content": "<p>but ... ah, maybe span/snippet inspection will not suffice, due to the hidden <code>&amp;</code>-borrows injected by two-phase borrows. :(</p>",
        "id": 129337907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531129121
    },
    {
        "content": "<p>In particular, whatever solution we devise, we need to make sure we do not break src/test/ui/issue-27282-reborrow-ref-mut-in-guard.rs</p>",
        "id": 129337919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531129153
    },
    {
        "content": "<p>(where \"breaking the test\" here means erroneously suggesting to the user that they use <code>ref mut mut</code>)</p>",
        "id": 129337998,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531129213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> as far as I know, I'm almost done with what I was trying to do. no guarantees it passes that test you mentioned though.</p>",
        "id": 129339096,
        "sender_full_name": "ashtneoi",
        "timestamp": 1531130763
    },
    {
        "content": "<p>I was working as if this were just a rebase, but I ended up trashing my original code, so I guess I should just push what I have so far and worry about squashing later.</p>",
        "id": 129339129,
        "sender_full_name": "ashtneoi",
        "timestamp": 1531130810
    },
    {
        "content": "<p>yeah the code changed a lot and i found it was easier to start from scratch (while looking at the previous PR for inspiration) rather than attempt a true rebase</p>",
        "id": 129339153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531130846
    },
    {
        "content": "<p>yep, same</p>",
        "id": 129339157,
        "sender_full_name": "ashtneoi",
        "timestamp": 1531130856
    },
    {
        "content": "<p>One \"obvious\" way to compensate for the particular case of <a href=\"http://issue-27282-reborrow-ref-mut-in-guard.rs\" target=\"_blank\" title=\"http://issue-27282-reborrow-ref-mut-in-guard.rs\">issue-27282-reborrow-ref-mut-in-guard.rs</a> would be to also detect if we started with <code>ref mut</code> and bail on making a suggestion in that case. But I'm a little wary of that approach</p>",
        "id": 129339158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531130865
    },
    {
        "content": "<p>(and I'm independently planning to revise at least part of the code in src/librustc_mir/build/matches/mod.rs to try to fix <a href=\"https://github.com/rust-lang/rust/issues/51348\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51348\">https://github.com/rust-lang/rust/issues/51348</a> )</p>",
        "id": 129339261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531130993
    },
    {
        "content": "<p>hmm, sounds like things are a lot more complicated than I expected when I opened the original PR. we'll see where I get tomorrow, but I might not have the rustc knowledge to figure this out.</p>",
        "id": 129339838,
        "sender_full_name": "ashtneoi",
        "timestamp": 1531131625
    },
    {
        "content": "<p>the simplest thing might be to just restrict the scope of your PR to <em>just</em> fix the suggestion that replaces <code>&amp;</code> with <code>&amp;mut</code></p>",
        "id": 129340715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531132752
    },
    {
        "content": "<p>and leave the more general case for later work.</p>",
        "id": 129340727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531132775
    },
    {
        "content": "<p>ah, that sounds like a good idea</p>",
        "id": 129341301,
        "sender_full_name": "ashtneoi",
        "timestamp": 1531133419
    }
]