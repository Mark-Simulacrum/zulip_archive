[
    {
        "content": "<p>I was leaning a different way</p>",
        "id": 135926718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721251
    },
    {
        "content": "<p>I was thinking of detecting cases where combining all labels into one was problematic</p>",
        "id": 135926729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721266
    },
    {
        "content": "<p>and trying to break things up into multi-part messages (automatically)</p>",
        "id": 135926734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721271
    },
    {
        "content": "<p>I would also like this for cases where the labels should be read in a particular order</p>",
        "id": 135926740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721285
    },
    {
        "content": "<p>but sometimes that order doesn't happen to be the one in which they appear in the source</p>",
        "id": 135926743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721292
    },
    {
        "content": "<p>(and this can't be easily predicted)</p>",
        "id": 135926745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721299
    },
    {
        "content": "<p>anyway..</p>",
        "id": 135926748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721302
    },
    {
        "content": "<p>yeah I've been struggling with that</p>",
        "id": 135926750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539721305
    },
    {
        "content": "<p>our use of ellipses in diagnsotics is an attempt to compensate for that</p>",
        "id": 135926757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539721321
    },
    {
        "content": "<p>but it clearly is a problem at times</p>",
        "id": 135926803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539721333
    },
    {
        "content": "<p>right, I think maybe we should \"fall back\" to something more like the older style</p>",
        "id": 135926807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721336
    },
    {
        "content": "<p>or at least I wanted to toy with it</p>",
        "id": 135926813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721345
    },
    {
        "content": "<p>By  \"older style\", do you mean when there's lots of snippets stacked atop each other in the error?</p>",
        "id": 135926860,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721442
    },
    {
        "content": "<p>hmm just had another idea :) but we should definitely break this out into a different topic</p>",
        "id": 135926903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721453
    },
    {
        "content": "<p>I meant something where there are many \"blocks\" each with their own snippet + label</p>",
        "id": 135926910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721476
    },
    {
        "content": "<p>\"blocks\" <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span>  ┰ ┖</p>",
        "id": 135927037,
        "sender_full_name": "memoryruins",
        "timestamp": 1539721646
    },
    {
        "content": "<p>(that could help with the linear reading)</p>",
        "id": 135927090,
        "sender_full_name": "memoryruins",
        "timestamp": 1539721691
    },
    {
        "content": "<p>how do you imagine would look for the error message before?</p>",
        "id": 135927143,
        "sender_full_name": "memoryruins",
        "timestamp": 1539721790
    },
    {
        "content": "<p>I couldn't find a good example from the top of my head, but it's roughly something like this that I wasn't a fan of:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: this can&#39;t happen\n  --&gt; $DIR/some_test.rs\n   |\nLL |  main error code\n   |\n= note: something happens that must live until...\n   |\nLL |  not really relevant\n   |\n= note: ...this is because something is used here...\n   |\nLL |  not really relevant\n   |\n= note: ...which must live until here or something like that.\n   |\nLL |  not really relevant\n   |\n</pre></div>",
        "id": 135927146,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721797
    },
    {
        "content": "<p>I don't think NLL has any errors like that</p>",
        "id": 135927200,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721808
    },
    {
        "content": "<p>I found those pretty hard to follow.</p>",
        "id": 135927213,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721832
    },
    {
        "content": "<p>yes, that is the older style</p>",
        "id": 135927215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721832
    },
    {
        "content": "<p>I agree it is often less good</p>",
        "id": 135927230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721853
    },
    {
        "content": "<p>some of the new-style errors are also pretty hard to follow though :)</p>",
        "id": 135927238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721862
    },
    {
        "content": "<p>that said, it occured to me now that a \"footnote\" approach might be interesting</p>",
        "id": 135927257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539721884
    },
    {
        "content": "<p>It's true. I think it's mostly because I ended up scanning up and down the error trying to work out what was referring to what because everything was so split apart. I prefer the new errors because everything is presented in a single snippet in source order and there's less working out what everything is.</p>",
        "id": 135927335,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721945
    },
    {
        "content": "<p>I've got a better way of saying that on the tip of my tongue and it just isn't happening.</p>",
        "id": 135927354,
        "sender_full_name": "davidtwco",
        "timestamp": 1539721983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>15 |     };\n   |     ^^\n   |     1|\n   |      2\n   |\n   | 1:  `heap_ref` dropped here while still borrowed\n   | 2: borrowed value needs to live until here\n</pre></div>",
        "id": 135927384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722031
    },
    {
        "content": "<p>maybe something like that</p>",
        "id": 135927389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722039
    },
    {
        "content": "<p>hopefully using prettier \"arrows\"</p>",
        "id": 135927430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722045
    },
    {
        "content": "<p>this could also address the \"telling a story\" problem</p>",
        "id": 135927434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722050
    },
    {
        "content": "<p>since you could read 1, 2, 3 and then see the points in the code</p>",
        "id": 135927436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722056
    },
    {
        "content": "<p>That could be useful where long diagnostic messages are causing the pointers to things to get particularly long and obscuring what is happening.</p>",
        "id": 135927446,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722082
    },
    {
        "content": "<p>right</p>",
        "id": 135927449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722088
    },
    {
        "content": "<p>and/or there are overlapping things</p>",
        "id": 135927462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722102
    },
    {
        "content": "<p>I'd like to present the underlines on separate lines</p>",
        "id": 135927470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722107
    },
    {
        "content": "<p>In other situations though, I think labelling directly makes more sense.</p>",
        "id": 135927475,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722114
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span>  | foo(bar)\n  | -------- (1)\n  |     --- (2)\n  |\n  | (1) blah blah blah\n  | (2) blah blah blah\n</pre></div>",
        "id": 135927489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722135
    },
    {
        "content": "<blockquote>\n<p>In other situations though, I think labelling directly makes more sense.</p>\n</blockquote>\n<p>yes, my hope was that the user would just say \"this label here\" and the code would pick an optimal organization</p>",
        "id": 135927500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722158
    },
    {
        "content": "<p>basically falling back to footnotes if the ordering constraints can't be met and/or spans overlap or get too close</p>",
        "id": 135927556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722179
    },
    {
        "content": "<p>If you did it as a \"this is getting hard to read, reformat as references\" then it could even be automatic by the diagnostic builder when it detects that it would be better.</p>",
        "id": 135927559,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722194
    },
    {
        "content": "<p>right</p>",
        "id": 135927562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722201
    },
    {
        "content": "<p>I didn't expet to change any of the diagnostic reporting code, except maybe to indicate where ordering is needed</p>",
        "id": 135927575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722223
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>15 |     };\n   |     - (1)\n   |      - (2)\n   |\n   | 1:  `heap_ref` dropped here while still borrowed\n   | 2: borrowed value needs to live until here\n</pre></div>",
        "id": 135927584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722246
    },
    {
        "content": "<p>Would it depend on the order that labels are applied so they are numbered correctly or by source order?</p>",
        "id": 135927585,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722247
    },
    {
        "content": "<p>in that alternate style, which I kind of like now, it might look like that</p>",
        "id": 135927589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722254
    },
    {
        "content": "<blockquote>\n<p>Would it depend on the order that labels are applied so they are numbered correctly or by source order?</p>\n</blockquote>\n<p>I would say that when you do <code>span_label</code>, you should also have <code>span_ordered_label</code></p>",
        "id": 135927593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722268
    },
    {
        "content": "<p>all calls to <code>span_ordered_label</code> are meant to be read in that order</p>",
        "id": 135927597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722276
    },
    {
        "content": "<p>often, that 'just works' in the source</p>",
        "id": 135927648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722289
    },
    {
        "content": "<p>because earlier things come earlier</p>",
        "id": 135927663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722298
    },
    {
        "content": "<p>but around loops and method calls that's not always true</p>",
        "id": 135927666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722302
    },
    {
        "content": "<p>Overall, I really like the idea.</p>",
        "id": 135927673,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> you around? =)</p>",
        "id": 135927682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722318
    },
    {
        "content": "<p>the footnotes was the missing piece for me</p>",
        "id": 135927692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722327
    },
    {
        "content": "<p>I hadn't thought of that before</p>",
        "id": 135927696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722330
    },
    {
        "content": "<p>I guess it would still be hard to handle multple multi-line spans</p>",
        "id": 135927725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722355
    },
    {
        "content": "<p>but those are a mess anyway</p>",
        "id": 135927728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722359
    },
    {
        "content": "<p>I guess we can \"do our best\"</p>",
        "id": 135927738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722368
    },
    {
        "content": "<p>and actually even those could maybe be handled with this idea of \"multiple underlines per line\"</p>",
        "id": 135927754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722389
    },
    {
        "content": "<p>Could annotate two places with the same reference number?</p>",
        "id": 135927844,
        "sender_full_name": "davidtwco",
        "timestamp": 1539722437
    },
    {
        "content": "<p>I guess for multispans</p>",
        "id": 135927850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722450
    },
    {
        "content": "<p>I'm excited about this idea :)</p>",
        "id": 135928126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722701
    },
    {
        "content": "<p>I'm a fan :)</p>",
        "id": 135928251,
        "sender_full_name": "memoryruins",
        "timestamp": 1539722768
    },
    {
        "content": "<p>worth hand converting some more, will highlight a bit more how it might (or places where it might not) work</p>",
        "id": 135928268,
        "sender_full_name": "memoryruins",
        "timestamp": 1539722772
    },
    {
        "content": "<p>heading out for now, have a good one everyone <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 135928284,
        "sender_full_name": "memoryruins",
        "timestamp": 1539722785
    },
    {
        "content": "<p>wrote up a gist: <a href=\"https://gist.github.com/nikomatsakis/80866d4407f1cc38fba0c2da7175dcf7\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/80866d4407f1cc38fba0c2da7175dcf7\">https://gist.github.com/nikomatsakis/80866d4407f1cc38fba0c2da7175dcf7</a></p>",
        "id": 135928496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722973
    },
    {
        "content": "<p>does that sound about right?</p>",
        "id": 135928503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722979
    },
    {
        "content": "<p>I was going to open up an internals thread or a rust issue or something</p>",
        "id": 135928512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539722987
    },
    {
        "content": "<p>I'm intrigued if not entirely convinced, but I see that it _could_ work</p>",
        "id": 135929892,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724216
    },
    {
        "content": "<p>I would keep the current behavior around span positioning though...</p>\n<div class=\"codehilite\"><pre><span></span>15 |     };\n   |     -- (2)\n   |     |\n   |     (1)\n   (1): `heap_ref` dropped here while still borrowed\n   (2): borrowed value needs to live until here\n</pre></div>",
        "id": 135929932,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 135929945,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724272
    },
    {
        "content": "<p>I personally find that less clear</p>",
        "id": 135929983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> but doesn't that run into the same problem of not being able to readily <del>distinguish</del> separate the <code>}</code> from the <code>;</code> ?</p>",
        "id": 135929993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724321
    },
    {
        "content": "<p>that's fair...<br>\nSometime back I considered having a different <code>char</code> to represent multiple overlapping spans, something like </p>\n<div class=\"codehilite\"><pre><span></span>  | foo(bar)\n  | ----===- (1)\n  |     |\n  |     (2)\n  |\n  | (1) blah blah blah\n  | (2) blah blah blah\n</pre></div>",
        "id": 135930106,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724394
    },
    {
        "content": "<p>we already do that, don't we? the problem here is that the spans are adjacent, rather than overlapping</p>",
        "id": 135930125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724420
    },
    {
        "content": "<p>Maybe the overlapping logic should be applied also to adjacent spans?</p>",
        "id": 135930132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724432
    },
    {
        "content": "<p>I discarded it because it was hard to find an ascii safe char to represent <code>^</code> and <code>-</code> overlapping</p>",
        "id": 135930142,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724438
    },
    {
        "content": "<p>it also seems like there could be &gt;2 labels</p>",
        "id": 135930190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724453
    },
    {
        "content": "<p>(am I just wrong about overlapping labels? Let me go find an example....)</p>",
        "id": 135930205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724477
    },
    {
        "content": "<p>We don't. A long time ago I took a stab at using unicode chars to try something like that <a href=\"https://github.com/rust-lang/rust/pull/37703\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/37703\">https://github.com/rust-lang/rust/pull/37703</a></p>",
        "id": 135930234,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> another option — in this <em>particular case</em> at least — would be to print the start character in some way</p>",
        "id": 135930235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724516
    },
    {
        "content": "<p>e.g. with an up-arrow ▲ or something</p>",
        "id": 135930246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724534
    },
    {
        "content": "<p>ok, not so heavy</p>",
        "id": 135930249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724537
    },
    {
        "content": "<p>this of course gets into unicode</p>",
        "id": 135930250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724541
    },
    {
        "content": "<p>using <code>┗</code> and <code>┛</code> makes it clear where every span starts and end :)</p>",
        "id": 135930263,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724555
    },
    {
        "content": "<p>Yep... and as you can see in that original PR, it needs a lot of work before we have something nice</p>",
        "id": 135930332,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724610
    },
    {
        "content": "<p>wait, so what is this then:</p>\n<div class=\"codehilite\"><pre><span></span>10 |         if let Some(entry) = heap_ref.peek_mut() {\n   |                              ^^^^^^^^-----------\n   |                              |\n   |                              borrowed value does not live long enough\n   |                              a temporary with access to the borrow is created here ...\n</pre></div>",
        "id": 135930352,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724653
    },
    {
        "content": "<blockquote>\n<p>using <code>┗</code> and <code>┛</code> makes it clear where every span starts and end :)</p>\n</blockquote>\n<p>well, even <em>then</em> you can have two instances of the same span</p>",
        "id": 135930354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724657
    },
    {
        "content": "<p>regardless, we can get around the problem by having a starting and ending delimiter for spans<br>\nsomething along the lines of </p>\n<div class=\"codehilite\"><pre><span></span>  | foo(bar)\n  | \\--/\\---/ (1)\n  |     |\n  |     (2)\n  |\n  | (1) blah blah blah\n  | (2) blah blah blah\n</pre></div>",
        "id": 135930362,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724671
    },
    {
        "content": "<p>(i.e. that is the case I was thinking of with overlapping spans)</p>",
        "id": 135930367,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that's only for when 1 primary spans overlaps 1 or more secondary spans<br>\nwe handle that overlap by making sure we always show the shortest</p>",
        "id": 135930428,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>10 |         if let Some(entry) = heap_ref.peek_mut() {\n   |                              ^^^^^^^^ (1)\n   |                              ------------------- (2)\n   |\n   | (1) borrowed value does not live long enough\n   | (2) a temporary with access to the borrow is created here ...\n</pre></div>",
        "id": 135930432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724722
    },
    {
        "content": "<p>ah okay I forgot (slash never learned properly) about the primary/secondary distinction</p>",
        "id": 135930451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539724761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the reason I am a bit doubtful is because we can have potentially lots of very small overlapping spans that can make it hard to align vertically beyond the first span underline</p>",
        "id": 135930473,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724792
    },
    {
        "content": "<p>granted, this might not be a problem in practice</p>",
        "id": 135930513,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724803
    },
    {
        "content": "<p>Another option is to use coloring for span differentiation...</p>",
        "id": 135930551,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724833
    },
    {
        "content": "<p>I don't quite understand the concern</p>",
        "id": 135930555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724837
    },
    {
        "content": "<p>(but I don't doubt there are painful edge cases...)</p>",
        "id": 135930582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724878
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>10 |         if let Some(entry) = heap_ref.peek_mut() {\n   |                              ^^^^^^^^ (1)\n   |                              ------------------- (2)\n   |                                               - (3)\n   |\n   | (1) borrowed value does not live long enough\n   | (2) a temporary with access to the borrow is created here ...\n   | (3) where does this span point to?\n</pre></div>",
        "id": 135930602,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539724914
    },
    {
        "content": "<p>this seems ok to me</p>",
        "id": 135930651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724930
    },
    {
        "content": "<p>I guess you mean that it's hard to visually lift your eye up a few lines</p>",
        "id": 135930654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724939
    },
    {
        "content": "<p>that's true, though it could be addressed by collapsing when possible</p>",
        "id": 135930658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724951
    },
    {
        "content": "<p>it also seems <em>plausible</em> to figure it out (e.g., in emacs :P you just press up arrow a few times)</p>",
        "id": 135930667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724967
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> 5:21 PM\n\n10 |         if let Some(entry) = heap_ref.peek_mut() {\n   |                              ^^^^^^^^ (1)     - (3)\n   |                              ------------------- (2)\n   |\n   | (1) borrowed value does not live long enough\n   | (2) a temporary with access to the borrow is created here ...\n   | (3) where does this span point to?\n</pre></div>",
        "id": 135930700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539724989
    },
    {
        "content": "<p>that is what I meant by \"collapsing when possible\" (basically whenever non-overlapping)</p>",
        "id": 135930714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725005
    },
    {
        "content": "<p>I'm trying to keep in mind the minimum common case + the worst possible case for our diagnostics ^_^</p>",
        "id": 135930718,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725010
    },
    {
        "content": "<p>Overlapping that way is definitely something we'd want to do</p>",
        "id": 135930726,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725021
    },
    {
        "content": "<p>I guess I think that this sort of case (where you have overlapping spans) is pretty confusing in the current mode</p>",
        "id": 135930732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725034
    },
    {
        "content": "<p>so even if something like footnotes is not <em>perfect</em>, it's potentially a step up</p>",
        "id": 135930771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725044
    },
    {
        "content": "<p>not to say I would always want to do it</p>",
        "id": 135930775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725053
    },
    {
        "content": "<p>I guess the best thing we could do is actually implement the change and inspect the <code>ui</code> diffs :)</p>",
        "id": 135930784,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725079
    },
    {
        "content": "<p>confirm</p>",
        "id": 135930792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725085
    },
    {
        "content": "<p>(should I open an issue or internals thread or something?)</p>",
        "id": 135930797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725097
    },
    {
        "content": "<p>just to keep from losing the idea...</p>",
        "id": 135930802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725104
    },
    {
        "content": "<p>Yes, although I think this is an idea that's been floating for a while, it'd be nice to have an actual place with it</p>",
        "id": 135930824,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725127
    },
    {
        "content": "<p>Adding to <a href=\"https://github.com/rust-lang/rust/issues/51528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51528\">https://github.com/rust-lang/rust/issues/51528</a> would also be nice</p>",
        "id": 135930881,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725172
    },
    {
        "content": "<p>Although I feel some of the things listed there are higher priority</p>",
        "id": 135930888,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725187
    },
    {
        "content": "<p>Like being able to specify span labels in a subdiagnostic. That would make a nice difference.</p>",
        "id": 135930976,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725289
    },
    {
        "content": "<p>I would like to break out the formatting code into its own crate</p>",
        "id": 135931026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725371
    },
    {
        "content": "<p>that is, something that lives on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 135931029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725377
    },
    {
        "content": "<p>I wonder how plausible that is</p>",
        "id": 135931034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725384
    },
    {
        "content": "<p>it'd take some careful work to \"detach\" it nicely from the compiler</p>",
        "id": 135931039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725394
    },
    {
        "content": "<p>but I feel like we could iterate a lot faster this way</p>",
        "id": 135931043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725400
    },
    {
        "content": "<p>/me all about detaching from the compiler these days</p>",
        "id": 135931099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> possibly. I can take a look at it, maybe <span class=\"user-mention\" data-user-id=\"129356\">@Zack M. Davis</span> might be interested as well</p>",
        "id": 135931104,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725440
    },
    {
        "content": "<p>the idea would be to make it generic over the span type and the codemap type etc</p>",
        "id": 135931111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725459
    },
    {
        "content": "<p>anyway</p>",
        "id": 135931115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725465
    },
    {
        "content": "<p>But in order to move it out we'd need to stabilize the API surface, right? There are a couple of things I'd like to add before that, and remove (like <code>span_suggestion</code> without <code>Applicability</code>)</p>",
        "id": 135931183,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725540
    },
    {
        "content": "<p>Oh, I see that <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is <a href=\"https://github.com/rust-lang/rust/issues/51528#issuecomment-397840308\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51528#issuecomment-397840308\">way ahead of me</a></p>",
        "id": 135931187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725556
    },
    {
        "content": "<blockquote>\n<p>But in order to move it out we'd need to stabilize the API surface, right? There are a couple of things I'd like to add before that, and remove (like <code>span_suggestion</code> without <code>Applicability</code>)</p>\n</blockquote>\n<p>I mean it can be at a 0.x version for a while that changes its API surface frequently</p>",
        "id": 135931193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725577
    },
    {
        "content": "<p>but yes, part of the benefit is trying to stabiize and convert on somethign nice</p>",
        "id": 135931205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539725588
    },
    {
        "content": "<p>I can see how we can enable the footnote output only if certain heuristics are triggered. I'm coming around to the idea...</p>",
        "id": 135931397,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1539725811
    }
]