[
    {
        "content": "<p>Well, its taken me a week to get around to it, but I'm going to spend the next ~hour doing NLL-deferred triaging</p>",
        "id": 152188021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231512
    },
    {
        "content": "<p>I'll log my actions here. Oh I guess I'll notify <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> about it, too.</p>",
        "id": 152188039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231533
    },
    {
        "content": "<p>Here is a link the <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+label%3ANLL-deferred\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+label%3ANLL-deferred\">work queue</a> I'll be using. Wow, 21 open issues; I'm so used to the hundreds of issues open for T-compiler, this looks like a cake walk. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152188213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231638
    },
    {
        "content": "<p>'\"lifetime of borrowed pointer outlives lifetime of captured variable\" error message very unclear' <a href=\"https://github.com/rust-lang/rust/issues/42574\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42574\">#42574</a></p>",
        "id": 152188266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231691
    },
    {
        "content": "<p>This was marked as NLL-deferred just to put it on <em>some</em> work queue. It is an NLL-fixed-by-NLL, but it requires full <code>#![feature(nll)]</code> (not just migration mode).</p>",
        "id": 152188373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231775
    },
    {
        "content": "<p>Nonetheless, the main work item remaining here (I think) is to put in tests for the behavior in our various borrowck modes (ast, migrate, mir). Its already tagged with E-needstest. As a matter of overall policy, I think the task of making the tests in a case like this (diagnostic quality) is P-low (though if someone wants to argue for P-medium, I'm all ears.)</p>",
        "id": 152188499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231879
    },
    {
        "content": "<p>In any case I'm going to mark it P-low and assign it to myself, since it seems like a good task for zombie felix to do</p>",
        "id": 152188522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545231902
    },
    {
        "content": "<p>next: \"Double-indirection with Cow causes inconsistent behavior of the borrow checker\" <a href=\"https://github.com/rust-lang/rust/issues/43058\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43058\">#43058</a></p>",
        "id": 152188698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545232063
    },
    {
        "content": "<p>This is already tagged with E-needstest (and E-mentor, since <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> put in some mentorship notes). It was basically an expressiveness issue (i.e. it would be NLL-complete if NLL didn't actually fix it. But it does fix it.). I'm going to add NLL-fixed-by-NLL. And assign it to myself. and mark it P-low, by same logic that I used in <a href=\"https://github.com/rust-lang/rust/issues/42574\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42574\">#42574</a></p>",
        "id": 152188905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545232204
    },
    {
        "content": "<p>next: \"error \"cannot bind by-move into a pattern guard\" (+ others) is too imprecise and should be removed in favor of MIR borrowck\" <a href=\"https://github.com/rust-lang/rust/issues/45600\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45600\">#45600</a></p>",
        "id": 152189021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545232316
    },
    {
        "content": "<p>this is now fixed by NLL, which (when enabled) suggests adding <code>#![feature(bind_by_move_pattern_guards)]</code> when running the given test (and then when you add that, the test compiles and runs).</p>",
        "id": 152189143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545232398
    },
    {
        "content": "<p>ah the same issue had a second example that argued that we should allow by-move and by-ref patterns in the same arm</p>",
        "id": 152189922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233011
    },
    {
        "content": "<p>(or should I say \"match candidate\" more precisely? anyway...)</p>",
        "id": 152189934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233023
    },
    {
        "content": "<p>tagging with NLL-complete, P-medium, for the second example in the issue.</p>",
        "id": 152190013,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233066
    },
    {
        "content": "<p>(though the check in question may not even live in NLL. I.e. this might be trivial to fix, outside of the NLL code base. Not sure yet.)</p>",
        "id": 152190058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233106
    },
    {
        "content": "<p>next: \"match arm bindings have weird lifetimes\" <a href=\"https://github.com/rust-lang/rust/issues/46525\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46525\">#46525</a></p>",
        "id": 152190101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233136
    },
    {
        "content": "<p>I don't remember what effect my changes to <code>match</code> had on cases like the one in this issue.</p>",
        "id": 152190177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233177
    },
    {
        "content": "<p>I know that <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> has written notes elsewhere on similar oddities with how match bindings are handled.</p>",
        "id": 152190210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233215
    },
    {
        "content": "<p>Certainly seems like I'm the right person to address this, at least in the short term.</p>",
        "id": 152190240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233243
    },
    {
        "content": "<p>tagging P-medium and assigning to self.</p>",
        "id": 152190245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233252
    },
    {
        "content": "<p>oh and in terms of the tags... I guess since this is getting into details of the code we generate for a given match expression, the most relevant NLL-tag is NLL-complete. I'll tag it with that.</p>",
        "id": 152190345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233306
    },
    {
        "content": "<p>(If someone wants to argue that <a href=\"https://github.com/rust-lang/rust/issues/46525\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46525\">#46525</a> should be given P-high priority, I'm open to hearing an argument for that.)</p>",
        "id": 152190387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233345
    },
    {
        "content": "<p>next \"MIR borrowck doesn't accept the example of iterating and updating a mutable reference\" <a href=\"https://github.com/rust-lang/rust/issues/46589\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46589\">#46589</a></p>",
        "id": 152190429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233396
    },
    {
        "content": "<p>this is one of the cases that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> has been iterating on.</p>",
        "id": 152190485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233417
    },
    {
        "content": "<p>I'm personally not convinced that the remaining work here merits P-high. Its certainly <em>nice to have</em>, but in terms of triage, I'd call it P-medium.</p>",
        "id": 152190520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233460
    },
    {
        "content": "<p>and its obviously NLL-complete.</p>",
        "id": 152190536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233466
    },
    {
        "content": "<p>next: \"figure out how to integrate constants and the MIR type checker\" <a href=\"https://github.com/rust-lang/rust/issues/46702\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46702\">#46702</a></p>",
        "id": 152190630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233527
    },
    {
        "content": "<p>I don't like how many question marks I have attached to my mental model of this issue.</p>",
        "id": 152190665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233564
    },
    {
        "content": "<p>(I also am not sure how <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's other work interacts here.)</p>",
        "id": 152190691,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233607
    },
    {
        "content": "<p>In any case, since the worry is about failing to enforce constraints from lifetime annotations, I'm thinking that makes this NLL-sound. The only question is whether it is P-high or P-medium.</p>",
        "id": 152190764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233655
    },
    {
        "content": "<p>call me crazy but I think given our migration strategy, identifying the severity of the problem here (if any) sounds like a P-high problem to me.</p>",
        "id": 152190847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233733
    },
    {
        "content": "<p>Unless of course the code that is accepted by this was also accepted by AST-borrowck...</p>",
        "id": 152190913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233772
    },
    {
        "content": "<p>I'm going to tag this as P-high and nominate it for discussion at tonight's <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span>  meeting, with the intent that someone should get assigned the task of evaluating whether this is indeed a problem or not.</p>",
        "id": 152190944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I don't think there is a meeting tonight, the calendar invite was cancelled by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> due to holidays.</p>",
        "id": 152191087,
        "sender_full_name": "davidtwco",
        "timestamp": 1545233906
    },
    {
        "content": "<p>Oh I thought that was for next weeks' meeting</p>",
        "id": 152191121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233925
    },
    {
        "content": "<p>Unless that was for a date sometime in future and I misread.</p>",
        "id": 152191122,
        "sender_full_name": "davidtwco",
        "timestamp": 1545233926
    },
    {
        "content": "<p>let me look</p>",
        "id": 152191123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233926
    },
    {
        "content": "<p>meeting tonight is still on my calendar</p>",
        "id": 152191146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233946
    },
    {
        "content": "<p>next week's is not on my calendar</p>",
        "id": 152191158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545233962
    },
    {
        "content": "<p>Yeah, you're right, my bad. Should have read that closer.</p>",
        "id": 152191162,
        "sender_full_name": "davidtwco",
        "timestamp": 1545233972
    },
    {
        "content": "<blockquote>\n<p>this is one of the cases that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> has been iterating on.</p>\n</blockquote>\n<p>This has a waiting-on-bors PR.</p>",
        "id": 152191234,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234014
    },
    {
        "content": "<blockquote>\n<p>(I also am not sure how <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's other work interacts here.)</p>\n</blockquote>\n<p>I don't know if it does, I've not looked at that issue at all - only messed with constants w/r/t type annotations.</p>",
        "id": 152191261,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234037
    },
    {
        "content": "<p>next: \"Is an InlineAsm output a potential use that needs to activate a borrow?\" <a href=\"https://github.com/rust-lang/rust/issues/46891\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46891\">#46891</a></p>",
        "id": 152192844,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235448
    },
    {
        "content": "<p>the running theory here is that its impossible to actually run into the relevant case here under our \"limited\" definition of two-phase borrows.</p>",
        "id": 152192887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235492
    },
    {
        "content": "<p>Resolving the questions here strikes me as NLL-sound. But my understanding is that inline-asm is still an unstable feature. So it can be P-medium rather than P-high, IMO.</p>",
        "id": 152192971,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235546
    },
    {
        "content": "<p>next: \"two-phase-borrows need a specification\" <a href=\"https://github.com/rust-lang/rust/issues/46901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46901\">#46901</a></p>",
        "id": 152193073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235622
    },
    {
        "content": "<p>i'm going to mark this P-high and assign it to self. Documenting two-phase borrows would be a good side-project as I work through issue <a href=\"https://github.com/rust-lang/rust/issues/56254\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56254\">#56254</a></p>",
        "id": 152193121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235667
    },
    {
        "content": "<p>I don't know if it really falls into any of our <del>P-buckets</del> NLL-buckets.</p>",
        "id": 152193187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235710
    },
    {
        "content": "<p>but since its P-high and I'll do it, I won't worry about the NLL-bucket</p>",
        "id": 152193277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235780
    },
    {
        "content": "<p>next: \"NLL / MIR-borrowck regression in getopts\" <a href=\"https://github.com/rust-lang/rust/issues/48225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48225\">#48225</a></p>",
        "id": 152193507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235925
    },
    {
        "content": "<p>Seems NLL complete. Also seems to work now. Assigned to self, P-medium, E-needstest.</p>",
        "id": 152193818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236193
    },
    {
        "content": "<p>next: \"Tracking issue for generalized two-phase borrows\" <a href=\"https://github.com/rust-lang/rust/issues/49434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49434\">#49434</a></p>",
        "id": 152193984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236318
    },
    {
        "content": "<p>wrote a comment linking the other two aforementioned 2PB issues</p>",
        "id": 152194006,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236333
    },
    {
        "content": "<p>and marking as NLL-complete, P-medium. (Since I don't think generalized 2PB is terribly high priority. This might even be P-low....)</p>",
        "id": 152194027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236354
    },
    {
        "content": "<p>next: \"rustc panics on compile-fail/borrowck/two-phase-reservation-sharing-interference\" <a href=\"https://github.com/rust-lang/rust/issues/50128\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50128\">#50128</a></p>",
        "id": 152194153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236427
    },
    {
        "content": "<p>Hmm it seems like this was \"resolved\" by PR <a href=\"https://github.com/rust-lang/rust/issues/49891\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49891\">#49891</a> in that it removed the <code>nll_beyond</code> revision from the test in question.</p>",
        "id": 152194220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236500
    },
    {
        "content": "<p>I think I'll just close this one then.</p>",
        "id": 152194234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236516
    },
    {
        "content": "<p>next: \"consider fixing common regression with expansion of 2-phase borrows\" <a href=\"https://github.com/rust-lang/rust/issues/51915\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51915\">#51915</a></p>",
        "id": 152194328,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236592
    },
    {
        "content": "<p>I'll have this CC <a href=\"https://github.com/rust-lang/rust/issues/49434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49434\">#49434</a> (since I figure that's a decent umbrella issue for <em>any</em> generalization of 2PB). Otherwise, its P-medium, NLL-complete (which it already has as a tag.)</p>",
        "id": 152194354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236636
    },
    {
        "content": "<p>next: \"Two-phase borrows don't allow mutably splitting an array based on its length\" <a href=\"https://github.com/rust-lang/rust/issues/53723\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53723\">#53723</a></p>",
        "id": 152194431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236698
    },
    {
        "content": "<p>Again, seems good to just CC <a href=\"https://github.com/rust-lang/rust/issues/49434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49434\">#49434</a>, P-medium, NLL-complete.</p>",
        "id": 152194456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236725
    },
    {
        "content": "<p>next: \"[nll] <code>_</code> patterns should not count as borrows\" <a href=\"https://github.com/rust-lang/rust/issues/53114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53114\">#53114</a></p>",
        "id": 152194588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236838
    },
    {
        "content": "<p>this is already marked as NLL-complete, and the most urgent part of it was already spawned off into <a href=\"https://github.com/rust-lang/rust/issues/54003\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54003\">#54003</a> (which remains unaddressed, but it will be triaged separately is the point).</p>",
        "id": 152194621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236880
    },
    {
        "content": "<p>but I'm not 100% sure we have unit tests for all the cases here...?</p>",
        "id": 152194683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545236908
    },
    {
        "content": "<p>left a comment saying double-checking our testing situation is P-high, and assigned that subtask to self.</p>",
        "id": 152194828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545237025
    },
    {
        "content": "<p>hmm this issue is already assigned to matthewjasper</p>",
        "id": 152194846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545237044
    },
    {
        "content": "<p>well I'll add myself</p>",
        "id": 152194853,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545237048
    },
    {
        "content": "<p>Okay I have to go home now, I got the the set of NLL-deferred issues down to 7 issues which seems like good progress for today.</p>",
        "id": 152194918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545237121
    },
    {
        "content": "<blockquote>\n<p>call me crazy but I think given our migration strategy, identifying the severity of the problem here (if any) sounds like a P-high problem to me.</p>\n</blockquote>\n<p>seems ok</p>",
        "id": 152210240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251037
    },
    {
        "content": "<p>okay resuming this task</p>",
        "id": 152332919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545401676
    },
    {
        "content": "<p>next: \"[nll] move 2-phase borrows into MIR lowering\" <a href=\"https://github.com/rust-lang/rust/issues/53198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53198\">#53198</a></p>",
        "id": 152332928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545401691
    },
    {
        "content": "<p>this may or may not fold into an effort to determine+document the \"final\" specification for two-phase borrows (2PB)</p>",
        "id": 152332964,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545401747
    },
    {
        "content": "<p>there are definitely open questions</p>",
        "id": 152332977,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545401761
    },
    {
        "content": "<p>and some conversation <a href=\"#narrow/stream/122657-wg-nll/subject/two-phase.20borrows.20with.20existing.20loans/near/152172869\" title=\"#narrow/stream/122657-wg-nll/subject/two-phase.20borrows.20with.20existing.20loans/near/152172869\">here</a></p>",
        "id": 152333132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545401882
    },
    {
        "content": "<p>after reflection: the 2PB specification effort  needs to at least be <em>aware of</em> <a href=\"https://github.com/rust-lang/rust/issues/53198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53198\">#53198</a>. In particular, it should decide whether we want to enusre we leave the door open for that implementation strategy, or just potentially close it forever.</p>",
        "id": 152333463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402191
    },
    {
        "content": "<p>and since that specification effort (<a href=\"https://github.com/rust-lang/rust/issues/46901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46901\">#46901</a>) is P-high, I am likewise marking <a href=\"https://github.com/rust-lang/rust/issues/53198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53198\">#53198</a> as P-high.</p>",
        "id": 152333649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402363
    },
    {
        "content": "<p>next: \"NLL: document specs for (new) semantics in rust ref (incl. deviations from RFC)\" <a href=\"https://github.com/rust-lang/rust/issues/54129\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54129\">#54129</a></p>",
        "id": 152333666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402395
    },
    {
        "content": "<p>I'd say that <a href=\"https://github.com/rust-lang/rust/issues/46901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46901\">#46901</a> is a subtask of <a href=\"https://github.com/rust-lang/rust/issues/54129\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54129\">#54129</a></p>",
        "id": 152333689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402429
    },
    {
        "content": "<p>but <a href=\"https://github.com/rust-lang/rust/issues/54129\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54129\">#54129</a> is not as high priority. It doesn't strike me as something that must land any time soon; its just a nice-to-have.</p>",
        "id": 152333753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402490
    },
    {
        "content": "<p>So I'm tagging <a href=\"https://github.com/rust-lang/rust/issues/54129\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54129\">#54129</a> as P-medium</p>",
        "id": 152333763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402512
    },
    {
        "content": "<p>next: \"<code>#[thread_local] static mut</code> is allowed to have <code>'static</code> lifetime\" <a href=\"https://github.com/rust-lang/rust/issues/54366\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54366\">#54366</a></p>",
        "id": 152333794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402559
    },
    {
        "content": "<p>thread locals are unstable feature</p>",
        "id": 152333806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402587
    },
    {
        "content": "<p>let me see whether there is a tracking issue for stabilizing them...</p>",
        "id": 152333873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402637
    },
    {
        "content": "<p>ah its already listed on the stabilization issue for <code>thread_local</code> (<a href=\"https://github.com/rust-lang/rust/issues/29594\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29594\">#29594</a>)</p>",
        "id": 152333908,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  when you say: &gt; In particular, it should decide whether we want to enusre we leave the door open for that implementation strategy, or just potentially close it forever.</p>\n<p>... I haven't read the issue <a href=\"https://github.com/rust-lang/rust/issues/53198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53198\">#53198</a> in detail (skimmed it)...<br>\n... does it get potentially closed forever because of some change to the typesystem / operational semantics such that it cannot be changed later?<br>\n... if so, T-lang should be brought in</p>",
        "id": 152333927,
        "sender_full_name": "centril",
        "timestamp": 1545402714
    },
    {
        "content": "<p>yeah, there are some examples that are on the comment thread for <a href=\"https://github.com/rust-lang/rust/issues/53198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53198\">#53198</a> of code that is accepted today that we expect would be rejected by the semantics that arises via the rewrite-based 2PB</p>",
        "id": 152334061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402846
    },
    {
        "content": "<p>now, its <em>possible</em> that those examples are not worth supporting</p>",
        "id": 152334072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402866
    },
    {
        "content": "<p>and its also <em>possible</em> that the rewrite could be revised to support them</p>",
        "id": 152334076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402881
    },
    {
        "content": "<p>and its also <em>possible</em> that the static semantics for NLL could be extended (in some way simpler than NLL) that would make those examples compile even under the proposed rewrite</p>",
        "id": 152334114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402916
    },
    {
        "content": "<p>but it also might be premature to bring in T-lang at this point</p>",
        "id": 152334219,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402980
    },
    {
        "content": "<p>i.e. there may be some amount of pre-triage/documentation/survey that NLL team members and/or RalfJung could do</p>",
        "id": 152334243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403009
    },
    {
        "content": "<p>before we start bringing this up at T-lang meeting(s) ?</p>",
        "id": 152334261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ^</p>",
        "id": 152334263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> OK; from your description it seems like T-lang should be brought in <em>at some point</em> before any irreversible action is taken (e.g. changing semantics in a user observable way or finalizing documentation)</p>",
        "id": 152334278,
        "sender_full_name": "centril",
        "timestamp": 1545403044
    },
    {
        "content": "<p>sure, that makes sense</p>",
        "id": 152334288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403063
    },
    {
        "content": "<p>(either dynamic or static semantics...)</p>",
        "id": 152334290,
        "sender_full_name": "centril",
        "timestamp": 1545403064
    },
    {
        "content": "<p>aight; thanks -- I'll let you return to your triage <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 152334347,
        "sender_full_name": "centril",
        "timestamp": 1545403097
    },
    {
        "content": "<p>back to re-triaging \"<code>#[thread_local] static mut</code> is allowed to have <code>'static</code> lifetime\" <a href=\"https://github.com/rust-lang/rust/issues/54366\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54366\">#54366</a> ...</p>",
        "id": 152334399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403183
    },
    {
        "content": "<p>alexcrichton made the following <a href=\"https://github.com/rust-lang/rust/issues/29594#issuecomment-358329382\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29594#issuecomment-358329382\">comment</a> regarding stabilization of <code>thread_local</code>: </p>\n<blockquote>\n<p>I've personally been under the impression that we're holding out on stabilizing this for as long as possible. We've stabilized very few (AFAIK) platform-specific attributes like this and I at least personally haven't ever looked to hard into stabilizing this.</p>\n</blockquote>",
        "id": 152334488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403237
    },
    {
        "content": "<p>based on that, I'm going to tag <a href=\"https://github.com/rust-lang/rust/issues/54366\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54366\">#54366</a> as P-medium</p>",
        "id": 152334493,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403247
    },
    {
        "content": "<p>next: \"NLL: need 3rd round of review comparing .stderr and .nll.stderr output\" <a href=\"https://github.com/rust-lang/rust/issues/54528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54528\">#54528</a></p>",
        "id": 152335024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403722
    },
    {
        "content": "<p>I still do want to go through the work items on the cards here. But its definitely not high priority. P-medium.</p>",
        "id": 152335053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403753
    },
    {
        "content": "<p>next: \"'approximate check' for outlives relations can miss matches\" <a href=\"https://github.com/rust-lang/rust/issues/54572\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54572\">#54572</a></p>",
        "id": 152335158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403811
    },
    {
        "content": "<p>I don't think there's been any change on the status here. Its still pretty low priority. I think I'm going to mark it as P-low and wait for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to yell at me for choosing such a low priority.</p>",
        "id": 152335354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545403957
    },
    {
        "content": "<p>next: \"Goal: Accept partial initialization + use of records created via such\" <a href=\"https://github.com/rust-lang/rust/issues/54987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54987\">#54987</a></p>",
        "id": 152335415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404009
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> was working on an RFC related to this.</p>",
        "id": 152335497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  Yeah; <a href=\"https://github.com/Centril/rfcs/pull/16\" target=\"_blank\" title=\"https://github.com/Centril/rfcs/pull/16\">https://github.com/Centril/rfcs/pull/16</a> -- I left some TODOs for you / <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152335525,
        "sender_full_name": "centril",
        "timestamp": 1545404072
    },
    {
        "content": "<p>but its definitely not high priority. And until I see people from community clamoring for it, I'm not sure its even P-medium.</p>",
        "id": 152335541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> do you want me to link from <a href=\"https://github.com/rust-lang/rust/issues/54987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54987\">#54987</a> to that PR ?</p>",
        "id": 152335578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> seems P-low... or; it's also blocked by an RFC so not even P-anything ;)</p>",
        "id": 152335580,
        "sender_full_name": "centril",
        "timestamp": 1545404120
    },
    {
        "content": "<p>right; I prefer to explictly mark as P-low so that we know we don't need to think about it further during future triage.</p>",
        "id": 152335603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> sure, why not</p>",
        "id": 152335606,
        "sender_full_name": "centril",
        "timestamp": 1545404146
    },
    {
        "content": "<p>next (and <em>last</em>): \"NLL error on closure, but not on equivalent function\" <a href=\"https://github.com/rust-lang/rust/issues/55526\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55526\">#55526</a></p>",
        "id": 152335755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404250
    },
    {
        "content": "<p>I've had quite a saga personally with <a href=\"https://github.com/rust-lang/rust/issues/55526\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55526\">#55526</a></p>",
        "id": 152335786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404275
    },
    {
        "content": "<p>I think the discrepancy under discussion there may be worth discussing with T-lang...</p>",
        "id": 152335866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404324
    },
    {
        "content": "<p>but I don't see a reason to change the P-label (which was P-medium; see aforementioned saga where it went from P-high to P-medium over past 1.5 months)</p>",
        "id": 152335995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404429
    },
    {
        "content": "<p>and that's it; no more NLL-deferreds.</p>",
        "id": 152336041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  do you want to I-nominate the last one for T-lang or is that premature?</p>",
        "id": 152336070,
        "sender_full_name": "centril",
        "timestamp": 1545404517
    },
    {
        "content": "<p>premature I think</p>",
        "id": 152336115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404528
    },
    {
        "content": "<p>or at least</p>",
        "id": 152336117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404533
    },
    {
        "content": "<p>the main thing that T-lang may want to discuss is the hypothetical change to AST-borrowck</p>",
        "id": 152336125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404553
    },
    {
        "content": "<p>so that it will reject the code</p>",
        "id": 152336145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404580
    },
    {
        "content": "<p>when no return type is provided</p>",
        "id": 152336155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404593
    },
    {
        "content": "<p>which is an expected side-effect of PR <a href=\"https://github.com/rust-lang/rust/issues/55988\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55988\">#55988</a></p>",
        "id": 152336173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  is this related to this weirdness btw? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=824c389a9ee6f01ec519a2cbcfc9ebef\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=824c389a9ee6f01ec519a2cbcfc9ebef\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=824c389a9ee6f01ec519a2cbcfc9ebef</a></p>",
        "id": 152336184,
        "sender_full_name": "centril",
        "timestamp": 1545404624
    },
    {
        "content": "<p>(4-5 does not typeck but it should presumably do so)</p>",
        "id": 152336244,
        "sender_full_name": "centril",
        "timestamp": 1545404645
    },
    {
        "content": "<p>yes I think this is related</p>",
        "id": 152336248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404652
    },
    {
        "content": "<p>which reminds me</p>",
        "id": 152336292,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404713
    },
    {
        "content": "<p>I think that there is an important task here</p>",
        "id": 152336296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404718
    },
    {
        "content": "<p>to actually ensure our test suite captures the current various behaviors</p>",
        "id": 152336300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404729
    },
    {
        "content": "<p>so that we're aware of future changes</p>",
        "id": 152336316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  but do you agree that 4-5 is a bug?</p>",
        "id": 152336331,
        "sender_full_name": "centril",
        "timestamp": 1545404759
    },
    {
        "content": "<p>well</p>",
        "id": 152336390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404783
    },
    {
        "content": "<p>it might not be a bug... I'm not sure</p>",
        "id": 152336397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404800
    },
    {
        "content": "<p>you can still add an explicit type annotation to get it to work again</p>",
        "id": 152336406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404810
    },
    {
        "content": "<p>like so: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=d002240a9cb91a613a529b26f2af990b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=d002240a9cb91a613a529b26f2af990b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=d002240a9cb91a613a529b26f2af990b</a></p>",
        "id": 152336411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404818
    },
    {
        "content": "<p>so its basically an issue with how we use (limited) contextual information to infer the type of a closure</p>",
        "id": 152336430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404853
    },
    {
        "content": "<p>and I think people assume certain transformations are valid (like the one you are demonstrating here) but the transformations just ... aren't.</p>",
        "id": 152336454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  sure, or with <code>impl for&lt;'a&gt; Fn(&amp;'a u8) -&gt; u8</code> more generally...</p>",
        "id": 152336507,
        "sender_full_name": "centril",
        "timestamp": 1545404898
    },
    {
        "content": "<p>don't think that works</p>",
        "id": 152336521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404928
    },
    {
        "content": "<p>(or maybe you just need to enable certain features for it)</p>",
        "id": 152336542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404946
    },
    {
        "content": "<p>(mine worked on stable)</p>",
        "id": 152336546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  not yet ;) but <code>let x: impl ... = expr;</code> is on its way</p>",
        "id": 152336555,
        "sender_full_name": "centril",
        "timestamp": 1545404966
    },
    {
        "content": "<p>still even this breaks: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=51d8cc3f965e47e56a700cdaf4bcbd3b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=51d8cc3f965e47e56a700cdaf4bcbd3b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=51d8cc3f965e47e56a700cdaf4bcbd3b</a></p>",
        "id": 152336577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545404994
    },
    {
        "content": "<p>assuming you don't want to also change signature of <code>fn bar</code></p>",
        "id": 152336620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405004
    },
    {
        "content": "<p>oh yeah; true</p>",
        "id": 152336634,
        "sender_full_name": "centril",
        "timestamp": 1545405015
    },
    {
        "content": "<p>anyway</p>",
        "id": 152336638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405023
    },
    {
        "content": "<p>it seems like this may be a different but related issue</p>",
        "id": 152336646,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405031
    },
    {
        "content": "<p>where the fundamental thing is the question of \"how does type/region inference work for closures???\"</p>",
        "id": 152336656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405043
    },
    {
        "content": "<p>right?</p>",
        "id": 152336663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405049
    },
    {
        "content": "<p>right</p>",
        "id": 152336667,
        "sender_full_name": "centril",
        "timestamp": 1545405052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>   it seems to me that in this instance, because the binding <code>x</code> is otherwise unconstrained and there's no surrounding contextual information that it should have the most general type it can have and that is to have <code>for&lt;'a&gt; ...</code></p>",
        "id": 152336713,
        "sender_full_name": "centril",
        "timestamp": 1545405102
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has suggested doing this change</p>",
        "id": 152336908,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405266
    },
    {
        "content": "<p>they've used an analogy  with how ML inference of type-polymorphic let-bindings works</p>",
        "id": 152336925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  yeah; you'd get the same results in Haskell</p>",
        "id": 152336971,
        "sender_full_name": "centril",
        "timestamp": 1545405346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  I'm working on proposal(s) for <code>for&lt;'a: 'b&gt;</code>, <code>for&lt;T: Trait&gt;</code> and generic closures anyways so I could work that in somewhere</p>",
        "id": 152337036,
        "sender_full_name": "centril",
        "timestamp": 1545405387
    },
    {
        "content": "<p>Context of where niko suggested ML-style inference: <a href=\"#narrow/stream/122657-wg-nll/subject/.2355526.20error.20on.20closure.20but.20not.20on.20.22equiv.22.20fn/near/151010804\" title=\"#narrow/stream/122657-wg-nll/subject/.2355526.20error.20on.20closure.20but.20not.20on.20.22equiv.22.20fn/near/151010804\">https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/.2355526.20error.20on.20closure.20but.20not.20on.20.22equiv.22.20fn/near/151010804</a></p>",
        "id": 152337353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ^</p>",
        "id": 152337422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545405733
    }
]