[
    {
        "content": "<p>OK so now that we landed <a href=\"https://github.com/rust-lang-nursery/polonius/pull/36\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/36\">https://github.com/rust-lang-nursery/polonius/pull/36</a> we gotta port the location-insensitive code to use <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> — I was saying to <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that it would be good for <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> (or someone besides <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> , anyway) to do this, so that we can gain more experience</p>",
        "id": 126803267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526753787
    },
    {
        "content": "<p>I can kinda give you a few tips</p>",
        "id": 126803371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754015
    },
    {
        "content": "<p>the basic ideas are the same as before — that is, we're breaking down into <code>join</code> operations etc</p>",
        "id": 126803373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754024
    },
    {
        "content": "<p>but in the new system you have to create explicit variables to represent each intermediate point</p>",
        "id": 126803377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754052
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"117381\">@Arjan van Eersel</span> with whom I've been chatting in privmsg :)</p>",
        "id": 126803384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754078
    },
    {
        "content": "<p>I'm looking now for that video that <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I recorded :) youtube is kind of hard to navigate...</p>",
        "id": 126803480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754284
    },
    {
        "content": "<p>ok, found it. So what I was going to say is that the concepts from <a href=\"https://youtu.be/oTnbtGuSpWQ\" target=\"_blank\" title=\"https://youtu.be/oTnbtGuSpWQ\">this video</a> still apply.</p>",
        "id": 126803527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754422
    },
    {
        "content": "<p>let me show an example; I think it's good to start by looking at the <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs\">naive rules</a></p>",
        "id": 126803534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754459
    },
    {
        "content": "<p>(you could read <a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md\">@**Frank McSherry**'s blog post</a>, too, but you may not need to; it covers how the implementation works (as well as how to use it)</p>",
        "id": 126803583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754566
    },
    {
        "content": "<p>anyway the basic idea is that we are going to be iteratively building up the full set of tuples</p>",
        "id": 126803588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754586
    },
    {
        "content": "<p>so we first <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L44-L45\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L44-L45\">create an iteration</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iteration1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iteration</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126803630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754619
    },
    {
        "content": "<p>within the iteration you <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L47-L48\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L47-L48\">create variables</a> representing the intermediate points</p>",
        "id": 126803638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754668
    },
    {
        "content": "<p>you have to declare these up-front, which is perhaps a bit confusing</p>",
        "id": 126803639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754676
    },
    {
        "content": "<p>these variables generally serve one of two purposes:</p>\n<p>1. indexing an existing relation for a later join: this basically means mapping into a <code>(K, V)</code> tuple where the <code>K</code> represents the key that will be used in the join<br>\n2. collecting the results of joins</p>",
        "id": 126803680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754729
    },
    {
        "content": "<p>as an example of an index, consider <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L51\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L51\"><code>subset_r1p</code></a>:</p>",
        "id": 126803681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754754
    },
    {
        "content": "<p>it is given a while <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L72\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L72\">here</a>, during the while loop:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">subset_r1p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126803682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754780
    },
    {
        "content": "<p>this <code>from_map</code> means \"add the tuples resulting from applying the closure to <code>subset</code> into <code>subset_r1p</code>\"</p>",
        "id": 126803687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754803
    },
    {
        "content": "<p>so in this case we take as input three tuples like <code>(r1, r2, p)</code> and reorganize them to <code>((r1, p), r2)</code> — this basically makes <code>(r1, p)</code> a <em>key</em> we can use to do a later join</p>",
        "id": 126803688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754832
    },
    {
        "content": "<p>similarly <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L73\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L73\"><code>subset_r2p</code></a> makes the key be <code>(r2, p)</code></p>",
        "id": 126803729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754872
    },
    {
        "content": "<p>(you can sort of see the naming convention that <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> adopted here: <code>foo_xy</code> means \"the relation <code>foo</code> with <code>x</code> and <code>y</code> selected as the key)</p>",
        "id": 126803730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754903
    },
    {
        "content": "<p>those two indices are then joined <a href=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L82\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/0fdac5f8fd2223666a014eebf991995b4ab990b6/src/output/naive.rs#L82\">here</a> in order to achieve this bit of datalog:</p>\n<div class=\"codehilite\"><pre><span></span>subset(R1, R3, P) :-\n    subset(R1, R2, P),\n    subset(R2, R3, P).\n</pre></div>",
        "id": 126803739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754956
    },
    {
        "content": "<p>(I'm also available to help <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> whenever, I also have some notes from converting the programs to <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> the very mechanical steps I followed; but which were of course conceptually similar to what you and niko went over on the video)</p>",
        "id": 126803740,
        "sender_full_name": "lqd",
        "timestamp": 1526754958
    },
    {
        "content": "<p>the key there is that you look for which variables the two relations have in common:</p>",
        "id": 126803782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754978
    },
    {
        "content": "<p>in this case, <code>R2</code> and <code>P</code> are shared between <code>subset(R1, R2, P)</code> and <code>subset(R2, R3, P)</code></p>",
        "id": 126803784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526754996
    },
    {
        "content": "<p>in one case, <code>R2</code> appears in the second position, and in the other, in the first position, which is why we are joining <code>subset_r1p</code> and <code>subset_r2p</code></p>",
        "id": 126803786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755015
    },
    {
        "content": "<p>(I just realized that it might be a bit confusing that <code>R2</code> is kind of used in two distinct ways here: it might be clearer if we defined the datalog as:</p>\n<div class=\"codehilite\"><pre><span></span>subset(A, C, P) :-\n    subset(A, B, P),\n    subset(B, C, P).\n</pre></div>",
        "id": 126803792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755052
    },
    {
        "content": "<p>in which case the variables in common are <code>B</code> and <code>P</code></p>",
        "id": 126803793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755059
    },
    {
        "content": "<p>and the index <code>subset_r1p</code> corresponds to <code>B</code> appearing in the first position (<code>subset(B, C, P)</code>)</p>",
        "id": 126803797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755075
    },
    {
        "content": "<p>whereas <code>subset_r2p</code> corresponds to <code>B</code> appearing in the second position (<code>subset(A, B, P)</code>)</p>",
        "id": 126803838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755091
    },
    {
        "content": "<p>anyway, I'll stop here — maybe that's enough to get you started :) but yeah feel free to leave questions and somebody can answer</p>",
        "id": 126803840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755106
    },
    {
        "content": "<p>it occurs to me I probably should have tried to write this up as actual text in Github and not on Zulip but oh well</p>",
        "id": 126803841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755118
    },
    {
        "content": "<p>i happen to also be reading through this</p>",
        "id": 126803896,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526755274
    },
    {
        "content": "<p>name suggestions for the new algorithm?</p>",
        "id": 126803938,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526755327
    },
    {
        "content": "<p><code>InsensitiveFrog</code>?</p>",
        "id": 126803939,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526755333
    },
    {
        "content": "<p>lol. Sure =) eventually I envision this being merged into the optimized-frog variant in any case</p>",
        "id": 126803951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755416
    },
    {
        "content": "<p>the name of the evil frog in the Muppets Most Wanted movie was Constantine</p>",
        "id": 126803992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755462
    },
    {
        "content": "<p>not sure how we can make use of that</p>",
        "id": 126803993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755466
    },
    {
        "content": "<p>or the name Kermit</p>",
        "id": 126803994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755469
    },
    {
        "content": "<p>but we ... probably should</p>",
        "id": 126803995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526755472
    },
    {
        "content": "<p>the only thing that i didn't understand from reading the code is the call to <code>.complete()</code></p>",
        "id": 126804338,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756303
    },
    {
        "content": "<p>e.g. for the naive datafrog algorithm, it's being called on <code>subset_r1p</code></p>",
        "id": 126804347,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756349
    },
    {
        "content": "<p>the return value of which is assigned to <code>subset</code></p>",
        "id": 126804349,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756369
    },
    {
        "content": "<p>this makes me think that the result of <code>subset_r1p</code> is being assigned to <code>subset</code></p>",
        "id": 126804352,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756389
    },
    {
        "content": "<p>which... doesn't quite make much sense to me, since in the iteration we also defined and calculated <code>subset_r2p</code>, <code>subset_p</code> and <code>subset</code>, and we only used <code>subset_r1p</code></p>",
        "id": 126804408,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756466
    },
    {
        "content": "<p>doesn't this just throw away all our calculations for nothing?</p>",
        "id": 126804411,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756479
    },
    {
        "content": "<p>ah, actually that's an inefficiency in the way it's expressed I think</p>",
        "id": 126804461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756622
    },
    {
        "content": "<p>that said, it's not <em>wrong</em></p>",
        "id": 126804463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756626
    },
    {
        "content": "<p>the naive algorithm should only have one iteration (there's an issue on GH about that)</p>",
        "id": 126804464,
        "sender_full_name": "lqd",
        "timestamp": 1526756627
    },
    {
        "content": "<p>in particular, we're going to iterate until a fixed point is reached</p>",
        "id": 126804465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756633
    },
    {
        "content": "<p>at that point, both <code>subset</code> and <code>subset_r1p</code> have the same set of tuples,</p>",
        "id": 126804502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756645
    },
    {
        "content": "<p>but organized differently</p>",
        "id": 126804505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756648
    },
    {
        "content": "<p>it happens to return the version that is indexed by <code>(r1, p)</code>, because that is what is needed later for a <code>join</code></p>",
        "id": 126804509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756662
    },
    {
        "content": "<p>indeed I think that the <em>main</em> <code>subset</code>  is not needed at all</p>",
        "id": 126804511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756676
    },
    {
        "content": "<p>you could just always keep the tuples organized like <code>((r1, p), r2)</code> instead of <code>(r1, r2, p)</code></p>",
        "id": 126804512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526756690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> complete will turn the Variable storage (made to compute the joins in rounds w/ deltas) into the regular tuples you'd expect out of the computation</p>",
        "id": 126804517,
        "sender_full_name": "lqd",
        "timestamp": 1526756706
    },
    {
        "content": "<blockquote>\n<p>at that point, both <code>subset</code> and <code>subset_r1p</code> have the same set of tuples,</p>\n</blockquote>\n<p>huh, this bit is unintuitive to me, because it means that by calculating <code>subset</code>, you also change the data that's in <code>subset_r1p</code></p>",
        "id": 126804611,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756904
    },
    {
        "content": "<p>which i didn't quite expect, i thought this was supposed to be functional (i.e. without side effects)</p>",
        "id": 126804618,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526756963
    },
    {
        "content": "<p>the indexed variables are updated manually and independently from one another</p>",
        "id": 126804663,
        "sender_full_name": "lqd",
        "timestamp": 1526757032
    },
    {
        "content": "<p>oh wait, are you saying that <code>subset_r1q</code> is a <em>view</em> on <code>subset</code>?</p>",
        "id": 126804706,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757124
    },
    {
        "content": "<p>doing things with subset will not touch subset_* — this part updates them <a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/naive.rs#L71-L74\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/naive.rs#L71-L74\">https://github.com/rust-lang-nursery/polonius/blob/master/src/output/naive.rs#L71-L74</a></p>",
        "id": 126804709,
        "sender_full_name": "lqd",
        "timestamp": 1526757127
    },
    {
        "content": "<p>semantically yes, physically it will be a copy</p>",
        "id": 126804716,
        "sender_full_name": "lqd",
        "timestamp": 1526757203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ok, so why in the end do you only have a <code>subset_r1p.complete()</code>? why do you even bother to calculate <code>subset</code> in the iteration?</p>",
        "id": 126804718,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757238
    },
    {
        "content": "<p>it is one of the inefficiencies, but it's the same data in fine</p>",
        "id": 126804760,
        "sender_full_name": "lqd",
        "timestamp": 1526757288
    },
    {
        "content": "<p>the indexing and manual maintenance is the thing that's more useful</p>",
        "id": 126804767,
        "sender_full_name": "lqd",
        "timestamp": 1526757316
    },
    {
        "content": "<p>to be clear</p>",
        "id": 126804771,
        "sender_full_name": "lqd",
        "timestamp": 1526757329
    },
    {
        "content": "<p>at first we were computing subset</p>",
        "id": 126804773,
        "sender_full_name": "lqd",
        "timestamp": 1526757339
    },
    {
        "content": "<p>but the next (useless) iteration used subset indexed differently</p>",
        "id": 126804775,
        "sender_full_name": "lqd",
        "timestamp": 1526757354
    },
    {
        "content": "<p>and reindexed subset, so we just removed part of the redundancy by returning the indexed that was already done before</p>",
        "id": 126804818,
        "sender_full_name": "lqd",
        "timestamp": 1526757402
    },
    {
        "content": "<p>yeah, it seems to me that both <code>subset</code> and <code>requires</code> are only useful for indexing</p>",
        "id": 126804820,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757407
    },
    {
        "content": "<p>and in fact <code>subset</code> isn't being used at all in the final iteration</p>",
        "id": 126804826,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757443
    },
    {
        "content": "<p>the pattern though will be exactly the same whether the data is used or not</p>",
        "id": 126804828,
        "sender_full_name": "lqd",
        "timestamp": 1526757449
    },
    {
        "content": "<p>yeah but they flow into each other tho</p>",
        "id": 126804831,
        "sender_full_name": "lqd",
        "timestamp": 1526757466
    },
    {
        "content": "<p>this is still not clear to me what in the world is happening</p>",
        "id": 126804877,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757558
    },
    {
        "content": "<p>subset goes to requires which goes to borrow_live_at</p>",
        "id": 126804878,
        "sender_full_name": "lqd",
        "timestamp": 1526757561
    },
    {
        "content": "<p>lemme pose a question</p>",
        "id": 126804879,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757564
    },
    {
        "content": "<p>I suggest focusing on the mechanical transformations of the datalog rules, \"here are the steps I need to do for this rule\" from this will flow variables, temporaries, and indices</p>",
        "id": 126804926,
        "sender_full_name": "lqd",
        "timestamp": 1526757619
    },
    {
        "content": "<p>oh wait, nvm</p>",
        "id": 126804927,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757621
    },
    {
        "content": "<p>i'm seeing it now</p>",
        "id": 126804928,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757627
    },
    {
        "content": "<p><code>subset_r1p</code> is being mapped from <code>subset</code></p>",
        "id": 126804932,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757638
    },
    {
        "content": "<p>yes</p>",
        "id": 126804933,
        "sender_full_name": "lqd",
        "timestamp": 1526757643
    },
    {
        "content": "<p>I sent a link to those manual \"view\" mainenance lines :)</p>",
        "id": 126804937,
        "sender_full_name": "lqd",
        "timestamp": 1526757665
    },
    {
        "content": "<p>that <em>really</em> shouldn't be in the first position, since <code>subset_r1p</code> is a result of the computation</p>",
        "id": 126804941,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757678
    },
    {
        "content": "<p>because what i thought before is that data is being copied from <code>subset</code> to <code>subset_r1p</code>, and then <code>subset_r1p</code> is then used to recompute <code>subset</code></p>",
        "id": 126804980,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757766
    },
    {
        "content": "<p>and after that, no other data assignments happened to <code>subset_r1p</code></p>",
        "id": 126804984,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757783
    },
    {
        "content": "<p>and we return <code>subset_r1p</code></p>",
        "id": 126804989,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757795
    },
    {
        "content": "<p>which made the whole process of recomputing <code>subset</code> look useless</p>",
        "id": 126804990,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757810
    },
    {
        "content": "<p>obviously that's not how datafrog works</p>",
        "id": 126804992,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526757819
    },
    {
        "content": "<p>keep in mind these are all being iterated to a fixpoint</p>",
        "id": 126805035,
        "sender_full_name": "lqd",
        "timestamp": 1526757855
    },
    {
        "content": "<p>the datalog rules being the key</p>",
        "id": 126805054,
        "sender_full_name": "lqd",
        "timestamp": 1526757943
    },
    {
        "content": "<p>that's why they're always in the comments as well</p>",
        "id": 126805093,
        "sender_full_name": "lqd",
        "timestamp": 1526757965
    },
    {
        "content": "<p>the rest is manual maintenance, and positives and negatives of efficiency :)</p>",
        "id": 126805098,
        "sender_full_name": "lqd",
        "timestamp": 1526757999
    },
    {
        "content": "<p>the comments aren't enough, because this is a different programming model</p>",
        "id": 126805099,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758001
    },
    {
        "content": "<p>lemme show you what i was thinking</p>",
        "id": 126805100,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758005
    },
    {
        "content": "<p>did you see the differential dataflow analyses ?</p>",
        "id": 126805106,
        "sender_full_name": "lqd",
        "timestamp": 1526758040
    },
    {
        "content": "<p>i thought <code>subset_r1p.from_map(&amp;subset, ..)</code> meant <code>subset_r1p = subset.map(..)</code></p>",
        "id": 126805107,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758043
    },
    {
        "content": "<p>so when i didn't see <code>subset_r1p</code> being \"assigned to\" anymore after the calculation of <code>subset</code>, i was very confused</p>",
        "id": 126805157,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758159
    },
    {
        "content": "<p>I fail to see the difference, after both of those calls, subset_r1p and subset will have the \"same\" tuples, but ordered differently</p>",
        "id": 126805158,
        "sender_full_name": "lqd",
        "timestamp": 1526758163
    },
    {
        "content": "<p>ok understood</p>",
        "id": 126805161,
        "sender_full_name": "lqd",
        "timestamp": 1526758197
    },
    {
        "content": "<p>the difference is, <code>from_map</code> is only called at the beginning of the iteration</p>",
        "id": 126805162,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758200
    },
    {
        "content": "<p>it was being assigned, in the next iteration of the loop :)</p>",
        "id": 126805209,
        "sender_full_name": "lqd",
        "timestamp": 1526758213
    },
    {
        "content": "<p>yes, this makes more sense now</p>",
        "id": 126805210,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758227
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126805213,
        "sender_full_name": "lqd",
        "timestamp": 1526758240
    },
    {
        "content": "<p>those rules are the beginning, in my mind, as they are tangential to the datalog</p>",
        "id": 126805226,
        "sender_full_name": "lqd",
        "timestamp": 1526758276
    },
    {
        "content": "<p>similar to the .map calls that were more localized in DD</p>",
        "id": 126805228,
        "sender_full_name": "lqd",
        "timestamp": 1526758303
    },
    {
        "content": "<p>next question, what's the purpose of <code>variable_indistinct()</code>?</p>",
        "id": 126805231,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758321
    },
    {
        "content": "<p>a lot of those would be hidden by DD</p>",
        "id": 126805270,
        "sender_full_name": "lqd",
        "timestamp": 1526758331
    },
    {
        "content": "<p>also keep in mind this whole thing started like wednesday so we're a little light on \"best practices\" and rationale for communicating everything :D</p>",
        "id": 126805273,
        "sender_full_name": "lqd",
        "timestamp": 1526758373
    },
    {
        "content": "<p>variable indistinct is a way to control whether the variable will need to be deduped or not</p>",
        "id": 126805280,
        "sender_full_name": "lqd",
        "timestamp": 1526758403
    },
    {
        "content": "<p>similar to how DD used distinct to ask for deduplication</p>",
        "id": 126805283,
        "sender_full_name": "lqd",
        "timestamp": 1526758428
    },
    {
        "content": "<p>in most temporaries, indexes, there's no need for this, and slows things down</p>",
        "id": 126805323,
        "sender_full_name": "lqd",
        "timestamp": 1526758451
    },
    {
        "content": "<p>it's mostly for performance though</p>",
        "id": 126805326,
        "sender_full_name": "lqd",
        "timestamp": 1526758475
    },
    {
        "content": "<p>AFAIUI</p>",
        "id": 126805328,
        "sender_full_name": "lqd",
        "timestamp": 1526758481
    },
    {
        "content": "<p>as to not sort/dedup/copy everything all the time</p>",
        "id": 126805336,
        "sender_full_name": "lqd",
        "timestamp": 1526758511
    },
    {
        "content": "<p>I don't Frank's article on <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> mentions these but yeah</p>",
        "id": 126805344,
        "sender_full_name": "lqd",
        "timestamp": 1526758558
    },
    {
        "content": "<p>hmm... so the most important part is how it's different from just calling <code>variable</code>, but i guess it just means <code>variable</code> is duplicated by default</p>",
        "id": 126805391,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758656
    },
    {
        "content": "<p>by default they are maintained \"distinctly\"</p>",
        "id": 126805435,
        "sender_full_name": "lqd",
        "timestamp": 1526758723
    },
    {
        "content": "<p>so deduped</p>",
        "id": 126805437,
        "sender_full_name": "lqd",
        "timestamp": 1526758735
    },
    {
        "content": "<p>(btw datafrog has some documentation by now)</p>",
        "id": 126805450,
        "sender_full_name": "lqd",
        "timestamp": 1526758770
    },
    {
        "content": "<p>ohhh ok, so that's why intermediate vars benefit from indistinct</p>",
        "id": 126805456,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758788
    },
    {
        "content": "<p>am reading the source code rn</p>",
        "id": 126805457,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526758797
    },
    {
        "content": "<p>here <a href=\"https://github.com/frankmcsherry/datafrog/blob/master/src/lib.rs#L111-L115\" target=\"_blank\" title=\"https://github.com/frankmcsherry/datafrog/blob/master/src/lib.rs#L111-L115\">https://github.com/frankmcsherry/datafrog/blob/master/src/lib.rs#L111-L115</a></p>",
        "id": 126805503,
        "sender_full_name": "lqd",
        "timestamp": 1526758811
    },
    {
        "content": "<p>yeah</p>",
        "id": 126805507,
        "sender_full_name": "lqd",
        "timestamp": 1526758825
    },
    {
        "content": "<p>and because they are usually indexed from already deduped relations</p>",
        "id": 126805510,
        "sender_full_name": "lqd",
        "timestamp": 1526758841
    },
    {
        "content": "<blockquote>\n<p>i thought <code>subset_r1p.from_map(&amp;subset, ..)</code> meant <code>subset_r1p = subset.map(..)</code></p>\n</blockquote>\n<p>it actually means <code>subset_r1p += subset.map(..)</code></p>",
        "id": 126805665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526759231
    },
    {
        "content": "<p>(where <code>subset_r1p</code> is a set)</p>",
        "id": 126805666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526759257
    },
    {
        "content": "<p>perhaps <code>extend_from_map</code> or something would be a better name</p>",
        "id": 126805668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526759273
    },
    {
        "content": "<p>(to connect to Rust's <code>extend</code> methods)</p>",
        "id": 126805669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526759281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the key thing i missed was that we're inside of an iteration, so tuples carried over from previous ones</p>",
        "id": 126805714,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526759367
    },
    {
        "content": "<p>i thought it was an \"all-at-once\" assignment</p>",
        "id": 126805715,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526759382
    },
    {
        "content": "<p>yeah; this is why I say <code>+=</code> or <code>extend</code></p>",
        "id": 126805716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526759385
    },
    {
        "content": "<p>I'm here! But I drank a bunch, and also read HN which !#$!@# is just never smart.</p>",
        "id": 126806124,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526760285
    },
    {
        "content": "<p>Trying to avoid telling Google's head of cloud programming languages that I can't take his or her opinion seriously as long as their stream processor remotes all of its state to other machines.</p>",
        "id": 126806135,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526760351
    },
    {
        "content": "<p>Also, Vienna is a happier place than Zürich. Totally. :D</p>",
        "id": 126806229,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526760497
    },
    {
        "content": "<p>oh shoot, i didn't notice that <span class=\"user-mention\" data-user-id=\"117381\">@Arjan van Eersel</span> has already been working on <a href=\"https://github.com/rust-lang-nursery/polonius/issues/37\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/37\">https://github.com/rust-lang-nursery/polonius/issues/37</a>!</p>",
        "id": 126806389,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526760879
    },
    {
        "content": "<p>i already made a PR fixing that issue...</p>",
        "id": 126806390,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526760890
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/39\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/39\">https://github.com/rust-lang-nursery/polonius/pull/39</a></p>",
        "id": 126806398,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526760945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> sorry I didn't get a chance to try that out yet btw, hopefully soon</p>",
        "id": 126887395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so were you going to hack on that now?</p>",
        "id": 126887489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526930335
    },
    {
        "content": "<p>yes</p>",
        "id": 126887519,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526930393
    },
    {
        "content": "<p>pulling and stuff now :)</p>",
        "id": 126887568,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526930408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> how many potential_errors did you get on clap btw ? I only remember how long it took</p>",
        "id": 126889297,
        "sender_full_name": "lqd",
        "timestamp": 1526932531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> hmm don't remember, unsure if I ran with clap or with another example</p>",
        "id": 126889379,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526932636
    },
    {
        "content": "<p>I don't think there are \"invalidates\" points in the other dataset, some maybe one of yours</p>",
        "id": 126889667,
        "sender_full_name": "lqd",
        "timestamp": 1526933005
    },
    {
        "content": "<p>to be honest I don't remember what I did, will try to port this thing and test again</p>",
        "id": 126889750,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526933091
    },
    {
        "content": "<p>was reading <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> blog post now to see how's the deal :)</p>",
        "id": 126889764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526933107
    },
    {
        "content": "<p>(in any case I built a version of the location insensitive thing so that I can help you with it if you had questions while doing yours — but as I don't know what the correct numbers are, it's stIll buggy <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126889765,
        "sender_full_name": "lqd",
        "timestamp": 1526933107
    },
    {
        "content": "<p>I suggest to base your work on the version of the \"<a href=\"http://naive.rs\" target=\"_blank\" title=\"http://naive.rs\">naive.rs</a>\" that Keith has a PR for, it's a tad bit simpler than the one in master right now</p>",
        "id": 126889828,
        "sender_full_name": "lqd",
        "timestamp": 1526933180
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126889914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526933305
    },
    {
        "content": "<p>oh but issue-47680 does have invalidates facts in the repo, but not in your PR #34, so you should be good to go (+ clap has some as well) :)</p>",
        "id": 126891352,
        "sender_full_name": "lqd",
        "timestamp": 1526935085
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126891394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526935165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  I _think_ PR #34 doesn't find potential errors for the <code>issue</code>dataset — &amp; it feels like the last timely join might be the cause — but does have data for <code>restricts_anywhere </code> and <code>subset_anywhere</code>. Just a heads up if you're also using it as a guide for your port :) (&amp; if that's the case I'd focus on translating the datalog rules, rather than transliterating the timely compute too precisely)</p>",
        "id": 126894805,
        "sender_full_name": "lqd",
        "timestamp": 1526939900
    },
    {
        "content": "<p>ok</p>",
        "id": 126894829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526939962
    },
    {
        "content": "<p>will check that later</p>",
        "id": 126894833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526939967
    },
    {
        "content": "<p>maybe there are no potential errors in those datasets :D</p>",
        "id": 126895339,
        "sender_full_name": "lqd",
        "timestamp": 1526940809
    },
    {
        "content": "<p>have just finished porting LocationInsensitive stuff</p>",
        "id": 126895389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526940886
    },
    {
        "content": "<p>I'd be pretty surprised if the issue-47680 had no error</p>",
        "id": 126895400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526940908
    },
    {
        "content": "<p>when run w/ out loc sensitivity</p>",
        "id": 126895403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526940922
    },
    {
        "content": "<p>in fact more than surprised :)</p>",
        "id": 126895405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526940928
    },
    {
        "content": "<p>mine finds 2</p>",
        "id": 126895460,
        "sender_full_name": "lqd",
        "timestamp": 1526941006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> once you get the hang of it, translation is pretty straight-forward right ?</p>",
        "id": 126895477,
        "sender_full_name": "lqd",
        "timestamp": 1526941072
    },
    {
        "content": "<p>in order to test location insensitive, are you using some example?</p>",
        "id": 126895479,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941074
    },
    {
        "content": "<p>yes issue-47680</p>",
        "id": 126895522,
        "sender_full_name": "lqd",
        "timestamp": 1526941087
    },
    {
        "content": "<p>yes, it's easy, I may have done something wrong though :P</p>",
        "id": 126895529,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941110
    },
    {
        "content": "<p>(tbf I have not tried the new \"treefrog leapjoin\" but that would definitely help in our more complex cases)</p>",
        "id": 126895538,
        "sender_full_name": "lqd",
        "timestamp": 1526941135
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/41\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/41\">https://github.com/rust-lang-nursery/polonius/pull/41</a></p>",
        "id": 126895590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941202
    },
    {
        "content": "<p>in fact I'm surprised how better the code and easy to read is</p>",
        "id": 126895619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941217
    },
    {
        "content": "<p>again, I may be missing something important :P</p>",
        "id": 126895627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941231
    },
    {
        "content": "<p>haven't tested the thing yet</p>",
        "id": 126895631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941241
    },
    {
        "content": "<p>yeah I think a couple things are missing, almost done :)</p>",
        "id": 126895652,
        "sender_full_name": "lqd",
        "timestamp": 1526941277
    },
    {
        "content": "<p>oh maybe you're not porting your PR#34 ? I see no invalidates</p>",
        "id": 126895712,
        "sender_full_name": "lqd",
        "timestamp": 1526941348
    },
    {
        "content": "<p>no no</p>",
        "id": 126895716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941360
    },
    {
        "content": "<p>oh :D</p>",
        "id": 126895717,
        "sender_full_name": "lqd",
        "timestamp": 1526941366
    },
    {
        "content": "<p>I'm not porting that</p>",
        "id": 126895718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941368
    },
    {
        "content": "<p>I wanted to just port what's in master</p>",
        "id": 126895720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941379
    },
    {
        "content": "<p>then I can force push that PR</p>",
        "id": 126895724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941384
    },
    {
        "content": "<p>I mean, port that port and force push there</p>",
        "id": 126895728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941394
    },
    {
        "content": "<p>then I retract my previous statements! :D</p>",
        "id": 126895729,
        "sender_full_name": "lqd",
        "timestamp": 1526941396
    },
    {
        "content": "<p>heheh <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126895731,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941403
    },
    {
        "content": "<p>once I get the OK or is it merged I can start porting the other part</p>",
        "id": 126895742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941439
    },
    {
        "content": "<p>anyway I'm not 100% sure how some things in datafrog work</p>",
        "id": 126895786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941463
    },
    {
        "content": "<p>mainly how the iterations work, I may be guessing that correctly but better to be 100% sure</p>",
        "id": 126895803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941509
    },
    {
        "content": "<p>I guess the blog post explains a bit that</p>",
        "id": 126895804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941518
    },
    {
        "content": "<p>probably don't need the clone in <code>all_facts.region_live_at.clone()</code></p>",
        "id": 126895810,
        "sender_full_name": "lqd",
        "timestamp": 1526941550
    },
    {
        "content": "<p>right, I've added that after saw an error but yeah doesn't seem to be needed</p>",
        "id": 126895868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941620
    },
    {
        "content": "<p>fixed</p>",
        "id": 126895879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941651
    },
    {
        "content": "<p>I guess it would be cool to be able to test it, but it certainly _looks good_ :)</p>",
        "id": 126896042,
        "sender_full_name": "lqd",
        "timestamp": 1526941874
    },
    {
        "content": "<p>so iteration is just in case there are a lot of rules that one ends affecting the other one?</p>",
        "id": 126896052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941908
    },
    {
        "content": "<p>facts go outside that because are ... facts</p>",
        "id": 126896054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526941920
    },
    {
        "content": "<p>slight nit: the \"// redundantly computed index\" can be removed since you only have one and it's not an index</p>",
        "id": 126896055,
        "sender_full_name": "lqd",
        "timestamp": 1526941921
    },
    {
        "content": "<p>yeah the iteration is the thing that will create new tuples from the existing ones by applying the rules — all until no more tuples are created</p>",
        "id": 126896107,
        "sender_full_name": "lqd",
        "timestamp": 1526941970
    },
    {
        "content": "<p>tuples = facts here as well — the input facts / inputs indeed are outside</p>",
        "id": 126896122,
        "sender_full_name": "lqd",
        "timestamp": 1526942017
    },
    {
        "content": "<p>I wish I didn't add this \"redudantly computed\" comment as it's obviously not clear enough what I meant at all</p>",
        "id": 126896186,
        "sender_full_name": "lqd",
        "timestamp": 1526942092
    },
    {
        "content": "<blockquote>\n<p>slight nit: the \"// redundantly computed index\" can be removed since you only have one and it's not an index</p>\n</blockquote>\n<p>fixed</p>",
        "id": 126896401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526942441
    },
    {
        "content": "<blockquote>\n<p>I wish I didn't add this \"redudantly computed\" comment as it's obviously not clear enough what I meant at all</p>\n</blockquote>\n<p>don't worry, it was just a copy &amp; paste thing and forgot to remove that</p>",
        "id": 126896422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526942490
    },
    {
        "content": "<p>as I'm about to go to sleep, I _think_ this is the <code>potential_errors</code> your PR#34 would find on issue-47680:</p>\n<div class=\"codehilite\"><pre><span></span># potential_errors\n&quot;Mid(bb3[2])&quot;  &quot;bw1&quot;\n&quot;Mid(bb10[2])&quot; &quot;bw2&quot;\n</pre></div>",
        "id": 126896778,
        "sender_full_name": "lqd",
        "timestamp": 1526943095
    },
    {
        "content": "<p>and is that fine?</p>",
        "id": 126896948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943395
    },
    {
        "content": "<p>haven't gone through it yet</p>",
        "id": 126896951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943403
    },
    {
        "content": "<p>haven't checked the mir</p>",
        "id": 126896952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943407
    },
    {
        "content": "<p>and I don't even remember what the example is about :P</p>",
        "id": 126896954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943421
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 126896961,
        "sender_full_name": "lqd",
        "timestamp": 1526943425
    },
    {
        "content": "<p>ok :)</p>",
        "id": 126896964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943439
    },
    {
        "content": "<p>we would need to figure that out</p>",
        "id": 126896967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526943444
    },
    {
        "content": "<p>yeah — I hoped to compare at least to the timely one but it doesn't find any errors</p>",
        "id": 126896971,
        "sender_full_name": "lqd",
        "timestamp": 1526943471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang-nursery/polonius/pull/41\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/41\">https://github.com/rust-lang-nursery/polonius/pull/41</a> and <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34\">https://github.com/rust-lang-nursery/polonius/pull/34</a>, #34 builds on top of #41 so I'd probably need to rebase #34 after #41 is merged</p>",
        "id": 126903435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526957088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> nice job on the #34 rewrite :) a couple of things: 1) invalidates_lp is an index over static data, we don't need to remap it as no new facts will be added during the iteration 2) and since it's static data you could also get rid of the invalidates + invalidates_lp copy, one of those 2 is not strictly necessary and one could fill it in the \"((loan, point) ())\" format directly before the iteration</p>",
        "id": 126913477,
        "sender_full_name": "lqd",
        "timestamp": 1526978980
    },
    {
        "content": "<p>I guess I should have left those on github, a bit easier to review with all the information in a single place</p>",
        "id": 126918041,
        "sender_full_name": "lqd",
        "timestamp": 1526987769
    },
    {
        "content": "<p>that makes perfect sense</p>",
        "id": 126918538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526988768
    },
    {
        "content": "<p>unsure why I did it the way I did</p>",
        "id": 126918539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526988776
    },
    {
        "content": "<p>fixed /cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 126918550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526988819
    },
    {
        "content": "<p>nice :)</p>",
        "id": 126918605,
        "sender_full_name": "lqd",
        "timestamp": 1526988913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> let me know if you have the output from your analysis for issue-47680</p>",
        "id": 126922822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526995812
    },
    {
        "content": "<p>I can kind of sanity check it</p>",
        "id": 126922826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526995819
    },
    {
        "content": "<p>potential_errors is empty</p>",
        "id": 126922926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526995976
    },
    {
        "content": "<p>ok, I think that is almost certainly wrong</p>",
        "id": 126922943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526995995
    },
    {
        "content": "<p>because borrow_live_at is empty</p>",
        "id": 126922964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996039
    },
    {
        "content": "<p>huh, that seems wrong</p>",
        "id": 126923009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526996052
    },
    {
        "content": "<p>for both main and maybe_next</p>",
        "id": 126923011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996055
    },
    {
        "content": "<p>sorry, sorry, for main borrow_live_at is not empty</p>",
        "id": 126923026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996090
    },
    {
        "content": "<p>I think that <code>main</code> is the function of interest</p>",
        "id": 126923036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526996103
    },
    {
        "content": "<p>I guess I could build locally and inspect</p>",
        "id": 126923051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526996113
    },
    {
        "content": "<p>hmm I'm not dumping invalidates</p>",
        "id": 126923062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996130
    },
    {
        "content": "<p>need to see what's that</p>",
        "id": 126923064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996134
    },
    {
        "content": "<p>probably because that's an input</p>",
        "id": 126923068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526996143
    },
    {
        "content": "<p>I have a lead</p>",
        "id": 126923077,
        "sender_full_name": "lqd",
        "timestamp": 1526996157
    },
    {
        "content": "<p><code>crate invalidates: Vec&lt;(Loan, Point)&gt;</code> but the data looks like \"Start(bb1[0])\" \"bw1\" eg the reverse order ?</p>",
        "id": 126923142,
        "sender_full_name": "lqd",
        "timestamp": 1526996217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ↑</p>",
        "id": 126923239,
        "sender_full_name": "lqd",
        "timestamp": 1526996332
    },
    {
        "content": "<p>:)</p>",
        "id": 126923243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996339
    },
    {
        "content": "<p>that was one of the things I needed to check</p>",
        "id": 126923255,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996351
    },
    {
        "content": "<p>also ... why are we only filling borrow_live_at for results and then trying to dump everything?</p>",
        "id": 126923269,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996380
    },
    {
        "content": "<p>shouldn't we fill all the stuff if the thing was run with verbose?</p>",
        "id": 126923306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526996402
    },
    {
        "content": "<p>so ... my question is about this part <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R96\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R96\">https://github.com/rust-lang-nursery/polonius/pull/34/files#diff-2cacc48f0a2b0432151b6f258162f827R96</a></p>",
        "id": 126924473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997780
    },
    {
        "content": "<p>we were only filling borrow_live_at and I've changed to fill potential_errors (and I think what I did is not right)</p>",
        "id": 126924492,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997808
    },
    {
        "content": "<p>but shouldn't we fill all there?</p>",
        "id": 126924499,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I don't understand what you're asking :(</p>",
        "id": 126924609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526997957
    },
    {
        "content": "<p>ok</p>",
        "id": 126924659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997988
    },
    {
        "content": "<p>first of all I was doing it wrong</p>",
        "id": 126924661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997994
    },
    {
        "content": "<p>the current code is giving</p>",
        "id": 126924665,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526997999
    },
    {
        "content": "<p># potential_errors</p>\n<p>\"Mid(bb3[2])\"  \"bw1\"<br>\n\"Mid(bb10[2])\" \"bw2\"</p>",
        "id": 126924668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998000
    },
    {
        "content": "<p>then we are filling only 1 part of Output</p>",
        "id": 126924677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998017
    },
    {
        "content": "<p>left a comment btw</p>",
        "id": 126924678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998020
    },
    {
        "content": "<p>and trying to dump all</p>",
        "id": 126924679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998021
    },
    {
        "content": "<p>so</p>",
        "id": 126924685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998027
    },
    {
        "content": "<p>let me show you the code</p>",
        "id": 126924688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998031
    },
    {
        "content": "<p>which might answer this</p>",
        "id": 126924691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998032
    },
    {
        "content": "<p>that doesn't answer exactly</p>",
        "id": 126924775,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998107
    },
    {
        "content": "<p>this one was another question I have</p>",
        "id": 126924778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998113
    },
    {
        "content": "<p>this error <code>\"Mid(bb3[2])\" \"bw1\"</code> certainly seems right</p>",
        "id": 126924782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998116
    },
    {
        "content": "<p>let me show you two things</p>",
        "id": 126924789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998130
    },
    {
        "content": "<p>I have two questions</p>",
        "id": 126924791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998133
    },
    {
        "content": "<p>the first is about master</p>",
        "id": 126924796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998137
    },
    {
        "content": "<p>not related with my PR</p>",
        "id": 126924799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998141
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L81-L87\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L81-L87\">https://github.com/rust-lang-nursery/polonius/blob/master/src/output/location_insensitive.rs#L81-L87</a></p>",
        "id": 126924800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998142
    },
    {
        "content": "<p>ok</p>",
        "id": 126924801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998142
    },
    {
        "content": "<p>here we fill result</p>",
        "id": 126924808,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998146
    },
    {
        "content": "<p>right</p>",
        "id": 126924818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998155
    },
    {
        "content": "<p>and here <a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/mod.rs#L66-L95\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/mod.rs#L66-L95\">https://github.com/rust-lang-nursery/polonius/blob/master/src/output/mod.rs#L66-L95</a> we dump</p>",
        "id": 126924830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998172
    },
    {
        "content": "<p>what I'm saying is that dump_enabled doesn't work</p>",
        "id": 126924842,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998189
    },
    {
        "content": "<p>because stuff is never filled</p>",
        "id": 126924843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998196
    },
    {
        "content": "<p>yeah, seems like that got lost somewhere along the way</p>",
        "id": 126924934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998260
    },
    {
        "content": "<p>we used to check if <code>dump_enabled</code> and add in the data in that case</p>",
        "id": 126924950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998275
    },
    {
        "content": "<p>exactly</p>",
        "id": 126925073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998403
    },
    {
        "content": "<p>will add that</p>",
        "id": 126925075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998405
    },
    {
        "content": "<p>and the other question was exactly what you've said</p>",
        "id": 126925082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998417
    },
    {
        "content": "<p>the already discussed this</p>",
        "id": 126925086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998421
    },
    {
        "content": "<p>don't remember very well</p>",
        "id": 126925088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998425
    },
    {
        "content": "<p>but seems like we want potential_errors outside dump_enabled</p>",
        "id": 126925095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998438
    },
    {
        "content": "<p>confirm</p>",
        "id": 126925135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998444
    },
    {
        "content": "<p>the thing is that is only right for insensitive</p>",
        "id": 126925141,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998448
    },
    {
        "content": "<p>actually, I think that <code>borrow_live_at</code> should go <em>into</em> <code>dump_enabled</code> — eventually</p>",
        "id": 126925151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998456
    },
    {
        "content": "<p>we would have to extend <code>datafrogopt</code> to use invalidates</p>",
        "id": 126925156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998470
    },
    {
        "content": "<p>which,...we should do</p>",
        "id": 126925157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998473
    },
    {
        "content": "<p>it's more-or-less the same code you already wrote</p>",
        "id": 126925160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998477
    },
    {
        "content": "<p>ok</p>",
        "id": 126925166,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998495
    },
    {
        "content": "<p>so datafrogopt also uses potential_errors</p>",
        "id": 126925176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998506
    },
    {
        "content": "<p>?</p>",
        "id": 126925181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998508
    },
    {
        "content": "<p>no</p>",
        "id": 126925183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998511
    },
    {
        "content": "<p>er</p>",
        "id": 126925184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998515
    },
    {
        "content": "<p>what do you mean :)</p>",
        "id": 126925186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998517
    },
    {
        "content": "<p>it doesn't <em>now</em></p>",
        "id": 126925188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998519
    },
    {
        "content": "<p>well, I guess it would produce not \"potential errors\" but \"true errors\"</p>",
        "id": 126925197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998532
    },
    {
        "content": "<p>but I think it's fine to just rename <code>potential_errors</code> to <code>errors</code> for now</p>",
        "id": 126925205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998544
    },
    {
        "content": "<p>or to use the same vector anyway</p>",
        "id": 126925214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998557
    },
    {
        "content": "<p>if you want I can walk through how to interpret that output</p>",
        "id": 126925257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998566
    },
    {
        "content": "<p>so we can decide if it is legit :)</p>",
        "id": 126925262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998571
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126925269,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998587
    },
    {
        "content": "<p>first off you have to run <code>-Zdump-mir=nll</code>, <a href=\"https://gist.github.com/nikomatsakis/6bcf9c827d6b962dde4d5ba16792f118\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/6bcf9c827d6b962dde4d5ba16792f118\">here is that output (gisted)</a></p>",
        "id": 126925284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998615
    },
    {
        "content": "<p>yep</p>",
        "id": 126925302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998643
    },
    {
        "content": "<p>we can also use the <code>borrow_region.facts</code> to figure out which borrow index corresponds to what :)</p>\n<div class=\"codehilite\"><pre><span></span>&quot;\\&#39;_#2r&quot;    &quot;bw0&quot;   &quot;Mid(bb0[3])&quot;\n&quot;\\&#39;_#3r&quot;    &quot;bw1&quot;   &quot;Mid(bb3[2])&quot;\n&quot;\\&#39;_#5r&quot;    &quot;bw2&quot;   &quot;Mid(bb10[2])&quot;\n</pre></div>",
        "id": 126925318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998680
    },
    {
        "content": "<p>i.e., <code>bw1</code> is the loan at <code>bb3[2]</code>, and <code>bw2</code> is the loan at <code>bb10[2]</code></p>",
        "id": 126925371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998701
    },
    {
        "content": "<p>those are the two potential errors we saw:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;Mid(bb3[2])&quot; &quot;bw1&quot;\n&quot;Mid(bb10[2])&quot; &quot;bw2&quot;\n</pre></div>",
        "id": 126925388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998735
    },
    {
        "content": "<p>interestingly, both of them at the point of borrow. This is actually roughly what I expected.</p>",
        "id": 126925408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998753
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126925418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998777
    },
    {
        "content": "<p>if you look at the input:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">maybe_next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126925472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998806
    },
    {
        "content": "<p>the first is saying that when you invoke <code>temp.maybe_next()</code>, it thinks <code>temp</code> is still borrowed</p>",
        "id": 126925484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998822
    },
    {
        "content": "<p>in fact, you need location-sensitivity to understand why that is not the case =)</p>",
        "id": 126925498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998840
    },
    {
        "content": "<p>:)</p>",
        "id": 126925505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998851
    },
    {
        "content": "<p>if you compare to the <a href=\"https://play.rust-lang.org/?gist=767c1d33ccca3807a4769c663a6bf841&amp;version=nightly&amp;mode=debug\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=767c1d33ccca3807a4769c663a6bf841&amp;version=nightly&amp;mode=debug\">current NLL analysis, running on play,</a> you will see we get a similar error:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `*temp` as mutable more than once at a time\n  --&gt; src/main.rs:13:15\n   |\n13 |         match temp.maybe_next() {\n   |               ^^^^\n   |               |\n   |               mutable borrow starts here in previous iteration of loop\n   |               borrow later used here\n</pre></div>",
        "id": 126925520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998879
    },
    {
        "content": "<p>the current NLL analysis (that is, what is running on rustc) is also location insensitive</p>",
        "id": 126925524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998897
    },
    {
        "content": "<p>yep</p>",
        "id": 126925583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998948
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126925585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526998951
    },
    {
        "content": "<p>anyway the other error I suspect is similar</p>",
        "id": 126925591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998970
    },
    {
        "content": "<p>so basically \" looks good <span class=\"emoji emoji-1f980\" title=\"crab\">:crab:</span> \"</p>",
        "id": 126925594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998980
    },
    {
        "content": "<p>(the second error is occurring at the point of a reborrow)</p>",
        "id": 126925616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998993
    },
    {
        "content": "<p>I think that occurs because this analysis is <em>even more</em> location insensitive than what is on master right now</p>",
        "id": 126925623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999010
    },
    {
        "content": "<p>I've force pushed</p>",
        "id": 126925624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526999012
    },
    {
        "content": "<blockquote>\n<p>I've force pushed</p>\n</blockquote>\n<p>we should be able to add a <code>#[test]</code> for this case I think — basically asserting that your result gets the result it does</p>",
        "id": 126925649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999033
    },
    {
        "content": "<p>I guess we can merge this, then I can first make dump_enabled work</p>",
        "id": 126925653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526999037
    },
    {
        "content": "<p>and then make all use potential_errors or something</p>",
        "id": 126925706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526999050
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I've force pushed</p>\n</blockquote>\n<p>we should be able to add a <code>#[test]</code> for this case I think — basically asserting that your result gets the result it does</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126925718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526999071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> test added and force pushed again</p>",
        "id": 126926774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527000394
    },
    {
        "content": "<p>stray println in the test ? :)</p>",
        "id": 126927250,
        "sender_full_name": "lqd",
        "timestamp": 1527000993
    },
    {
        "content": "<p>println in test is harmless</p>",
        "id": 126927335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001089
    },
    {
        "content": "<p>though maybe not desired</p>",
        "id": 126927342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> great! merged.</p>",
        "id": 126927380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527001185
    },
    {
        "content": "<p>just copied that from the other test :)</p>",
        "id": 126927706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527001475
    }
]