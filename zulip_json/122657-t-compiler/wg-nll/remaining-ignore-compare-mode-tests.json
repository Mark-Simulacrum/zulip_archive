[
    {
        "content": "<p>So, there are 2 tests which have <code>ignore-compare-mode-nll</code> which don't use revisions or have a comment. <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/cleanup-rvalue-scopes-cf.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/cleanup-rvalue-scopes-cf.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/cleanup-rvalue-scopes-cf.rs</a> and <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-28848.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-28848.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-28848.rs</a></p>",
        "id": 136290371,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540237853
    },
    {
        "content": "<p>The second one has the same behaviour for both AST and migrate borrow check, and if the explicit lifetimes are removed it compiles, so doesn't seem like a huge priority.</p>",
        "id": 136290483,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540237945
    },
    {
        "content": "<p>Those are likely tests that failed on NLL compare mode when I was doing the compile-fail migration. They were listed in <a href=\"https://github.com/rust-lang/rust/issues/53351\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53351\">#53351</a>.</p>",
        "id": 136290522,
        "sender_full_name": "davidtwco",
        "timestamp": 1540237996
    },
    {
        "content": "<p>They still do (if compare mode used still used <code>-Zborrowck=mir</code>)</p>",
        "id": 136290589,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540238058
    },
    {
        "content": "<p>The first one is more immediately unusable variables, but it's not as clear here that it should fail to compile. Since the temporaries are dropped after the assignment (this is observable using a pattern that partially moves the value)</p>",
        "id": 136290744,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540238183
    },
    {
        "content": "<p>And there's still the argument that it has to suppress lints to compile without warning</p>",
        "id": 136290779,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540238227
    },
    {
        "content": "<p>hmm</p>",
        "id": 136290943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xmute</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">u</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span>::<span class=\"n\">xmute</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR lifetime bound not satisfied</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>that is the \"other one\" you are referring to?</p>",
        "id": 136290960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238402
    },
    {
        "content": "<p>i.e., <code>issue-28848.rs</code>?</p>",
        "id": 136291091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238486
    },
    {
        "content": "<p>that looks like a user type annot bug, and one that I'm a <em>bit</em> surprised to see is not fixed</p>",
        "id": 136291102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238498
    },
    {
        "content": "<p>I don't think we check <code>Self</code> is a well formed type when checking <code>typeof(Self::method)</code> is. (AST borrowck accepts this code if the lifetimes are removed)</p>",
        "id": 136291262,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540238623
    },
    {
        "content": "<p>hmm</p>",
        "id": 136291372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238710
    },
    {
        "content": "<p>seems like an easy fix</p>",
        "id": 136291380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238716
    },
    {
        "content": "<p>I agree that is likely the problem</p>",
        "id": 136291385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238728
    },
    {
        "content": "<p>I could maybe throw into my yet-to-be-merged PR</p>",
        "id": 136291407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540238751
    },
    {
        "content": "<p>Well, you have until bors recovers, so you should have time.</p>",
        "id": 136291786,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540239107
    },
    {
        "content": "<p>We should remove the <code>// ignore-compare-mode-nll</code> from the tests that work under migrate mode</p>",
        "id": 136291984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239261
    },
    {
        "content": "<p>(in my opinion)</p>",
        "id": 136291990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239268
    },
    {
        "content": "<p>keep our effort focused in short term of the things that would plague the edition</p>",
        "id": 136291999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239284
    },
    {
        "content": "<p>re: <a href=\"http://cleanup-rvalue-scopes-cf.rs\" target=\"_blank\" title=\"http://cleanup-rvalue-scopes-cf.rs\">cleanup-rvalue-scopes-cf.rs</a>, you <em>will</em> get errors if you add <code>drop(_x)</code> after each <code>let</code> ...</p>",
        "id": 136292312,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239554
    },
    {
        "content": "<p>yes</p>",
        "id": 136292333,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540239582
    },
    {
        "content": "<p>Hmm. Didn't we add something that would read a variable right after it was written? I wonder where those reads fell, relative to the scope of such temporaries as these</p>",
        "id": 136292334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239587
    },
    {
        "content": "<p>The order is assign, fake read, temporaries droped</p>",
        "id": 136292417,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540239644
    },
    {
        "content": "<p>should we ... consider ... inverting the last two steps there ... ?</p>",
        "id": 136292442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239667
    },
    {
        "content": "<p>or should we just change the test here by adding <code>drop(_x);</code> after each <code>let</code> ?</p>",
        "id": 136292458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239704
    },
    {
        "content": "<p>I tried that, it changes drop order in some cases and requires some hacks to ensure that the outermost temporary is dropped after the assignment.</p>",
        "id": 136292521,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540239745
    },
    {
        "content": "<blockquote>\n<p>or should we just change the test here by adding <code>drop(_x);</code> after each <code>let</code> ?</p>\n</blockquote>\n<p>Probably this</p>",
        "id": 136292532,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540239765
    },
    {
        "content": "<p>Okay. I think that to preserve the <em>spirit</em> of the test in the face of NLL, we are fine just ading <code>drop(_x);</code> after each <code>let</code></p>",
        "id": 136292538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> : are you cool with ^ ?</p>",
        "id": 136292549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540239781
    },
    {
        "content": "<blockquote>\n<p>I tried that, it changes drop order in some cases and requires some hacks to ensure that the outermost temporary is dropped after the assignment.</p>\n</blockquote>\n<p>how can it change drop order?</p>",
        "id": 136334477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540298751
    },
    {
        "content": "<p>I'm fine with adding <code>drop</code> to preserve the spirit of the test, though I'd prefer to rename from <code>_x</code> to <code>x</code> =)</p>",
        "id": 136334534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540298783
    },
    {
        "content": "<p>but I don't fully understand yet why we can't change the order :)</p>",
        "id": 136334538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540298790
    },
    {
        "content": "<blockquote>\n<p>Well, you have until bors recovers, so you should have time.</p>\n</blockquote>\n<p>trying now</p>",
        "id": 136334545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540298801
    },
    {
        "content": "<p>OK, so currently this compiles and prints <code>drop(0) drop(1) drop(-1)</code>: first we drop (what remains of) the RHS temporary, then the temporary for <code>D(1)</code>, then <code>v</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">D</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">print</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;drop({}) &quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136360986,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540323069
    },
    {
        "content": "<p>If we want to drop <code>D(1)</code> before the assignment to <code>v</code>, then it has to be dropped before the RHS temporary, since the RHS temporary is needed for the assignment.</p>",
        "id": 136361071,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540323140
    },
    {
        "content": "<p>We could add a fake read after all of the temporaries are dropped, but now this read isn't really representing anything in the source code.</p>",
        "id": 136361118,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540323213
    }
]