[
    {
        "content": "<blockquote>\n<p>(that is, the piece of code to generate a random set of valid facts seemed not immediately obvious but maybe it's not that hard)</p>\n</blockquote>\n<p>I've found that this is, hands-down, the hardest part of property-based testing.</p>\n<p>That being said, we programmers implicitly do this kind of thinking all the time but don't explicitly encode it.</p>",
        "id": 154093530,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546276314
    },
    {
        "content": "<p>\"Oh, the first argument has to be less than the second argument\"</p>",
        "id": 154093656,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546276475
    },
    {
        "content": "<p>The other thing that I've found super useful is to use these types of tests to exercise variants of algorithms: \"for every input, the SIMD-accelerated code must have the same results as the naive code\"</p>\n<p>This might be highly useful in this case as you could write \"stupidly obvious\" code that isn't as efficient as the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> but it's easy to verify it's correct.</p>",
        "id": 154093728,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546276577
    },
    {
        "content": "<p>are we talking about property based testing in general or the proptest crate specifically?</p>",
        "id": 154093845,
        "sender_full_name": "centril",
        "timestamp": 1546276742
    },
    {
        "content": "<p>PBT usually runs along the lines of 1) roundtrip (encode . decode = id, decode . encode = id), 2) test against known to be correct algorithm, 3) running a verification algorithm on a decision algorithm, e.g. <code>is_sorted</code> on the result of <code>sort</code> + then also checking that its a permutation</p>",
        "id": 154094013,
        "sender_full_name": "centril",
        "timestamp": 1546277033
    },
    {
        "content": "<p>some of my favorite PBT strategies are from <a href=\"https://fsharpforfunandprofit.com/pbt/\" target=\"_blank\" title=\"https://fsharpforfunandprofit.com/pbt/\">https://fsharpforfunandprofit.com/pbt/</a></p>",
        "id": 154095279,
        "sender_full_name": "lqd",
        "timestamp": 1546279249
    },
    {
        "content": "<p>funny :P; ooh! diagrams are a nice strategy -- the aspiring category theorist in me likes this</p>",
        "id": 154095533,
        "sender_full_name": "centril",
        "timestamp": 1546279721
    },
    {
        "content": "<p>the inputs seem a bit tough indeed to generate here, esp some of rustc’s liveness (if we need those facts) but some relations are easier than others; the test text parser already shows some of these validity rules / fact generation —definitely interesting</p>",
        "id": 154095537,
        "sender_full_name": "lqd",
        "timestamp": 1546279745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  yeah graphs are usually hard to generate I find</p>",
        "id": 154095541,
        "sender_full_name": "centril",
        "timestamp": 1546279767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> have you tried the proptest crate?</p>",
        "id": 154095550,
        "sender_full_name": "centril",
        "timestamp": 1546279801
    },
    {
        "content": "<p>(even reusing rustc might have been an option :)</p>",
        "id": 154095597,
        "sender_full_name": "lqd",
        "timestamp": 1546279817
    },
    {
        "content": "<p>I'm biased (since I wrote some of that code...) but it's pretty ergonomic to use</p>",
        "id": 154095598,
        "sender_full_name": "centril",
        "timestamp": 1546279817
    },
    {
        "content": "<p>only quickcheck myself but I think niko has added some tests using it to datafrog</p>",
        "id": 154095609,
        "sender_full_name": "lqd",
        "timestamp": 1546279862
    },
    {
        "content": "<p>/me looks</p>",
        "id": 154095618,
        "sender_full_name": "centril",
        "timestamp": 1546279893
    },
    {
        "content": "<p>cool</p>",
        "id": 154095709,
        "sender_full_name": "centril",
        "timestamp": 1546280012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  we're working on a book + shipping <code>#[derive(Arbitrary)]</code> which should remove some of the boilerplate</p>",
        "id": 154095772,
        "sender_full_name": "centril",
        "timestamp": 1546280084
    },
    {
        "content": "<p>nice!</p>",
        "id": 154095777,
        "sender_full_name": "lqd",
        "timestamp": 1546280098
    },
    {
        "content": "<p>I hope we’ll use it more then :)</p>",
        "id": 154095802,
        "sender_full_name": "lqd",
        "timestamp": 1546280129
    },
    {
        "content": "<p>:P</p>",
        "id": 154095805,
        "sender_full_name": "centril",
        "timestamp": 1546280141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> it would be nice to get CoArbitrary to work as well to proptest some HoFs and such; I spoke to Koen about it a while back but it was sorta tricky to implement without GADTs so I put it on hold</p>",
        "id": 154095866,
        "sender_full_name": "centril",
        "timestamp": 1546280241
    },
    {
        "content": "<p>:)</p>",
        "id": 154095939,
        "sender_full_name": "lqd",
        "timestamp": 1546280323
    },
    {
        "content": "<p>I still love the post about using QuickCheck to test an entire C application</p>",
        "id": 154099778,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546286962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> is that John's article?</p>",
        "id": 154099785,
        "sender_full_name": "centril",
        "timestamp": 1546286993
    },
    {
        "content": "<p><a href=\"https://pdfs.semanticscholar.org/76c7/ddcaadee1fc0b475df59c08bf0700313586d.pdf\" target=\"_blank\" title=\"https://pdfs.semanticscholar.org/76c7/ddcaadee1fc0b475df59c08bf0700313586d.pdf\">https://pdfs.semanticscholar.org/76c7/ddcaadee1fc0b475df59c08bf0700313586d.pdf</a> ? Seems likely</p>",
        "id": 154099868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546287081
    },
    {
        "content": "<p>Ah; nice one -- I really like this paper: <a href=\"https://dl.acm.org/citation.cfm?id=2364516\" target=\"_blank\" title=\"https://dl.acm.org/citation.cfm?id=2364516\">https://dl.acm.org/citation.cfm?id=2364516</a></p>",
        "id": 154099941,
        "sender_full_name": "centril",
        "timestamp": 1546287224
    },
    {
        "content": "<p>That link doesn't provide a way to read the article without paying, is that correct?</p>",
        "id": 154100668,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546288354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  yeah sadly; here's a talk Koen held about it: <a href=\"https://www.youtube.com/watch?v=CH8UQJiv9Q4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=CH8UQJiv9Q4\">https://www.youtube.com/watch?v=CH8UQJiv9Q4</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"CH8UQJiv9Q4\" href=\"https://www.youtube.com/watch?v=CH8UQJiv9Q4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=CH8UQJiv9Q4\"><img src=\"https://i.ytimg.com/vi/CH8UQJiv9Q4/default.jpg\"></a></div>",
        "id": 154100682,
        "sender_full_name": "centril",
        "timestamp": 1546288389
    },
    {
        "content": "<p>implemented here: <a href=\"http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck-Function.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck-Function.html\">http://hackage.haskell.org/package/QuickCheck-2.12.6.1/docs/Test-QuickCheck-Function.html</a></p>",
        "id": 154100692,
        "sender_full_name": "centril",
        "timestamp": 1546288426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  Fortunately I found it in my stash :P  <a href=\"/user_uploads/4715/ecH2ys-MIMPJ3oTnE3vSesjS/p73-claessen.pdf\" target=\"_blank\" title=\"p73-claessen.pdf\">p73-claessen.pdf</a></p>",
        "id": 154100876,
        "sender_full_name": "centril",
        "timestamp": 1546288715
    },
    {
        "content": "<p>cough sci-hub cough</p>",
        "id": 154103794,
        "sender_full_name": "lqd",
        "timestamp": 1546294151
    }
]