[
    {
        "content": "<p>So the discussion over in the <a href=\"#narrow/stream/122657-wg-nll/subject/optimizing-transitive-closure\" title=\"#narrow/stream/122657-wg-nll/subject/optimizing-transitive-closure\">optimizing-transitive-closure thread</a> got me thinking. Maybe we should alter the <code>-z</code> stats option to gather up internal statistics about the differential-dataflow computation itself (<span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> this might be nice \"in road\" for playing around with it; <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> you might enjoy too). The idea would be fairly simple: we would insert the <code>count</code> operations at strategic points and dump out the results, trying to get a feel for how many tuples are flowing around at each point. I'm not sure that the <code>hist</code> package is very useful for this, though, we'd probably want to dump the results more in tabular form.</p>",
        "id": 126538482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526305835
    },
    {
        "content": "<p>possibly related to <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/12\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/12\">https://github.com/rust-lang-nursery/borrow-check/issues/12</a> but just with total numbers (as dumping 18M triples in a graph would be hard to read :)</p>",
        "id": 126538688,
        "sender_full_name": "lqd",
        "timestamp": 1526306128
    },
    {
        "content": "<p>indeed</p>",
        "id": 126538742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306169
    },
    {
        "content": "<p>I should probably merge my branch</p>",
        "id": 126538746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306179
    },
    {
        "content": "<p>since obviously it is the way to go</p>",
        "id": 126538749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306182
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/23\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/23\">https://github.com/rust-lang-nursery/borrow-check/pull/23</a> I mean</p>",
        "id": 126538751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306187
    },
    {
        "content": "<p>though I ought to fix that assertion</p>",
        "id": 126538753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306191
    },
    {
        "content": "<p>agreed, it improves things so much <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126538770,
        "sender_full_name": "lqd",
        "timestamp": 1526306231
    },
    {
        "content": "<p>to be honest, I think an immediate next step would be cleaning up the code there</p>",
        "id": 126539140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306720
    },
    {
        "content": "<p>there are a number of repetitive patterns that I was too lazy to abstract</p>",
        "id": 126539143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306727
    },
    {
        "content": "<p>for example:</p>",
        "id": 126539146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dead_can_reach</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Variable</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">Collection</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"nb\">None</span>::<span class=\"o\">&lt;</span><span class=\"p\">(((</span><span class=\"n\">Region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">.</span><span class=\"n\">to_stream</span><span class=\"p\">(</span><span class=\"n\">subscope</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126539150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306741
    },
    {
        "content": "<p>it would be nice to make some sort of <code>let dead_can_reach = Variable::empty();</code> instead</p>",
        "id": 126539155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306761
    },
    {
        "content": "<p>or maybe:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dead_can_reach</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Variable</span>:<span class=\"o\">&lt;</span><span class=\"p\">((</span><span class=\"n\">Region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"p\">))</span><span class=\"o\">&gt;</span>::<span class=\"n\">empty</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(I actually <em>like</em> declaring the types here)</p>",
        "id": 126539205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306798
    },
    {
        "content": "<p>similarly all the calls to <code>join_core</code> would be nicer if abstracted</p>",
        "id": 126539228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526306828
    },
    {
        "content": "<p>Should be mostly easy to put in a <code>Variable::empty()</code> or <code>Variable::new()</code>, but it will need some handle to the scope. It is currently getting this from the empty input collection it is handed, but will otherwise need a handle in order to create the correct internal timely dataflow structures.</p>",
        "id": 126541073,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526309474
    },
    {
        "content": "<p>yeah, I was just sketching...</p>",
        "id": 126541279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309688
    },
    {
        "content": "<p>I need to open an issue for that stuff</p>",
        "id": 126541284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you want counts for only the main relations (region_live_at/subset/requires) or for the subrelations as well (which would require aggregation over the timely rounds I think) ?</p>",
        "id": 126546402,
        "sender_full_name": "lqd",
        "timestamp": 1526316285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> seems like we could start with just the \"main\" relations</p>",
        "id": 126546413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316305
    },
    {
        "content": "<p>that said, I'd be sort of interested in all of them I imagine</p>",
        "id": 126546417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316317
    },
    {
        "content": "<p>I think it.. would probably require aggregation? I'm not sure I understand that part yet</p>",
        "id": 126546421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316337
    },
    {
        "content": "<p>specifically, I don't know if a call to <code>consolidate()</code> would suffice</p>",
        "id": 126546423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> can probably answer â€” specifically, if we call <code>consolidate()</code>, but there are internal rounds (due to a variable, etc), will we still have to sum over those rounds? That said, it seems...kind of interesting to see the <em>full</em> counts</p>",
        "id": 126546472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316387
    },
    {
        "content": "<p>i.e., what we want is kind of a measure of how much \"work\" is happening?</p>",
        "id": 126546473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316395
    },
    {
        "content": "<p>from the limited testing I did, if I put the consolidate + inspect inside the \"subscope\" I'd see more than one count output</p>",
        "id": 126546487,
        "sender_full_name": "lqd",
        "timestamp": 1526316446
    },
    {
        "content": "<p>if you want the main relations totals before the PR, here it is :p <br>\n'region_live_at' tuple counts: 1076158<br>\n'subset' tuple counts: 2714121<br>\n'requires' tuple counts: 858674</p>",
        "id": 126546570,
        "sender_full_name": "lqd",
        "timestamp": 1526316582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> thanks; <code>region_live_at</code> is the \"input\" tuples anyway, right? (but still interesting)</p>",
        "id": 126546659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316689
    },
    {
        "content": "<p>it'd be good to also print out how many <code>Point</code> and <code>Region</code> instances there are</p>",
        "id": 126546666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316706
    },
    {
        "content": "<p>oh, bother, I had some changes to the <code>Intern</code> to make that easy</p>",
        "id": 126546670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526316717
    },
    {
        "content": "<p>oh yes true, it's just in the verbose output for some reason, so I did those 3</p>",
        "id": 126546711,
        "sender_full_name": "lqd",
        "timestamp": 1526316727
    },
    {
        "content": "<p>I also wanted (and did before) add a number of points + borrow_live_at sum for the --skip-tuples case</p>",
        "id": 126546723,
        "sender_full_name": "lqd",
        "timestamp": 1526316778
    },
    {
        "content": "<p>eg: Output: 48992 keys, 832392 values</p>",
        "id": 126546799,
        "sender_full_name": "lqd",
        "timestamp": 1526316846
    },
    {
        "content": "<p>Re: <code>consolidate()</code>, you can put that measurement fragment in a few places: </p>\n<p>1. outside the loop that defines each of the relations (if you <code>.leave()</code> either of them), <br>\n2. inside the loop after the <code>distinct_total()</code> (which will report new facts each round; if you print out the <code>.1</code> field in addition to <code>.2</code> it will report the \"timestamp\" == round of derivation), <br>\n3. inside the loop before the <code>distinct_total()</code> which should show you the work going <em>in</em> to the distinct, which might reveal large numbers of redundant derivations that the distinct suppresses (or confirm that they do not exist).</p>",
        "id": 126547369,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526317676
    },
    {
        "content": "<p>What <code>consolidate</code> does is flatten the collection down to at most one <code>(data, time)</code> pair for each distinct <code>data</code> and <code>time</code>, consolidating up the <code>diff</code> fields. When you map the <code>data</code> to <code>()</code> you just get the distinct <code>time</code>s which are rounds of derivation, and the accumulated <code>diff</code> which should be their count (either pre- or post-distinct).</p>",
        "id": 126547466,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526317799
    },
    {
        "content": "<p>Another thing I can try for DD is to sort out the timely logging infra. In principle when enabled it produces all of the record counts and time spent in each operator across the computation. There is some work to do to synthesize it back into something intelligible (it will be a lot of \"Join\" and \"Map\"), but it seems like something I should do, and would probably be a lot more helpful than having you all place random measurement code everywhere.</p>\n<p>I'll look into this and see what I can get quickly.</p>",
        "id": 126548416,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526319075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> for the timestamp, we should we print the <code>inner</code> timestamp right ? (rn it's <code>((Root, ()), 1)</code> but I assume it's because of the subscopes)</p>",
        "id": 126549523,
        "sender_full_name": "lqd",
        "timestamp": 1526320513
    },
    {
        "content": "<p>Ok, I've got vanilla timely up and producing logs about what's been run and for how long. It shouldn't be too hard to aggregate times by operator and message count by edge. I'm going to look into whether DD can help put names on all of the operators and such, to try and clean up the presentation.</p>",
        "id": 126549527,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526320518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> yeah, the <code>.inner</code> field is the one you want. It should be the iteration counter, where the outer <code>()</code> is the empty timestamp indicating that no you cannot change the inputs at all (gives access to <code>distinct_total</code>).</p>",
        "id": 126549587,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526320568
    },
    {
        "content": "<p>awesome, thank you :)</p>",
        "id": 126549606,
        "sender_full_name": "lqd",
        "timestamp": 1526320599
    },
    {
        "content": "<p>I'm going to grab some food, but I wanted to drop some notes on the logging stuff. It may ultimately be as helpful as custom instrumentation (more flexible, for sure). I put a PR up at </p>\n<p><a href=\"https://github.com/frankmcsherry/timely-dataflow/pull/159\" target=\"_blank\" title=\"https://github.com/frankmcsherry/timely-dataflow/pull/159\">https://github.com/frankmcsherry/timely-dataflow/pull/159</a></p>\n<p>which outlines some of the things, but the main gist is that you get a live timely dataflow stream of all the logging events, and can then whip up your own computation that consumes them (e.g. a DD computation that maintains accumulated counts and joins against the constructed names to produce more appealing reports). </p>\n<p>I'll try and put together a prototype that may do a fine job of reporting record counts on every edge in the dataflow graph, without further modifying the computation (and without working around the measurement code). The downside is that it only sees record counts, and doesn't get to peek inside. If you have one record with 10M derivations, meaning a <code>.2</code> field of 10M, that will be one record possibly.</p>",
        "id": 126550081,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526321281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> gtg for a while, but I have something like this atm <a href=\"https://gist.github.com/lqd/f64f2c5cd338892044ecf145a3dd51c8\" target=\"_blank\" title=\"https://gist.github.com/lqd/f64f2c5cd338892044ecf145a3dd51c8\">https://gist.github.com/lqd/f64f2c5cd338892044ecf145a3dd51c8</a> -- the first file is <code>--stats -v</code> to have the timely rounds stats, and the second one just <code>--stats</code></p>",
        "id": 126550764,
        "sender_full_name": "lqd",
        "timestamp": 1526322147
    },
    {
        "content": "<p>Good news and bad news!</p>\n<p>Good news is that I have a differential dataflow program that consumes a live timely logging stream and produces counts for records on all edges, described by the names of the operators.</p>\n<p>Bad news is that it is lots of maps and joins and stuff. Here it is on the current BorrowCheck execution:</p>\n<p><a href=\"https://gist.github.com/frankmcsherry/d72049d8e8ce88f89622cf48335f5e65\" target=\"_blank\" title=\"https://gist.github.com/frankmcsherry/d72049d8e8ce88f89622cf48335f5e65\">https://gist.github.com/frankmcsherry/d72049d8e8ce88f89622cf48335f5e65</a></p>",
        "id": 126557032,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526330380
    },
    {
        "content": "<p>I'm not sure I've really got the name &lt;--&gt; channel mapping nailed down perfectly (more research to do here), but you can probably start to get the gist. The only change needed in the borrow_check program is to initiate the timely computation like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">logger_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">timely</span>::<span class=\"n\">logging</span>::<span class=\"n\">LoggerConfig</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">setup</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1:{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8000</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">send</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpStream</span>::<span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">timely</span>::<span class=\"n\">dataflow</span>::<span class=\"n\">operators</span>::<span class=\"n\">capture</span>::<span class=\"n\">EventWriter</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">send</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">_setup</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// No support for communication threads in this example.</span>\n<span class=\"w\">            </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1:{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8001</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">send</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpStream</span>::<span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">timely</span>::<span class=\"n\">dataflow</span>::<span class=\"n\">operators</span>::<span class=\"n\">capture</span>::<span class=\"n\">EventWriter</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">send</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">timely</span>::<span class=\"n\">execute_from_args_logging</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[].</span><span class=\"n\">into_iter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">logger_config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which yes uses a TCP socket to grab the logging data. In principle it can go to any <code>W: Write</code>, or Kafka, or a bunch of other places.</p>",
        "id": 126557133,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526330520
    },
    {
        "content": "<p>Another downside, unfortunately: the arrangement infrastructure is hiding some of the sizes. The records coming <em>out</em> of arrangements are the number of batches, rather than the number of records in the batch. This means that getting the details out of records into a distinct vs records out of a distinct means we have to look at the input to the arrange leading into the distinct, rather than just the distinct itself.</p>",
        "id": 126557213,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526330640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> here's the commit for the stats I posted earlier if you want a PR (10 min compile times on this tiny laptop are bruÂ·tal :) â€” and then we can integrate frank's new shinies later ? <a href=\"https://github.com/lqd/borrow-check/commit/bb47d049ff04aebff079df2181ff2df5db909d31\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commit/bb47d049ff04aebff079df2181ff2df5db909d31\">https://github.com/lqd/borrow-check/commit/bb47d049ff04aebff079df2181ff2df5db909d31</a></p>",
        "id": 126558699,
        "sender_full_name": "lqd",
        "timestamp": 1526332566
    },
    {
        "content": "<p>btw, the change proposed up above should be conditional somehow. It will panic if there isn't anyone listening on that port, and you probably don't want that most of the time (also, some run-time overhead for teh logging).</p>",
        "id": 126558731,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526332660
    },
    {
        "content": "<p>It's midnight here, but if you want to check it out, </p>\n<p><a href=\"https://github.com/frankmcsherry/differential-dataflow/blob/master/examples/logging-recv.rs\" target=\"_blank\" title=\"https://github.com/frankmcsherry/differential-dataflow/blob/master/examples/logging-recv.rs\">https://github.com/frankmcsherry/differential-dataflow/blob/master/examples/logging-recv.rs</a></p>\n<p>is the code for the log analysis. It's all just joining together things, and a bunch of consulting <a href=\"http://logging.rs\" target=\"_blank\" title=\"http://logging.rs\">logging.rs</a> to remember which fields are which. More work to do to make it intelligible, and perhaps some thinking about how to better allow naming / grouping of operators in code so that the stats can be better interpreted.</p>",
        "id": 126559218,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526333335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> very nice :)</p>",
        "id": 126559585,
        "sender_full_name": "lqd",
        "timestamp": 1526333764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> btw I've not had a chance to look over what you did yet â€” will try to do that now</p>",
        "id": 126596641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526397534
    },
    {
        "content": "<p>no worries :)</p>",
        "id": 126598018,
        "sender_full_name": "lqd",
        "timestamp": 1526399203
    }
]