[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok so —</p>",
        "id": 126415704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046617
    },
    {
        "content": "<p>regarding the origin of those rules in the blog post</p>",
        "id": 126415707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046624
    },
    {
        "content": "<p>I guess the question was: if we have <code>R1: R2</code>, why do that translate to <code>R1 &lt;= R2</code> and not <code>R2 &lt;= R1</code>?</p>",
        "id": 126415711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046653
    },
    {
        "content": "<p>in terms of sets of loans?</p>",
        "id": 126415713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046658
    },
    {
        "content": "<p>and in particular how should we think about that with \"outlives\"?</p>",
        "id": 126415722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046665
    },
    {
        "content": "<p>first off, what I <em>personally</em> find useful is to read <code>R1: R2</code> as \"data with region R1 flows into region R2\"</p>",
        "id": 126415735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046697
    },
    {
        "content": "<p>so e.g. if you have</p>\n<div class=\"codehilite\"><pre><span></span>let x: &amp;&#39;0 i32 = ...\nlet y: &amp;&#39;1 i32 = x;\n</pre></div>\n\n\n<p>then this results in <code>'0: '1</code>, because data with region <code>'0</code> was stored into <code>y</code>, which has region <code>'1</code></p>",
        "id": 126415780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046732
    },
    {
        "content": "<p>but outlives is of course also a reasonable way to think of it: in that case, the idea is that the \"source\" of the data must outlive the target</p>",
        "id": 126415789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046755
    },
    {
        "content": "<p>anyway, now back to loans: the idea is that each region can be mapped to a set of loans <code>{L}</code> which may be the source of the referenced data</p>",
        "id": 126415797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046783
    },
    {
        "content": "<p>that is, if you have <code>&amp;'0 u32</code>, and <code>'0</code> maps to <code>{L1, L2}</code>, then we know that that reference <em>may</em> have been created by the loan L1 or L2, and hence if we invalidate the terms of either loan (e.g., by mutating or accessing the path that was borrowed), then we can't use the reference anymore</p>",
        "id": 126415803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046829
    },
    {
        "content": "<p>anyway so if you think about it as data flow, then perhaps the <code>&lt;=</code> makes sense: that is, in our example, <code>y</code> was assigned from <code>x</code> (and maybe from other things), so it points to anything that <code>x</code> can point at (and maybe other things)</p>",
        "id": 126415847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046878
    },
    {
        "content": "<p>if we think about it in terms of \"outlives\", the key point is that references \"live longer\" by having fewer loans</p>",
        "id": 126415861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046914
    },
    {
        "content": "<p>because there are fewer ways to invalidate them</p>",
        "id": 126415863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046919
    },
    {
        "content": "<p>so since <code>'0</code> <em>outlives</em> <code>'1</code>, it must be smaller than <code>'1</code> (\"contain\" fewer loans)</p>",
        "id": 126415867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> does that explain it?</p>",
        "id": 126415925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526046986
    },
    {
        "content": "<p>I was also confused by this :) (possibly because I once thought they were sets of _points_ not of loans; more points being the subset was confusing)\" — it's clear now</p>",
        "id": 126416068,
        "sender_full_name": "lqd",
        "timestamp": 1526047298
    },
    {
        "content": "<blockquote>\n<p>anyway, now back to loans: the idea is that each region can be mapped to a set of loans <code>{L}</code> which may be the source of the referenced data</p>\n</blockquote>\n<p>remember me about this, I may be confusing again some concepts, a regions maps to a set of loans, explain a bit more :)</p>",
        "id": 126416410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526047839
    },
    {
        "content": "<p>a Loan have one region but a region can have more than one Loan</p>",
        "id": 126416461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526047925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was that what you meant?</p>",
        "id": 126416471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526047940
    },
    {
        "content": "<p>loans don't have regions; regions map to a set of loans, however, that they <em>depend on</em> (meaning: for the reference to remain valid, the terms of the loan must be respected)</p>",
        "id": 126416489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526047978
    },
    {
        "content": "<p>I guess you could say a loan has a region in the form of the <code>borrow_region</code> predicate</p>",
        "id": 126416499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526047991
    },
    {
        "content": "<p>in which case what you wrote seems right</p>",
        "id": 126416506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048004
    },
    {
        "content": "<p>(hmm, I may have called <code>borrow_region</code> something else in the blog post, I can't remember)</p>",
        "id": 126416519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048026
    },
    {
        "content": "<p>it's borrow_region</p>",
        "id": 126416571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048051
    },
    {
        "content": "<p>point is, when you have a <code>&amp;'a foo</code> expression, that produces a loan <code>L</code>, and <code>{L} &lt;= 'a</code></p>",
        "id": 126416575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048055
    },
    {
        "content": "<p>so there is some relationship between <code>L</code> and <code>'a</code></p>",
        "id": 126416578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048062
    },
    {
        "content": "<p>that is, some mapping from <code>L</code> to the region <code>'a</code> (but <code>'a</code> may map to many loans)</p>",
        "id": 126416586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048088
    },
    {
        "content": "<p>yep</p>",
        "id": 126416587,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048089
    },
    {
        "content": "<p>it's probably just <code>outlives</code>named differently (<code>base_subset</code>)</p>",
        "id": 126416602,
        "sender_full_name": "lqd",
        "timestamp": 1526048123
    },
    {
        "content": "<blockquote>\n<p>if we think about it in terms of \"outlives\", the key point is that references \"live longer\" by having fewer loans<br>\nbecause there are fewer ways to invalidate them<br>\nso since '0 outlives '1, it must be smaller than '1 (\"contain\" fewer loans)</p>\n</blockquote>\n<p>I understand all this, but dunno how to explain, feels weird :P</p>",
        "id": 126416724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048283
    },
    {
        "content": "<p>seems to me that is defined to be a subset because probabilistically it could live longer?</p>",
        "id": 126416759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048348
    },
    {
        "content": "<p>(so does it make sense now?) =)</p>",
        "id": 126416773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048378
    },
    {
        "content": "<p>well anyway feel free to ask more questions if not..</p>",
        "id": 126416774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048378
    },
    {
        "content": "<p>there are fewer ways to invalidate but that doesn't mean it will be invalidated</p>",
        "id": 126416780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048393
    },
    {
        "content": "<p>it's kind of I follow but it doesn't click properly</p>",
        "id": 126416830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048408
    },
    {
        "content": "<p>if you define smaller because it have fewer loans I follow</p>",
        "id": 126416849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048451
    },
    {
        "content": "<p>but in that phrase it confuses me that you used a notion of probability of things to define something</p>",
        "id": 126416859,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048473
    },
    {
        "content": "<p>and I find that a bit odd</p>",
        "id": 126416861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526048477
    },
    {
        "content": "<blockquote>\n<p>but in that phrase it confuses me that you used a notion of probability of things to define something</p>\n</blockquote>\n<p>probability?</p>",
        "id": 126416922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048577
    },
    {
        "content": "<blockquote>\n<p>there are fewer ways to invalidate but that doesn't mean it will be invalidated</p>\n</blockquote>\n<p>indeed, the compiler is always <em>conservative</em> in these respects -- i.e., if something bad <em>could</em> happen, it assumes it <em>will</em> happen</p>",
        "id": 126416935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048613
    },
    {
        "content": "<p>if that is a problem then you have to refine the analysis so that it can see that it will not happen</p>",
        "id": 126416940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048625
    },
    {
        "content": "<p>which is basically what we are trying to do by moving to NLL :) (that is, we are refining the existing analysis to be more precise)</p>",
        "id": 126416983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526048648
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126417239,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526049006
    },
    {
        "content": "<p>so the definition of subset is because it have fewer loans, right?</p>",
        "id": 126417253,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526049055
    },
    {
        "content": "<p>if it's that I understood and previously I may have understood some parts of your english in a wrong way :P</p>",
        "id": 126417263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526049070
    },
    {
        "content": "<p>it's always hard to follow ;)</p>",
        "id": 126417264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526049077
    },
    {
        "content": "<p>Sounds right</p>",
        "id": 126417720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526049814
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was asking me about the \"dumped tuples\"</p>",
        "id": 126427754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063862
    },
    {
        "content": "<p>and what that's all about</p>",
        "id": 126427759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063870
    },
    {
        "content": "<p>in the blog post, I talked about these \"base inputs\"</p>",
        "id": 126427793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063883
    },
    {
        "content": "<p>e.g., <code>cfg_edge</code></p>",
        "id": 126427811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063900
    },
    {
        "content": "<p>right now the compiler has been instrumented to dump out these tuples if you pass <code>-Znll-facts</code></p>",
        "id": 126427820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063921
    },
    {
        "content": "<p>they are the starting points for the analysis</p>",
        "id": 126427824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063925
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm not <em>quite</em> sure what you wanted to know</p>",
        "id": 126427857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063974
    },
    {
        "content": "<p>:P</p>",
        "id": 126427858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526063978
    },
    {
        "content": "<p>but you can see an example <a href=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680\">here, in the borrow-check repo</a></p>",
        "id": 126427918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064045
    },
    {
        "content": "<p>this is the <a href=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680\">input rust file</a> -- it's just there for reference, the <code>borrow-check</code> program itself never looks at it</p>",
        "id": 126427929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064073
    },
    {
        "content": "<p>for each function in the program, we <a href=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680/nll-facts/%7B%7Bimpl%7D%7D-maybe_next\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/tree/master/inputs/issue-47680/nll-facts/%7B%7Bimpl%7D%7D-maybe_next\">create a directory</a></p>",
        "id": 126427937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064120
    },
    {
        "content": "<p>in there are several files</p>",
        "id": 126427974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064124
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-lang-nursery/borrow-check/blob/master/inputs/issue-47680/nll-facts/%7B%7Bimpl%7D%7D-maybe_next/cfg_edge.facts\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/blob/master/inputs/issue-47680/nll-facts/%7B%7Bimpl%7D%7D-maybe_next/cfg_edge.facts\"><code>cfg_edge.facts</code></a></p>",
        "id": 126427983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064139
    },
    {
        "content": "<p>each line is a tuple, and the individual fields of the tuple are tab-separated</p>",
        "id": 126427985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526064169
    },
    {
        "content": "<p>hey, sorry for the delay</p>",
        "id": 126429510,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526066399
    },
    {
        "content": "<p>yes, makes perfect sense</p>",
        "id": 126429555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526066405
    },
    {
        "content": "<p>and sorry to the rest of the people here, I've just read Niko's blog, so still catching up :)</p>",
        "id": 126429571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526066428
    }
]