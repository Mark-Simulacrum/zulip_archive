[
    {
        "content": "<p>I'd be interested in tackling <a href=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409032446\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409032446\">this small diagnostic improvement</a>. Would this be: tracking down where this error is reported, checking (somehow) if the value is thread local and must outlive static and then special casing based on that with a improved message that mentions that the static is thread local?</p>",
        "id": 130990112,
        "sender_full_name": "davidtwco",
        "timestamp": 1533574129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> or <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 130990114,
        "sender_full_name": "davidtwco",
        "timestamp": 1533574137
    },
    {
        "content": "<p>hmm</p>",
        "id": 130990373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574425
    },
    {
        "content": "<p><em>probably</em>.. I can't quite tell where that error comes from</p>",
        "id": 130990460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574516
    },
    {
        "content": "<p>I would probably start by running with <code>RUST_BACKTRACE=1</code> and <code>-Ztreat-err-as-bug</code></p>",
        "id": 130990553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574584
    },
    {
        "content": "<p>so you can get the backtrace where the error is reported</p>",
        "id": 130990557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574590
    },
    {
        "content": "<p>oh, I wonder if we want to modify the <code>buffer</code> method on diagnostics to respect that flag</p>",
        "id": 130990578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/error_reporting.rs#L440\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/error_reporting.rs#L440\">https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/error_reporting.rs#L440</a> is where this is reported.</p>",
        "id": 130990696,
        "sender_full_name": "davidtwco",
        "timestamp": 1533574738
    },
    {
        "content": "<p>Though, the addition of buffered errors does make <code>-Z treat-err-as-bug</code> much less useful.</p>",
        "id": 130990721,
        "sender_full_name": "davidtwco",
        "timestamp": 1533574766
    },
    {
        "content": "<p>I think the caller <code>report_borrowed_value_does_not_live_long_enough</code></p>",
        "id": 130990823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574838
    },
    {
        "content": "<p>maybe wants to be modified then</p>",
        "id": 130990828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574844
    },
    {
        "content": "<p>ultimately I think this is being invoked from <code>check_invalidation_at_exit</code></p>",
        "id": 130990842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574863
    },
    {
        "content": "<p>i.e., <a href=\"https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/mod.rs#L1491-L1497\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/mod.rs#L1491-L1497\">https://github.com/rust-lang/rust/blob/9f9ac89d11a2afaeaa029738b38142124684c89b/src/librustc_mir/borrow_check/mod.rs#L1491-L1497</a></p>",
        "id": 130990874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574890
    },
    {
        "content": "<p>so you could thread some flag down</p>",
        "id": 130990876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574894
    },
    {
        "content": "<p>but I guess if we just check for <code>Place::Static(statik)</code> where <code>is_thread_local</code> is true</p>",
        "id": 130990889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574909
    },
    {
        "content": "<p>in the \"report borrowed value\" routine</p>",
        "id": 130990895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574916
    },
    {
        "content": "<p>we can handle it there</p>",
        "id": 130990896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574918
    },
    {
        "content": "<p>er, well, maybe in <code>report_local_value_does_not_live_long_enough</code></p>",
        "id": 130990953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574949
    },
    {
        "content": "<p>anyway, somewhere :)</p>",
        "id": 130990955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533574952
    },
    {
        "content": "<p>To save some time in the review, what would the ideal error for this be? Same as before but with a note saying (something along the lines of) \"are you trying to reference this thread-local static from another thread?\" or a completely different error message? <a href=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/test/ui/issue-17954.ast.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/test/ui/issue-17954.ast.nll.stderr\">This is the current message</a>.</p>",
        "id": 130993746,
        "sender_full_name": "davidtwco",
        "timestamp": 1533577684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> huh. It seems like both the AST and MIR-based messages are confusing</p>",
        "id": 130995404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533579514
    },
    {
        "content": "<p>I would think something like:</p>",
        "id": 130995408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533579518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0597]: thread-local variable borrowed past end of function\n  --&gt; $DIR/issue-17954.rs:20:14\n   |\nLL |     let a = &amp;FOO;\n   |              ^^^ thread-local variables cannot be borrowed beyond the end of the function\n...\nLL | }\n   | - end of enclosing function is here\n   |\n   = note: `FOO` is borrowed for the static lifetime\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n</pre></div>",
        "id": 130995431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533579581
    },
    {
        "content": "<p>it might want its own error code, too</p>",
        "id": 130995433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533579588
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 130995487,
        "sender_full_name": "davidtwco",
        "timestamp": 1533579610
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/53131\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53131\">#53131</a>.</p>",
        "id": 131003786,
        "sender_full_name": "davidtwco",
        "timestamp": 1533588925
    },
    {
        "content": "<p>Updated the PR again after tidy complained about duplicate error codes - couldn't quite reproduce that locally but incremented the number anyway.</p>",
        "id": 131004683,
        "sender_full_name": "davidtwco",
        "timestamp": 1533590100
    },
    {
        "content": "<p>(locally it said <code>710</code> before a rebase that I did prior to making the PR, after the rebase it still said <code>710</code> but Travis complained that <code>711</code> was taken, so I've gone to <code>712</code>)</p>",
        "id": 131004702,
        "sender_full_name": "davidtwco",
        "timestamp": 1533590138
    },
    {
        "content": "<p>Had to update the PR again after forgetting to update a test when the error code changed.</p>",
        "id": 131007603,
        "sender_full_name": "davidtwco",
        "timestamp": 1533594467
    },
    {
        "content": "<p>Updated again because updating tests clearly isn't my forte.</p>",
        "id": 131029973,
        "sender_full_name": "davidtwco",
        "timestamp": 1533630458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> </p>\n<div class=\"codehilite\"><pre><span></span>[01:19:06] ---- /checkout/obj/build/x86_64-unknown-linux-gnu/test/error-index.md - Rust_Compiler_Error_Index::E0712 (line 11385) stdout ----\n[01:19:06] error[E0597]: borrowed value does not live long enough\n[01:19:06]   --&gt; /checkout/obj/build/x86_64-unknown-linux-gnu/test/error-index.md:11392:14\n[01:19:06]    |\n[01:19:06] 8  |     let a = &amp;FOO; // error: thread-local variable borrowed past end of function\n[01:19:06]    |              ^^^ temporary value does not live long enough\n[01:19:06] 13 | }\n[01:19:06] 13 | }\n[01:19:06]    | - temporary value only lives until here\n[01:19:06]    |\n[01:19:06]    = note: borrowed value must be valid for the static lifetime...\n</pre></div>",
        "id": 131033963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635725
    },
    {
        "content": "<p>I hate those error-index failures...</p>",
        "id": 131033984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Already on it. The error code it expects is right, but only if <code>#![feature(nll)]</code> is provided.</p>",
        "id": 131034012,
        "sender_full_name": "davidtwco",
        "timestamp": 1533635762
    },
    {
        "content": "<p>argh</p>",
        "id": 131034032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635773
    },
    {
        "content": "<p>I wasn't sure we wanted that in the error index.</p>",
        "id": 131034033,
        "sender_full_name": "davidtwco",
        "timestamp": 1533635774
    },
    {
        "content": "<p>I think you can add a <code>#![feature(nll)]</code> to the example...</p>",
        "id": 131034043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635786
    },
    {
        "content": "<p>I feel like we've done that elsewhere</p>",
        "id": 131034044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635789
    },
    {
        "content": "<p>Wasn't sure if that was alright to do.</p>",
        "id": 131034050,
        "sender_full_name": "davidtwco",
        "timestamp": 1533635797
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">E0198</span>: <span class=\"nc\">r</span><span class=\"err\">##</span><span class=\"s\">&quot;</span>\n<span class=\"s\">A negative implementation is one that excludes a type from implementing a</span>\n<span class=\"s\">particular trait. Not being able to use a trait is always a safe operation,</span>\n<span class=\"s\">so negative implementations are always safe and never need to be marked as</span>\n<span class=\"s\">unsafe.</span>\n\n<span class=\"s\">```compile_fail</span>\n<span class=\"s\">#![feature(optin_builtin_traits)]</span>\n\n<span class=\"s\">struct Foo;</span>\n\n<span class=\"s\">// unsafe is unnecessary</span>\n<span class=\"s\">unsafe impl !Clone for Foo { }</span>\n</pre></div>",
        "id": 131034055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635806
    },
    {
        "content": "<p>Do you know what the command for testing that locally is?</p>",
        "id": 131034217,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636004
    },
    {
        "content": "<p>I am trying <code>src/tool/rustdoc</code> just now.</p>",
        "id": 131034246,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636021
    },
    {
        "content": "<p>But not sure that tests the error index.</p>",
        "id": 131034248,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636027
    },
    {
        "content": "<p><code>src/tool/error-index-generator</code> doesn't.</p>",
        "id": 131034250,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636037
    },
    {
        "content": "<p>I...don't know</p>",
        "id": 131034394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533636185
    },
    {
        "content": "<p>I think at this point I usually give up and run <code>./x.py test</code></p>",
        "id": 131034397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533636192
    },
    {
        "content": "<p>I hope that I'll find the correct path quick enough that I'll have run the error index tests in less time than it would take to just run everything.</p>",
        "id": 131034471,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636275
    },
    {
        "content": "<p>Huh, seems like it is <code>src/tools/error-index-generator</code> but locally it isn't doing anything.</p>",
        "id": 131034564,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636388
    },
    {
        "content": "<p>Ah, I just had to set <code>verbose-tests</code> in config.toml to see it doing it.</p>",
        "id": 131034632,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Anyway, updated that PR again now - it _should_ be fine, but I've said that three times already..</p>",
        "id": 131034648,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636567
    },
    {
        "content": "<p>the \"long tail\" :)</p>",
        "id": 131034649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533636583
    },
    {
        "content": "<p>/me been there</p>",
        "id": 131034651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533636588
    }
]