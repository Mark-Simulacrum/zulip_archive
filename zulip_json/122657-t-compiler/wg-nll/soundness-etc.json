[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in light of the strategy of \"focus on existing impl\", we should probably review the soundness and other bugs and make sure they are getting fixed. For example, <a href=\"https://github.com/rust-lang/rust/issues/49354\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49354\">https://github.com/rust-lang/rust/issues/49354</a>, <a href=\"https://github.com/rust-lang/rust/issues/50716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50716\">https://github.com/rust-lang/rust/issues/50716</a>, and <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">https://github.com/rust-lang/rust/issues/47184</a> ...</p>",
        "id": 126992528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527103690
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> you around and interested in taking any of those on?</p>",
        "id": 126992533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527103698
    },
    {
        "content": "<p>I thought there was one about implied bounds and NLL but can't find it now</p>",
        "id": 126992539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527103718
    },
    {
        "content": "<p>I'm around, I've just been busy enough that trivial bounds was taking up all of the time I had for Rust.</p>",
        "id": 126993426,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527104936
    },
    {
        "content": "<p>Of those three, #49354 looks like the one I would be most interested in.</p>",
        "id": 126993467,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527105002
    },
    {
        "content": "<p>That said I was looking at improving some of the move errors before then, but I'm not that happy with the approach I had for that so there isn't much that would be lost.</p>",
        "id": 126993588,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1527105122
    },
    {
        "content": "<p>sounds interesting indeed</p>",
        "id": 126993642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527105143
    },
    {
        "content": "<p>Seems like rust-lang/rust#47184 was fixed sometime between 1st Jan and 30th March!</p>",
        "id": 127079318,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527251891
    },
    {
        "content": "<p>with a period in middle (observed from 15th Feb rustc) where we ICE'd with a related error: \"unexpected region for local data ReStatic\"</p>",
        "id": 127079341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527251991
    },
    {
        "content": "<p>I'll go ahead and at least bisect to the particular nightlies where each change occurred, to gain confidence that the bug is actually fixed.</p>",
        "id": 127079388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527252017
    },
    {
        "content": "<p>oh, whoops: I was using links as my browser and didn't see the full comment thread, so I didn't realize that this was known (namely <a href=\"https://github.com/rust-lang/rust/pull/48482\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48482\">rust-lang/rust#48482</a>)</p>",
        "id": 127082891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527256943
    },
    {
        "content": "<p>I'm thinking that I will focus on finishing off that issue next</p>",
        "id": 127083012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527257110
    },
    {
        "content": "<p>seems like something we <em>must</em> fix and it's a major architectural unknown</p>",
        "id": 127083016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527257117
    },
    {
        "content": "<p>well, it doesn't have to be me</p>",
        "id": 127083019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527257120
    },
    {
        "content": "<p>but somebody should :)</p>",
        "id": 127083022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527257123
    },
    {
        "content": "<p><em>although</em> maybe not a blocker for issuing warnings...?</p>",
        "id": 127083028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527257138
    },
    {
        "content": "<blockquote>\n<p>I was using links as my browser</p>\n</blockquote>\n<p>People like you <em>do</em> exist...</p>",
        "id": 127083591,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527257933
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I was using links as my browser</p>\n</blockquote>\n<p>People like you <em>do</em> exist...</p>\n</blockquote>\n<p>(I had forgotten my AC adapter and so I was in emergency-mode trying to make my laptop as dumb as possible, moving all of my tasks to remote ssh sessions)</p>",
        "id": 127083676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527258034
    },
    {
        "content": "<p>I'm looking at the issue now, going over your conversation(s) with <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span></p>",
        "id": 127083698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527258077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 127083700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527258085
    },
    {
        "content": "<p>I did want to ask: You (niko) had said you don't want to deal with trying to deconstruct <code>let (a, b): (T, U);</code></p>",
        "id": 127083708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527258120
    },
    {
        "content": "<p>that leads me to ask: What is the alternative you are thinking of? We certainly should not build up a fake value of type <code>(T, U)</code> from the local variables <code>a</code>/<code>b</code></p>",
        "id": 127083763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527258156
    },
    {
        "content": "<p>Follow-up on this topic: I may have managed to implement deconstruction of <code>let (a, b): (T, U);</code>,</p>",
        "id": 127199226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527502866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm not sure I had a complete alternative in mind. I suppose deconstruction is the most straightforward sol'n in that case. We will have to handle other cases (e.g., <code>foo::&lt;...&gt;(...)</code>), and I suppose I thought maybe solving those other cases would help us here?</p>",
        "id": 127199497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527503290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> before I move too much further on this, I have a question about the <code>rustc::infer::canonical::Canonical</code> type</p>",
        "id": 127201020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506005
    },
    {
        "content": "<p>ok</p>",
        "id": 127201027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506030
    },
    {
        "content": "<p>We have <code>struct Canonical&lt;V&gt; { variables: CanonicalVarInfos, value: V }</code></p>",
        "id": 127201067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506047
    },
    {
        "content": "<p>(ask away, but also <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html\">there is a chapter of the rustc-guide covering canonicalization</a>, though it focuses on the role it plays in trait selection)</p>",
        "id": 127201069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506067
    },
    {
        "content": "<p>it says that the free inference variables have been number starting from 0 in order of first appearance</p>",
        "id": 127201070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506068
    },
    {
        "content": "<p>so my question is</p>",
        "id": 127201081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506118
    },
    {
        "content": "<p>in my code to deconstruct a pattern like <code>(a, b)</code>, and in parallel deconstruct the type <code>(T, U)</code></p>",
        "id": 127201131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506168
    },
    {
        "content": "<p>when I actually hit the base case of a binding, the API for <code>mir::UserAssertTy</code> requires a <code>CanonicalTy</code></p>",
        "id": 127201135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506189
    },
    {
        "content": "<p>so I need to conjure up a CanonicalVarInfos to plus in for the variables field of <code>Canonical</code></p>",
        "id": 127201141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506209
    },
    {
        "content": "<p>(one thing you could do would be to instantiate the variables in the infer ctxt and then recanonicalize)</p>",
        "id": 127201151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506244
    },
    {
        "content": "<p>Is the struct of the <code>Canonical</code> type something where the correspondence between the <code>CanonicalVarInfos</code> is based on the implicit order of the free variables</p>",
        "id": 127201154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506255
    },
    {
        "content": "<p>i.e. as I unzip a type's structure, conceptually I may have to also peel off CanonicalVarInfos ?</p>",
        "id": 127201157,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506279
    },
    {
        "content": "<p>yeah, I would not personally take that approach, it's too delicate</p>",
        "id": 127201199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506296
    },
    {
        "content": "<p>Or can I just clone the original CanonicalVarInfos from the original large type</p>",
        "id": 127201200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506298
    },
    {
        "content": "<p>you could do <em>that</em>, just skip renumbering, though then the resulting type is not truly canonical</p>",
        "id": 127201203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506317
    },
    {
        "content": "<p>ah I see</p>",
        "id": 127201205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506326
    },
    {
        "content": "<p>so the infos should match up</p>",
        "id": 127201210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506334
    },
    {
        "content": "<p>but it won't be canonicalized</p>",
        "id": 127201214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506341
    },
    {
        "content": "<p>hmm</p>",
        "id": 127201217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506345
    },
    {
        "content": "<p>e.g., if you had <code>(&amp;'_ u32, &amp;'_ i32)</code>, you would wind up with (for the RHS) <code>forall&lt;'0, '1&gt; &amp;'1 i32</code>, which is not truly canonical (where the <code>forall</code> refers to the \"info\" array)</p>",
        "id": 127201224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506363
    },
    {
        "content": "<p>this probably doesn't matter here</p>",
        "id": 127201229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506371
    },
    {
        "content": "<p>but it's generally a violation of the <code>Canonical&lt;..&gt;</code> contract</p>",
        "id": 127201232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506378
    },
    {
        "content": "<p>e.g., for caching</p>",
        "id": 127201235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506385
    },
    {
        "content": "<p>it might be simplest to recanonicalize</p>",
        "id": 127201287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506439
    },
    {
        "content": "<p>either by instatiating in the infer ctxt, as you mentioned... or perhaps by adding some new code that can take the old CanonicalVarInfos and the unzipped type(s) and then do the renumbering (and throwing out of unused var infos...)</p>",
        "id": 127201304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527506508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> personally I'd say not worth writing the new code, but yes conceptually it's possible. Rather than doing that optimization, though, I'd prefer to do <a href=\"https://github.com/rust-lang/rust/issues/48417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48417\">https://github.com/rust-lang/rust/issues/48417</a></p>",
        "id": 127201367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506637
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span>, it'd be sort of something completely different, but maybe you are interested in <a href=\"https://github.com/rust-lang/rust/issues/48417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48417\">https://github.com/rust-lang/rust/issues/48417</a> ? :) would be a nice refactoring</p>",
        "id": 127201407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506658
    },
    {
        "content": "<p>I'd have to explain what I had in mind</p>",
        "id": 127201410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506679
    },
    {
        "content": "<p>(it's more in the area of traits)</p>",
        "id": 127201426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506741
    },
    {
        "content": "<p>Reading.</p>",
        "id": 127201428,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1527506749
    },
    {
        "content": "<p>If it involved refactoring I'd be keen to get involved (I'm working in the same group as <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> )</p>",
        "id": 127201429,
        "sender_full_name": "Jaime Valdemoros",
        "timestamp": 1527506756
    },
    {
        "content": "<p>( though possibly also relevant here — if I'm correct, it could be a general overall speedup )</p>",
        "id": 127201472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506771
    },
    {
        "content": "<p>I'll also leave a few notes on #50716</p>",
        "id": 127201479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527506802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another Q on <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">rust-lang/rust#47184</a> : is it actually possible to check things like <code>foo::&lt;'static&gt;()</code> via injecting <code>UserAssertTy</code> ? We cannot feed the <code>'static</code> as an argument to that statement. I guess we <em>could</em> try to instantiate the generics of the fn signature, plugging in the <code>'static</code> for its lifetime parameter...</p>",
        "id": 127208832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527518813
    },
    {
        "content": "<p>it is not possible I don't think, I think we need a distinct mechanism</p>",
        "id": 127208898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518903
    },
    {
        "content": "<p>I'm not 100% sure what I think that mechanism should be</p>",
        "id": 127208900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518914
    },
    {
        "content": "<p>I had planned to look at the astconv code and see if we could modify it</p>",
        "id": 127208903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518923
    },
    {
        "content": "<p>so that we capture each time we convert a type from HIR</p>",
        "id": 127208906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518930
    },
    {
        "content": "<p>and somehow store that result for later reference</p>",
        "id": 127208914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518938
    },
    {
        "content": "<p>idk, this is a bit tricky. @eddyb and I were talking about it too, he has opinions :)</p>",
        "id": 127208927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527518953
    },
    {
        "content": "<p>Is your thinking in part that we may do away with <code>UserAssertTy</code> if we were to add this other mechanism to which you allude?</p>",
        "id": 127208999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527519028
    },
    {
        "content": "<p>yeah, that's a question mark</p>",
        "id": 127209010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527519053
    },
    {
        "content": "<p>When we talk about soundness, do we talk about a proof of soundness (proof of algorithm, not proof of implementation) or about fixing known soundness bugs?<br>\nAlso, do we talk about the soundness of the existing MIR-borrowck or the upcoming polonius version? Reading the weekly meeting of May 29th, I'm assuming we talk about the existing MIR-borrowck.</p>",
        "id": 127277670,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527632665
    },
    {
        "content": "<p>The tag <code>NLL-sound</code> is typically used for cases where MIR-borrowck is accepting code it should reject; which usually means that it is accepting code that is unsound.</p>",
        "id": 127277830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527632934
    },
    {
        "content": "<p>This particular wg-nll topic, \"soundness-etc\", may or may not be so focused</p>",
        "id": 127277845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527632974
    },
    {
        "content": "<p>Ok, thanks! So it's about fixing known issues in MIR-borrowck.</p>",
        "id": 127277846,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527632974
    },
    {
        "content": "<p>Ah ok :-)</p>",
        "id": 127277854,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527632986
    },
    {
        "content": "<blockquote>\n<p>Ok, thanks! So it's about fixing known issues in MIR-borrowck.</p>\n</blockquote>\n<p>yes</p>",
        "id": 127277857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527632993
    },
    {
        "content": "<p>however, if someone wants to try to come up with a soundness proof</p>",
        "id": 127277864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527633003
    },
    {
        "content": "<p>they certainly are welcome to do so. Though it may be good to talk to the Rust Belt folks like Ralf Jung about their work in this space</p>",
        "id": 127277921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527633046
    },
    {
        "content": "<p>Rust Belt folks: <a href=\"https://plv.mpi-sws.org/rustbelt/\" target=\"_blank\" title=\"https://plv.mpi-sws.org/rustbelt/\">https://plv.mpi-sws.org/rustbelt/</a></p>",
        "id": 127277938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527633076
    },
    {
        "content": "<p>Yes definitely, since they have the only formal description of a subset of the language that I know.</p>",
        "id": 127277948,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1527633096
    }
]