[
    {
        "content": "<p>I wanted to just jot some thoughts down here rather than continuing to spam the issue with ill-formed ideas</p>",
        "id": 150836603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543918881
    },
    {
        "content": "<p>So the heart of the problem is in how we are supposed to handle a case like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v_lambda</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150836622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543918912
    },
    {
        "content": "<p>in particular, from what I can tell, the region on the <em>return type</em> is a FreeRegion (specificially <code>&amp;ReScope(CallSite(10)) str</code>), even though the argument type is BoundRegion (i.e. the type we have, prior to NLL region renumbering, is <code>for&lt;'r&gt; fn(&amp;ReLateBound(DebruinIndex(0)) str) -&gt; &amp;ReScope(CallSite(10)) str</code></p>",
        "id": 150836814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919053
    },
    {
        "content": "<p>So here's the question I have: What is region-renumbering <em>supposed</em> to do here to handle this case? In the most general case, I would assume that we would <em>like</em> to be able to infer that the same region (introduced by the <code>for &lt;'r&gt;</code> binding) is used for both the input argument and also the return type.</p>",
        "id": 150836894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919144
    },
    {
        "content": "<p>But... am I correct that NLL region inference does not look at the MIR for the closure body and its containing item simultaneously? If we are considering them independently, then I do not see how we could hope to infer a correct usable region from the containing item alone (at least not in the general case where the closure body could return other longer lived stuff; but maybe I should generalize the example to use <code>&amp;mut</code> before I get subregion relations mixed in here)</p>",
        "id": 150837002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919266
    },
    {
        "content": "<p>sorry, I realized I left out a step when I was trying to establish the context of the problem: The reason I pointed out that the region on the return type is a free region (and not the BoundRegion from the argument type) is that free regions get renumbered by the NLL region renumbering pass, effectively turning them into inference variables.</p>",
        "id": 150837186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919465
    },
    {
        "content": "<p>and so what I am musing about is whether we should be handling region-renumbering of closure types in a more nuanced way.</p>",
        "id": 150837205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919507
    },
    {
        "content": "<p>(or if the we need to change the way regions are assigned for the types of closures themselves at the outset, so that the region here would be the bound-region?)</p>",
        "id": 150837263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543919558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes I figured this would be the problem -- I've not read all your comments yet but this has been an area with a lot of iteration (how to handle user type annot on closure)</p>",
        "id": 150842988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926510
    },
    {
        "content": "<p>Note that this problem arises with no type annotation</p>",
        "id": 150842992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926536
    },
    {
        "content": "<p>I just added that as a way to try to narrow down the problem</p>",
        "id": 150842997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926544
    },
    {
        "content": "<p>MIR does not (and I feel strongly that it should not) look at closure container and closure simultaneously</p>",
        "id": 150843001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926545
    },
    {
        "content": "<p>yes I figured that</p>",
        "id": 150843002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926552
    },
    {
        "content": "<p>right now, it is \"normal\" type check's job to define where lifetime binders appear</p>",
        "id": 150843006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926563
    },
    {
        "content": "<p>that's it's only lifetime-related job</p>",
        "id": 150843008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926572
    },
    {
        "content": "<p>can/should we be analyzing the closure body and then using that to inform the region inference for the container?</p>",
        "id": 150843011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926586
    },
    {
        "content": "<p>we do that already</p>",
        "id": 150843013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926593
    },
    {
        "content": "<p>the closure passes up constraints to its creator</p>",
        "id": 150843016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926599
    },
    {
        "content": "<p>well should we be doing it \"better\" ?</p>",
        "id": 150843018,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926602
    },
    {
        "content": "<p>maybe? let me read in a bit more detail.</p>",
        "id": 150843071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926622
    },
    {
        "content": "<p>I guess that may be more what I mean: Should I be looking at the format of the constraints and seeing if I can use them to properly infer a region to assign here</p>",
        "id": 150843077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926637
    },
    {
        "content": "<p>but if I recall what will happen here is:</p>\n<ul>\n<li>typeck has no expected type here</li>\n<li>so it will infer that there are no bound regions in the arguments</li>\n</ul>\n<p>the type annotation just enforces the view from \"inside the closure\", so it wouldn't change that, I don't think.</p>\n<p>In which case the error for NLL is just \"correct\"</p>",
        "id": 150843089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926666
    },
    {
        "content": "<p>no bound regions? So you don't expect to see ReEarlyBound ?</p>",
        "id": 150843097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926719
    },
    {
        "content": "<p>ReEarlyBound is not a bound region :P</p>",
        "id": 150843140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926731
    },
    {
        "content": "<p>oh I misinterpreted</p>",
        "id": 150843145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926739
    },
    {
        "content": "<p>what I really meant is no <em>late-bound</em> regions...</p>",
        "id": 150843146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926741
    },
    {
        "content": "<p>well</p>",
        "id": 150843147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926749
    },
    {
        "content": "<p>sorry what I wrote is probably wrong</p>",
        "id": 150843148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926752
    },
    {
        "content": "<p>I mean it's correct</p>",
        "id": 150843150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926757
    },
    {
        "content": "<p>there would be no late-bound regions</p>",
        "id": 150843151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926761
    },
    {
        "content": "<p>but that's not the only relevant question here</p>",
        "id": 150843153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926765
    },
    {
        "content": "<p>actually I might have meant ReLateBound</p>",
        "id": 150843155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926766
    },
    {
        "content": "<p>basically the question is whether the input/output have same region, wherever it is bound</p>",
        "id": 150843159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926775
    },
    {
        "content": "<p>anyway let me get a local build going</p>",
        "id": 150843170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926790
    },
    {
        "content": "<p>with some debuginfo</p>",
        "id": 150843171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926792
    },
    {
        "content": "<p>\"closure annotations my old friend...I've come to talk with you again...\"</p>",
        "id": 150843175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926808
    },
    {
        "content": "<p>if I could go back in time and make one change to Rust, sometimes I think it would be to give a hard error if closure signatures did not have an expected type (and not permit user annotation)</p>",
        "id": 150843187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926838
    },
    {
        "content": "<p>or at least to make an alternate, full-feature annotation form that must be completely specified</p>",
        "id": 150843233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926861
    },
    {
        "content": "<p>...... you would not permit user annotation as the way to provide the expected type?</p>",
        "id": 150843240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926882
    },
    {
        "content": "<p>anyway I don't mind continuing to poke at this; I feel like I want to sink my toes more deeply into this code again</p>",
        "id": 150843265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926937
    },
    {
        "content": "<p>well if we did I would require complete annotation like a fn</p>",
        "id": 150843266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926940
    },
    {
        "content": "<p>ok, I want to investigate a bit too just to have an informed opinion</p>",
        "id": 150843270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926953
    },
    {
        "content": "<p>right now we permit things like <code>|x: u32| foo</code> -- return type unannotated</p>",
        "id": 150843313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926967
    },
    {
        "content": "<p>etc</p>",
        "id": 150843315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926970
    },
    {
        "content": "<p>we also have no way to use named lifetimes</p>",
        "id": 150843318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926977
    },
    {
        "content": "<p>it's sort of a mess</p>",
        "id": 150843319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926979
    },
    {
        "content": "<p>yes I agree wit hthat</p>",
        "id": 150843323,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543926983
    },
    {
        "content": "<p>I of course want there to be some way to specify types</p>",
        "id": 150843334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543927003
    },
    {
        "content": "<p>it would be nice to at least allow <code>let f = for &lt;'a&gt; |arg: &amp;'a T| -&gt; &amp;'a Answer { ... };</code></p>",
        "id": 150843341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543927015
    },
    {
        "content": "<p>yes, presumably we'll ultimately use some syntax like that</p>",
        "id": 150843351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543927027
    },
    {
        "content": "<p>it is sort of amazing we've gotten this far without adding it as an unstable feature...</p>",
        "id": 150843360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543927045
    },
    {
        "content": "<p>heh yes</p>",
        "id": 150843362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543927049
    },
    {
        "content": "<blockquote>\n<p>the closure passes up constraints to its creator</p>\n</blockquote>",
        "id": 150845815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543929898
    },
    {
        "content": "<p>So <code>RegionConstraintData</code>, or at least its doc comment, implies that in some places we can encode both conditions that must be verified in addition to assumptions that can be made</p>",
        "id": 150845858,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543929942
    },
    {
        "content": "<p>But AFAICT the <code>QueryRegionConstraint</code> is not expressive enough to encode both kinds of things? I assume it is only passing along conditions that must be verified?</p>",
        "id": 150845923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543929976
    },
    {
        "content": "<p>(The <code>RegionConstraintData</code> I'm talking about is in <code>rustc::infer::region_constraints</code>, so perhaps it is not the right thing for me to be taking inspiration from. But I nonetheless was wondering whether <code>QueryRegionConstraint</code> should be expanded to allow one to encode assumptions that can be made, so that one might e.g. express \"the region on the return type can be assumed to outlive the bound-region attached to the argument type\")</p>",
        "id": 150846102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543930126
    },
    {
        "content": "<p>/me goes off to see if the rustc guide talks about this</p>",
        "id": 150846338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543930326
    },
    {
        "content": "<p>(its possible that the answer here is that it was an internal bug that AST-borrowck accepted this code in the first place. At least, I'm having difficultly understanding how the region it infers for the return type can make sense; and the code <em>does</em> get rejected if you start trying to call the closure...)</p>",
        "id": 150850360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543933498
    },
    {
        "content": "<blockquote>\n<p>So <code>RegionConstraintData</code>, or at least its doc comment, implies that in some places we can encode both conditions that must be verified in addition to assumptions that can be made</p>\n</blockquote>\n<p>I don't think we can presently encode that</p>",
        "id": 150855221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937618
    },
    {
        "content": "<p>I don't quite get why you want to yet but I'm in plenary so it's hard to concentrate</p>",
        "id": 150855234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937631
    },
    {
        "content": "<p>Well its possible that all of this is arising from a different bug that matthewjasper identified</p>",
        "id": 150855332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543937703
    },
    {
        "content": "<p>see PR <a href=\"https://github.com/rust-lang/rust/issues/56486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56486\">#56486</a></p>",
        "id": 150855345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543937715
    },
    {
        "content": "<p>(the reason I was thinking we'd want to encode Assumptions, in addition to constraints, is that I figured that when you are starting with <code>for &lt;'r&gt; (&amp;'r T1) -&gt; &amp;'_#1r T2</code> , that you might want to allow '_#1r to be unified with <code>'r</code></p>",
        "id": 150855479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543937824
    },
    {
        "content": "<p>but I figure in order to do that, you would need to propagate knowledge that the closure body actually allows that unification.</p>",
        "id": 150855503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543937849
    },
    {
        "content": "<p>(okay, no, PR <a href=\"https://github.com/rust-lang/rust/issues/56486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56486\">#56486</a> alone will not fix this)</p>",
        "id": 150856045,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543938319
    },
    {
        "content": "<p>more investigation: I've started looking at the nll.0.mir for the closure</p>",
        "id": 150922362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011325
    },
    {
        "content": "<p>which, once I started understanding the equivalences, helps illuminate some things, I think</p>",
        "id": 150922379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011349
    },
    {
        "content": "<p>in particular, the \"Free Region Mapping\" has two relevant entries for the running example <code>let _v_lambda = |v: &amp;str| { v };</code></p>",
        "id": 150922423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011389
    },
    {
        "content": "<p>the relevant entries are: </p>\n<div class=\"codehilite\"><pre><span></span>| Free Region Mapping\n| &#39;_#0r | Global | [&#39;_#0r, &#39;_#4r, &#39;_#1r, &#39;_#2r, &#39;_#3r]\n| &#39;_#1r | External | [&#39;_#4r, &#39;_#1r]\n| &#39;_#2r | Local | [&#39;_#4r, &#39;_#2r]\n| &#39;_#3r | Local | [&#39;_#4r, &#39;_#3r]\n</pre></div>",
        "id": 150922448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011429
    },
    {
        "content": "<p>and the type for the closure, when we start checking it (and after substituting in inferred-to-be equivalent regions to simplify presentation here): <code>fn main::{{closure}}(_1: &amp;'_#2r [closure-env], _2: &amp;'_#3r str) -&gt; &amp;'_#1r str</code></p>",
        "id": 150922677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011634
    },
    {
        "content": "<p>argh I've failed to follow up on this</p>",
        "id": 150922770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011708
    },
    {
        "content": "<p>so, okay, that means the closure gets the input <code>_2: &amp;'_#3r str</code> and will just pass it back as the result <code>'_#1r str</code></p>",
        "id": 150922777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011713
    },
    {
        "content": "<p>I can prob do that this morning once I find some more coffee</p>",
        "id": 150922780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011718
    },
    {
        "content": "<p>so clearly that would mean <code>_#3r</code> needs to outlive <code>'_#1r</code></p>",
        "id": 150922801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011737
    },
    {
        "content": "<p>(this damn hotel room only gives enough for 1 cup of <span class=\"emoji emoji-2615\" title=\"coffee\">:coffee:</span> , but 2 cups of decaf... what's up with that...)</p>",
        "id": 150922810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011745
    },
    {
        "content": "<p>but the thing I'm now trying to understand: the Free Region Mapping says that <code>'_#1r</code> is an External region</p>",
        "id": 150922829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011775
    },
    {
        "content": "<p>which is meant to denote a region that is defined externally to the closure itself. E.g. if the containing item had a region param <code>'a</code> or some such.</p>",
        "id": 150922898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011813
    },
    {
        "content": "<p>I <em>think</em> that the Free Region Mapping is tagging <code>'_#1r</code> as an external region because prior to the remapping, it was initially region-inferred to be <code>ReScope(CallSite(10))</code></p>",
        "id": 150922957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011883
    },
    {
        "content": "<p>(I could be wrong about that hypothesis though)</p>",
        "id": 150922974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011911
    },
    {
        "content": "<p>In any case, it doesn't seem <em>right</em> to tag the region here as External</p>",
        "id": 150923023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011937
    },
    {
        "content": "<p>I think Bill Gates-Foldgers once famously said 8 oz of caffeinated coffee should be enough for anyone.</p>",
        "id": 150923055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544011990
    },
    {
        "content": "<blockquote>\n<p>In any case, it doesn't seem <em>right</em> to tag the region here as External</p>\n</blockquote>\n<p>at least, not in <em>this</em> instance. There are straight-forward modifications to the closure body where it wouldn't be <em>wrong</em> to have an External region there (e.g. returning a <code>&amp;'static str</code> or similarly sufficiently-long-lived reference)</p>",
        "id": 150923433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544012308
    },
    {
        "content": "<blockquote>\n<p>In any case, it doesn't seem <em>right</em> to tag the region here as External</p>\n</blockquote>\n<p>I think it is right</p>",
        "id": 150925419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014673
    },
    {
        "content": "<p>at least, according to the setup</p>",
        "id": 150925425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014680
    },
    {
        "content": "<p>in particular, given that we have no expected type, I think we will infer the types to be type variables</p>",
        "id": 150925474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014691
    },
    {
        "content": "<p>but let me review the logic...</p>",
        "id": 150925477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014697
    },
    {
        "content": "<p>(and that implies that the region is not late-bound, and therefore it is external)</p>",
        "id": 150925490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014722
    },
    {
        "content": "<p>well, we <em>should</em> respect the user given annotations</p>",
        "id": 150925525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544014777
    },
    {
        "content": "<p>let me rephrase</p>",
        "id": 150925544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014795
    },
    {
        "content": "<p>if the region is treated as external</p>",
        "id": 150925586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014803
    },
    {
        "content": "<p>then there's no way we can accept the code</p>",
        "id": 150925613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014810
    },
    {
        "content": "<p>right?</p>",
        "id": 150925616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014812
    },
    {
        "content": "<p>the closure has type <code>for &lt;'_3r&gt; fn(&amp;'_3r str) -&gt; '_#1r str</code>. If <code>'_#1r</code> is external (i.e., if we are assuming that it is some region that is defined by the container), then we cannot generally let <code>'_3r</code> be equated with <code>'_#1r</code>, and therefore we will be forced to reject the code.</p>",
        "id": 150925689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014919
    },
    {
        "content": "<p>(which is what we do today.)</p>",
        "id": 150925715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014923
    },
    {
        "content": "<p>My claim is that it would be better, if possible, for us to accept the code, by <em>some</em> means. I don't know if the right means would be to provide some way for <code>'_#1r</code> to be unified with <code>_3r</code> above, or if it is to avoid introducing <code>'_#1r</code> in the first place, or some other change.</p>",
        "id": 150925788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544014995
    },
    {
        "content": "<p>I agree that the return type of the closure is a type variable (not provided by the user). And the compiler manages to figure out that it has type <code>&amp;str</code>. The debug output includes the line </p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-12-05T11:34:17Z: rustc_typeck::check::regionck: constrain_regions_in_type_of_node(ty=&amp;&#39;_#0r str, ty0=&amp;&#39;_#0r str, id=HirId { owner: DefIndex(0:3), local_id: 10 }, minimum_lifetime=ReScope(CallSite(10)))\n</pre></div>",
        "id": 150926016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015209
    },
    {
        "content": "<p>and I infer that that <code>minimum_lifetime=ReScope(CallSite(10))</code> is what causes the compiler to eventually assign the closure the return type <code>&amp;ReScope(CallSite(10)) str</code></p>",
        "id": 150926044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015257
    },
    {
        "content": "<p>my claim, however, is that the region <code>ReScope(CallSite(10))</code> is an unusual ReScope</p>",
        "id": 150926094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015290
    },
    {
        "content": "<p>in that it is, in my head at least, kind of an <em>existential</em> scope. It just represents some region that is a bit longer than the scope(s) for the closure arguments.</p>",
        "id": 150926120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015343
    },
    {
        "content": "<p>to be clear, I meant that it is existential from the viewpoint while we are checking the body of the closure</p>",
        "id": 150926196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015423
    },
    {
        "content": "<p>In some ways, I would like it if we could somehow treat such an <code>ReScope(CallSite(10))</code> (assuming <code>10</code> is the ID for the closure we are currently checking) as if it were bound by the <code>for &lt;'r, ...&gt;</code></p>",
        "id": 150926213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015461
    },
    {
        "content": "<p>or something where every bound region introduced by that <code>for &lt;..&gt;</code> is known to outlive the <code>ReScope(CallSite(10))</code></p>",
        "id": 150926239,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015497
    },
    {
        "content": "<blockquote>\n<p>my claim, however, is that the region <code>ReScope(CallSite(10))</code> is an unusual ReScope</p>\n</blockquote>\n<p>I think this is irrelevant</p>",
        "id": 150926406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015683
    },
    {
        "content": "<p>Ah okay lets discuss that then</p>",
        "id": 150926414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015703
    },
    {
        "content": "<p>this is not to disagree with any of your other claims</p>",
        "id": 150926424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015708
    },
    {
        "content": "<p>well let me back up</p>",
        "id": 150926434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015741
    },
    {
        "content": "<p>first off, I want to be clear about what code we are talking about</p>",
        "id": 150926442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015756
    },
    {
        "content": "<p>is it this example, or another one?</p>",
        "id": 150926492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v_lambda</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150926495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015781
    },
    {
        "content": "<p>I guess we are most interested in the original example:</p>",
        "id": 150926508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015801
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v_lambda</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()).</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">_v_fn</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()).</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150926509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015803
    },
    {
        "content": "<p>okay. My running example is: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v_lambda</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150926515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015812
    },
    {
        "content": "<p>which is very similar to the reduced case that I posted in a comment</p>",
        "id": 150926528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015831
    },
    {
        "content": "<p>I think we should <em>eventually</em> discuss the original example</p>",
        "id": 150926536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015850
    },
    {
        "content": "<p>I think for the purposes of this discussion</p>",
        "id": 150926562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015873
    },
    {
        "content": "<p>your reduced example is probably equivalent</p>",
        "id": 150926566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015878
    },
    {
        "content": "<p>key point is: it has no return type annotation</p>",
        "id": 150926610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015887
    },
    {
        "content": "<p>but in the interest of keeping the example minimal, I would like to focus on either <code>|v: &amp;str| -&gt; &amp;str { v }</code> or <code>|v: &amp;str| { v }</code></p>",
        "id": 150926613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015890
    },
    {
        "content": "<p>right. Lets assume no return type annotation.</p>",
        "id": 150926621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015904
    },
    {
        "content": "<p>it's a bit strange to me that the former doesn't work</p>",
        "id": 150926625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015913
    },
    {
        "content": "<p>but the only reason I expect it to work is by leaning on the return type annot</p>",
        "id": 150926632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015922
    },
    {
        "content": "<p>neither works. They both infer <code>&amp;str</code></p>",
        "id": 150926635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015929
    },
    {
        "content": "<p>it might be worth investigating why that doesn't happen but sort of neither here nor there</p>",
        "id": 150926638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015932
    },
    {
        "content": "<p>but they have no information to use for the region</p>",
        "id": 150926652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015940
    },
    {
        "content": "<p>I think the flaw with the first one, perhaps, is that for some reason it is not using lifetime elision rules</p>",
        "id": 150926669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015960
    },
    {
        "content": "<p>and so regionck plugs in <code>ReScope(CallSite(10))</code>, which is subsequently replaced with <code>_#1</code> in defining_ty</p>",
        "id": 150926676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544015972
    },
    {
        "content": "<p>right</p>",
        "id": 150926681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015978
    },
    {
        "content": "<p>so the question is, how would we fix it?</p>",
        "id": 150926689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015989
    },
    {
        "content": "<p>I wholeheartedly agree that we should explore whether the lifetime elision rules are supposed to be applied in the former case.</p>",
        "id": 150926738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016005
    },
    {
        "content": "<p>the reason that I said that <code>ReScope</code> was \"irrelevant\" is that those regions are erased</p>",
        "id": 150926740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016007
    },
    {
        "content": "<p>but it's not <em>totally</em> irrelevant</p>",
        "id": 150926746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016013
    },
    {
        "content": "<p>(but again, we don't need to immediately explore that Q)</p>",
        "id": 150926747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016013
    },
    {
        "content": "<blockquote>\n<p>I wholeheartedly agree that we should explore whether the lifetime elision rules are supposed to be applied in the former case.</p>\n</blockquote>\n<p>I think they should be, it's prob a bug I introduced when I reworked this stuff the last time</p>",
        "id": 150926756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016032
    },
    {
        "content": "<p>but yeah separate problem</p>",
        "id": 150926764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016038
    },
    {
        "content": "<p>right now, typeck has the job of determining bound vs free and that's it</p>",
        "id": 150926771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016053
    },
    {
        "content": "<p>Yes, they are erased. But that erasing process plugs in an external-tagged region varaible <code>'_#1r</code></p>",
        "id": 150926773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016055
    },
    {
        "content": "<p>and I think according to that scheme, NLL is giving a \"proper\" error here</p>",
        "id": 150926782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016064
    },
    {
        "content": "<p>so I could see two routes to fix this:</p>",
        "id": 150926790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016069
    },
    {
        "content": "<ul>\n<li>modify typeck to infer a different result</li>\n</ul>",
        "id": 150926798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016079
    },
    {
        "content": "<ul>\n<li>give NLL the job of inferring bound vs free too (possibly informed by typeck to some degree)</li>\n</ul>",
        "id": 150926807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016093
    },
    {
        "content": "<p>the latter is what I always hoped we'd find a way to do</p>",
        "id": 150926814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016099
    },
    {
        "content": "<p>but I also hoped not to think about it yet :)</p>",
        "id": 150926818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016107
    },
    {
        "content": "<blockquote>\n<p>Yes, they are erased. But that erasing process plugs in an external-tagged region varaible <code>'_#1r</code></p>\n</blockquote>\n<p>right, and correctly so (I claim)</p>",
        "id": 150926821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016115
    },
    {
        "content": "<p>See that brings us back to my Q about CallSite's nature</p>",
        "id": 150926867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016130
    },
    {
        "content": "<p>If the ReScope were describing a region statically defined by the containing item</p>",
        "id": 150926880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016149
    },
    {
        "content": "<p>then I would agree that external would make sense</p>",
        "id": 150926886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016160
    },
    {
        "content": "<p>I don't think NLL should consider rescope at all</p>",
        "id": 150926902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016177
    },
    {
        "content": "<p>as something special</p>",
        "id": 150926905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016182
    },
    {
        "content": "<p>one could imagine though</p>",
        "id": 150926913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016190
    },
    {
        "content": "<p>but that's not how I interpret the <code>ReScope</code> being used here. Its not an <code>ReScope</code> that is meaningful to the container; it is an ReScope that is meaningful to teh closure body alone</p>",
        "id": 150926916,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016191
    },
    {
        "content": "<p><em>typeck</em> concluding that a smaller scope can lead to a bound region</p>",
        "id": 150926923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016202
    },
    {
        "content": "<p>but this .. I don't like it, doesn't feel like it's moving in the right direction</p>",
        "id": 150926933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016213
    },
    {
        "content": "<p>since it still requires typeck to have complete constraints</p>",
        "id": 150926942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016227
    },
    {
        "content": "<p>I agree that it doesn't feel right to have NLL inspect the ReScope</p>",
        "id": 150926946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016236
    },
    {
        "content": "<p>in terms of the mechanics of it</p>",
        "id": 150926988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016245
    },
    {
        "content": "<p>but in terms of the abstract semantics</p>",
        "id": 150926997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016261
    },
    {
        "content": "<p>it just seems to me like the enum variant <code>ReScope</code> is being used to mean \"this is a scope that had meaning within the container\"</p>",
        "id": 150927015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016298
    },
    {
        "content": "<p>note that if the closure were actually invoked</p>",
        "id": 150927036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016320
    },
    {
        "content": "<p>and that doesn't match my understanding of what it means in this case</p>",
        "id": 150927039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016324
    },
    {
        "content": "<p>I think you would no longer get that result</p>",
        "id": 150927040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016324
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 150927051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016332
    },
    {
        "content": "<p>it's basically just a bug of AST borrowck imo</p>",
        "id": 150927068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016343
    },
    {
        "content": "<p>you get totally different results when you try to invoke the closure. Both AST-borrowck and NLL start rejecting the code then</p>",
        "id": 150927077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016354
    },
    {
        "content": "<p>(though it's perhaps debatable; depends I suppose on the specifics of how we lower things)</p>",
        "id": 150927147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016404
    },
    {
        "content": "<p>so, if we wanted to fix this failure of our inference</p>",
        "id": 150927171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016436
    },
    {
        "content": "<p>we're basically talking about adding a kind of \"generalization\" step</p>",
        "id": 150927179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016443
    },
    {
        "content": "<p>the tail comments on <a href=\"https://github.com/rust-lang/rust/issues/55526\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55526\">#55526</a> have some back-and-forth between me and the issue filer where I was trying to find out whether they were starting from a code base where they were defining a closure and successfully calling it.</p>",
        "id": 150927184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016446
    },
    {
        "content": "<p>(did you figure that out?)</p>",
        "id": 150927199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016463
    },
    {
        "content": "<p>(and AFAICT, they do not have such an example. The path they took to this bug was that they were not happy with the signature on a locally defined fn and so they tried replacing it with a closure.)</p>",
        "id": 150927252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016487
    },
    {
        "content": "<p>and then they were surprised to see the closure get rejected.</p>",
        "id": 150927258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016498
    },
    {
        "content": "<p>But I haven't gotten final confirmation on that version of the events</p>",
        "id": 150927296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016539
    },
    {
        "content": "<p>ok</p>",
        "id": 150927324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016580
    },
    {
        "content": "<p>So</p>",
        "id": 150927329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016582
    },
    {
        "content": "<p>in terms of potential fixes</p>",
        "id": 150927336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016588
    },
    {
        "content": "<p>there are two very different paths I could imagine</p>",
        "id": 150927339,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016595
    },
    {
        "content": "<p>that's somewhat relevant in that it suggests we can be more liesurely about things</p>",
        "id": 150927344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016601
    },
    {
        "content": "<p>and potentially aim to fix things \"the right way\"</p>",
        "id": 150927396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016606
    },
    {
        "content": "<p>whatever we decide that is</p>",
        "id": 150927406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016609
    },
    {
        "content": "<p>one path would be focused on <em>just</em> trying to make us accept the code where the closure is not called</p>",
        "id": 150927409,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016613
    },
    {
        "content": "<p>sounds not good :)</p>",
        "id": 150927421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016622
    },
    {
        "content": "<p>right, I only mention it</p>",
        "id": 150927426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016627
    },
    {
        "content": "<p>because, well</p>",
        "id": 150927432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016633
    },
    {
        "content": "<p>I was wondering why, when a closure isn't called here</p>",
        "id": 150927437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016641
    },
    {
        "content": "<p>why we don't infer that the return type has <code>&amp;'ReEmpty str</code></p>",
        "id": 150927443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016650
    },
    {
        "content": "<p>since no one ever tries to read from it</p>",
        "id": 150927456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016666
    },
    {
        "content": "<p>well we have a constraint from the closure body</p>",
        "id": 150927471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016684
    },
    {
        "content": "<p>(in lexical inference)</p>",
        "id": 150927476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016690
    },
    {
        "content": "<p>that the return type must be in scope where the return occurs</p>",
        "id": 150927487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016701
    },
    {
        "content": "<p>something like that</p>",
        "id": 150927490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016703
    },
    {
        "content": "<p>(and then the <code>for &lt;'r&gt; fn(v: &amp;'r str) -&gt; &amp;ReEmpty str { v }</code> would pass, I assume, since `'r  outlives ReEmpty)</p>",
        "id": 150927491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016706
    },
    {
        "content": "<p>ah okya</p>",
        "id": 150927497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016711
    },
    {
        "content": "<p>I think we actually require that the return type outlives the fn body</p>",
        "id": 150927498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016712
    },
    {
        "content": "<p>I think you added that, even</p>",
        "id": 150927502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016715
    },
    {
        "content": "<p>Never mind that then. :)</p>",
        "id": 150927504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016718
    },
    {
        "content": "<p>some time ago</p>",
        "id": 150927505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016718
    },
    {
        "content": "<p>It was a shower thought.</p>",
        "id": 150927556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016738
    },
    {
        "content": "<p>in my ideal world</p>",
        "id": 150927561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016750
    },
    {
        "content": "<p>A hypothetical \"quick, minimal, ill-thought out fix\"</p>",
        "id": 150927564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016754
    },
    {
        "content": "<p>we would have NLL borrowck take charge of inferring the binding sites for the regions</p>",
        "id": 150927572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016763
    },
    {
        "content": "<p>but I'm not sure how feasible that is</p>",
        "id": 150927575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016766
    },
    {
        "content": "<p>it depends at minimum on my universes PR landing</p>",
        "id": 150927590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016784
    },
    {
        "content": "<p>we need to be able to solve traits, in particular, without knowing the answer</p>",
        "id": 150927606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016805
    },
    {
        "content": "<p>Here's another Q I have, before we get into long term solutions</p>",
        "id": 150927609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016813
    },
    {
        "content": "<p>go for it</p>",
        "id": 150927616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016817
    },
    {
        "content": "<p>given that the closure's return type is inferred to be <code>&amp;'ReScope(CallSite(10)) str</code></p>",
        "id": 150927628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016832
    },
    {
        "content": "<p>why is AST-borrowck accepting the body?</p>",
        "id": 150927634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016839
    },
    {
        "content": "<p>oh</p>",
        "id": 150927676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016845
    },
    {
        "content": "<p>wait that's a silly question. beucase the argument outlives CallSite(10)</p>",
        "id": 150927685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016858
    },
    {
        "content": "<p>it's because of a quirk of the definition of the WF relation for clsoures</p>",
        "id": 150927686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016861
    },
    {
        "content": "<p>also</p>",
        "id": 150927690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016867
    },
    {
        "content": "<p>which is debatably a bug</p>",
        "id": 150927700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016878
    },
    {
        "content": "<p>hmm can you say more about this quirk?</p>",
        "id": 150927712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544016892
    },
    {
        "content": "<p>note that this PR of mine <a href=\"https://github.com/rust-lang/rust/pull/55988\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55988\">https://github.com/rust-lang/rust/pull/55988</a> would make the ast borrowck reject just like NLL</p>",
        "id": 150927744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016912
    },
    {
        "content": "<blockquote>\n<p>hmm can you say more about this quirk?</p>\n</blockquote>\n<p>why yes I can</p>",
        "id": 150927754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016925
    },
    {
        "content": "<p>in particular, the closure outlives rules here:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src/librustc/ty/outlives.rs#L74-L78\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src/librustc/ty/outlives.rs#L74-L78\">https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src/librustc/ty/outlives.rs#L74-L78</a></p>",
        "id": 150927833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016977
    },
    {
        "content": "<p>just look at the \"upvar types\" from the closure</p>",
        "id": 150927840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016983
    },
    {
        "content": "<p>ignoring the regions on the closure signature</p>",
        "id": 150927844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016989
    },
    {
        "content": "<p>I think...this is probably just a bug</p>",
        "id": 150927848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016993
    },
    {
        "content": "<p>the more I think about it</p>",
        "id": 150927850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016997
    },
    {
        "content": "<p>okay</p>",
        "id": 150927876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017027
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/sty.rs#L221-L227\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/sty.rs#L221-L227\">possibly relevant refresher on <code>ClosureSubsts</code></a></p>",
        "id": 150927877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017029
    },
    {
        "content": "<p>so anyway the reason this matters is</p>",
        "id": 150927880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017033
    },
    {
        "content": "<p>if it is likely that we are going to move to a world where AST-borrowck rejects this code</p>",
        "id": 150927885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017039
    },
    {
        "content": "<p>the closure creator requires its type to outlive the local variable in which it is stored</p>",
        "id": 150927895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017046
    },
    {
        "content": "<p>but that does not affect the return type</p>",
        "id": 150927900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017049
    },
    {
        "content": "<p>(and justify it by saying \"this is a soundness fix\")</p>",
        "id": 150927903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017051
    },
    {
        "content": "<p>because of this def'n of \"outlives\"</p>",
        "id": 150927905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017055
    },
    {
        "content": "<p>I'm super-inclined to run with that.</p>",
        "id": 150927906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017056
    },
    {
        "content": "<p>yes</p>",
        "id": 150927912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017058
    },
    {
        "content": "<p>basically my take is:</p>",
        "id": 150927918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017064
    },
    {
        "content": "<p>given the existing limitations of the system</p>",
        "id": 150927929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017071
    },
    {
        "content": "<p>this code <em>ought</em> to be rejected</p>",
        "id": 150927932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017075
    },
    {
        "content": "<p>but those limitations are unfortunate</p>",
        "id": 150927937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017078
    },
    {
        "content": "<p>and -- at some point -- it would be nice to do better</p>",
        "id": 150927982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017088
    },
    {
        "content": "<p>okay.</p>",
        "id": 150927985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017094
    },
    {
        "content": "<p>that said, I think that the <code>|x: &amp;str| -&gt; &amp;str</code> should work</p>",
        "id": 150927987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017101
    },
    {
        "content": "<p>and <em>that</em> I think is a bug</p>",
        "id": 150927989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017104
    },
    {
        "content": "<p>So that would be part 1: reject the code when no return tyep annotation is provided</p>",
        "id": 150927990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017105
    },
    {
        "content": "<p>and then, yes, part 2 is get us to accept <code>|x: &amp;str| -&gt; &amp;str</code></p>",
        "id": 150927996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017117
    },
    {
        "content": "<p>I think</p>",
        "id": 150927999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017119
    },
    {
        "content": "<p>seems right</p>",
        "id": 150928026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017155
    },
    {
        "content": "<p>the code for handling closure signatures is a bit separate I guess I forgot about elision or something</p>",
        "id": 150928034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017173
    },
    {
        "content": "<p>it took a while to figure out how to reconcile expected types + user-supplied signatures</p>",
        "id": 150928043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017185
    },
    {
        "content": "<p>we used to do some really ridiculously bogus stuff :)</p>",
        "id": 150928051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017193
    },
    {
        "content": "<p>(though it continues to be a little odd that we would take that approach, at least to me ... since, if we can apply lifetime elision rules  and get a usable result ... why not use those same rules for an inferred <code>-&gt; &amp;str</code> ?)</p>",
        "id": 150928059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017200
    },
    {
        "content": "<p>(in this case, of course, there is no expected signature)</p>",
        "id": 150928068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017202
    },
    {
        "content": "<blockquote>\n<p>(though it continues to be a little odd that we would take that approach, at least to me ... since, if we can apply lifetime elision rules  and get a usable result ... why not use those same rules for an inferred <code>-&gt; &amp;str</code> ?)</p>\n</blockquote>\n<p>well note that <code>|x: &amp;str| -&gt; _ { .. }</code> would still error</p>",
        "id": 150928116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017217
    },
    {
        "content": "<p>and this is what <code>|x: &amp;str| ...</code> is equivalent to</p>",
        "id": 150928123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017229
    },
    {
        "content": "<p>yes, but I guess it still feels strange, since the error you get will tend to make it clear that the compiler managed to plug in <code>-&gt; &amp;str</code></p>",
        "id": 150928142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017257
    },
    {
        "content": "<p>I did say it was unfortunate</p>",
        "id": 150928155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017265
    },
    {
        "content": "<p>it comes down to the order of the <code>exists</code> and <code>forall</code> binders, of course</p>",
        "id": 150928170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017284
    },
    {
        "content": "<p>is the justification essentiallythat the lifetime elision rules are meant to be syntactic in some sense ?</p>",
        "id": 150928180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017293
    },
    {
        "content": "<p>yes</p>",
        "id": 150928191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017304
    },
    {
        "content": "<p>and that if there is no surface syntax showing the <code>&amp;T</code>, then we're going to pretend like we couldn't have done better?</p>",
        "id": 150928212,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017317
    },
    {
        "content": "<p>I don't consider it pretending, but yes</p>",
        "id": 150928272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017342
    },
    {
        "content": "<p>I guess I would explain like this:</p>",
        "id": 150928278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017349
    },
    {
        "content": "<ul>\n<li>in closures with no expected signature, if anything is missing, it is equivalent to <code>_</code></li>\n</ul>",
        "id": 150928288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017362
    },
    {
        "content": "<ul>\n<li><code>_</code> (in the closure signature) creates a type variable that is in the scope of the <strong>enclosing fn</strong> (not just the closure)</li>\n</ul>",
        "id": 150928299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017374
    },
    {
        "content": "<ul>\n<li>in this case, the <code>_</code> would need to name a region that is in scope only for the closure</li>\n</ul>",
        "id": 150928313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017383
    },
    {
        "content": "<p>it would be nice to lift the second restriction, but it's a \"feature request\" basically</p>",
        "id": 150928335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017403
    },
    {
        "content": "<p>do we have <code>'_</code> at this point? What would <code>let v_lambda: |x: &amp;str| -&gt; &amp;'_ str { x }</code> do?</p>",
        "id": 150928338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017406
    },
    {
        "content": "<p>that would be equivalent to <code>&amp;str</code></p>",
        "id": 150928359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017434
    },
    {
        "content": "<p><code>'_</code> in a closure signature does not create a variable</p>",
        "id": 150928407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017446
    },
    {
        "content": "<p>but rather applies elision rules</p>",
        "id": 150928413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017452
    },
    {
        "content": "<p>okay.</p>",
        "id": 150928449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017498
    },
    {
        "content": "<p>one \"flaw\" in my explanation is that <code>_</code> in a closure body <em>can</em> refer to late-bound things</p>",
        "id": 150928462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017515
    },
    {
        "content": "<p>I put \"flaw\" in quotes because my explanation is not wrong</p>",
        "id": 150928482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017530
    },
    {
        "content": "<p>just that the current behavior is not especially intuitive nor useful</p>",
        "id": 150928498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017548
    },
    {
        "content": "<p>right, its just a subtle distinction between closure signature and closure body?</p>",
        "id": 150928505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017556
    },
    {
        "content": "<p>yeah</p>",
        "id": 150928509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017560
    },
    {
        "content": "<p>though also <code>'_</code> behaves differently etc</p>",
        "id": 150928551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017565
    },
    {
        "content": "<p>so the fact that signature vs body have a distinction doesn't seem <em>itself</em> bad</p>",
        "id": 150928554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017573
    },
    {
        "content": "<p>Okay. So it sounds like we have identified two work items here</p>",
        "id": 150928569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017598
    },
    {
        "content": "<p>1. For the <code>|v: &amp;str| { v }</code> case, we'll let NLL continue to break. And (maybe? hopefully?) we'll also break AST-borrowck in that case, for consistency?</p>",
        "id": 150928615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017634
    },
    {
        "content": "<p>2. For the <code>|v: &amp;str| -&gt; &amp;str { v }</code> case, I'll start trying to identify why the lifetime elision rules aren't making it work out of the box.</p>",
        "id": 150928642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017662
    },
    {
        "content": "<p>(regarding 2., I hypothesized <a href=\"https://github.com/rust-lang/rust/issues/55526#issuecomment-435411440\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55526#issuecomment-435411440\">a month ago</a> that lifetime elision might be related to this...)</p>",
        "id": 150928722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017700
    },
    {
        "content": "<p>Do the above two points sound right to you? And since you already have a PR that you say breaks AST-borrowck on case 1., we'll just let the debate carry on in PR <a href=\"https://github.com/rust-lang/rust/issues/55988\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55988\">#55988</a> ?</p>",
        "id": 150928799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544017780
    },
    {
        "content": "<p>that sounds correct to me</p>",
        "id": 150928971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544017915
    },
    {
        "content": "<p>Hmm there's this comment that may contradict our hypothesis about the <code>-&gt; &amp;str</code> case: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/resolve_lifetime.rs#L2112\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/resolve_lifetime.rs#L2112\">https://github.com/rust-lang/rust/blob/master/src/librustc/middle/resolve_lifetime.rs#L2112</a></p>",
        "id": 150930634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Everything else (only closures?) doesn&#39;t</span>\n<span class=\"c1\">// actually enjoy elision in return types.</span>\n</pre></div>",
        "id": 150930659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019231
    },
    {
        "content": "<p>we certainly <em>used</em> to use elision</p>",
        "id": 150930727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019263
    },
    {
        "content": "<p>time to go read the lifetime elision RFC(s).</p>",
        "id": 150930738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019269
    },
    {
        "content": "<p>I'm not sure what that \"only closures?\" would mean</p>",
        "id": 150930741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019271
    },
    {
        "content": "<p>oh</p>",
        "id": 150930750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019277
    },
    {
        "content": "<p>its right before a catch-all</p>",
        "id": 150930758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019282
    },
    {
        "content": "<p>but I think it means \"also closures\" =)</p>",
        "id": 150930767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019286
    },
    {
        "content": "<p>regardless I think that all fn sigs currently use elision</p>",
        "id": 150930778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019300
    },
    {
        "content": "<p>as in, I think the author thought the only remaining case that could occur in the catch-all was closures.</p>",
        "id": 150930782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019303
    },
    {
        "content": "<p>and I cannot imagine why closures would be exempted</p>",
        "id": 150930784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019305
    },
    {
        "content": "<p>I see</p>",
        "id": 150930804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019328
    },
    {
        "content": "<p>well, I consider that comment wrong, but it's worth digging a bit more</p>",
        "id": 150930810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544019336
    },
    {
        "content": "<p>the comment seems to correctly reflect what the code does.</p>",
        "id": 150930901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019390
    },
    {
        "content": "<p>but it may be trivial to fix this. :)</p>",
        "id": 150930904,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019395
    },
    {
        "content": "<p>(as in, change the code and bring comment in sync with revised expectations)</p>",
        "id": 150930922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544019412
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444805972\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444805972\">This</a> is a bummer: applying lifetime elision to <code>-&gt; &amp;T</code> on closure expressions might break code. (But maybe I can make my patch a bit smarter here, and only try to handle the return type if the closure expressions also had argument types...?)</p>",
        "id": 150993462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544088495
    },
    {
        "content": "<p>I was wondering about those examples</p>",
        "id": 151007301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104260
    },
    {
        "content": "<p>er, about examples like that</p>",
        "id": 151007314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104276
    },
    {
        "content": "<p>that is, after signing off yesterday I got to thinking about all the edge cases</p>",
        "id": 151007326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104297
    },
    {
        "content": "<p>right now, <em>if we have an expected type</em>, something like <code>|x: &amp;str, y: &amp;str|</code> is setup so that the regions kind of 'don't matter'</p>",
        "id": 151007346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104321
    },
    {
        "content": "<p>e.g., the expected signature might be <code>fn(&amp;'a str, &amp;'a str)</code></p>",
        "id": 151007396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104344
    },
    {
        "content": "<p>but <code>x: &amp;str, y: &amp;str</code> is \"short for\" <code>&amp;'a str, &amp;'b str</code>, in some sense</p>",
        "id": 151007412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104365
    },
    {
        "content": "<p>basically we are saying something like: there exists a subst S such that <code>S[provided-signature] = expected-signature</code></p>",
        "id": 151007424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104387
    },
    {
        "content": "<p>applying elision makes this break in some cases</p>",
        "id": 151007428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104394
    },
    {
        "content": "<p>e.g., <code>|&amp;str| -&gt; &amp;str</code> -- or the example you gave, of course</p>",
        "id": 151007432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104400
    },
    {
        "content": "<p>I am trying to reason in my head if there is an interpretation that is compatible with both</p>",
        "id": 151007444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104416
    },
    {
        "content": "<p>e.g., applying elision -- but <em>only</em> if there is no expected type? feels like a mess</p>",
        "id": 151007454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104430
    },
    {
        "content": "<p>so maybe this answers my question? it still feels sort of wrong that elision doesn't trigger though</p>",
        "id": 151007466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104440
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444878591\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444878591\">just summarized this in the issue</a>)</p>",
        "id": 151007693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104613
    },
    {
        "content": "<p>In any case this is definitely starting to feel like \"any change here will need an RFC\" ...</p>",
        "id": 151007951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544104768
    },
    {
        "content": "<p>well, not <em>any</em> change</p>",
        "id": 151007965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544104785
    },
    {
        "content": "<p>e.g. if we can hold off on fixing this and instead push on having NLL infer when to put references to bound regions (right? that's what you had mused about yesterday I think?)</p>",
        "id": 151008042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544104823
    },
    {
        "content": "<p>then that has potential to be very much a DWIM solution that <em>might</em> bypass an RFC. Or it might be even <em>more</em> in need of an RFC. :)</p>",
        "id": 151008071,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544104856
    },
    {
        "content": "<blockquote>\n<p>(<a href=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444878591\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444878591\">just summarized this in the issue</a>)</p>\n</blockquote>\n<p>In that comment, you meant to write <code>for &lt;'a, 'b&gt; fn (&amp;'a str, &amp;'b str)</code>, not <code>for &lt;'a&gt; fn (&amp;'a str, &amp;'b str)</code>, right?</p>",
        "id": 151008510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 151008511,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105191
    },
    {
        "content": "<p>probably</p>",
        "id": 151008522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105207
    },
    {
        "content": "<p>yes</p>",
        "id": 151008523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105208
    },
    {
        "content": "<blockquote>\n<p>In any case this is definitely starting to feel like \"any change here will need an RFC\" ...</p>\n</blockquote>\n<p>it does feel like an area where a \"quasi-retroactive\" RFC might be nice</p>",
        "id": 151008536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105225
    },
    {
        "content": "<p>i.e., let's lay out a proposed design, document how it aligns with current behavior, document where it diverges and the expected impact</p>",
        "id": 151008547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105244
    },
    {
        "content": "<p>I feel like we should be doing this gradually for lots of parts of the language</p>",
        "id": 151008555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105256
    },
    {
        "content": "<p>might be a good \"proving ground\" for such a concept</p>",
        "id": 151008561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105261
    },
    {
        "content": "<p>I do wonder whether closures are sufficiently different from <code>fn</code> items that the standard arguments for the existing lifetime elision rules simply don't hold up</p>",
        "id": 151008616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105304
    },
    {
        "content": "<p>i.e the ability to return free variables that use free regions</p>",
        "id": 151008621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105323
    },
    {
        "content": "<p>so</p>",
        "id": 151008739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105403
    },
    {
        "content": "<p>another nice thing we should address</p>",
        "id": 151008751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105410
    },
    {
        "content": "<p>is the ability to specify explicit signatures</p>",
        "id": 151008764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105423
    },
    {
        "content": "<p>with named lifetimes</p>",
        "id": 151008767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105427
    },
    {
        "content": "<p>maybe the answer would then be that elision applies in that case</p>",
        "id": 151008773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105434
    },
    {
        "content": "<p>where you are using the \"fully explicit form\"</p>",
        "id": 151008778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105439
    },
    {
        "content": "<p>and maybe we just deprecate return type annotations outside of that form</p>",
        "id": 151008782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105446
    },
    {
        "content": "<p>and hence sidestep the issue</p>",
        "id": 151008787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105448
    },
    {
        "content": "<p>something like that</p>",
        "id": 151008788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105449
    },
    {
        "content": "<p>I don't know what this form would <em>look like</em></p>",
        "id": 151008805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105465
    },
    {
        "content": "<blockquote>\n<p>with named lifetimes</p>\n</blockquote>\n<p>is this the same as what I <a href=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444880648\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56537#issuecomment-444880648\">recently wrote</a>?</p>",
        "id": 151008819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105483
    },
    {
        "content": "<p>no, I think you mean something more subtle.</p>",
        "id": 151008850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105517
    },
    {
        "content": "<p>well what you wrote is along similar lines</p>",
        "id": 151008982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105633
    },
    {
        "content": "<blockquote>\n<p>I do wonder whether closures are sufficiently different from <code>fn</code> items that the standard arguments for the existing lifetime elision rules simply don't hold up</p>\n</blockquote>\n<p>it may be true, but there is a strong sort of 'consistency argument' going on too. I don't know how to square those things.</p>",
        "id": 151009060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if I understood what you wrote, you're saying \"maybe we should just give people the ability to use named lifetimes and then have them use it instead of elision\"</p>",
        "id": 151009081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105710
    },
    {
        "content": "<p>right?</p>",
        "id": 151009085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105712
    },
    {
        "content": "<p>yes, the ability to name the lifetime parameters on a closure</p>",
        "id": 151009102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105745
    },
    {
        "content": "<p>I could imagine e.g. deprecating closure return type annotations that elide lifetimes</p>",
        "id": 151009105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105750
    },
    {
        "content": "<p>(if they don't follow elision)</p>",
        "id": 151009108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105759
    },
    {
        "content": "<p>and thus guiding people towards explicit named lifetimes, as you suggested</p>",
        "id": 151009158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105775
    },
    {
        "content": "<p>Right. I don't know what we'd do about elision after that point.</p>",
        "id": 151009174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105793
    },
    {
        "content": "<p>I was hoping for some syntax that would also give you explicit, but I have no idea what that would be</p>",
        "id": 151009175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105794
    },
    {
        "content": "<p>I don't understand what you mean by \"would also give you explicit\"</p>",
        "id": 151009197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105813
    },
    {
        "content": "<p>maybe I need to rephrase: where does <code>for &lt;'r1, 'r2&gt; |a1: &amp;'r1 _, a2: TyCtor&lt;'r2, _&gt;| -&gt; &amp;'r2 _ { ... }</code> fall down?</p>",
        "id": 151009332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105899
    },
    {
        "content": "<p>because i have been assuming that gives you all the explicitness you might need</p>",
        "id": 151009362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105916
    },
    {
        "content": "<p>(modulo potentially having to plug in more concrete type information into the <code>_</code>'s that I put into that example.)</p>",
        "id": 151009389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544105948
    },
    {
        "content": "<blockquote>\n<p>because i have been assuming that gives you all the explicitness you might need</p>\n</blockquote>\n<p>it does</p>",
        "id": 151009525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106088
    },
    {
        "content": "<p>my concern is just that <code>&amp;str -&gt; &amp;str</code> in closures behaves differently than <strong>everywhere else</strong></p>",
        "id": 151009539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106110
    },
    {
        "content": "<p>like, any other place that a <code>-&gt;</code> appears</p>",
        "id": 151009545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106116
    },
    {
        "content": "<p>so I would like that to be deprecated, if it's not going to mean the same thing</p>",
        "id": 151009599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106139
    },
    {
        "content": "<p>right. But my claim is that closures are the only place where the <code>-&gt; &amp;str</code> can have a useful lifetime attached to it that <em>isn't</em> the argument's</p>",
        "id": 151009604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106146
    },
    {
        "content": "<p>Ah okay</p>",
        "id": 151009609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106151
    },
    {
        "content": "<p>that's not true</p>",
        "id": 151009611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106154
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151009623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106171
    },
    {
        "content": "<p>okay yes methods are the counter example.</p>",
        "id": 151009629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106178
    },
    {
        "content": "<p>this is of course what closures are desugaring to</p>",
        "id": 151009642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106188
    },
    {
        "content": "<p>in some sense</p>",
        "id": 151009651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106199
    },
    {
        "content": "<p>not <em>literally</em> that, I just mean \"methods\"</p>",
        "id": 151009668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106220
    },
    {
        "content": "<p>right</p>",
        "id": 151009674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106229
    },
    {
        "content": "<p>\"that refer to lifetimes found in the input types of the trait\" :)</p>",
        "id": 151009677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106231
    },
    {
        "content": "<p>anyway what I was imaging ws something like this:</p>",
        "id": 151009741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106258
    },
    {
        "content": "<p>you could <em>imagine</em> saying</p>",
        "id": 151009745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106263
    },
    {
        "content": "<p>well hold up</p>",
        "id": 151009768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106280
    },
    {
        "content": "<p>so</p>",
        "id": 151009772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106283
    },
    {
        "content": "<p>one bit of complexity -- as I wrote -- is that right now</p>",
        "id": 151009788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106291
    },
    {
        "content": "<p>we have to reconcile the \"expected signature\" and the \"provided signature\"</p>",
        "id": 151009789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106298
    },
    {
        "content": "<p>and we currently give \"primacy\" to the expected signature if it is available</p>",
        "id": 151009803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106308
    },
    {
        "content": "<p>(make sense?)</p>",
        "id": 151009807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106314
    },
    {
        "content": "<p>what I was imagining was: maybe there is some syntax that lets you provide the full, explicit signature of the closure (no <code>_</code> or inference)</p>",
        "id": 151009820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106334
    },
    {
        "content": "<p>and that if you use <em>this</em> syntax, you get elision</p>",
        "id": 151009825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106340
    },
    {
        "content": "<p>but I don't know what that syntax is</p>",
        "id": 151009830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106346
    },
    {
        "content": "<p>i think so... though I had been assuming that we still enforce some notion of compatibility between the expected sig and the provided sig</p>",
        "id": 151009831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106347
    },
    {
        "content": "<p>yes we enforce that the provided sig is an \"instance\" of the expected sig</p>",
        "id": 151009841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106360
    },
    {
        "content": "<p>okay yes that the substitution you had talked about, okay</p>",
        "id": 151009888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106376
    },
    {
        "content": "<p>as a (horrible) strawperson, imagine</p>\n<div class=\"codehilite\"><pre><span></span>|x| as fn(&amp;str) -&gt; &amp;str { x }\n</pre></div>",
        "id": 151009913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106404
    },
    {
        "content": "<blockquote>\n<p>what I was imagining was: maybe there is some syntax that lets you provide the full, explicit signature of the closure (no _ or inference)</p>\n</blockquote>\n<p>this phrasing continues to be confusing. the crucial word its missing, I think, is you want some <strong>new</strong> syntax.</p>",
        "id": 151009935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106430
    },
    {
        "content": "<p>anyway what you suggested (plus maybe deprecation) maybe ultimately a better plan</p>",
        "id": 151009942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106437
    },
    {
        "content": "<p>ah, yes, some <strong>new</strong> syntax :)</p>",
        "id": 151009952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106451
    },
    {
        "content": "<p>i.e. one can encode explicit signature using existing syntax, but our whole problem is that we have a given semantics for how elision operates on (or rather, ignores) that syntax.</p>",
        "id": 151009963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106467
    },
    {
        "content": "<p>well that and</p>",
        "id": 151009969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106476
    },
    {
        "content": "<p>the current syntax can be incomplete</p>",
        "id": 151010015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106484
    },
    {
        "content": "<p>it permits you to annotate one parameter and not the other, etc</p>",
        "id": 151010023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106495
    },
    {
        "content": "<p>which gets us into trouble and makes it hard to see how to apply elision</p>",
        "id": 151010040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106512
    },
    {
        "content": "<p>yes, but I figured it was \"obvious\" that one could restrict one's attention to only when all annotations are provided.</p>",
        "id": 151010053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106521
    },
    {
        "content": "<p>e.g., your example of <code>|x| -&gt; &amp;str { .. }</code></p>",
        "id": 151010055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106523
    },
    {
        "content": "<p>well, that's not obvious to me :)</p>",
        "id": 151010066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106534
    },
    {
        "content": "<p>i.e., does elision start to apply when \"all annotations\" are provided?</p>",
        "id": 151010084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106547
    },
    {
        "content": "<p>i.e. <code>|x: _| -&gt; &amp;str { ... }</code> would not have elision applied</p>",
        "id": 151010085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106547
    },
    {
        "content": "<p>but <code>|x: &amp;'_ str| -&gt; &amp;str { ... }</code> would.</p>",
        "id": 151010101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106566
    },
    {
        "content": "<p>right, we could go that way</p>",
        "id": 151010104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106573
    },
    {
        "content": "<p>it seems a bit surprising</p>",
        "id": 151010107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106580
    },
    {
        "content": "<p>but I don't know that there's a perfect answer here</p>",
        "id": 151010120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106588
    },
    {
        "content": "<p>yes, it would be surprising</p>",
        "id": 151010126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106591
    },
    {
        "content": "<p>but then again</p>",
        "id": 151010128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106593
    },
    {
        "content": "<p>that said, I think that explicit return type annot are unusual</p>",
        "id": 151010136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106598
    },
    {
        "content": "<p>I was surprised that you expected the introduction of <code>-&gt; &amp;str</code> to make a difference.</p>",
        "id": 151010190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106605
    },
    {
        "content": "<p>hence my thought \"maybe we can just deprecate elision in that position\"</p>",
        "id": 151010201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106606
    },
    {
        "content": "<p>and instead require you to use an explicit syntax</p>",
        "id": 151010215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106621
    },
    {
        "content": "<blockquote>\n<p>I was surprised that you expected the introduction of <code>-&gt; &amp;str</code> to make a difference.</p>\n</blockquote>\n<p>you mean way back in the original example?</p>",
        "id": 151010236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106643
    },
    {
        "content": "<p>as in, if you have a return type, <code>'_</code> (explicit or implicit) is unacceptable?</p>",
        "id": 151010237,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106643
    },
    {
        "content": "<p>right</p>",
        "id": 151010242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106651
    },
    {
        "content": "<p>I mean it returns its current meaning, presumably, but since that is different from any other return type</p>",
        "id": 151010260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106671
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I was surprised that you expected the introduction of <code>-&gt; &amp;str</code> to make a difference.</p>\n</blockquote>\n<p>you mean way back in the original example?</p>\n</blockquote>\n<p>yes. That is my way of just saying we already have a \"surprise budget\"</p>",
        "id": 151010262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106672
    },
    {
        "content": "<p>well</p>",
        "id": 151010266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106677
    },
    {
        "content": "<p>I view that as a \"quasi-bug\"</p>",
        "id": 151010268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106680
    },
    {
        "content": "<p>i.e., when you have <code>-&gt; _</code> in a closure, we presently require a type that is \"early bound\"</p>",
        "id": 151010284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106706
    },
    {
        "content": "<p>but I think it would be better if we could infer a type that may refer to argument lifetimes</p>",
        "id": 151010295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106720
    },
    {
        "content": "<p>(in which case maybe <code>-&gt; &amp;str</code> <em>would</em> be ok?)</p>",
        "id": 151010347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106737
    },
    {
        "content": "<p>.... okay and that would bring us back to the POV that I was trying to espouse</p>",
        "id": 151010353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106741
    },
    {
        "content": "<p>when we were speaking yesterday...</p>",
        "id": 151010356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106745
    },
    {
        "content": "<p>er by which I mean: maybe <code>-&gt; &amp;str</code> would no longer be surprising, because it works \"sort of like\" elision, even though in fact it's more general. By \"sort of like\" I mean that: we are checking that the signature you gave is \"an instance\" of what was needed, and so if elision (<code>&amp;'a str -&gt; &amp;'a str</code>) was needed, it would be an instance of that</p>",
        "id": 151010390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106791
    },
    {
        "content": "<p>huh</p>",
        "id": 151010480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106865
    },
    {
        "content": "<p>so rather than uniformly applying elision in ... syntactic (?) manner ...</p>",
        "id": 151010498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106887
    },
    {
        "content": "<p>we would potentially check different instantiations of the generalized signature, until we found something that worked?</p>",
        "id": 151010534,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106925
    },
    {
        "content": "<p>no</p>",
        "id": 151010556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106955
    },
    {
        "content": "<p>I mean maybe yes but that mechanism suggests some sort of \"search\"</p>",
        "id": 151010605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106967
    },
    {
        "content": "<p>That's why I said \"huh\"</p>",
        "id": 151010609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106975
    },
    {
        "content": "<p>Adding \"more\" search to rustc seems bad. :)</p>",
        "id": 151010622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544106989
    },
    {
        "content": "<p>I am just saying that if our inference was able to do (the equivalent of) \"let generalization\"</p>",
        "id": 151010637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107008
    },
    {
        "content": "<p>it would make <code>|x: &amp;str| -&gt; &amp;str { x }</code> infer to an elision signature</p>",
        "id": 151010666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107035
    },
    {
        "content": "<p>okay that might be an analogy I could understand</p>",
        "id": 151010668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107037
    },
    {
        "content": "<p>even though it would <em>also</em> accept <code>|x: &amp;str, y: &amp;str| -&gt; &amp;str { x }</code></p>",
        "id": 151010687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107046
    },
    {
        "content": "<p>which elision would not</p>",
        "id": 151010690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107048
    },
    {
        "content": "<p>(that would be an error outside of a closure)</p>",
        "id": 151010701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107064
    },
    {
        "content": "<p>mmm</p>",
        "id": 151010757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107085
    },
    {
        "content": "<p>(all of this is assuming no \"expected signature\" of course)</p>",
        "id": 151010761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107092
    },
    {
        "content": "<p>maybe revise those examples to put <code>...</code> in the body</p>",
        "id": 151010763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107094
    },
    {
        "content": "<p>no</p>",
        "id": 151010766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107097
    },
    {
        "content": "<p>the bdoy is important</p>",
        "id": 151010768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107099
    },
    {
        "content": "<p>that is, I want to be clear about when our rules use the body text</p>",
        "id": 151010772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107104
    },
    {
        "content": "<p>the point is</p>",
        "id": 151010777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107114
    },
    {
        "content": "<p>we would type-check the body</p>",
        "id": 151010782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107117
    },
    {
        "content": "<p>Okay so then you are willing to use the body text in this case</p>",
        "id": 151010783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107118
    },
    {
        "content": "<p>we would observe the resulting constraints</p>",
        "id": 151010784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107120
    },
    {
        "content": "<p>we would observe that the return type lifetime only flows from the input <code>x</code></p>",
        "id": 151010792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107132
    },
    {
        "content": "<p>and hence infer <code>for&lt;'a&gt; (&amp;'a u32, &amp;'b u32) -&gt; &amp;'a u32</code> as the signature of the closure</p>",
        "id": 151010804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107144
    },
    {
        "content": "<p>(this is how \"let generalization\" works)</p>",
        "id": 151010812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107148
    },
    {
        "content": "<p>essentially once you've type-checked the closure body, you examine the constraints that arose from that</p>",
        "id": 151010818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107163
    },
    {
        "content": "<p>(in the case of ML, you do it at the point of <code>let func arg = body</code>, hence the term \"let generalization\")</p>",
        "id": 151010834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107189
    },
    {
        "content": "<p>but how far does this go? what does <code>|x: &amp;str, y: &amp;str| -&gt; &amp;str { if TEST { x } else { y } }</code> do in your scheme?</p>",
        "id": 151010883,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107209
    },
    {
        "content": "<p>it infers <code>x: &amp;'a str, y: &amp;'a str -&gt; &amp;'a str</code></p>",
        "id": 151010893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107223
    },
    {
        "content": "<p>presumably</p>",
        "id": 151010896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107229
    },
    {
        "content": "<p>I don't know how to do this, mind you, I just feel like we \"should\" be able to do it, at least some of the time</p>",
        "id": 151010904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107248
    },
    {
        "content": "<p>that is what we would need to accept the original code I think</p>",
        "id": 151010920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107257
    },
    {
        "content": "<p>okay</p>",
        "id": 151010927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107261
    },
    {
        "content": "<p>the only reason it's complicated is subtyping I guess</p>",
        "id": 151010941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107279
    },
    {
        "content": "<p>so e.g. your example probably <em>really</em> infers</p>",
        "id": 151010951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107290
    },
    {
        "content": "<p><code>for&lt;'a, 'b, 'c&gt; (x: &amp;'a str, y: &amp;'b str) -&gt; &amp;'c str where 'a: 'c, 'b: 'c</code></p>",
        "id": 151010976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107316
    },
    {
        "content": "<p>or at least <em>wants to</em></p>",
        "id": 151010978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107318
    },
    {
        "content": "<p>but I don't know if it can because of how the closure trait is setup...</p>",
        "id": 151011022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107325
    },
    {
        "content": "<p>er, I think we could</p>",
        "id": 151011048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107346
    },
    {
        "content": "<p>those where clauses conceptually go on the <code>impl&lt;'a, 'b&gt; Fn&lt;(&amp;'a str, &amp;'b str)&gt; for ClosureType</code></p>",
        "id": 151011071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107372
    },
    {
        "content": "<p>well, the challenge is that <code>'c</code> can't appear in the <code>type Output</code> since it does not appear in an input type</p>",
        "id": 151011084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107385
    },
    {
        "content": "<p>anyway, this is non-trivial, clearly :)</p>",
        "id": 151011101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107400
    },
    {
        "content": "<p><code>for &lt;'a, 'b&gt; (x: &amp;'a str, y: &amp;'b str) -&gt; &amp;'(a \\isect b) str</code></p>",
        "id": 151011198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107473
    },
    {
        "content": "<p>because, you know, Intersection types are so simple</p>",
        "id": 151011232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544107501
    },
    {
        "content": "<p>right..</p>",
        "id": 151011328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107563
    },
    {
        "content": "<p>I was thinking about that cool paper, I forget the authors, where they extended HM inference with subtyping by tracking upper/lower bounds, then modeled types as finite state machines and applied finite state machine minimization techniques to try and keep the type size under control</p>",
        "id": 151011370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107601
    },
    {
        "content": "<p>I've been meaning to re-implement that scheme in my spare time at some point</p>",
        "id": 151011385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107608
    },
    {
        "content": "<p>so I can actually understand it</p>",
        "id": 151011389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107611
    },
    {
        "content": "<p>\"copious spare time\" is perhaps the right phrase :P</p>",
        "id": 151011394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107617
    }
]