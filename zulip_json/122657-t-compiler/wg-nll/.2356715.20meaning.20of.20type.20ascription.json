[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so the complication with <code>expr: T</code> and the meaning there had to do with <code>ref mut</code> bindings and the potential unsoundness around them. Overall I would say that this effort to move to MIR is forcing us to take a good, hard look at what our <code>: T</code> ascriptions mean in general, and it feels like the answer is \"it's complicated\".</p>\n<p>Anyway the bug we were worried about was something like</p>\n<div class=\"codehilite\"><pre><span></span>let ref mut x: T = y;\n</pre></div>\n\n\n<p>this had the semantics of making <code>x</code> be an <code>&amp;mut T</code> that refers to <code>y</code> -- but if we have that the type <code>T_y</code> or <code>y</code> is <em>some subtype</em> of <code>T</code>, that's unsound, for the standard variance reasons.</p>",
        "id": 152030317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056459
    },
    {
        "content": "<p>same would presumably be true of <code>let ref mut x = y: T</code></p>",
        "id": 152030333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056476
    },
    {
        "content": "<p>the current rule around the <code>: T</code> ascriptions is that \"if the pattern includes a ref binding, then it forces strict equality\", and we .. probably? .. need to do something similar around <code>y: T</code> expressions --</p>",
        "id": 152030368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056517
    },
    {
        "content": "<p>I guess my Q is</p>",
        "id": 152030431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056536
    },
    {
        "content": "<p>that is, we could either (a) not consider them a place expression or (b) distinguish between the effect of a <code>:T</code> ascription in the context of a place (borrow) vs a use</p>",
        "id": 152030435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056538
    },
    {
        "content": "<p>would it be so bad to use strict equality everywhere?</p>",
        "id": 152030442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056548
    },
    {
        "content": "<p>well</p>",
        "id": 152030446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056555
    },
    {
        "content": "<p>it'd be backwards incompatible</p>",
        "id": 152030455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056559
    },
    {
        "content": "<p>in a pretty major way</p>",
        "id": 152030470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056574
    },
    {
        "content": "<p>(and rely on e.g. the moves/assignments  to do the subtyping)</p>",
        "id": 152030475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056578
    },
    {
        "content": "<p>right now, <code>let x: T = ...</code> is more than subtyping -- it applies <em>coercions</em></p>",
        "id": 152030483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056585
    },
    {
        "content": "<p>sure, but we get to maybe couple it with NLL migration</p>",
        "id": 152030489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056590
    },
    {
        "content": "<p>I am not as worried about the subtyping thing as the coercions</p>",
        "id": 152030504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056606
    },
    {
        "content": "<p>e.g., something like this</p>\n<div class=\"codehilite\"><pre><span></span>let x: &amp;[u32] = &amp;[1, 2, 3];\n</pre></div>\n\n\n<p>coerces from the type <code>&amp;[u32; 3]</code> to <code>&amp;[u32]</code></p>",
        "id": 152030527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056630
    },
    {
        "content": "<p>but maybe you mean something.. <em>less</em> than that</p>",
        "id": 152030602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056666
    },
    {
        "content": "<p>the stuff I'm talking about, I think, is just about whether to use <code>Variance::Covariant</code> or <code>Variance::Invariant</code> at certain points</p>",
        "id": 152030683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056758
    },
    {
        "content": "<p>I guess I'm not clear on how that effects coercions. I would have thought it only affects <del>lifetime</del> region inference/checking.</p>",
        "id": 152030737,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056786
    },
    {
        "content": "<p>if we're only talking at the MIR locations</p>",
        "id": 152030751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056803
    },
    {
        "content": "<p>then I agree</p>",
        "id": 152030753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056804
    },
    {
        "content": "<p>but I guess I just want to fit it into my \"overall view\" of the type system</p>",
        "id": 152030775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056816
    },
    {
        "content": "<p>Okay, yeah, when I said \"everywhere\", I guess I meant \"everywhere in MIR\"</p>",
        "id": 152030778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056818
    },
    {
        "content": "<p>but not even that</p>",
        "id": 152030784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056824
    },
    {
        "content": "<p>\"on every type-ascription in the MIR\"</p>",
        "id": 152030796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056832
    },
    {
        "content": "<p>I'm also not entirely clear on the motivation</p>",
        "id": 152030805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056843
    },
    {
        "content": "<p>well right now</p>",
        "id": 152030814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056854
    },
    {
        "content": "<p>when I write <code>let x: T = RHS</code></p>",
        "id": 152030824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056867
    },
    {
        "content": "<p>is that meant to be saying that <code>x</code> has some type <code>T'</code> that is a subtype of <code>T</code></p>",
        "id": 152030873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056884
    },
    {
        "content": "<p>or that <code>x</code> has type <code>T</code> exactly</p>",
        "id": 152030890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056894
    },
    {
        "content": "<p>(I'm not even sure myself, right now...)</p>",
        "id": 152030905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056904
    },
    {
        "content": "<p>but the whole thing behind <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">#47184</a> was that we needed to respect user type annotations</p>",
        "id": 152030972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056965
    },
    {
        "content": "<blockquote>\n<p>or that <code>x</code> has type <code>T</code> exactly</p>\n</blockquote>\n<p>there's another question too, right?</p>",
        "id": 152030986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056989
    },
    {
        "content": "<p>and so I want to pin down what someone writing <code>unsafe</code> code can assume</p>",
        "id": 152030987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545056993
    },
    {
        "content": "<p>\"what is the type of the <code>RHS</code>\"</p>",
        "id": 152030994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545056999
    },
    {
        "content": "<p>yep</p>",
        "id": 152031038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057004
    },
    {
        "content": "<p>i.e., what you are proposing seems to have nothing to do with the type of  <code>x</code></p>",
        "id": 152031046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057006
    },
    {
        "content": "<p>and everything to do with <code>T_rhs</code></p>",
        "id": 152031054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057016
    },
    {
        "content": "<p>well</p>",
        "id": 152031062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057021
    },
    {
        "content": "<p>I was starting from my mental model</p>",
        "id": 152031067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057027
    },
    {
        "content": "<p>my \"intuitive feeling\" is that:</p>\n<ul>\n<li><code>T</code> is meant to bound the type <code>T_x</code> of <code>x</code> <em>exactly</em> (\"invariant\")</li>\n<li><code>T</code> is meant to be a supertype of <code>T_rhs</code> (or even a coercion target)</li>\n</ul>",
        "id": 152031083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057044
    },
    {
        "content": "<p>of why we are even passing <code>Variance::Covariant</code> at the point in the code that I identified in <a href=\"https://github.com/rust-lang/rust/issues/56715\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56715\">#56715</a></p>",
        "id": 152031087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057048
    },
    {
        "content": "<p>but for more complex patterns, the first part gets tricky</p>",
        "id": 152031124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057070
    },
    {
        "content": "<p>and that's why <em>I</em> was focusing on <code>let x: T</code></p>",
        "id": 152031126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057073
    },
    {
        "content": "<p><em>and</em> for <code>ref</code> bindings and \"place expressions\" on the right-hand-side, the second part is tricky (we actually forbid coercions here I think)</p>",
        "id": 152031141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057085
    },
    {
        "content": "<p>so my simple, \"intuitive\" formulation doesn't really capture all of it</p>",
        "id": 152031212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057137
    },
    {
        "content": "<blockquote>\n<p>of why we are even passing <code>Variance::Covariant</code> at the point in the code that I identified in <a href=\"https://github.com/rust-lang/rust/issues/56715\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56715\">#56715</a></p>\n</blockquote>\n<p>let me go double check which code you are referring to )</p>",
        "id": 152031322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057232
    },
    {
        "content": "<p>ok, so, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if I'm not mistaken we are talking more about the relationship of <code>T</code> to <code>T_rhs</code> than the type of <code>x</code></p>",
        "id": 152031620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057463
    },
    {
        "content": "<p>It was introduced <a href=\"https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1#diff-ef9c98f22bf95e3bda12c849d5550cedR1191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1#diff-ef9c98f22bf95e3bda12c849d5550cedR1191\">here</a>; there wasn't much discussion at the time. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152031633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057471
    },
    {
        "content": "<p>Hmm maybe you are right, let me double check how <code>ascribe_types</code> is called.</p>",
        "id": 152031701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057509
    },
    {
        "content": "<blockquote>\n<p>It was introduced <a href=\"https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1#diff-ef9c98f22bf95e3bda12c849d5550cedR1191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1#diff-ef9c98f22bf95e3bda12c849d5550cedR1191\">here</a>; there wasn't much discussion at the time. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>yeah, I mean, I wrote that code initially, I remember that</p>",
        "id": 152031711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057532
    },
    {
        "content": "<p>so the calls to <code>ascribe_types</code> are asserting the candidate ascriptions for the relevant places</p>",
        "id": 152031749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057586
    },
    {
        "content": "<p>as we descend the pattern</p>",
        "id": 152031753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057591
    },
    {
        "content": "<p>Which ... I still would think would be asserting a statement about <code>x</code></p>",
        "id": 152031813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057607
    },
    {
        "content": "<p>and not a relationship between <code>T</code> and <code>T_rhs</code> ...</p>",
        "id": 152031820,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057617
    },
    {
        "content": "<p>they are putting in <code>match_pair.place</code></p>",
        "id": 152031832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057627
    },
    {
        "content": "<p>one sec</p>",
        "id": 152031869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057649
    },
    {
        "content": "<p>so I think <a href=\"https://github.com/rust-lang/rust/blob/3a3121337122637fa11f0e5d42aec67551e8c125/src/librustc_mir/build/matches/simplify.rs#L67-L71\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3a3121337122637fa11f0e5d42aec67551e8c125/src/librustc_mir/build/matches/simplify.rs#L67-L71\">this is where the <code>ascriptions</code> vector in <code>Candidate</code> is modified</a></p>",
        "id": 152031954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057688
    },
    {
        "content": "<p>by this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">candidate</span><span class=\"p\">.</span><span class=\"n\">ascriptions</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Ascription</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">span</span>: <span class=\"nc\">user_ty_span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">user_ty</span>: <span class=\"nc\">user_ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">source</span>: <span class=\"nc\">match_pair</span><span class=\"p\">.</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152031977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057713
    },
    {
        "content": "<p>okay now I agree with you</p>",
        "id": 152031978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057714
    },
    {
        "content": "<p>ok</p>",
        "id": 152031982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057717
    },
    {
        "content": "<p>and I was miscasting the purpose of that code then</p>",
        "id": 152032022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057723
    },
    {
        "content": "<p>which</p>",
        "id": 152032028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057726
    },
    {
        "content": "<p>makes it all make more sense in terms of the behavior I was witnessing</p>",
        "id": 152032039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057736
    },
    {
        "content": "<p>when I made the change I described (of sed -e s/Covariant/Invariant there)</p>",
        "id": 152032052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057753
    },
    {
        "content": "<p>in terms of it only really affecting <code>let _: T = RHS</code></p>",
        "id": 152032062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057769
    },
    {
        "content": "<p>yeah</p>",
        "id": 152032123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057822
    },
    {
        "content": "<p>I contend that it is a bit inconsistent to have permit coercions from <code>T_rhs</code> to <code>T</code> but not subtyping</p>",
        "id": 152032181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545057846
    },
    {
        "content": "<p>Okay yes</p>",
        "id": 152032185,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057856
    },
    {
        "content": "<p>I agree with that.</p>",
        "id": 152032191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545057864
    },
    {
        "content": "<p>just to double-check, your assertion is that <code>let _: T = RHS</code> can and will coerce when necessary, right?</p>",
        "id": 152032587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058172
    },
    {
        "content": "<p>(i.e. I don't need to bind to an actual variable like <code>_x</code> in order to observe coercion occurring?)</p>",
        "id": 152032611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058195
    },
    {
        "content": "<p>I guess I could/should test this readily enough.</p>",
        "id": 152032672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058215
    },
    {
        "content": "<blockquote>\n<p>just to double-check, your assertion is that <code>let _: T = RHS</code> can and will coerce when necessary, right?</p>\n</blockquote>\n<p>yes I believe so</p>",
        "id": 152032685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545058230
    },
    {
        "content": "<p>as there is no <code>ref</code> (syntactically) appearing in the LHS</p>",
        "id": 152032723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545058264
    },
    {
        "content": "<p>super-interesting</p>",
        "id": 152032834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058326
    },
    {
        "content": "<p>since I sometimes think of <code>_</code> as being \"like\" a <code>ref</code></p>",
        "id": 152032847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058335
    },
    {
        "content": "<p>in that it, on its own at least, will not cause a move</p>",
        "id": 152032861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058346
    },
    {
        "content": "<p>but I believe I understand the basis for the design you present</p>",
        "id": 152032897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058368
    },
    {
        "content": "<p>since the worrisome semantics would not be exposed by <code>_</code>; only by <code>ref</code> (or just <code>ref mut</code> maybe)</p>",
        "id": 152032929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058390
    },
    {
        "content": "<p>(actually now I don't know how I'd observe coercion within the program itself without using a binding somewhere in the LHS...)</p>",
        "id": 152033316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545058646
    },
    {
        "content": "<p>/me reads backlog :P</p>",
        "id": 152033935,
        "sender_full_name": "centril",
        "timestamp": 1545059170
    },
    {
        "content": "<p>My mental model fits with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s as well</p>",
        "id": 152035631,
        "sender_full_name": "centril",
        "timestamp": 1545060424
    },
    {
        "content": "<p>yeah at this point I've closed the issue</p>",
        "id": 152035675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  if my RFC is unclear and you think some fleshing out is needed I take PRs against my branch ;)</p>",
        "id": 152035772,
        "sender_full_name": "centril",
        "timestamp": 1545060538
    },
    {
        "content": "<p>We'll eventually need to deal with how type ascriptions on expressions behave</p>",
        "id": 152035774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060540
    },
    {
        "content": "<p>(in terms of whether they need to be Covariant rather than Invariant in more cases)</p>",
        "id": 152035800,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060558
    },
    {
        "content": "<p>but for now all is fine with me.</p>",
        "id": 152035803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545060562
    },
    {
        "content": "<p>aight; we can do follow up RFCs</p>",
        "id": 152035815,
        "sender_full_name": "centril",
        "timestamp": 1545060572
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 152044550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067582
    }
]