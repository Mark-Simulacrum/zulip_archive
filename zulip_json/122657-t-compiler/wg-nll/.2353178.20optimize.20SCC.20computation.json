[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is going to check this out</p>",
        "id": 131120006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I understand the task now. So <code>outgoing_edges()</code> takes a region and returns an iterator over all of the regions it outlives. If the region is <code>'static</code> then of course it must outlive all regions by definition. So in this case, the iterator should loop over every region and return all of them. (Of course this only applies when <code>D=Normal</code>, <code>D=Reverse</code> is different.) I <em>think</em> the way to do this is something like (pseudocode)</p>\n<div class=\"codehilite\"><pre><span></span>for region in self.first_constraints {\n  let mut next = self.next_constraints[region];\n  while let Some(outlived) = next {\n    next = self.next_constraints(outlived);\n    yield outlived;\n  }\n}\n</pre></div>\n\n\n<p>Does that seem right?</p>",
        "id": 131187086,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533836647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs\">Easy link to <code>graph.rs</code> as of your PR</a></p>",
        "id": 131187108,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533836691
    },
    {
        "content": "<p>the first part is right, but I don't understand the code example</p>",
        "id": 131187173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836756
    },
    {
        "content": "<p>it seems to be iterating over the constraint linked list?</p>",
        "id": 131187182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836773
    },
    {
        "content": "<p>there are various ways you could do this of course</p>",
        "id": 131187197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836797
    },
    {
        "content": "<p>but I suppose </p>\n<div class=\"codehilite\"><pre><span></span>for region in self.first_constraints.indices() {\n  yield region;\n}\n</pre></div>",
        "id": 131187210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836826
    },
    {
        "content": "<p>might do it</p>",
        "id": 131187212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836830
    },
    {
        "content": "<p>Hmm. Perhaps I've misunderstood the <code>Edges</code> iterator</p>",
        "id": 131187278,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533836889
    },
    {
        "content": "<p>I thought it was necessary to iterator over the the <code>next_constraints</code> because for a constraint like <code>R1: R2 + R3</code>, that's where the <code>R2</code> and <code>R3</code> regions will come from</p>",
        "id": 131187339,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533836976
    },
    {
        "content": "<p>no I mean</p>",
        "id": 131187341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836978
    },
    {
        "content": "<p>that is how the edges iterator works</p>",
        "id": 131187348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533836984
    },
    {
        "content": "<p>I'm not really sure what pseudocode you are showing me :)</p>",
        "id": 131187399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837006
    },
    {
        "content": "<p>I thought you were talking about the additional iteration that would be needed</p>",
        "id": 131187404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837014
    },
    {
        "content": "<p>Oh sorry</p>\n<p>I mean that the complete output of the iterator when given a <code>'static</code> region should be <code>next_constraints</code> + <code>first_constraints</code>.</p>",
        "id": 131187443,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837063
    },
    {
        "content": "<p>It basically needs to return all of the constraints right?</p>",
        "id": 131187454,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837088
    },
    {
        "content": "<p>well</p>",
        "id": 131187458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837098
    },
    {
        "content": "<p>we are talking about augmenting the thing that iterates over regions, right?</p>",
        "id": 131187470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837118
    },
    {
        "content": "<p><code>Edges</code> yes</p>",
        "id": 131187514,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837132
    },
    {
        "content": "<p>in that case, it's enough for <code>'static</code> to yield all the regions just once</p>",
        "id": 131187515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837134
    },
    {
        "content": "<p>but for every <em>other</em> region, it would want to walk over the constraints and map to the <code>sub</code> endpoint</p>",
        "id": 131187532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837153
    },
    {
        "content": "<p>otherwise, you'll just wind up with duplicate edges I guess</p>",
        "id": 131187533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837161
    },
    {
        "content": "<p>doesn't hurt</p>",
        "id": 131187535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837162
    },
    {
        "content": "<p>also not needed</p>",
        "id": 131187540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837172
    },
    {
        "content": "<p>so I guess I would say</p>",
        "id": 131187545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837180
    },
    {
        "content": "<p>er, sorry</p>",
        "id": 131187561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837200
    },
    {
        "content": "<p>not <code>Edges</code></p>",
        "id": 131187563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837204
    },
    {
        "content": "<p>note that the SCC is not built from <code>Edges</code>, that's just a building block</p>",
        "id": 131187569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837216
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L163-L166\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L163-L166\"><code>Successors</code></a> is the one we use for the SCC</p>",
        "id": 131187580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837240
    },
    {
        "content": "<p>and it yields up not <em>constraints</em> but <em>regions</em></p>",
        "id": 131187621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837246
    },
    {
        "content": "<p>well really the point is <code>RegionGraph</code></p>",
        "id": 131187641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837287
    },
    {
        "content": "<p>Ok got it.</p>\n<p>My brain skipped right past <code>Successors</code> and I was just looking at <code>Edges</code></p>",
        "id": 131187681,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837356
    },
    {
        "content": "<p><span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 131187705,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837363
    },
    {
        "content": "<p>honestly I think the <em>easiest</em> thing to do might be to make Yet Another Layer :P</p>",
        "id": 131187723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837372
    },
    {
        "content": "<p>in particular, there are these \"wrapper traits\" here:</p>",
        "id": 131187725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837388
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L176-L198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L176-L198\">https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L176-L198</a></p>",
        "id": 131187726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837390
    },
    {
        "content": "<p>those are the things that define the graph the SCC computation is based on</p>",
        "id": 131187731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837401
    },
    {
        "content": "<p>I wonder if we want another struct, let's call it <code>AugmentedRegionGraph</code>, sort of like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">AugmentedRegionGraph</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">graph</span>: <span class=\"nc\">NormalRegionGraph</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// no need to support other directions</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131187750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837442
    },
    {
        "content": "<p>and then implement the graph traits for <em>that</em></p>",
        "id": 131187751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837447
    },
    {
        "content": "<p>the <a href=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L186\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/graph.rs#L186\">\"successors\" relation</a> would then return something like</p>",
        "id": 131187758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">static_successors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">STATIC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">STATIC</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"n\">NUM_REGIONS</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">normal_successors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"n\">outgoing_regions</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">static_successors</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">range</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">normal_successors</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131187827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837525
    },
    {
        "content": "<blockquote>\n<p>Ok got it.</p>\n<p>My brain skipped right past <code>Successors</code> and I was just looking at <code>Edges</code></p>\n</blockquote>\n<p>Successors is really just a \"mapped\" version of <code>Edges</code> anyhow</p>",
        "id": 131187843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837561
    },
    {
        "content": "<p>And <code>NormalRegionGraph</code> is just a <code>RegionGraph&lt;'s, Normal&gt;</code>?</p>",
        "id": 131187847,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837567
    },
    {
        "content": "<p>yeah</p>",
        "id": 131187849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837572
    },
    {
        "content": "<p>that's an existing alias I think</p>",
        "id": 131187850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837575
    },
    {
        "content": "<p>er, I guess it's not</p>",
        "id": 131187852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837589
    },
    {
        "content": "<p>well I meant that :)</p>",
        "id": 131187854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837593
    },
    {
        "content": "<p>I think there's just <code>{Normal|Reverse}ConstraintGraph</code></p>",
        "id": 131187898,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837605
    },
    {
        "content": "<p>yes, you are correct</p>",
        "id": 131187909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837612
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 131187912,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837616
    },
    {
        "content": "<p>Is <code>STATIC</code> defined somewhere? <code>RegionVid</code> doesn't seem to define it <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.RegionVid.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.RegionVid.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.RegionVid.html</a></p>",
        "id": 131187967,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837699
    },
    {
        "content": "<p>no, it's <code>universal_regions.fr_static</code> I think</p>",
        "id": 131188016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837723
    },
    {
        "content": "<p>it is -- in practice -- always zero</p>",
        "id": 131188020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837732
    },
    {
        "content": "<p>really the range I defined is actually <code>self.first_contraints.indices()</code> or whatever</p>",
        "id": 131188030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837748
    },
    {
        "content": "<p>That looks correct</p>",
        "id": 131188034,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837751
    },
    {
        "content": "<p>we have a <code>universal_regions</code> in this code? I forget</p>",
        "id": 131188046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837771
    },
    {
        "content": "<p>we could make it a true constant</p>",
        "id": 131188049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837773
    },
    {
        "content": "<p>seems like we don't have it <em>here</em></p>",
        "id": 131188069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837795
    },
    {
        "content": "<p>we could pass it down though when constructing the graph</p>",
        "id": 131188071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837801
    },
    {
        "content": "<p>i.e., we could add an argument to <a href=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/mod.rs#L58-L61\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31fe3df6543566f5671da4d78b381b9d59f2d096/src/librustc_mir/borrow_check/nll/constraints/mod.rs#L58-L61\"><code>compute_sccs</code></a></p>",
        "id": 131188089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837827
    },
    {
        "content": "<p>Ok. That should be easy enough</p>",
        "id": 131188090,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837831
    },
    {
        "content": "<p>I'd probably just pass down <code>static_vid: RegionVid</code></p>",
        "id": 131188129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837843
    },
    {
        "content": "<p>and not the whole struct thing</p>",
        "id": 131188137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837847
    },
    {
        "content": "<p>right</p>",
        "id": 131188138,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837848
    },
    {
        "content": "<p>Ok. Thanks for your time!! I'm going to work on this tonight and see how far I get.</p>",
        "id": 131188175,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837907
    },
    {
        "content": "<p><span class=\"emoji emoji-1f3b8\" title=\"guitar\">:guitar:</span></p>",
        "id": 131188192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837946
    },
    {
        "content": "<p>let me know if you hit any roadblocks :)</p>",
        "id": 131188199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533837952
    },
    {
        "content": "<p>Will do! :)</p>",
        "id": 131188207,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533837961
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_constraints</span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I assume you were using pseudocode, but does the compiler yet use generators for things?</p>",
        "id": 131190927,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533840875
    },
    {
        "content": "<p>we do not</p>",
        "id": 131190933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533840892
    },
    {
        "content": "<p>I've thought about it...</p>",
        "id": 131190948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533840919
    },
    {
        "content": "<p>Any particular reason to avoid it? Since async/await uses it so much, seems like getting more usages would be a good thing.</p>",
        "id": 131191022,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533840996
    },
    {
        "content": "<p>not really</p>",
        "id": 131191027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533841005
    },
    {
        "content": "<p>I don't think there is a convenient way to make an iterator yet</p>",
        "id": 131191038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533841025
    },
    {
        "content": "<p>but we could add one</p>",
        "id": 131191041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533841028
    },
    {
        "content": "<p>I think when I was last going to try it, though, the \"borrowck-enabled\" variant didn't yet exist</p>",
        "id": 131191054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533841040
    },
    {
        "content": "<p>now it would be more ergonomic</p>",
        "id": 131191056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533841045
    },
    {
        "content": "<p>Heh, I wrote the generator-&gt;iterator adapter months (years?) ago for a SO question, I've always been surprised that wasn't in the stdlib</p>",
        "id": 131191129,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533841099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> how'd it go?</p>",
        "id": 131228681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, I guess. I've added the code we talked about yesterday and wired it up to <code>compute_sccs()</code>. The code builds and the compiler bootstraps but there's some NLL ui-tests that are failing. I didn't have time to investigate them very much.</p>",
        "id": 131237376,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908025
    },
    {
        "content": "<p>ok</p>",
        "id": 131237469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908134
    },
    {
        "content": "<p>feel free to open a WIP PR</p>",
        "id": 131237472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908141
    },
    {
        "content": "<p>I'll probably do that this evening. The tests finished running right as I was about to go to bed so I didn't have time to investigate further.</p>",
        "id": 131237556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908248
    },
    {
        "content": "<p>A quick glance at the errors looked like there were changes in some of the errors referencing the <code>'static</code> lifetime. It didn't look correct to me at first glance but I find the test output hard to read anyway.</p>",
        "id": 131237636,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908331
    },
    {
        "content": "<p>I'll dig in more tonight</p>",
        "id": 131237639,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908335
    },
    {
        "content": "<blockquote>\n<p>A quick glance at the errors looked like there were changes in some of the errors referencing the <code>'static</code> lifetime. It didn't look correct to me at first glance but I find the test output hard to read anyway.</p>\n</blockquote>\n<p>ah, well, it might be that this change legitimately changes the heuristics for printing region errors</p>",
        "id": 131237830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908535
    },
    {
        "content": "<p>Gotcha. I'll run the failing tests manually tonight so I can compare the complete output side-by-side and see if it's actually an issue or not.</p>",
        "id": 131237865,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908613
    },
    {
        "content": "<p>Since this is a perf optimization, I guess the best test that it's \"working\" is to compile html5ever and look at the compile times right?</p>",
        "id": 131237909,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908643
    },
    {
        "content": "<p>locally? yeah, that would be possible</p>",
        "id": 131238026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908808
    },
    {
        "content": "<p>we can also have the official perf server test it</p>",
        "id": 131238028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908814
    },
    {
        "content": "<p>once we are satisfied it's correct :)</p>",
        "id": 131238031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908822
    },
    {
        "content": "<p>you probably want to build on <a href=\"https://github.com/rust-lang/rust/pull/53177\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53177\">https://github.com/rust-lang/rust/pull/53177</a> in terms of testing perf</p>",
        "id": 131238043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908842
    },
    {
        "content": "<p>which will..hopefully...land soon?</p>",
        "id": 131238044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908846
    },
    {
        "content": "<p>Yeah, I'm working on top of your branch :)</p>",
        "id": 131238112,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1533908911
    },
    {
        "content": "<p>k</p>",
        "id": 131238136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533908957
    },
    {
        "content": "<p>I think you're right about the heuristics in error reporting changing. It looks to me like the error is still being reported correctly, but it's using the wrong wording. I tried tracking it down last night and couldn't quite get it but I have a lead so maybe I can fix it tonight.</p>",
        "id": 132242245,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429091
    },
    {
        "content": "<p>Would it be possible to go ahead and get a perf run for the changes? I'm interested in seeing if the speedup you were expecting to see happens.</p>",
        "id": 132242267,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429137
    },
    {
        "content": "<p>I also left a question on the PR for you.</p>",
        "id": 132242282,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^</p>",
        "id": 132242304,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429185
    },
    {
        "content": "<p>yes, we can do a perf run</p>",
        "id": 132242623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429534
    },
    {
        "content": "<p>sorry, this week has been crazy busy</p>",
        "id": 132242628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429541
    },
    {
        "content": "<p>No problem! :)</p>",
        "id": 132242638,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429556
    },
    {
        "content": "<p>Do the tests need to pass to get a try build out? They're currently failing because of the changed error messages.</p>",
        "id": 132242707,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429599
    },
    {
        "content": "<p>yeah, I'm not sure</p>",
        "id": 132242716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429613
    },
    {
        "content": "<p>I always forget</p>",
        "id": 132242720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429616
    },
    {
        "content": "<p>probably best to just fix the tests</p>",
        "id": 132242737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429627
    },
    {
        "content": "<p>Ah, ok.</p>",
        "id": 132242739,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429632
    },
    {
        "content": "<p>if it's just UI changes, you can run <code>./x.py test src/test/ui --bless</code></p>",
        "id": 132242748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429638
    },
    {
        "content": "<p>sorry, by \"fix the tests\" I mean \"modify them to reflect the changes\"</p>",
        "id": 132242756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429647
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 132242770,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429659
    },
    {
        "content": "<p>I'll do that tonight so maybe we can get a perf run in tomorrow.</p>",
        "id": 132242820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does <code>bors try</code> require tests to pass?</p>",
        "id": 132242830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429697
    },
    {
        "content": "<p>in particular, in order to produce an artifact usable by perf...?</p>",
        "id": 132242833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429705
    },
    {
        "content": "<p>now that I think about it, I think maybe it doesn't</p>",
        "id": 132242844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534429715
    },
    {
        "content": "<p>I don't know what kind of speedup you were hoping to see from that change. On my pc, there is a speed up to <code>html5ever</code> but it doesn't seem that big.</p>",
        "id": 132242872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429741
    },
    {
        "content": "<p>I couldn't figure out how to build just <code>html5ever</code> without its dependencies so the total build time is definitely skewed by them.</p>",
        "id": 132242906,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534429781
    },
    {
        "content": "<p>after a non-incremental check, something like <code>touch src/lib.rs &amp;&amp; CARGO_INCREMENTAL=0 cargo rustc --profile check --lib -- -Zborrowck=mir -Ztwo-phase-borrows</code> should do the trick</p>",
        "id": 132243133,
        "sender_full_name": "lqd",
        "timestamp": 1534429936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Ah, perfect. Thanks!</p>",
        "id": 132243207,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534430010
    },
    {
        "content": "<blockquote>\n<p>does <code>bors try</code> require tests to pass?</p>\n</blockquote>\n<p>since I had the same question minutes earlier and mine just succeeded, it appears that try builds don't need to have all the tests pass indeed :) I think perf could be ran on <a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a> as-is</p>",
        "id": 132246989,
        "sender_full_name": "lqd",
        "timestamp": 1534433431
    },
    {
        "content": "<p>Ok. With  <a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a> <code>html5ever</code> drops from 4.2 seconds to compile on my pc to <code>4.0</code> seconds in <code>-Zborrowck=mir -Ztwo-phase-borrows</code> mode.</p>",
        "id": 132276984,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534471630
    },
    {
        "content": "<p>so it only needs a <code>rust-timer</code> command :) cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span></p>",
        "id": 132286666,
        "sender_full_name": "lqd",
        "timestamp": 1534489656
    },
    {
        "content": "<p>done <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 132287899,
        "sender_full_name": "kennytm",
        "timestamp": 1534491953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> thanks a lot :)</p>",
        "id": 132288656,
        "sender_full_name": "lqd",
        "timestamp": 1534493290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so I made a few edits to your PR...</p>",
        "id": 132592619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960774
    },
    {
        "content": "<p>converting it to avoid <code>Box</code> and fix the lifetime issues</p>",
        "id": 132592628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960784
    },
    {
        "content": "<p>I guess I'll just push them</p>",
        "id": 132592630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960787
    },
    {
        "content": "<p>I was getting \"nerd swiped\" by improvements to <code>IndexVec</code> to make it read nicer but I think I will stop here ;)</p>",
        "id": 132592674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thanks! I'll take a look. I've been trying to track down the error reporting regressions that are failing the ui tests.</p>",
        "id": 132593827,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534962196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ok -- can you push the updated UI tests to the PR? I'd like to see the full diffs, and that's the easiest way.</p>",
        "id": 132594027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534962425
    },
    {
        "content": "<p>I guess I can build and run locally too...</p>",
        "id": 132594037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534962443
    },
    {
        "content": "<p>The issue is <a href=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L123\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L123\">here</a>. Before my change, <code>best_choice</code> would be <code>Some(_)</code> but now it's <code>None</code> because <a href=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L133\">this</a> removes constraints in the same SCC. With my changes, they're in the same SCC and so <a href=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L143\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c24f27c0452a9aaecfb70d225d846df2e517385f/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L143\">this code</a> runs when it normally wouldn't.</p>",
        "id": 132594249,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534962653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll do that first thing tonight when I get back to my pc</p>",
        "id": 132594260,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1534962672
    },
    {
        "content": "<p>ok</p>",
        "id": 132594374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534962757
    },
    {
        "content": "<p>I can certainly imagine that this would influence those results</p>",
        "id": 132594382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534962773
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so I see the delta now. It makes sense to me how this is arising: it's fundamentally just kind of tricky to figure out which points are \"user visible\"  conversions and which are not. The SCC is clearly an imperfect heuristic here... but I'm not sure whether to hold up the PR on that basis or not.</p>",
        "id": 132654243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535049744
    },
    {
        "content": "<p>do you want to rebase, in any case?</p>",
        "id": 132654325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535049887
    },
    {
        "content": "<p>I certainly can yeah. Do you want me to keep your commits separate or squash it all together?</p>",
        "id": 132654606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535050250
    },
    {
        "content": "<p>I'm personally pretty bummed by the regression in error messages. I think they used to be really good and now they're pretty meh. It's certainly your call though if you want to merge as-is or not. :)</p>",
        "id": 132654634,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535050319
    },
    {
        "content": "<p>I spent last night trying to come up with a better heuristic but I haven't thought of anything yet.</p>",
        "id": 132654688,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535050354
    },
    {
        "content": "<blockquote>\n<p>I certainly can yeah. Do you want me to keep your commits separate or squash it all together?</p>\n</blockquote>\n<p>squash is fine</p>",
        "id": 132654877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050649
    },
    {
        "content": "<blockquote>\n<p>I spent last night trying to come up with a better heuristic but I haven't thought of anything yet.</p>\n</blockquote>\n<p>well, certainly we could compute the SCC <em>without</em> the augmentation and use that</p>",
        "id": 132654884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050665
    },
    {
        "content": "<p>it doesn't .. feel \"theoretically\" better</p>",
        "id": 132654885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050674
    },
    {
        "content": "<p>it just sort of \"happens to be\"</p>",
        "id": 132654889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050678
    },
    {
        "content": "<p>but this is all a heuristic, so...</p>",
        "id": 132654893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050681
    },
    {
        "content": "<p>(that is, we could compute this lazilly when we have to report errors, I mean)</p>",
        "id": 132654935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050692
    },
    {
        "content": "<p>the other option I can see -- well, I have to review the code -- but it would basically be that we don't just consider whether the sub/sup are in the same SCC, but we also look at the <em>kind</em> of edge</p>",
        "id": 132654939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050726
    },
    {
        "content": "<p>do you have plots of the region graphs in those examples?</p>",
        "id": 132654943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535050730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is there a tool to dump that info?</p>",
        "id": 132655358,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535051291
    },
    {
        "content": "<p><code>-Zdump-mir=nll</code> I think gives <code>dot</code> files</p>",
        "id": 132657728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535054723
    },
    {
        "content": "<p>in the <code>mir_dump</code> directory</p>",
        "id": 132657729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535054727
    },
    {
        "content": "<p>IIRC</p>",
        "id": 132657738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535054735
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> consensus seems to be merging the PR as is — I hadn't realized there were ICEs etc though</p>",
        "id": 132709275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535133238
    },
    {
        "content": "<p>I guess you rebased, though?</p>",
        "id": 132709320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535133249
    },
    {
        "content": "<p>Yeah, I rebased on <code>master</code> last night</p>",
        "id": 132710552,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535134326
    },
    {
        "content": "<p>I didn't realize either since they were mixed into the other failing tests</p>",
        "id": 132710559,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535134336
    },
    {
        "content": "<p>I spent about an hour last night looking into the ICEs but it's slow going. I'm completely unfamiliar with this code.</p>",
        "id": 132710614,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535134394
    },
    {
        "content": "<p>ok, I can take a look in a bit</p>",
        "id": 132710621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535134400
    },
    {
        "content": "<p>Much appreciated! :)</p>",
        "id": 132710623,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535134411
    },
    {
        "content": "<p>The stack trace showed that <code>find_constraint_paths_between_regions()</code> (<a href=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L163\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L163\">here</a>) was failing to find the path and thus returning <code>None</code> which was getting unwrapped in <code>best_blame_constraint()</code> (<a href=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L79\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L79\">here</a>) when called from <code>find_outlives_blame_span()</code> (<a href=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L489\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/61b00727076ce251b54bdefa18779a13819d2209/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs#L489\">here</a>)</p>",
        "id": 132710872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535134633
    },
    {
        "content": "<p>ok, I see how that could happen.</p>",
        "id": 132713560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137626
    },
    {
        "content": "<p>the problem here is that we are walking the \"unaugmented\" graph, essentially</p>",
        "id": 132713570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137641
    },
    {
        "content": "<p>let me look at the code just a <em>bit</em> more closely</p>",
        "id": 132713590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137676
    },
    {
        "content": "<p>I guess if you have <code>R1: R2: 'static</code> then we would have a \"synthetic\" edge like <code>'static: R3</code></p>",
        "id": 132713689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137799
    },
    {
        "content": "<p>so if we are then searching for a path from <code>R1</code> to <code>R3</code>, we won't find it</p>",
        "id": 132713742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137813
    },
    {
        "content": "<p>one option is just to search the augmented graph</p>",
        "id": 132713753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137831
    },
    {
        "content": "<p>that may have other effects on error msgs</p>",
        "id": 132713795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137899
    },
    {
        "content": "<p>another option would be to look for \"r3 or 'static\"</p>",
        "id": 132713808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137916
    },
    {
        "content": "<p>that would fix the ICE but it feels...like the concern is \"leaking\" a bit more than I might like</p>",
        "id": 132713857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137928
    },
    {
        "content": "<p>I am wondering</p>",
        "id": 132713866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137943
    },
    {
        "content": "<p><em>another</em> option might be to tweak our approach</p>",
        "id": 132713872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137954
    },
    {
        "content": "<p>and just add the extra constraints</p>",
        "id": 132713892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137983
    },
    {
        "content": "<p>into the list of constraints</p>",
        "id": 132713901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137988
    },
    {
        "content": "<p>but that also feels meh</p>",
        "id": 132713908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535137995
    },
    {
        "content": "<p>(e.g., there are a lot of variables, seem silly to materialize all those constraints)</p>",
        "id": 132714759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535139048
    },
    {
        "content": "<p>hmm maybe this setup is a bit silly altogether</p>",
        "id": 132714775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535139069
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"http://www.tshirtvortex.net/wp-content/uploads/Tis-A-Silly-Place-1.jpg\" target=\"_blank\" title=\"http://www.tshirtvortex.net/wp-content/uploads/Tis-A-Silly-Place-1.jpg\"><img src=\"https://uploads.zulipusercontent.net/7249cebe20b3eca712cab02e652bd040dabaaadc/687474703a2f2f7777772e747368697274766f727465782e6e65742f77702d636f6e74656e742f75706c6f6164732f5469732d412d53696c6c792d506c6163652d312e6a7067\"></a></div>",
        "id": 132714854,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535139154
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so... right now we have these various layers. There is the \"constraint graph\", which yields up constraint indices. Then you can combine that with the constraint <em>set</em> to get the region graph. </p>\n<p>One annoying thing here is that, because we yield up constraint <strong>indices</strong>, if we want to make fake constraints, say, that connect <code>'static</code> to other lifetimes, then we have to add them into the vector.</p>\n<p>Maybe instead the constraint graph iterator should take a <code>&amp;'iter ConstraintSet</code>. Then the iterator can yield up <code>OutlivesConstraint</code> structs <strong>by value</strong>.  This way, we can generate <code>OutlivesConstraint { sup: static, sub: other_region, locations: Locations::All }</code> for those implied <code>'static</code> constraints.</p>\n<p>We can then do that <strong>always</strong>, in the base layer of the graph. </p>\n<p>Then we can remove the \"augmented-region-graph\" concept.</p>\n<p>Moreover, this might help with the other regressions we were seeing, since <em>maybe</em> we can tweak the <code>locations</code> value and help our \"graph walker\" to identify interesting points again (maybe -- I might rather take a different approach).</p>",
        "id": 132715019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535139336
    },
    {
        "content": "<p>I think I'll copy this into the PR so you don't have to read all my chatter</p>",
        "id": 132715069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535139365
    },
    {
        "content": "<p>(reading through it now)</p>",
        "id": 132715335,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535139630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, I think I get the general idea. A few questions:</p>\n<p>You said \"constraint graph iterator\" is that the <code>Edges</code> struct which impls <code>Iterator&lt;Type = ConstraintIndex&gt;</code>? Are you saying I should change it to impl <code>Iterator&lt;Type = OutlivesConstraint&gt;</code>? Or is this a new iterator that should be created?</p>\n<blockquote>\n<p>We can do that always, in the base layer of the graph</p>\n</blockquote>\n<p>Are you saying we'd add the outlives constraints in <code>ConstraintGraph</code>? Or that the constraint graph iterator is responsible for creating them when iterated?</p>",
        "id": 132717180,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535141730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> </p>\n<blockquote>\n<p>Are you saying I should change it to <code>impl Iterator&lt;Type = OutlivesConstraint&gt;</code>? </p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>Or that the constraint graph iterator is responsible for creating them when iterated?</p>\n</blockquote>\n<p>This, I think</p>",
        "id": 132717268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535141878
    },
    {
        "content": "<p>Ok <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 132717361,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535141979
    },
    {
        "content": "<p>I think that's enough for me to get started working on that tonight. I'm sure I'll probably have questions for you on Monday <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 132717551,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535142173
    },
    {
        "content": "<p>sounds good! =)</p>",
        "id": 132717640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142249
    },
    {
        "content": "<p>Thanks for all your help!</p>",
        "id": 132717643,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535142260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> That was a really good idea! I tried the other strategy as you said and it works much better. After the changes, there were only two failing ui tests and they don't seem like significant regressions either. I'm unsure of the perf so we'll definitely need to rerun that.</p>",
        "id": 132812343,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535341207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> left some comments; there may be a bug lurking there too though, given that the perf results are \"different\" than before</p>",
        "id": 132850927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535368326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I implemented your feedback. The perf results look much better now.</p>",
        "id": 132922555,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535468274
    },
    {
        "content": "<p>great!</p>",
        "id": 132922911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535468600
    },
    {
        "content": "<p>of course now the question is what's up with <em>ucd-check</em> :P</p>",
        "id": 132922971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535468652
    },
    {
        "content": "<p>I guess I was wrong about the \"extra errors\"</p>",
        "id": 132923085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535468772
    },
    {
        "content": "<p>oh the max-rss wins are <em>huge</em> though</p>",
        "id": 132923174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535468884
    },
    {
        "content": "<p>Yeah, I can try profiling it tonight and see if anything jumps out to me.</p>",
        "id": 132923267,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535468993
    },
    {
        "content": "<p><code>ucd-check</code> that is</p>",
        "id": 132923317,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535469007
    },
    {
        "content": "<p>it's curious but probably not that big a deal</p>",
        "id": 132923332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535469042
    },
    {
        "content": "<p>I left a few comments</p>",
        "id": 132923335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535469044
    },
    {
        "content": "<p>to that effect:)</p>",
        "id": 132923336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535469047
    },
    {
        "content": "<p>nice that, after this, html5ever gets to 115% or so</p>",
        "id": 132923353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535469085
    },
    {
        "content": "<p>Yeah, the html5ever results are exciting</p>",
        "id": 132923451,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535469199
    },
    {
        "content": "<p>I don't know if you noticed but the \"extra errors\" issue seems to have gotten worse <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 132923525,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535469261
    },
    {
        "content": "<p>hmm curious</p>",
        "id": 132923634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535469397
    },
    {
        "content": "<p>perf wins link please?</p>",
        "id": 132923898,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535469736
    },
    {
        "content": "<p>Ah - <a href=\"https://perf.rust-lang.org/compare.html?start=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7&amp;end=3bf463eacebe287b54bbfa28fd64168e41c4446c\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7&amp;end=3bf463eacebe287b54bbfa28fd64168e41c4446c\">https://perf.rust-lang.org/compare.html?start=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7&amp;end=3bf463eacebe287b54bbfa28fd64168e41c4446c</a></p>",
        "id": 132924144,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535470034
    },
    {
        "content": "<p>Er, sorry, . Yes <a href=\"https://perf.rust-lang.org/compare.html?start=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7&amp;end=3bf463eacebe287b54bbfa28fd64168e41c4446c\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7&amp;end=3bf463eacebe287b54bbfa28fd64168e41c4446c\">comparison URL</a></p>",
        "id": 132924242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535470165
    },
    {
        "content": "<p><code>ucd-check</code> is only 1 run, so more sensitive to weirdness imo :)</p>",
        "id": 132926082,
        "sender_full_name": "lqd",
        "timestamp": 1535472123
    },
    {
        "content": "<p>ah makes sense</p>",
        "id": 132926764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535472920
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 132927541,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535474012
    },
    {
        "content": "<p>I'll still take a look tonight and see if there's any low hanging fruit but that makes me feel better</p>",
        "id": 132927587,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535474044
    },
    {
        "content": "<p>I'm not seeing anything pop out to me in <code>perf</code>.</p>",
        "id": 132968710,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535503915
    },
    {
        "content": "<p>the real question is if we can suppress the  duplicate errors somehow</p>",
        "id": 132968766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535503994
    },
    {
        "content": "<p>seems like it should be true</p>",
        "id": 132968767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535504008
    },
    {
        "content": "<p>So I've tried comparing a log of <code>rustc</code> with and without my changes. One thing that stands out to me is this:</p>\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span>rustc_mir::borrow_check::nll::region_infer::error_reporting: report_error: fr_is_local=true outlived_fr_is_local=false category=Assignment\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region(fr=&#39;_#1r)\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting upvar\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting argument\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: arg_ty = std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: found &#39;_#1r in argument 0 which has type std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_name_and_span_for_region: argument_local=_1\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_name_and_span_for_region: argument_name=Some(s) argument_span=issue-50716.rs:20:24: 20:25\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region(fr=&#39;_#0r)\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting upvar\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting argument\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: arg_ty = std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer: check_universal_region(fr=&#39;_#2r)\nrustc_mir::borrow_check::nll::region_infer: check_universal_region(fr=&#39;_#3r)\n</pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span>rustc_mir::borrow_check::nll::region_infer::error_reporting: report_error: fr_is_local=true outlived_fr_is_local=false category=Assignment\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region(fr=&#39;_#1r)\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting upvar\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting argument\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: arg_ty = std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: found &#39;_#1r in argument 0 which has type std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_name_and_span_for_region: argument_local=_1\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_name_and_span_for_region: argument_name=Some(s) argument_span=issue-50716.rs:20:24: 20:25\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region(fr=&#39;_#0r)\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting upvar\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_var_name_and_span_for_region: attempting argument\nrustc_mir::borrow_check::nll::region_infer::error_reporting::var_name: get_argument_index_for_region: arg_ty = std::boxed::Box&lt;&lt;&amp;T as A&gt;::X&gt;\nrustc_mir::borrow_check::nll::region_infer: check_universal_region: fr=&#39;_#1r does not outlive shorter_fr=&#39;_#2r\n</pre></div>\n\n\n<p>The last message comes from <a href=\"https://github.com/rust-lang/rust/blob/8adc69a5a873dd7e840b7d002ae48a4c638ef7ee/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1039\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8adc69a5a873dd7e840b7d002ae48a4c638ef7ee/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1039\">here</a>. </p>\n<p>I'm not sure what to investigate next.</p>",
        "id": 133101838,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535688054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Does the above info mean anything to you? I'm still working on figuring it out but I thought I'd ask in case it was obvious to you</p>",
        "id": 133126776,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725019
    },
    {
        "content": "<p>it's not obvious to me, no</p>",
        "id": 133126816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725072
    },
    {
        "content": "<p>I was hoping to look at it today, presuming you don't find it first :)</p>",
        "id": 133126822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725080
    },
    {
        "content": "<p>I'm at work right now so I won't be able to look at it until tonight :)</p>",
        "id": 133126972,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725215
    },
    {
        "content": "<p>That was just how far I got last night</p>",
        "id": 133126980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725221
    },
    {
        "content": "<p>I'm kind of wondering if <a href=\"https://github.com/rust-lang/rust/pull/53327#discussion_r212932575\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53327#discussion_r212932575\">this comment</a> you made is more significant than we thought:</p>\n<blockquote>\n<p>I mean, to be strictly consistent, we would basically add an \"extra\" static constraint to every region in a reverse graph, but it wouldn't actually matter to any of the consumers.</p>\n</blockquote>\n<p>Maybe it does matter and we need to be doing that?</p>",
        "id": 133127036,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725302
    },
    {
        "content": "<p>That's just a guess though</p>",
        "id": 133127044,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725317
    },
    {
        "content": "<p>I can't see how</p>",
        "id": 133127085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725324
    },
    {
        "content": "<p>the reverse graph is used in just one place</p>",
        "id": 133127089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725331
    },
    {
        "content": "<p>which is to avoid computing liveness</p>",
        "id": 133127091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725334
    },
    {
        "content": "<p>I don't think it is used in the error reporting code at all</p>",
        "id": 133127106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725370
    },
    {
        "content": "<p>but .. I may be overlooking something :)</p>",
        "id": 133127112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725377
    },
    {
        "content": "<p>It's not used by <code>universal_regions_outlived_by()</code> or <code>universal_region_relations .outlives()</code>?</p>",
        "id": 133127134,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725430
    },
    {
        "content": "<p>(I don't know, just wondering)</p>",
        "id": 133127140,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725441
    },
    {
        "content": "<p>it is not</p>",
        "id": 133127208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725516
    },
    {
        "content": "<p>On a side note, is there documentation for the NLL borrow checker somewhere? I tried looking in the rustc-guide when I started working on this but I didn't see anything there.</p>",
        "id": 133127211,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725523
    },
    {
        "content": "<p>gotcha</p>",
        "id": 133127214,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725525
    },
    {
        "content": "<p>not really. I'm working actually literally this second on writing more docs...</p>",
        "id": 133127219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725540
    },
    {
        "content": "<p>I can read the code and see what it's doing but I have no idea why...</p>",
        "id": 133127220,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725548
    },
    {
        "content": "<p>...but there is a lot to document :)</p>",
        "id": 133127221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725549
    },
    {
        "content": "<p>Ah <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 133127223,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725556
    },
    {
        "content": "<p>there are docs scattered throughout the code</p>",
        "id": 133127224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725556
    },
    {
        "content": "<p>of course writing docs just makes me want to refactor everything :P</p>",
        "id": 133127299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535725635
    },
    {
        "content": "<p>The eternal struggle</p>",
        "id": 133127366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725685
    },
    {
        "content": "<p>If you jot down what you want refactored, I'd be happy to work on that after we get this issue resolved :)<br>\nI love refactoring :ferris:</p>",
        "id": 133127502,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535725815
    },
    {
        "content": "<p>woohoo :)</p>",
        "id": 133129419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728004
    },
    {
        "content": "<p>the challenge here is not knowing <em>precisely</em> what I want</p>",
        "id": 133129422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728009
    },
    {
        "content": "<p>just knowing we ain't got it ;)</p>",
        "id": 133129424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728012
    },
    {
        "content": "<p>but I am starting to get some ideas</p>",
        "id": 133129429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535728016
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 133129767,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1535728332
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you happen to get a chance to look at this? I'm stuck and could use a nudge in the right direction :)</p>",
        "id": 133330726,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536088753
    },
    {
        "content": "<p>not yet sorry</p>",
        "id": 133332663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536090951
    },
    {
        "content": "<p>will do</p>",
        "id": 133332711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536090963
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 133332740,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536090994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I left a comment on the pr <a href=\"https://github.com/rust-lang/rust/pull/53327/commits/fea4b44b26321a86dc3d2337f50c941577f1ef1d#r215626513\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53327/commits/fea4b44b26321a86dc3d2337f50c941577f1ef1d#r215626513\">here</a> with a thought I had about the failing tests.</p>",
        "id": 133442184,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536240930
    },
    {
        "content": "<p>replied</p>",
        "id": 133446493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536244756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Did you reply on GH? I'm not seeing it <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 133450296,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536248091
    },
    {
        "content": "<p>I thought I did</p>",
        "id": 133450834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536248643
    },
    {
        "content": "<p>tl;dr I thought that code is correct</p>",
        "id": 133450844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536248646
    },
    {
        "content": "<p>let me investigate a bit the problem...</p>",
        "id": 133450851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536248650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ok I found the problem. It was indeed obscure. =)</p>",
        "id": 133454117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252026
    },
    {
        "content": "<p>will push a fix shortly</p>",
        "id": 133454121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252029
    },
    {
        "content": "<p>running <code>--bless</code> right now</p>",
        "id": 133454127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252041
    },
    {
        "content": "<p>Woohoo!</p>",
        "id": 133454131,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536252052
    },
    {
        "content": "<p>I'm reading through your comments now</p>",
        "id": 133454133,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536252058
    },
    {
        "content": "<p>Very interested to see how this plays out...</p>",
        "id": 133454147,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536252089
    },
    {
        "content": "<p>it's one of those bugs that is at once exciting and yet dull as can be :P</p>",
        "id": 133454301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252303
    },
    {
        "content": "<p>pushed</p>",
        "id": 133454504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252549
    },
    {
        "content": "<p>final commit is the actual fix</p>",
        "id": 133454508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536252554
    },
    {
        "content": "<p>/me reads</p>",
        "id": 133454585,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536252616
    },
    {
        "content": "<p>I think that makes sense...<br>\n\"Late bound regions\" is unfamiliar terminology to me.<br>\nI guess I need to spend more time meditating on the <code>rustc-doc</code> texts.</p>",
        "id": 133454801,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536252853
    },
    {
        "content": "<p>Well that certainly fixes those bad error messages!</p>",
        "id": 133454952,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536253035
    },
    {
        "content": "<p>And there's a few new error messages that are actually really helpful like <a href=\"https://github.com/rust-lang/rust/pull/53327/files#diff-1758ea7405a14c722e3daea84599bb16R55\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53327/files#diff-1758ea7405a14c722e3daea84599bb16R55\">this one</a></p>",
        "id": 133455049,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536253128
    },
    {
        "content": "<p>late-bound regions are one of the more obscure concepts in rustc</p>",
        "id": 133455952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254084
    },
    {
        "content": "<p>I should write a rustc-guide chapter about them</p>",
        "id": 133455954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254092
    },
    {
        "content": "<p>I hope someday to make them go away</p>",
        "id": 133455960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254099
    },
    {
        "content": "<p>Thanks for your help on this!</p>",
        "id": 133456272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536254417
    },
    {
        "content": "<p>Out of curiosity, how did you go about debugging this? I tried a bunch of different things but nothing felt very effective to me.</p>",
        "id": 133456294,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536254450
    },
    {
        "content": "<blockquote>\n<p>Out of curiosity, how did you go about debugging this? I tried a bunch of different things but nothing felt very effective to me.</p>\n</blockquote>\n<p>well, first I tracked back why <code>give_region_a_name</code> was returning the value it did</p>",
        "id": 133456411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254554
    },
    {
        "content": "<p>then I added various <code>debug!</code> statements (some of which I committed) to possible places that the <code>BrNamed</code> might have been generated</p>",
        "id": 133456434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254579
    },
    {
        "content": "<p>and ran <code>RUST_LOG=rustc_typeck,rustc_mir rustc foo.rs &gt;&amp; killme</code> basically</p>",
        "id": 133456443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254593
    },
    {
        "content": "<p>then I did a <code>grep</code> through that log for the troublesome <code>BrNamed</code> (actually <code>M-x occur</code> in emacs, but same diff)</p>",
        "id": 133456462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254608
    },
    {
        "content": "<p>once I found where it started to appear, I could add more targeted debugging around that fn</p>",
        "id": 133456483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254626
    },
    {
        "content": "<p>this technique -- dumping tons of data then grepping through the logs -- is something I do a lot</p>",
        "id": 133456491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254639
    },
    {
        "content": "<p>works best if you have a small test case though :)</p>",
        "id": 133456539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254654
    },
    {
        "content": "<p>FYI, I rebased and fixed the tests</p>",
        "id": 133510667,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536326844
    },
    {
        "content": "<p>ok, r+'d — we should think about how to fix the error messages maybe?</p>",
        "id": 133519526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335033
    },
    {
        "content": "<p>(in separate PR)</p>",
        "id": 133519529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335036
    },
    {
        "content": "<p>You mean the extra errors? </p>\n<p>Yeah, that's a good idea.</p>",
        "id": 133519843,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536335367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> yay it landed, awesome job :)</p>",
        "id": 133535279,
        "sender_full_name": "lqd",
        "timestamp": 1536352252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  Thanks!</p>",
        "id": 133536212,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536353169
    }
]