[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was asking me about what <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> meant by this:</p>\n<blockquote>\n<p>I'm looking at it now as well, since I didn't see any notes from @Santiago Pastorino . The main interesting complication so far is that DiagnosticBuilderimplements Drop, so you have to use ptr::read to pull out its self.diagnostic (and then mem::forget(self) afterward).</p>\n</blockquote>\n<p>and I thought I might as well answer it here. This is in reference to the <code>DiagnosticBuilder</code> thread...</p>",
        "id": 130227344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456296
    },
    {
        "content": "<p>... the situation is that you cannot move out of a field from a type that implements <code>Drop</code></p>",
        "id": 130227353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456312
    },
    {
        "content": "<p>e.g., if <code>Foo</code> implements <code>Drop</code>, then you cannot do <code>let x = foo.a</code></p>",
        "id": 130227363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456322
    },
    {
        "content": "<p>the reason for this is that -- when the <code>Drop</code> for <code>foo</code> should run -- it would have an \"incomplete\" value</p>",
        "id": 130227374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456335
    },
    {
        "content": "<p>and it was felt it would be too confusing to e.g. have the <code>Drop</code> not run if you have moved out from the value (too easy to screw up)</p>",
        "id": 130227387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456350
    },
    {
        "content": "<p>so in this case there was a <code>struct DiagnosticBuilder { handler, diagnostic }</code> and we wanted to put the <code>diagnostic</code> field into a vector</p>",
        "id": 130227400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456368
    },
    {
        "content": "<p>we can't just move it because <code>DiagnosticBuilder</code> implements <code>Drop</code> -- it does so that it can panic if you fail to emit</p>",
        "id": 130227412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456382
    },
    {
        "content": "<p>I had suggested the simplest fix, which was to do <code>vec.push(self.diagnostic.clone())</code>, but that is somewhat inefficient</p>",
        "id": 130227426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456395
    },
    {
        "content": "<p>in that it does a clone</p>",
        "id": 130227430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> opted instead to use <code>ptr::read</code>, which is an unsafe function that copies a value <em>without</em> moving it -- kind of cheats and duplicates a value that is not supposed to be duplicated</p>",
        "id": 130227489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456424
    },
    {
        "content": "<p>he then used <code>mem::forget</code> to cause the original value to be ignored and to never run its destructor</p>",
        "id": 130227506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456436
    },
    {
        "content": "<p>this is mildly more efficient but obviously more error prone</p>",
        "id": 130227514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456444
    },
    {
        "content": "<p>I also decided the “cost” of an unsafe block (In terms of future programmer revIew effort) was justified here</p>",
        "id": 130227549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456478
    },
    {
        "content": "<p>In that if I did a clone, that <em>also</em> would impose future effort for people to review and understand what was going on</p>",
        "id": 130227573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456519
    },
    {
        "content": "<p>Namely that it’s not really duplicating state; it wants to be a move but we can’t express that via safe code</p>",
        "id": 130227638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456558
    },
    {
        "content": "<p>And so I just decided that ptr::read + mem::forget directly expresses intent</p>",
        "id": 130227673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456597
    },
    {
        "content": "<p>That is: I really was doing this for readability, not efficiency</p>",
        "id": 130227694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456641
    },
    {
        "content": "<p>But it’s possible my model of readability is busted</p>",
        "id": 130227744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532456660
    },
    {
        "content": "<p>heh :)</p>",
        "id": 130227752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456673
    },
    {
        "content": "<blockquote>\n<p>Namely that it’s not really duplicating state; it wants to be a move but we can’t express that via safe code</p>\n</blockquote>\n<p>I wonder ... it would be kind of neat to move some operation for this. meh.</p>",
        "id": 130227808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532456752
    },
    {
        "content": "<p>If the fields are public in theory can't you pattern match safely?</p>",
        "id": 130228007,
        "sender_full_name": "simulacrum",
        "timestamp": 1532456943
    },
    {
        "content": "<p>I think I'd prefer for there to be an explicit operation to \"disable\" the dtor</p>",
        "id": 130228276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532457211
    },
    {
        "content": "<p>in any case \"pattern matching\" is not visible in MIR land</p>",
        "id": 130228280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532457219
    },
    {
        "content": "<p>so I'd prefer for that not to be the rule :)</p>",
        "id": 130228283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532457223
    },
    {
        "content": "<p>in most cases, I suspect (as in this one...) you really only  want to grab a single field</p>",
        "id": 130228344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532457257
    },
    {
        "content": "<p><code>let Foo { field, ... } = my_var;</code> though, right?</p>",
        "id": 130228417,
        "sender_full_name": "simulacrum",
        "timestamp": 1532457352
    },
    {
        "content": "<p>I agree it's not every explicit though</p>",
        "id": 130228480,
        "sender_full_name": "simulacrum",
        "timestamp": 1532457401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for the clarification</p>",
        "id": 130231256,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1532460152
    },
    {
        "content": "<blockquote>\n<p>I think I'd prefer for there to be an explicit operation to \"disable\" the dtor</p>\n</blockquote>\n<p>(there have been proposals for ways to do this; usually to simultaneously disable the dtor and move all the fields, or move into an \"interior view\" of the whole struct)</p>",
        "id": 130231445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532460383
    },
    {
        "content": "<p>I've created these functions before, decomposing a type into a tuple of it's parts</p>",
        "id": 130234335,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532463446
    },
    {
        "content": "<p>I noticed hyper did something similar <a href=\"https://docs.rs/hyper/0.12.7/hyper/struct.Request.html#method.into_parts\" target=\"_blank\" title=\"https://docs.rs/hyper/0.12.7/hyper/struct.Request.html#method.into_parts\">https://docs.rs/hyper/0.12.7/hyper/struct.Request.html#method.into_parts</a></p>",
        "id": 130234346,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532463472
    },
    {
        "content": "<p>With the proposal to special-case <code>ManuallyDrop</code> we could potentially make it special in that you can move out of fields from it too</p>",
        "id": 130234525,
        "sender_full_name": "simulacrum",
        "timestamp": 1532463656
    },
    {
        "content": "<p>So you'd do something like `let field = ManuallyDrop::new(bar).field;</p>",
        "id": 130234541,
        "sender_full_name": "simulacrum",
        "timestamp": 1532463673
    }
]