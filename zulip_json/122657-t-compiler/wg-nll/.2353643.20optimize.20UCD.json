[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> hi =)</p>",
        "id": 132855067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374334
    },
    {
        "content": "<p>This was my <a href=\"https://gist.github.com/e61b50399ca3a7606dd40de8befafb59\" target=\"_blank\" title=\"https://gist.github.com/e61b50399ca3a7606dd40de8befafb59\">minimized test case</a> that I used to make compiles complete in a reasonable amount of time</p>",
        "id": 132855096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374402
    },
    {
        "content": "<p>in particular <a href=\"https://gist.github.com/nikomatsakis/e61b50399ca3a7606dd40de8befafb59#file-ucd-rs-L6\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/e61b50399ca3a7606dd40de8befafb59#file-ucd-rs-L6\">this constant</a> is the one we are interested in</p>",
        "id": 132855103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374415
    },
    {
        "content": "<p>the temporaries result from expressions like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">65</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">97</span><span class=\"p\">)]),</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">66</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">98</span><span class=\"p\">)]),</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">67</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">99</span><span class=\"p\">)]),</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132855120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374438
    },
    {
        "content": "<p>something like <code>&amp;[(0, 0, 97)]</code> winds up generating MIR like:</p>",
        "id": 132855165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>TMP0 = (0, 0, 97)\nTMP1 = [move TMP0]\nTMP2 = &amp;TMP1 // &lt;-- these is the borrows that are killing us\n</pre></div>",
        "id": 132855170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374477
    },
    {
        "content": "<p>example:</p>\n<div class=\"codehilite\"><pre><span></span>        _157 = (const 0u8, const 0u8, const 118u8); // bb0[305]: scope 0 at ucd.rs:14:16: 14:25\n                                         // ty::Const\n                                         // + ty: u8\n                                         // + val: Scalar(Bits { size: 1, bits: 0 })\n                                         // mir::Constant\n                                         // + span: ucd.rs:14:17: 14:18\n                                         // + ty: u8\n                                         // + literal: Const { ty: u8, val: Scalar(Bits { size: 1, bits: 0 }) }\n                                         // ty::Const\n                                         // + ty: u8\n                                         // + val: Scalar(Bits { size: 1, bits: 0 })\n                                         // mir::Constant\n                                         // + span: ucd.rs:14:19: 14:20\n                                         // + ty: u8\n                                         // + literal: Const { ty: u8, val: Scalar(Bits { size: 1, bits: 0 }) }\n                                         // ty::Const\n                                         // + ty: u8\n                                         // + val: Scalar(Bits { size: 1, bits: 118 })\n                                         // mir::Constant\n                                         // + span: ucd.rs:14:21: 14:24\n                                         // + ty: u8\n                                         // + literal: Const { ty: u8, val: Scalar(Bits { size: 1, bits: 118 }) }\n        _156 = [move _157];              // bb0[306]: scope 0 at ucd.rs:14:15: 14:26\n        _155 = &amp;_156;                    // bb0[307]: scope 0 at ucd.rs:14:14: 14:26\n</pre></div>",
        "id": 132855187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535374500
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  , I'd like to discuss some issues with create immutable temporary variables, unfortunately immutable temporary vars are not expected now, i commented <a href=\"http://here%20https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\" target=\"_blank\" title=\"http://here%20https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\">assert about it</a> and now mir borrowck  panics for </p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    match &amp;mut &amp;Some(5i32) {\n        Some(n) =&gt; {\n            *n += 1; //~ ERROR cannot assign to immutable\n            let _ = n;\n        }\n        None =&gt; {},\n    };\n}\n</pre></div>\n\n\n<p>because don't know how to output error for temp var, there is another panic during compiling stdlib, but may be i create immutable temps to often :), I've made just POC implementation for the first step.</p>",
        "id": 133012392,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535566107
    },
    {
        "content": "<p>you mean you commented out <a href=\"https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\">this assert</a>?</p>",
        "id": 133012723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535566509
    },
    {
        "content": "<blockquote>\n<p>because don't know how to output error for temp var</p>\n</blockquote>\n<p>hmm, interesting, can you say more about the error? did you push your branch anywhere?</p>",
        "id": 133012735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535566556
    },
    {
        "content": "<p>I guess that it is some bit of code trying to suggest \"maybe you should make this a <code>mut</code> variable\" ?</p>",
        "id": 133012780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535566574
    },
    {
        "content": "<p>in that case, we would presumably just disable the suggestion for now...</p>",
        "id": 133012783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535566582
    },
    {
        "content": "<p>the libstd thing is a bit more concerning :)</p>",
        "id": 133012796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535566604
    },
    {
        "content": "<blockquote>\n<p>you mean you commented out <a href=\"https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e6b35b0e1115f008796e8313574e4a4739b6d39d/src/librustc/mir/mod.rs#L226\">this assert</a>?</p>\n</blockquote>\n<p>yes,</p>\n<p>I will prevent a panic and check and collect more info..</p>",
        "id": 133012916,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535566798
    },
    {
        "content": "<p>now three errors are emitted vs one: </p>\n<div class=\"codehilite\"><pre><span></span>error[E0594]: cannot assign to immutable borrowed content `*n` (Ast)\n --&gt; test/x.rs:4:13\n  |\n4 |             *n += 1; //~ ERROR cannot assign to immutable\n  |             ^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `temp` as mutable, as it is not declared as mutable (Mir)\n --&gt; test/x.rs:2:11\n  |\n2 |     match &amp;mut &amp;Some(5i32) {\n  |           ^^^^^^^^^^^^^^^^\n  |           |\n  |           cannot borrow as mutable\n  |           try removing `&amp;mut` here\n\nerror[E0594]: cannot assign to `*n` which is behind a `&amp;` reference (Mir)\n --&gt; test/x.rs:4:13\n  |\n4 |             *n += 1; //~ ERROR cannot assign to immutable\n  |             ^^^^^^^ `n` is a `&amp;` reference, so the data it refers to cannot be written\n</pre></div>\n\n\n<p><code>temp</code> is a stub name, compiling libstd</p>",
        "id": 133013427,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535567354
    },
    {
        "content": "<blockquote>\n<p>cannot borrow <code>temp</code> as mutable, as it is not declared as mutable</p>\n</blockquote>",
        "id": 133013490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567421
    },
    {
        "content": "<p>that seems curious</p>",
        "id": 133013491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567424
    },
    {
        "content": "<p>can I see your diff?</p>",
        "id": 133013498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567434
    },
    {
        "content": "<p>(e.g., can you push commits somewhere?)</p>",
        "id": 133013501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567437
    },
    {
        "content": "<p>creating it</p>",
        "id": 133013592,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535567562
    },
    {
        "content": "<p><a href=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9\" target=\"_blank\" title=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9\">https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9</a> I didn't change <code>as_rval</code>, just checking by trace</p>",
        "id": 133013902,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535567956
    },
    {
        "content": "<p>MIR</p>\n<div class=\"codehilite\"><pre><span></span>    let mut _2: &amp;&#39;5s mut &amp;&#39;22s std::option::Option&lt;i32&gt;;\n    let _3: &amp;&#39;22s std::option::Option&lt;i32&gt;;\n    let mut _4: std::option::Option&lt;i32&gt;;\n        _4 = std::option::Option&lt;i32&gt;::Some(const 5i32,); // bb0[4]: scope 0 at test/x.rs:2:17: 2:27\n        _3 = &amp;&#39;22s _4;                   // bb0[6]: scope 0 at test/x.rs:2:16: 2:27\n        _2 = &amp;&#39;5s mut _3;                // bb0[8]: scope 0 at test/x.rs:2:11: 2:27\n ```\n</pre></div>",
        "id": 133014183,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535568296
    },
    {
        "content": "<p>see <a href=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9#r30333329\" target=\"_blank\" title=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9#r30333329\">this comment</a>, more in a sec</p>",
        "id": 133014224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568347
    },
    {
        "content": "<blockquote>\n<p>see <a href=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9#r30333329\" target=\"_blank\" title=\"https://github.com/mikhail-m1/rust/commit/d1109b8c75e65aed079dba7128ff8723597342c9#r30333329\">this comment</a>, more in a sec</p>\n</blockquote>\n<p>yes, right now i just check that as_place that create temp is called from as_rvalue Borrow, I think result will be the same for this sample, of cause it's wrong in general</p>",
        "id": 133014676,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535568777
    },
    {
        "content": "<p>the result is not the same</p>",
        "id": 133014817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568930
    },
    {
        "content": "<p>in particular</p>",
        "id": 133014818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568931
    },
    {
        "content": "<p>well, let me double check :)</p>",
        "id": 133014821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568935
    },
    {
        "content": "<p>right, I think it will not be the same</p>",
        "id": 133014829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568951
    },
    {
        "content": "<p>if you have <code>EXPR1</code> defined as <code>&amp;EXPR2</code></p>",
        "id": 133014831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568956
    },
    {
        "content": "<p>what we want to do is to create an (immutable) temporary to store <code>EXPR2</code></p>",
        "id": 133014877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568967
    },
    {
        "content": "<p>but we are creating, iiuc, an immutable temporary to store <code>EXPR1</code></p>",
        "id": 133014883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535568975
    },
    {
        "content": "<p>make sense?</p>",
        "id": 133014963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569078
    },
    {
        "content": "<p>this would, I believe, give rise to those spurious errors you are reporting... e.g., if we have <code>&amp;mut &amp;Some(5i32)</code>, then we will create an immutable temp storing <code>&amp;Some(5i32)</code>, which can't be borrowed mutably</p>",
        "id": 133015027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569124
    },
    {
        "content": "<p>but in my version, the temp that stores <code>&amp;Some(5i32)</code> would be mutable</p>",
        "id": 133015032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569137
    },
    {
        "content": "<p>(but the temp storing <code>Some(5i32)</code> would not)</p>",
        "id": 133015044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569146
    },
    {
        "content": "<p>can you change the MIR sample?</p>",
        "id": 133015063,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535569176
    },
    {
        "content": "<p>yep</p>",
        "id": 133015073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> let mut _2: &amp;&#39;5s mut &amp;&#39;22s std::option::Option&lt;i32&gt;;\n    let mut _3: &amp;&#39;22s std::option::Option&lt;i32&gt;; // &lt;-- changed to be mut\n    let _4: std::option::Option&lt;i32&gt;; // &lt;-- changed to be immut\n        _4 = std::option::Option&lt;i32&gt;::Some(const 5i32,); // bb0[4]: scope 0 at test/x.rs:2:17: 2:27\n        _3 = &amp;&#39;22s _4;                   // bb0[6]: scope 0 at test/x.rs:2:16: 2:27\n        _2 = &amp;&#39;5s mut _3;                // bb0[8]: scope 0 at test/x.rs:2:11: 2:27\n ```\n</pre></div>",
        "id": 133015143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569213
    },
    {
        "content": "<p>note the <code>// &lt;--</code> comments</p>",
        "id": 133015149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569223
    },
    {
        "content": "<p>thanks</p>",
        "id": 133015156,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535569243
    },
    {
        "content": "<p>i will try to do this</p>",
        "id": 133015205,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535569320
    },
    {
        "content": "<p>I think we may have to extend <code>as_place</code></p>",
        "id": 133015248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569328
    },
    {
        "content": "<p>or add an optional variant</p>",
        "id": 133015253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569331
    },
    {
        "content": "<p>that includes the mutability of temporary needed</p>",
        "id": 133015256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569337
    },
    {
        "content": "<p>though we can hack it in another way perhaps</p>",
        "id": 133015281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535569356
    },
    {
        "content": "<p>hmm I did not realize that <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> was still working on this</p>",
        "id": 133024434,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535579796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I created a review,  no it's 18s vs 68s on nightly. <a href=\"https://github.com/rust-lang/rust/pull/53909\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53909\">https://github.com/rust-lang/rust/pull/53909</a></p>",
        "id": 133226498,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1535918015
    },
    {
        "content": "<p>nice! Let's do a perf run, I guess</p>",
        "id": 133323979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536081890
    },
    {
        "content": "<p>maybe I'll do a local build too, I'm curious to profile that result</p>",
        "id": 133323994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536081904
    },
    {
        "content": "<p>btw <a href=\"https://github.com/rust-lang/rust/pull/53942\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53942\">https://github.com/rust-lang/rust/pull/53942</a> results are -60% on ucd</p>",
        "id": 133324409,
        "sender_full_name": "lqd",
        "timestamp": 1536082355
    },
    {
        "content": "<p>Still ~400% afterwards, but better than the current &gt;100%.</p>",
        "id": 133328055,
        "sender_full_name": "simulacrum",
        "timestamp": 1536086055
    },
    {
        "content": "<p>yeah, I saw. nice!</p>",
        "id": 133329634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536087611
    },
    {
        "content": "<p>the try build is ready for rust-timerification <a href=\"https://github.com/rust-lang/rust/pull/53909#issuecomment-418501219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53909#issuecomment-418501219\">https://github.com/rust-lang/rust/pull/53909#issuecomment-418501219</a></p>",
        "id": 133336111,
        "sender_full_name": "lqd",
        "timestamp": 1536094614
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  , what should I do with this <a href=\"https://github.com/rust-lang/rust/pull/53909#discussion_r215004417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53909#discussion_r215004417\">comment</a>?</p>",
        "id": 133376692,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536155347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> I think we can easily tell if a local variable has any moves by using the <code>MoveData</code></p>",
        "id": 133376820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155492
    },
    {
        "content": "<p>which I suppose you are familiar-ish with :)</p>",
        "id": 133376833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155511
    },
    {
        "content": "<p>in particular if we iterate over all child-move-paths of the variable</p>",
        "id": 133376887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155550
    },
    {
        "content": "<p>ok, so if it has has any move we cannot ignore it, right?</p>",
        "id": 133376902,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536155568
    },
    {
        "content": "<p>and check whether the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.MoveData.html#structfield.path_map\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/move_paths/struct.MoveData.html#structfield.path_map\">path map</a> is empty</p>",
        "id": 133376904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155569
    },
    {
        "content": "<p>yeah</p>",
        "id": 133376906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155572
    },
    {
        "content": "<p>basically similar to the storage-dead thing</p>",
        "id": 133376921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155587
    },
    {
        "content": "<p>probably we want to rename the \"has storage dead\" actually</p>",
        "id": 133377005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155645
    },
    {
        "content": "<p>to \"has storage dead or moves\" or something like that</p>",
        "id": 133377017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155651
    },
    {
        "content": "<p>ok, and I'm going to make a change suggested by <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  <a href=\"https://github.com/rust-lang/rust/pull/53909#discussion_r214856869\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53909#discussion_r214856869\">https://github.com/rust-lang/rust/pull/53909#discussion_r214856869</a></p>",
        "id": 133377143,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536155775
    },
    {
        "content": "<p>sounds good</p>",
        "id": 133377248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536155886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  just want to check I added move out next way</p>\n<div class=\"codehilite\"><pre><span></span>            for move_out in &amp;move_data.moves {\n                if let Place::Local(index) = move_data.move_paths[move_out.path].place {\n                    has_storage_dead_or_moved.insert(index);\n                }\n            }\n</pre></div>\n\n\n<p>but you mentioned <code>path_map</code></p>",
        "id": 133404874,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536183770
    },
    {
        "content": "<p>oh, that's .. smarter than what I suggested :)</p>",
        "id": 133404887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183789
    },
    {
        "content": "<p>well wait</p>",
        "id": 133404898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183805
    },
    {
        "content": "<p>it's a good overall approach but I think the <code>if let</code> is wrong</p>",
        "id": 133404908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183821
    },
    {
        "content": "<p>in particular, if you have a move from something like <code>a.b.c</code></p>",
        "id": 133404914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183831
    },
    {
        "content": "<p>we still want to disqualify <code>a</code></p>",
        "id": 133404919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183837
    },
    {
        "content": "<p>so we could do something like walk up the <code>MovePathIndex</code> parent links</p>",
        "id": 133404973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183877
    },
    {
        "content": "<p>until we find the root MPI</p>",
        "id": 133404975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183879
    },
    {
        "content": "<p>which will be a local</p>",
        "id": 133404977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183881
    },
    {
        "content": "<p>and/or we could do that on the place too</p>",
        "id": 133404978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183884
    },
    {
        "content": "<p>yes, i just want to check for loop and get path code</p>",
        "id": 133404980,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536183891
    },
    {
        "content": "<p>there is .. probably .. an existing method</p>",
        "id": 133404981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536183894
    },
    {
        "content": "<p>I updated the PR yesterday</p>",
        "id": 133461698,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536259939
    },
    {
        "content": "<p>oh, nice</p>",
        "id": 133461800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536260052
    },
    {
        "content": "<p>remember that whoever r+ will <a href=\"https://github.com/rust-lang/rust/pull/53942#issuecomment-418873477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53942#issuecomment-418873477\">owe njn $5</a></p>",
        "id": 133461895,
        "sender_full_name": "lqd",
        "timestamp": 1536260180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> btw, in the older version, did all tests pass?</p>",
        "id": 133461922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536260237
    },
    {
        "content": "<p>if so, maybe I need to make a test that would've failed...</p>",
        "id": 133461925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536260244
    },
    {
        "content": "<p>(ah, I recall thinking that would be potentially hard to do actually due to the limitations on constants)</p>",
        "id": 133461932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536260266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> I left a few nits</p>",
        "id": 133462313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536260678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  updated once more and rustfmt <code>librustc_mir/build/expr</code></p>",
        "id": 133471836,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1536270101
    }
]