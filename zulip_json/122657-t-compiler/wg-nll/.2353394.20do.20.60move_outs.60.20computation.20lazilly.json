[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, this PR does a reverse DFS <a href=\"https://github.com/rust-lang/rust/pull/53314/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53314/\">https://github.com/rust-lang/rust/pull/53314/</a>  -- but I realize it is perhaps a bit different than what you would do, since it does it based on <code>PointIndex</code> values (which map to <code>Location</code>)</p>",
        "id": 132203548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372021
    },
    {
        "content": "<p>the heart of the search though is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">compute_use_live_points_for</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">live_local</span>: <span class=\"nc\">LocalWithRegion</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">local_use_map</span><span class=\"p\">.</span><span class=\"n\">uses</span><span class=\"p\">(</span><span class=\"n\">live_local</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">defs</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">use_live_at</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">point_index_map</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push_predecessors</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132203573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372058
    },
    {
        "content": "<p>from <a href=\"https://github.com/rust-lang/rust/pull/53314/files#diff-cce6962a21c56d1c1801dd6ebb69fe84R196\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53314/files#diff-cce6962a21c56d1c1801dd6ebb69fe84R196\">here</a></p>",
        "id": 132203640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372089
    },
    {
        "content": "<p>but I think to rewrite in terms of locations it would look something like</p>",
        "id": 132203642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372099
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">initial_location</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">already_visited</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// start of basic block</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">predecessor_block</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predecessor_end_location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">predecessor_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">predecessor_end_location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132203705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372192
    },
    {
        "content": "<p>where <code>terminator_loc</code> is the helper <a href=\"https://github.com/rust-lang/rust/pull/53314/files#diff-f0577ac900ffbd36d3bb3421a928cbbdR333\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53314/files#diff-f0577ac900ffbd36d3bb3421a928cbbdR333\">I added here</a> and which you probably want to just add in your PR as well:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">terminator_loc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bb</span>: <span class=\"nc\">BasicBlock</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">block</span>: <span class=\"nc\">bb</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">statement_index</span>: <span class=\"nc\">self</span><span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">].</span><span class=\"n\">statements</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132203782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372222
    },
    {
        "content": "<p>does that make any sense?</p>",
        "id": 132203783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372225
    },
    {
        "content": "<p>yeap</p>",
        "id": 132203906,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372359
    },
    {
        "content": "<p>makes sense</p>",
        "id": 132203907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was wondering about some types, in particular <code>MoveData</code></p>",
        "id": 132203937,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372403
    },
    {
        "content": "<p>for instance, what does this <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L131\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L131\">https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L131</a> represents?</p>",
        "id": 132203942,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372414
    },
    {
        "content": "<p>mpi is the actual location where the move happened?</p>",
        "id": 132203944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372423
    },
    {
        "content": "<p>or what?</p>",
        "id": 132203946,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372432
    },
    {
        "content": "<p>well the actual location I guess it's content.loc</p>",
        "id": 132203994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372469
    },
    {
        "content": "<p>I'm not sure what mpi is and what is that mapping</p>",
        "id": 132204004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372480
    },
    {
        "content": "<p>so</p>",
        "id": 132204009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372492
    },
    {
        "content": "<p>a <code>MovePathIndex</code> is the index of a particular place</p>",
        "id": 132204012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372502
    },
    {
        "content": "<p>in particular, we map each place that is moved from (e.g., <code>a.b.c</code>) to an MPI</p>",
        "id": 132204021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372511
    },
    {
        "content": "<p>I believe then that this map you pointed me at</p>",
        "id": 132204027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372534
    },
    {
        "content": "<p>tells us each of the <code>MoveOutIndex</code> values that move a particular MPI</p>",
        "id": 132204081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372565
    },
    {
        "content": "<p>a <code>MoveOutIndex</code> is the unique index given to each move</p>",
        "id": 132204088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372570
    },
    {
        "content": "<p>you can look up more information about a move here:</p>",
        "id": 132204099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372591
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L125\">https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L125</a></p>",
        "id": 132204100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372593
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L174-L186\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L174-L186\">the <code>MoveOut</code> structure</a></p>",
        "id": 132204105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372611
    },
    {
        "content": "<p>make sense <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 132204109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534372617
    },
    {
        "content": "<p>got distracted reading the code :)</p>",
        "id": 132204122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372645
    },
    {
        "content": "<p>let me read what you've said</p>",
        "id": 132204125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372650
    },
    {
        "content": "<p>ahh I see</p>",
        "id": 132204188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372704
    },
    {
        "content": "<p>let me see if I got it right</p>",
        "id": 132204203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372743
    },
    {
        "content": "<p>so when you have a.b.c</p>",
        "id": 132204216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372763
    },
    {
        "content": "<p>you have a map from and index of that path the mpi, which I guess it containts the location where that shows up? to the places a, a.b and a.b.c ?</p>",
        "id": 132204295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372836
    },
    {
        "content": "<p>is more or less that what you meant?</p>",
        "id": 132204298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534372844
    },
    {
        "content": "<p>so yes there is an MPI for <code>a.b.c.</code>, but also for <code>a.b</code> and <code>a</code></p>",
        "id": 132204407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373033
    },
    {
        "content": "<p>and they are linked</p>",
        "id": 132204408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373035
    },
    {
        "content": "<p>i.e., I can go to the \"parents\" of the MPI for <code>a.b.c</code> and it will give me <code>a.b</code> and <code>a</code></p>",
        "id": 132204450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373046
    },
    {
        "content": "<p>the MPI itself just maps to a place</p>",
        "id": 132204453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373052
    },
    {
        "content": "<p>ok</p>",
        "id": 132204465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534373067
    },
    {
        "content": "<p>then the <code>MoveOut</code> structure indicates a particular move of some place at some location</p>",
        "id": 132204467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373070
    },
    {
        "content": "<p>and so we have a map from the MPI To the move-outs that involve that MPI</p>",
        "id": 132204473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373079
    },
    {
        "content": "<p>so that gives you -- basically -- all the places that an MPI is moved</p>",
        "id": 132204478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534373090
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 132204495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534373112
    },
    {
        "content": "<p>so in that search if I need to search for an assign to that place</p>",
        "id": 132205191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I remember you showed me some code this morning about this</p>",
        "id": 132205208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374076
    },
    {
        "content": "<p>I need to search for the kills</p>",
        "id": 132205212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374088
    },
    {
        "content": "<p>mmm</p>",
        "id": 132205262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374128
    },
    {
        "content": "<p>why do you want to search for that? :)</p>",
        "id": 132205264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374133
    },
    {
        "content": "<p>don't we need to explain why the thing was moved?</p>",
        "id": 132205276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374166
    },
    {
        "content": "<p>I think you want to check for the <em>moves</em> that occur at a particular location, right?</p>",
        "id": 132205279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374179
    },
    {
        "content": "<p>(vs assignments)</p>",
        "id": 132205286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374186
    },
    {
        "content": "<p>and I think that <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L130\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/move_paths/mod.rs#L130\">this field</a> is what you want</p>",
        "id": 132205299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374234
    },
    {
        "content": "<p>yeah, I'm probably not understanding something correctly</p>",
        "id": 132205353,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374267
    },
    {
        "content": "<p>so</p>",
        "id": 132205359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">report_use_of_moved_or_uninitialized</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">context</span>: <span class=\"nc\">Context</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">desired_action</span>: <span class=\"nc\">InitializationRequiringAction</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mpi</span>: <span class=\"nc\">MovePathIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132205365,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374280
    },
    {
        "content": "<p>I was guessing that mpi it's the index for the place that's being used after a move</p>",
        "id": 132205383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374310
    },
    {
        "content": "<p>and given that we don't have the information why that thing was moved</p>",
        "id": 132205388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374322
    },
    {
        "content": "<p>we were going to search for that</p>",
        "id": 132205393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374330
    },
    {
        "content": "<p>so I guess you're saying that we do that search looking for the moves that are happening and see if one of those moves is the one I'm about to report?</p>",
        "id": 132205486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374466
    },
    {
        "content": "<p>is that what you meant?</p>",
        "id": 132205488,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374469
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 132205661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374649
    },
    {
        "content": "<p>I think we want to search backwards from <code>context.loc</code></p>",
        "id": 132205665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374657
    },
    {
        "content": "<p>yes</p>",
        "id": 132205671,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374662
    },
    {
        "content": "<p>at each place, we can iterate over the moves that occur there</p>",
        "id": 132205678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374667
    },
    {
        "content": "<p>and check which paths they affect</p>",
        "id": 132205681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374673
    },
    {
        "content": "<p>in particular look for a <code>MoveOut</code> that moves <code>mpi</code></p>",
        "id": 132205687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374683
    },
    {
        "content": "<p>when we find that, we can stop the search</p>",
        "id": 132205692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374688
    },
    {
        "content": "<p>so for the sake of understanding a bit better, why does this <code>don't we need to explain why the thing was moved?</code> would be wrong?</p>",
        "id": 132205696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374699
    },
    {
        "content": "<p>maybe I'm not sure what you mean by that</p>",
        "id": 132205701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374714
    },
    {
        "content": "<p>it seems like finding the moves</p>",
        "id": 132205703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374717
    },
    {
        "content": "<p><em>is</em> explaining the thing that was moved</p>",
        "id": 132205741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374724
    },
    {
        "content": "<p>that is, we want to find the moves, so we can show them</p>",
        "id": 132205748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374732
    },
    {
        "content": "<p>ahh the thing is the moves where already calculated, right?</p>",
        "id": 132205753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374743
    },
    {
        "content": "<p>it occurs to me that we will also need to search each place for the initializations, which is maybe what you meant initially</p>",
        "id": 132205754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374744
    },
    {
        "content": "<p>ah, right, yes. the <code>MoveData</code> already has indexed the moves that occur at any given location</p>",
        "id": 132205761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374762
    },
    {
        "content": "<p>so we are just searching backwards through that index</p>",
        "id": 132205763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374766
    },
    {
        "content": "<p>what I've said \"calculates\" that again</p>",
        "id": 132205764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374769
    },
    {
        "content": "<p>ok</p>",
        "id": 132205765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374772
    },
    {
        "content": "<p>makes a lot of sense</p>",
        "id": 132205771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374782
    },
    {
        "content": "<p>but we also need to look for initialization, because of examples like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- error here</span>\n</pre></div>",
        "id": 132205778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374804
    },
    {
        "content": "<p>in particular, we would walk backwards and find the second <code>drop(x)</code></p>",
        "id": 132205779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374814
    },
    {
        "content": "<p>and when we encoutner the <code>x = vec![]</code> we want to stop the search there too</p>",
        "id": 132205780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374821
    },
    {
        "content": "<p>that's more or less what I mean when I ask you about data structures and the information that you have around, it's easy to see what to do, but harder to see what stuff you have around and all that :)</p>",
        "id": 132205781,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374826
    },
    {
        "content": "<p>and not keep going (else we wil also find the <em>first</em> <code>x = vec![]</code>)</p>",
        "id": 132205783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374829
    },
    {
        "content": "<p>the code was going ...</p>",
        "id": 132205830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374861
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mois</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">path_map</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">moi</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">curr_move_out</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">moi</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132205833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374879
    },
    {
        "content": "<p>I guess I should keep returning mois</p>",
        "id": 132205836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374896
    },
    {
        "content": "<p>?</p>",
        "id": 132205838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374898
    },
    {
        "content": "<p>yes probably</p>",
        "id": 132205848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374917
    },
    {
        "content": "<p>which I don't remember what I was :P</p>",
        "id": 132205849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374924
    },
    {
        "content": "<p>that'd be easy enough to do anyway</p>",
        "id": 132205850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374925
    },
    {
        "content": "<p>ok</p>",
        "id": 132205851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374926
    },
    {
        "content": "<p>that is just a unique index</p>",
        "id": 132205852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374928
    },
    {
        "content": "<p>assigned to each <code>MoveOut</code></p>",
        "id": 132205853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374931
    },
    {
        "content": "<p>ok</p>",
        "id": 132205854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374934
    },
    {
        "content": "<p>(which are collected into a vector)</p>",
        "id": 132205856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534374937
    },
    {
        "content": "<p>so last thing I'm not sure about</p>",
        "id": 132205858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374947
    },
    {
        "content": "<p>you said <code>and when we encoutner the x = vec![] we want to stop the search there too</code></p>",
        "id": 132205906,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374970
    },
    {
        "content": "<p>well we stop when the thing was first initialized I guess</p>",
        "id": 132205911,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374981
    },
    {
        "content": "<p>but if it was moved we keep searching ?</p>",
        "id": 132205919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534374991
    },
    {
        "content": "<p>don't remember what's actually being reported but if it's moved in more than one place I guess we want all of them</p>",
        "id": 132205924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375014
    },
    {
        "content": "<p>and that's I guess why is mois and not moi</p>",
        "id": 132205929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375025
    },
    {
        "content": "<blockquote>\n<p>but if it was moved we keep searching ?</p>\n</blockquote>\n<p>no, I think we stop when we encounter a move</p>",
        "id": 132205938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375047
    },
    {
        "content": "<blockquote>\n<p>and that's I guess why is mois and not moi</p>\n</blockquote>\n<p>yes</p>",
        "id": 132205940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375053
    },
    {
        "content": "<p>the <code>MoveData</code> should <em>also</em> track which was initialized at each spot</p>",
        "id": 132205942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375063
    },
    {
        "content": "<p>in terms of the dataflow...</p>",
        "id": 132205944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375067
    },
    {
        "content": "<p>the moves are a <em>gen</em> (and we can stop there, because if there was a preceding move, it'd be an error to move twice)</p>",
        "id": 132205945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375073
    },
    {
        "content": "<p>and the initializations are a <em>kill</em></p>",
        "id": 132205975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375083
    },
    {
        "content": "<p>(and we can stop there, because if there was a preceding move, it would have been killed)</p>",
        "id": 132205990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375097
    },
    {
        "content": "<p>so actually looking at the impl and seeing how it defines gen and kill</p>",
        "id": 132205996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375122
    },
    {
        "content": "<p>can help you to navigate the data structures</p>",
        "id": 132206003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375127
    },
    {
        "content": "<p>one sec I will give you the link</p>",
        "id": 132206004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375132
    },
    {
        "content": "<p>I still not see where the plural of mois come from</p>",
        "id": 132206013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375149
    },
    {
        "content": "<p>that: <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L491-L566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L491-L566\">https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L491-L566</a></p>",
        "id": 132206015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375157
    },
    {
        "content": "<p>if you stop in the first move</p>",
        "id": 132206017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375159
    },
    {
        "content": "<p>well there can be multiple paths</p>",
        "id": 132206024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375165
    },
    {
        "content": "<p>e.g.</p>",
        "id": 132206026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375166
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>if true {\n  drop(x);\n} else {\n  drop(x);\n}\nuse(x);\n</pre></div>",
        "id": 132206030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375176
    },
    {
        "content": "<p>ahh ya</p>",
        "id": 132206033,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375181
    },
    {
        "content": "<p>right</p>",
        "id": 132206034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375183
    },
    {
        "content": "<p>that's tracked by kills and gens</p>",
        "id": 132206040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375198
    },
    {
        "content": "<p>ok</p>",
        "id": 132206041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L527-L528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L527-L528\">here is the code that generates the *kills* at  a given location</a> -- in other words, to walk the set of paths initialized</p>",
        "id": 132206106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375263
    },
    {
        "content": "<p>this I think <a href=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L523\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f4b4987cd6dea5406dec0634770839fb31ce72c/src/librustc_mir/dataflow/impls/mod.rs#L523\">generates the <code>gens</code></a></p>",
        "id": 132206123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375295
    },
    {
        "content": "<p>I just need one of those, right?</p>",
        "id": 132206550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375905
    },
    {
        "content": "<p>one of whats? :)</p>",
        "id": 132206557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375915
    },
    {
        "content": "<p>kills or gens</p>",
        "id": 132206568,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375922
    },
    {
        "content": "<p>so I keep iterating meanwhile I see the thing in the kills set</p>",
        "id": 132206600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375930
    },
    {
        "content": "<p>well I think we prob want to stop the search at <em>either</em> an initialization (kill) or a move (gen)</p>",
        "id": 132206603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375944
    },
    {
        "content": "<p>so we kind of have to look for both I guess?</p>",
        "id": 132206606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534375950
    },
    {
        "content": "<p>ahh right</p>",
        "id": 132206608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375959
    },
    {
        "content": "<p>ok</p>",
        "id": 132206612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534375966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just had a chance to leave this thing running</p>",
        "id": 132264083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451396
    },
    {
        "content": "<p>there's a test failing</p>",
        "id": 132264122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451404
    },
    {
        "content": "<p>still running</p>",
        "id": 132264125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451406
    },
    {
        "content": "<p>I mean, so we are covered :)</p>",
        "id": 132264245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451538
    },
    {
        "content": "<p>I need to add the \"initialized\" code</p>",
        "id": 132264259,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451554
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n\n---- [ui] ui/borrowck/borrowck-storage-dead.rs stdout ----\n\nThe actual stderr differed from the expected stderr.\nActual stderr saved to /home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/test/ui/borrowck/borrowck-storage-dead/borrowck-storage-dead.stderr\nActual stderr saved to /home/santiago/src/oss/rust1/src/test/ui/borrowck/borrowck-storage-dead.stderr\n\nerror: /home/santiago/src/oss/rust1/src/test/ui/borrowck/borrowck-storage-dead.rs:28: unexpected error: &#39;28:17: 28:18: use of moved value: `x` (Mir) [E0382]&#39;\n\nerror: /home/santiago/src/oss/rust1/src/test/ui/borrowck/borrowck-storage-dead.rs:28: expected error not found: (Mir) [E0381]\n\nerror: 1 unexpected errors found, 1 expected errors not found\nstatus: exit code: 1\ncommand: &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/santiago/src/oss/rust1/src/test/ui/borrowck/borrowck-storage-dead.rs&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/test/ui/borrowck/borrowck-storage-dead/a&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-Z&quot; &quot;borrowck=compare&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/test/ui/borrowck/borrowck-storage-dead/auxiliary&quot; &quot;-A&quot; &quot;unused&quot;\nunexpected errors (from JSON output): [\n    Error {\n        line_num: 28,\n        kind: Some(\n            Error\n        ),\n        msg: &quot;28:17: 28:18: use of moved value: `x` (Mir) [E0382]&quot;\n    }\n]\n\nnot found errors (from test file): [\n    Error {\n        line_num: 28,\n        kind: Some(\n            Error\n        ),\n        msg: &quot;(Mir) [E0381]&quot;\n    }\n]\n\nthread &#39;[ui] ui/borrowck/borrowck-storage-dead.rs&#39; panicked at &#39;explicit panic&#39;, tools/compiletest/src/runtest.rs:1283:13\nstack backtrace:\n   0:     0x556149dabcee - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::hab08c28baa7df427\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1:     0x556149d9c3d6 - std::sys_common::backtrace::print::hb73053b1bfdbfebe\n                               at libstd/sys_common/backtrace.rs:71\n                               at libstd/sys_common/backtrace.rs:59\n   2:     0x556149d98c1d - std::panicking::default_hook::{{closure}}::h3f1dc75ac5c59882\n                               at libstd/panicking.rs:211\n   3:     0x556149d9892b - std::panicking::default_hook::h6e2cc1a5e193171c\n                               at libstd/panicking.rs:221\n   4:     0x556149d9928c - std::panicking::rust_panic_with_hook::h75e1df07c2b91379\n                               at libstd/panicking.rs:475\n   5:     0x556149c6b1c6 - std::panicking::begin_panic::he049bbdeb48f06a3\n   6:     0x556149c86bc9 - compiletest::runtest::TestCx::check_expected_errors::h1c23466ab236c27d\n   7:     0x556149c7bc29 - compiletest::runtest::TestCx::run_revision::heaee5cdb04caf6d8\n   8:     0x556149c743eb - compiletest::runtest::run::h70337afe44c21fe2\n   9:     0x556149c99ca2 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h827c94cb4a225c9d\n  10:     0x556149cdff42 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h389fb44a69e56229\n                               at libtest/lib.rs:1444\n                               at /checkout/src/liballoc/boxed.rs:642\n  11:     0x556149dbe949 - __rust_maybe_catch_panic\n                               at libpanic_unwind/lib.rs:105\n  12:     0x556149cfcfef - std::sys_common::backtrace::__rust_begin_short_backtrace::h82f6704267b276a2\n                               at /checkout/src/libstd/panicking.rs:289\n                               at /checkout/src/libstd/panic.rs:392\n                               at libtest/lib.rs:1406\n                               at /checkout/src/libstd/sys_common/backtrace.rs:136\n  13:     0x556149cfd9a4 - std::panicking::try::do_call::h14201cddbab609e9\n                               at /checkout/src/libstd/thread/mod.rs:409\n                               at /checkout/src/libstd/panic.rs:313\n                               at /checkout/src/libstd/panicking.rs:310\n  14:     0x556149dbe949 - __rust_maybe_catch_panic\n                               at libpanic_unwind/lib.rs:105\n  15:     0x556149cf33a6 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h22e4c29e48b9d747\n                               at /checkout/src/libstd/panicking.rs:289\n                               at /checkout/src/libstd/panic.rs:392\n                               at /checkout/src/libstd/thread/mod.rs:408\n                               at /checkout/src/liballoc/boxed.rs:642\n  16:     0x556149d9b0ca - std::sys_common::thread::start_thread::h54ff7746c22c98d3\n                               at /checkout/src/liballoc/boxed.rs:652\n                               at libstd/sys_common/thread.rs:24\n  17:     0x556149d997f5 - std::sys::unix::thread::Thread::new::thread_start::h817575057e7b413b\n                               at libstd/sys/unix/thread.rs:90\n  18:     0x7fbfa5206a8c - start_thread\n  19:     0x7fbfa511c822 - clone\n  20:                0x0 - &lt;unknown&gt;\n\n---- [ui] ui/issues/issue-15919.rs stdout ----\n\nerror: Error: expected failure status (Some(1)) but received status None.\nstatus: signal: 6\ncommand: &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/santiago/src/oss/rust1/src/test/ui/issues/issue-15919.rs&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-15919/a&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-15919/auxiliary&quot; &quot;-A&quot; &quot;unused&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n{&quot;message&quot;:&quot;the type `[usize; 18446744073709551615]` is too big for the current architecture&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[],&quot;children&quot;:[],&quot;rendered&quot;:&quot;error: the type `[usize; 18446744073709551615]` is too big for the current architecture\\n\\n&quot;}\n{&quot;message&quot;:&quot;aborting due to previous error&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[],&quot;children&quot;:[],&quot;rendered&quot;:&quot;error: aborting due to previous error\\n\\n&quot;}\nrustc: /home/santiago/src/oss/rust1/src/llvm/lib/CodeGen/TargetPassConfig.cpp:812: virtual void llvm::TargetPassConfig::addMachinePasses(): Assertion `TPI &amp;&amp; IPI &amp;&amp; &quot;Pass ID not registered!&quot;&#39; failed.\n\n------------------------------------------\n\nthread &#39;[ui] ui/issues/issue-15919.rs&#39; panicked at &#39;explicit panic&#39;, tools/compiletest/src/runtest.rs:3166:9\nstack backtrace:\n   0:     0x556149dabcee - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::hab08c28baa7df427\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1:     0x556149d9c3d6 - std::sys_common::backtrace::print::hb73053b1bfdbfebe\n                               at libstd/sys_common/backtrace.rs:71\n                               at libstd/sys_common/backtrace.rs:59\n   2:     0x556149d98c1d - std::panicking::default_hook::{{closure}}::h3f1dc75ac5c59882\n                               at libstd/panicking.rs:211\n   3:     0x556149d9892b - std::panicking::default_hook::h6e2cc1a5e193171c\n                               at libstd/panicking.rs:221\n   4:     0x556149d9928c - std::panicking::rust_panic_with_hook::h75e1df07c2b91379\n                               at libstd/panicking.rs:475\n   5:     0x556149c6b1c6 - std::panicking::begin_panic::he049bbdeb48f06a3\n   6:     0x556149c8fc3f - compiletest::runtest::ProcRes::fatal::hc58d063b69dc5824\n   7:     0x556149c8b7f2 - compiletest::runtest::TestCx::fatal_proc_rec::h748991f6d3edcb2a\n   8:     0x556149c7fa4f - compiletest::runtest::TestCx::check_correct_failure_status::hd887d1deee64ae79\n   9:     0x556149c7b073 - compiletest::runtest::TestCx::run_revision::heaee5cdb04caf6d8\n  10:     0x556149c743eb - compiletest::runtest::run::h70337afe44c21fe2\n  11:     0x556149c99ca2 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h827c94cb4a225c9d\n  12:     0x556149cdff42 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h389fb44a69e56229\n                               at libtest/lib.rs:1444\n                               at /checkout/src/liballoc/boxed.rs:642\n  13:     0x556149dbe949 - __rust_maybe_catch_panic\n                               at libpanic_unwind/lib.rs:105\n  14:     0x556149cfcfef - std::sys_common::backtrace::__rust_begin_short_backtrace::h82f6704267b276a2\n                               at /checkout/src/libstd/panicking.rs:289\n                               at /checkout/src/libstd/panic.rs:392\n                               at libtest/lib.rs:1406\n                               at /checkout/src/libstd/sys_common/backtrace.rs:136\n  15:     0x556149cfd9a4 - std::panicking::try::do_call::h14201cddbab609e9\n                               at /checkout/src/libstd/thread/mod.rs:409\n                               at /checkout/src/libstd/panic.rs:313\n                               at /checkout/src/libstd/panicking.rs:310\n  16:     0x556149dbe949 - __rust_maybe_catch_panic\n                               at libpanic_unwind/lib.rs:105\n  17:     0x556149cf33a6 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h22e4c29e48b9d747\n                               at /checkout/src/libstd/panicking.rs:289\n                               at /checkout/src/libstd/panic.rs:392\n                               at /checkout/src/libstd/thread/mod.rs:408\n                               at /checkout/src/liballoc/boxed.rs:642\n  18:     0x556149d9b0ca - std::sys_common::thread::start_thread::h54ff7746c22c98d3\n                               at /checkout/src/liballoc/boxed.rs:652\n                               at libstd/sys_common/thread.rs:24\n  19:     0x556149d997f5 - std::sys::unix::thread::Thread::new::thread_start::h817575057e7b\n</pre></div>",
        "id": 132264470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534451795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed something <a href=\"https://github.com/rust-lang/rust/pull/53403\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53403\">https://github.com/rust-lang/rust/pull/53403</a>, it's failing need to figure out what's going on after this thing runs</p>",
        "id": 132267617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534456400
    },
    {
        "content": "<p>but if you want to check how it goes you can see the commit there</p>",
        "id": 132267623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534456409
    },
    {
        "content": "<blockquote>\n<p>I mean, so we are covered :)</p>\n</blockquote>\n<p>nice :)</p>",
        "id": 132267624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534456415
    },
    {
        "content": "<p>debugging this issue</p>",
        "id": 132373956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622449
    },
    {
        "content": "<p>seeing this in the mir dump</p>",
        "id": 132373960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622457
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `main`\n// source = MirSource { def_id: DefId(0/0:3 ~ test[317d]::main[0]), promoted: None }\n// pass_name = nll\n// disambiguator = 0\n\n| Free Region Mapping\n| &#39;_#0r    | Global   | [&#39;_#0r, &#39;_#1r]\n| &#39;_#1r    | Local    | [&#39;_#1r]\n|\n| Inferred Region Values\n| &#39;_#0r    | U0 | {bb0[0..=127], &#39;_#0r}\n| &#39;_#1r    | U0 | {bb0[0..=127], &#39;_#1r}\n|\n| Inference Constraints\n| &#39;_#0r live at {bb0[0..=127]}\n| &#39;_#1r live at {bb0[0..=127]}\nfn main() -&gt; (){\n    let mut _0: ();                      // return place\n    scope 1 {\n    }\n    scope 2 {\n        let _1: i32;                     // &quot;x&quot; in scope 2 at test.rs:2:13: 2:14\n    }\n    let mut _2: i32;\n    let mut _3: i32;\n\n    bb0: {\n                                         | Live variables on entry to bb0[0]: []\n        UserAssertTy(Canonical { variables: [], value: i32 }, _1); // bb0[0]: scope 0 at test.rs:1:11: 5:2\n                                         | Live variables on entry to bb0[1]: []\n        StorageLive(_1);                 // bb0[1]: scope 0 at test.rs:2:13: 2:14\n                                         | Live variables on entry to bb0[2]: []\n        StorageLive(_2);                 // bb0[2]: scope 1 at test.rs:3:17: 3:22\n                                         | Live variables on entry to bb0[3]: []\n        StorageLive(_3);                 // bb0[3]: scope 1 at test.rs:3:17: 3:18\n                                         | Live variables on entry to bb0[4]: []\n        _3 = _1;                         // bb0[4]: scope 1 at test.rs:3:17: 3:18\n                                         | Live variables on entry to bb0[5]: []\n        _2 = Add(move _3, const 1i32);   // bb0[5]: scope 1 at test.rs:3:17: 3:22\n                                         // ty::Const\n                                         // + ty: i32\n                                         // + val: Scalar(Bits { size: 4, bits: 1 })\n                                         // mir::Constant\n                                         // + span: test.rs:3:21: 3:22\n                                         // + ty: i32\n                                         // + literal: Const { ty: i32, val: Scalar(Bits { size: 4, bits: 1 }) }\n                                         | Live variables on entry to bb0[6]: []\n        StorageDead(_3);                 // bb0[6]: scope 1 at test.rs:3:21: 3:22\n                                         | Live variables on entry to bb0[7]: []\n        StorageDead(_2);                 // bb0[7]: scope 1 at test.rs:3:22: 3:23\n                                         | Live variables on entry to bb0[8]: []\n        _0 = ();                         // bb0[8]: scope 0 at test.rs:1:11: 5:2\n                                         | Live variables on entry to bb0[9]: []\n        StorageDead(_1);                 // bb0[9]: scope 0 at test.rs:5:1: 5:2\n                                         | Live variables on entry to bb0[10]: []\n        return;                          // bb0[10]: scope 0 at test.rs:5:2: 5:2\n    | Live variables on exit from bb0: []\n    }\n}\n</pre></div>",
        "id": 132373968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622471
    },
    {
        "content": "<p>in particular I don't understand <code>_2 = Add(move _3, const 1i32);   // bb0[5]: scope 1 at test.rs:3:17: 3:22</code></p>",
        "id": 132373975,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622495
    },
    {
        "content": "<p>why it says <code>move</code> there?</p>",
        "id": 132373978,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622506
    },
    {
        "content": "<p><code>_3</code> is x and it's an i32</p>",
        "id": 132373981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622520
    },
    {
        "content": "<p>Temporaries are always moved</p>",
        "id": 132374023,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1534622530
    },
    {
        "content": "<p>Well, operands at least</p>",
        "id": 132374029,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1534622540
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 132374033,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534622548
    },
    {
        "content": "<p>gonna leave a couple of comments about what I've found on this issue, for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to check out and give some pointers :)</p>",
        "id": 132381396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637015
    },
    {
        "content": "<p>so ...</p>",
        "id": 132381398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637024
    },
    {
        "content": "<p>this code ...</p>",
        "id": 132381399,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637032
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ERROR (Ast) [E0381]</span>\n<span class=\"w\">                       </span><span class=\"c1\">//~^ ERROR (Mir) [E0381]</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132381400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637038
    },
    {
        "content": "<p>this is the code that make the current PR fail</p>",
        "id": 132381441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637063
    },
    {
        "content": "<p>the thing is that the algorithm is returning a collection with one moi when it should be empty</p>",
        "id": 132381454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637114
    },
    {
        "content": "<p>this is the mir dump ...</p>",
        "id": 132381459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// MIR for `main`\n// source = MirSource { def_id: DefId(0/0:3 ~ test[317d]::main[0]), promoted: None }\n// pass_name = nll\n// disambiguator = 0\n\n| Free Region Mapping\n| &#39;_#0r    | Global   | [&#39;_#0r, &#39;_#1r]\n| &#39;_#1r    | Local    | [&#39;_#1r]\n|\n| Inferred Region Values\n| &#39;_#0r    | U0 | {bb0[0], bb1[0], bb2[0..=10], bb3[0..=114], &#39;_#0r}\n| &#39;_#1r    | U0 | {bb0[0], bb1[0], bb2[0..=10], bb3[0..=114], &#39;_#1r}\n|\n| Inference Constraints\n| &#39;_#0r live at {bb0[0], bb1[0], bb2[0..=10], bb3[0..=114]}\n| &#39;_#1r live at {bb0[0], bb1[0], bb2[0..=10], bb3[0..=114]}\nfn main() -&gt; (){\n    let mut _0: ();                      // return place\n    scope 1 {\n    }\n    scope 2 {\n        let _3: i32;                     // &quot;x&quot; in scope 2 at test.rs:3:13: 3:14\n    }\n    let mut _1: !;\n    let mut _2: ();\n    let mut _4: i32;\n    let mut _5: i32;\n\n    bb0: {\n                                         | Live variables on entry to bb0[0]: []\n        goto -&gt; bb1;                     // bb0[0]: scope 0 at test.rs:2:5: 6:6\n    | Live variables on exit from bb0: []\n    }\n\n    bb1: {\n                                         | Live variables on entry to bb1[0]: []\n        falseUnwind -&gt; [real: bb2, cleanup: bb3]; // bb1[0]: scope 0 at test.rs:2:5: 6:6\n    | Live variables on exit from bb1: []\n    }\n\n    bb2: {\n                                         | Live variables on entry to bb2[0]: []\n        UserAssertTy(Canonical { variables: [], value: i32 }, _3); // bb2[0]: scope 0 at test.rs:2:10: 6:6\n                                         | Live variables on entry to bb2[1]: []\n        StorageLive(_3);                 // bb2[1]: scope 0 at test.rs:3:13: 3:14\n                                         | Live variables on entry to bb2[2]: []\n        StorageLive(_4);                 // bb2[2]: scope 1 at test.rs:4:17: 4:22\n                                         | Live variables on entry to bb2[3]: []\n        StorageLive(_5);                 // bb2[3]: scope 1 at test.rs:4:17: 4:18\n                                         | Live variables on entry to bb2[4]: []\n        _5 = _3;                         // bb2[4]: scope 1 at test.rs:4:17: 4:18\n                                         | Live variables on entry to bb2[5]: []\n        _4 = Add(move _5, const 1i32);   // bb2[5]: scope 1 at test.rs:4:17: 4:22\n                                         // ty::Const\n                                         // + ty: i32\n                                         // + val: Scalar(Bits { size: 4, bits: 1 })\n                                         // mir::Constant\n                                         // + span: test.rs:4:21: 4:22\n                                         // + ty: i32\n                                         // + literal: Const { ty: i32, val: Scalar(Bits { size: 4, bits: 1 }) }\n                                         | Live variables on entry to bb2[6]: []\n        StorageDead(_5);                 // bb2[6]: scope 1 at test.rs:4:21: 4:22\n                                         | Live variables on entry to bb2[7]: []\n        StorageDead(_4);                 // bb2[7]: scope 1 at test.rs:4:22: 4:23\n                                         | Live variables on entry to bb2[8]: []\n        _2 = ();                         // bb2[8]: scope 0 at test.rs:2:10: 6:6\n                                         | Live variables on entry to bb2[9]: []\n        StorageDead(_3);                 // bb2[9]: scope 0 at test.rs:6:5: 6:6\n                                         | Live variables on entry to bb2[10]: []\n        goto -&gt; bb1;                     // bb2[10]: scope 0 at test.rs:2:5: 6:6\n    | Live variables on exit from bb2: []\n    }\n\n    bb3: {                               // cleanup\n                                         | Live variables on entry to bb3[0]: []\n        resume;                          // bb3[0]: scope 0 at test.rs:1:1: 7:2\n    | Live variables on exit from bb3: []\n    }\n}\n</pre></div>",
        "id": 132381461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637149
    },
    {
        "content": "<p>what I'm seeing when I run with logs enabled is this ...</p>",
        "id": 132381505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: MirBorrowckCtxt::process_statement(bb2[0], UserAssertTy(Canonical { variables: [], value: i32 }, _3)): borrows in effect: [] borrows generated: [] uninits: [_0, _1, _2, _3, _4, _5] ever_init: [mp2@test.rs:2:10: 6:6 (Deep)]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: MirBorrowckCtxt::process_statement(bb2[1], StorageLive(_3)): borrows in effect: [] borrows generated: [] uninits: [_0, _1, _2, _3, _4, _5] ever_init: [mp2@test.rs:2:10: 6:6 (Deep)]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: MirBorrowckCtxt::process_statement(bb2[2], StorageLive(_4)): borrows in effect: [] borrows generated: [] uninits: [_0, _1, _2, _3, _4, _5] ever_init: [mp2@test.rs:2:10: 6:6 (Deep)]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: MirBorrowckCtxt::process_statement(bb2[3], StorageLive(_5)): borrows in effect: [] borrows generated: [] uninits: [_0, _1, _2, _3, _4, _5] ever_init: [mp2@test.rs:2:10: 6:6 (Deep)]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: MirBorrowckCtxt::process_statement(bb2[4], _5 = _3): borrows in effect: [] borrows generated: [] uninits: [_0, _1, _2, _3, _4, _5] ever_init: [mp2@test.rs:2:10: 6:6 (Deep)]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_access_permissions(_3, Read(Copy), No)\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_access_for_conflict(context=Context { kind: AssignRhs, loc: bb2[4] }, place_span=(_3, test.rs:4:17: 4:18), sd=Deep, rw=Read(Copy))\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_if_full_path_is_moved place: _3\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[3]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[2]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[1]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb1[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[10]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[9]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: moi=mo3\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: found\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb0[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: mois=[mo3]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_if_path_or_subpath_is_moved place: _3\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[3]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[2]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[1]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb1[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[10]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb2[9]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: moi=mo3\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: found\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: current_location=bb0[0]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check::error_reporting: report_use_of_moved_or_uninitialized: mois=[mo3]\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_if_assigned_path_is_moved place: _5\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_access_permissions(_5, Write(Mutate), ExceptUpvars)\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_access_for_conflict(context=Context { kind: AssignLhs, loc: bb2[4] }, place_span=(_5, test.rs:4:17: 4:18), sd=Shallow(None), rw=Write(Mutate))\nDEBUG 2018-08-18T21:10:04Z: rustc_mir::borrow_check: check_if_reassignment_to_immutable_state(_5)\n</pre></div>",
        "id": 132381516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637244
    },
    {
        "content": "<p>there you can see that it start going backwards and from the loop statement it ends restarting from the end and finding the x in x + 1 and it thinks its moved</p>",
        "id": 132381566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637344
    },
    {
        "content": "<p>I guess we should stop when a <code>StorageLive</code> for the thing that we are looking for is found</p>",
        "id": 132381570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> those are more or less my thoughts, will wait for your comments to see what are the options :)</p>",
        "id": 132381571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534637396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> ok I'll try to catch up shortly</p>",
        "id": 132527118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534868722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-1f44b\" title=\"hi\">:hi:</span></p>",
        "id": 132537028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534879970
    },
    {
        "content": "<p>sure</p>",
        "id": 132537031,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534879972
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 132591234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959311
    },
    {
        "content": "<p>hey</p>",
        "id": 132591651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959740
    },
    {
        "content": "<p>want to chat about this at some point? :)</p>",
        "id": 132591685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959792
    },
    {
        "content": "<p>not sure what is the current status</p>",
        "id": 132591693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959805
    },
    {
        "content": "<p>sure</p>",
        "id": 132591754,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959848
    },
    {
        "content": "<p>current status is the last stuff I've written :)</p>",
        "id": 132591758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959855
    },
    {
        "content": "<p>haven't touched again</p>",
        "id": 132591760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959861
    },
    {
        "content": "<p>my way back home was a pain</p>",
        "id": 132591765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959866
    },
    {
        "content": "<p>:(</p>",
        "id": 132591767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959871
    },
    {
        "content": "<p>had a 12hs delay in the last flight</p>",
        "id": 132591770,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959879
    },
    {
        "content": "<p>oh wow</p>",
        "id": 132591775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959885
    },
    {
        "content": "<p>I didn't even had to complain that the airline already gave me a lot of miles</p>",
        "id": 132591789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959910
    },
    {
        "content": "<p>without complaining</p>",
        "id": 132591791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959913
    },
    {
        "content": "<p>anyway, I've sent a huge complain</p>",
        "id": 132591801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959925
    },
    {
        "content": "<p>because we all think they have lied in a lot of things</p>",
        "id": 132591817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959939
    },
    {
        "content": "<p>and basically were avoiding saying that the flight was cancelled to avoid paying a hotel for each of us</p>",
        "id": 132591827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959961
    },
    {
        "content": "<p>they kept delaying 2hs</p>",
        "id": 132591876,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959976
    },
    {
        "content": "<p>yeah it seems like some number of hours is effectively a cancellation</p>",
        "id": 132591877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959979
    },
    {
        "content": "<p>then 3 more</p>",
        "id": 132591879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959982
    },
    {
        "content": "<p>etc</p>",
        "id": 132591881,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959983
    },
    {
        "content": "<p>in the EU, at least, I know there's a \"bill of rights\" about this sort of thing. Not sure about the US, probably not.</p>",
        "id": 132591890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959995
    },
    {
        "content": "<p>it was at the end not cancelled</p>",
        "id": 132591891,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534959998
    },
    {
        "content": "<p>it was moved</p>",
        "id": 132591893,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960000
    },
    {
        "content": "<p>but that happens because this is the aircraft they use to go to MVD</p>",
        "id": 132591902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960013
    },
    {
        "content": "<p>they needed to have it in MVD to do the MVD-&gt;MIA flight back</p>",
        "id": 132591916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960030
    },
    {
        "content": "<p>anyway, back to lazily computation ...</p>",
        "id": 132591929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960058
    },
    {
        "content": "<p>if you check the log, the last stuff I've shared are my last thoughts</p>",
        "id": 132591939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960076
    },
    {
        "content": "<p>let me step one step further back</p>",
        "id": 132592034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960172
    },
    {
        "content": "<p>the problem was that your PR was getting the wrong results?</p>",
        "id": 132592042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534960180
    },
    {
        "content": "<p>yes</p>",
        "id": 132592692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1534960811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so looking at the code I do see that the original ignored <code>StorageDead</code> for some reason</p>",
        "id": 132687646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104404
    },
    {
        "content": "<p>I think you also mentioned this</p>",
        "id": 132687653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104415
    },
    {
        "content": "<p>that seems like the <strong>most likely</strong> error here?</p>",
        "id": 132687654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104422
    },
    {
        "content": "<p>I've been pondering if we are \"hard-coding\" this too much</p>",
        "id": 132687656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104429
    },
    {
        "content": "<p>er, sorry, that's sort of an independent thought</p>",
        "id": 132687685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104442
    },
    {
        "content": "<p>in particular, I was wondering if we should write a sort of \"reverse depth-first search\" that works for <strong>any</strong> <code>BitDenotation</code></p>",
        "id": 132687710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104471
    },
    {
        "content": "<p>then we could invoke it with the existing <code>MovingOutStatements</code> (the one I asked you to remove from the PR)</p>",
        "id": 132687713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104485
    },
    {
        "content": "<p>that would let us write the code once</p>",
        "id": 132687717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104497
    },
    {
        "content": "<p>and let us sort of re-use <em>exactly</em> what <code>MovingOutStatements</code> does today</p>",
        "id": 132687732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104510
    },
    {
        "content": "<p>otoh it's probably a good idea to just make a targeted edit for now to make sure this <code>StorageDead</code> thing is the problem</p>",
        "id": 132687734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104523
    },
    {
        "content": "<p>to that end, I applied this diff</p>",
        "id": 132687788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>modified   src/librustc_mir/borrow_check/error_reporting.rs\n<span class=\"gu\">@@ -544,10 +544,18 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {</span>\n             }\n\n             // check for moves\n<span class=\"gd\">-            for moi in &amp;self.move_data.loc_map[l] {</span>\n<span class=\"gd\">-                if self.move_data.moves[*moi].path == mpi {</span>\n<span class=\"gd\">-                    result.push(*moi);</span>\n<span class=\"gd\">-                    continue &#39;dfs;</span>\n<span class=\"gi\">+            let stmt = &amp;mir[l.block].statements[l.statement_index];</span>\n<span class=\"gi\">+            if let StatementKind::StorageDead(..) = stmt.kind {</span>\n<span class=\"gi\">+                // this analysis only tries to find moves explicitly</span>\n<span class=\"gi\">+                // written by the user, so we ignore the move-outs</span>\n<span class=\"gi\">+                // created by `StorageDead` and at the beginning</span>\n<span class=\"gi\">+                // of a function.</span>\n<span class=\"gi\">+            } else {</span>\n<span class=\"gi\">+                for moi in &amp;self.move_data.loc_map[l] {</span>\n<span class=\"gi\">+                    if self.move_data.moves[*moi].path == mpi {</span>\n<span class=\"gi\">+                        result.push(*moi);</span>\n<span class=\"gi\">+                        continue &#39;dfs;</span>\n<span class=\"gi\">+                    }</span>\n                 }\n             }\n</pre></div>",
        "id": 132687789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104597
    },
    {
        "content": "<p>annoyingly I forgot <code>--keep-stage 1</code>, so it'll be a few minutes before I have the answer :P</p>",
        "id": 132687798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535104629
    },
    {
        "content": "<p>ok, a (slightly tweaked) version of that diff fixes on problem, but <code>issue-29723.rs</code> still fails</p>",
        "id": 132688470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105628
    },
    {
        "content": "<p>I'm not quite sure why</p>",
        "id": 132688473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105641
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1       error[E0382]: use of moved value: `s`\n2         --&gt; $DIR/issue-29723.rs:22:13\n3          |\n<span class=\"gd\">-       LL |         0 if { drop(s); false } =&gt; String::from(&quot;oops&quot;),</span>\n<span class=\"gd\">-          |                     - value moved here</span>\n<span class=\"gd\">-       ...</span>\n7       LL |             s\n<span class=\"gd\">-          |             ^ value used here after move</span>\n<span class=\"gi\">+          |             ^ value moved here in previous iteration of loop</span>\n9          |\n10         = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n</pre></div>",
        "id": 132688517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105682
    },
    {
        "content": "<p>have to look at the MIR I guess</p>",
        "id": 132688531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105717
    },
    {
        "content": "<p>oh, this looks wrong (in your code):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132688534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105744
    },
    {
        "content": "<p>I think what you really want is to add a <code>fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt;</code> function to the <code>Mir</code> type</p>",
        "id": 132688581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105771
    },
    {
        "content": "<p>and then do</p>",
        "id": 132688582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105774
    },
    {
        "content": "<p><code>stack.extend(mir.predecessor_locations(l));</code></p>",
        "id": 132688584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105786
    },
    {
        "content": "<p>you can then replace the existing code you have down below</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">predecessor_block</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predecessor_end_location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">predecessor_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">predecessor_end_location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with a call to that same function.</p>",
        "id": 132688595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105807
    },
    {
        "content": "<p>writing these sorts of functions, where you want to return one of two iterators, is a bi tricky -- I usually find it works best to use <code>Option</code> etc</p>",
        "id": 132688606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105836
    },
    {
        "content": "<p>ok, left a review to that effect <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> — I'll stop here :)</p>",
        "id": 132688669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535105909
    },
    {
        "content": "<p>cool, checked your thoughts really quick</p>",
        "id": 132693234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535113132
    },
    {
        "content": "<p>using the cellphone</p>",
        "id": 132693242,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535113141
    },
    {
        "content": "<p>will properly read this later in the computer</p>",
        "id": 132693254,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535113155
    },
    {
        "content": "<p>but thanks for the feedback</p>",
        "id": 132693257,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535113164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> great!</p>",
        "id": 132693639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535113787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did you ever get a chance to look into this? (no worries if not, just checking in)</p>",
        "id": 132791841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535296712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not yet, tomorrow will do</p>",
        "id": 132795179,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535304055
    },
    {
        "content": "<p>first weekend back was complicated <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 132795186,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535304075
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so looking at the code I do see that the original ignored <code>StorageDead</code> for some reason</p>\n</blockquote>\n<p>what do you mean here?</p>",
        "id": 132879204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535402209
    },
    {
        "content": "<blockquote>\n<p>I've been pondering if we are \"hard-coding\" this too much</p>\n</blockquote>\n<p>yeah, it may be too hard coded</p>",
        "id": 132879224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535402232
    },
    {
        "content": "<blockquote>\n<p>in particular, I was wondering if we should write a sort of \"reverse depth-first search\" that works for <strong>any</strong> <code>BitDenotation</code></p>\n</blockquote>\n<p>yeah, I'm all for refactoring and making things that make more sense rather than adding snippets of things that make the thing work :P</p>",
        "id": 132879341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535402362
    },
    {
        "content": "<p>I'm torn tbh</p>",
        "id": 132879346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535402372
    },
    {
        "content": "<p>but it does seem like we ought to be able to factor this \"reverse DFS\" out</p>",
        "id": 132879352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535402381
    },
    {
        "content": "<p>regarding <code>StorageDead</code></p>",
        "id": 132879355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535402388
    },
    {
        "content": "<p>I was referring to <a href=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L491\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L491\">the definition of <code>MovingOutStatements</code></a></p>",
        "id": 132879438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535402457
    },
    {
        "content": "<p>and specifically <a href=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L512-L516\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L512-L516\">this section</a></p>",
        "id": 132879447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535402468
    },
    {
        "content": "<blockquote>\n<p>ok, a (slightly tweaked) version of that diff fixes on problem, but <code>issue-29723.rs</code> still fails</p>\n</blockquote>\n<p>you mean that the diff you've pasted is not proper? do you have the new diff?</p>",
        "id": 132879556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535402577
    },
    {
        "content": "<blockquote>\n<p>and specifically <a href=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L512-L516\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d5a448b3f47b22c9cb010198bdcc49d4392b090b/src/librustc_mir/dataflow/impls/mod.rs#L512-L516\">this section</a></p>\n</blockquote>\n<p>yeah, but what do you mean, should we consider StorageDead or not?</p>",
        "id": 132879703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535402731
    },
    {
        "content": "<p>Yes, we should — that is, if we want to match the behavior of the existing dataflow analysis</p>",
        "id": 132880236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535403257
    },
    {
        "content": "<p>(which we do)</p>",
        "id": 132880242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535403262
    },
    {
        "content": "<blockquote>\n<p>you mean that the diff you've pasted is not proper? do you have the new diff?</p>\n</blockquote>\n<p>I think I pushed it to your branch</p>",
        "id": 132880446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535403533
    },
    {
        "content": "<blockquote>\n<p>yeah, I'm all for refactoring and making things that make more sense rather than adding snippets of things that make the thing work :P</p>\n</blockquote>\n<p>what I had in mind <em>here</em> is that we could write a generic \"reverse depth-first search\" that is customized by the <code>BitDenotation</code></p>",
        "id": 132880466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535403556
    },
    {
        "content": "<p>e.g., <code>fn find_live_bits&lt;BD&gt;(bd: &amp;BD, mir: &amp;Mir, point: Location) -&gt; Vec&lt;BD::Idx&gt; where BD: BitDenotation</code></p>",
        "id": 132880490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535403586
    },
    {
        "content": "<p>(does that make sense <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?)</p>",
        "id": 132881221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535404550
    },
    {
        "content": "<p>this also might be the sort of code that is almost easier to write in the abstract than in the specific, but anyway</p>",
        "id": 132881272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535404569
    },
    {
        "content": "<p>will check later, with the phone now</p>",
        "id": 132881902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535405419
    },
    {
        "content": "<p>makes sense</p>",
        "id": 132892697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535424887
    },
    {
        "content": "<p>anyway, will check and ping you tomorrow, it's late here :)</p>",
        "id": 132892705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535424906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back, so ... the branch with my code and your code only lacks handling the location properly and refactoring this find_live_bits thing, right?</p>",
        "id": 132927892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474476
    },
    {
        "content": "<p>also I was wondering what is exactly the error in the predecessor thing in the current code</p>",
        "id": 132927905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474518
    },
    {
        "content": "<p>because I don't know what to do exactly</p>",
        "id": 132927955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474532
    },
    {
        "content": "<p>I guess you want me to do something like ...</p>",
        "id": 132927960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">predecessor_locations</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132927965,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474568
    },
    {
        "content": "<p>take that as pseudo code</p>",
        "id": 132927970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474575
    },
    {
        "content": "<p>pretty sure that I can do better on the else branch</p>",
        "id": 132927981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474588
    },
    {
        "content": "<p>hmm now I have doubts ... I guess I should just call predecessors_for without that if</p>",
        "id": 132928049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474649
    },
    {
        "content": "<p>going to see what predecessors_for really do</p>",
        "id": 132928053,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535474658
    },
    {
        "content": "<p><code>predecessors_for</code> does not exist</p>",
        "id": 132928700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475457
    },
    {
        "content": "<p>or, sorry</p>",
        "id": 132928702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475462
    },
    {
        "content": "<p>there is a method that yields up a sequence of basic blocks</p>",
        "id": 132928706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475468
    },
    {
        "content": "<p>that code looks roughly right, at least as pseudo-code</p>",
        "id": 132928713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475478
    },
    {
        "content": "<p>the point that we distinguish between the predecessors for the location where <code>statement_index</code> is <code>0</code></p>",
        "id": 132928761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475500
    },
    {
        "content": "<p>(in which case we have to go across basic blocks)</p>",
        "id": 132928770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475507
    },
    {
        "content": "<p>from the other cases</p>",
        "id": 132928774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475509
    },
    {
        "content": "<p>(in which case we are going within a basic block)</p>",
        "id": 132928775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475513
    },
    {
        "content": "<blockquote>\n<p>the point that we distinguish between the predecessors for the location where <code>statement_index</code> is <code>0</code></p>\n</blockquote>\n<p>didn't understand since this phrase on ...</p>",
        "id": 132928889,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475609
    },
    {
        "content": "<p>you mean that is right to do that?</p>",
        "id": 132928910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475620
    },
    {
        "content": "<p>yes</p>",
        "id": 132928916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475623
    },
    {
        "content": "<p>also ... predecesor_for returns an iterator of basic blocks</p>",
        "id": 132928928,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475637
    },
    {
        "content": "<p>I guess we need to do a flat map or something like that and turn that into locations</p>",
        "id": 132928944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475660
    },
    {
        "content": "<p>but anyway, don't see what was wrong in the old code</p>",
        "id": 132928961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475675
    },
    {
        "content": "<p>or is it that you just wanted to move code to mir?</p>",
        "id": 132928967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475686
    },
    {
        "content": "<p>I'm asking because otherwise I'm going to add the same code but on mir :)</p>",
        "id": 132928976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475708
    },
    {
        "content": "<p>the old code didn't handle the case where statement index is 0</p>",
        "id": 132929067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475804
    },
    {
        "content": "<p>correctly</p>",
        "id": 132929069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475807
    },
    {
        "content": "<p>here is the code</p>",
        "id": 132929136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475887
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">l</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132929139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475891
    },
    {
        "content": "<p>that is what is in the PR now</p>",
        "id": 132929141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475894
    },
    {
        "content": "<p>the intention is to push the predecessors onto the stack</p>",
        "id": 132929144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475899
    },
    {
        "content": "<p>yeah I see now</p>",
        "id": 132929156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475907
    },
    {
        "content": "<p>here, <code>l == context.loc</code></p>",
        "id": 132929157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475910
    },
    {
        "content": "<p>it was only the terminator being pushed</p>",
        "id": 132929159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475914
    },
    {
        "content": "<p>so long as <code>context.loc</code> fell in the middle of a basic block, it was correct</p>",
        "id": 132929166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475928
    },
    {
        "content": "<p>but if it feel at the <em>start</em> of a block</p>",
        "id": 132929169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475932
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 132929173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475946
    },
    {
        "content": "<p>ok, going to see how to get locations from a basic_block</p>",
        "id": 132929177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535475955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> there is a method <code>terminator_loc</code></p>",
        "id": 132929240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475995
    },
    {
        "content": "<p>actually, there are a few (sigh)</p>",
        "id": 132929242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535475999
    },
    {
        "content": "<p>but I literally <em>just</em> added one</p>",
        "id": 132929248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476005
    },
    {
        "content": "<p>that gives you the <code>Location</code> of the terminator of a basic block</p>",
        "id": 132929252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476013
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ec4a752202e56a9b2d978305cb2603208d4a3ab4/src/librustc/mir/mod.rs#L332-L338\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ec4a752202e56a9b2d978305cb2603208d4a3ab4/src/librustc/mir/mod.rs#L332-L338\">this is the method</a></p>",
        "id": 132929273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476039
    },
    {
        "content": "<p>ok. let me fetch</p>",
        "id": 132929274,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476040
    },
    {
        "content": "<p>what I did not notice is that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/?search=terminator_loc\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/?search=terminator_loc\">there were two other such methods</a> -- probably those should be removed but oh well</p>",
        "id": 132929280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476054
    },
    {
        "content": "<p>the one I just added is so new it's not in the published rustdocs yet :)</p>",
        "id": 132929330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476093
    },
    {
        "content": "<p>:)</p>",
        "id": 132929335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476107
    },
    {
        "content": "<p>it's a method on the <code>mir</code>, so you would do <code>mir.terminator_loc(bb)</code></p>",
        "id": 132929339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476119
    },
    {
        "content": "<p>(this is because it has to access the data from the basic block that is stored in the MIR to know the index of the terminator)</p>",
        "id": 132929350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476140
    },
    {
        "content": "<p>you're talking about statement_index == 0 case, right?</p>",
        "id": 132929380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476174
    },
    {
        "content": "<p>yes</p>",
        "id": 132929474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476249
    },
    {
        "content": "<p>well, sort of :)</p>",
        "id": 132929479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476255
    },
    {
        "content": "<p>that is, when we are finding the pred's of a location whose <code>statement_index</code> is 0</p>",
        "id": 132929487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476266
    },
    {
        "content": "<p>in that case, we want to push the terminator location from each predecessor block</p>",
        "id": 132929496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476293
    },
    {
        "content": "<p>the <code>predecessors_for(BasicBlock)</code> method gives the pred basic blocks</p>",
        "id": 132929499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476305
    },
    {
        "content": "<p>and the <code>terminator_loc</code> converts that to a <code>Location</code></p>",
        "id": 132929504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476311
    },
    {
        "content": "<p>ok, it's pretty clear to me now what I don't follow :)</p>",
        "id": 132929576,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476413
    },
    {
        "content": "<p>why do we want from a regular basic block to ger the terminator loc and not all the locations?</p>",
        "id": 132929620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476444
    },
    {
        "content": "<p>I see that in the case statement_index == 0</p>",
        "id": 132929627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476459
    },
    {
        "content": "<p>don't follow why we want to do that in the rest of the cases</p>",
        "id": 132929634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476473
    },
    {
        "content": "<blockquote>\n<p>don't follow why we want to do that in the rest of the cases</p>\n</blockquote>\n<p>I don't understand this</p>",
        "id": 132929682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476553
    },
    {
        "content": "<p>we're <em>not</em> doing that in the other cases?</p>",
        "id": 132929686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476561
    },
    {
        "content": "<p>to expand on your pseudo-code:</p>",
        "id": 132929732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476565
    },
    {
        "content": "<p>this is what I'm doing ...</p>",
        "id": 132929743,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">predecessor_locations</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">)].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">bb</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"p\">.</span><span class=\"n\">locations</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132929744,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">predecessor_locations</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">basic_block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">basic_block</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132929745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476592
    },
    {
        "content": "<p>yes so that is exactly backwards the way you have it :)</p>",
        "id": 132929768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476619
    },
    {
        "content": "<p>think of the graph</p>",
        "id": 132929784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476641
    },
    {
        "content": "<p>yes</p>",
        "id": 132929796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476659
    },
    {
        "content": "<p>makes sense</p>",
        "id": 132929799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476663
    },
    {
        "content": "<p>hehe</p>",
        "id": 132929802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476669
    },
    {
        "content": "<p>I understand why</p>",
        "id": 132929803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476671
    },
    {
        "content": "<p>you have e.g.</p>\n<div class=\"codehilite\"><pre><span></span>BB0 {\n    statement 0\n    statement 1\n    statement 2\n    terminator: goto BB1, ...\n}\n\nBB1 {\n  statement 0\n  statement 1\n  ...\n}\n</pre></div>",
        "id": 132929804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476676
    },
    {
        "content": "<p>here, the predecessor of BB1/1 is BB1/0</p>",
        "id": 132929843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476683
    },
    {
        "content": "<p>the predecessor of BB1/0 is BB0/3 (terminator of BB0)</p>",
        "id": 132929856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476690
    },
    {
        "content": "<p>there's only one parent in statements that are not 0</p>",
        "id": 132929863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476698
    },
    {
        "content": "<p>predecessor of BB0/3 is BB0/2 etc</p>",
        "id": 132929867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476703
    },
    {
        "content": "<blockquote>\n<p>there's only one parent in statements that are not 0</p>\n</blockquote>\n<p>yes</p>",
        "id": 132929880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476712
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">predecessor_locations</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">basic_block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">basic_block</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>what do you want to do there with the into and map?</p>",
        "id": 132929989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476805
    },
    {
        "content": "<p>that's kind of a flat map or what's the intention?</p>",
        "id": 132930010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476818
    },
    {
        "content": "<p>er sorry I meant to do <code>iter()</code> -- or maybe <code>into_iter</code></p>",
        "id": 132930116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476933
    },
    {
        "content": "<p>it is not a flat map</p>",
        "id": 132930122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476943
    },
    {
        "content": "<p>it is a map</p>",
        "id": 132930125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476944
    },
    {
        "content": "<p>for each predecessor block, there is exactly 1 terminator location</p>",
        "id": 132930129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476952
    },
    {
        "content": "<p>converting this into an <code>impl Iterator</code> might be annoying because of lifetime issues</p>",
        "id": 132930143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476978
    },
    {
        "content": "<p>I hate the way we use a ref-cell here</p>",
        "id": 132930152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535476984
    },
    {
        "content": "<p>ya</p>",
        "id": 132930157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535476987
    },
    {
        "content": "<p>though the obvious alternatives aren't much better</p>",
        "id": 132930173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477012
    },
    {
        "content": "<p>so one thing that is easy to do is to convert this to a closure callback setup</p>",
        "id": 132930246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477057
    },
    {
        "content": "<p>sorry, to be clear, what I am concerned about is the return type of the existing <code>predecessors_for</code> method:</p>",
        "id": 132930263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477085
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Mir.html#method.predecessors_for\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Mir.html#method.predecessors_for\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Mir.html#method.predecessors_for</a></p>",
        "id": 132930264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477086
    },
    {
        "content": "<p>which is actually a <code>Ref&lt;'_, Vec&lt;BasicBlock&gt;&gt;</code> (the rustdoc is a bit confusing on this point)</p>",
        "id": 132930274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477102
    },
    {
        "content": "<p>this means that this <code>Ref</code> value is owned by the caller -- so you can't invoke <code>iter()</code> and return that to the caller</p>",
        "id": 132930292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477127
    },
    {
        "content": "<p>since <code>iter</code> will borrow the <code>Ref</code>, and then you are trying to return that borrow longer than the <code>Ref</code> exists</p>",
        "id": 132930310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477140
    },
    {
        "content": "<p>hmmm</p>",
        "id": 132930363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477179
    },
    {
        "content": "<p>was trying stuff and seeing errors already :)</p>",
        "id": 132930369,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477192
    },
    {
        "content": "<p>error[E0308]: if and else have incompatible types</p>",
        "id": 132930380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477206
    },
    {
        "content": "<p>well, that's a separate problem</p>",
        "id": 132930384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477216
    },
    {
        "content": "<p>and an easier one to overcome</p>",
        "id": 132930387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477219
    },
    {
        "content": "<p>the problem there is that you are returning an <code>impl Iterator</code> -- that must be a single iterator type</p>",
        "id": 132930407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477242
    },
    {
        "content": "<p>so the if/else can't have two options</p>",
        "id": 132930408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477245
    },
    {
        "content": "<p>the usual way to fix that is to \"concatenate\" the two iterators</p>",
        "id": 132930412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477253
    },
    {
        "content": "<p>I should write something about this</p>",
        "id": 132930417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477260
    },
    {
        "content": "<p>I guess I haven't seen that trick that often</p>",
        "id": 132930470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477289
    },
    {
        "content": "<p>/me is finding lots of good Intermediate Rust blog topics</p>",
        "id": 132930471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477290
    },
    {
        "content": "<p>so I can explain it,</p>",
        "id": 132930481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477299
    },
    {
        "content": "<p>but the problem is that the first half</p>",
        "id": 132930483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477301
    },
    {
        "content": "<p>isn't going to work</p>",
        "id": 132930485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477303
    },
    {
        "content": "<p>in this particular case</p>",
        "id": 132930489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477308
    },
    {
        "content": "<p>unless you clone the vector  :)</p>",
        "id": 132930493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477312
    },
    {
        "content": "<p>I understand that I have two different iterators and that's wrong</p>",
        "id": 132930504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477323
    },
    {
        "content": "<blockquote>\n<p>unless you clone the vector  :)</p>\n</blockquote>\n<p>yeah, hehe</p>",
        "id": 132930508,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477332
    },
    {
        "content": "<p>if you want I can show you how to do it that way</p>",
        "id": 132930517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477342
    },
    {
        "content": "<p>I don't understand what you mean by concatenating iterators</p>",
        "id": 132930526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477346
    },
    {
        "content": "<p>we can validate that it fixes the problem anyway</p>",
        "id": 132930531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477353
    },
    {
        "content": "<p>yes</p>",
        "id": 132930533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477355
    },
    {
        "content": "<p>ok so</p>",
        "id": 132930544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477366
    },
    {
        "content": "<p>the idea would be something like this</p>",
        "id": 132930559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">predecessor_locations</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">if_zero_locations</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predecessor_blocks</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">BasicBlock</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">).</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">predecessor_blocks</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">basic_block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">basic_block</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">if_not_zero_locations</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"nc\">loc</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">if_zero_locations</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">flatten</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">if_not_zero_locations</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132930726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477510
    },
    {
        "content": "<p>note the final return value:</p>",
        "id": 132930740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477522
    },
    {
        "content": "<p>it is always the same, no matter what</p>",
        "id": 132930781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477528
    },
    {
        "content": "<p>it's the combination of two iterators</p>",
        "id": 132930784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477532
    },
    {
        "content": "<p>but in practice one or the other will be empty</p>",
        "id": 132930790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477541
    },
    {
        "content": "<p>in the case of <code>statement_index == 0</code>, we return a <code>Some(I)</code> where <code>I</code> is some iterator of locations</p>",
        "id": 132930805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477557
    },
    {
        "content": "<p>in the case of <code>statement_index &gt; 0</code>, we return a <code>Some(L)</code> for the pred loc (and <code>None</code> otherwise)</p>",
        "id": 132930814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477567
    },
    {
        "content": "<p>another simpler way to do it might be</p>",
        "id": 132930833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477586
    },
    {
        "content": "<p>I see</p>",
        "id": 132930834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477587
    },
    {
        "content": "<p>well anyway</p>",
        "id": 132930835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477590
    },
    {
        "content": "<p>that's the idea :)</p>",
        "id": 132930837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477592
    },
    {
        "content": "<p>:)</p>",
        "id": 132930843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477597
    },
    {
        "content": "<p>(you can also use the <code>Either</code> crate)</p>",
        "id": 132930845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477598
    },
    {
        "content": "<p>yep</p>",
        "id": 132930852,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477604
    },
    {
        "content": "<p>which would look like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">fo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Either</span>::<span class=\"n\">Left</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Either</span>::<span class=\"n\">Right</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132930866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477622
    },
    {
        "content": "<p>do you want me to try this or just switch directly to the callbacks idea</p>",
        "id": 132930872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477626
    },
    {
        "content": "<p>with this I mean, the code, the Either crate, which I've already used in rustc</p>",
        "id": 132930919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477645
    },
    {
        "content": "<p>I'd probably do the callabcks</p>",
        "id": 132930926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477650
    },
    {
        "content": "<p>cloning the vector seems silly</p>",
        "id": 132930931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477655
    },
    {
        "content": "<p>ok</p>",
        "id": 132930937,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477661
    },
    {
        "content": "<p>but it's annoying</p>",
        "id": 132930939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477663
    },
    {
        "content": "<p>I'm pondering if there is anyway to fix that :)</p>",
        "id": 132930950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477674
    },
    {
        "content": "<p>besides refactoring how <code>predecessors_for</code> works</p>",
        "id": 132930958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477683
    },
    {
        "content": "<p>which — although I've wanted to do it for a while — seems out of scope =)</p>",
        "id": 132930965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477692
    },
    {
        "content": "<p>I'm ok to do whatever you prefer :)</p>",
        "id": 132931000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477752
    },
    {
        "content": "<p>part of the problem is I don't know what I would refactor to =)</p>",
        "id": 132931051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477776
    },
    {
        "content": "<p>I think you should do the callback variant</p>",
        "id": 132931075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477817
    },
    {
        "content": "<p>seems easiest for now</p>",
        "id": 132931082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477822
    },
    {
        "content": "<p>er well ok so</p>",
        "id": 132931100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477849
    },
    {
        "content": "<p>so ... you want the thing to be ...</p>",
        "id": 132931115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477875
    },
    {
        "content": "<p>I think I know how you could do it</p>",
        "id": 132931119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477881
    },
    {
        "content": "<p>took me a second to think  of it :)</p>",
        "id": 132931164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477888
    },
    {
        "content": "<p>that is, with <code>impl Iterator</code></p>",
        "id": 132931177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477901
    },
    {
        "content": "<p>ok</p>",
        "id": 132931188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477912
    },
    {
        "content": "<p>something like this would work for the first case (where <code>statement_index</code> == 0)</p>",
        "id": 132931189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477912
    },
    {
        "content": "<p>:)</p>",
        "id": 132931190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535477913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predecessor_blocks</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predecessors_for</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// returns a `Ref&lt;&#39;_, Vec&lt;BasicBlock&gt;&gt;`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">num_predecessor_blocks</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predecessor_blocks</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"n\">num_predecessor_blocks</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">predecessor_blocks</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">bb</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">))</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132931232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535477980
    },
    {
        "content": "<p>the key point here is that the closure will capture (and take ownership of) the <code>predecessor_blocks</code> value</p>",
        "id": 132931278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478005
    },
    {
        "content": "<p>so it lives as long as that closure does</p>",
        "id": 132931299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478027
    },
    {
        "content": "<p>I think you should use this version :)</p>",
        "id": 132931304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478043
    },
    {
        "content": "<p>does it make sense? :)</p>",
        "id": 132931394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478130
    },
    {
        "content": "<p>I see</p>",
        "id": 132931447,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478230
    },
    {
        "content": "<p>and then I have this issue</p>",
        "id": 132931498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478265
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    = note: expected type `std::iter::Map&lt;std::iter::Map&lt;std::ops::Range&lt;usize&gt;, [closure@librustc/mir/mod.rs:212:22: 212:52 predecessor_blocks:_]&gt;, [closure@librustc/mir/mod.rs:213:22: 213:55 self:_]&gt;`\n               found type `std::slice::Iter&lt;&#39;_, mir::Location&gt;`\n</pre></div>",
        "id": 132931500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478269
    },
    {
        "content": "<p>should I combine iterators?</p>",
        "id": 132931504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478280
    },
    {
        "content": "<p>use Either or is there a better idea?</p>",
        "id": 132931512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478287
    },
    {
        "content": "<p>what is the code you have exactly?</p>",
        "id": 132931561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478360
    },
    {
        "content": "<p>I would probably still use the <code>Option</code> approach</p>",
        "id": 132931604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478369
    },
    {
        "content": "<p>I find it more elegant</p>",
        "id": 132931605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478373
    },
    {
        "content": "<p>but it's a matter of taste :P</p>",
        "id": 132931606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478376
    },
    {
        "content": "<p>the option variant is (I think) potentially more efficient, as well, but I doubt it matters much</p>",
        "id": 132931618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478406
    },
    {
        "content": "<p>(the difference is that <code>Either</code> will kind of \"re-check\" for each call to <code>next()</code> which branch you took)</p>",
        "id": 132931627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478418
    },
    {
        "content": "<p>but there are many other variables</p>",
        "id": 132931633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        if loc.statement_index == 0 {\n            let predecessor_blocks = self.predecessors_for(loc.block); // returns a `Ref&lt;&#39;_, Vec&lt;BasicBlock&gt;&gt;`\n            let num_predecessor_blocks = predecessor_blocks.len();\n            (0 .. num_predecessor_blocks)\n                .map(move |i| predecessor_blocks[i])\n                .map(move |bb| self.terminator_loc(bb))\n        } else {\n            vec![Location { block: loc.block, statement_index: loc.statement_index - 1 }].iter()\n        }\n</pre></div>",
        "id": 132931649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478450
    },
    {
        "content": "<p>ok, let me go with the option thing because I'm also adding a vec there that doesn't make a lot of sense</p>",
        "id": 132931661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478472
    },
    {
        "content": "<p>wow, got some lifetimes issues</p>",
        "id": 132931825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478641
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n   --&gt; librustc/mir/mod.rs:209:43\n    |\n209 |             let predecessor_blocks = self.predecessors_for(loc.block); // returns a `Ref&lt;&#39;_, Vec&lt;BasicBlock&gt;&gt;`\n    |                                           ^^^^^^^^^^^^^^^^\n    |\nnote: first, the lifetime cannot outlive the lifetime &#39;tcx as defined on the impl at 137:6...\n   --&gt; librustc/mir/mod.rs:137:6\n    |\n137 | impl&lt;&#39;tcx&gt; Mir&lt;&#39;tcx&gt; {\n    |      ^^^^\nnote: ...so that the type `mir::Mir&lt;&#39;tcx&gt;` is not borrowed for too long\n   --&gt; librustc/mir/mod.rs:209:38\n    |\n209 |             let predecessor_blocks = self.predecessors_for(loc.block); // returns a `Ref&lt;&#39;_, Vec&lt;BasicBlock&gt;&gt;`\n    |                                      ^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that return value is valid for the call\n   --&gt; librustc/mir/mod.rs:207:59\n    |\n207 |     pub fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt; {\n    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: cannot infer an appropriate lifetime\n   --&gt; librustc/mir/mod.rs:213:22\n    |\n207 |     pub fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt; {\n    |                                                           ------------------------------ this return type evaluates to the `&#39;static` lifetime...\n...\n213 |                 .map(move |bb| self.terminator_loc(bb))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...but this borrow...\n    |\nnote: ...can&#39;t outlive the anonymous lifetime #1 defined on the method body at 207:5\n   --&gt; librustc/mir/mod.rs:207:5\n    |\n207 | /     pub fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt; {\n208 | |         let if_zero_locations = if loc.statement_index == 0 {\n209 | |             let predecessor_blocks = self.predecessors_for(loc.block); // returns a `Ref&lt;&#39;_, Vec&lt;BasicBlock&gt;&gt;`\n210 | |             let num_predecessor_blocks = predecessor_blocks.len();\n...   |\n225 | |         if_zero_locations.into_iter().flatten().chain(if_not_zero_locations)\n226 | |     }\n    | |_____^\nhelp: you can add a constraint to the return type to make it last less than `&#39;static` and match the anonymous lifetime #1 defined on the method body at 207:5\n    |\n207 |     pub fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt; + &#39;_ {\n    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --&gt; librustc/mir/mod.rs:213:22\n    |\n213 |                 .map(move |bb| self.terminator_loc(bb))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: first, the lifetime cannot outlive the lifetime &#39;tcx as defined on the impl at 137:6...\n   --&gt; librustc/mir/mod.rs:137:6\n    |\n137 | impl&lt;&#39;tcx&gt; Mir&lt;&#39;tcx&gt; {\n    |      ^^^^\n    = note: ...so that the types are compatible:\n            expected &amp;mir::Mir&lt;&#39;_&gt;\n               found &amp;mir::Mir&lt;&#39;tcx&gt;\n    = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that return value is valid for the call\n   --&gt; librustc/mir/mod.rs:207:59\n    |\n207 |     pub fn predecessor_locations(&amp;self, loc: Location) -&gt; impl Iterator&lt;Item = Location&gt; {\n    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0495`.\nerror: Could not compile `rustc`.\n</pre></div>",
        "id": 132931846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478671
    },
    {
        "content": "<p>so you're gonna have to break it into two <code>ifs</code>, as I wrote, or at least return pairs</p>",
        "id": 132931849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478672
    },
    {
        "content": "<p>oh yes so</p>",
        "id": 132931853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478688
    },
    {
        "content": "<p>you need to change <code>-&gt; impl Iterator</code> to <code>+ '_</code>, as indeed it suggests to you</p>",
        "id": 132931854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478700
    },
    {
        "content": "<p>yeah, I did the two ifs approach</p>",
        "id": 132931856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478702
    },
    {
        "content": "<p>that is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132931861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478715
    },
    {
        "content": "<p>the <code>+ '_</code> indicates that this iterator may capture data from <code>self</code></p>",
        "id": 132931900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478724
    },
    {
        "content": "<p>otherwise, we assume it doesn't</p>",
        "id": 132931904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478728
    },
    {
        "content": "<p>that error...needs some love</p>",
        "id": 132931906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478731
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 132931910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478743
    },
    {
        "content": "<p>yeah, didn't even read what it was saying :P</p>",
        "id": 132931914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535478756
    },
    {
        "content": "<p>I think it'd be mildly better with NLL but anyway</p>",
        "id": 132931917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535478763
    },
    {
        "content": "<p>this is compiling now</p>",
        "id": 132933437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535480351
    },
    {
        "content": "<p>running tests</p>",
        "id": 132933439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535480353
    },
    {
        "content": "<p>anyway I'd need to do the refactor still</p>",
        "id": 132933451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535480374
    },
    {
        "content": "<p>two Fs</p>",
        "id": 132934098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535481081
    },
    {
        "content": "<p>which ones? :)</p>",
        "id": 132934202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n    [ui] ui/issues/issue-29723.rs\n    [ui] ui/macros/macros-nonfatal-errors.rs\n</pre></div>",
        "id": 132940227,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535482419
    },
    {
        "content": "<p>I think that the last one is a spurious thing</p>",
        "id": 132940235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482431
    },
    {
        "content": "<p>I've seen it sometimes</p>",
        "id": 132940236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482433
    },
    {
        "content": "<p>the other one is I think the failure I was concerned about?</p>",
        "id": 132940290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482464
    },
    {
        "content": "<p>(what is your full diff?)</p>",
        "id": 132940293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482474
    },
    {
        "content": "<p>it could be I was wrong as to the cause</p>",
        "id": 132940296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482482
    },
    {
        "content": "<p>that would worry me since it would mean we have an untested path, since that code was definitely wrong as is :)</p>",
        "id": 132940301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535482491
    },
    {
        "content": "<p>so ...</p>",
        "id": 132940909,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535483131
    },
    {
        "content": "<p>let me push again :)</p>",
        "id": 132940911,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535483134
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866\">https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866</a></p>",
        "id": 132941416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535483689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866#r30318086\" target=\"_blank\" title=\"https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866#r30318086\">https://github.com/spastorino/rust/commit/206088406234f7e27eab9985f6c718a82e868866#r30318086</a></p>",
        "id": 132941525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535483846
    },
    {
        "content": "<p>hehehe</p>",
        "id": 132941688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484021
    },
    {
        "content": "<p>I did that</p>",
        "id": 132941689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484023
    },
    {
        "content": "<p>probably rebasing issues :)</p>",
        "id": 132941700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484029
    },
    {
        "content": "<p>ok, I don't see it in <a href=\"https://github.com/rust-lang/rust/pull/53403/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53403/files\">https://github.com/rust-lang/rust/pull/53403/files</a></p>",
        "id": 132941724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535484075
    },
    {
        "content": "<p>no I did add that in the last of the method but not there</p>",
        "id": 132941834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484239
    },
    {
        "content": "<p>was just distracted</p>",
        "id": 132941869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484243
    },
    {
        "content": "<p>anyway ... did it now</p>",
        "id": 132941877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484250
    },
    {
        "content": "<p>pushing again</p>",
        "id": 132941884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535484256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> running locally, the only UI failure I see is </p>\n<p>failures:<br>\n    [ui] ui/macros/macros-nonfatal-errors.rs</p>",
        "id": 132947778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535485279
    },
    {
        "content": "<p>yes, here it's finishing running</p>",
        "id": 132947865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535485348
    },
    {
        "content": "<p>for now one F</p>",
        "id": 132947868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535485356
    },
    {
        "content": "<p>I believe that this is some kind of stage1 artifact</p>",
        "id": 132947903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535485410
    },
    {
        "content": "<p>I haven't looked more closely though</p>",
        "id": 132947908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535485414
    },
    {
        "content": "<p>you mean because of the keep-stage thing?</p>",
        "id": 132947925,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535485433
    },
    {
        "content": "<p>so yeah, same error</p>",
        "id": 132947991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535485484
    },
    {
        "content": "<blockquote>\n<p>you mean because of the keep-stage thing?</p>\n</blockquote>\n<p>not necessarily...sometimes stage1 tests just don't work for whatever reason</p>",
        "id": 132948259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535485723
    },
    {
        "content": "<p>I'm also not using <code>--keep-stage 1</code></p>",
        "id": 132948291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535485745
    },
    {
        "content": "<blockquote>\n<p>not necessarily...sometimes stage1 tests just don't work for whatever reason</p>\n</blockquote>\n<p>(this is very annoying)</p>",
        "id": 132948307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535485772
    },
    {
        "content": "<p>ok, let's see what the ci says then :)</p>",
        "id": 132948420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535485875
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just in case ... about this ... I just need to do the generic reverse depth-first search specialized by <code>BitDenotation</code> and done, right?</p>",
        "id": 132948981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535486443
    },
    {
        "content": "<p>well it depends</p>",
        "id": 132949014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535486512
    },
    {
        "content": "<p>we could probably land 'as is' and leave that for a follow-up</p>",
        "id": 132949018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535486522
    },
    {
        "content": "<p>but I guess it'd be nicer to do it as part of this</p>",
        "id": 132949063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535486537
    },
    {
        "content": "<p>since it will need to use the <code>BitDenotation</code> impl that we removed :)</p>",
        "id": 132949065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535486546
    },
    {
        "content": "<p>yeah</p>",
        "id": 132949774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535487447
    },
    {
        "content": "<p>will do it before we make it land</p>",
        "id": 132949779,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535487456
    },
    {
        "content": "<p>just wanted to be sure that it was the missing bit</p>",
        "id": 132949783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535487463
    },
    {
        "content": "<p>yep</p>",
        "id": 132950782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535488631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> running all the way to stage2, I got this error:</p>\n<div class=\"codehilite\"><pre><span></span>---- [ui (nll)] ui/hygiene/fields-move.rs stdout ----\ndiff of stderr:\n\n1       error[E0382]: use of moved value: `foo.x`\n2         --&gt; $DIR/fields-move.rs:28:9\n3          |\n-       LL |    $foo.x\n-          |    ------ value moved here\n-       ...\n7       LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n8          |         ^^^^^^ value used here after move\n9       ...\n\n28      error[E0382]: use of moved value: `foo.x`\n29        --&gt; $DIR/fields-move.rs:39:42\n30         |\n-       LL |    $foo.x\n-          |    ------ value moved here\n-       ...\n34      LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n35         |         ------ value moved here\n36      ...\n\n-       LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n-          |                                          ----- value moved here\n39      LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n40         |                                          ^^^^^ value used here after move\n41         |\n</pre></div>",
        "id": 132951520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535489468
    },
    {
        "content": "<p>I haven't looked at it at all</p>",
        "id": 132951523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535489479
    },
    {
        "content": "<p>doh</p>",
        "id": 132966636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535501003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> seeing the very same thing now</p>",
        "id": 132996222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535549327
    },
    {
        "content": "<p>the CI have also finished</p>",
        "id": 132996230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535549345
    },
    {
        "content": "<p>I'd need to investigate a bit</p>",
        "id": 132996247,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535549368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> didn't have time yet but do you have any suggestion on where to look?</p>",
        "id": 133016243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570425
    },
    {
        "content": "<p>I haven't really looked at it yet either— I think comparing the before/after like you did before seems good?</p>",
        "id": 133016277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570468
    },
    {
        "content": "<p>or, alternatively,</p>",
        "id": 133016284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570484
    },
    {
        "content": "<p>yeah, will try to see that</p>",
        "id": 133016290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570502
    },
    {
        "content": "<p>didn't want you to jump into the issue</p>",
        "id": 133016291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570507
    },
    {
        "content": "<p>but maybe from the top of your head you had some tip or something :)</p>",
        "id": 133016309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570522
    },
    {
        "content": "<p>hmm</p>",
        "id": 133016364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570556
    },
    {
        "content": "<p>the move is occurring in a call</p>",
        "id": 133016369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570567
    },
    {
        "content": "<p>or at least one of them</p>",
        "id": 133016393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570596
    },
    {
        "content": "<p>it's from the parameters of a call</p>",
        "id": 133016395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570599
    },
    {
        "content": "<p>calls <em>are</em> treated a bit funny sometimes, but really just their <em>destination</em></p>",
        "id": 133016409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570615
    },
    {
        "content": "<p>isn't the test about a macro?</p>",
        "id": 133016425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570639
    },
    {
        "content": "<p>the macro is just confusing things</p>",
        "id": 133016470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570648
    },
    {
        "content": "<p>or at least I think so</p>",
        "id": 133016474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570657
    },
    {
        "content": "<p>given that it talks about hygiene in the directory</p>",
        "id": 133016476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570660
    },
    {
        "content": "<p>I guess the first thing I might do is to remove the macro from the test and check if you get the same behavior :)</p>",
        "id": 133016481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570668
    },
    {
        "content": "<p>well sure</p>",
        "id": 133016482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570673
    },
    {
        "content": "<p>I guess it should be related to some macro thing</p>",
        "id": 133016483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570675
    },
    {
        "content": "<p>yep</p>",
        "id": 133016486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570678
    },
    {
        "content": "<p>the purpose of the test has something to do with a macro</p>",
        "id": 133016487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570678
    },
    {
        "content": "<p>but that doens't mean it's affecting you at this moment</p>",
        "id": 133016491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570686
    },
    {
        "content": "<p>yep we need to see if this error is because of the macro or not</p>",
        "id": 133016496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570693
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133016504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570703
    },
    {
        "content": "<p>I guessed it was because it's also failing at stage2, right?</p>",
        "id": 133016520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570717
    },
    {
        "content": "<p>not stage1</p>",
        "id": 133016525,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570719
    },
    {
        "content": "<p>if I remember correctly something more happens with macros between those phases</p>",
        "id": 133016549,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570751
    },
    {
        "content": "<p>anyway, I guess I should need to compile this thing for stage 2 and start testing and changing the example to get some kind of conclusion</p>",
        "id": 133016612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570786
    },
    {
        "content": "<p>I see</p>",
        "id": 133016621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570805
    },
    {
        "content": "<p>I ran by hand ;)</p>",
        "id": 133016623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570808
    },
    {
        "content": "<p>by hand on stage 1 also fails?</p>",
        "id": 133016631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570823
    },
    {
        "content": "<p>hmm, sorry</p>",
        "id": 133016647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570845
    },
    {
        "content": "<p>yes,</p>",
        "id": 133016648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570847
    },
    {
        "content": "<p>this has nothing to do with stage1/stage2</p>",
        "id": 133016654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570854
    },
    {
        "content": "<p>it's just that the error was uncovered when we run with compare-mode=nll</p>",
        "id": 133016661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570864
    },
    {
        "content": "<p>and stage1 wasn't getting that far</p>",
        "id": 133016667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570867
    },
    {
        "content": "<p>this is the test minus macros:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">NonCopy</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">NonCopy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_two_copies</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">NonCopy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">NonCopy</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Got two copies: {:?}, {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">NonCopy</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_two_copies</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR use of moved value: `foo.x`</span>\n<span class=\"w\">    </span><span class=\"n\">assert_two_copies</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR use of moved value: `foo.x`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133016670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570874
    },
    {
        "content": "<p>it fails in the same basic way either way</p>",
        "id": 133016674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570880
    },
    {
        "content": "<p>though the output looks different</p>",
        "id": 133016715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570887
    },
    {
        "content": "<p>with nightly, we get:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0382]: use of moved value: `foo.x`\n  --&gt; /home/nmatsakis/tmp/spastorino.rs:15:30\n   |\n14 |     assert_two_copies(foo.x, foo.x); //~ ERROR use of moved value: `foo.x`\n   |                       -----  ----- value moved here\n   |                       |\n   |                       value moved here\n15 |     assert_two_copies(foo.x, foo.x); //~ ERROR use of moved value: `foo.x`\n   |                       -----  ^^^^^ value used here after move\n   |                       |\n   |                       value moved here\n   |\n   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n</pre></div>",
        "id": 133016723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570901
    },
    {
        "content": "<p>(actually, we get more errors than that, but this is the last one)</p>",
        "id": 133016729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570907
    },
    {
        "content": "<p>with your code, we get:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0382]: use of moved value: `foo.x`\n  --&gt; /home/nmatsakis/tmp/spastorino.rs:15:30\n   |\n15 |     assert_two_copies(foo.x, foo.x); //~ ERROR use of moved value: `foo.x`\n   |                       -----  ^^^^^ value used here after move\n   |                       |\n   |                       value moved here\n   |\n   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n</pre></div>",
        "id": 133016737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570925
    },
    {
        "content": "<p>interestingly, I would say that your code is <em>more</em> correct</p>",
        "id": 133016741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570931
    },
    {
        "content": "<p>I'm surprised by the nightly output</p>",
        "id": 133016745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570940
    },
    {
        "content": "<p>hmmm</p>",
        "id": 133016752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535570954
    },
    {
        "content": "<p>in nightly, it highlights three places, but only the last one is relevant</p>",
        "id": 133016758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570962
    },
    {
        "content": "<p>in some sense</p>",
        "id": 133016760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570968
    },
    {
        "content": "<p>but I guess the reason for this is</p>",
        "id": 133016762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570971
    },
    {
        "content": "<p>that you stop walking backwards when you find a move (a GEN)</p>",
        "id": 133016765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570979
    },
    {
        "content": "<p>but in principle you could keep going back further</p>",
        "id": 133016768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570990
    },
    {
        "content": "<p>until you find a kill</p>",
        "id": 133016773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535570996
    },
    {
        "content": "<p>yes</p>",
        "id": 133016823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571014
    },
    {
        "content": "<p>I guess nightly isn't <em>wrong</em></p>",
        "id": 133016831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571017
    },
    {
        "content": "<p>all three of those moves consume the same value</p>",
        "id": 133016842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571032
    },
    {
        "content": "<p>that we are trying to later read</p>",
        "id": 133016844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571034
    },
    {
        "content": "<p>yeah so I can just update the stderr file and done?</p>",
        "id": 133016855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571042
    },
    {
        "content": "<p>debatable</p>",
        "id": 133016857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571047
    },
    {
        "content": "<p>either that or update the code :)</p>",
        "id": 133016859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571051
    },
    {
        "content": "<p>I can't decide which is more correct :)</p>",
        "id": 133016862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571056
    },
    {
        "content": "<p>the code?</p>",
        "id": 133016869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571065
    },
    {
        "content": "<p>you mean, the test?</p>",
        "id": 133016878,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571071
    },
    {
        "content": "<p>no</p>",
        "id": 133016882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571076
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 133016884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571080
    },
    {
        "content": "<p>you could update your reverse DFS to keep going after it finds a move</p>",
        "id": 133016887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571082
    },
    {
        "content": "<p>then I think the result will match</p>",
        "id": 133016892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571087
    },
    {
        "content": "<p>thought you were saying that it was better :)</p>",
        "id": 133016894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535571091
    },
    {
        "content": "<p>I was but now I'm debating :)</p>",
        "id": 133016953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571126
    },
    {
        "content": "<p>I could go either way, I suppose</p>",
        "id": 133016959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571134
    },
    {
        "content": "<p>but it seems like the new output is \"less busy\"</p>",
        "id": 133016960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571136
    },
    {
        "content": "<p>so it's probably better</p>",
        "id": 133016964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571139
    },
    {
        "content": "<p>the scenario is sort of artificial</p>",
        "id": 133016972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571154
    },
    {
        "content": "<p>ok well I verified that if you do</p>\n<div class=\"codehilite\"><pre><span></span>athena. git diff\n<span class=\"gh\">diff --git a/src/libcompiler_builtins b/src/libcompiler_builtins</span>\n<span class=\"gd\">--- a/src/libcompiler_builtins</span>\n<span class=\"gi\">+++ b/src/libcompiler_builtins</span>\n<span class=\"gu\">@@ -1 +1 @@</span>\n<span class=\"gd\">-Subproject commit d549d85b1735dc5066b2973f8549557a813bb9c8</span>\n<span class=\"gi\">+Subproject commit d549d85b1735dc5066b2973f8549557a813bb9c8-dirty</span>\n<span class=\"gh\">diff --git a/src/librustc_mir/borrow_check/error_reporting.rs b/src/librustc_mir/borrow_check/error_reporting.rs</span>\n<span class=\"gh\">index 818e76957f..28daca5268 100644</span>\n<span class=\"gd\">--- a/src/librustc_mir/borrow_check/error_reporting.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/borrow_check/error_reporting.rs</span>\n<span class=\"gu\">@@ -554,7 +554,6 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {</span>\n                     if self.move_data.moves[*moi].path == mpi {\n                         debug!(&quot;report_use_of_moved_or_uninitialized: found&quot;);\n                         result.push(*moi);\n<span class=\"gd\">-                        continue &#39;dfs;</span>\n                     }\n                 }\n             }\n</pre></div>",
        "id": 133016988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571186
    },
    {
        "content": "<p>then you get the original output :)</p>",
        "id": 133016991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571190
    },
    {
        "content": "<p>but I think I agree that your new output is better</p>",
        "id": 133016999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571202
    },
    {
        "content": "<p>in particular</p>",
        "id": 133017000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571203
    },
    {
        "content": "<p>if there is a scenario where you have two moves A and B</p>",
        "id": 133017009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571213
    },
    {
        "content": "<p>both of which can reach this point</p>",
        "id": 133017013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571217
    },
    {
        "content": "<p>but A also reaches B</p>",
        "id": 133017015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571219
    },
    {
        "content": "<p>(which is what happens here)</p>",
        "id": 133017019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571223
    },
    {
        "content": "<p>then there are really two errors: one is that the move B is illegal</p>",
        "id": 133017035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571236
    },
    {
        "content": "<p>and the current point is <em>also</em> illegal</p>",
        "id": 133017039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571240
    },
    {
        "content": "<p>we are currently showing both A and B for the current move, but that seems kind of redundant</p>",
        "id": 133017090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571254
    },
    {
        "content": "<p>(not sure if that makes sense the way I'm describing it... in this example, my point is that only the most recent <code>self.x</code> is relevant to <em>this</em> error -- the other <code>self.x</code> accesses cause other errors)</p>",
        "id": 133017109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571285
    },
    {
        "content": "<p>so yeah I guess I think you should update the stderr but maybe we should leave a comment or something</p>",
        "id": 133017120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571301
    },
    {
        "content": "<p>saying something like:</p>\n<hr>\n<div class=\"codehilite\"><pre><span></span>// Strictly speaking, we could continue our DFS here. There may be\n// other moves that can reach the point of error. But it is kind of confusing\n// to highlight them.\n//\n// Example:\n//\n// ```\n// let a = vec![];\n// let b = a;\n// let c = a;\n// drop(a); // &lt;-- current point of error\n// ```\n//\n// Because we stop the DFS here, we only highlight `let c = a`,\n// and not `let b = a`. We will of course also report an error at `let c = a`\n// which highlights `let b = a` as the move.\n</pre></div>",
        "id": 133017167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535571362
    },
    {
        "content": "<p>I think reporting just the first \"bad move\" makes sense from a user POV. I don't think I'd want to see 30x \"it also isn't available here\". I'm sure some user will disagree, of course <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 133017873,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535572177
    },
    {
        "content": "<p>hey</p>",
        "id": 133063849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639415
    },
    {
        "content": "<p>cool <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133063851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639417
    },
    {
        "content": "<p>gonna make the changes</p>",
        "id": 133063856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you know how to reproduce the thing locally?</p>",
        "id": 133063973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639544
    },
    {
        "content": "<p>reproduce..what?</p>",
        "id": 133063978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639553
    },
    {
        "content": "<p>I mean, I 'd run with bless but current test runs in my local machine do not fail</p>",
        "id": 133063988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639566
    },
    {
        "content": "<p>I mean just running <code>./x.py test src/test/ui</code> will work</p>",
        "id": 133063989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639566
    },
    {
        "content": "<p>do you want me to run with <code>--bless</code>?</p>",
        "id": 133063994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639571
    },
    {
        "content": "<p>(I have it all setup)</p>",
        "id": 133064007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639582
    },
    {
        "content": "<p>I mean, I don't know why that test on my machine does not fail</p>",
        "id": 133064019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639589
    },
    {
        "content": "<p>unsure what are you doing to make <code>./x.py test src/test/ui</code> fail</p>",
        "id": 133064038,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639606
    },
    {
        "content": "<p>hmm the actual command I ran was <code>./x.py test --stage 2 -i src/test/ui/</code></p>",
        "id": 133064064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639638
    },
    {
        "content": "<p>it failed in the NLL compare-mode part</p>",
        "id": 133064109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639651
    },
    {
        "content": "<p>ok, right it was on stage 2</p>",
        "id": 133064112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639653
    },
    {
        "content": "<p>well I think you said that wasn't related to stage 2</p>",
        "id": 133064124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639674
    },
    {
        "content": "<p>it's not</p>",
        "id": 133064127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639681
    },
    {
        "content": "<p>but if you run with stage1, another test fails (the macro thing)</p>",
        "id": 133064134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639687
    },
    {
        "content": "<p>I guess it's just that doing that is when the compare-mode part is ran?</p>",
        "id": 133064137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639690
    },
    {
        "content": "<p>this prevents us from running in NLL compare-mode</p>",
        "id": 133064138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639692
    },
    {
        "content": "<p>ahhhh</p>",
        "id": 133064141,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639696
    },
    {
        "content": "<p>got it got it</p>",
        "id": 133064143,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639698
    },
    {
        "content": "<p>that was my missing bit</p>",
        "id": 133064151,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639704
    },
    {
        "content": "<p>ok</p>",
        "id": 133064153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639705
    },
    {
        "content": "<p>so I can do the <code>--bless</code> if you want to add the comment :)</p>",
        "id": 133064172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639727
    },
    {
        "content": "<p>I already started it anyway</p>",
        "id": 133064175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639733
    },
    {
        "content": "<p>actually though I did have a local diff so it'll have to rebuild</p>",
        "id": 133064185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639742
    },
    {
        "content": "<p>but it goes relatively fast locally</p>",
        "id": 133064187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535639747
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133064191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535639759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've realized that I haven't added the comment you suggested</p>",
        "id": 133088087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535665191
    },
    {
        "content": "<p>did that</p>",
        "id": 133088092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535665194
    },
    {
        "content": "<p>should now be ready to +1 I guess</p>",
        "id": 133088096,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535665201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just ended with this thing compiling</p>",
        "id": 133147605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748375
    },
    {
        "content": "<p>I mean, have pasted the old code, the one related to <code>MovingOutStatements</code> back and it's compiling</p>",
        "id": 133147612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748412
    },
    {
        "content": "<p>uh :)</p>",
        "id": 133147631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748450
    },
    {
        "content": "<p>not sure what you mean :)</p>",
        "id": 133147633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748453
    },
    {
        "content": "<p>doesn't matter :)</p>",
        "id": 133147638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748465
    },
    {
        "content": "<p>so</p>",
        "id": 133147642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748478
    },
    {
        "content": "<p>do you remember that we removed the <code>MovingOutStatements</code> ?</p>",
        "id": 133147688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748493
    },
    {
        "content": "<p>was getting the code back</p>",
        "id": 133147692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748498
    },
    {
        "content": "<p>was compiling that meanwhile I was doing other stuff</p>",
        "id": 133147696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748510
    },
    {
        "content": "<p>now back to the real task</p>",
        "id": 133147698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748517
    },
    {
        "content": "<p>I guess we want to provide for <code>BitDenotation</code> a dfs method that receives a fn</p>",
        "id": 133147705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748525
    },
    {
        "content": "<p>and then we call that for the <code>MovingOutStatements</code> specific thing we are doing in this issue</p>",
        "id": 133147715,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535748548
    },
    {
        "content": "<p>yes, I imagined writing a function sort of like this (not sure exactly where it would go)</p>",
        "id": 133147732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">find_values_in_scope</span><span class=\"o\">&lt;</span><span class=\"n\">BD</span>: <span class=\"nc\">BitDenotation</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bit</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">BD</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">BD</span>::<span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133147791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748630
    },
    {
        "content": "<p>it would work fairly similarly to what you have</p>",
        "id": 133147794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748642
    },
    {
        "content": "<p>but not be hard-coded to any one thing</p>",
        "id": 133147796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748646
    },
    {
        "content": "<p>yes</p>",
        "id": 133148108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749048
    },
    {
        "content": "<p>but ... wouldn't that be inside of the trait?</p>",
        "id": 133148109,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749048
    },
    {
        "content": "<p>or I guessed it wrongly?</p>",
        "id": 133148110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749048
    },
    {
        "content": "<p>ahh I see what you mean</p>",
        "id": 133148111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749048
    },
    {
        "content": "<p>the fn is not part of the trait, it's just a fn that uses this kind of types</p>",
        "id": 133148208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749140
    },
    {
        "content": "<p>I probably didn't pay that much attention of what the trait is about</p>",
        "id": 133148222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749153
    },
    {
        "content": "<p>but at first I thought you wanted to add the fn as a fn of the trait with a default impl</p>",
        "id": 133148237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749181
    },
    {
        "content": "<p>we could do that</p>",
        "id": 133148409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535749351
    },
    {
        "content": "<p>I'd probably make it a standalone thing</p>",
        "id": 133148410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535749355
    },
    {
        "content": "<p>probably living in <code>rustc_mir::dataflow</code> though</p>",
        "id": 133148417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535749368
    },
    {
        "content": "<p>sort of analogous to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/fn.do_dataflow.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/fn.do_dataflow.html\"><code>do_dataflow</code></a></p>",
        "id": 133148431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535749389
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133148507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1535749499
    }
]