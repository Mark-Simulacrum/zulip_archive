[
    {
        "content": "<p>I would prefer if the shorthand way that things like <code>Place</code> print - ie. <code>Place::Local(Local(0))</code> being <code>_0</code> would be on <code>Display</code> and we use the derive'd <code>Debug</code> for things. It would be super helpful in being able to identify the specific case I'm seeing if I could just print it out as the types. Particularly when first starting to contribute and you aren't familiar with how to work backwards from <code>*(*(_2.3).9)</code> or something like that. There are other types where it's much more a pain too.</p>",
        "id": 135467657,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090310
    },
    {
        "content": "<p>(in reply to some comments on pretty printing in <code>#54499 Invalid \"variable does not need to be mutable\"</code> topic)</p>",
        "id": 135467768,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090383
    },
    {
        "content": "<p>I am torn</p>",
        "id": 135467947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090554
    },
    {
        "content": "<p>the derive(Debug) output is often ridiculously painful</p>",
        "id": 135467954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090560
    },
    {
        "content": "<p>but I agree that the shorthands are often unnecessarily cryptic</p>",
        "id": 135467965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090572
    },
    {
        "content": "<p>on balance I think I would prefer that we use Debug a lot more often</p>",
        "id": 135467967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090578
    },
    {
        "content": "<p>and I want <code>:?</code> to basically <em>never</em> lose data</p>",
        "id": 135467975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090592
    },
    {
        "content": "<p>which is not at all the case today</p>",
        "id": 135467979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090597
    },
    {
        "content": "<p>I don't like the idea of using <code>{}</code></p>",
        "id": 135468027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090609
    },
    {
        "content": "<p>In fact, I think I don't even like that we implement Debug for things</p>",
        "id": 135468033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090620
    },
    {
        "content": "<p>mostly because there is often a need to thread down context</p>",
        "id": 135468044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090639
    },
    {
        "content": "<p>to get a good printout</p>",
        "id": 135468050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090642
    },
    {
        "content": "<blockquote>\n<p>I don't like the idea of using <code>{}</code></p>\n</blockquote>\n<p>specifically, I think that should be reserved for \"end-user\" output, as is its intention</p>",
        "id": 135468065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090669
    },
    {
        "content": "<p>I think impl'ing Debug is prob — on balance — the right thing, but it'd be nice if there was a <code>foo.debug_with(context)</code> thing we could use</p>",
        "id": 135468086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090694
    },
    {
        "content": "<p>such that you could (e.g.) do <code>place.debug_with(mir)</code> and get better output</p>",
        "id": 135468093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090707
    },
    {
        "content": "<p>Yeah. It'd be nice to find some balance where we print something concise but that's also easy to work out what it represents - particularly for new contributors. I know that I spent a lot of time when starting out just iterating on debug statements to slowly but surely work out what the type I had actually was.</p>",
        "id": 135468094,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090708
    },
    {
        "content": "<p>similarly maybe we could have something like <code>debug!(\"{}\", foo.pretty_print())</code></p>",
        "id": 135468143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090724
    },
    {
        "content": "<p>vs <code>debug!(\"{:?}\", foo)</code>, which uses <code>derive(debug)</code> output</p>",
        "id": 135468152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090736
    },
    {
        "content": "<p><code>foo.pretty_print(cx)</code></p>",
        "id": 135468161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090749
    },
    {
        "content": "<p>hmm, maybe we should just start adding that</p>",
        "id": 135468165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090758
    },
    {
        "content": "<p>my idea would be to have a <code>PrettyPrint&lt;Context&gt;</code> trait</p>",
        "id": 135468166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090765
    },
    {
        "content": "<p>and lean on specialization</p>",
        "id": 135468172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090770
    },
    {
        "content": "<p>I don't suppose I could convince you to name the method <code>pp()</code></p>",
        "id": 135468173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090773
    },
    {
        "content": "<p>I've become pretty anti-contraction</p>",
        "id": 135468182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090784
    },
    {
        "content": "<p>just to keep us from having to break lines all over the place for <code>tidy</code>'s sake</p>",
        "id": 135468183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090785
    },
    {
        "content": "<p>but I could be convinced in this case to make an exception</p>",
        "id": 135468196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090797
    },
    {
        "content": "<p>That's what I tried to implement before when one of my PRs intersected with the <code>ppaux</code> code.</p>",
        "id": 135468199,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090802
    },
    {
        "content": "<p>in part because typing <code>pretty_print</code> is pretty tedious</p>",
        "id": 135468220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090808
    },
    {
        "content": "<p>I'm still not sure why we couldn't leverage <code>{:#?}</code> in some way</p>",
        "id": 135468286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090846
    },
    {
        "content": "<p>instead of adding new machinery...</p>",
        "id": 135468292,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090851
    },
    {
        "content": "<p>Contractions for really common things - like <code>tcx</code> - are great, but unnecessary contractions were another barrier that I remember when first starting out. By no means insurmountable, but even now if I'm diving into some code I've not touched before, it's super valuable if things have sensible names.</p>",
        "id": 135468356,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090907
    },
    {
        "content": "<p>or maybe somthing controlled by a  <code>-Z</code> switch would be best; I don't <em>like</em> having to drudge through debug logs with lines that are thousands of characters long...</p>",
        "id": 135468376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090924
    },
    {
        "content": "<blockquote>\n<p>I'm still not sure why we couldn't leverage <code>{:#?}</code> in some way</p>\n</blockquote>\n<p>a couple of reasons</p>",
        "id": 135468410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090961
    },
    {
        "content": "<p>(1) it has a meaning and that meaning is useful</p>",
        "id": 135468453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090965
    },
    {
        "content": "<p>(2) it doesn't give context</p>",
        "id": 135468463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090971
    },
    {
        "content": "<p>(3) it's RSI-inducing to type</p>",
        "id": 135468466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090975
    },
    {
        "content": "<blockquote>\n<p>my idea would be to have a PrettyPrint&lt;Context&gt; trait<br>\nand lean on specialization</p>\n</blockquote>\n<p>I have this (very outdated and broken) <a href=\"https://github.com/davidtwco/rust/commit/18dd915d6ddfdecee0598d09cf0103aa5cf61eda\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/commit/18dd915d6ddfdecee0598d09cf0103aa5cf61eda\">branch</a> from a while ago that did something similar. I think it was when we were doing the region naming code and wanted to be able to inject names into regions being printed inside larger types.</p>",
        "id": 135468471,
        "sender_full_name": "davidtwco",
        "timestamp": 1539090980
    },
    {
        "content": "<p>(4) its not googleable</p>",
        "id": 135468498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539091017
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135468500,
        "sender_full_name": "davidtwco",
        "timestamp": 1539091020
    },
    {
        "content": "<p>I personally would prefer to write <code>debug!(\"{}\", foo.pp(cx))</code> and things like that</p>",
        "id": 135468501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539091020
    },
    {
        "content": "<p>yes, <code>pp</code> you can search for in the rustc-docs</p>",
        "id": 135468507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539091026
    },
    {
        "content": "<p>and find the <code>PrettyPrint</code> trait</p>",
        "id": 135468511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539091029
    },
    {
        "content": "<p>hmm</p>",
        "id": 135468525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539091048
    },
    {
        "content": "<p>I'm a fan of the general concept of returning specific types that are meant to be printed. It especially makes sense with the context idea.</p>",
        "id": 135479633,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539100592
    }
]