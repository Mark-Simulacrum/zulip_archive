[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> you saw my comments on <a href=\"https://github.com/rust-lang/rust/pull/54468#pullrequestreview-158632061\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54468#pullrequestreview-158632061\">your PR</a>?</p>",
        "id": 134624768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537906157
    },
    {
        "content": "<p>Yes, I'm trying to track down something so for your first comment</p>",
        "id": 134624890,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537906239
    },
    {
        "content": "<p>I was wondering whether polonius needed the <code>outlives</code> facts where regions outlive themselves (one of the contributing factors to regions being computed as <code>subset</code>s of themselves) ? (there aren't many of these regions outliving themselves, for example: 456 out of the 534 327 <code>outlives</code> facts in <code>clap-rs</code>)</p>",
        "id": 134770172,
        "sender_full_name": "lqd",
        "timestamp": 1538078554
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 134771628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080113
    },
    {
        "content": "<p>they probable have a need in rustc though</p>",
        "id": 134771667,
        "sender_full_name": "lqd",
        "timestamp": 1538080167
    },
    {
        "content": "<p>no</p>",
        "id": 134771671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080171
    },
    {
        "content": "<p>they just get stripped out</p>",
        "id": 134771673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080174
    },
    {
        "content": "<p>oh really</p>",
        "id": 134771685,
        "sender_full_name": "lqd",
        "timestamp": 1538080194
    },
    {
        "content": "<p>interesting, thank you (I think I remember it from back in May when I looked at this)</p>",
        "id": 134771738,
        "sender_full_name": "lqd",
        "timestamp": 1538080206
    },
    {
        "content": "<p>btw did the recent PR switch all <code>invalidates</code> facts to mid points ? (IIRC most of them were emitted on mid-points, but there were also some on start-points) ? (if so, maybe the PR allowing the parser/program to emit effects on start-points might not needed anymore?)</p>",
        "id": 134773104,
        "sender_full_name": "lqd",
        "timestamp": 1538081565
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54468\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54468\">#54468</a> moves them to the start</p>",
        "id": 134773212,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538081680
    },
    {
        "content": "<p>ok, I'm gonna start bringing polonius back in cache now :)</p>",
        "id": 134773491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082034
    },
    {
        "content": "<p>seems like we can merge <a href=\"https://github.com/rust-lang-nursery/polonius/pull/70/\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/70/\">https://github.com/rust-lang-nursery/polonius/pull/70/</a>, to start (cc <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>) =)</p>",
        "id": 134773500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> didn't we have some known bug that you minimized...?</p>",
        "id": 134773522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082099
    },
    {
        "content": "<p>I guess that <a href=\"https://github.com/rust-lang-nursery/polonius/issues/44\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/44\">https://github.com/rust-lang-nursery/polonius/issues/44</a> is basically done</p>",
        "id": 134773580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> oh sorry I completely misremembered that from your PR, and thought it was literally the opposite</p>",
        "id": 134773604,
        "sender_full_name": "lqd",
        "timestamp": 1538082170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the 3 tests in <a href=\"http://test.rs\" target=\"_blank\" title=\"http://test.rs\">test.rs</a> are the known bug datafrogopt indeed, they are marked as <code>#[should_panic]</code> until we do fix it :)</p>",
        "id": 134773647,
        "sender_full_name": "lqd",
        "timestamp": 1538082230
    },
    {
        "content": "<p>I would like to fix correctly the previous PR hack, and I feel it's going to take a bit of API in datafrog, something like filter_map</p>",
        "id": 134773708,
        "sender_full_name": "lqd",
        "timestamp": 1538082288
    },
    {
        "content": "<p>yeah...</p>",
        "id": 134773725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082314
    },
    {
        "content": "<p>(polonius <a href=\"https://github.com/rust-lang/rust/issues/70\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70\">#70</a> is indeed just switching these tests from being manual facts to using the parser â€” tests were one of  its original  purposes anyways; but they're slightly less minimized this way)</p>",
        "id": 134773777,
        "sender_full_name": "lqd",
        "timestamp": 1538082363
    },
    {
        "content": "<p>btw the biggest win we'd have is from starting using the \"treefrog leapjoin\" work in <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/11\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/11\">https://github.com/rust-lang-nursery/datafrog/pull/11</a></p>",
        "id": 134773816,
        "sender_full_name": "lqd",
        "timestamp": 1538082435
    },
    {
        "content": "<p>oh man</p>",
        "id": 134773835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082477
    },
    {
        "content": "<p>I didn't even realize datafrog had pending PRs :)</p>",
        "id": 134773874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082484
    },
    {
        "content": "<p>/me grumbles about GH's workflow</p>",
        "id": 134773882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082488
    },
    {
        "content": "<p>frank has merged some already</p>",
        "id": 134773901,
        "sender_full_name": "lqd",
        "timestamp": 1538082515
    },
    {
        "content": "<p>(and I want to close/redo the specialization one)</p>",
        "id": 134773916,
        "sender_full_name": "lqd",
        "timestamp": 1538082544
    },
    {
        "content": "<p>I was just skimming</p>",
        "id": 134773997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082637
    },
    {
        "content": "<p>I am <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> on sticking to stable if at all possible</p>",
        "id": 134774000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082642
    },
    {
        "content": "<p>I'm trying to comment and cleanup the cfg compression work rn, I'm sure there will be lots of things to improve once I open the PR</p>",
        "id": 134774006,
        "sender_full_name": "lqd",
        "timestamp": 1538082657
    },
    {
        "content": "<p>yeah sticking to stable will just be using the existing <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> fns, not hard at all</p>",
        "id": 134774085,
        "sender_full_name": "lqd",
        "timestamp": 1538082729
    },
    {
        "content": "<p>I'm sure datafrog could use a bit of API polish as well, sticking to existing conventions, function names, etc</p>",
        "id": 134774105,
        "sender_full_name": "lqd",
        "timestamp": 1538082770
    },
    {
        "content": "<p>(and I feel there's a case with leapfrog where I expected it to work and it didn't, probable no big deal or me being stupid, but would help remove some temporary indexes/variables, I'll minimize and open an issue)</p>",
        "id": 134774181,
        "sender_full_name": "lqd",
        "timestamp": 1538082861
    },
    {
        "content": "<p>one thing that might be nice:</p>",
        "id": 134774497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083216
    },
    {
        "content": "<p>settling on our terminology a bit</p>",
        "id": 134774499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083221
    },
    {
        "content": "<p>e.g., I'm coming to prefer \"loans\" over \"Borrows\", but we're awfully inconsistent</p>",
        "id": 134774506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083229
    },
    {
        "content": "<p>from the early beginning I've had in my todo list: switch all instances of borrows/B to Loans/L :)</p>",
        "id": 134774740,
        "sender_full_name": "lqd",
        "timestamp": 1538083549
    },
    {
        "content": "<p>hehe</p>",
        "id": 134774901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083684
    },
    {
        "content": "<p>I'd like to match up the rustc code too</p>",
        "id": 134774907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083689
    },
    {
        "content": "<p>but I guess we could start by picking the vocabulary we want in polonius</p>",
        "id": 134774914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083698
    },
    {
        "content": "<p>there are some other examples, e.g., I think polonius talks about <code>outlives</code>...</p>",
        "id": 134774917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083706
    },
    {
        "content": "<p>though that is still a handy term</p>",
        "id": 134774920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083712
    },
    {
        "content": "<p>something like \"base_subset\" feels better tho</p>",
        "id": 134774948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083781
    },
    {
        "content": "<p>and base_subset was how they were introduced in the blog post IIRC</p>",
        "id": 134775089,
        "sender_full_name": "lqd",
        "timestamp": 1538083974
    },
    {
        "content": "<p>yeah I think I made an effort in the blog post to cleanup the terminology</p>",
        "id": 134775265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084210
    },
    {
        "content": "<p>but left the code alone :P</p>",
        "id": 134775266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084213
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <a href=\"https://github.com/rust-lang/rust/issues/54468\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54468\">#54468</a> landed</p>",
        "id": 134777919,
        "sender_full_name": "lqd",
        "timestamp": 1538087572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> quick question about Polonius: if 1) one had to mutate the input facts, and then 2) change the computation result based on step 1, where would you expect the code for step 2 to be: a) in the computation themselves (but that would require to change the APIs to take this new input) or b) in the \"result\" struct itself ? (option A is easy but there is no Context struct or whatever making adding inputs a bit less clean atm;, option B is a bit harder to do efficiently because needing mutation of a \"complex\" data structure while iterating it)</p>",
        "id": 135031977,
        "sender_full_name": "lqd",
        "timestamp": 1538483305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I don't have enough info in my mental cache to answer that question quickly.</p>",
        "id": 135032112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538483433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> but maybe I can fake it. Can you provide more info on what kind of mutation of the input facts you are doing?</p>",
        "id": 135032185,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538483473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  no problem, I'll just do my best and then we can iterate on the PR</p>",
        "id": 135032191,
        "sender_full_name": "lqd",
        "timestamp": 1538483480
    },
    {
        "content": "<p>My intuition is that if you want a Context struct and one is missing, then maybe we should add it</p>",
        "id": 135032218,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538483507
    },
    {
        "content": "<p>I'm compressing the facts, to do the analysis over less data, and then \"decompressing\" the live borrows</p>",
        "id": 135032223,
        "sender_full_name": "lqd",
        "timestamp": 1538483512
    },
    {
        "content": "<p>because chances are we'll end up adding one eventually anyway</p>",
        "id": 135032233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538483519
    },
    {
        "content": "<p>Hmm. Interesting.</p>",
        "id": 135032294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538483536
    },
    {
        "content": "<p>we have a kind of input context (all facts), but then each computation fills results differently, while compression is a crosscutting concern</p>",
        "id": 135032343,
        "sender_full_name": "lqd",
        "timestamp": 1538483562
    },
    {
        "content": "<p>so the whole thing is a mix of 1) adding input data, 2) generating output data, 3) no wanting to duplicate either compression or decompression code in each variant, 4) wanting for now it to be a bit external and toggleable for testing and benchmarking purposes, etc</p>",
        "id": 135032487,
        "sender_full_name": "lqd",
        "timestamp": 1538483670
    },
    {
        "content": "<p>it would probably be easier to iterate on the PR rather than everyone having to use their mind's eye to imagine the different options :)</p>",
        "id": 135032531,
        "sender_full_name": "lqd",
        "timestamp": 1538483734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw how would you expect compression to be integrated into Polonius and rustc, toggled, and tested ? new variants ? modifying the existing variants fn signature (to pass possible compression data) ?</p>",
        "id": 135216339,
        "sender_full_name": "lqd",
        "timestamp": 1538686904
    },
    {
        "content": "<p>(right now I'm locally making a temporary (it's not in the PR) variant in order to be able to test from rustc)</p>",
        "id": 135242380,
        "sender_full_name": "lqd",
        "timestamp": 1538729233
    },
    {
        "content": "<p>(and this temporary compressed-variant seemingly behaves like the default opt variant in rustc tests (both have the same 37 <a href=\"https://gist.github.com/lqd/a87e496c549ce51931901d6d7ad97dfe\" target=\"_blank\" title=\"https://gist.github.com/lqd/a87e496c549ce51931901d6d7ad97dfe\">test failures</a>, and which I believe are the failures <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> saw in their PR, some of them due to <code>ignore-compare-mode-nll</code> and other to differences/lack of diagnostics), and also like the naive variant, if I modify it to compute errors instead of just live loans)</p>",
        "id": 135249741,
        "sender_full_name": "lqd",
        "timestamp": 1538740000
    },
    {
        "content": "<p>(but to remove the biggish joins to actually compute errors instead of live loans, we'll need the treefrog PR merged in <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> :)</p>",
        "id": 135254688,
        "sender_full_name": "lqd",
        "timestamp": 1538746128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I don't know, I have to review your PR, I have mixed feelings about doing too much pre-processing etc when it comes to polonius.</p>",
        "id": 135261529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753059
    },
    {
        "content": "<p>in a sense it is getting closer to a representation focusing on liveness, IIRC like arielb mentioned a few times before</p>",
        "id": 135261683,
        "sender_full_name": "lqd",
        "timestamp": 1538753210
    },
    {
        "content": "<p>BTW, in my spare time I've been working on polonius. </p>\n<p>I fixed a bug in how we handle two-phase-borrows and fact generation and am currently going through the missing test cases. </p>\n<p>Kind of tight for time so no time for a bigger update, just though I'd  leave a note.</p>",
        "id": 150841395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543924292
    },
    {
        "content": "<p>It seems like, apart from the <a href=\"#narrow/stream/122657-wg-nll/topic/various.20region.20bugs\" title=\"#narrow/stream/122657-wg-nll/topic/various.20region.20bugs\">region bugs I described here</a>, a compare-mode=polonius run passes all tests now -- but some of them get more errors than they used to (duplicate-ish error reports).</p>",
        "id": 150844455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543928446
    },
    {
        "content": "<p>I'll open a PR with the various bug fixes though</p>",
        "id": 150844483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543928476
    },
    {
        "content": "<p>uh-oh</p>",
        "id": 152253251,
        "sender_full_name": "lqd",
        "timestamp": 1545309067
    },
    {
        "content": "<p>so I was trying to implement the illegal subset relations errors</p>",
        "id": 152253406,
        "sender_full_name": "lqd",
        "timestamp": 1545309311
    },
    {
        "content": "<p>I think we're going to hit a tiny snag with <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>'s way of ensuring stratification</p>",
        "id": 152253424,
        "sender_full_name": "lqd",
        "timestamp": 1545309360
    },
    {
        "content": "<p>that is, the subset errors are to be computed by checking a dynamic Variable (albeit \"trivially stratifiable\" in theory), while datafrog will in practice only allow antijoins with a static Relation</p>",
        "id": 152253513,
        "sender_full_name": "lqd",
        "timestamp": 1545309468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my WIP branch is <a href=\"https://github.com/lqd/borrow-check/tree/subterranean_homesick_region\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/subterranean_homesick_region\">here</a> and unless I'm missing something obvious I'm not sure I can compute the subset errors now ?</p>",
        "id": 152253636,
        "sender_full_name": "lqd",
        "timestamp": 1545309619
    },
    {
        "content": "<p>when we recently talked about a couple features and APIs datafrog could offer, we also mentioned leapjoins over Variables being nice-to-have-someday. Until now I think we would have only used that for optimization purposes, but now may become a requirement to compute these kinds of errors.</p>",
        "id": 152254112,
        "sender_full_name": "lqd",
        "timestamp": 1545310250
    },
    {
        "content": "<blockquote>\n<p>that is, the subset errors are to be computed by checking a dynamic Variable (albeit \"trivially stratifiable\" in theory), while datafrog will in practice only allow antijoins with a static Relation</p>\n</blockquote>\n<p>I mean I think the idea would be to make a <code>Relation</code> by calling <code>complete</code></p>",
        "id": 152264499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320478
    },
    {
        "content": "<p>however, I plan to change the rules from that post :)</p>",
        "id": 152264509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320487
    },
    {
        "content": "<p>though they will be similar</p>",
        "id": 152264515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320489
    },
    {
        "content": "<p>in case you are implementing them :)</p>",
        "id": 152264520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320494
    },
    {
        "content": "<p>I'll take a look at the branch</p>",
        "id": 152264525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320508
    },
    {
        "content": "<p>it's true that we could compute the known_subset TC before doing the analysis</p>",
        "id": 152264910,
        "sender_full_name": "lqd",
        "timestamp": 1545320865
    },
    {
        "content": "<p>I was indeed implementing them</p>",
        "id": 152264925,
        "sender_full_name": "lqd",
        "timestamp": 1545320876
    },
    {
        "content": "<p>I also used to compute the CFG compression table in another pass like this, so it turns out that I <em>did</em> in fact miss something obvious <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 152265062,
        "sender_full_name": "lqd",
        "timestamp": 1545320978
    },
    {
        "content": "<p>I was later a bit stuck trying to come up with facts for a text program, I think mostly for the liveness ones -- and using tiny rust examples and -Znll-facts only slightly helped (the \"outlives hack\" creating facts I didn't yet separate into needed/unneeded, to later encode in a test program)</p>",
        "id": 152265511,
        "sender_full_name": "lqd",
        "timestamp": 1545321348
    },
    {
        "content": "<p>(and also it seems the 1) <code>debug_with</code> to use unterned atoms  2) unit testing facts 3) test code deduplication, 4) tidying up the output struct 5) having a way to test inner parts of the computation (the \"verbose\" data)  -- and so on -- ideas are looking more and more interesting by ~the compute~ the minute)</p>",
        "id": 152266056,
        "sender_full_name": "lqd",
        "timestamp": 1545321854
    },
    {
        "content": "<p>I should maybe make a <code>DebugWith</code> crate -- the impl I was using in Lark is working out \"ok\", but relies on specialization</p>",
        "id": 152266110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545321951
    },
    {
        "content": "<p>could be interesting, or someone could take that off your plate :)</p>",
        "id": 152266354,
        "sender_full_name": "lqd",
        "timestamp": 1545322117
    },
    {
        "content": "<p>(also 6) renaming everything, eg borrow to loan, universal/free regions to placeholder (IIUC) etc)</p>",
        "id": 152266560,
        "sender_full_name": "lqd",
        "timestamp": 1545322269
    },
    {
        "content": "<blockquote>\n<p>however, I plan to change the rules from that post :)</p>\n</blockquote>\n<p>with any luck we'll also be able to use leapjoins for the new ones :) (the current subset error rule is \"currently not well-formed\" for leapjoins)</p>",
        "id": 152272461,
        "sender_full_name": "lqd",
        "timestamp": 1545326931
    },
    {
        "content": "<p>maybe they will be location insensitive, rn I feel we'd have errors at \"each point\" ? (or, say, more than once per missing lifetime relation; I guess points would be used for diagnostics so some will be useful :)</p>",
        "id": 152289358,
        "sender_full_name": "lqd",
        "timestamp": 1545342441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> see also <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/22\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/22\">https://github.com/rust-lang-nursery/datafrog/pull/22</a> :)</p>",
        "id": 152560123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841853
    },
    {
        "content": "<p>oh wow :) I'll take a lot in more detail when I'm back in front of a computer but it's looking nice. (Modifying <code>Relation::from</code> to not take an iter + collect into a vec was something I did before as well â€” but using specialization and before leapjoins, and I wanted to revisit it since closing that PR and leapjoins had been merged, so, yay)</p>",
        "id": 152560777,
        "sender_full_name": "lqd",
        "timestamp": 1545842828
    },
    {
        "content": "<p>the ergonomic changes are looking super nice <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 152598537,
        "sender_full_name": "lqd",
        "timestamp": 1545912309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I really like this idea of the \"tuple per round\" dump you were adding -- I'm wondering if we can modify the output to make it more easily analyzed, though. For example, maybe we want to dump into a csv files in the file system, even? Then you could enable it with something like <code>POLONIUS_CSV</code> and analyze rustc</p>",
        "id": 152598605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545912428
    },
    {
        "content": "<p>indeed it would be cool, I was planning on looking into it (thanks for the review comments btw) â€” have you seen soufflÃ©'s profiler btw ? a CSV seems a good idea so I'll look into that.</p>",
        "id": 152598661,
        "sender_full_name": "lqd",
        "timestamp": 1545912542
    },
    {
        "content": "<p>(and fix the things the other comments mention â€” esp I was wondering about the feature flag, whether it's partially useful, or not at all)</p>",
        "id": 152598724,
        "sender_full_name": "lqd",
        "timestamp": 1545912612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also I was wondering <a href=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#gistcomment-2792941\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#gistcomment-2792941\">here</a> if the new rules you mentioned for the \"invalid subset errors\" were related to \"location sensitivity\" (that is, if I could rework the rules to remove the <code>Point</code>s or if you had other ideas in mind)</p>",
        "id": 152598811,
        "sender_full_name": "lqd",
        "timestamp": 1545912811
    },
    {
        "content": "<blockquote>\n<p>(and fix the things the other comments mention â€” esp I was wondering about the feature flag, whether it's partially useful, or not at all)</p>\n</blockquote>\n<p>if possible, I would prefer if we can just ensure it has negligible runtime cost when not enabled, vs a feature flag</p>",
        "id": 152598917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545912964
    },
    {
        "content": "<p>it's always nice when you can just use stuff from nightly builds etc</p>",
        "id": 152598922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545912973
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also I was wondering <a href=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#gistcomment-2792941\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#gistcomment-2792941\">here</a> if the new rules you mentioned for the \"invalid subset errors\" were related to \"location sensitivity\" (that is, if I could rework the rules to remove the <code>Point</code>s or if you had other ideas in mind)</p>\n</blockquote>\n<p>Ah, no, not really. I might try to finish writing up the modifications I had in mind today -- for the case I described, the rules are more-or-less equivalent, but when you get to higher-ranked relations it is helpful to formulate things a bit differently.</p>\n<p>In particular the idea is to introduce a \"placeholder loan\" for each placeholder region. So instead of</p>\n<div class=\"codehilite\"><pre><span></span>placeholder_region(R)\n</pre></div>\n\n\n<p>we have</p>\n<div class=\"codehilite\"><pre><span></span>placeholder_region(R, L)\n</pre></div>\n\n\n<p>and then we can compute the <code>requires</code> relation more or less as normal (though I think  we should rename that to <code>contains</code>, <code>element</code>, or <code>member</code>; it is basically the equivalent of <code>L âˆˆ R</code>), but instead detect errors when we have a loan member we shouldn't have.</p>",
        "id": 152599003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913186
    },
    {
        "content": "<p>The reason this is useful is that sometimes you might have a <code>r1 &lt;= r2</code> relation where <code>r1</code> is (say) in U3 and <code>r2</code> in U1. This is basically equivalent to a normal <code>&lt;=</code> relation except that the placeholder loans for U2 and U3 cannot appear in <code>r2</code> -- so if such a loan appears in <code>r1</code> but we can't \"promote\" them to some other loan that <em>is</em> nameable from U1, it's an error.</p>",
        "id": 152599063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913272
    },
    {
        "content": "<p>That said, I think there is no need for \"additional location sensitivity\", do you?</p>",
        "id": 152599068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913291
    },
    {
        "content": "<p>That is, the way I setup the rules, I think it was an error if -- at any point -- there was an invalid subset relation between two placeholder regions, but it was still using the subset relations found at <em>some</em> point (versus the location insensitive rules, which combine all the subsets from all points)</p>",
        "id": 152599119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913325
    },
    {
        "content": "<p>or are you just saying it would be nice to have a location insensitive variant to use for \"screening\" purposes?</p>",
        "id": 152599122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913343
    },
    {
        "content": "<p>oh interesting â€” understood, it will important that I add more example of lifetime relations errors</p>",
        "id": 152599129,
        "sender_full_name": "lqd",
        "timestamp": 1545913369
    },
    {
        "content": "<blockquote>\n<p>That said, I think there is no need for \"additional location sensitivity\", do you?</p>\n</blockquote>\n<p>I did not per se but wasn't fully aware of the diagnostics requirements we might have in rustc â€” I was wondering about the opposite, less location sensitivity.<br>\nyeah \"screening purposes\" was more like it, not sure if it'd buy anything like the invalid accesses location insensitivity buy us (albeit our hand was forced) or just less points indicating the \"same subset error\" for diagnostics</p>",
        "id": 152599215,
        "sender_full_name": "lqd",
        "timestamp": 1545913524
    },
    {
        "content": "<p>I see, well, I hadn't really thought much about diagnostics, I admit</p>",
        "id": 152599260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913572
    },
    {
        "content": "<p>I think it might be useful to remember a location where the error occurred (which we currently discard)</p>",
        "id": 152599263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913588
    },
    {
        "content": "<p>however</p>",
        "id": 152599264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913594
    },
    {
        "content": "<p>the current diagnostics do not have or use that information</p>",
        "id": 152599266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913599
    },
    {
        "content": "<p>we only track the invalid subset relation</p>",
        "id": 152599267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913606
    },
    {
        "content": "<p>that is, given some <code>r1 &lt;= r2</code> that is not <em>known</em> to be true, we then analyze the subset relations directly</p>",
        "id": 152599272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913626
    },
    {
        "content": "<p>to figure out the output</p>",
        "id": 152599273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913628
    },
    {
        "content": "<p>so actually I think the code should mostly \"just work\"</p>",
        "id": 152599278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913640
    },
    {
        "content": "<p>at some point once all this stuff settles down, I would like to revisit our diganostic code,</p>",
        "id": 152599283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913656
    },
    {
        "content": "<p>I feel like <em>in principle</em> we should be able to use the same horn-clauses that drive the analysis to also figure out our diagnostics</p>",
        "id": 152599286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913671
    },
    {
        "content": "<p>but we'd need to either do causal analysis or enable a top-down evaluation</p>",
        "id": 152599325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913683
    },
    {
        "content": "<p>(perhaps of the naive rules)</p>",
        "id": 152599328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913690
    },
    {
        "content": "<p>it'd be nice if we could simplify down to a core set of rules and make things more DRY, particularly if we are able to move more things into those rules...</p>",
        "id": 152599335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> shall I merge <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/22\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/22\">https://github.com/rust-lang-nursery/datafrog/pull/22</a> then, you think?</p>",
        "id": 152599356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913776
    },
    {
        "content": "<p>agreed</p>",
        "id": 152599357,
        "sender_full_name": "lqd",
        "timestamp": 1545913784
    },
    {
        "content": "<p>afaik it is correct :P</p>",
        "id": 152599358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913785
    },
    {
        "content": "<p>yeah I think so :)</p>",
        "id": 152599360,
        "sender_full_name": "lqd",
        "timestamp": 1545913790
    },
    {
        "content": "<p>although I should probably build a modified version of rustc since the polonius self tests don't really cover much</p>",
        "id": 152599411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913817
    },
    {
        "content": "<p>speaking of which, did my polonius branch land yet...</p>",
        "id": 152599419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913841
    },
    {
        "content": "<p>argh, no</p>",
        "id": 152599421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913848
    },
    {
        "content": "<p>wtf</p>",
        "id": 152599422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913854
    },
    {
        "content": "<p>true â€” I'll try to improve the polonius self tests over time, building a custom rustc for changes in it or datafrog to make sure they're correct is a bit unfortunate rn</p>",
        "id": 152599475,
        "sender_full_name": "lqd",
        "timestamp": 1545913942
    },
    {
        "content": "<p>dang cargo.lock conflicts</p>",
        "id": 152599487,
        "sender_full_name": "lqd",
        "timestamp": 1545913977
    },
    {
        "content": "<p>yeah -- we could <em>perhaps</em> use proptest</p>",
        "id": 152599488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913978
    },
    {
        "content": "<p>it's hard to tell though how much coverage that's getting</p>",
        "id": 152599494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913986
    },
    {
        "content": "<p>probably better to just move more representative tests over</p>",
        "id": 152599496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913992
    },
    {
        "content": "<p>I forget if I did that or not? I think I did <em>some</em> patterns</p>",
        "id": 152599498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914005
    },
    {
        "content": "<p>yeah, you added some tricky ones recently</p>",
        "id": 152599501,
        "sender_full_name": "lqd",
        "timestamp": 1545914025
    },
    {
        "content": "<p>I'd like to make a few more datafrog tests, the proptest setup seemed to work ok</p>",
        "id": 152599502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914030
    },
    {
        "content": "<p>but anyway</p>",
        "id": 152599543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914049
    },
    {
        "content": "<p>e.g. a test of leapjoin's with more than one combinator etc</p>",
        "id": 152599546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914059
    },
    {
        "content": "<p>it seems tractable for datafrog, maybe a bit less so for polonius but would be nice/important</p>",
        "id": 152599549,
        "sender_full_name": "lqd",
        "timestamp": 1545914077
    },
    {
        "content": "<p>(that is, the piece of code to generate a random set of valid facts seemed not immediately obvious but maybe it's not that hard)</p>",
        "id": 152599608,
        "sender_full_name": "lqd",
        "timestamp": 1545914187
    },
    {
        "content": "<blockquote>\n<p>it seems tractable for datafrog, maybe a bit less so for polonius but would be nice/important</p>\n</blockquote>\n<p>yes -- I mean we can generate random facts, but it's not clear that those facts are \"realistic\" in any particularly useful way</p>",
        "id": 152599784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914561
    },
    {
        "content": "<p>right</p>",
        "id": 152599853,
        "sender_full_name": "lqd",
        "timestamp": 1545914677
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so I did that run with the new datafrog -- interestingly, it came up with <em>fewer</em> \"compare-mode failures\" than before. There used to be 22, now there were 11. But each of those 11 were previously present. (I went over all the failures at some point and found that they were all legit) I'm not sure why it's behaving differently, might be owing to the rebase.</p>",
        "id": 152605323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923036
    },
    {
        "content": "<p>I'm now re-running the rebased version of my branch but without the datafrog 2.0 changes</p>",
        "id": 152605366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923050
    },
    {
        "content": "<p>it was mostly stuff like we used to report duplicate errors with polonius enabled but don't know</p>",
        "id": 152605371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923065
    },
    {
        "content": "<p>doesn't seem <em>bad</em> but I don't know the cause</p>",
        "id": 152605376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for the <code>Option&lt;Tuple&gt;</code> I was thinking of something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">from_filterable_join</span><span class=\"o\">&lt;</span><span class=\"n\">K</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V1</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V2</span>: <span class=\"nb\">Ord</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">logic</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">V1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">V2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Tuple</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">join</span>::<span class=\"n\">filterable_join_into</span><span class=\"p\">(</span><span class=\"n\">input1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">logic</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where <code>filterable_join_into</code> would only add the tuple to the results, if <code>logic</code> would return a Some.</p>\n<p>in my mind it would allow to filter the cases where we would see symmetries in Polonius but I could be very mistaken :/</p>",
        "id": 152605386,
        "sender_full_name": "lqd",
        "timestamp": 1545923085
    },
    {
        "content": "<p>ah, yeah, I wondered about that</p>",
        "id": 152605391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923097
    },
    {
        "content": "<p>that would be less efficient than the <code>PrefixFilter</code></p>",
        "id": 152605401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923108
    },
    {
        "content": "<p>but roughly equivalent to the <code>ValueFilter</code>, I think</p>",
        "id": 152605407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923123
    },
    {
        "content": "<p>still, I think it's not worth it because it seems to impose a kind of ergonomic hit on all other uses</p>",
        "id": 152605410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923132
    },
    {
        "content": "<p>in any case it was mostly a thought about these symmetries and the other PRs (while we were talking about API changes), nothing to prevent the PR from landing or anything</p>",
        "id": 152605457,
        "sender_full_name": "lqd",
        "timestamp": 1545923178
    },
    {
        "content": "<p>(i.e., we have to add <code>Some</code> everywhere)</p>",
        "id": 152605461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923186
    },
    {
        "content": "<p>it does feel though like there is some kind of \"gap\" opening up between the leapjoin and join stuff</p>",
        "id": 152605470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923215
    },
    {
        "content": "<p>was the run with your new unlanded Polonius fixes btw ?</p>",
        "id": 152605477,
        "sender_full_name": "lqd",
        "timestamp": 1545923224
    },
    {
        "content": "<p>yes</p>",
        "id": 152605481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923227
    },
    {
        "content": "<p>reason I ask is:</p>",
        "id": 152605490,
        "sender_full_name": "lqd",
        "timestamp": 1545923237
    },
    {
        "content": "<blockquote>\n<p>it does feel though like there is some kind of \"gap\" opening up between the leapjoin and join stuff</p>\n</blockquote>\n<p>makes me wonder if there is some unified API waiting to be discovered</p>",
        "id": 152605509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923261
    },
    {
        "content": "<p>IIRC it was using polonius engine 0.6, and we fixed the Naive variant producing errors in 0.6.1 so I wondered if compare-mode wouldn't produce more failures than there was for real</p>",
        "id": 152605562,
        "sender_full_name": "lqd",
        "timestamp": 1545923294
    },
    {
        "content": "<blockquote>\n<p>it does feel though like there is some kind of \"gap\" opening up between the leapjoin and join stuff</p>\n</blockquote>\n<p>interesting thought <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span> â€” in the meantime, the new convenience APIs will at least allow to pick and choose for all the different cases we might need to support</p>",
        "id": 152605598,
        "sender_full_name": "lqd",
        "timestamp": 1545923374
    },
    {
        "content": "<p>yeah</p>",
        "id": 152605605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923396
    },
    {
        "content": "<p>it's ok, we can do 3.0 :)</p>",
        "id": 152605607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923400
    },
    {
        "content": "<p>major versions are free, I hear</p>",
        "id": 152605648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923403
    },
    {
        "content": "<p><span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152605734,
        "sender_full_name": "lqd",
        "timestamp": 1545923524
    },
    {
        "content": "<p>mostly it feels like there is some sort of \"combinator\"</p>",
        "id": 152605786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923617
    },
    {
        "content": "<p>that we haven't <em>quite</em> figured out</p>",
        "id": 152605790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923623
    },
    {
        "content": "<p>maybe it's just the differential API :)</p>",
        "id": 152605836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545923643
    },
    {
        "content": "<p>probably :)</p>",
        "id": 152605944,
        "sender_full_name": "lqd",
        "timestamp": 1545923785
    },
    {
        "content": "<p>did you want another rustc test run after rebasing over the Prefix/Value filters ? (or maybe using polonius-engine 0.6.1 if that was a source of additional or missed errors in compare-mode), in any case merge at your leisure :)</p>",
        "id": 152607175,
        "sender_full_name": "lqd",
        "timestamp": 1545925456
    },
    {
        "content": "<p>nah, I don't see how that could introduce bugs</p>",
        "id": 152607767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926316
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I updated <a href=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#file-subregion-md\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#file-subregion-md\">the subregion blog post</a> to the newer formulation, though I've yet to write the sequel, so I may yet tweak it a bit more :)</p>",
        "id": 152607791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926351
    },
    {
        "content": "<p><span class=\"emoji emoji-1f6a2\" title=\"ship\">:ship:</span> it (maybe accept the \"reuslting\" typo fix)</p>",
        "id": 152607816,
        "sender_full_name": "lqd",
        "timestamp": 1545926388
    },
    {
        "content": "<p>:)</p>",
        "id": 152607887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926418
    },
    {
        "content": "<p>yep</p>",
        "id": 152607888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926419
    },
    {
        "content": "<blockquote>\n<p>nah, I don't see how that could introduce bugs</p>\n</blockquote>\n<p>famous last words if ever I heard them but wev :)</p>",
        "id": 152607905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926448
    },
    {
        "content": "<blockquote>\n<p>I updated <a href=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#file-subregion-md\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/6dd99a0126e3f82c64a6d4a6f9989c63#file-subregion-md\">the subregion blog post</a></p>\n</blockquote>\n<p>awesome, I'll update the WIP branch soon, and if we need to tweak it a bit later, we'll tweak it later :)</p>",
        "id": 152607988,
        "sender_full_name": "lqd",
        "timestamp": 1545926534
    },
    {
        "content": "<p>(and also, thanks)</p>",
        "id": 152608006,
        "sender_full_name": "lqd",
        "timestamp": 1545926573
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/datafrog/pull/23\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/23\">https://github.com/rust-lang-nursery/datafrog/pull/23</a></p>",
        "id": 152608472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545927127
    },
    {
        "content": "<p>released: <a href=\"https://github.com/rust-lang-nursery/polonius/pull/95/\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/95/\">https://github.com/rust-lang-nursery/polonius/pull/95/</a></p>",
        "id": 152608770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545927586
    },
    {
        "content": "<p>bors is stubbornly absent :)</p>",
        "id": 152608969,
        "sender_full_name": "lqd",
        "timestamp": 1545927895
    },
    {
        "content": "<p>(r+ed)</p>",
        "id": 152609376,
        "sender_full_name": "lqd",
        "timestamp": 1545928470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  are you going to add this to <a href=\"https://github.com/rust-lang/rust/issues/56507\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56507\">#56507</a>, or can it be r+'d again now?</p>",
        "id": 152612142,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1545932585
    },
    {
        "content": "<p>(datafrog's changes were mostly ergonomic, + the odd possible optimization, so maybe unlikely to be integrated into that PR ?)</p>",
        "id": 152613004,
        "sender_full_name": "lqd",
        "timestamp": 1545933799
    },
    {
        "content": "<p>(hmm, then again niko seems to be close to publishing polonius 0.6.2 so maybe :p â€” whichever of this and <a href=\"https://github.com/rust-lang/rust/issues/56384\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56384\">#56384</a> lands first will probably require the other to rebase anyway)</p>",
        "id": 152613103,
        "sender_full_name": "lqd",
        "timestamp": 1545933945
    },
    {
        "content": "<p>oh wow, higher-ranked relations require <code>contains(R, L, P) :- placeholder_region(R, L), cfg_node(P).</code> <em>mind explodes</em> â€” I thought these new errors could be more or less easily added to the existing variants but, alas, it seems I was wrong :)</p>",
        "id": 152625372,
        "sender_full_name": "lqd",
        "timestamp": 1545951853
    },
    {
        "content": "<p>I'm actually not entirely sure what higher-ranked regions will require. I have to think it over more. I <em>thought</em> I saw a \"path\" but I realized a few potential complications yesterday.</p>",
        "id": 152654685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546005139
    },
    {
        "content": "<blockquote>\n<p>are you going to add this to <a href=\"https://github.com/rust-lang/rust/issues/56507\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56507\">#56507</a>, or can it be r+'d again now?</p>\n</blockquote>\n<p>added, rebased, r+'d, looks like it may even land for once =)</p>",
        "id": 152654690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546005161
    },
    {
        "content": "<p>after seeing the effects of compression, anything joining to the full CFG is a tad scary at times :)</p>",
        "id": 152655467,
        "sender_full_name": "lqd",
        "timestamp": 1546006271
    },
    {
        "content": "<p>yeah, I'd like to eliminate that join</p>",
        "id": 152657924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010257
    },
    {
        "content": "<p>note that we do it today in rust code though</p>",
        "id": 152657928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010266
    },
    {
        "content": "<p>I think it can probably be eliminated, but it might complicate things</p>",
        "id": 152657968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010285
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I extended <a href=\"https://github.com/rust-lang-nursery/polonius/pull/96\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/96\">https://github.com/rust-lang-nursery/polonius/pull/96</a></p>",
        "id": 152658057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010421
    },
    {
        "content": "<p>awesome!</p>",
        "id": 152658066,
        "sender_full_name": "lqd",
        "timestamp": 1546010465
    },
    {
        "content": "<p>thankfully it didn't uncover bugs :)</p>",
        "id": 152658121,
        "sender_full_name": "lqd",
        "timestamp": 1546010530
    },
    {
        "content": "<p>I guess the comment could mention that it properly checks subsets now and not just the lack of errors but that would be nitpicking</p>",
        "id": 152658198,
        "sender_full_name": "lqd",
        "timestamp": 1546010695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh you did change it ;) sorry I noticed after you merged: in the first panic, aren't the first loan and point arguments reversed:  \"for {point} at {loan}\" ?</p>",
        "id": 152658658,
        "sender_full_name": "lqd",
        "timestamp": 1546011511
    },
    {
        "content": "<p>I changed it after I saw your comment :)</p>",
        "id": 152658663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546011530
    },
    {
        "content": "<p>regarding the debug message, probably...</p>",
        "id": 152658668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546011542
    },
    {
        "content": "<p>no big deal as it won't trigger don't worry about it I'll open a PR :)</p>",
        "id": 152658671,
        "sender_full_name": "lqd",
        "timestamp": 1546011544
    },
    {
        "content": "<p>ok :)</p>",
        "id": 152658677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546011552
    },
    {
        "content": "<p>ty</p>",
        "id": 152658679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546011555
    },
    {
        "content": "<p>np</p>",
        "id": 152658680,
        "sender_full_name": "lqd",
        "timestamp": 1546011560
    },
    {
        "content": "<p>(done)</p>",
        "id": 152659373,
        "sender_full_name": "lqd",
        "timestamp": 1546012604
    },
    {
        "content": "<blockquote>\n<p>looks like it may even land for once =)</p>\n</blockquote>\n<p>[narrator] <a href=\"https://github.com/rust-lang/rust/pull/56507#issuecomment-450373979\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56507#issuecomment-450373979\">it didn't</a> :(</p>",
        "id": 152663957,
        "sender_full_name": "lqd",
        "timestamp": 1546018918
    },
    {
        "content": "<p>another panic trying to document rustc_codegen_llvm, no backtrace, and the option it complains about seems to exist</p>",
        "id": 152664000,
        "sender_full_name": "lqd",
        "timestamp": 1546018938
    },
    {
        "content": "<p>I'll ask infra in case they've seen it elsewhere, if it's spurious or anything</p>",
        "id": 152664158,
        "sender_full_name": "lqd",
        "timestamp": 1546019182
    },
    {
        "content": "<p>I think I found the vague origin of the failure, and am currently investigating to pinpoint it a bit more</p>",
        "id": 152666723,
        "sender_full_name": "lqd",
        "timestamp": 1546022789
    },
    {
        "content": "<p>(so it's a rustdoc ICE trying to document datafrog, the great simulacrum bisected it to commits close to the leapjoin API additions; I'm trying to minimize these changes so that the rustdoc team can look at it more easily)</p>",
        "id": 152669383,
        "sender_full_name": "lqd",
        "timestamp": 1546026229
    },
    {
        "content": "<p>(update: I've minimized it and will open a rust issue, I think I have a workaround/fix in the meantime)</p>",
        "id": 152671953,
        "sender_full_name": "lqd",
        "timestamp": 1546029427
    },
    {
        "content": "<p>(another parenthesis and another update: <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/56507\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56507\">#56507</a> is hitting a \"rustdoc issue\" which I've minimized to <a href=\"https://github.com/rust-lang/rust/issues/57180\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57180\">#57180</a> and worked around/fixed in <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/24\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/24\">datafrog</a> â€” once merged, and another <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> version is published into another published version of polonius, and this PR using the latter THEN your PR will land <em>famous last words</em> :)</p>",
        "id": 152677384,
        "sender_full_name": "lqd",
        "timestamp": 1546037703
    },
    {
        "content": "<p>wow, awesome <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, thanks!</p>",
        "id": 154195660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457654
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think I will close <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/19\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/19\">https://github.com/rust-lang-nursery/datafrog/pull/19</a>, given that it didn't seem to make things any faster, and it makes the datafrog code that much more complex and less uniform.</p>",
        "id": 154195787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457774
    },
    {
        "content": "<p>oh, was it about speed ? I didn't look at it myself so I was expecting it to be about \"less copying\"</p>",
        "id": 154195897,
        "sender_full_name": "lqd",
        "timestamp": 1546457889
    },
    {
        "content": "<p>well the idea was to pass around <code>u32</code> values and not <code>&amp;u32</code> values</p>",
        "id": 154195928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457925
    },
    {
        "content": "<p>given that the former is smaller</p>",
        "id": 154195932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457931
    },
    {
        "content": "<p>idk, maybe i'll leave it open and re-explore in a bit. it would be nice to be a bit less pointer-centric</p>",
        "id": 154195943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457954
    },
    {
        "content": "<p>(and/or possible Variable in leapjoins)</p>",
        "id": 154195944,
        "sender_full_name": "lqd",
        "timestamp": 1546457957
    },
    {
        "content": "<p>but basically yes it's all a perf optimization</p>",
        "id": 154195949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457968
    },
    {
        "content": "<p>in the end</p>",
        "id": 154195951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457970
    },
    {
        "content": "<p>oh ok, it would have been cool !</p>",
        "id": 154196037,
        "sender_full_name": "lqd",
        "timestamp": 1546458038
    },
    {
        "content": "<p>datafrog v2.0.1 published</p>",
        "id": 154196150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458167
    },
    {
        "content": "<p>I am debating now -- I can presumably update my PR to just add a <code>datafrog = 2.0.1</code> dependency into rustc</p>",
        "id": 154196191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458221
    },
    {
        "content": "<p>seems like a lot of trouble to re-issue a new version of <code>polonius-engine</code></p>",
        "id": 154196198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458233
    },
    {
        "content": "<p>I could also just update the cargo lock file I guess but that feels..sketchy to me..?</p>",
        "id": 154196244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458245
    },
    {
        "content": "<p>not sure why</p>",
        "id": 154196258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458257
    },
    {
        "content": "<p>ah, well, just rebasing already did the job</p>",
        "id": 154196284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458296
    },
    {
        "content": "<p>i.e., regenerating the cargo lock gave me datafrog 2.0.1</p>",
        "id": 154196302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458308
    },
    {
        "content": "<p>I'll leave it at that :)</p>",
        "id": 154196304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458310
    },
    {
        "content": "<p>haha nice</p>",
        "id": 154196325,
        "sender_full_name": "lqd",
        "timestamp": 1546458342
    }
]