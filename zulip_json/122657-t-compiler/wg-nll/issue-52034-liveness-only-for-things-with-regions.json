[
    {
        "content": "<p>Ok, so <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span>, discussing <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">https://github.com/rust-lang/rust/issues/52034</a> ...</p>",
        "id": 129152147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812323
    },
    {
        "content": "<p>the first step I think would be to refactor liveness</p>",
        "id": 129152167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812344
    },
    {
        "content": "<p>so as to introduce some indirection</p>",
        "id": 129152172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812347
    },
    {
        "content": "<p>e.g., right now it is always operating over bit sets of <code>mir::Local</code> -- that is, the full range of local variables</p>",
        "id": 129152182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812359
    },
    {
        "content": "<p>I would probably start by trying to refactor it (but not change anything else) to operate over a bit set of some generic type <code>N: Idx</code></p>",
        "id": 129152194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812375
    },
    {
        "content": "<p>and then have a mapping fn from <code>Local -&gt; Option&lt;N&gt;</code> (for now, we would always use it with <code>N = Local</code> and the mapping would be <code>Some</code>)</p>",
        "id": 129152209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812397
    },
    {
        "content": "<p>does that make sense at all?</p>",
        "id": 129152255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812406
    },
    {
        "content": "<p>by liveness you mean the <code>generate</code> function?</p>",
        "id": 129152266,
        "sender_full_name": "DPC",
        "timestamp": 1530812421
    },
    {
        "content": "<p>I mean the whole module pretty much</p>",
        "id": 129152288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812441
    },
    {
        "content": "<p>ah okay</p>",
        "id": 129152292,
        "sender_full_name": "DPC",
        "timestamp": 1530812445
    },
    {
        "content": "<p>so e.g. <a href=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L55\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L55\"><code>LivenessResult</code></a> would be <code>struct LivenessResult&lt;N: Idx&gt;</code></p>",
        "id": 129152331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812485
    },
    {
        "content": "<p>or maybe <code>V</code> (for \"variable\")</p>",
        "id": 129152336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812489
    },
    {
        "content": "<p>whatever</p>",
        "id": 129152337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812491
    },
    {
        "content": "<p>the field <a href=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L61\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L61\">outs</a> would go from</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">outs</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">outs</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129152354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812515
    },
    {
        "content": "<p>ok got it</p>",
        "id": 129152393,
        "sender_full_name": "DPC",
        "timestamp": 1530812523
    },
    {
        "content": "<p>ok</p>",
        "id": 129152403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812529
    },
    {
        "content": "<p>the <a href=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/94eb1760551096363ec04e42367b6b195592dbd8/src/librustc_mir/util/liveness.rs#L164\">simulate_block</a> callback would then change from</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">OP</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">LocalSet</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">OP</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">LocalSet</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I suppose</p>",
        "id": 129152444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812582
    },
    {
        "content": "<p>anyway I guess you get the idea :)</p>",
        "id": 129152452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812588
    },
    {
        "content": "<p>ya i have something to start with</p>",
        "id": 129152472,
        "sender_full_name": "DPC",
        "timestamp": 1530812618
    },
    {
        "content": "<p>let me know if other questions arise :)</p>",
        "id": 129152543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812676
    },
    {
        "content": "<p>ps a tip</p>",
        "id": 129152547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812680
    },
    {
        "content": "<p>for this sort of refactoring</p>",
        "id": 129152559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812682
    },
    {
        "content": "<p>I strongly recommend <code>./x.py check</code></p>",
        "id": 129152563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812687
    },
    {
        "content": "<p>much faster</p>",
        "id": 129152567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812694
    },
    {
        "content": "<p>and this ought to be the kind of thing where</p>",
        "id": 129152569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812701
    },
    {
        "content": "<p>as long as it compiles, it will work</p>",
        "id": 129152577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812704
    },
    {
        "content": "<p>i have issues with cmake on this system.</p>",
        "id": 129152586,
        "sender_full_name": "DPC",
        "timestamp": 1530812717
    },
    {
        "content": "<p>but i guess that doesn't matter for <code>x.py check</code></p>",
        "id": 129152601,
        "sender_full_name": "DPC",
        "timestamp": 1530812748
    },
    {
        "content": "<p>well you do prob have to build LLVM?</p>",
        "id": 129153109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530813302
    },
    {
        "content": "<p>not sure</p>",
        "id": 129153110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530813302
    },
    {
        "content": "<p>it compiled file so i'm good <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 129153304,
        "sender_full_name": "DPC",
        "timestamp": 1530813494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> how goes btw? :)</p>",
        "id": 129205569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888226
    },
    {
        "content": "<p>feel free to open a [WIP] PR ...</p>",
        "id": 129205576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888236
    },
    {
        "content": "<p>sorry to hound you, this is just a high priority item :)</p>",
        "id": 129205615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888244
    },
    {
        "content": "<p>added the V's everywhere but i'm now stuck at someplace needing it</p>",
        "id": 129205632,
        "sender_full_name": "DPC",
        "timestamp": 1530888268
    },
    {
        "content": "<p>ya its fine. I understand</p>",
        "id": 129205634,
        "sender_full_name": "DPC",
        "timestamp": 1530888273
    },
    {
        "content": "<p>So  i changed <code>LivenessResult</code>to <code>LivenessResults&lt;V: Idx&gt;</code>now but i get type annotation error <a href=\"https://github.com/Dylan-DPC/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src/librustc_mir/borrow_check/nll/mod.rs#L104-L103\" target=\"_blank\" title=\"https://github.com/Dylan-DPC/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src/librustc_mir/borrow_check/nll/mod.rs#L104-L103\">https://github.com/Dylan-DPC/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src/librustc_mir/borrow_check/nll/mod.rs#L104-L103</a></p>",
        "id": 129205891,
        "sender_full_name": "DPC",
        "timestamp": 1530888499
    },
    {
        "content": "<p>ah, yes, you probably need to do <code>LivenessResults::&lt;Local&gt;::new</code> or something tos tart</p>",
        "id": 129205940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888580
    },
    {
        "content": "<p>but you also will need some kind of \"conversion\" fn supplied somewhere, right?</p>",
        "id": 129205946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888590
    },
    {
        "content": "<p>(if you do open the PR, I can check it out locally)</p>",
        "id": 129205952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530888601
    },
    {
        "content": "<p>conversion for?</p>",
        "id": 129207006,
        "sender_full_name": "DPC",
        "timestamp": 1530889708
    },
    {
        "content": "<p>I mean conversion from Local to <code>Option&lt;V&gt;</code></p>",
        "id": 129207752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530890577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> can you send me your most recent commit or something?</p>",
        "id": 129207786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530890629
    },
    {
        "content": "<p>(or just open a <code>[WIP]</code> PR)</p>",
        "id": 129207839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530890645
    },
    {
        "content": "<p>yah will open a wip pr</p>",
        "id": 129207843,
        "sender_full_name": "DPC",
        "timestamp": 1530890647
    },
    {
        "content": "<p>ok, it'd be easier to take a look that way</p>",
        "id": 129207848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530890654
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/52115\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115\">https://github.com/rust-lang/rust/pull/52115</a></p>",
        "id": 129213453,
        "sender_full_name": "DPC",
        "timestamp": 1530897124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> great! :) I had some errands to run but I'm back now</p>",
        "id": 129218690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530903656
    },
    {
        "content": "<p>I'll take a quick look</p>",
        "id": 129218692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530903658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <a href=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-135123555\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-135123555\">left a review here</a>, let me know what you think</p>",
        "id": 129219285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904395
    },
    {
        "content": "<p>looks good to me. The only reason i had to &lt;V&gt; most of the structs because one of the parameters needed a &lt;V&gt; which isn't needed if a &lt;Local&gt; it</p>",
        "id": 129220229,
        "sender_full_name": "DPC",
        "timestamp": 1530905422
    },
    {
        "content": "<p>yep :)</p>",
        "id": 129221016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530906551
    },
    {
        "content": "<p>(this is just the first part, mind you, eventually some of those structs will use something other than <code>Local</code>)</p>",
        "id": 129221019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530906564
    },
    {
        "content": "<p>but first we should be able to get it working with an identity mapping and that's like 90% of the work</p>",
        "id": 129221022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530906579
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 129257442,
        "sender_full_name": "DPC",
        "timestamp": 1530970790
    },
    {
        "content": "<p>you never completed your <a href=\"https://github.com/rust-lang/rust/pull/52115/files#r200744975\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115/files#r200744975\">example</a> <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 129257490,
        "sender_full_name": "DPC",
        "timestamp": 1530970817
    },
    {
        "content": "<p>whoops :)</p>",
        "id": 129259439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530974860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <a href=\"https://github.com/rust-lang/rust/pull/52115/files#r200744975\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115/files#r200744975\">fixed the comment</a></p>",
        "id": 129259490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530974936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> did this work out any better?</p>",
        "id": 129271596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530996097
    },
    {
        "content": "<p>hey.. was about to ping you. having some type issues and other errors</p>",
        "id": 129271635,
        "sender_full_name": "DPC",
        "timestamp": 1530996134
    },
    {
        "content": "<p>i have dropped &lt;V&gt; for Local in some more places</p>",
        "id": 129271637,
        "sender_full_name": "DPC",
        "timestamp": 1530996172
    },
    {
        "content": "<p>ok, I'm gonna board flight soon but if you push a commit and errors I may be able to offer some tips :)</p>",
        "id": 129272192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530997260
    },
    {
        "content": "<p>I had pushed last night. You can take a look when you are free <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 129287988,
        "sender_full_name": "DPC",
        "timestamp": 1531033771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have pushed a <a href=\"https://github.com/rust-lang/rust/pull/52115/commits/5f4cb99fd2e3c210fe5ba90e316cb6d32c3f8a4b\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115/commits/5f4cb99fd2e3c210fe5ba90e316cb6d32c3f8a4b\">commit</a> that uses the <code>V: LiveVariableMap</code>  instead of <code>V:Idx</code>. If this is fine, i'll change the others to reflect the same.</p>",
        "id": 129300262,
        "sender_full_name": "DPC",
        "timestamp": 1531057646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> argh sorry! I was on the plane and havne't had time to open a computer till just now :)</p>",
        "id": 129517207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531372632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <a href=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-136910766\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-136910766\">left another round of feedback</a> — I have to run for now again :) I might be back later though</p>",
        "id": 129582153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531460962
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 129582332,
        "sender_full_name": "DPC",
        "timestamp": 1531461312
    },
    {
        "content": "<p>let me know if it makes sense :) the key points are:</p>\n<ul>\n<li>only the liveness code needs to be parameterized, I think</li>\n<li>we can distinguish between the type <code>V</code> (which represents a local variable) and the map type <code>M</code></li>\n</ul>",
        "id": 129586768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531468755
    },
    {
        "content": "<p>yeah it does. have made the changes will push in a sec</p>",
        "id": 129588872,
        "sender_full_name": "DPC",
        "timestamp": 1531471643
    },
    {
        "content": "<p>i'm getting:</p>\n<div class=\"codehilite\"><pre><span></span>116 | impl&lt;V, M: LiveVariableMap&lt;LiveVar = V&gt;&gt; LivenessResults&lt;V&gt; {\n    |         ^ unconstrained type parameter\n</pre></div>",
        "id": 129591185,
        "sender_full_name": "DPC",
        "timestamp": 1531475020
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> by the way, if you fix the tidy failures on your PR, Travis will be able to continue, compile and run tests and in general be very helpful :)</p>",
        "id": 129596397,
        "sender_full_name": "lqd",
        "timestamp": 1531482912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thanks. right now it is not ready and there are many changes left which make the test status of no relavance at this point.</p>",
        "id": 129603731,
        "sender_full_name": "DPC",
        "timestamp": 1531491861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> I think the <code>M</code> parameter just has to be moved to the methods in question</p>",
        "id": 129610446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531498634
    },
    {
        "content": "<p>Left a <a href=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-137112191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115#pullrequestreview-137112191\">few more comments</a></p>",
        "id": 129612519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531500786
    },
    {
        "content": "<p>yah saw it</p>",
        "id": 129612617,
        "sender_full_name": "DPC",
        "timestamp": 1531500846
    },
    {
        "content": "<p>How do I handle passing \"local\" or whatever to LocalSet in cases like this? <a href=\"https://github.com/Dylan-DPC/rust/blob/4c8605076f4f6c8d52c809d2f854ea43d520e5fd/src/librustc_mir/transform/generator.rs#L133\" target=\"_blank\" title=\"https://github.com/Dylan-DPC/rust/blob/4c8605076f4f6c8d52c809d2f854ea43d520e5fd/src/librustc_mir/transform/generator.rs#L133\">https://github.com/Dylan-DPC/rust/blob/4c8605076f4f6c8d52c809d2f854ea43d520e5fd/src/librustc_mir/transform/generator.rs#L133</a></p>",
        "id": 129661670,
        "sender_full_name": "DPC",
        "timestamp": 1531574397
    },
    {
        "content": "<p>that case should just remain <code>Local</code> -- I'm not sure I 100% understand</p>",
        "id": 129663829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531578842
    },
    {
        "content": "<p>(in particular that code is not part of MIR borrowck)</p>",
        "id": 129663857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531578859
    },
    {
        "content": "<p>that errors because I added the bind on the type <code>pub type LocalSet&lt;V: LiveVariableMap&gt; = IdxSetBuf&lt;V::LiveVar&gt;;</code></p>",
        "id": 129664463,
        "sender_full_name": "DPC",
        "timestamp": 1531580251
    },
    {
        "content": "<p>I think it should be <code>pub type LocalSet&lt;V&gt; = IdxSetBuf&lt;V&gt;</code></p>",
        "id": 129666272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531583705
    },
    {
        "content": "<p>sorry if I said something else</p>",
        "id": 129666282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531583719
    },
    {
        "content": "<p>the idea would be: <code>V</code> is the type of the variable (at the moment, always <code>Local</code>, but later a new type)</p>",
        "id": 129666289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531583731
    },
    {
        "content": "<p>the map type <code>M</code> we will only use as the parameter to methods</p>",
        "id": 129666293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531583742
    },
    {
        "content": "<p>so because of IndexVec, I have to do <code>V:Idx</code> on <code>LivenessResult</code> and other places where I'm using <code>LivenessResult</code>.</p>",
        "id": 129671959,
        "sender_full_name": "DPC",
        "timestamp": 1531593913
    },
    {
        "content": "<p>but that will mean inserting <code>&lt;V: Idx&gt;</code> everywhere which doesn't seem to be the right thing to do</p>",
        "id": 129672243,
        "sender_full_name": "DPC",
        "timestamp": 1531594482
    },
    {
        "content": "<p>what do you mean by <em>everywhere</em>?</p>",
        "id": 129686547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531626410
    },
    {
        "content": "<p>it should only be necessary to add it within the liveness code, which is now generic over the type <code>V</code> of indices used to describe variables</p>",
        "id": 129686554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531626434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> I've checked out your branch locally; I may have time to poke at it and show you what I mean a bit more directly, not sure :) depends how long it takes for <code>x.py check</code> to start giving me some errors</p>",
        "id": 129686657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531626710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> ok I had a few minutes so I took the liberty of pushing a commit to your branch which builds. You can check it out, but the idea is that liveness is generic over the type <code>V</code>, but everything else hardcodes <code>Local</code>. The next step then would be to make the MIR code:</p>\n<ul>\n<li>Define a new index type <code>LocalWithRegion</code> or something like that -- that corresponds to local variables that have regions.</li>\n<li>Select those local variables that have regions and create indices for them; we would basically have some kind of map (<code>LocalWithRegionMap</code>) with the ability to map back and forth. Something like this:<ul>\n<li><code>IndexVec&lt;Local, Option&lt;LocalWithRegion&gt;&gt;</code> -- <code>None</code> if the local has no regions in its type, <code>Some</code> if it has regions</li>\n<li><code>IndexVec&lt;LocalWithRegion, Local&gt;</code> -- for each <code>LocalWithRegion</code>, map back to the original index</li>\n</ul>\n</li>\n<li>Create this <code>LocalWithRegionMap</code> early on -- before computing liveness etc -- and then pass it around where needed instead of <code>IdentityMap</code> (within <code>librustc_mir::borrow_check</code>, that is -- the other code that uses liveness can stay as it is)</li>\n</ul>\n<p>There is perhaps some cleanup that might be worthwhile but is independent:</p>\n<ul>\n<li>the <code>util::liveness</code> code should probably use <code>crate</code> instead of <code>pub</code></li>\n<li>the type alias <code>LocalSet&lt;V&gt; = IdxSetBuf&lt;V&gt;</code> strikes me as sort of pointless (and perhaps inaccurate, since this is not always a set of <code>Local</code> values). I would probably rename it to <code>LiveVarSet</code> or else just get rid of it.</li>\n</ul>",
        "id": 129687673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531629213
    },
    {
        "content": "<p>Thanks</p>",
        "id": 129701362,
        "sender_full_name": "DPC",
        "timestamp": 1531660075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> np =) hope that makes senes</p>",
        "id": 129701953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531661168
    },
    {
        "content": "<blockquote>\n<p>Define a new index type LocalWithRegion or something like that -- that corresponds to local variables that have regions.</p>\n</blockquote>\n<p>Is this a type or a struct ? I couldn't find the defn of mir::Local to cross check with.</p>",
        "id": 129744671,
        "sender_full_name": "DPC",
        "timestamp": 1531741375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <code>mir::Local</code> is a struct, it's just an index</p>",
        "id": 129744690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741435
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Local.html</a></p>",
        "id": 129744730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741446
    },
    {
        "content": "<p>it is declared with <code>newtype_index!</code> which is why it is hard to find</p>",
        "id": 129744733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741453
    },
    {
        "content": "<p>we really need to change that macro</p>",
        "id": 129744736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741457
    },
    {
        "content": "<p>ah okay</p>",
        "id": 129744739,
        "sender_full_name": "DPC",
        "timestamp": 1531741472
    },
    {
        "content": "<p>specifically, it's an index into the MIR's <code>local_decls</code> vector</p>",
        "id": 129744744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741485
    },
    {
        "content": "<p>I do recommend searching with rustdoc incidentally</p>",
        "id": 129744746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741493
    },
    {
        "content": "<p>if you can't find something especially</p>",
        "id": 129744747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741503
    },
    {
        "content": "<p>will keep it in mind</p>",
        "id": 129744752,
        "sender_full_name": "DPC",
        "timestamp": 1531741511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> (ps, I'm around now if you have any questions)</p>",
        "id": 129746273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531743651
    },
    {
        "content": "<p>yeah i can see that you are online :P</p>",
        "id": 129746281,
        "sender_full_name": "DPC",
        "timestamp": 1531743664
    },
    {
        "content": "<p>I'm just doing my PR sweep and I saw your PR so I thought you :)</p>",
        "id": 129746290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531743686
    },
    {
        "content": "<blockquote>\n<p>Create this LocalWithRegionMap early on -- before computing liveness etc -- and then pass it around where needed instead of IdentityMap (within librustc_mir::borrow_check, that is -- the other code that uses liveness can stay as it is)</p>\n</blockquote>\n<p>Where exactly should I do it?</p>",
        "id": 129748568,
        "sender_full_name": "DPC",
        "timestamp": 1531746517
    },
    {
        "content": "<p>let me look...</p>",
        "id": 129748692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746643
    },
    {
        "content": "<p>probably <a href=\"https://github.com/rust-lang/rust/blob/3d5753fda1ee8f729da1061e931e13b043f479a5/src/librustc_mir/borrow_check/nll/mod.rs#L102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3d5753fda1ee8f729da1061e931e13b043f479a5/src/librustc_mir/borrow_check/nll/mod.rs#L102\">around this line</a></p>",
        "id": 129748717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746685
    },
    {
        "content": "<p>currently we have something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"c1\">// Run the MIR type-checker.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">liveness</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">LivenessResults</span>::<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">constraint_sets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">type_check</span>::<span class=\"n\">type_check</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129748725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746707
    },
    {
        "content": "<p>I imagine it would become something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">liveness_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NllLivenessMap</span>::<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">liveness</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">LivenessResults</span>::<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">liveness_map</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">constraint_sets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">type_check</span>::<span class=\"n\">type_check</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129748782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746756
    },
    {
        "content": "<p>I guess you could <em>imagine</em> us taking ownership of the map and packing it up with the <code>LivenessResults</code></p>",
        "id": 129748789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746775
    },
    {
        "content": "<p>but I had initially imagined it more the way I wrote it: that the liveness code talks in terms of <code>V</code> mostly</p>",
        "id": 129748797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746785
    },
    {
        "content": "<p>and the caller maps it back to <code>Local</code> if they want</p>",
        "id": 129748802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746793
    },
    {
        "content": "<p>anyway minor nit, that's the place for it</p>",
        "id": 129748813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746812
    },
    {
        "content": "<p>point is that the <code>type_check</code> will also need this map -- either given to it as an extra parameter (it certainly has enough now) or else packaged up in the <code>liveness</code> variable</p>",
        "id": 129748868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746844
    },
    {
        "content": "<p>(is it clear what this <code>NllLivenessMap</code> is and how it would work?)</p>",
        "id": 129748880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531746862
    },
    {
        "content": "<p>not really</p>",
        "id": 129749498,
        "sender_full_name": "DPC",
        "timestamp": 1531747590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> ok so that is kind of the whole part of this PR :)</p>",
        "id": 129749640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747793
    },
    {
        "content": "<p>right now, in MIR, we have a list of variables, and each one has a type. So it might be like:</p>\n<div class=\"codehilite\"><pre><span></span>_0: u32\n_1: Vec&lt;&amp;&#39;x u32&gt;\n...\n</pre></div>",
        "id": 129749717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747826
    },
    {
        "content": "<p>these indices (<code>_0</code>, <code>_1</code>) are the <code>Local</code> values</p>",
        "id": 129749725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747834
    },
    {
        "content": "<p>today, we compute liveness as a sets of these local values</p>",
        "id": 129749731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747840
    },
    {
        "content": "<p>so e.g. we might have -- at some basic block -- that <code>_0</code> and <code>_1</code> are both live</p>",
        "id": 129749742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747854
    },
    {
        "content": "<p>problem is -- in NLL, at least -- we don't really <em>care</em> whether <code>_0</code> is live, because its type has no regions in it</p>",
        "id": 129749756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747870
    },
    {
        "content": "<p>we <em>do</em> care about <code>_1</code> though</p>",
        "id": 129749757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747874
    },
    {
        "content": "<p>(with me so far?)</p>",
        "id": 129749764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747888
    },
    {
        "content": "<p>ah okay got it now</p>",
        "id": 129749768,
        "sender_full_name": "DPC",
        "timestamp": 1531747903
    },
    {
        "content": "<p>so the idea is to map these <code>Local</code> values to a smaller set of integers</p>",
        "id": 129749777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747913
    },
    {
        "content": "<p>containing just the ones with regions</p>",
        "id": 129749780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747916
    },
    {
        "content": "<p>so let's call that set <code>RV0</code>, <code>RV1</code>, etc</p>",
        "id": 129749832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747930
    },
    {
        "content": "<p>in that case, <code>_0</code> maps to <code>None</code></p>",
        "id": 129749836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747934
    },
    {
        "content": "<p>but <code>_1</code> might map to <code>Some(RV0)</code></p>",
        "id": 129749842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747939
    },
    {
        "content": "<p>(because it's the first <code>Local</code> that contains regions in its type)</p>",
        "id": 129749849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747948
    },
    {
        "content": "<p>got it. The \"liveness\" part in the name threw me off</p>",
        "id": 129749851,
        "sender_full_name": "DPC",
        "timestamp": 1531747952
    },
    {
        "content": "<p>ah I see yes</p>",
        "id": 129749859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747959
    },
    {
        "content": "<p>anyway, <em>then</em> we can compute liveness just over the RV values</p>",
        "id": 129749865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747968
    },
    {
        "content": "<p>(and map back to the original <code>Local</code> indices as needed)</p>",
        "id": 129749884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747991
    },
    {
        "content": "<p>/me stops explaining</p>",
        "id": 129749888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531747999
    },
    {
        "content": "<p>got it. thanks</p>",
        "id": 129749976,
        "sender_full_name": "DPC",
        "timestamp": 1531748109
    },
    {
        "content": "<p>hey.. so what will be the contents of <code>NllLivenessMap</code>? currently I have : </p>\n<div class=\"codehilite\"><pre><span></span>pub(crate) struct NllLivenessMap {\n    pub liveness: IndexVec&lt;LocalWithRegion, LocalDecl&gt;,\n\n}\n</pre></div>\n\n\n<p>is this correct? (have to add the lifetime) <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 129767210,
        "sender_full_name": "DPC",
        "timestamp": 1531765377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> that doesn't look quite right</p>",
        "id": 129767650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765837
    },
    {
        "content": "<p>for one thing, we want to map indices to indices</p>",
        "id": 129767659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765847
    },
    {
        "content": "<p>so e.g., <code>IndexVec&lt;LocalWithRegion, Local&gt;</code></p>",
        "id": 129767663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765856
    },
    {
        "content": "<p>ah so &lt;LocalWithRegion, Local&gt; ?</p>",
        "id": 129767667,
        "sender_full_name": "DPC",
        "timestamp": 1531765860
    },
    {
        "content": "<p>but I think you also want a reverse map</p>",
        "id": 129767668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765863
    },
    {
        "content": "<p>ah okay</p>",
        "id": 129767669,
        "sender_full_name": "DPC",
        "timestamp": 1531765863
    },
    {
        "content": "<p>so probably this:</p>",
        "id": 129767671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765864
    },
    {
        "content": "<p>i thought we were mapping it to the region from the <code>Local</code></p>",
        "id": 129767695,
        "sender_full_name": "DPC",
        "timestamp": 1531765896
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">NllLivenessMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">from_local</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">LocalWithRegion</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">to_local</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">LocalWithRegion</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LocalDecl</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129767704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765908
    },
    {
        "content": "<p>also, I think you will want to declare <code>LocalWithRegion</code> with <code>newtype_index!</code> (in case I didn't mention that before)</p>",
        "id": 129767761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531765945
    },
    {
        "content": "<p>yeah I've done it already</p>",
        "id": 129767768,
        "sender_full_name": "DPC",
        "timestamp": 1531765954
    },
    {
        "content": "<p>so <code>NllLivenessMap::compute(...)</code> returns <code>NllLivenesMap</code>? and should that impl <code>LiveVariableMap&lt;LiveVar = V&gt;</code>  ?</p>",
        "id": 129768279,
        "sender_full_name": "DPC",
        "timestamp": 1531766605
    },
    {
        "content": "<p>yes, except in this case <code>V</code> is <code>LocalWithRegion</code></p>",
        "id": 129768372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766706
    },
    {
        "content": "<p>that is, it should impl <code>LiveVariableMap&lt;LiveVar = LocalWithRegion&gt;</code></p>",
        "id": 129768383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766715
    },
    {
        "content": "<p>and I would expect <code>compute</code> to be something roughly like this:</p>",
        "id": 129768389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">to_local</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IndexVec</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">from_local</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">.</span><span class=\"n\">iter_enumerated</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">has_free_regions</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">to_local</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from_local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_local</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129768472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766799
    },
    {
        "content": "<p>one question is how to concisely check whether the type of the local decl has free regions...</p>",
        "id": 129768531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766871
    },
    {
        "content": "<p>there should be some helper for that</p>",
        "id": 129768538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did a recent PR, let me remember what we did there...</p>",
        "id": 129768542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766879
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/52037\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52037\">https://github.com/rust-lang/rust/pull/52037</a></p>",
        "id": 129768596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766902
    },
    {
        "content": "<p><code>ty.flags.intersects(TypeFlags::HAS_FREE_REGIONS)</code></p>",
        "id": 129768623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766945
    },
    {
        "content": "<p>anyway, the key idea is that we create a <code>LocalWithRegion</code> index for each local variable that has regions in its type...</p>",
        "id": 129768654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531766983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> were you able to make any further progress here btw?</p>",
        "id": 129809848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531830419
    },
    {
        "content": "<p>yeah i'm working on it</p>",
        "id": 129809855,
        "sender_full_name": "DPC",
        "timestamp": 1531830434
    },
    {
        "content": "<p>so i'm assuming i have to write <code>has_free_regions()</code> in Ty which checks <code>ty.flags.intersects(TypeFlags::HAS_FREE_REGIONS)</code>?</p>",
        "id": 129815881,
        "sender_full_name": "DPC",
        "timestamp": 1531837865
    },
    {
        "content": "<p>you don't have to make the method, you can just insert the code as is</p>",
        "id": 129815988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838002
    },
    {
        "content": "<p>though a helper seems nice</p>",
        "id": 129815991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838007
    },
    {
        "content": "<p>there is actually probably a method like this</p>",
        "id": 129815994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838015
    },
    {
        "content": "<p>so, if you import the <code>use rustc::ty::TypeFoldable</code> trait</p>",
        "id": 129816045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838043
    },
    {
        "content": "<p>you could use <code>has_free_regions</code></p>",
        "id": 129816053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838047
    },
    {
        "content": "<p>it's a bit \"indirect\" but ought to compile down to the same thing</p>",
        "id": 129816083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838068
    },
    {
        "content": "<p>if LLVM inlines enough :)</p>",
        "id": 129816088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838071
    },
    {
        "content": "<p>how do we handle the trait LiveVariableMap for NllLivenessMap?</p>",
        "id": 129824809,
        "sender_full_name": "DPC",
        "timestamp": 1531849211
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>impl LiveVariableMap for NllLivenessMap {\n    type LiveVar = LocalWithRegion;\n\n    fn from_local(&amp;self, local: Local) -&gt; Option&lt;Self::LiveVar&gt; {\n    }\n\n    fn from_live_var(&amp;self, local: Self::LiveVar) -&gt; Local {\n    }\n\n    fn num_variables(&amp;self) -&gt; usize {\n\n    }\n</pre></div>",
        "id": 129824835,
        "sender_full_name": "DPC",
        "timestamp": 1531849256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> well</p>",
        "id": 129826131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531850690
    },
    {
        "content": "<p>what is your def'n of <code>NllLivenessMap</code>? :)</p>",
        "id": 129826143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531850705
    },
    {
        "content": "<p>if it is roughly the one I gave, then something like:</p>",
        "id": 129826153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531850713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LiveVariableMap</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NllLivenessMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">LiveVar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LocalWithRegion</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_local</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local</span>: <span class=\"nc\">Local</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">LiveVar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">from_local</span><span class=\"p\">[</span><span class=\"n\">local</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_live_var</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local</span>: <span class=\"nc\">Self</span>::<span class=\"n\">LiveVar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Local</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">to_local</span><span class=\"p\">[</span><span class=\"n\">local</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">num_variables</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">to_local</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129826169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531850736
    },
    {
        "content": "<p>ah uhmm</p>",
        "id": 129826184,
        "sender_full_name": "DPC",
        "timestamp": 1531850761
    },
    {
        "content": "<p>can i change <a href=\"https://github.com/Dylan-DPC/rust/blob/8ac931dc7e58284a6165155b3802d7e52295b5a4/src/librustc_mir/borrow_check/nll/mod.rs#L205\" target=\"_blank\" title=\"https://github.com/Dylan-DPC/rust/blob/8ac931dc7e58284a6165155b3802d7e52295b5a4/src/librustc_mir/borrow_check/nll/mod.rs#L205\">dump_mir_results</a> to accept a <code>&amp;LivenessResult&lt;LocalWithRegion&gt;</code> instead of <code>&amp;LivenessResult&lt;Local&gt;</code>?</p>",
        "id": 129827896,
        "sender_full_name": "DPC",
        "timestamp": 1531852692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> yes</p>",
        "id": 129828085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531852932
    },
    {
        "content": "<p>just have to settle some type (Local / LocalWithRegion) issues which i'll complete tomorrow <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 129829064,
        "sender_full_name": "DPC",
        "timestamp": 1531854106
    },
    {
        "content": "<p>awesome!</p>",
        "id": 129829483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531854690
    },
    {
        "content": "<p>hey. how to make <code> let decl = &amp;self.local_decls[local];</code> return a <code>LocalWithRegion</code> instead of <code>Local</code>?</p>",
        "id": 129869602,
        "sender_full_name": "DPC",
        "timestamp": 1531918336
    },
    {
        "content": "<p>ah solved it</p>",
        "id": 129872383,
        "sender_full_name": "DPC",
        "timestamp": 1531921677
    },
    {
        "content": "<p>sorry, was afk, back now</p>",
        "id": 129872992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531922280
    },
    {
        "content": "<p>how to resolve this? </p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n   --&gt; librustc/mir/visit.rs:379:42\n    |\n379 |                         self.visit_local(local, PlaceContext::StorageDead, location);\n    |                                          ^^^^^ expected struct `mir::LocalWithRegion`, found struct `mir::Local`\n...\n819 | make_mir_visitor!(Visitor,);\n    | ---------------------------- in this macro invocation\n    |\n    = note: expected type `&amp;mir::LocalWithRegion`\n               found type `&amp;mir::Local`\n</pre></div>",
        "id": 129878429,
        "sender_full_name": "DPC",
        "timestamp": 1531927816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> can you push your latest diffs?</p>",
        "id": 129880727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531930282
    },
    {
        "content": "<p>that error looks like you changed something you shouldn't have changed :)</p>",
        "id": 129880734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531930293
    },
    {
        "content": "<p>done</p>",
        "id": 129883296,
        "sender_full_name": "DPC",
        "timestamp": 1531933443
    },
    {
        "content": "<p>pushed to your PR?</p>",
        "id": 129883971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531934072
    },
    {
        "content": "<p>yep <a href=\"https://github.com/rust-lang/rust/pull/52115/commits/b7fb2a17d63504da86dcc17154b92d8452388503\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115/commits/b7fb2a17d63504da86dcc17154b92d8452388503\">commit</a></p>",
        "id": 129884104,
        "sender_full_name": "DPC",
        "timestamp": 1531934174
    },
    {
        "content": "<p>ok -- the tl;dr is that you should not be modifying <code>librustc/mir/mod.rs</code> at all</p>",
        "id": 129884262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531934299
    },
    {
        "content": "<p><code>Local</code> remains the type for a local variable index</p>",
        "id": 129884269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531934306
    },
    {
        "content": "<p><code>LocalWithRegion</code> is a secondary index used only during NLL computation</p>",
        "id": 129884279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531934314
    },
    {
        "content": "<p>ah thought so</p>",
        "id": 129884310,
        "sender_full_name": "DPC",
        "timestamp": 1531934346
    },
    {
        "content": "<p>Any clues how to resolve this?</p>\n<div class=\"codehilite\"><pre><span></span>error[E0271]: type mismatch resolving `&lt;util::liveness::IdentityMap&lt;&#39;_, &#39;_&gt; as util::liveness::LiveVariableMap&gt;::LiveVar == rustc::mir::LocalWithRegion`\n   --&gt; librustc_mir/borrow_check/nll/mod.rs:240:18\n    |\n240 |                 .simulate_block(&amp;mir, bb, map, |location, local_set| {\n    |                  ^^^^^^^^^^^^^^ expected struct `rustc::mir::Local`, found struct `rustc::mir::LocalWithRegion`\n    |\n    = note: expected type `rustc::mir::Local`\n               found type `rustc::mir::LocalWithRegion`\n</pre></div>",
        "id": 129888952,
        "sender_full_name": "DPC",
        "timestamp": 1531939187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> latest diffs pushed?</p>",
        "id": 129889112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531939348
    },
    {
        "content": "<p>not yet</p>",
        "id": 129889117,
        "sender_full_name": "DPC",
        "timestamp": 1531939358
    },
    {
        "content": "<p>would be helpful :)</p>",
        "id": 129889275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531939512
    },
    {
        "content": "<p>sounds like though you have <code>LivenessResults&lt;Local&gt;</code> but you want <code>LivenessResults&lt;LocalWithRegion&gt;</code></p>",
        "id": 129889302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531939553
    },
    {
        "content": "<p>pushed</p>",
        "id": 129889360,
        "sender_full_name": "DPC",
        "timestamp": 1531939580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <a href=\"https://github.com/rust-lang/rust/pull/52115/files#r203489774\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52115/files#r203489774\">https://github.com/rust-lang/rust/pull/52115/files#r203489774</a></p>",
        "id": 129889420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531939668
    },
    {
        "content": "<p>How to solve </p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n  --&gt; librustc_mir/borrow_check/nll/type_check/liveness.rs:91:62\n   |\n91 |                     let live_local_ty = self.mir.local_decls[live_local].ty;\n   |                                                              ^^^^^^^^^^ expected struct `rustc::mir::Local`, found struct `rustc::mir::LocalWithRegion`\n   |\n   = note: expected type `rustc::mir::Local`\n              found type `rustc::mir::LocalWithRegion`\n</pre></div>",
        "id": 129928081,
        "sender_full_name": "DPC",
        "timestamp": 1532001124
    },
    {
        "content": "<p>you'll need to translate that back to a <code>Local</code> using the map</p>",
        "id": 129928415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532001680
    },
    {
        "content": "<p>that is, translate <code>live_local</code> back</p>",
        "id": 129928419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532001694
    },
    {
        "content": "<p>ah okay</p>",
        "id": 129928461,
        "sender_full_name": "DPC",
        "timestamp": 1532001727
    },
    {
        "content": "<p>good news <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 129938268,
        "sender_full_name": "DPC",
        "timestamp": 1532013923
    },
    {
        "content": "<p>it compiled without error <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 129938270,
        "sender_full_name": "DPC",
        "timestamp": 1532013930
    },
    {
        "content": "<p>pushing right now</p>",
        "id": 129938274,
        "sender_full_name": "DPC",
        "timestamp": 1532013937
    },
    {
        "content": "<p>need to merge some conflicts and going off .. will push after an hour</p>",
        "id": 129939033,
        "sender_full_name": "DPC",
        "timestamp": 1532014869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> awesome!</p>",
        "id": 129940570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532016677
    },
    {
        "content": "<p>any update? :)</p>",
        "id": 129946630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532023523
    },
    {
        "content": "<p>pushing rn</p>",
        "id": 129946862,
        "sender_full_name": "DPC",
        "timestamp": 1532023736
    },
    {
        "content": "<p>done</p>",
        "id": 129947981,
        "sender_full_name": "DPC",
        "timestamp": 1532025040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> </p>\n<div class=\"codehilite\"><pre><span></span>tidy check\n[00:03:46] tidy error: /checkout/src/librustc_mir/borrow_check/nll/mod.rs:411: line longer than 100 chars\n[00:03:46] tidy error: /checkout/src/librustc_mir/util/liveness.rs:573: line longer than 100 chars\n[00:03:46] tidy error: /checkout/src/librustc/mir/mod.rs: missing trailing newline\n[00:03:47] some tidy checks failed\n</pre></div>",
        "id": 129948599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532025801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> did you run tests locally at all? Looks great! I left a small nit</p>",
        "id": 129948950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532026087
    },
    {
        "content": "<p>yeah i ran <code>x.py check</code>.</p>",
        "id": 129948960,
        "sender_full_name": "DPC",
        "timestamp": 1532026109
    },
    {
        "content": "<p>that just checks that it builds, I meant did you run e.g. <code>x.py test --stage 1 src/test/ui</code> or something like it</p>",
        "id": 129948991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532026149
    },
    {
        "content": "<p>not a big deal, as travis will do it ;)</p>",
        "id": 129948996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532026154
    },
    {
        "content": "<p>(but only once you fix the tidy errors)</p>",
        "id": 129949002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532026162
    },
    {
        "content": "<p>I was hoping to do a try run soon to measure the impact</p>",
        "id": 129949006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532026172
    },
    {
        "content": "<p>ah no i didn't run the test part yet</p>",
        "id": 129949015,
        "sender_full_name": "DPC",
        "timestamp": 1532026191
    },
    {
        "content": "<p>i usually just depend on travis for that xD</p>",
        "id": 129949491,
        "sender_full_name": "DPC",
        "timestamp": 1532026645
    },
    {
        "content": "<p>pushed the tidy part. Will push the nitbits tomorrow in the morning (you'll get them by the time you wake up )</p>",
        "id": 129949994,
        "sender_full_name": "DPC",
        "timestamp": 1532027207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> I tried your branch locally and saw the problem, it was a 1-line fix so I pushed it</p>",
        "id": 129975509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532062032
    },
    {
        "content": "<p>tests pass now</p>",
        "id": 129975510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532062049
    },
    {
        "content": "<p>we were still using <code>mir.local_decls.len()</code> to get the number of live vars in one point</p>",
        "id": 129975514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532062076
    },
    {
        "content": "<p>when we really out to be using <code>map.num_variables()</code></p>",
        "id": 129975530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532062082
    },
    {
        "content": "<p>perf results are available =)</p>",
        "id": 130045932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163332
    },
    {
        "content": "<p>er, I meant to say: there is one small change needed (delete some outdated tests, I think) before we can land this PR</p>",
        "id": 130045977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163374
    },
    {
        "content": "<p>ya i removed the liveness-* tests from mir-opt</p>",
        "id": 130045984,
        "sender_full_name": "DPC",
        "timestamp": 1532163391
    },
    {
        "content": "<p>oh, nice</p>",
        "id": 130045988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163397
    },
    {
        "content": "<p>still more failures</p>",
        "id": 130045993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163416
    },
    {
        "content": "<p>I guess we have to update the other tests</p>",
        "id": 130045994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163420
    },
    {
        "content": "<p>should i remove <code>region-liveness-basic</code>, <code>region-liveness-two-disjoint-uses</code>, <code>region-subtyping-basic</code> or those are good to stay?</p>",
        "id": 130046005,
        "sender_full_name": "DPC",
        "timestamp": 1532163467
    },
    {
        "content": "<p>hmm</p>",
        "id": 130046190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163726
    },
    {
        "content": "<p>honestly we can probably just remove them</p>",
        "id": 130046193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163730
    },
    {
        "content": "<p>I don't see them adding much value</p>",
        "id": 130046195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163734
    },
    {
        "content": "<p>or update them</p>",
        "id": 130046196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163738
    },
    {
        "content": "<p>I don't have a strong opinion :)</p>",
        "id": 130046198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163742
    },
    {
        "content": "<p>meh maybe keep them</p>",
        "id": 130046204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163753
    },
    {
        "content": "<p>do you know how to update them?</p>",
        "id": 130046205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163762
    },
    {
        "content": "<p>nah i haven't updated earlier. i'll just keep them as is i guess :D</p>",
        "id": 130046224,
        "sender_full_name": "DPC",
        "timestamp": 1532163830
    },
    {
        "content": "<p>well if they are passing, that's fine</p>",
        "id": 130046280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163914
    },
    {
        "content": "<p>but otherwise, there are some comments at the end of the test</p>",
        "id": 130046285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163921
    },
    {
        "content": "<p>these tests basically compare MIR output</p>",
        "id": 130046289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163927
    },
    {
        "content": "<p>so the comments have to be edited to match the current output</p>",
        "id": 130046292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532163934
    },
    {
        "content": "<p>is there any convention for mod docblocks? I don't see any docblocs in other files.. <code>//!</code> or <code>`///</code>?</p>",
        "id": 130051127,
        "sender_full_name": "DPC",
        "timestamp": 1532173388
    },
    {
        "content": "<p>//!</p>",
        "id": 130051182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173469
    },
    {
        "content": "<p>you could also put those comments on some struct</p>",
        "id": 130051183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173479
    },
    {
        "content": "<p>i have //! on the mod docs and /// for structs, impls, fns</p>",
        "id": 130051199,
        "sender_full_name": "DPC",
        "timestamp": 1532173539
    },
    {
        "content": "<p>right</p>",
        "id": 130051252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173664
    },
    {
        "content": "<p>pushed <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 130051523,
        "sender_full_name": "DPC",
        "timestamp": 1532174116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> so we get this test failure still (just 1):</p>\n<div class=\"codehilite\"><pre><span></span>[00:55:52] ---- [mir-opt] mir-opt/nll/region-liveness-basic.rs stdout ----\n[00:55:52] ---- [mir-opt] mir-opt/nll/region-liveness-basic.rs stdout ----\n[00:55:52] thread &#39;[mir-opt] mir-opt/nll/region-liveness-basic.rs&#39; panicked at &#39;Did not find expected line, error: Mismatch in lines\n[00:55:52] Current block: None\n[00:55:52] Actual Line: &quot;                                         | Live variables on entry to bb2[0]: []&quot;\n[00:55:52] Expected Line: &quot;           | Live variables on entry to bb2[0]: [_1, _3]&quot;\n[00:55:52] Test Name: rustc.main.nll.0.mir\n[00:55:52] Expected:\n[00:55:52] ... (elided)\n[00:55:52]    bb2: {\n[00:55:52]            | Live variables on entry to bb2[0]: [_1, _3]\n[00:55:52]        _2 = &amp;&#39;_#2r _1[_3];\n[00:55:52]            | Live variables on entry to bb2[1]: [_2]\n[00:55:52]        switchInt(const true) -&gt; [false: bb4, otherwise: bb3];\n[00:55:52]            | Live variables on exit from bb2: [_2]\n[00:55:52] Actual:\n[00:55:52] | Free Region Mapping\n</pre></div>\n\n\n<p>I would say either delete that test -- honestly, I think that's fine -- or else update it...</p>",
        "id": 130054343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532178866
    },
    {
        "content": "<p>Wrong topic?</p>",
        "id": 130054345,
        "sender_full_name": "davidtwco",
        "timestamp": 1532178883
    },
    {
        "content": "<p>oops</p>",
        "id": 130054347,
        "sender_full_name": "DPC",
        "timestamp": 1532178888
    },
    {
        "content": "<p>sure will delete it</p>",
        "id": 130054351,
        "sender_full_name": "DPC",
        "timestamp": 1532178902
    },
    {
        "content": "<p>(yep, wrong topic, I moved to other thread)</p>",
        "id": 130054360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532178928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed the <code>is_upvar_field_projection</code> fix.</p>",
        "id": 130054431,
        "sender_full_name": "davidtwco",
        "timestamp": 1532179027
    },
    {
        "content": "<p>Do you have any thoughts on supporting the <code>issue-7573</code> case?</p>",
        "id": 130054478,
        "sender_full_name": "davidtwco",
        "timestamp": 1532179097
    },
    {
        "content": "<p>I ended up creating a function to determine if something is what the user thinks is an upvar in <a href=\"https://github.com/rust-lang/rust/pull/52405\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52405\">https://github.com/rust-lang/rust/pull/52405</a></p>",
        "id": 130054493,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532179159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I <em>think</em> that if we examine the regions (and their categorizations) for which we are reporting the error, we ought to be able to handle <code>issue-7573</code></p>",
        "id": 130054548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179213
    },
    {
        "content": "<p>I've been doing a local build though so I can inspect the debug output</p>",
        "id": 130054550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179223
    },
    {
        "content": "<p>it's just taking forever</p>",
        "id": 130054551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ah, interesting. which fn is that? I just r+'d that PR again btw, this time p=1</p>",
        "id": 130054563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179287
    },
    {
        "content": "<p>time to get some of this NLL work landed dang it</p>",
        "id": 130054564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179294
    },
    {
        "content": "<p>I was trying to work out how I'd check if a region was external or internal but couldn't see it anywhere.</p>",
        "id": 130054631,
        "sender_full_name": "davidtwco",
        "timestamp": 1532179405
    },
    {
        "content": "<p><code>universal_regions</code> has some methods for that</p>",
        "id": 130054758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179628
    },
    {
        "content": "<p>e.g., <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/universal_regions/struct.UniversalRegions.html?search=#method.is_local_free_region\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/universal_regions/struct.UniversalRegions.html?search=#method.is_local_free_region\"><code>is_local_free_region</code></a></p>",
        "id": 130054799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179683
    },
    {
        "content": "<p>Ah, great, not sure why I overlooked that.</p>",
        "id": 130054807,
        "sender_full_name": "davidtwco",
        "timestamp": 1532179710
    },
    {
        "content": "<p>or, more generally, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/universal_regions/struct.UniversalRegions.html?search=#method.region_classification\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/universal_regions/struct.UniversalRegions.html?search=#method.region_classification\"><code>region_classification</code></a></p>",
        "id": 130054808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179716
    },
    {
        "content": "<p>your branch is still building LLVM :( :(</p>",
        "id": 130054812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532179731
    },
    {
        "content": "<p>I've got it to correctly classify the <code>issue-7573.rs</code> case now.</p>",
        "id": 130055195,
        "sender_full_name": "davidtwco",
        "timestamp": 1532180616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<div class=\"codehilite\"><pre><span></span>error: borrowed data escapes outside of closure\n  --&gt; src/test/ui/borrowck/issue-7573.rs:32:9\n   |\n27 |     let mut lines_to_use: Vec&lt;&amp;CrateId&gt; = Vec::new();\n   |         ---------------- `lines_to_use` is declared here, outside of the closure body\n28 |         //~^ NOTE cannot infer an appropriate lifetime\n29 |     let push_id = |installed_id: &amp;CrateId| {\n   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n...\n32 |         lines_to_use.push(installed_id);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 130055335,
        "sender_full_name": "davidtwco",
        "timestamp": 1532180917
    },
    {
        "content": "<p>Still doesn't do anything for the <code>E0621-does-not-trigger-for-closures.rs</code> case that was in <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s list in the issue.</p>",
        "id": 130055344,
        "sender_full_name": "davidtwco",
        "timestamp": 1532180990
    },
    {
        "content": "<p>Running tests then I'll push that change.</p>",
        "id": 130055386,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> that is <em>awesome</em></p>",
        "id": 130055592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181499
    },
    {
        "content": "<p>However, there are other tests that it is updating the errors for, and some run into ICEs.</p>",
        "id": 130055595,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181526
    },
    {
        "content": "<p>Seems related to what you were nervous about in the review.</p>",
        "id": 130055601,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181547
    },
    {
        "content": "<p>It's struggling to find variable names for some stuff.</p>",
        "id": 130055603,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181566
    },
    {
        "content": "<p>example?</p>",
        "id": 130055604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181595
    },
    {
        "content": "<p>Three function is borriw_check:: mutability_errors::is_upvar, it will have to be moved if it's more generally useful.</p>",
        "id": 130055651,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532181664
    },
    {
        "content": "<p>The function</p>",
        "id": 130055656,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532181671
    },
    {
        "content": "<p>Well, some of them have nicer messages but the spans aren't fantastic:</p>\n<div class=\"codehilite\"><pre><span></span>error: borrowed data escapes outside of closure\n  --&gt; src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:20\n   |\n31 |     foo(cell, |cell_a, cell_x| {\n   |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n   |                |\n   |                `cell_a` is declared here, outside of the closure body\n32 |         //~^ WARNING not reporting region error due to nll\n33 |         cell_a.set(cell_x.get()); // forces &#39;x: &#39;a, error in closure\n   |                    ^^^^^^^^^^^^ `cell_x` escapes the closure body here\n</pre></div>",
        "id": 130055657,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181695
    },
    {
        "content": "<p>And some just fail:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs:40: can&#39;t find var name for free region &#39;_#1r\n  --&gt; src/test/ui/nll/issue-48238.rs:21:5\n   |\n21 |     move || use_val(&amp;orig); //~ ERROR\n   |     ^^^^^^^^^^^^^^^^^^^^^^\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, librustc_errors/lib.rs:502:9\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n   1: std::sys_common::backtrace::print\n   2: std::panicking::default_hook::{{closure}}\n   3: std::panicking::default_hook\n   4: rustc::util::common::panic_hook\n   5: std::panicking::rust_panic_with_hook\n   6: std::panicking::begin_panic\n   7: rustc_errors::Handler::span_bug\n   8: rustc::session::opt_span_bug_fmt::{{closure}}\n   9: rustc::ty::context::tls::with_opt::{{closure}}\n  10: rustc::ty::context::tls::with_context_opt\n  11: rustc::ty::context::tls::with_opt\n  12: rustc::session::opt_span_bug_fmt\n  13: rustc::session::span_bug_fmt\n  14: rustc_mir::borrow_check::nll::region_infer::error_reporting::var_name::&lt;impl rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext&lt;&#39;tcx&gt;&gt;::get_var_name_and_span_for_region::{{closure}}\n  15: rustc_mir::borrow_check::nll::region_infer::error_reporting::var_name::&lt;impl rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext&lt;&#39;tcx&gt;&gt;::get_var_name_and_span_for_region\n  16: rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext::solve_inner\n</pre></div>",
        "id": 130055659,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> it seems like <code>cell_a</code> the problem is more the <em>label</em> than the span</p>",
        "id": 130055698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181731
    },
    {
        "content": "<p>but that last one is I think the problem I was pointing out, yes</p>",
        "id": 130055699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181742
    },
    {
        "content": "<p>I suspect we can address that, too, by being careful with labels</p>",
        "id": 130055702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181768
    },
    {
        "content": "<p>I'll push this change anyway since it does address more cases and then we can work on fixing the regressions from this commit.</p>",
        "id": 130055706,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181784
    },
    {
        "content": "<p>yeah</p>",
        "id": 130055713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532181837
    },
    {
        "content": "<p>Is the fix for this just having it return <code>Option&lt;(Option&lt;Symbol&gt;, Span)&gt;</code> and then adding some cases to the labels for when we couldn't find a name?</p>",
        "id": 130055759,
        "sender_full_name": "davidtwco",
        "timestamp": 1532181925
    },
    {
        "content": "<p>well, maybe... the thing is, we <em>can</em> find the \"thing that needs highlighting\" (the return type) but it just doesn't have a <em>name</em></p>",
        "id": 130055853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182095
    },
    {
        "content": "<p>so either we return <code>None</code> there, yes, and have some fallback</p>",
        "id": 130055856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182109
    },
    {
        "content": "<p>or maybe we can change the interface to be a bit more generic?</p>",
        "id": 130055860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182120
    },
    {
        "content": "<p>let's start with what we want the error messages to be, I think</p>",
        "id": 130055861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182128
    },
    {
        "content": "<p>and go from there</p>",
        "id": 130055862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182130
    },
    {
        "content": "<p>Well, we wouldn't know the span either? Since we get that from the upvar/argument index and that must be where the <code>None</code> is starting from for it to error where it is.</p>",
        "id": 130055872,
        "sender_full_name": "davidtwco",
        "timestamp": 1532182154
    },
    {
        "content": "<p>e.g., in that first case you mentioned, I think maybe something like</p>\n<div class=\"codehilite\"><pre><span></span>error: borrowed data escapes outside of closure\n  --&gt; src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:20\n   |\n31 |     foo(cell, |cell_a, cell_x| {\n   |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n   |                |\n   |                XXX\n32 |         //~^ WARNING not reporting region error due to nll\n33 |         cell_a.set(cell_x.get()); // forces &#39;x: &#39;a, error in closure\n   |                    ^^^^^^^^^^^^ `cell_x` escapes the closure body here\n</pre></div>\n\n\n<p>what should XXX be?</p>",
        "id": 130055874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182161
    },
    {
        "content": "<p>it seems like it'd be useful <em>there</em> to maybe print the fully elaborated type</p>",
        "id": 130055878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182185
    },
    {
        "content": "<p>e.g., \"cell_a here has type <code>Vec&lt;&amp;'1 u32&gt;</code>, where <code>'1</code> is some lifetime outside the closure body\"</p>",
        "id": 130055922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182205
    },
    {
        "content": "<p>I'm not sure, coming up with error messages or documentation comments isn't my forte.</p>",
        "id": 130055928,
        "sender_full_name": "davidtwco",
        "timestamp": 1532182212
    },
    {
        "content": "<p>one thing that makes me mildly nervous with the current style is that e.g. <code>cell_x</code> here has a type like <code>Cell&lt;&amp;u32&gt;</code></p>",
        "id": 130055932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182254
    },
    {
        "content": "<p>so saying that it \"is\" a reference feels a <em>bit</em> wrong</p>",
        "id": 130055934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182260
    },
    {
        "content": "<p>I could imagine something like:</p>",
        "id": 130055942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182278
    },
    {
        "content": "<p>fully elaborated type issue <br>\n<a href=\"https://github.com/rust-lang/rust/issues/52533\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52533\">https://github.com/rust-lang/rust/issues/52533</a></p>",
        "id": 130055946,
        "sender_full_name": "csmoe",
        "timestamp": 1532182294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: borrowed data escapes outside of closure\n  --&gt; src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:20\n   |\n31 |     foo(cell, |cell_a, cell_x| {\n   |                ------  ------ `cell_x` has type `&amp;&#39;2 u32`, where `&#39;2` is only valid in the closure body\n   |                |\n   |                `cell_a` has type `Vec&lt;&amp;&#39;1 u32&gt;`, where `&#39;1` outlives the closure body\n32 |         //~^ WARNING not reporting region error due to nll\n33 |         cell_a.set(cell_x.get()); // forces &#39;x: &#39;a, error in closure\n   |                    ^^^^^^^^^^^^ data with lifetime `&#39;2` escapes the closure body here\n</pre></div>",
        "id": 130056038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> one option for <em>this</em> PR, if you like, is to put off some of these cases, just make it not ICE and we can revisit :)</p>",
        "id": 130056085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I delete <code>region-liveness-two-disjoint-uses</code> as well?</p>",
        "id": 130056097,
        "sender_full_name": "DPC",
        "timestamp": 1532182492
    },
    {
        "content": "<p>that said, if we were taking the approach I suggested with the <code>Cell</code> above, the return value case might then be something like:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs:40: can&#39;t find var name for free region &#39;_#1r\n  --&gt; src/test/ui/nll/issue-48238.rs:21:5\n   |\n21 |     move || use_val(&amp;orig); //~ ERROR\n   |          ^^ the return type is `&amp;&#39;1 u32`, where `&#39;1` outlives the closure body\n</pre></div>",
        "id": 130056114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> yes what the heck, do it :)</p>",
        "id": 130056120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182544
    },
    {
        "content": "<p>:D</p>",
        "id": 130056127,
        "sender_full_name": "DPC",
        "timestamp": 1532182558
    },
    {
        "content": "<p>sorry, gotta get a better template for that second one :)</p>",
        "id": 130056128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532182559
    },
    {
        "content": "<p>I'm not sure. On the one hand I'd be nice to get it landed for the cases it does handle well. On the other hand, I'm not sure how to cleanly separate out the failing cases to fallback to something else.</p>",
        "id": 130056177,
        "sender_full_name": "davidtwco",
        "timestamp": 1532182581
    },
    {
        "content": "<p>yeah, true, I was wondering that</p>",
        "id": 130057390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532184370
    },
    {
        "content": "<p>certainly for the ICE-like cases we could detect when there is no variable/upvar and return <code>None</code> back</p>",
        "id": 130057396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532184382
    },
    {
        "content": "<p>I've got it so that nothing ICEs. There are a handful of not-fantastic cases with this change, but all improvements over what was there previously and nothing that is show-stopper enough for this PR, I reckon.</p>",
        "id": 130057486,
        "sender_full_name": "davidtwco",
        "timestamp": 1532184558
    },
    {
        "content": "<p>Pushed that.</p>",
        "id": 130057552,
        "sender_full_name": "davidtwco",
        "timestamp": 1532184670
    },
    {
        "content": "<p>I agree with your assessment =)</p>",
        "id": 130057580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532184722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what about the <code>error-codes/E0621-does-not-trigger-for-closures.rs </code>case mentioned in the original issue?</p>",
        "id": 130058041,
        "sender_full_name": "davidtwco",
        "timestamp": 1532185377
    },
    {
        "content": "<p>uh...</p>",
        "id": 130058441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186024
    },
    {
        "content": "<p>what error does your branch get?</p>",
        "id": 130058501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186082
    },
    {
        "content": "<p>For what?</p>",
        "id": 130058509,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186104
    },
    {
        "content": "<p>Oh.</p>",
        "id": 130058517,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186114
    },
    {
        "content": "<p>Forgot I sent a message.</p>",
        "id": 130058519,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186118
    },
    {
        "content": "<p>My branch doesn't change it at all AFAIK.</p>",
        "id": 130058530,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186143
    },
    {
        "content": "<p>oh, is that your concern?</p>",
        "id": 130058573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186169
    },
    {
        "content": "<p>it doesn't seem to have a particularly nice error</p>",
        "id": 130058574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186177
    },
    {
        "content": "<p>in the AST land either</p>",
        "id": 130058575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186180
    },
    {
        "content": "<p>in fact it is sort of testing that you don't get a nice error:)</p>",
        "id": 130058577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186189
    },
    {
        "content": "<p>Yeah, I expected to see a change given that it was listed as one of the tests affected in the issue.</p>",
        "id": 130058595,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186256
    },
    {
        "content": "<p>let me take a closer look, it seems like it <em>could</em> trigger</p>",
        "id": 130058645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532186330
    },
    {
        "content": "<p>I reckon either way it's probably a issue for another PR, but curious nonetheless.</p>",
        "id": 130058712,
        "sender_full_name": "davidtwco",
        "timestamp": 1532186432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you're happy with that PR, it's passed the tests now, could <code>r+</code> and get it into the queue. <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 130063793,
        "sender_full_name": "davidtwco",
        "timestamp": 1532195166
    },
    {
        "content": "<p>(I wish we had a general compiler/lang stream in Zulip for the RFC 2008 stuff)</p>",
        "id": 130063801,
        "sender_full_name": "davidtwco",
        "timestamp": 1532195190
    },
    {
        "content": "<p>I guess we can make on :)</p>",
        "id": 130096214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532262805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> PR landed, nice!</p>",
        "id": 130096260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532262898
    },
    {
        "content": "<p>yah i saw it  <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 130096331,
        "sender_full_name": "DPC",
        "timestamp": 1532263073
    },
    {
        "content": "<p>thanks for the mentoring <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 130096375,
        "sender_full_name": "DPC",
        "timestamp": 1532263108
    },
    {
        "content": "<p>you up for more? :)</p>",
        "id": 130096387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263159
    },
    {
        "content": "<p>maybe after a week</p>",
        "id": 130096393,
        "sender_full_name": "DPC",
        "timestamp": 1532263186
    },
    {
        "content": "<p>sounds good</p>",
        "id": 130096433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263205
    },
    {
        "content": "<p>I just realized I was the one in the wrong topic all of yesterday, oops, sorry.</p>",
        "id": 130096439,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263223
    },
    {
        "content": "<p>haha.. <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> i saw it but didn't want to interrupt.</p>",
        "id": 130096446,
        "sender_full_name": "DPC",
        "timestamp": 1532263252
    }
]