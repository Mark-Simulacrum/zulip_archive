[
    {
        "content": "<p>Reposting to start a new topic.<br>\nSo while that runs I see 2 questions, that I may be able to answer for myself with a working editor, but you may just know:<br>\n1, how does the vec constraints end up calling add_region?<br>\n2, is ConstraintIndex use anywhere? The places IndexVec are added to from 51821 don't record it.</p>",
        "id": 128724458,
        "sender_full_name": "Eh2406",
        "timestamp": 1530116570
    },
    {
        "content": "<p>The answer to both is <code>compute_region_values</code> and <code>ConstraintIndex</code> is also used in <code>build_dependency_map</code></p>",
        "id": 128725271,
        "sender_full_name": "Eh2406",
        "timestamp": 1530117502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I'm back now, what's current status?</p>",
        "id": 128726047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530118492
    },
    {
        "content": "<p>just drafting a question for you...</p>",
        "id": 128726066,
        "sender_full_name": "Eh2406",
        "timestamp": 1530118515
    },
    {
        "content": "<p>I see two ways to read your instructions,<br>\na: use a <code>FxHashSet&lt;(RegionVid, RegionVid)&gt;</code> to make <code>add_region</code> approximately NOP on repeated inputs.<br>\nb: use a <code>FxHashSet&lt;(RegionVid, RegionVid)&gt;</code>to not add duplicate items to <code>constraints</code> in the first place.<br>\nwitch did you have in mind?</p>",
        "id": 128726227,
        "sender_full_name": "Eh2406",
        "timestamp": 1530118713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I did not mean modifying anything at the level of <code>add_region</code></p>",
        "id": 128726445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119018
    },
    {
        "content": "<p>I am not entirely sure where I <em>do</em> think we should modify</p>",
        "id": 128726448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119023
    },
    {
        "content": "<p>but i'd probably start by just not adding duplicate items to <code>constraints</code></p>",
        "id": 128726458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119033
    },
    {
        "content": "<p>the only potential issue I can see is that we may want to have extra information for error reporting -- i.e., the duplciate constraints arise for different reasons, and maybe some make sense more than others -- but we can cross that bridge when we come to it</p>",
        "id": 128726512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119065
    },
    {
        "content": "<p>in particular we're nowhere near smart enough to make use of that anyway :)</p>",
        "id": 128726518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119074
    },
    {
        "content": "<p>Ok, that prompts the question. Is <code>vec</code> the correct data structure for a set of things without duplicates.</p>",
        "id": 128726644,
        "sender_full_name": "Eh2406",
        "timestamp": 1530119271
    },
    {
        "content": "<p>yes, it does. There are some advantages. For example, we currently thread a linked list through the vector</p>",
        "id": 128726696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119298
    },
    {
        "content": "<p>using the indices</p>",
        "id": 128726697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119300
    },
    {
        "content": "<p>so that when one thing is dirty</p>",
        "id": 128726700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119303
    },
    {
        "content": "<p>we can quickly find the \"dependent\" constraints</p>",
        "id": 128726702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119308
    },
    {
        "content": "<p>that said, we used to build up a hashmap for that same purpose</p>",
        "id": 128726706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119313
    },
    {
        "content": "<p>I removed it as an optimization â€” but it turned out I was misinterpreting the profiles and it didn't really gain much</p>",
        "id": 128726711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119324
    },
    {
        "content": "<p>still, there is another argument in favor of a vector, which is that there is add'l data in each constraint that is not part of the \"key\" we use for uniqueness</p>",
        "id": 128726724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119365
    },
    {
        "content": "<p>though you could represent that with a <code>FxHashMap&lt;Key, ExtraData&gt;</code></p>",
        "id": 128726736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119374
    },
    {
        "content": "<p>still, i'd probably try inserting the <code>FxHashSet</code> to start</p>",
        "id": 128726746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119385
    },
    {
        "content": "<p>actually what I would prefer to see I think is for us to isolate out the \"set of constraints\" into a data structure of its own (in its own submodule, ideally :)</p>",
        "id": 128726801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119406
    },
    {
        "content": "<p>and then we can tinker...</p>",
        "id": 128726802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119408
    },
    {
        "content": "<p>e.g., that same file could encapsulate the logic of threading dirty constraints around...</p>",
        "id": 128726807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119422
    },
    {
        "content": "<p>but regardless of whether we encapsulate or not</p>",
        "id": 128726813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119443
    },
    {
        "content": "<p>it seems good to start with the simple thing (a set + the vec we have) and then we can measure the delta</p>",
        "id": 128726817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119455
    },
    {
        "content": "<p>of alternative choices</p>",
        "id": 128726818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119457
    },
    {
        "content": "<p>Ok, I will start with something small.</p>",
        "id": 128726855,
        "sender_full_name": "Eh2406",
        "timestamp": 1530119522
    },
    {
        "content": "<blockquote>\n<p>still, there is another argument in favor of a vector, which is that there is add'l data in each constraint that is not part of the \"key\" we use for uniqueness</p>\n</blockquote>\n<p>That data will also be lost if we remove duplicates from the vec.</p>",
        "id": 128726903,
        "sender_full_name": "Eh2406",
        "timestamp": 1530119604
    },
    {
        "content": "<p>sure, but not for the entry we keep</p>",
        "id": 128727177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119927
    },
    {
        "content": "<p>this is what I was saying before about \"the only potential issue I can see is that we may want to have extra information for error reporting...\"</p>",
        "id": 128727186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530119943
    },
    {
        "content": "<p>Ok so I have a draft with a new field of <code>RegionInferenceContext</code> <code>seen_constraints: FxHashSet&lt;(RegionVid, RegionVid)&gt;,</code><br>\nbut it allocates a new vector in <code>new</code></p>",
        "id": 128730189,
        "sender_full_name": "Eh2406",
        "timestamp": 1530123690
    },
    {
        "content": "<p><code>Vec::new</code> has no heap allocation, so that may be ok?</p>",
        "id": 128730255,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530123774
    },
    {
        "content": "<p>well presumably it populates it too</p>",
        "id": 128730278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123839
    },
    {
        "content": "<p>ah that does not save us this time, we are copying a bunch into it.</p>",
        "id": 128730319,
        "sender_full_name": "Eh2406",
        "timestamp": 1530123848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> right, so this is why I was talking about extracting out to a new data structure for a \"Set of constraints\"</p>",
        "id": 128730322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123851
    },
    {
        "content": "<p>so that we can create it before type check begins</p>",
        "id": 128730327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123858
    },
    {
        "content": "<p>and then move it into the region inference context</p>",
        "id": 128730329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123863
    },
    {
        "content": "<p>along with the hashset</p>",
        "id": 128730336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123872
    },
    {
        "content": "<p>that all makes sense. as a gole.</p>",
        "id": 128730386,
        "sender_full_name": "Eh2406",
        "timestamp": 1530123891
    },
    {
        "content": "<p>yep, doesn't have to be step 1</p>",
        "id": 128730387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530123898
    },
    {
        "content": "<p>so I'd say I am at step 0.7. witch is preity good for the time i've put in.</p>",
        "id": 128730421,
        "sender_full_name": "Eh2406",
        "timestamp": 1530123947
    },
    {
        "content": "<p>it may already show some measurable effect...</p>",
        "id": 128730493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124007
    },
    {
        "content": "<p>but it seems like if we're micro-optimziing, it'd be better to avoid adding the duplicates from the beginning</p>",
        "id": 128730504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124024
    },
    {
        "content": "<p>versus adding them and then filtering them ou</p>",
        "id": 128730508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124028
    },
    {
        "content": "<p>I think the next step is to remove the allocation by using <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain\">retain</a></p>",
        "id": 128730628,
        "sender_full_name": "Eh2406",
        "timestamp": 1530124146
    },
    {
        "content": "<p>ah, that's a decent compromise</p>",
        "id": 128730638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124170
    },
    {
        "content": "<p>forgot about <code>retain</code></p>",
        "id": 128730641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530124177
    },
    {
        "content": "<p>used <code>retain</code> and it is pretty clean.</p>",
        "id": 128731885,
        "sender_full_name": "Eh2406",
        "timestamp": 1530125549
    },
    {
        "content": "<p>next to look into were <code>new</code> is called as you suggested in the issue.</p>",
        "id": 128731918,
        "sender_full_name": "Eh2406",
        "timestamp": 1530125604
    },
    {
        "content": "<p>nice</p>",
        "id": 128732101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530125875
    },
    {
        "content": "<p>looks like there is a long chain but it comes from <code>MirTypeckRegionConstraints</code></p>",
        "id": 128732730,
        "sender_full_name": "Eh2406",
        "timestamp": 1530126607
    },
    {
        "content": "<p>yes that sounds right</p>",
        "id": 128732819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530126742
    },
    {
        "content": "<p>Where do you want the new type? What do you want it to be called?</p>",
        "id": 128733635,
        "sender_full_name": "Eh2406",
        "timestamp": 1530127919
    },
    {
        "content": "<p>I think it belongs in a new module; I'd probably call it <code>rustc_mir::borrow_check::nll::region_infer::constraint_set::ConstraintSet</code> (with that module being <code>crate</code> visible)</p>",
        "id": 128733771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530128108
    },
    {
        "content": "<p>but it could also be <code>nll::constraint_set::ConstraintSet</code></p>",
        "id": 128733776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530128122
    },
    {
        "content": "<p>I've been debating about what should belong \"under\" <code>region_infer</code>...</p>",
        "id": 128733778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530128130
    },
    {
        "content": "<p>either way, the <code>Constraint</code> struct should probably live with it</p>",
        "id": 128733785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530128151
    },
    {
        "content": "<p>along with (I think) the logic for threading constraints into a linked list (eventually, anyway)</p>",
        "id": 128733822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530128163
    },
    {
        "content": "<p>So I was thinking change <code>MirTypeckRegionConstraints</code>to hold the new type. and it is in <code>type_checke</code></p>",
        "id": 128733939,
        "sender_full_name": "Eh2406",
        "timestamp": 1530128312
    },
    {
        "content": "<p>so that suggests in nll.</p>",
        "id": 128733950,
        "sender_full_name": "Eh2406",
        "timestamp": 1530128336
    },
    {
        "content": "<p>...so many nested modules...</p>",
        "id": 128734309,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530128846
    },
    {
        "content": "<p>pr incoming</p>",
        "id": 128737548,
        "sender_full_name": "Eh2406",
        "timestamp": 1530132650
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51855\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51855\">https://github.com/rust-lang/rust/pull/51855</a></p>",
        "id": 128737682,
        "sender_full_name": "Eh2406",
        "timestamp": 1530132822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I left some notes on the PR</p>",
        "id": 128738813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I assume by <code>Constraint</code> you mean <code>OutlivesConstraint</code>or are you asking me to rename it?</p>",
        "id": 128739161,
        "sender_full_name": "Eh2406",
        "timestamp": 1530134476
    },
    {
        "content": "<p>I think you want me to bring <code>build_dependency_map</code> into the new type as <code>link</code> so as to get rid of <code>inner_mut</code>?</p>",
        "id": 128739341,
        "sender_full_name": "Eh2406",
        "timestamp": 1530134685
    },
    {
        "content": "<p>and I don't know what you want me to bring in for <code>each_affected_by_dirty</code></p>",
        "id": 128739367,
        "sender_full_name": "Eh2406",
        "timestamp": 1530134719
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I assume by <code>Constraint</code> you mean <code>OutlivesConstraint</code>or are you asking me to rename it?</p>\n</blockquote>\n<p>yes I mean that, I am not saying we should rename it</p>",
        "id": 128739434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134772
    },
    {
        "content": "<blockquote>\n<p>I think you want me to bring <code>build_dependency_map</code> into the new type as <code>link</code> so as to get rid of <code>inner_mut</code>?</p>\n</blockquote>\n<p>yes</p>",
        "id": 128739436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134776
    },
    {
        "content": "<blockquote>\n<p>and I don't know what you want me to bring in for <code>each_affected_by_dirty</code></p>\n</blockquote>\n<p>I basically don't want to have direct access to the vector</p>",
        "id": 128739450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134790
    },
    {
        "content": "<p>so I was proposing that we extract the loop that uses it into a method</p>",
        "id": 128739459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134803
    },
    {
        "content": "<p>one second...</p>",
        "id": 128739460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> <a href=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L504-L510\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L504-L510\">this is the loop I would exract into that method</a></p>",
        "id": 128739486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134844
    },
    {
        "content": "<p>it would be replaced with something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">constraint_set</span><span class=\"p\">.</span><span class=\"n\">each_affected_by_dirty</span><span class=\"p\">(</span><span class=\"n\">constraint</span><span class=\"p\">.</span><span class=\"n\">sup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">dep_idx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">dirty_list</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">dep_idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128739549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134888
    },
    {
        "content": "<p>I guess we would still want to permit indexing by <code>ConstraintIndex</code></p>",
        "id": 128739551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530134895
    },
    {
        "content": "<p>I don't groc that code at this time. Nor will I be able to do it in the time I have left today.<br>\nSo let me see if I can get <code>link</code> done tonight. <code>build_dependency_map</code> starts with <code>let mut map = IndexVec::from_elem(None, &amp;self.definitions);</code><br>\nSo should the <code>link</code> take a starting <code>map</code> as an argument?</p>",
        "id": 128739866,
        "sender_full_name": "Eh2406",
        "timestamp": 1530135260
    },
    {
        "content": "<p><code>link</code> would be a good start :)</p>",
        "id": 128739954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530135389
    },
    {
        "content": "<p>it should probably return the <code>map</code></p>",
        "id": 128739959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530135403
    },
    {
        "content": "<p>oh, it needs to know the number of items I guess?</p>",
        "id": 128739962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530135416
    },
    {
        "content": "<p>just pass in <code>self.definitions.len()</code> and invoke <code>IndexVec::from_elem_n(None, len)</code></p>",
        "id": 128739977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530135448
    },
    {
        "content": "<p>lol is that all its doing.</p>",
        "id": 128740030,
        "sender_full_name": "Eh2406",
        "timestamp": 1530135487
    },
    {
        "content": "<p>yeah</p>",
        "id": 128740125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530135615
    },
    {
        "content": "<p>links is up</p>",
        "id": 128740665,
        "sender_full_name": "Eh2406",
        "timestamp": 1530136447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I'll take a look -- do you think you'll have more time for the rest later? (I wasn't clear on whether you happened to have time today, or you would have time e.g. tomorrow etc)</p>",
        "id": 128740982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530136951
    },
    {
        "content": "<p>I could plausibly pull out some of that code the way I had in mind, seems like it wouldn't take that long, but if you think you'll have time, better for you to do it so you can get more familiar with things :)</p>",
        "id": 128740990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530136988
    },
    {
        "content": "<p>I'm not sure either, but I am going to give it a little longer tonight.</p>",
        "id": 128741006,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137018
    },
    {
        "content": "<p>ok looking at <code>each_affected_by_dirty</code> the code you linked refers to 2 other variables.<br>\n- <code>clean_bit_vec</code> which is not straightforward to bring in do to <a href=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L495\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L495\">https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L495</a><br>\n- <code>dependency_map</code> witch is <a href=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L485\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L485\">https://github.com/rust-lang/rust/blob/4aff10bb1b9b202bb6464f99d198d3e6f49e6991/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L485</a></p>\n<p><code>dependency_map</code> can be removed by taking <code>Option&lt;ConstraintIndex&gt;</code> as an arg instead of <code>RegionVid</code><br>\ndon't know about the other.</p>",
        "id": 128741067,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137076
    },
    {
        "content": "<p><code>clean_bit_vec</code> can be added as part of the call back.</p>",
        "id": 128741164,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137270
    },
    {
        "content": "<p>the <code>dependency_map</code> would I guess have to be given back, after having been returned by <code>link</code></p>",
        "id": 128741239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530137366
    },
    {
        "content": "<p>it could also be stored in the <code>ConstraintSet</code> structure itself I suppose</p>",
        "id": 128741243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530137375
    },
    {
        "content": "<p>I have something for you do look at</p>",
        "id": 128741330,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137478
    },
    {
        "content": "<p>one sec for the push to go thure</p>",
        "id": 128741340,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137493
    },
    {
        "content": "<p>also can I remove new, it is giving ded code workings?</p>",
        "id": 128741394,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137529
    },
    {
        "content": "<p>yep</p>",
        "id": 128741397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530137535
    },
    {
        "content": "<p>pushed, getting an odd error</p>\n<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow immutable argument `op` as mutable\n  --&gt; librustc_mir\\borrow_check\\nll\\constraint_set.rs:63:13\n   |\n60 |         op: impl FnMut(ConstraintIndex),\n   |         -- consider changing this to `mut op`\n...\n63 |             op(dep_idx);\n   |             ^^ cannot borrow mutably\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 128741573,
        "sender_full_name": "Eh2406",
        "timestamp": 1530137817
    },
    {
        "content": "<p>What  borrow!</p>",
        "id": 128741782,
        "sender_full_name": "Eh2406",
        "timestamp": 1530138140
    },
    {
        "content": "<p><code>mut op</code> made the errore go away.</p>",
        "id": 128741866,
        "sender_full_name": "Eh2406",
        "timestamp": 1530138317
    },
    {
        "content": "<p>I think this is close to what you wanted.</p>",
        "id": 128741868,
        "sender_full_name": "Eh2406",
        "timestamp": 1530138333
    },
    {
        "content": "<blockquote>\n<p>What  borrow!</p>\n</blockquote>\n<p>the <code>call</code> is a borrow</p>",
        "id": 128741989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530138506
    },
    {
        "content": "<p>that hiccup aside, I think that is a <code>each_affected_by_dirty</code> for you.</p>",
        "id": 128742007,
        "sender_full_name": "Eh2406",
        "timestamp": 1530138596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> looks great! I left some nits, mostly requests for comment and one minor cleanup.</p>",
        "id": 128742287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139057
    },
    {
        "content": "<p>but yes I'd say that's more or less done</p>",
        "id": 128742292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139072
    },
    {
        "content": "<p>ok I am working on all the <code>iters</code> then I will do the <code>Index</code></p>",
        "id": 128742450,
        "sender_full_name": "Eh2406",
        "timestamp": 1530139287
    },
    {
        "content": "<p>(I also pointed out we could use a <code>Deref</code> impl instead)</p>",
        "id": 128742565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139484
    },
    {
        "content": "<p><code>Deref</code> but not <code>DerefMut</code> that sounds good.</p>",
        "id": 128742589,
        "sender_full_name": "Eh2406",
        "timestamp": 1530139558
    },
    {
        "content": "<p>right</p>",
        "id": 128742630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139569
    },
    {
        "content": "<p>done and pushed</p>",
        "id": 128742831,
        "sender_full_name": "Eh2406",
        "timestamp": 1530139915
    },
    {
        "content": "<p>looks great</p>",
        "id": 128742880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139948
    },
    {
        "content": "<p>are you able to add the comments?</p>",
        "id": 128742886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530139972
    },
    {
        "content": "<p>for got I will do it</p>",
        "id": 128742899,
        "sender_full_name": "Eh2406",
        "timestamp": 1530140008
    },
    {
        "content": "<p>added</p>",
        "id": 128743082,
        "sender_full_name": "Eh2406",
        "timestamp": 1530140310
    },
    {
        "content": "<p>very nice =)</p>",
        "id": 128743092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530140345
    },
    {
        "content": "<p>This has been a lot of work of ~ 30% of ~8% = ~2% improvement.</p>",
        "id": 128743105,
        "sender_full_name": "Eh2406",
        "timestamp": 1530140389
    },
    {
        "content": "<p>code is nicer anyhow :)</p>",
        "id": 128743167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530140434
    },
    {
        "content": "<p>and in the long run 2 man-days is not a lot.</p>",
        "id": 128743185,
        "sender_full_name": "Eh2406",
        "timestamp": 1530140471
    },
    {
        "content": "<p>rebase is done ~1h ago, waiting on travis and and r+</p>",
        "id": 128779366,
        "sender_full_name": "Eh2406",
        "timestamp": 1530201835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> remind me the URL?</p>",
        "id": 128779524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530202032
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51855\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51855\">https://github.com/rust-lang/rust/pull/51855</a></p>",
        "id": 128779546,
        "sender_full_name": "Eh2406",
        "timestamp": 1530202079
    },
    {
        "content": "<p>I was thinking, always dangerous, from the way you described things the field pub point: Location, is not important any more. Would it be a good cleanup to just remove it as a separate PR?</p>",
        "id": 128781319,
        "sender_full_name": "Eh2406",
        "timestamp": 1530204513
    },
    {
        "content": "<p>I believe we use it during error reporting</p>",
        "id": 128781943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204796
    },
    {
        "content": "<p>so I'd say leave it</p>",
        "id": 128782043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530204944
    },
    {
        "content": "<p>I would have thought we used <code> pub span: Span, </code> for error reporting?</p>",
        "id": 128782380,
        "sender_full_name": "Eh2406",
        "timestamp": 1530205382
    },
    {
        "content": "<p>we use both</p>",
        "id": 128782402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530205425
    },
    {
        "content": "<p>I'm actually not sure if we us the span :)</p>",
        "id": 128782407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530205433
    },
    {
        "content": "<p>knowing the point lets us describe <em>why</em></p>",
        "id": 128782412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530205440
    },
    {
        "content": "<p>more intelligently than just <em>where</em></p>",
        "id": 128782451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530205446
    },
    {
        "content": "<p>i.e., we can inspect the MIR</p>",
        "id": 128782458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530205453
    },
    {
        "content": "<p>ok</p>",
        "id": 128782460,
        "sender_full_name": "Eh2406",
        "timestamp": 1530205462
    }
]