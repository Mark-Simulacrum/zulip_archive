[
    {
        "content": "<p>Welcome to <a class=\"stream\" data-stream-id=\"122657\" href=\"/#narrow/stream/122657-wg-nll\">#wg-nll</a>.</p>\n<p><strong>Description</strong>: Non-lexical lifetimes working group</p>",
        "id": 126057957,
        "sender_full_name": "Welcome Bot",
        "timestamp": 1525371690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@Douglas Campos</span> testing, testing</p>",
        "id": 126058505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525372386
    },
    {
        "content": "<p>here!</p>",
        "id": 126060618,
        "sender_full_name": "qmx",
        "timestamp": 1525374727
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116013\">@Douglas Campos</span> testing, testing</p>\n</blockquote>\n<p>testing a reply</p>",
        "id": 126060680,
        "sender_full_name": "qmx",
        "timestamp": 1525374836
    },
    {
        "content": "<p>I invited <span class=\"user-mention\" data-user-id=\"116083\">@Felix S Klock II</span> to join =)</p>",
        "id": 126096722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525441891
    },
    {
        "content": "<p>this is Felix's attempt to send a message that all the WG-nll people can see!</p>",
        "id": 126096847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525442072
    },
    {
        "content": "<p>I saw it!</p>",
        "id": 126096868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442130
    },
    {
        "content": "<p><span class=\"emoji emoji-1f64c\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 126096932,
        "sender_full_name": "qmx",
        "timestamp": 1525442267
    },
    {
        "content": "<p>the weird thing is that when <span class=\"user-mention\" data-user-id=\"116083\">@Felix S Klock II</span> joined, he didn't immediately see the wg-nll stream on the left</p>",
        "id": 126096977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442307
    },
    {
        "content": "<p>this streams concept is a blessing and a curse<br>\ntoo confusing tbh</p>",
        "id": 126096987,
        "sender_full_name": "qmx",
        "timestamp": 1525442350
    },
    {
        "content": "<p>I think you are referring to the \"threads\" concept</p>",
        "id": 126096990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442369
    },
    {
        "content": "<p>shades of Google Wave</p>",
        "id": 126096993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525442372
    },
    {
        "content": "<p>I think the problem <span class=\"user-mention\" data-user-id=\"116083\">@Felix S Klock II</span> had was that the set of streams defaults to showing you the streams you are subscribed too</p>",
        "id": 126096996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442384
    },
    {
        "content": "<p>which, I guess, makes sense</p>",
        "id": 126096999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442387
    },
    {
        "content": "<p>but somehow ran counter to my expectations</p>",
        "id": 126097000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442394
    },
    {
        "content": "<p>it's google wave dejavu's all over again</p>",
        "id": 126097001,
        "sender_full_name": "qmx",
        "timestamp": 1525442394
    },
    {
        "content": "<p>that is, it's not like (e.g.) gitter shows you all the rooms that exist</p>",
        "id": 126097050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442413
    },
    {
        "content": "<p>or IRC</p>",
        "id": 126097051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442415
    },
    {
        "content": "<p>one weird thing -- I've not found any easy way to see which users are subscribed to a stream? Or maybe that is indicated by the \"Users\" listing on the RHS</p>",
        "id": 126097075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442455
    },
    {
        "content": "<p>no, it doesn't seem to be</p>",
        "id": 126097091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442478
    },
    {
        "content": "<p>no, RHS is all users</p>",
        "id": 126097093,
        "sender_full_name": "qmx",
        "timestamp": 1525442486
    },
    {
        "content": "<p>weird</p>",
        "id": 126097101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442515
    },
    {
        "content": "<p>(though, to be clear, an \"all users\" listing is actually a really useful thing to have —I get annoyed a lot on IRC when I have to jump from room to room to find someone's nick that I can't <em>quite</em> remember)</p>",
        "id": 126097142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@Douglas Campos</span> oh I missed that you said you had 45 minutes to hack</p>",
        "id": 126097213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442678
    },
    {
        "content": "<p>I guess it's less now</p>",
        "id": 126097215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442682
    },
    {
        "content": "<p>I have a suggestion :P</p>",
        "id": 126097217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442685
    },
    {
        "content": "<p>go for it</p>",
        "id": 126097219,
        "sender_full_name": "qmx",
        "timestamp": 1525442698
    },
    {
        "content": "<p>I will push a commit real quick to my repo one sec</p>",
        "id": 126097225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442705
    },
    {
        "content": "<p>ok, I made a branch called <code>stats</code></p>",
        "id": 126097232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442730
    },
    {
        "content": "<p>I was going to integrate <a href=\"https://github.com/fitzgen/histo\" target=\"_blank\" title=\"https://github.com/fitzgen/histo\">the histo crate</a></p>",
        "id": 126097287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442780
    },
    {
        "content": "<p>and use it to dump various bits of data</p>",
        "id": 126097290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442785
    },
    {
        "content": "<p>in particular, I'd like to see:</p>\n<ul>\n<li>the in- and out-degree of nodes plotted in histogram format</li>\n</ul>\n<p>once that works:</p>\n<ul>\n<li>the option to limit this to the in- and out-degree of regions that are going dead in the next node</li>\n</ul>",
        "id": 126097312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442836
    },
    {
        "content": "<p>the main changes in those branch are that I added a way of iterating over all the <code>r1 &lt;= r2</code> edges after the fact (regardless of where they occur)</p>",
        "id": 126097317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442855
    },
    {
        "content": "<p>I'm going to investigate something else for a bit so I won't touch it anymore</p>",
        "id": 126097322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442878
    },
    {
        "content": "<p>here is <a href=\"https://github.com/nikomatsakis/borrow-check/blob/0fa65d0b23555df97b3f16e6f7be544f272cb53e/src/cli.rs#L91-L94\" target=\"_blank\" title=\"https://github.com/nikomatsakis/borrow-check/blob/0fa65d0b23555df97b3f16e6f7be544f272cb53e/src/cli.rs#L91-L94\">where I was adding a loop</a></p>",
        "id": 126097371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525442922
    },
    {
        "content": "<p>pulling the branch now</p>",
        "id": 126097611,
        "sender_full_name": "qmx",
        "timestamp": 1525443270
    },
    {
        "content": "<p>not sure if you got my message later, but I couldn't assign issues on the borrow-check repo</p>",
        "id": 126097631,
        "sender_full_name": "qmx",
        "timestamp": 1525443309
    },
    {
        "content": "<p>I think I invited you to the WG-compiler-nll team on rust-lang-nursery, no?</p>",
        "id": 126097710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525443414
    },
    {
        "content": "<p>yes, I did -- <span class=\"user-mention\" data-user-id=\"116013\">@Douglas Campos</span> you have to accept your invitation</p>",
        "id": 126097729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525443450
    },
    {
        "content": "<p>found the invitation, it was buried with rust-lang github notifications <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 126097804,
        "sender_full_name": "qmx",
        "timestamp": 1525443515
    },
    {
        "content": "<p>one thing I don't love about zulip -- it doesn't seem to have the \"nickname\" concept?</p>",
        "id": 126097806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525443517
    },
    {
        "content": "<p>I guess you have to change your \"real name\"</p>",
        "id": 126097810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525443526
    },
    {
        "content": "<p>I like \"nicks\" :)</p>",
        "id": 126097814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525443535
    },
    {
        "content": "<p>yea, nicks are great</p>",
        "id": 126097815,
        "sender_full_name": "qmx",
        "timestamp": 1525443542
    },
    {
        "content": "<p>/me brings back his nick by force</p>",
        "id": 126098402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444406
    },
    {
        "content": "<p>/me breaks <span class=\"user-mention\" data-user-id=\"116009\">@Nicholas Matsakis</span> 's previous @-references to Felix S Klock II</p>",
        "id": 126098495,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444473
    },
    {
        "content": "<p>(apparently they have not added alpha-renaming as a \"feature\" here.)</p>",
        "id": 126098502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444488
    },
    {
        "content": "<p>oh, wait, they <em>aren't</em> broken! You can still click them!</p>",
        "id": 126098515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444522
    },
    {
        "content": "<p>nice</p>",
        "id": 126098567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444575
    },
    {
        "content": "<p>sometimes it doesn't seem to \"scroll down\" and I have to do it manually. that is odd.</p>",
        "id": 126098570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444589
    },
    {
        "content": "<p>I'm adopting a nick too :)</p>",
        "id": 126098575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444616
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want to have another r? on rust-lang/rust#49870, or shall I just <code>r=nikomatsakis</code> it based on your earlier \"r+ once nits addressed\" ? The subsequent changes were a <em>little</em> more involved due to arielb1 feedback, but it was still pretty straight-forward...</p>",
        "id": 126098634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444699
    },
    {
        "content": "<p>oh no, how do I link github issues here???</p>",
        "id": 126098640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444714
    },
    {
        "content": "<p>oh geez! that's a fail</p>",
        "id": 126098644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444721
    },
    {
        "content": "<p>there's probably a bot or integration</p>",
        "id": 126098648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444733
    },
    {
        "content": "<p>I was going to ask, <span class=\"user-mention\" data-user-id=\"*\">@all</span>, whether we ought to really \"try\" this experiment or not...</p>",
        "id": 126098657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you're focusing on the stream it scrolls down - if you lose focus it stays put so you don't miss where you left off</p>",
        "id": 126098661,
        "sender_full_name": "qmx",
        "timestamp": 1525444755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> i don't feel the need to review 49870</p>",
        "id": 126098665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444775
    },
    {
        "content": "<p><span class=\"emoji emoji-2611\" title=\"ballot box with check\">:ballot_box_with_check:</span></p>",
        "id": 126098666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525444784
    },
    {
        "content": "<p>hate to admit, but I miss gitter - I just wish it worked well</p>",
        "id": 126098669,
        "sender_full_name": "qmx",
        "timestamp": 1525444786
    },
    {
        "content": "<p>there is this bot: <a href=\"https://zulipchat.com/integrations/doc/github_detail\" target=\"_blank\" title=\"https://zulipchat.com/integrations/doc/github_detail\">https://zulipchat.com/integrations/doc/github_detail</a></p>",
        "id": 126098726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444822
    },
    {
        "content": "<p>I agree that gitter feels in some ways closer to what I would hope for</p>",
        "id": 126098730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444833
    },
    {
        "content": "<p>there's just a few tweaks ... well, that and receiving messages</p>",
        "id": 126098731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444841
    },
    {
        "content": "<p>I filed a bug about the gitter notificaitons going missing</p>",
        "id": 126098748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444876
    },
    {
        "content": "<p><a href=\"https://gitlab.com/gitlab-org/gitter/webapp/issues/1894\" target=\"_blank\" title=\"https://gitlab.com/gitlab-org/gitter/webapp/issues/1894\">https://gitlab.com/gitlab-org/gitter/webapp/issues/1894</a></p>",
        "id": 126098751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444880
    },
    {
        "content": "<p>it annoys me that they are not treating this like \"def con zero\" :)</p>",
        "id": 126098756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444894
    },
    {
        "content": "<p>maybe y'all want to weigh in there</p>",
        "id": 126098760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444900
    },
    {
        "content": "<p>\"they\" is perhaps just 1 maintainer, I don't know</p>",
        "id": 126098765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444909
    },
    {
        "content": "<p>though gitter has had other flaws (missing notifications, bad android app, etc) for a long time :(</p>",
        "id": 126098811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525444950
    },
    {
        "content": "<p>long time = one week (?)</p>",
        "id": 126098994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525445236
    },
    {
        "content": "<p>way more than one week</p>",
        "id": 126099050,
        "sender_full_name": "qmx",
        "timestamp": 1525445312
    },
    {
        "content": "<p>somehow didn't realize gitter's missing notifications were going on longer than maybe 2 weeks. But I can believe it.</p>",
        "id": 126099176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525445509
    },
    {
        "content": "<p>I've setup the irc bridge solely for not missing mentions<br>\nthen the irc bridge broke <span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span></p>",
        "id": 126099291,
        "sender_full_name": "qmx",
        "timestamp": 1525445671
    },
    {
        "content": "<p>yeah, lots of people complain about it. Running the app, things mostly worked for me, but I've setup \"Backup channels\" for reaching people I communicate with regularly, in part for this reason.</p>",
        "id": 126099687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525446250
    },
    {
        "content": "<p>/me waves to <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span></p>",
        "id": 126113805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525467870
    },
    {
        "content": "<p>hello. You're right, this is a... different approach to chat. I can see it being cool though</p>",
        "id": 126113830,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525467912
    },
    {
        "content": "<p>e.g. new threads for weekly meetings etc.</p>",
        "id": 126113836,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525467926
    },
    {
        "content": "<p>yes -- threads have a lot of interesting potential</p>",
        "id": 126113897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525467983
    },
    {
        "content": "<p>both for good and ill :)</p>",
        "id": 126113904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525467994
    },
    {
        "content": "<p>gah, I guess I have to go home now</p>",
        "id": 126113929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525468032
    },
    {
        "content": "<p>let's see if i'm doing this right</p>",
        "id": 126113998,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1525468097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126114013,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1525468126
    },
    {
        "content": "<p>Yep, seems like.</p>",
        "id": 126114014,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525468126
    },
    {
        "content": "<p>I do quite like this.</p>",
        "id": 126114048,
        "sender_full_name": "davidtwco",
        "timestamp": 1525468186
    },
    {
        "content": "<p>Oops. I made a new chat.</p>",
        "id": 126114100,
        "sender_full_name": "davidtwco",
        "timestamp": 1525468220
    },
    {
        "content": "<p>just a bit annoying that you need to click reply before you can type, but otherwise it feels ok for now</p>",
        "id": 126114107,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1525468227
    },
    {
        "content": "<p>let's see how GH links look like: <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/6\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/6\">https://github.com/rust-lang-nursery/borrow-check/issues/6</a></p>",
        "id": 126114128,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1525468266
    },
    {
        "content": "<p>just like any other</p>",
        "id": 126114136,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1525468280
    },
    {
        "content": "<p>We kinda need a github bot</p>",
        "id": 126114137,
        "sender_full_name": "qmx",
        "timestamp": 1525468287
    },
    {
        "content": "<p>yeah there is a standard one I think</p>",
        "id": 126114211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525468350
    },
    {
        "content": "<p>I gotta run now but maybe we can mess around with configing later</p>",
        "id": 126114216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525468357
    },
    {
        "content": "<p>I know that Zulip is an open source project that has a similar welcoming attitude to contributors as Rust does. So there may be opportunity to tweak little things if we find the need. I think Gitter is too, granted.</p>",
        "id": 126114225,
        "sender_full_name": "davidtwco",
        "timestamp": 1525468372
    },
    {
        "content": "<p>Clicking on a message should let you reply directly to it, and you can keep sending messages in the same thread with just control-enter I think</p>",
        "id": 126114294,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525468462
    },
    {
        "content": "<p>The app is quite nice, you can just click into a topic and it's like a normal chat.</p>",
        "id": 126114321,
        "sender_full_name": "davidtwco",
        "timestamp": 1525468549
    },
    {
        "content": "<p><a href=\"https://zulipchat.com/for/open-source/\" target=\"_blank\" title=\"https://zulipchat.com/for/open-source/\">https://zulipchat.com/for/open-source/</a> is quite good.</p>",
        "id": 126114366,
        "sender_full_name": "davidtwco",
        "timestamp": 1525468593
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just needs to add something like <code>(?P&lt;org&gt;[\\w\\-]+)\\/(?P&lt;project&gt;[\\w\\-]+)#(?P&lt;issue&gt;[\\d]+)</code>  with a URL format string <code>https://github.com/%(org)/%(project)/issues/%(issue)</code>into the URL filter list</p>",
        "id": 126114621,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525468994
    },
    {
        "content": "<p>There's a GitHub Details integration that does that.</p>",
        "id": 126114629,
        "sender_full_name": "davidtwco",
        "timestamp": 1525469016
    },
    {
        "content": "<p>oh true. I got to practice my regex-foo at least ;)</p>",
        "id": 126114778,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525469238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have an updated relation branch, I also rebased it from master. Do you mind if I force push to your repo?</p>",
        "id": 126115908,
        "sender_full_name": "Chris Vittal",
        "timestamp": 1525471110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116110\">@Chris Vittal</span> no, go for it</p>",
        "id": 126134456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525511101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> regarding <a href=\"https://gitter.im/rust-impl-period/WG-compiler-nll?at=5aedf197da323a7c04fc6cee\" target=\"_blank\" title=\"https://gitter.im/rust-impl-period/WG-compiler-nll?at=5aedf197da323a7c04fc6cee\">your question from gitter</a>, I was exploring in a branch the idea of doing renaming and trying to avoid removing subset edges when propagating. Unfortunately, it caused Issue 47680 to stop compiling, at least the way that I did it. If you recall that example looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// creates a mutable loan L0 of `temp`</span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>In this case, along the <code>Some</code> path, we were linking the region for the call to <code>foo</code> with the regions in <code>temp</code> and then propagating those subset relations forward. They were no killed when <code>v</code> goes dead. Then we were adding the loan at the point where <code>foo</code> is called -- this loan gets killed on the <code>Some</code> path, but not the <code>None</code> path, and hence we had a path where <code>temp</code> was considered borrowed. Sorry this explanation is short, I'm in the middle of something else -- I should try to do a kind of canonical write-up of this example, though, as I think it illustrates some of the more subtle points.</p>\n<p>That said, this (which you wrote on gitter):</p>\n<blockquote>\n<p>I have checked the clap-rs example and found that it has 50 000 program points with at most 60 live regions per program point.</p>\n</blockquote>\n<p>was roughly what I expected to see (lots of points, lots of regions, but few that are <strong>actually live</strong> at any given point). If I recall, that example has ~20,000 regions. That I think <em>should</em> offer us a lot of opportunity. I confess though I didn't quite understand this part:</p>\n<blockquote>\n<p>Assuming we can find a way to implement subset(R1, R2, P) with a query complexity of log(N), computing requires for all program points would require 50 000 * 60 * log(1000 000, 2) &lt; 60 000 000 operations.</p>\n</blockquote>\n<p>I'm not sure if that is supposed to be a lot or a little or <em>quite</em> where those numbers came from... I guess that's just a max number of subsets or something?</p>",
        "id": 126173176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525604826
    },
    {
        "content": "<p>Thank you once again for pointing out this example! I am trying to understand what is the problem with it.</p>\n<blockquote>\n<p>That said, this (which you wrote on gitter):</p>\n<blockquote>\n<p>I have checked the clap-rs example and found that it has 50 000 program points with at most 60 live regions per program point.</p>\n</blockquote>\n<p>was roughly what I expected to see (lots of points, lots of regions, but few that are <strong>actually live</strong> at any given point). If I recall, that example has ~20,000 regions. That I think <em>should</em> offer us a lot of opportunity.</p>\n</blockquote>\n<p>One more observation: I think that we care not about live regions, but about the regions that die at a specific program point because these are the ones that make live loans dead. In other words, we could check what regions died at a specific program point and what loans died as a result of that instead of checking for each loan if it is still alive. Is this idea clear, or should I elaborate? (Note: I have no clue if it is possible to implement this with Datalog, but it should not be too dificult if we use a custom flow analysis.) I would expect this to give around 10x speedup.</p>\n<blockquote>\n<p>I confess though I didn't quite understand this part:</p>\n<blockquote>\n<p>Assuming we can find a way to implement subset(R1, R2, P) with a query complexity of log(N), computing requires for all program points would require 50 000 * 60 * log(1000 000, 2) &lt; 60 000 000 operations.</p>\n</blockquote>\n<p>I'm not sure if that is supposed to be a lot or a little or <em>quite</em> where those numbers came from... I guess that's just a max number of subsets or something?</p>\n</blockquote>\n<p>These numbers are from the <code>clap-rs</code> example:</p>\n<ul>\n<li><code>50 000</code> – the number of program points;</li>\n<li><code>60</code> – the upper bound on the number of loans that are live at a specific program point;</li>\n<li><code>1000 000</code> – the upper bound on base subset relations;</li>\n<li><code>log(N, 2)</code> – hypothesized query complexity of the subset relation (this is an assumption that I <strong>still need to check</strong>);</li>\n<li><code>30</code> – the upper bound on loans that are live at a specific program point (this number was missing in the text you cite);</li>\n</ul>\n<p>If we multiply all this, we get <code>&lt; 1800 000 000</code> operations to borrow check the <code>clap-rs</code> example. This should be around several seconds with a decent CPU. My gut feeling is that by tracking only the regions that die, we could get an additional 10x speedup that should push this below 1 second.</p>",
        "id": 126209136,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525687852
    },
    {
        "content": "<p>So while working on <a href=\"https://github.com/rust-lang/rust/issues/27282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282\">https://github.com/rust-lang/rust/issues/27282</a> and generalizing my solution to also fix <a href=\"https://github.com/rust-lang/rfcs/issues/1006\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/1006\">https://github.com/rust-lang/rfcs/issues/1006</a> , I found this line of code:</p>",
        "id": 126218177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704189
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1714\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1714\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L1714</a></p>",
        "id": 126218196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704239
    },
    {
        "content": "<p>which looks like this </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_place_err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_mutable</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LocalMutationIsAllowed</span>::<span class=\"n\">Yes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span_bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;&amp;unique borrow for {:?} should not fail&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126218242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok...</p>",
        "id": 126218271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525704354
    },
    {
        "content": "<p>That is, we seem to be able to assume in the current rustc that the borrow-checker will never encounter an attempt to mutate through a unique borrow. But in my case, its a unique borrow of one of my funny implicitly injected shared-borrows</p>",
        "id": 126218272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704356
    },
    {
        "content": "<p>(well, I should probably double-check that claim by actually looking at the generated MIR...)</p>",
        "id": 126218315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704379
    },
    {
        "content": "<p>I wonder why we think we can assume that</p>",
        "id": 126218316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525704383
    },
    {
        "content": "<p>not entirely obvious to me</p>",
        "id": 126218318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525704387
    },
    {
        "content": "<p>Right, that was my question</p>",
        "id": 126218320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704387
    },
    {
        "content": "<p>E.g. the obvious fix to me was to merge this match arm with the one below it</p>",
        "id": 126218322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704402
    },
    {
        "content": "<p>which instead of ICE'ing, reports the error</p>",
        "id": 126218326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525704414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> I agree that the number of dead regions is ok. I've not had time to process the rest of your message \"in detail\", but skimming it, it makes sense.</p>",
        "id": 126218424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525704554
    },
    {
        "content": "<p>( JFYI, I've also been experimenting with Discord, and I have to say I think it is probably \"The Future\" more so than Zulip. It might make sense to just jump over there, even though we just got here. )</p>",
        "id": 126227000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525717392
    },
    {
        "content": "<p>I think I finally understand why <code>region_live_at</code> is needed in the <code>subset3</code> rule. Without it, we get a cyclic <code>subset</code> relation among the regions, which causes the variable <code>temp</code> to keep alive the region associated with <code>v</code> on the <code>None</code> branch. Nice example. <span class=\"emoji emoji-263a\" title=\"relaxed\">:relaxed:</span></p>",
        "id": 126229573,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525721096
    },
    {
        "content": "<p>yes, that's it</p>",
        "id": 126229723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525721351
    },
    {
        "content": "<p>is there a discord room already?</p>",
        "id": 126230279,
        "sender_full_name": "qmx",
        "timestamp": 1525722394
    },
    {
        "content": "<p>Yes. To be honest, I was holding off, but I don't know why, I think we should just up and move</p>",
        "id": 126230580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525722937
    },
    {
        "content": "<p>it seems pretty clear that Discord is way more accessible</p>",
        "id": 126230583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525722942
    },
    {
        "content": "<p>even though I kind of like zulip :)</p>",
        "id": 126230588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525722949
    },
    {
        "content": "<p><a href=\"http://discord.gg/rust-lang\" target=\"_blank\" title=\"http://discord.gg/rust-lang\">discord.gg/rust-lang</a> -- I'll make an NLL room there</p>",
        "id": 126230636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525722970
    },
    {
        "content": "<p>I feel like the benefits of Zulip appear more at scale than with the smaller chats we're currently having.</p>",
        "id": 126230664,
        "sender_full_name": "davidtwco",
        "timestamp": 1525723027
    },
    {
        "content": "<p>It'd be particularly useful with the many concurrent conversations that can happen in #rustc on IRC.</p>",
        "id": 126230670,
        "sender_full_name": "davidtwco",
        "timestamp": 1525723045
    },
    {
        "content": "<p>perhaps so</p>",
        "id": 126230671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723045
    },
    {
        "content": "<p>yeah -- I can definitely imagine the threading being a really cool thing</p>",
        "id": 126230676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723062
    },
    {
        "content": "<p>but I also think it's clearly just harder to find your way around in</p>",
        "id": 126230681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723074
    },
    {
        "content": "<p>anyway I'm about to board a plane</p>",
        "id": 126230736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723111
    },
    {
        "content": "<p>the larger picture is: I think we're in an experimentation phase, but it'd be nice to find a single \"Chat tech\" that can serve rust-lang well as our \"official home\" -- IRC is not it -- gitter wasn't really it -- I thought  it'd be nice to try experimenting with Zulip and Discord. Anyway, it's still experimentation phase, so I'm happy to also hang out here a little longer.</p>",
        "id": 126230769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723187
    },
    {
        "content": "<p>but I also feel like Discord is a overall a slicker candidate</p>",
        "id": 126230809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723203
    },
    {
        "content": "<p>they're missing one or two features I want but it did sound like they would add them ;)</p>",
        "id": 126230830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723219
    },
    {
        "content": "<p>(notably linking to msgs is not yet easy)</p>",
        "id": 126230834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723228
    },
    {
        "content": "<p>plus they use Rust, always a plus for me :P</p>",
        "id": 126230837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723238
    },
    {
        "content": "<p>anyway, I've got to run to grab a plane</p>",
        "id": 126230839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525723245
    },
    {
        "content": "<p>safe travels!</p>",
        "id": 126230850,
        "sender_full_name": "qmx",
        "timestamp": 1525723268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> you around? (Also, are we using this or Discord? =)</p>",
        "id": 126270042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525794184
    },
    {
        "content": "<p>I see some people on Discord but not all</p>",
        "id": 126270048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525794190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116110\">@Chris Vittal</span> I saw your changes to the borrow-check <code>relation</code> branch -- I was thining about trying to connect that to the main algorithm</p>",
        "id": 126270131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525794291
    },
    {
        "content": "<p>We probably should use this tonight</p>",
        "id": 126270532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525794833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (I’m not really around as I need my hands free atm)</p>",
        "id": 126270576,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525794855
    },
    {
        "content": "<p>that's fine. I'll try to leave some notes, I may or may not make the mtg</p>",
        "id": 126270586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525794879
    },
    {
        "content": "<p>I won't be able to make the meeting today, have to take a final exam. I wrote up and pasted some pictures of a visualization I was playing with. I'm not sure if it's useful but making it was fun ;)</p>",
        "id": 126276456,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525803401
    },
    {
        "content": "<p>hmm, so who <em>is</em> going to be able to make the meeting today? Maybe its too late to say this, but should we just consider rescheduling to later this week?</p>",
        "id": 126278546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525806498
    },
    {
        "content": "<p>(I'll ask again in 22 minutes when the meeting is supposed to start.)</p>",
        "id": 126278549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525806524
    },
    {
        "content": "<p>I can make it but it's the same \"just keeping in the loop, back next week\" response as every week.</p>",
        "id": 126278666,
        "sender_full_name": "davidtwco",
        "timestamp": 1525806673
    },
    {
        "content": "<p>I should also be able to join. However, I do not have anything new to report because I am still trying to figure out how to encode my experiment in timely. (I want to check if it would be enough to kill subsets only on loop back edges.)</p>",
        "id": 126278798,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525806868
    },
    {
        "content": "<p>I left some notes in the paper</p>",
        "id": 126279523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525808018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> looking at your graph from the paper, I see a lot of black :) are there lots of regions with no relations at all? or is it just that a single pixel doesn't show up?</p>",
        "id": 126290599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525823999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the first picture there's lots of empty space because the regions are very sparse, in the second picture it's because they're plotted as a scattergram and not a proper matrix plot</p>",
        "id": 126291272,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525825033
    },
    {
        "content": "<p><a href=\"https://gist.github.com/bobtwinkles/c7c0342046dec2dd0efced078ffa5797\" target=\"_blank\" title=\"https://gist.github.com/bobtwinkles/c7c0342046dec2dd0efced078ffa5797\">source code of the analysis</a><br>\nyou'll need to install</p>",
        "id": 126291323,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525825099
    },
    {
        "content": "<p><code>pyqtgraph</code> and one of the flavors of python-qt bindings (pyqt-4, pyqt-5, there's a few others that work I think)</p>",
        "id": 126291329,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525825124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116110\">@Chris Vittal</span> I was messing about with integrating the <code>EdgeRelation</code> into the borrow-check -- I may push a WIP WIP commit -- one operation that seems to be missing is the \"iterate over all edges\", we can't really do that efficienctly =) (but we could thread another linked list to do that)</p>",
        "id": 126294761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832054
    },
    {
        "content": "<p>for now I will iterate over all edges starting from each live region</p>",
        "id": 126294762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you still want that integration with the <code>histo</code> crate or <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> work supersedes it?</p>",
        "id": 126294813,
        "sender_full_name": "qmx",
        "timestamp": 1525832204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> still seems useful to me, particularly if we can feed it different sorts of tuples.</p>",
        "id": 126294941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832437
    },
    {
        "content": "<p>good, I'll keep poking at it then - wasn't sure when I've seen the issue closed</p>",
        "id": 126294946,
        "sender_full_name": "qmx",
        "timestamp": 1525832471
    },
    {
        "content": "<p>(I didn't notice it was closd)</p>",
        "id": 126294947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832484
    },
    {
        "content": "<p>I know that I am personally much more likely to dump data in a text-based way :P just because I'm lazy to install everything</p>",
        "id": 126294949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832504
    },
    {
        "content": "<p>probably github being <em>too</em> smart about stuff :P</p>",
        "id": 126294950,
        "sender_full_name": "qmx",
        "timestamp": 1525832506
    },
    {
        "content": "<p>#teamlazy</p>",
        "id": 126294952,
        "sender_full_name": "qmx",
        "timestamp": 1525832516
    },
    {
        "content": "<p>that does happen</p>",
        "id": 126294996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525832539
    },
    {
        "content": "<p>yeah, my work doesn't intersect much with the <code>histo</code> stuff @qmx. My \"tool\" is a python script because I knew that would be easier than trying to get interactive plotting in Rust =)</p>",
        "id": 126297380,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525837666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , that's fine. I'll be happy to take a look.</p>",
        "id": 126298916,
        "sender_full_name": "Chris Vittal",
        "timestamp": 1525841016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> on Gitter, you wrote this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">//#![feature(nll)]</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">((</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Consume internals</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I think that the reason this works with NLL borrow checker is that we started special-casing <code>Box</code> again. On the AST-based borrow checker, we had some steps to treat <code>Box</code> conservatively and hence once you moved out of <em>one</em> part, e.g. the field <code>0</code>, you would be considered to have moved the entire box. However those special cases were inconsistent and kind of hacky and we removed them in the MIR-based borrow checker, for better or worse.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> this is something I've always wanted to revisit and make sure we are happy with =)</p>",
        "id": 126310402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525865503
    },
    {
        "content": "<p>We should probably open a bug specifically about revisiting that choice. (...... and maybe... shudder... an RFC..?)</p>",
        "id": 126310870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1525866378
    },
    {
        "content": "<p>still thinking about the transitive closure mentioned in the borrowck repo, issue #6: completely commenting it out brings clap down from 147s to 9s (and of course misses half the tuples). Do we have an idea if those 9s are good, good enough, bad ?</p>",
        "id": 126311177,
        "sender_full_name": "lqd",
        "timestamp": 1525866997
    },
    {
        "content": "<p>it's obviously a lot better =) that's a good measurement, though. Still not great. It'd be good to start investigating where <em>that</em> time is going as well (for once we solve the TC problem)</p>",
        "id": 126311305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525867224
    },
    {
        "content": "<p>I wonder if frank mcsherry has debugging and profiling tools for timely :)</p>",
        "id": 126311559,
        "sender_full_name": "lqd",
        "timestamp": 1525867709
    },
    {
        "content": "<p>not sure, he mentioned to me at one point that a useful thing was just to stick some calls to <code>count</code> to get a view of raw number of tuples flowing about at any point</p>",
        "id": 126312365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525869015
    },
    {
        "content": "<p>(I had forgotten to check this data point as comparison, but the regular NLL analysis takes 16s on this machine)</p>",
        "id": 126312534,
        "sender_full_name": "lqd",
        "timestamp": 1525869357
    },
    {
        "content": "<p>9s still feels like a tremendous amount to me</p>",
        "id": 126312587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525869410
    },
    {
        "content": "<p>I think that part of the problem is that we are propagating things \"per point\" right now</p>",
        "id": 126312595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525869435
    },
    {
        "content": "<p>and there are 2x points per MIR <em>statement</em> (not even basic blocks)</p>",
        "id": 126312598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525869443
    },
    {
        "content": "<p>to me too unfortunately (btw the other subset rules apart from the TC didn't seem to be heavy, making subset = outlives didn't change those 9s)</p>",
        "id": 126312655,
        "sender_full_name": "lqd",
        "timestamp": 1525869551
    },
    {
        "content": "<p>having the invalidation points will be interesting to see as well</p>",
        "id": 126312662,
        "sender_full_name": "lqd",
        "timestamp": 1525869600
    },
    {
        "content": "<p>it would also be interesting to see what kind of query plans would a graph database generate for these relations :)</p>",
        "id": 126312849,
        "sender_full_name": "lqd",
        "timestamp": 1525869863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> now we can't talk anymore :)</p>",
        "id": 126315371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525873672
    },
    {
        "content": "<p>heh</p>",
        "id": 126315410,
        "sender_full_name": "qmx",
        "timestamp": 1525873690
    },
    {
        "content": "<p>I wonder if zulip also supports \"heading\" tags</p>",
        "id": 126315416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525873728
    },
    {
        "content": "<p>## Foo</p>",
        "id": 126315418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525873731
    },
    {
        "content": "<p>good, that's a kind of misfeature :)</p>",
        "id": 126315420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525873737
    },
    {
        "content": "<blockquote>\n<p>we started special-casing <code>Box</code> again. [...]  we removed [those special cases] in the MIR-based borrow checker</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, is it special-cased before, after, or differently with MIR borrowck?</p>",
        "id": 126323388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525884725
    },
    {
        "content": "<p>And here's a contentious question: is the name \"non-lexical lifetimes\" a misnomer? (not as bad as OIBIT, though)</p>",
        "id": 126323406,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525884791
    },
    {
        "content": "<p>because <em>lifetimes</em> don't really change with NLL; it's just the length of a borrow that changes</p>",
        "id": 126323421,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525884836
    },
    {
        "content": "<p>whatever the new name is, it has to have \"loans\" on it <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 126323604,
        "sender_full_name": "qmx",
        "timestamp": 1525885116
    },
    {
        "content": "<p>I mean, the name doesn't really have to change, as <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> points out, once it's enabled, no one will ever think about it again.<br>\nIt will \"just be\"</p>",
        "id": 126324045,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525885716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I would say it is special-cased differently :)</p>",
        "id": 126324157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525885901
    },
    {
        "content": "<p>but the old borrow checker was aiming <strong>not</strong> to special-case it -- meaning, to only permit you to do things you could emulate with a <code>fn into_inner(self)</code> etc</p>",
        "id": 126324201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525885935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and another missing piece of the puzzle for me: where does the <em>borrow</em> checker come into play with this at all? I'd understand if there were some references involved...</p>",
        "id": 126324212,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525885971
    },
    {
        "content": "<p>the borrow checker checks moves too</p>",
        "id": 126324218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525885987
    },
    {
        "content": "<p>they interact</p>",
        "id": 126324225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525885999
    },
    {
        "content": "<p>TIL. I guess <code>borrow_or_move_ck</code> isn't as smooth of a name</p>",
        "id": 126324233,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525886021
    },
    {
        "content": "<p>\"ownership-check\"</p>",
        "id": 126324237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886026
    },
    {
        "content": "<p>initially the borrow checker did <em>not</em> check moves</p>",
        "id": 126324241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886034
    },
    {
        "content": "<p>but that changed</p>",
        "id": 126324242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886036
    },
    {
        "content": "<p>technically that's a \"sub-phase\", essentially, the \"initialization check\" (where a move is a \"deinitialization\")</p>",
        "id": 126324289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any objections to me stating that \"NLL\" is poorly named in a stack overflow answer? <span class=\"emoji emoji-1f607\" title=\"innocent\">:innocent:</span></p>",
        "id": 126324500,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525886337
    },
    {
        "content": "<p>I don't disagree</p>",
        "id": 126324513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886346
    },
    {
        "content": "<p>so \"no\" I suppose</p>",
        "id": 126324523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886368
    },
    {
        "content": "<p>I mean, I plan on having more words to back it up. And mentioning MIR borrowck as the core piece</p>",
        "id": 126324526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525886370
    },
    {
        "content": "<p>\"MIR ownership check\" I suppose ;-)</p>",
        "id": 126324581,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525886404
    },
    {
        "content": "<p>borrowck2.0</p>",
        "id": 126324594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886423
    },
    {
        "content": "<p>\"Now more precise!\"</p>",
        "id": 126324597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525886432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  Have you made any progress on <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/4\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/4\">https://github.com/rust-lang-nursery/borrow-check/issues/4</a> ? I'd really like to have that information and have time to hack it up today =)</p>",
        "id": 126326051,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525888409
    },
    {
        "content": "<p>(though for general reference, my schedule is changing a lot starting next week and I won't be able to make the weekly meetings unless they get moved sometime that's not from ~9am to 6pm PDT/12pm to 9pm EDT)</p>",
        "id": 126326210,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525888622
    },
    {
        "content": "<p>I should still be able to stay in touch async though</p>",
        "id": 126326279,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525888704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> I don't think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> has had a chance to do anything. If you have time to hack on it, I say go for it!</p>",
        "id": 126326291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525888736
    },
    {
        "content": "<p>it seems the datalog compiled to a binary with soufflé is slower than the timely analysis ? (the counts seem to match, but I'll need to check the output :) -- I killed the single threaded soufflé since it was so long, but at 8 threads it took 92s.</p>",
        "id": 126327200,
        "sender_full_name": "lqd",
        "timestamp": 1525889983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> note that the datalog can be optimized by reordering clauses sometimes</p>",
        "id": 126327390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890227
    },
    {
        "content": "<p>I didn't make any effort to order it intelligently</p>",
        "id": 126327393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890233
    },
    {
        "content": "<p>that said, I think that differential-dataflow is quite competitive</p>",
        "id": 126327394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890240
    },
    {
        "content": "<p>but I found massive (like 10x) differences in souffle's performance by doing some reordering</p>",
        "id": 126327446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890269
    },
    {
        "content": "<p>in prior experiments</p>",
        "id": 126327449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890272
    },
    {
        "content": "<p>you have to sort of visualize how many tuples will result...</p>",
        "id": 126327479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890331
    },
    {
        "content": "<p>basically prefer this that will \"Kill of\" stuff</p>",
        "id": 126327483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525890340
    },
    {
        "content": "<p>indeed reordering and using their profiler could be an interesting experiment, I was mostly trying it out in case it was faster out of the box, and could have offered insights on the timely plan, but alas</p>",
        "id": 126328106,
        "sender_full_name": "lqd",
        "timestamp": 1525891203
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  Have you made any progress on <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/4\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/4\">https://github.com/rust-lang-nursery/borrow-check/issues/4</a> ? I'd really like to have that information and have time to hack it up today =)</p>\n</blockquote>\n<p>I haven't started yet ... is the next task I have on my todo list</p>",
        "id": 126328159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1525891284
    },
    {
        "content": "<p>probably starting today or tomorrow</p>",
        "id": 126328169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1525891302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> not sure if <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> will wind up hacking on that, but there was another \"bespoke\" data structure I wanted to play around with, I could try to write out the details</p>",
        "id": 126328419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525891611
    },
    {
        "content": "<p>though I should work more on that \"harness\"</p>",
        "id": 126328426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525891623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> are you hacking on #4 after all?</p>",
        "id": 126331215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525895587
    },
    {
        "content": "<p>slowly, yes</p>",
        "id": 126331275,
        "sender_full_name": "Reed Koser",
        "timestamp": 1525895660
    },
    {
        "content": "<p>grr what the heck is going on -- so I merged <a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/18\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/18\">https://github.com/rust-lang-nursery/borrow-check/pull/18</a> -- but now, on my mac anyway, I am not able to build anymore</p>",
        "id": 126361673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525953782
    },
    {
        "content": "<p>can someone else test?</p>",
        "id": 126361676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525953785
    },
    {
        "content": "<p>can do</p>",
        "id": 126361682,
        "sender_full_name": "qmx",
        "timestamp": 1525953823
    },
    {
        "content": "<p>(you will need a recent nightly)</p>",
        "id": 126361729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525953896
    },
    {
        "content": "<p>is 3 days ago recent enough?</p>",
        "id": 126361739,
        "sender_full_name": "qmx",
        "timestamp": 1525953908
    },
    {
        "content": "<p>it's weird though because travis is green...</p>",
        "id": 126361740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525953912
    },
    {
        "content": "<p>should be, yeah</p>",
        "id": 126361742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525953916
    },
    {
        "content": "<p>yep, master compiled just fine</p>",
        "id": 126361788,
        "sender_full_name": "qmx",
        "timestamp": 1525953977
    },
    {
        "content": "<p>huh. strange.</p>",
        "id": 126361794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> which nightly are you using? I am using:</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo +nightly --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>9e53ac6e6 <span class=\"m\">2018</span>-05-07<span class=\"o\">)</span>\n</pre></div>",
        "id": 126361816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954070
    },
    {
        "content": "<p><code>rustc 1.27.0-nightly (91db9dcf3 2018-05-04)</code></p>",
        "id": 126361862,
        "sender_full_name": "qmx",
        "timestamp": 1525954097
    },
    {
        "content": "<p>updating my nightly to see if something broke</p>",
        "id": 126361865,
        "sender_full_name": "qmx",
        "timestamp": 1525954109
    },
    {
        "content": "<p>I will try that one</p>",
        "id": 126361866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954110
    },
    {
        "content": "<p>/me thinks he will regret that</p>",
        "id": 126361869,
        "sender_full_name": "qmx",
        "timestamp": 1525954126
    },
    {
        "content": "<p>the conference wifi is not too fast though</p>",
        "id": 126361875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954143
    },
    {
        "content": "<p>so my ability to download new nightly's is limited :P</p>",
        "id": 126361878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954152
    },
    {
        "content": "<p>been there</p>",
        "id": 126361885,
        "sender_full_name": "qmx",
        "timestamp": 1525954176
    },
    {
        "content": "<p>argh, this is the bane of my existance </p>\n<div class=\"codehilite\"><pre><span></span>error: could not rename component directory from &#39;/home/qmx/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends&#39; to &#39;/home/qmx/.rustup/tmp/gpz2qvd0u6nl969o_dir/bk&#39;\ninfo: caused by: Invalid cross-device link (os error 18)\n</pre></div>\n\n\n<p>I hit this every single time</p>",
        "id": 126362023,
        "sender_full_name": "qmx",
        "timestamp": 1525954389
    },
    {
        "content": "<p>what the</p>",
        "id": 126362026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954411
    },
    {
        "content": "<p>I've never heard of that</p>",
        "id": 126362027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954415
    },
    {
        "content": "<p>ok, I managed to download 2018-05-04, building now</p>",
        "id": 126362070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954447
    },
    {
        "content": "<p>I don't even know where to start debugging this</p>",
        "id": 126362073,
        "sender_full_name": "qmx",
        "timestamp": 1525954472
    },
    {
        "content": "<p>hmm 2018-05-04 seems to be working. I wonder if something happened to break it</p>",
        "id": 126362087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954523
    },
    {
        "content": "<p>I can confirm that master fails to compile with <code>cargo 1.27.0-nightly (9e53ac6e6 2018-05-07)</code>.</p>",
        "id": 126362144,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525954639
    },
    {
        "content": "<p>there's something that's annoying me with <code>rustc</code> lately - near the end of the build process CPU usage drops to zero, idles 10s, then spikes and finishes the build</p>",
        "id": 126362149,
        "sender_full_name": "qmx",
        "timestamp": 1525954655
    },
    {
        "content": "<p>overall the wall clock time feels longer</p>",
        "id": 126362203,
        "sender_full_name": "qmx",
        "timestamp": 1525954742
    },
    {
        "content": "<p>curious</p>",
        "id": 126362218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525954794
    },
    {
        "content": "<p><code>cargo +nightly-2018-05-06 build --release</code> successfully compiled.</p>",
        "id": 126362347,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525954986
    },
    {
        "content": "<p>strange. for me, it does not.</p>",
        "id": 126362405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955046
    },
    {
        "content": "<p>but 2018-05-04 does</p>",
        "id": 126362406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955054
    },
    {
        "content": "<p>I wonder if something else is weird on my system</p>",
        "id": 126362407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955060
    },
    {
        "content": "<p>I am confused:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo +nightly-2018-05-06 --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>af3f1cd29 <span class=\"m\">2018</span>-05-03<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Shouldn't it be <code>2018-05-06</code>, or at least <code>2018-05-05</code>?</p>",
        "id": 126362493,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525955192
    },
    {
        "content": "<p>that...is confusing</p>",
        "id": 126362505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ cargo +nightly-2018-05-06 --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>af3f1cd29 <span class=\"m\">2018</span>-05-03<span class=\"o\">)</span>\n\n$ cargo +nightly-2018-05-07 --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>af3f1cd29 <span class=\"m\">2018</span>-05-03<span class=\"o\">)</span>\n\n$ cargo +nightly-2018-05-08 --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>af3f1cd29 <span class=\"m\">2018</span>-05-03<span class=\"o\">)</span>\n\n$ cargo +nightly-2018-05-09 --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>af3f1cd29 <span class=\"m\">2018</span>-05-03<span class=\"o\">)</span>\n\n$ cargo +nightly --version\ncargo <span class=\"m\">1</span>.27.0-nightly <span class=\"o\">(</span>9e53ac6e6 <span class=\"m\">2018</span>-05-07<span class=\"o\">)</span>\n</pre></div>",
        "id": 126362715,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525955553
    },
    {
        "content": "<p>I'll try to reinstall rustup.</p>",
        "id": 126362726,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525955580
    },
    {
        "content": "<p>sometimes all the nightly components don't successfully build, could be related to that</p>",
        "id": 126362735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955608
    },
    {
        "content": "<p>If this is a case, then when was the latest nightly build?</p>",
        "id": 126362851,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525955770
    },
    {
        "content": "<p>In other words, why <code>cargo +nightly --version</code> reports <code>2018-05-07</code>, but <code>cargo +nightly-2018-05-09 --version</code> reports <code>2018-05-03</code>?</p>",
        "id": 126362866,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525955851
    },
    {
        "content": "<p>Ok, I think I finally understood. The reported date is the commit date while the date in the <code>+nightly-2018-05-09</code> is the build date, which can be several days later.</p>",
        "id": 126363171,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525956401
    },
    {
        "content": "<p>Anyway, <code>cargo +nightly-2018-05-07 build --release</code> is the latest version that still works for me.</p>",
        "id": 126363354,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525956735
    },
    {
        "content": "<p>So, most likely something happened between the rustc commits <code>428ea5f6b 2018-05-06</code> and <code>565235ee7 2018-05-07</code>.</p>",
        "id": 126363378,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525956827
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span>! I should file a bug....</p>",
        "id": 126363499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525957022
    },
    {
        "content": "<p>No problem. <span class=\"emoji emoji-263a\" title=\"relaxed\">:relaxed:</span></p>",
        "id": 126363553,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1525957121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> off-the-wall question, but the <code>Box</code> special casing we were talking about doesn't help <code>Box&lt;FnOnce&gt;</code>, does it?</p>",
        "id": 126379628,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525979405
    },
    {
        "content": "<p>no</p>",
        "id": 126379758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525979600
    },
    {
        "content": "<p>booo</p>",
        "id": 126381138,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525981337
    },
    {
        "content": "<p>I really want a good-natured \"boo\" reaction emoji</p>",
        "id": 126381148,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1525981354
    },
    {
        "content": "<p>I opened two new issues on the borrow-checker repo with ideas for ways to make the input smaller:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\">https://github.com/rust-lang-nursery/borrow-check/issues/20</a></li>\n<li><a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/19\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/19\">https://github.com/rust-lang-nursery/borrow-check/issues/19</a></li>\n</ul>",
        "id": 126388540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would the hypothetical datalog to DD builder emit semijoins when the previous predicate's output covers the next, and joins otherwise ?</p>",
        "id": 126388578,
        "sender_full_name": "lqd",
        "timestamp": 1525992725
    },
    {
        "content": "<p>by \"covers\" you mean all variables that appear in the second predicate also appeared in the first?</p>",
        "id": 126388589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992760
    },
    {
        "content": "<p>if so, yes</p>",
        "id": 126388593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992769
    },
    {
        "content": "<p>yeah</p>",
        "id": 126388595,
        "sender_full_name": "lqd",
        "timestamp": 1525992777
    },
    {
        "content": "<p>I think the idea would roughly be:</p>\n<ul>\n<li>group variables into three groups (only pred1, both preds, only pred2)</li>\n<li>map first pred to contain <code>(BothPreds, OnlyPred1)</code> </li>\n<li>if OnlyPred2 is not empty:<ul>\n<li>map second pred to contain <code>(BothPreds, OnlyPred2)</code></li>\n<li>join those two mapped things</li>\n</ul>\n</li>\n<li>else:<ul>\n<li>map second pred to contain <code>BothPreds</code></li>\n<li>semijoin</li>\n</ul>\n</li>\n</ul>\n<p>(ignoring negative things)</p>",
        "id": 126388599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992783
    },
    {
        "content": "<p>probably some details wrong there</p>",
        "id": 126388654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992867
    },
    {
        "content": "<p>so I feel the only grey area is when to use <code>iterate</code> vs other operators, or if there might need to be other inner timely scopes, etc</p>",
        "id": 126388659,
        "sender_full_name": "lqd",
        "timestamp": 1525992885
    },
    {
        "content": "<p>ah, yes, recursion is a bit tricky</p>",
        "id": 126388663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992900
    },
    {
        "content": "<p>there is a lower-level primitive you can use</p>",
        "id": 126388668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992906
    },
    {
        "content": "<p>but it would probably be good to build a DAG between relations</p>",
        "id": 126388674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992918
    },
    {
        "content": "<p>you could even not support complex cycles to begin with</p>",
        "id": 126388678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992925
    },
    {
        "content": "<p>most of the time the relations just recurse on themselves anyway</p>",
        "id": 126388679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525992933
    },
    {
        "content": "<p>or maybe have a slightly \"richer\" input format, to manually control such cases</p>",
        "id": 126388725,
        "sender_full_name": "lqd",
        "timestamp": 1525993001
    },
    {
        "content": "<p>right, it doesn't have to <em>really</em> be datalog etc</p>",
        "id": 126388782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525993117
    },
    {
        "content": "<p>especially not to start :)</p>",
        "id": 126388786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525993138
    },
    {
        "content": "<p>eg <code>.decl requires(R, B, P) iterates borrow_region</code></p>",
        "id": 126388799,
        "sender_full_name": "lqd",
        "timestamp": 1525993165
    },
    {
        "content": "<p>thanks for the answers, this seems like it would be fun to do :p</p>",
        "id": 126388808,
        "sender_full_name": "lqd",
        "timestamp": 1525993192
    },
    {
        "content": "<p>I guess to work around the breakage we can revert <a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/18\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/18\">https://github.com/rust-lang-nursery/borrow-check/pull/18</a> for now</p>",
        "id": 126389886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525995119
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/22\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/22\">https://github.com/rust-lang-nursery/borrow-check/pull/22</a></p>",
        "id": 126389984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525995245
    },
    {
        "content": "<p>yea, that fixed it</p>",
        "id": 126390195,
        "sender_full_name": "qmx",
        "timestamp": 1525995643
    },
    {
        "content": "<p>I restarted travis on your PR <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span></p>",
        "id": 126390347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525995851
    },
    {
        "content": "<p>do we need to add <code>extern crate</code> again with the reverts?</p>",
        "id": 126390463,
        "sender_full_name": "qmx",
        "timestamp": 1525996020
    },
    {
        "content": "<p>yes</p>",
        "id": 126390480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996051
    },
    {
        "content": "<p>ah so your PR may need to be edited</p>",
        "id": 126390485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996058
    },
    {
        "content": "<p>ok, fixing</p>",
        "id": 126390534,
        "sender_full_name": "qmx",
        "timestamp": 1525996097
    },
    {
        "content": "<p>it was so refreshing <strong>not</strong> having to do that :P</p>",
        "id": 126390539,
        "sender_full_name": "qmx",
        "timestamp": 1525996128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is your emacs rust syntax highlighting working with the nightly features or you just live with the breakage?</p>",
        "id": 126390700,
        "sender_full_name": "qmx",
        "timestamp": 1525996438
    },
    {
        "content": "<p>it works for the most part? I haven't noticed any glaring problems</p>",
        "id": 126390741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996456
    },
    {
        "content": "<p>yay, green PR</p>",
        "id": 126390754,
        "sender_full_name": "qmx",
        "timestamp": 1525996504
    },
    {
        "content": "<p>grr I feel like I'm constantly re-inventing things like <code>IndexVec</code></p>",
        "id": 126390815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996652
    },
    {
        "content": "<p>it'd be nice to pull that into a rust-lang-nursery crate</p>",
        "id": 126390818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996658
    },
    {
        "content": "<p>sounds like boring janitorial work, how one can approach that?</p>",
        "id": 126390864,
        "sender_full_name": "qmx",
        "timestamp": 1525996731
    },
    {
        "content": "<p>I wonder if we should just pull the entire <code>rustc_data_structures</code> crate, or break it up into smaller crates</p>",
        "id": 126390986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996967
    },
    {
        "content": "<p>in any case, I can make some repos...</p>",
        "id": 126390988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996973
    },
    {
        "content": "<p>I'm loving zulip threads. Made digesting a 99+ message backlog actually tractable <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 126394348,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526004144
    },
    {
        "content": "<p>yeah, i'm totally just clicking on the topics/threads rn to read the context, instead of going into the #wg-nll stream to read everything there</p>",
        "id": 126400305,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526017556
    },
    {
        "content": "<blockquote>\n<p>(though for general reference, my schedule is changing a lot starting next week and I won't be able to make the weekly meetings unless they get moved sometime that's not from ~9am to 6pm PDT/12pm to 9pm EDT)</p>\n</blockquote>\n<p>Maybe we should set up another doodle?</p>",
        "id": 126406868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526031243
    },
    {
        "content": "<blockquote>\n<p>I'm loving zulip threads. Made digesting a 99+ message backlog actually tractable <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>\n</blockquote>\n<p>but you put this in the wrong thread! ;)</p>",
        "id": 126408672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526034844
    },
    {
        "content": "<p>(to clarify, I was thinking of the \"gitter is dead\" thread)</p>\n<p>But actually it's pretty interesting that the threads help to catch up later. I can imagine that.</p>",
        "id": 126408928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526035368
    },
    {
        "content": "<p>agree with threads and catching up - can ignore what is uninteresting. needs to be sorted correctly tho</p>",
        "id": 126415804,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526046830
    },
    {
        "content": "<blockquote>\n<p>Mr-Darcy.</p>\n</blockquote>",
        "id": 126443180,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526088788
    },
    {
        "content": "<blockquote>\n<p>argh, this is the bane of my existance </p>\n</blockquote>\n<p>error: could not rename component directory from '/home/qmx/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends' to '/home/qmx/.rustup/tmp/gpz2qvd0u6nl969o_dir/bk'<br>\ninfo: caused by: Invalid cross-device link (os error 18)</p>\n<div class=\"codehilite\"><pre><span></span>I hit this every single time\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so this error is this one <a href=\"https://github.com/rust-lang-nursery/rustup.rs/issues/1239\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustup.rs/issues/1239\">https://github.com/rust-lang-nursery/rustup.rs/issues/1239</a> - quite a fun one to hit :)</p>",
        "id": 126483872,
        "sender_full_name": "qmx",
        "timestamp": 1526183338
    },
    {
        "content": "<p>Argh</p>",
        "id": 126495121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526211070
    },
    {
        "content": "<p>Well at least you found the issue I guess</p>",
        "id": 126495123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526211078
    },
    {
        "content": "<p>One again I won't be able to make the triage meeting this week. I'll try to write up my progress quickly in the doc though</p>",
        "id": 126592595,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526392500
    },
    {
        "content": "<p>can't make it today as well, i've got meetings all over</p>",
        "id": 126603670,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1526407300
    },
    {
        "content": "<p>is anyone else observing <code>borrow_check</code> rebuilding itself on every <code>cargo run</code>/<code>cargo test</code> invocation, starting from... well, I'm not getting consistent results as to which crate it starts from ...</p>",
        "id": 126692680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526555801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not for me on <code>cargo run</code> (but I'm on a rev a couple days old)</p>",
        "id": 126693674,
        "sender_full_name": "lqd",
        "timestamp": 1526557508
    },
    {
        "content": "<p>I've noticed that in general (that cargo run likes to rebuild the root crate when I don't feel it should) but not for borrow check in particular</p>",
        "id": 126694953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526559852
    },
    {
        "content": "<p>the Mentat talk at rustconf will probably be very interesting wrt datalog :)</p>",
        "id": 126704814,
        "sender_full_name": "lqd",
        "timestamp": 1526573022
    },
    {
        "content": "<p>there should be a rustc-conf where the ones that know explain the compiler and it's ecosystem :)</p>",
        "id": 126705539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526574149
    },
    {
        "content": "<p>that would be super cool</p>",
        "id": 126705546,
        "sender_full_name": "qmx",
        "timestamp": 1526574179
    },
    {
        "content": "<p>some days ago we were talking about rustc compile times</p>",
        "id": 126729068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526611874
    },
    {
        "content": "<p>I did the full thing, without build directory</p>",
        "id": 126729072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526611889
    },
    {
        "content": "<p>it took on my machine 145 minutes</p>",
        "id": 126729073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526611901
    },
    {
        "content": "<p>I was unplugged, unsure if my OS has something configured that could have slowed down or something</p>",
        "id": 126729120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526611972
    },
    {
        "content": "<p>will try again tomorrow to see this</p>",
        "id": 126729121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526611981
    },
    {
        "content": "<p>Has anything changed since I took a break that would cause bootstrap to fail with <code>lldb --version</code>? Happening on existing cloned repos when I pull and with new clones.</p>",
        "id": 126748518,
        "sender_full_name": "davidtwco",
        "timestamp": 1526649253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;&quot;lldb&quot; &quot;--version&quot; failed Output { status: ExitStatus(ExitStatus(32512)), stdout: &quot;&quot;, stderr: &quot;&quot; }&#39;, bootstrap/sanity.rs:243:24\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</pre></div>",
        "id": 126749905,
        "sender_full_name": "davidtwco",
        "timestamp": 1526650654
    },
    {
        "content": "<p>uh...</p>",
        "id": 126749978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650711
    },
    {
        "content": "<p>I have no idea :)</p>",
        "id": 126749980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650715
    },
    {
        "content": "<p>I will have some time on my hands after work today/this weekend. I saw that there were a couple of AIs from the \"more future plans\" thread, what would be the most useful thing for me to work on from there?</p>",
        "id": 126755968,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526658460
    },
    {
        "content": "<p>\"AI\"?</p>",
        "id": 126755977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658476
    },
    {
        "content": "<p>Err, action item</p>",
        "id": 126756020,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526658489
    },
    {
        "content": "<p>Sorry, jargon has permeated my brain</p>",
        "id": 126756042,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526658510
    },
    {
        "content": "<p>ha</p>",
        "id": 126756058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658536
    },
    {
        "content": "<p>I agree there are some distinct action items</p>",
        "id": 126756067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658547
    },
    {
        "content": "<p>I'm feeling a bit disorganized just now</p>",
        "id": 126756071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658550
    },
    {
        "content": "<p>I will try to write a kind of plan on an issue later today though</p>",
        "id": 126756077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658556
    },
    {
        "content": "<p>Sounds good, I'm not free until 6 or 7 PDT anyway</p>",
        "id": 126756163,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526658690
    },
    {
        "content": "<p>Just wanted to get the ball rolling a bit <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 126756170,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526658709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you happen to know if there's a NLL test for \"recursive mutable borrows\"?</p>\n<p>Specifically, this code fails pre-NLL and works post-NLL</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Link</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">next</span>: <span class=\"nc\">Link</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Recursive</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">root</span>: <span class=\"nc\">Link</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Recursive</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">back</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Link</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">anchor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anchor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">anchor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">anchor</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>It's quite a popular Stack Overflow question, so I think it's worth pinning down with a test.</p>",
        "id": 126757714,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526660732
    },
    {
        "content": "<p>I believe there is a test for that, yes, but I don't know the name off hand</p>",
        "id": 126758954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662671
    },
    {
        "content": "<p>Just watching that video - very helpful! Code walkthroughs like that are something we should do more of.</p>",
        "id": 126761456,
        "sender_full_name": "davidtwco",
        "timestamp": 1526666019
    },
    {
        "content": "<p>I want to start doing it more often. I should make a little YouTube channel or something. If you're interested in being a guinea pig, let me know :)</p>",
        "id": 126761694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526666394
    },
    {
        "content": "<p>I'd be up for being a guinea pig.</p>",
        "id": 126761752,
        "sender_full_name": "davidtwco",
        "timestamp": 1526666418
    },
    {
        "content": "<p>gotta figure out what to walk through I suppose :)</p>",
        "id": 126762314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667348
    },
    {
        "content": "<p>we could try to look at that perf problem I was talking about earlier</p>",
        "id": 126762316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667354
    },
    {
        "content": "<p>Yeah, that would be good, I'm still not all that sure what specific thing I can be digging into.</p>",
        "id": 126762372,
        "sender_full_name": "davidtwco",
        "timestamp": 1526667410
    },
    {
        "content": "<p>hmm — want to try that shortly?</p>",
        "id": 126762583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667698
    },
    {
        "content": "<p>like, in 30min to an hour or so?</p>",
        "id": 126762587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667707
    },
    {
        "content": "<p>Yeah, sure.</p>",
        "id": 126762629,
        "sender_full_name": "davidtwco",
        "timestamp": 1526667724
    },
    {
        "content": "<p>ok, maybe on the hour? (that is, 3pm my time — probably 8pm yours?) I actually could do it whenever I suppose</p>",
        "id": 126762663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667822
    },
    {
        "content": "<p>I'm free for the rest of the day, whenever suits you.</p>",
        "id": 126762703,
        "sender_full_name": "davidtwco",
        "timestamp": 1526667844
    },
    {
        "content": "<p>if it works for you, how about in 5 minutes? :)</p>",
        "id": 126762709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667854
    },
    {
        "content": "<p>I'll just go find a room</p>",
        "id": 126762711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667856
    },
    {
        "content": "<p>Sure.</p>",
        "id": 126762728,
        "sender_full_name": "davidtwco",
        "timestamp": 1526667896
    },
    {
        "content": "<p>Should <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> have <code>#![feature(nll)]</code> enabled? I think so. Full Ouroboros.</p>",
        "id": 126836057,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526831872
    },
    {
        "content": "<p>Do this means downstream datafrog users would not be able to compile it with stable?</p>",
        "id": 126836313,
        "sender_full_name": "qmx",
        "timestamp": 1526832479
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just noticed: back in December ariel added the <code>fn before_statement_effect</code> and <code>fn before_terminator_effect</code> stuff. But as far as I can telll, a later PR by <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span>  recreated those same effects (which is to call <code>kill_loans_out_of_scope_at</code> at the start of <code>fn statement_effect</code> and <code>fn terminator_effect</code>.</p>",
        "id": 126869852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905577
    },
    {
        "content": "<p>ah, interesting. Perhaps a sort of race condition.</p>",
        "id": 126869880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905655
    },
    {
        "content": "<p>So that raises some questions. E.g. do we still need <code>fn before_foo_effect</code> in the dataflow API? And how much efficiency are we losing by having those extra calls to <code>kill_loans_out_of_scope_at</code>? Anyway I will investigate further. Its possible I've misunderstood something.</p>",
        "id": 126869881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905655
    },
    {
        "content": "<p>Oh and I probably should update my repo before I draw any firm conclusions.</p>",
        "id": 126869882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905674
    },
    {
        "content": "<p>yes we need it</p>",
        "id": 126869883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905677
    },
    {
        "content": "<p>I think what we <em>don't</em> need is the second call to <code>kill_loans_out_of_scope</code></p>",
        "id": 126869921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905686
    },
    {
        "content": "<p>If we need it I don't see where we are currently using it</p>",
        "id": 126869922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905686
    },
    {
        "content": "<p>I already was talking to <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> about removing it</p>",
        "id": 126869925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905710
    },
    {
        "content": "<p>(in the sense of, I don't see where we currently observe its effect)</p>",
        "id": 126869926,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905712
    },
    {
        "content": "<p>Anyway what brought me to investigate this</p>",
        "id": 126869929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905726
    },
    {
        "content": "<p>let me go double check but I believe that was important and could not be simulated with the existing <code>statement_effect</code></p>",
        "id": 126869932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905730
    },
    {
        "content": "<p>also, have you seen all the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> deveopments <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ?</p>",
        "id": 126869935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905742
    },
    {
        "content": "<p>is that I was thinking of tearing out <code>fn before_foo_effect</code>, and replacing it with new parameters to <code>fn statement_effect</code></p>",
        "id": 126869941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905748
    },
    {
        "content": "<p>There's a PR in to remove the two calls to the expensive function.</p>",
        "id": 126869947,
        "sender_full_name": "davidtwco",
        "timestamp": 1526905767
    },
    {
        "content": "<blockquote>\n<p>is that I was thinking of tearing out <code>fn before_foo_effect</code>, and replacing it with new parameters to <code>fn statement_effect</code></p>\n</blockquote>\n<p>that..hmm. that sounds strictly worse to me?</p>",
        "id": 126869951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905775
    },
    {
        "content": "<p>I guess my knee jerk reaction to a parameter is \"no\" though :)</p>",
        "id": 126869956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905784
    },
    {
        "content": "<p>something like <code>enum Offset { BeforeEntry, BetweenEvalRhsAndAssignToLHS, After }</code>, and then have <code>fn statement_effect(from: Offset, upto: Offset);</code></p>",
        "id": 126869957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905787
    },
    {
        "content": "<p>I see</p>",
        "id": 126869964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905796
    },
    {
        "content": "<p>it sounds kind of complex to reason about</p>",
        "id": 126869966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905802
    },
    {
        "content": "<p>My issue is that right now I find the specification of what <code>before_statement_effect</code> quite confusing</p>",
        "id": 126870016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905809
    },
    {
        "content": "<p>where do we use <code>After</code>?</p>",
        "id": 126870019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905812
    },
    {
        "content": "<p>I think it actually maps quite well to the concept of start and mid points</p>",
        "id": 126870025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905823
    },
    {
        "content": "<p>The intention is that the callers write down what scope of effect they are trying to capture</p>",
        "id": 126870028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905836
    },
    {
        "content": "<p><code>before_statement_effect</code> is basically the \"start\" point and <code>statement_effect</code> is the \"mid point\"</p>",
        "id": 126870029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905837
    },
    {
        "content": "<p>though really I think \"mid point\" is not the best term</p>",
        "id": 126870033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905842
    },
    {
        "content": "<p>do they want the whole effect (in which case they pass <code>from: BeforeEntry, upto: After</code></p>",
        "id": 126870034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905852
    },
    {
        "content": "<p>in that it's not a specific point, but rather a kind of \"heisenberg range\"</p>",
        "id": 126870036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905855
    },
    {
        "content": "<p>or do they want to investigate the intermediate point after the RHS has been evaluated</p>",
        "id": 126870044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905874
    },
    {
        "content": "<blockquote>\n<p>or do they want to investigate the intermediate point after the RHS has been evaluated</p>\n</blockquote>\n<p>I'm not convinced that's a meaningful thing</p>",
        "id": 126870047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905886
    },
    {
        "content": "<p>in fact, i'm pretty convinced it's not</p>",
        "id": 126870048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905891
    },
    {
        "content": "<p>or, specifically what I mean is:</p>",
        "id": 126870051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905900
    },
    {
        "content": "<p>there is no point in between evaluating the RHS and storing into the LHS</p>",
        "id": 126870055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905906
    },
    {
        "content": "<p>Because we don't write to the RHS as an atomic action?</p>",
        "id": 126870057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905908
    },
    {
        "content": "<p>those happen simultaneously</p>",
        "id": 126870058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905910
    },
    {
        "content": "<p>this is what I meant by \"heisenberg range\" above :)</p>",
        "id": 126870061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526905920
    },
    {
        "content": "<p>I suppose that is true</p>",
        "id": 126870098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905925
    },
    {
        "content": "<p>I've seen the traffic about <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> but I have not had the chance to catch up with it</p>",
        "id": 126870113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905980
    },
    {
        "content": "<p>I did see mention that it would affect whether we still need subprocess integration</p>",
        "id": 126870119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526905989
    },
    {
        "content": "<p>Anyway I do agree we need something <em>more</em>. I just don't like the current API, or at least the current specification of the current API.</p>",
        "id": 126870174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906064
    },
    {
        "content": "<p>(Which of course I should have commented on back in December, I'm not saying that I'm faultless here)</p>",
        "id": 126870190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906108
    },
    {
        "content": "<blockquote>\n<p>I did see mention that it would affect whether we still need subprocess integration</p>\n</blockquote>\n<p>yes very much</p>",
        "id": 126870260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906218
    },
    {
        "content": "<p>The other option I was considering was to replace whole-hog the uses of <code>mir::Location</code> underneath <code>rustc_mir::dataflow</code> and <code>rustc_mir::borrow_check</code> with some sort of <code>rustc_mir::dataflow::Location</code> type that would encode whether we were sitting <code>Before</code>, or <code>Amidst</code>, or <code>After</code>.</p>",
        "id": 126870276,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906250
    },
    {
        "content": "<p>but I wanted to make it easy for non-borrow-check clients to continue using dataflow. Which means giving some easy path for recreating the effect of a whole statement, without trying to model the fuzzy space modeled by <code>Mid</code> (or <code>Amidst</code>, whatever).</p>",
        "id": 126870339,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906344
    },
    {
        "content": "<p>anyway I guess I will now review the backlog to try to determine what is going on.</p>",
        "id": 126870347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526906369
    },
    {
        "content": "<p>the TL;DR is that we moved from differential-dataflow to <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> and — as a side-effect — we can now integrate polonius as a library quite easily. Probably more easily than an executable.</p>",
        "id": 126870349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906385
    },
    {
        "content": "<blockquote>\n<p>The other option I was considering was to replace whole-hog the uses of <code>mir::Location</code> underneath <code>rustc_mir::dataflow</code> and <code>rustc_mir::borrow_check</code> with some sort of <code>rustc_mir::dataflow::Location</code> type that would encode whether we were sitting <code>Before</code>, or <code>Amidst</code>, or <code>After</code>.</p>\n</blockquote>\n<p>this already exists. It's called <a href=\"https://github.com/rust-lang/rust/blob/21b536704574061cebe431582116b6f91ae5b983/src/librustc_mir/borrow_check/location.rs#L25-L28\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/21b536704574061cebe431582116b6f91ae5b983/src/librustc_mir/borrow_check/location.rs#L25-L28\"><code>LocationIndex</code></a>.</p>",
        "id": 126870490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906614
    },
    {
        "content": "<p>I want to re-iterate that I don't think we want/need an <code>After</code> point though =)</p>",
        "id": 126870554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906676
    },
    {
        "content": "<p>if your meaning is that an <code>(After, loc)</code>should be equivalent in meaning to a <code>(Before, succ(loc))</code>, then I understand that and agree it would be a redundancy</p>",
        "id": 126870890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526907130
    },
    {
        "content": "<p>yeah pretty much that</p>",
        "id": 126870892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907144
    },
    {
        "content": "<blockquote>\n<p>did we ever ended up with graphviz visualizations for facts?</p>\n</blockquote>\n<p>@qmx: to the best of my knowledge, no</p>",
        "id": 126961932,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527055278
    },
    {
        "content": "<p>not sure where i'm supposed to ask this, but what becomes of the SEME integration?</p>",
        "id": 126964932,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527061530
    },
    {
        "content": "<p>last week's meeting niko mentioned that we'll be instead moving towards implementing that as a short term solution</p>",
        "id": 126964964,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1527061562
    },
    {
        "content": "<p>I <em>think</em> at this point niko has decided that SEME would be too much effort for too little gain</p>",
        "id": 126967642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527066462
    },
    {
        "content": "<p>yep, it's optimizing something that is 0% of the profile</p>",
        "id": 126967776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527066639
    },
    {
        "content": "<p>Hey: Was part of the expected effects of NLL to actually pin down a particular destruction order for the variables in <code>let (x, y) = ...;</code> ?</p>",
        "id": 127030911,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171617
    },
    {
        "content": "<p>Historically the AST-borrowck has treated those as expiring at \"the same time\", in terms of saying e.g. if <code>y</code> is <code>Drop</code> <em>and</em> holds a borrow of <code>x</code>, that's an error. Even though technically we could allow that.</p>",
        "id": 127030950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171709
    },
    {
        "content": "<p>It seems that since MIR-borrowck operates on the control flow, it has stopped treating <em>that</em> like an error. (But having <code>x</code> be <code>Drop</code> and hold a borrow of <code>y</code> continues to be an error.</p>",
        "id": 127031002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171749
    },
    {
        "content": "<p>My question is: Do we want to try to prevent this? (not sure exactly how we would; perhaps with more FalseEdges analogous to what we did for <code>match</code> in order to keep our options open for the future...)</p>",
        "id": 127031019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171787
    },
    {
        "content": "<p>((doing that might cause code explosion though...))</p>",
        "id": 127031112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> a good point. I would be ok with pinning down a dtor order: after all, it's observable in other ways</p>",
        "id": 127031114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527171885
    },
    {
        "content": "<p>yeah the only argument I can see against it is that some people may see AST-borrowck's current strictness (of requiring separate <code>let</code> bindings when drop order matters) as a feature, not a bug...</p>",
        "id": 127031147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171939
    },
    {
        "content": "<p>(sort of like how some people like requiring <code>let mut</code> back during the mutapocalypse)</p>",
        "id": 127031161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171958
    },
    {
        "content": "<p>Though this seems somewhat less likely to actually catch bugs in the real world</p>",
        "id": 127031215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527171978
    },
    {
        "content": "<p>I guess I'll open an issue just to have something to reference from Github when having discussion in comment threads</p>",
        "id": 127031267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527172076
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/rust-lang/rust/issues/51036\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51036\">rust-lang/rust#51036</a></p>",
        "id": 127033309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527174767
    },
    {
        "content": "<p>hey niko do you have a second to double check something with me?</p>",
        "id": 127050452,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527196969
    },
    {
        "content": "<p>or maybe I'll ask Zoxc</p>",
        "id": 127050477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197025
    },
    {
        "content": "<p>the basic question is: the comments in <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/generator/dropck.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/generator/dropck.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/generator/dropck.rs</a> imply (to me) that a use-after-free was observed, or at least posited to exist</p>",
        "id": 127050536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197078
    },
    {
        "content": "<p>But I don't think it would have under Rust's semantics for drop order in <code>let (cell, mut gen);</code></p>",
        "id": 127050550,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197107
    },
    {
        "content": "<p>namely, the final comment says \"drops the RefCell and then the Ref, leading to use-after-free\"</p>",
        "id": 127050559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197130
    },
    {
        "content": "<p>but for that to happen, the drop order would need to be: drop the <code>cell</code> <em>before</em> the <code>gen</code>. And that implies the declaration should have been <code>let (mut gen, cell);</code></p>",
        "id": 127050610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not sure :)</p>",
        "id": 127050717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197360
    },
    {
        "content": "<p>okay. All I know is that if I switch the declaration order to <code>let (mut gen, cell);</code>, we start seeing the expected errors under NLL.</p>",
        "id": 127050951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527197652
    },
    {
        "content": "<p>in most of these cases NLL is correct :)</p>",
        "id": 127051065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197866
    },
    {
        "content": "<p>since it has the actual executable code to analyze...</p>",
        "id": 127051068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197871
    },
    {
        "content": "<p>...sometimes that code is odd though</p>",
        "id": 127051072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197878
    },
    {
        "content": "<p>(doens't sound like the instance here)</p>",
        "id": 127051109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197883
    },
    {
        "content": "<p>most of those cases where I am grumpy have to do with the temporaries in tail position</p>",
        "id": 127051124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527197895
    },
    {
        "content": "<p>Spoke a bit about Polonius and NLL with RalfJ at rusfest paris and they mentioned they were interested in it, relating to their Coq formal work :)</p>",
        "id": 127123727,
        "sender_full_name": "lqd",
        "timestamp": 1527330792
    },
    {
        "content": "<p>I'm jealous of you RustFesters!</p>",
        "id": 127125009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527333696
    },
    {
        "content": "<p>:)</p>",
        "id": 127127595,
        "sender_full_name": "lqd",
        "timestamp": 1527340047
    },
    {
        "content": "<p>Hello NLL friends! This generates an error with and without NLL, but we aren't sure it should. Any opinions one way or the other?:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;buf</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">buffer</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;buf</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;buf</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">parse</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;buf</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_buffer</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;buf</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;buf</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `*buffer` as mutable more than once at a time\n --&gt; src/main.rs:5:27\n  |\n5 |         let event = parse(buffer);\n  |                           ^^^^^^ mutable borrow starts here in previous iteration of loop\n  |\nnote: borrowed value must be valid for the lifetime &#39;buf as defined on the function body at 3:1...\n --&gt; src/main.rs:3:1\n  |\n3 | fn next&lt;&#39;buf&gt;(buffer: &amp;&#39;buf mut String) -&gt; &amp;&#39;buf str {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 127129397,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527343746
    },
    {
        "content": "<p>seeing as how <code>event</code> should either leave the loop or be thrown away before the next iteration</p>",
        "id": 127129462,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527343890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> this should throw an error (for now) but this error should eventually go away. This is precisely a case where \"Location sensitivity\" is needed, but we removed that feature in the name of performance — once polonius support lands, though, this code would be accepted. That may or may not be before the edition.</p>",
        "id": 127199364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527503099
    },
    {
        "content": "<p>It's actually a nice reduced test case, maybe you can file an issue? It'd be good to add to the test suite.</p>",
        "id": 127199375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527503115
    },
    {
        "content": "<blockquote>\n<p>maybe you can file an issue?</p>\n</blockquote>\n<p>Done as <a href=\"https://github.com/rust-lang/rust/issues/51132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51132\">https://github.com/rust-lang/rust/issues/51132</a>. Thanks!</p>",
        "id": 127210838,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527521726
    },
    {
        "content": "<p>Would anyone care to take a stab at what \"location sensitivity\" is in 1-3 sentences? I'm pretty sure I'd botch it. Trying to circle back to answer the original SO question that prompted that last example.</p>",
        "id": 127211065,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527522055
    },
    {
        "content": "<p>in the context of your example: the value <code>event</code> only has to have the lifetime <code>'buf</code> <em>conditionally</em> — at the return point which may or may not execute. But when we are \"location insensitive\", we just track the lifetime that <code>event</code> must have <em>anywhere</em>, without considering <em>where</em> that lifetime must hold. In this case, that means we make it hold <em>everywhere</em>, which is why you get a compilation failure.</p>",
        "id": 127211206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522295
    },
    {
        "content": "<p>I see. So the lifetime of the <code>event</code> inside the <code>if</code> block needs to be <code>'buf</code>, but the lifetime of the <code>event</code> after the <code>if</code> doesn't. Does \"anywhere\" even mean outside the loop?</p>",
        "id": 127211353,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527522566
    },
    {
        "content": "<p>yes</p>",
        "id": 127211436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522717
    },
    {
        "content": "<p>so, one subtle thing is that the current analysis is location sensitive in <em>one respect</em> —</p>",
        "id": 127211479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522737
    },
    {
        "content": "<p>where the borrow takes place</p>",
        "id": 127211480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522740
    },
    {
        "content": "<p>but the <em>length</em> of the borrow is not</p>",
        "id": 127211489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522744
    },
    {
        "content": "<p>this is why you can often fix bugs by doing</p>",
        "id": 127211491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522756
    },
    {
        "content": "<p>that is, by convering:</p>\n<div class=\"codehilite\"><pre><span></span>let p = &amp;x;\nif condition(p) {\n  return p;\n}\n</pre></div>\n\n\n<p>into:</p>\n<div class=\"codehilite\"><pre><span></span>let p = &amp;x;\nif condition(p) {\n  return &amp;x; // NB fresh borrow\n}\n</pre></div>",
        "id": 127211506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522788
    },
    {
        "content": "<blockquote>\n<p>this is why you can often fix bugs by doing</p>\n</blockquote>\n<p>er, I mean \"workaround\" the problem, really</p>",
        "id": 127211507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527522803
    },
    {
        "content": "<p>heh, I like it</p>",
        "id": 127211560,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527522849
    },
    {
        "content": "<p>does someone know how to pass <code>compare-mode=nll</code> when using <code>x.py</code>?</p>",
        "id": 127221112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> hmm I think you may have to run with <code>-v</code> and add the argument manually</p>",
        "id": 127221337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541749
    },
    {
        "content": "<p>how is that?</p>",
        "id": 127221400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541811
    },
    {
        "content": "<p><code>x.py test -v src/test/ui</code>, in other words, and then see what gets output</p>",
        "id": 127221415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541869
    },
    {
        "content": "<p>there should be a call to a <code>compiletest</code> binary somewhere</p>",
        "id": 127221420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541882
    },
    {
        "content": "<p>but maybe we added a compare-mode to <code>x.py</code></p>",
        "id": 127221422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541887
    },
    {
        "content": "<p>I can't remember</p>",
        "id": 127221423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541889
    },
    {
        "content": "<p>there's also this <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L704-L709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L704-L709\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L704-L709</a></p>",
        "id": 127221430,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541920
    },
    {
        "content": "<p>if not, we could add one readily enough...</p>",
        "id": 127221431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541921
    },
    {
        "content": "<p>but that will run on ci I guess</p>",
        "id": 127221471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541933
    },
    {
        "content": "<p>I mean I can use to quickly test it</p>",
        "id": 127221473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541942
    },
    {
        "content": "<p>better to use this one <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L649-L655\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L649-L655\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L649-L655</a> I guess</p>",
        "id": 127221477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527541965
    },
    {
        "content": "<p>oh btw there is <code>./x.py test --rustc-args</code></p>",
        "id": 127221483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527541999
    },
    {
        "content": "<p>which would prob suffice for a simple test :)</p>",
        "id": 127221484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527542003
    },
    {
        "content": "<p>you might be able to use <code>--test-args</code> for this?</p>",
        "id": 127221536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527542077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> try <code>--test-args '--compare-mode polonius'</code> and see if that works</p>",
        "id": 127221539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527542091
    },
    {
        "content": "<p>that is, <code>./x.py test src/test/ui --test-args '--compare-mode polonius'</code></p>",
        "id": 127221548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527542115
    },
    {
        "content": "<p>have already tried test-args but without quotes</p>",
        "id": 127221605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527542229
    },
    {
        "content": "<p>trying exactly that</p>",
        "id": 127221608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527542235
    },
    {
        "content": "<p>I guess we should move to #'compate-mode notes'</p>",
        "id": 127221649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1527542286
    },
    {
        "content": "<p>A side anecdote... A few minutes ago, I was surprised to learn that this code works with NLL:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">string1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">string1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">string2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;Goodbye&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">string2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>After reflection, I think my problem is that I have a preexisting mental model where the type of <code>foo</code> starts as <code>Option&lt;&amp;'static String&gt;</code>.  On the first assignment, it would be changing it's type to <code>Option&lt;&amp;'string1 String&gt;</code> and then to <code>Option&lt;&amp;'string2 String&gt;</code> at the second assignment. \"Obviously\" you can't change the type of a variable through assignment, so it makes \"intuitive\" sense that this would fail to compile.</p>\n<p>To keep my mental model where the lifetime is part of the type and a type cannot change through assignment , the lifetime inside <code>foo</code> under NLL has to be more \"fluid\". It's now always the same thing (say <code>'a</code>), but the actual value of that <code>'a</code> changes depending on which line of code we are looking at (a.k.a. what actions have occurred to  the referred-to value).</p>\n<p>Just thought I'd share; I wonder how other Rustaceans mental models compare and how they will be affected by NLL.</p>",
        "id": 127286972,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527649777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> there is actually a question mark for me about more-or-less this specific point with polonius. But a question: does it surprise you that this would work? (This works today)</p>\n<div class=\"codehilite\"><pre><span></span>let mut string1 = &quot;Hello&quot;.to_string();\nlet mut string2 = &quot;Goodbye&quot;.to_string();\nlet mut foo = None;\nfoo = Some(&amp;string1);\nfoo = Some(&amp;string2);\n</pre></div>",
        "id": 127297701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527670520
    },
    {
        "content": "<p>That said, polonius does allow you to do things that might be surprising if you think too hard about them, and I've been wondering if we should dial it back. The motivation is to support stuff like this:</p>\n<div class=\"codehilite\"><pre><span></span>let mut x = 3;\nlet mut p = &amp;x;\nlet mut q = p;\nlet mut y = 4;\np = &amp;y; // at this point, p &quot;borrows&quot; y, and q &quot;borrows&quot; x\nprintln(p);\ny += 1; // key point: p is no longer in use, so y is not borrowed\nprontln(q);\n</pre></div>",
        "id": 127297770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527670646
    },
    {
        "content": "<p>But as a kind of side-effect we wind up permitting stuff like this, or at least we could if we are not careful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// old value, and hence old regions, of `p` are not important</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 127297817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527670689
    },
    {
        "content": "<p>I've been meaning to write up a blog post trying to dive into this specific point and see if we can draw a better line about which to support and which not.</p>",
        "id": 127297820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527670714
    },
    {
        "content": "<p>alright I was looking at the \"-Z polonius\" failures we saw earlier, and yeah for sure the Opt variant has slight differences from the Naive one</p>",
        "id": 127302164,
        "sender_full_name": "lqd",
        "timestamp": 1527678116
    },
    {
        "content": "<blockquote>\n<p>does it surprise you that this would work? (This works today)</p>\n</blockquote>\n<p>I don't feel like I am surprised by that, but it may just be because I'm used to current Rust. I think my mental model is that all the uses are scanned up-front and then a single lifetime is assigned. In that example, the type of <code>foo</code> would be <code>Option&lt;&amp;'string2 String&gt;</code>. <code>string1</code> can be shortened to fit that, and the implicit <code>'static</code> of the <code>None</code> can be as well.</p>",
        "id": 127302575,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527678873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would it be interesting to have this, or some of these failures, in the polonius repo, and if so, under which form ? add the facts files  in \"inputs\" (but without enabling them in the <code>tests!</code>macro), or replicate those facts in the frontend, or something else ?</p>",
        "id": 127302656,
        "sender_full_name": "lqd",
        "timestamp": 1527679033
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// old value, and hence old regions, of `p` are not important</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>What I dislike about this is that it's really obvious that the \"type\" of <code>p</code> changes through assignment. It also kind of goes against the idea I have that user-specified lifetime annotations should be \"important\" (<a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">https://github.com/rust-lang/rust/issues/47184</a>) I also understand a bit better why that issues exists to start with.</p>",
        "id": 127302722,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527679180
    },
    {
        "content": "<p>On the flip side, I can see why writing this code is super useful</p>",
        "id": 127302777,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527679219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> well, they would be \"imported\", but only at the point of the first assignment (in this case, that is at the point where fn is called). But I don't disagree.</p>",
        "id": 127305223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> probably — now that integration has landed, we should do a bit of investigation (first and foremost) into the failing tests</p>",
        "id": 127305267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683650
    },
    {
        "content": "<p>yeah that was was I doing during lunch break, investigating where naive/opt start differing in the ui test <a href=\"http://issue-31567.rs\" target=\"_blank\" title=\"http://issue-31567.rs\">issue-31567.rs</a></p>",
        "id": 127305293,
        "sender_full_name": "lqd",
        "timestamp": 1527683712
    },
    {
        "content": "<p>I suspect we can restore more intuitive behavior by tweaking the definition of <code>region_live_at</code> — for example, the regions in a variable might be live everywhere that a variable is in scope. But I don't want to do any of that until we hvae a good test suite to judge the effects.</p>",
        "id": 127305296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> do they, in fact, differ?</p>",
        "id": 127305301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683730
    },
    {
        "content": "<p>absolutely</p>",
        "id": 127305302,
        "sender_full_name": "lqd",
        "timestamp": 1527683739
    },
    {
        "content": "<p>also, do we have the ability to set the algorithm with rustc?</p>",
        "id": 127305307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683747
    },
    {
        "content": "<p>(via env var)</p>",
        "id": 127305309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683756
    },
    {
        "content": "<p>I had talked about adding that, not sure if it got done</p>",
        "id": 127305330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683762
    },
    {
        "content": "<blockquote>\n<p>absolutely</p>\n</blockquote>\n<p>interesting</p>",
        "id": 127305351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683774
    },
    {
        "content": "<p>/me has to divide how to parcel up his day today</p>",
        "id": 127305367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527683813
    },
    {
        "content": "<p>of course, that's why I was investigating this on my own first, so that you don't need to look at it yet :)</p>",
        "id": 127305380,
        "sender_full_name": "lqd",
        "timestamp": 1527683865
    },
    {
        "content": "<p>(there are a couple PRs in flight, but I feel I've seen a PR from <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> related to an env var to select the algorithm, but maybe was it just about <a href=\"https://github.com/rust-lang-nursery/polonius/pull/60/commits/02dfb90de59256974549e627acfe640230955f92\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/60/commits/02dfb90de59256974549e627acfe640230955f92\">polonius</a>)</p>",
        "id": 127305430,
        "sender_full_name": "lqd",
        "timestamp": 1527683909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this doesn't work, which seems inconsistent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">W</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"nc\">W</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 127307293,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527686559
    },
    {
        "content": "<blockquote>\n<p>(there are a couple PRs in flight, but I feel I've seen a PR from <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> related to an env var to select the algorithm, but maybe was it just about <a href=\"https://github.com/rust-lang-nursery/polonius/pull/60/commits/02dfb90de59256974549e627acfe640230955f92\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/60/commits/02dfb90de59256974549e627acfe640230955f92\">polonius</a>)</p>\n</blockquote>\n<p>Rustc has DatafrogOpt <a href=\"https://github.com/rust-lang/rust/blob/20af72b943527d584df4b99e157262f9b297b3e4/src/librustc_mir/borrow_check/nll/mod.rs#L159-L162\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/20af72b943527d584df4b99e157262f9b297b3e4/src/librustc_mir/borrow_check/nll/mod.rs#L159-L162\">hard coded</a>. We could change it to something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">algorithm</span>: <span class=\"nc\">Algorithm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">&quot;POLONIUS_ALGORITHM&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s\">&quot;DatafrogOpt&quot;</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>However, for that we need a new version of polonius-engine to be released and it probably would make sense to land first all PRs that are currently in flight.</p>",
        "id": 127307549,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1527686912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> indeed, we draw a distinction between \"overwriting the variable\" (<code>p = ...</code>) and updating part of it (<code>p.0 = ...</code>)</p>",
        "id": 127307873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527687406
    },
    {
        "content": "<p>Hm. I'll have to file that away for a future SO answer.</p>",
        "id": 127307914,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527687481
    },
    {
        "content": "<p>well, that depends on the rules we ultimately settle on, I suppose :)</p>",
        "id": 127307956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527687497
    },
    {
        "content": "<p>What's the best issue for me to pick up and start on?</p>",
        "id": 127374370,
        "sender_full_name": "davidtwco",
        "timestamp": 1527789137
    },
    {
        "content": "<p>good question...</p>",
        "id": 127374943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527789825
    },
    {
        "content": "<p>I think diagnostics + perf are still the order of the day</p>",
        "id": 127374946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527789833
    },
    {
        "content": "<p>I'm not sure within that, maybe <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> has some suggestions</p>",
        "id": 127374990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527789846
    },
    {
        "content": "<p>I was hoping to do some more perf profiling and try to generate some leads</p>",
        "id": 127374996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527789853
    },
    {
        "content": "<p>I have a new table at the bottom of <a href=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa\">https://paper.dropbox.com/doc/NLL-stderr-diagnostic-deviations-KzroSvNgQ7lip3WQyiLTa</a></p>",
        "id": 127375282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790223
    },
    {
        "content": "<p>that lists all the diagnostic issues on that page that have a github issue</p>",
        "id": 127375297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790244
    },
    {
        "content": "<p>as well as meta data: how many tests are affected by it? is there a PR to address it? and (just added) who is/was looking into it?</p>",
        "id": 127375325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790285
    },
    {
        "content": "<p>my strategy for resolving these issues</p>",
        "id": 127375377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790328
    },
    {
        "content": "<p>has been to reverse engineer how the AST borrowck generates its notes/suggestions</p>",
        "id": 127375388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790346
    },
    {
        "content": "<p>and then try to add something approximating that to MIR-borrowck. :)</p>",
        "id": 127375394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527790358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you have any suggestions for <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ?</p>",
        "id": 127376042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527791228
    },
    {
        "content": "<p>is there an \"untaken\" issue ?</p>",
        "id": 127376043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527791233
    },
    {
        "content": "<p>most are untaken AFAIK</p>",
        "id": 127376050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791243
    },
    {
        "content": "<p>I added a column to try to track that</p>",
        "id": 127376055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791250
    },
    {
        "content": "<p>but the best thing</p>",
        "id": 127376067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791270
    },
    {
        "content": "<p>...</p>",
        "id": 127376069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791272
    },
    {
        "content": "<p>might be for me to first skim through</p>",
        "id": 127376074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791278
    },
    {
        "content": "<p>to make some guess as to which ones are good starter issues, maybe</p>",
        "id": 127376117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791290
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 127376176,
        "sender_full_name": "davidtwco",
        "timestamp": 1527791379
    },
    {
        "content": "<p>hey actually <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> , I reopened <a href=\"https://github.com/rust-lang/rust/issues/46983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46983\">https://github.com/rust-lang/rust/issues/46983</a></p>",
        "id": 127376786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527791996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so that might be a great place to start, since you're already familiar with it</p>",
        "id": 127376838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1527792007
    },
    {
        "content": "<p>Oh yeah, forgot I saw that email, will look into that.</p>",
        "id": 127376858,
        "sender_full_name": "davidtwco",
        "timestamp": 1527792043
    },
    {
        "content": "<p>boooring. where's all the hard work everyone else is doing for me to watch. <span class=\"emoji emoji-1f607\" title=\"innocent\">:innocent:</span></p>",
        "id": 127506334,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528039863
    },
    {
        "content": "<p>clearly we each need to make a Twitch channel</p>",
        "id": 127511165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528050871
    },
    {
        "content": "<p>I'd be down for a \"Twitch codes the borrow checker\" stream. Especially to watch the competing masses construct complex code</p>",
        "id": 127515967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528061655
    },
    {
        "content": "<p>there was a twitch stream of coding rust in ruby using helix over the weekend</p>",
        "id": 127516362,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1528062569
    },
    {
        "content": "<p>is there somebody else on Linux getting cannot allocate memory errors when compiling rustc?</p>",
        "id": 127620960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528230589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: could not exec the linker `cc`\n  |\n  = note: Cannot allocate memory (os error 12)\n  = note: &quot;cc&quot; &quot;-Wl,--as-needed&quot; &quot;-Wl,-z,noexecstack&quot; &quot;-m64&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc0-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc1-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc10-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc11-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc12-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc13-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc14-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc15-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc2-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc3-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc4-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc5-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc6-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc7-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc8-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.rustc9-b84aba51d8fa261656fb8626e42ec5b7.rs.rcgu.o&quot; &quot;-o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc-e895ca9e7240a850.so&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.crate.metadata.rcgu.o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/rustc-e895ca9e7240a850.crate.allocator.rcgu.o&quot; &quot;-Wl,-z,relro,-z,now&quot; &quot;-Wl,-O1&quot; &quot;-nodefaultlibs&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/release/deps&quot; &quot;-L&quot; &quot;/usr/lib&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/backtrace-sys-e9110a0f73074a74/out&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/miniz-sys-a6962d6eb47c5537/out&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-l&quot; &quot;test-818ff740b2707f00&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-l&quot; &quot;term-b839a5796ea44350&quot; &quot;-Wl,-Bstatic&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libflate2-c17c83ac42687712.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libminiz_sys-9d2624e9eb4a622b.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libbacktrace-a35747a5a8069ba9.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libbacktrace_sys-1322fd8632ba970e.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/librustc_demangle-b3681afb8e962366.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/librustc_apfloat-80c82ead1538fe96.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libchalk_engine-58cfea5e91374964.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libchalk_macros-aad115bd8a7dd7b8.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/liblazy_static-51c2a57e338b5928.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-Wl,-Bdynamic&quot; &quot;-l&quot; &quot;proc_macro-bfb43a03f28a1a2b&quot; &quot;-Wl,-Bstatic&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libjobserver-0f76c961320be96e.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-Wl,-Bdynamic&quot; &quot;-l&quot; &quot;syntax-d3b388d855044135&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;rustc_errors-a62036a28f5fe0d1&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;syntax_pos-2a0bc4bd5ca0d03f&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;rustc_target-14ad2d7f44b20bbc&quot; &quot;-Wl,-Bstatic&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libpolonius_engine-73a5ff10d0da308d.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-Wl,--whole-archive&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libdatafrog-6bd5fdf8a4c09e7e.rlib&quot; &quot;-Wl,--no-whole-archive&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-Wl,-Bdynamic&quot; &quot;-l&quot; &quot;graphviz-c0b3d3295583df0b&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;fmt_macros-05d9a5117f1b8b6a&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;arena-268a49b49dfb8f2f&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;rustc_data_structures-d03d75bec68473fe&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;rustc_cratesio_shim-e967eee6857a2363&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-l&quot; &quot;serialize-b1c71ab5580e556c&quot; &quot;-Wl,--start-group&quot; &quot;-L&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-l&quot; &quot;std-267ac0a0e10e341c&quot; &quot;-Wl,--end-group&quot; &quot;-Wl,-Bstatic&quot; &quot;/tmp/rustc.vzQhQqLNNJtM/libcompiler_builtins-371c588c1a3805de.rlib&quot; &quot;-Wl,-Bdynamic&quot; &quot;-l&quot; &quot;unwind&quot; &quot;-l&quot; &quot;util&quot; &quot;-l&quot; &quot;util&quot; &quot;-l&quot; &quot;dl&quot; &quot;-l&quot; &quot;rt&quot; &quot;-l&quot; &quot;pthread&quot; &quot;-l&quot; &quot;gcc_s&quot; &quot;-l&quot; &quot;c&quot; &quot;-l&quot; &quot;m&quot; &quot;-l&quot; &quot;rt&quot; &quot;-l&quot; &quot;pthread&quot; &quot;-l&quot; &quot;util&quot; &quot;-l&quot; &quot;util&quot; &quot;-shared&quot; &quot;-Wl,-rpath,$ORIGIN/../lib&quot;\n\nerror: aborting due to previous error\n\nerror: Could not compile `rustc`.\n</pre></div>",
        "id": 127620964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528230595
    },
    {
        "content": "<p>it's happening me following <a href=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\">https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e</a></p>",
        "id": 127621032,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528230617
    },
    {
        "content": "<p>8GB of RAM here</p>",
        "id": 127621035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528230633
    },
    {
        "content": "<p>:P</p>",
        "id": 127621036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528230634
    },
    {
        "content": "<p>At this point, people should probably consider anything assigned to me \"soft unassigned.\" I'll be around on Zulip and IRC to answer questions, but realistically I only have about an hour a day to work on side projects and that's just not enough time to really get in the zone with <code>rustc</code> code. I'll have more time after mid-August or so to dive back in though =D</p>",
        "id": 128031156,
        "sender_full_name": "Reed Koser",
        "timestamp": 1528925504
    },
    {
        "content": "<blockquote>\n<p>help: consider changing this to be a mutable reference: <code>&amp;mut elf</code></p>\n</blockquote>\n<p>Any idea why this message is <code>elf</code>?</p>",
        "id": 128121009,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529070970
    },
    {
        "content": "<p>I wanted to let you know that we (Uruguay) won against Egypt <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 128125230,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529076200
    },
    {
        "content": "<p>Here's the repro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll, arbitrary_self_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Combine</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Combine</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128125236,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529076207
    },
    {
        "content": "<blockquote>\n<p>I wanted to let you know that we (Uruguay) won against Egypt <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>🇺🇾</p>",
        "id": 128125297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529076261
    },
    {
        "content": "<p><span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 128125311,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529076284
    },
    {
        "content": "<p>here football is more than a passion</p>",
        "id": 128125343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529076316
    },
    {
        "content": "<p>there's no people in the street in matches like this</p>",
        "id": 128125347,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529076325
    },
    {
        "content": "<p>everyone is watching the match</p>",
        "id": 128125359,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529076348
    },
    {
        "content": "<p>haha a goal at the last minute :D</p>",
        "id": 128125435,
        "sender_full_name": "lqd",
        "timestamp": 1529076411
    },
    {
        "content": "<p><span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span> is the best way to win <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 128127309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529078831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> where are you from?</p>",
        "id": 128127315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529078839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> France</p>",
        "id": 128127322,
        "sender_full_name": "lqd",
        "timestamp": 1529078862
    },
    {
        "content": "<p>good luck!, France is a great team</p>",
        "id": 128127366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529078884
    },
    {
        "content": "<p>we like Antoine a lot, he is a bit uruguayan <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 128127378,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529078912
    },
    {
        "content": "<p>if you're really into football you probably know why :)</p>",
        "id": 128127389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529078925
    },
    {
        "content": "<p>:D good luck to you / Uruguay as well :)</p>",
        "id": 128127399,
        "sender_full_name": "lqd",
        "timestamp": 1529078947
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/rust-lang/rust/issues/51578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51578\">https://github.com/rust-lang/rust/issues/51578</a> for my elves</p>",
        "id": 128129949,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529082268
    },
    {
        "content": "<p>how can I generate the inputs for a crate?</p>",
        "id": 128172877,
        "sender_full_name": "csmoe",
        "timestamp": 1529164759
    },
    {
        "content": "<p>the doc just shows the way for single rs code</p>",
        "id": 128172926,
        "sender_full_name": "csmoe",
        "timestamp": 1529164820
    },
    {
        "content": "<p>you can also pass the flags to cargo rustc</p>",
        "id": 128195020,
        "sender_full_name": "lqd",
        "timestamp": 1529217424
    },
    {
        "content": "<p>I will make a PR to add that to the readme</p>",
        "id": 128195553,
        "sender_full_name": "lqd",
        "timestamp": 1529218798
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/71\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/71\">https://github.com/rust-lang-nursery/polonius/pull/71</a></p>",
        "id": 128195908,
        "sender_full_name": "lqd",
        "timestamp": 1529219610
    },
    {
        "content": "<p>@lqd thank you :)</p>",
        "id": 128196331,
        "sender_full_name": "csmoe",
        "timestamp": 1529220605
    },
    {
        "content": "<p>np</p>",
        "id": 128198413,
        "sender_full_name": "lqd",
        "timestamp": 1529225950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> the “elf” thing is probably due to a royal mess of a hack in check_access_permissions which PR 51275 does a big rewrite of</p>",
        "id": 128224248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286263
    },
    {
        "content": "<p>I will need to look into how that PR handles your test case</p>",
        "id": 128224250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> cool. Then you get a free bug to close :-)</p>",
        "id": 128224271,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529286335
    },
    {
        "content": "<p>Which is now at 18x <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 128224322,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529286372
    },
    {
        "content": "<p>But it’s code that looks like this:</p>",
        "id": 128224360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286447
    },
    {
        "content": "<p>if let Ok(src) =<br>\n                                    self.tcx.sess.codemap().span_to_snippet(sp) {<br>\n                                        to_suggest_span = src[1..].to_string();<br>\n                                };</p>",
        "id": 128224362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286453
    },
    {
        "content": "<p>Because it assumed the first character was a ‘&amp;’ that it was chopping off</p>",
        "id": 128224412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286501
    },
    {
        "content": "<p>I actually ended deciding to keep a similar strategy, rather than trying to reconstruct the type as the user wrote it. But I should probably check or at least assert that the first character actually <em>is</em> a ‘&amp;’</p>",
        "id": 128224436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1529286582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the span can be more specific to <code>self</code> instead of split the string from raw span_str</p>",
        "id": 128224582,
        "sender_full_name": "csmoe",
        "timestamp": 1529286842
    },
    {
        "content": "<blockquote>\n<p>to_suggest_span = src[1..].to_string();</p>\n</blockquote>\n<p>I kind of figured it was something like that, but darned if I knew where to find it.</p>",
        "id": 128225056,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529287850
    },
    {
        "content": "<p>For those us of playing along at home, what is \"mois\"?</p>",
        "id": 128452323,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529636575
    },
    {
        "content": "<p>collection of <code>MoveOutIndex</code> <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 128452753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1529637588
    },
    {
        "content": "<p>I was wrong. My guess was \"method of interest\"</p>",
        "id": 128489892,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529696344
    },
    {
        "content": "<p>Thought experiment: does the MIR-based borrowck remove the need for (mutable?) reborrowing?</p>",
        "id": 128579778,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529895164
    },
    {
        "content": "<p>There are now <a href=\"https://stackoverflow.com/questions/linked/50251487?lq=1\" target=\"_blank\" title=\"https://stackoverflow.com/questions/linked/50251487?lq=1\">24 questions linked to/from What are non-lexical lifetimes?</a>, which is a rough count of \"solved by NLL\" questions that I've touched in the last ~1.5 month</p>",
        "id": 128609878,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529945047
    },
    {
        "content": "<blockquote>\n<p>Thought experiment: does the MIR-based borrowck remove the need for (mutable?) reborrowing?</p>\n</blockquote>\n<p>I do not believe so. =) I mean when you do <code>let bar: &amp;mut X; foo(bar)</code>, you still don't want to <em>move</em> <code>bar</code> -- that requires reborrowing</p>",
        "id": 128615122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951222
    },
    {
        "content": "<p>put another way, reborrowing occurs before MIR borrowck enters the picture (during MIR lowering)</p>",
        "id": 128615136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951236
    },
    {
        "content": "<p>Yeah, that makes sense. Are there some cases where reborrowing is used to \"trick\" the borrow checker?</p>",
        "id": 128616169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529952514
    },
    {
        "content": "<p>The context was <a href=\"https://stackoverflow.com/q/51015503/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/51015503/155423\">https://stackoverflow.com/q/51015503/155423</a> / <a href=\"https://stackoverflow.com/q/45095523/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/45095523/155423\">https://stackoverflow.com/q/45095523/155423</a>, but I don't know why the OP actually needed the code in question</p>",
        "id": 128616260,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1529952609
    },
    {
        "content": "<p>do we already track this NLL ICE ? <a href=\"https://github.com/rust-lang/rust/issues/51348#issuecomment-400398622\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51348#issuecomment-400398622\">https://github.com/rust-lang/rust/issues/51348#issuecomment-400398622</a></p>",
        "id": 128670420,
        "sender_full_name": "lqd",
        "timestamp": 1530036471
    },
    {
        "content": "<p>I'm not really aware of it</p>",
        "id": 128671876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038074
    },
    {
        "content": "<p>one thing I wanted to do was to start paying more attention to ICEs and soundness bugs</p>",
        "id": 128671884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038082
    },
    {
        "content": "<p>though I feel like performance + diagnostics are not <em>quite</em> there yet</p>",
        "id": 128671891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038089
    },
    {
        "content": "<p>but I'm worried about neglecting those categories too much :)</p>",
        "id": 128671894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038100
    },
    {
        "content": "<p>agreed :) also why it's indeed a good idea to check bootstrapping + crater soon</p>",
        "id": 128671915,
        "sender_full_name": "lqd",
        "timestamp": 1530038127
    },
    {
        "content": "<p>\"are _not quite_ there yet\" you mean ?</p>",
        "id": 128671967,
        "sender_full_name": "lqd",
        "timestamp": 1530038164
    },
    {
        "content": "<p>yes :)</p>",
        "id": 128671969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530038172
    },
    {
        "content": "<p>:)</p>",
        "id": 128671975,
        "sender_full_name": "lqd",
        "timestamp": 1530038178
    },
    {
        "content": "<p>nice, with the new issues, it looks like we can make some more performance progress soon as well</p>",
        "id": 128672500,
        "sender_full_name": "lqd",
        "timestamp": 1530038748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> re: <a href=\"https://github.com/rust-lang/rust/issues/51377#issuecomment-400420054\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51377#issuecomment-400420054\">https://github.com/rust-lang/rust/issues/51377#issuecomment-400420054</a> you mean we might need to reprofile again right ? (as #51411 has already landed)</p>",
        "id": 128673614,
        "sender_full_name": "lqd",
        "timestamp": 1530039950
    },
    {
        "content": "<p><strong><em>Before</em></strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">LastOrNot</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Last</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NotLast</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_last_or_self</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LastOrNot</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">LastOrNot</span>::<span class=\"n\">Last</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">LastOrNot</span>::<span class=\"n\">NotLast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_last</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">current</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">get_last_or_self</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">LastOrNot</span>::<span class=\"n\">Last</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">LastOrNot</span>::<span class=\"n\">NotLast</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><strong>after</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_last</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_last</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">current</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">get_last</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">current</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128752230,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530156426
    },
    {
        "content": "<p>NLL + Polonius win.</p>\n<p>### Before</p>",
        "id": 128809452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530244773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ?</p>",
        "id": 128818901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530263756
    },
    {
        "content": "<p>howdy <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>Amusingly, I was awake at 5:!5 AM my time, but not near a computer :-)</p>",
        "id": 128831242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530282780
    },
    {
        "content": "<p>I was confused because you wrote this:</p>\n<div class=\"codehilite\"><pre><span></span>NLL + Polonius win.\n\n### Before\n</pre></div>",
        "id": 128831271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530282807
    },
    {
        "content": "<p>but maybe it was just a mistake :)</p>",
        "id": 128831274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530282811
    },
    {
        "content": "<p>Huh. It <em>was</em> a mistake, but I sent <a href=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128809452\" title=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128809452\">https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128809452</a> <strong>before</strong> I sent <a href=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128752230\" title=\"#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128752230\">https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/general.20discussion/near/128752230</a></p>",
        "id": 128831430,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530282974
    },
    {
        "content": "<p>I thought that using <code>#![feature(kjhadkjdjk)]</code> reported an error...</p>",
        "id": 129047874,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530652134
    },
    {
        "content": "<p>It <em>should</em></p>",
        "id": 129048077,
        "sender_full_name": "simulacrum",
        "timestamp": 1530652346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://play.integer32.com/?gist=f903649f836e2b4dc3c0cf2e06dce93f&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.integer32.com/?gist=f903649f836e2b4dc3c0cf2e06dce93f&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.integer32.com/?gist=f903649f836e2b4dc3c0cf2e06dce93f&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 129048187,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530652460
    },
    {
        "content": "<p>Am I doing a dumb-o somewhere?</p>",
        "id": 129048199,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530652474
    },
    {
        "content": "<p>Looks like a bug to me -- I'll go run a bisection</p>",
        "id": 129048218,
        "sender_full_name": "simulacrum",
        "timestamp": 1530652502
    },
    {
        "content": "<p>I think it's kinda' been that way for a while</p>",
        "id": 129048226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530652513
    },
    {
        "content": "<p>I feel like I noticed this a while back but thought \"oh I must have remembered wrong\"</p>",
        "id": 129048236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530652528
    },
    {
        "content": "<p>I could be mistaken though</p>",
        "id": 129048239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530652532
    },
    {
        "content": "<p>I was worried that I wasn't actually invoking NLL when trying to reduce that testcase, so I threw in some junk</p>",
        "id": 129048651,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530653046
    },
    {
        "content": "<p>2017-08-11 prints a <em>warning</em> (unused or unknown feature)</p>",
        "id": 129048684,
        "sender_full_name": "simulacrum",
        "timestamp": 1530653137
    },
    {
        "content": "<p>2016-11-21 highlighted the feature name, not just the underline...</p>",
        "id": 129048830,
        "sender_full_name": "simulacrum",
        "timestamp": 1530653312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Yeah, looks like this has ~never been a thing</p>",
        "id": 129048913,
        "sender_full_name": "simulacrum",
        "timestamp": 1530653415
    },
    {
        "content": "<p>I must have remembered wrong</p>",
        "id": 129048914,
        "sender_full_name": "simulacrum",
        "timestamp": 1530653421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what happened to the warning tho?</p>",
        "id": 129048952,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530653492
    },
    {
        "content": "<p>hm, I did not attempt to bisect when it disappeared, let me do that</p>",
        "id": 129048965,
        "sender_full_name": "simulacrum",
        "timestamp": 1530653516
    },
    {
        "content": "<p>I mean, I could see non-error as a case, sure, maybe....</p>",
        "id": 129049074,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530653611
    },
    {
        "content": "<p>bisection claims 2017-09-09 is the first nightly that regressed, but I'm still trying to narrow down a specific commit</p>",
        "id": 129049386,
        "sender_full_name": "simulacrum",
        "timestamp": 1530654079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I suspect <a href=\"https://github.com/rust-lang/rust/pull/44142\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/44142\">https://github.com/rust-lang/rust/pull/44142</a> (the commit range if I'm reading it right is d93036a04 to dead08cb3).</p>",
        "id": 129049451,
        "sender_full_name": "simulacrum",
        "timestamp": 1530654191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> shall I file an issue?</p>",
        "id": 129058300,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530669494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Probably, yeah, though not urgent of course</p>",
        "id": 129058441,
        "sender_full_name": "simulacrum",
        "timestamp": 1530669759
    },
    {
        "content": "<p>Didn't we just tell everyone to go add <code>rust2018-preview</code> feature all over the place? :-)</p>",
        "id": 129058489,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530669864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Sure, but technically they'll presumably notice if they get it wrong because things won't work</p>",
        "id": 129059101,
        "sender_full_name": "simulacrum",
        "timestamp": 1530671095
    },
    {
        "content": "<p>This is <em>more urgent</em> because of that, though, yeah</p>",
        "id": 129059108,
        "sender_full_name": "simulacrum",
        "timestamp": 1530671106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What's the best issue for me to take on next?</p>",
        "id": 129151469,
        "sender_full_name": "davidtwco",
        "timestamp": 1530811628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I'm skimming the list</p>",
        "id": 129151700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530811910
    },
    {
        "content": "<p>are you interested in doing some of the region follow-up?</p>",
        "id": 129151705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530811918
    },
    {
        "content": "<p>specifically, trying to improve the \"naming\" of regions and stuff like <a href=\"https://internals.rust-lang.org/t/presenting-lifetime-inference-errors-better-in-nll/7881/14?u=nikomatsakis\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/presenting-lifetime-inference-errors-better-in-nll/7881/14?u=nikomatsakis\">we talked about here</a>?</p>",
        "id": 129151754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530811937
    },
    {
        "content": "<p>I was hoping to open some issues with mild mentoring instructions in that area</p>",
        "id": 129151759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530811946
    },
    {
        "content": "<p>Yeah, that sounds good.</p>",
        "id": 129151783,
        "sender_full_name": "davidtwco",
        "timestamp": 1530812004
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 129151792,
        "sender_full_name": "DPC",
        "timestamp": 1530812014
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> =)</p>",
        "id": 129151803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> are you ready to hack now or would it be later today?</p>",
        "id": 129151848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812046
    },
    {
        "content": "<p>I can go now.</p>",
        "id": 129151859,
        "sender_full_name": "davidtwco",
        "timestamp": 1530812059
    },
    {
        "content": "<p>let's make a topic for that I guess</p>",
        "id": 129151866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> (how goes?)</p>",
        "id": 129151887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812106
    },
    {
        "content": "<p>starting on the issue rn and i'm kinda lost after going through it earlier today <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129151966,
        "sender_full_name": "DPC",
        "timestamp": 1530812165
    },
    {
        "content": "<p>cool, let me start a topic jsut for that to help keep the messages straight</p>",
        "id": 129152077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530812278
    },
    {
        "content": "<p>sure</p>",
        "id": 129152135,
        "sender_full_name": "DPC",
        "timestamp": 1530812300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> good luck <span class=\"emoji emoji-1f1eb-1f1f7\" title=\"fr\">:fr:</span></p>",
        "id": 129202334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530884855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> haha good luck to you as well :)</p>",
        "id": 129202405,
        "sender_full_name": "lqd",
        "timestamp": 1530884901
    },
    {
        "content": "<p>:)</p>",
        "id": 129202421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530884934
    },
    {
        "content": "<p>I'm extremely nervous :P</p>",
        "id": 129202434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530884953
    },
    {
        "content": "<p>because of Cavani ?</p>",
        "id": 129202447,
        "sender_full_name": "lqd",
        "timestamp": 1530884973
    },
    {
        "content": "<p>no no, because of the match in general</p>",
        "id": 129202455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530884981
    },
    {
        "content": "<p>:)</p>",
        "id": 129202458,
        "sender_full_name": "lqd",
        "timestamp": 1530884984
    },
    {
        "content": "<p>feels like it will be tough in general for both sides :)</p>",
        "id": 129202499,
        "sender_full_name": "lqd",
        "timestamp": 1530885002
    },
    {
        "content": "<p>yeah. but without Cavani, Uruguay will find it tough</p>",
        "id": 129202528,
        "sender_full_name": "DPC",
        "timestamp": 1530885017
    },
    {
        "content": "<p>I'm not sure how people in France live this kind of matches, but here is complete craziness</p>",
        "id": 129202530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885019
    },
    {
        "content": "<p>people don't work</p>",
        "id": 129202537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885035
    },
    {
        "content": "<p>offices close</p>",
        "id": 129202539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885037
    },
    {
        "content": "<p>etc, etc</p>",
        "id": 129202543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885039
    },
    {
        "content": "<p>that's crazy</p>",
        "id": 129202561,
        "sender_full_name": "DPC",
        "timestamp": 1530885065
    },
    {
        "content": "<blockquote>\n<p>yeah. but without Cavani, Uruguay will find it tough</p>\n</blockquote>\n<p>yes, without Cavani is harder</p>",
        "id": 129202565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885066
    },
    {
        "content": "<blockquote>\n<p>that's crazy</p>\n</blockquote>\n<p>football in south america is a hard to understand passion</p>",
        "id": 129202580,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885091
    },
    {
        "content": "<p>offices don't close per se, but a lot of people watch the game instead of working</p>",
        "id": 129202586,
        "sender_full_name": "lqd",
        "timestamp": 1530885101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> where are you from?</p>",
        "id": 129202587,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885102
    },
    {
        "content": "<p>India</p>",
        "id": 129202589,
        "sender_full_name": "DPC",
        "timestamp": 1530885106
    },
    {
        "content": "<p>but yeah, at 1/4 finals people are getting passionate</p>",
        "id": 129202643,
        "sender_full_name": "lqd",
        "timestamp": 1530885140
    },
    {
        "content": "<p>yeah</p>",
        "id": 129202655,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885158
    },
    {
        "content": "<p>here there's no man that haven't played football at some point of his life</p>",
        "id": 129202667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885184
    },
    {
        "content": "<p>and woman are starting more and more to play also</p>",
        "id": 129202672,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885194
    },
    {
        "content": "<p>that's why such a small country more or less does well in the sport :)</p>",
        "id": 129202677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885213
    },
    {
        "content": "<p>3 million people lives here</p>",
        "id": 129202680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885218
    },
    {
        "content": "<p>and we have won 2 world cups and 15 south american cups (even more than Brazil and Argentina)</p>",
        "id": 129202733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885255
    },
    {
        "content": "<p>the city where I work has a bigger population than that</p>",
        "id": 129202756,
        "sender_full_name": "DPC",
        "timestamp": 1530885292
    },
    {
        "content": "<p>yes :)</p>",
        "id": 129202769,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885307
    },
    {
        "content": "<p>and 2 olympics which technically count as 2 world cups ;)</p>",
        "id": 129202786,
        "sender_full_name": "lqd",
        "timestamp": 1530885330
    },
    {
        "content": "<p>yes</p>",
        "id": 129202793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885337
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Copa_Am%C3%A9rica#Performance_by_country\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Copa_Am%C3%A9rica#Performance_by_country\">https://en.wikipedia.org/wiki/Copa_Am%C3%A9rica#Performance_by_country</a></p>",
        "id": 129202794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885338
    },
    {
        "content": "<p>we have won 15 and Brazil only 8 ;)</p>",
        "id": 129202803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885349
    },
    {
        "content": "<p>anyway, best of luck to you</p>",
        "id": 129202836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885362
    },
    {
        "content": "<p>leaving this because the game is starting</p>",
        "id": 129202855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530885373
    },
    {
        "content": "<p>:)</p>",
        "id": 129202857,
        "sender_full_name": "lqd",
        "timestamp": 1530885384
    },
    {
        "content": "<p>same here, everyone is stopping work lol</p>",
        "id": 129202859,
        "sender_full_name": "lqd",
        "timestamp": 1530885392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> congrats again, France played fantastic and Uruguay a bit bad :(</p>",
        "id": 129210127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530893216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you too, Cavani missing was very unfortunate :/ Uruguay deserved better, as they were very very good</p>",
        "id": 129210338,
        "sender_full_name": "lqd",
        "timestamp": 1530893467
    },
    {
        "content": "<p>I think we would have lost with Cavani and also with a bit of better luck</p>",
        "id": 129210366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530893522
    },
    {
        "content": "<p>I think France would have won anyway, but still here we are sad that in all the world cups we always miss the best player for key matches</p>",
        "id": 129210414,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530893568
    },
    {
        "content": "<p>definitely bad luck :/</p>",
        "id": 129210430,
        "sender_full_name": "lqd",
        "timestamp": 1530893590
    },
    {
        "content": "<p>I wanted to lose with all the team, that's the sad part but ... :/</p>",
        "id": 129210433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530893593
    },
    {
        "content": "<p>I will be supporting Uruguay in the future now that I know you :D</p>",
        "id": 129210451,
        "sender_full_name": "lqd",
        "timestamp": 1530893633
    },
    {
        "content": "<p>:D <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span></p>",
        "id": 129210604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530893765
    },
    {
        "content": "<p>congrats <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 129213569,
        "sender_full_name": "DPC",
        "timestamp": 1530897305
    },
    {
        "content": "<p>:)</p>",
        "id": 129213590,
        "sender_full_name": "lqd",
        "timestamp": 1530897330
    },
    {
        "content": "<p>I really hope y'all pull off a miracle and get Polonius as part of Rust 2018</p>",
        "id": 129371845,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168200
    },
    {
        "content": "<p>why in particular ? (it seems very unlikely right?)</p>",
        "id": 129372007,
        "sender_full_name": "lqd",
        "timestamp": 1531168328
    },
    {
        "content": "<p>I don't have as good of a sense of likely/unlikely as you do, but the reason is that I don't know that \"the public\" is going to care about the fine grained distinction that we know of.</p>",
        "id": 129372192,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168512
    },
    {
        "content": "<p>I sense that NLL is thought of as \"the thing that will make the borrow checker not reject valid programs\"</p>",
        "id": 129372219,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168556
    },
    {
        "content": "<p>oh, and Polonius would match that goal better presumably</p>",
        "id": 129372280,
        "sender_full_name": "lqd",
        "timestamp": 1531168602
    },
    {
        "content": "<p>Right, because of NLL case <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>, conditionals</p>",
        "id": 129372310,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168657
    },
    {
        "content": "<p>maybe explaining it as a series of steps towards that goal of accepting more and more versions of \"all\" valid programs ?</p>",
        "id": 129372358,
        "sender_full_name": "lqd",
        "timestamp": 1531168709
    },
    {
        "content": "<p>Perhaps, but it's tied up with this idea of the edition. What's \"the point\" of the edition if it only halfway implements NLL? ( I mean, I know there's a point, but for argument's sake )</p>",
        "id": 129372470,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168840
    },
    {
        "content": "<p>I also heard that async / await may not ship with the edition, just the keyword reservations. That seems likewise unfortunate.</p>",
        "id": 129372489,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168866
    },
    {
        "content": "<p>That's hearsay and gossip ^ so it could easily be wrong.</p>",
        "id": 129372498,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531168882
    },
    {
        "content": "<p>yeah, even though (and I could be wrong) I feel like the transition from AST borrowck to NLL is bigger than NLL to NLL 2.0/Polonius</p>",
        "id": 129372557,
        "sender_full_name": "lqd",
        "timestamp": 1531168934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> since you have a lot of experience with real world code and SO questions, do you think NLLs without Polonius would still be a \"gamechanger\" for the cases you encountered ?</p>",
        "id": 129372710,
        "sender_full_name": "lqd",
        "timestamp": 1531169138
    },
    {
        "content": "<p>These are the questions I've linked to the \"what is NLL\" question - <a href=\"https://stackoverflow.com/questions/linked/50251487?lq=1\" target=\"_blank\" title=\"https://stackoverflow.com/questions/linked/50251487?lq=1\">https://stackoverflow.com/questions/linked/50251487?lq=1</a></p>",
        "id": 129372780,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531169199
    },
    {
        "content": "<p>I think many of them will be improved with current NLL</p>",
        "id": 129372798,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531169215
    },
    {
        "content": "<p>But just a few minutes ago I had to say \"that's not the real NLL\" (referring to today's implementation)</p>",
        "id": 129372819,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531169244
    },
    {
        "content": "<p>what was the code in question ?</p>",
        "id": 129372833,
        "sender_full_name": "lqd",
        "timestamp": 1531169269
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?gist=bee131949c07b68cbae7f0ba67fc4cf6&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=bee131949c07b68cbae7f0ba67fc4cf6&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=bee131949c07b68cbae7f0ba67fc4cf6&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 129372901,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531169343
    },
    {
        "content": "<p>dayum</p>",
        "id": 129372924,
        "sender_full_name": "lqd",
        "timestamp": 1531169387
    },
    {
        "content": "<p>:/</p>",
        "id": 129373031,
        "sender_full_name": "lqd",
        "timestamp": 1531169505
    },
    {
        "content": "<p>There's also the more complicated <a href=\"https://stackoverflow.com/questions/50519147/double-mutable-borrow-error-in-a-loop-happens-even-with-nll-on\" target=\"_blank\" title=\"https://stackoverflow.com/questions/50519147/double-mutable-borrow-error-in-a-loop-happens-even-with-nll-on\">https://stackoverflow.com/questions/50519147/double-mutable-borrow-error-in-a-loop-happens-even-with-nll-on</a></p>",
        "id": 129373035,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531169515
    },
    {
        "content": "<p>I liked your good news / bad news here</p>",
        "id": 129373241,
        "sender_full_name": "lqd",
        "timestamp": 1531169718
    },
    {
        "content": "<p>I think the edition cutoff is like in a month and a half (and a bit)</p>",
        "id": 129373372,
        "sender_full_name": "lqd",
        "timestamp": 1531169831
    },
    {
        "content": "<p>Yeah, I try to give some hope to people when I tell them things they won't like <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129373886,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531170365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> one reason why its worth tying even a \"halfway-done\" version of NLL to the edition: NLL changes the semantics for how pattern variables work in match guards</p>",
        "id": 129406532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531222960
    },
    {
        "content": "<p>it does so in a way that is meant to fly under the (developer's) radar in most cases, and it is fixing a soundness bug, but it is a change to the semantics nonetheless (and not solely making more programs pass the borrow-checker)</p>",
        "id": 129406552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531223040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh, I should strive to be more clear. I do think that it's good to have them tied together, I just wish it was NLL to the max</p>",
        "id": 129409688,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531227344
    },
    {
        "content": "<p>Really, it's more of a \"I wish the edition could just be delayed a bit to fully deliver all these things together\"</p>",
        "id": 129409741,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531227402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> are we having the meeting today?</p>",
        "id": 129428578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1531249973
    },
    {
        "content": "<p>yes i am planning to do so</p>",
        "id": 129428589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531249986
    },
    {
        "content": "<p>given that Niko is not around and France is playing semis, I see this ... ahh ok ok :)</p>",
        "id": 129428593,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1531249992
    },
    {
        "content": "<p>in 17 minutes, right?</p>",
        "id": 129428594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531249993
    },
    {
        "content": "<p>yes</p>",
        "id": 129428600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1531250000
    },
    {
        "content": "<p>i'm not watching the game, though I am definitely hearing the results as they happen</p>",
        "id": 129428604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531250021
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 129428653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1531250062
    },
    {
        "content": "<p>1-0 <span class=\"emoji emoji-1f1eb-1f1f7\" title=\"fr\">:fr:</span>  ;) I'll be watching the game during the meeting :p (but participating ofc)</p>",
        "id": 129428654,
        "sender_full_name": "lqd",
        "timestamp": 1531250072
    },
    {
        "content": "<p>btw I've added my status update to the Paper</p>",
        "id": 129428676,
        "sender_full_name": "lqd",
        "timestamp": 1531250129
    },
    {
        "content": "<p>my bet was <span class=\"emoji emoji-1f1eb-1f1f7\" title=\"fr\">:fr:</span> 2 belgium 1</p>",
        "id": 129428738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1531250201
    },
    {
        "content": "<p>if we do such a thing as nominated issues there's an ICE in the just released 1.27.1 <a href=\"https://github.com/rust-lang/rust/issues/52213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52213\">https://github.com/rust-lang/rust/issues/52213</a></p>",
        "id": 129428756,
        "sender_full_name": "lqd",
        "timestamp": 1531250248
    },
    {
        "content": "<blockquote>\n<p>Really, it's more of a \"I wish the edition could just be delayed a bit to fully deliver all these things together\"</p>\n</blockquote>\n<p>My understanding of editions is that if the feature gets added after the 'edition' ships, and all the documentation is updated to reflect the change, then it will be like the feature shipped with the edition? Or will NLL 2.0 change things to have to wait until the next edition?</p>",
        "id": 129429046,
        "sender_full_name": "Niel",
        "timestamp": 1531250609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121163\">@Niel</span> my interpretation of <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> 's remarks is that they were more about getting the best initial marketing/word-of-mouth for the initial deployment of NLL. (perhaps thinking that People may not care to stick around to see if NLL 2.0 is ever successfully deployed?)</p>",
        "id": 129429209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531250851
    },
    {
        "content": "<p>Yep, mostly around the marketing aspect of it. Right now, we <em>could</em> just ship the edition with the keyword reservations and then deliver all the new functionality every 6 weeks, as usual.</p>",
        "id": 129429323,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531250996
    },
    {
        "content": "<p>@lqd I'm not sure that's an NLL regression... or rather ... did you link to the bug you meant to? That's not describing an ICE, but rather than outright soundness bug?</p>",
        "id": 129429385,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531251028
    },
    {
        "content": "<p>Hmmm, my understanding of marketing is that it takes several months to filter through the ranks. Any semantics/keywords should be in place for NLL 2.0 though.</p>",
        "id": 129429420,
        "sender_full_name": "Niel",
        "timestamp": 1531251073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I guess yeah, it's about AST borrowck and match default bindings, I was thinking maybe you would know your way around this in niko's absence</p>",
        "id": 129429435,
        "sender_full_name": "lqd",
        "timestamp": 1531251106
    },
    {
        "content": "<p>err wait not an ICE a segfault true</p>",
        "id": 129429510,
        "sender_full_name": "lqd",
        "timestamp": 1531251149
    },
    {
        "content": "<p>(and also a segfault that is only exposed by AST borrowck if I read that correctly. Its something the compiler team needs to fix, perhaps <em>I</em> need to fix, but its not necessarily something that needs this groups' eyeballs)</p>",
        "id": 129429552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531251229
    },
    {
        "content": "<p>sure, I mostly wanted to bring your attention to it as people pinged you on discord and we were about to have the meeting :)</p>",
        "id": 129429602,
        "sender_full_name": "lqd",
        "timestamp": 1531251266
    },
    {
        "content": "<p>to reset my mind from the triaging, I've made another couple of tiny polonius/<span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> PRs :)</p>",
        "id": 129487985,
        "sender_full_name": "lqd",
        "timestamp": 1531332206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  What's triaging? I've looked through the HackMD page, but can't seem to determine what exactly the purpose of the document is?</p>",
        "id": 129490912,
        "sender_full_name": "Niel",
        "timestamp": 1531335113
    },
    {
        "content": "<p>in this case it's looking at the crater run results, to decide if the errors they contain are a problem in the MIR borrowck or in the crate being tested, or if the diagnostics need work, and so on. The hackmd pages list some of these errors, with sometimes, explanations I've done, minimization of problems, or links to already known issues if the problems are indeed already filed</p>",
        "id": 129491110,
        "sender_full_name": "lqd",
        "timestamp": 1531335309
    },
    {
        "content": "<p>Interesting, sounds like repetitive work. Also perhaps a good starting point for a rustacean-shrimp?</p>",
        "id": 129491239,
        "sender_full_name": "Niel",
        "timestamp": 1531335458
    },
    {
        "content": "<p>possibly yeah, depending on the cases, sometimes it's easy to minimize</p>",
        "id": 129491309,
        "sender_full_name": "lqd",
        "timestamp": 1531335527
    },
    {
        "content": "<p>Oki. Show me tomorrow?</p>",
        "id": 129491429,
        "sender_full_name": "Niel",
        "timestamp": 1531335648
    },
    {
        "content": "<p>feel free to ask questions :) (but I'll be at work and not extremely available)</p>",
        "id": 129491526,
        "sender_full_name": "lqd",
        "timestamp": 1531335791
    },
    {
        "content": "<p>(that way I can answer async)</p>",
        "id": 129491697,
        "sender_full_name": "lqd",
        "timestamp": 1531335966
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 129491819,
        "sender_full_name": "Niel",
        "timestamp": 1531336099
    },
    {
        "content": "<p>let me know if you need a hand <span class=\"emoji emoji-270b\" title=\"hand\">:hand:</span> :)</p>",
        "id": 129492269,
        "sender_full_name": "DPC",
        "timestamp": 1531336542
    },
    {
        "content": "<p>oh but all help is very welcome for sure!</p>",
        "id": 129492344,
        "sender_full_name": "lqd",
        "timestamp": 1531336640
    },
    {
        "content": "<p>eg every crate in <a href=\"https://hackmd.io/2sR4vloZQhC8arJkFOFyLA?both\" target=\"_blank\" title=\"https://hackmd.io/2sR4vloZQhC8arJkFOFyLA?both\">https://hackmd.io/2sR4vloZQhC8arJkFOFyLA?both</a> which doesn't have a \"-&gt;\" with an explanation is one that can be triaged :)</p>",
        "id": 129492411,
        "sender_full_name": "lqd",
        "timestamp": 1531336721
    },
    {
        "content": "<p>I was being silly and with Frank's help I completed the <code>LocationInsensitive</code> <em>leapfrog</em> variant. If you combine with yesterday's PRs, on <code>clap</code> (a great case for us as it <em>passes</em> the location insensitive analysis), yesterday's best run (unstable sort, redundant indexing, no leapfrog) was 800ms to today's best of 125ms. (caveats about microbenchmarking, mistakes on my part, lack of testing, etc)</p>",
        "id": 129527600,
        "sender_full_name": "lqd",
        "timestamp": 1531390140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so it takes 15% of the time it used to? not bad!</p>",
        "id": 129535183,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531401529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> hopefully it is also, you know, ... correct <em>whistles</em></p>",
        "id": 129535250,
        "sender_full_name": "lqd",
        "timestamp": 1531401604
    },
    {
        "content": "<p>Ain't y'all get tests in there yet?</p>",
        "id": 129535960,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531402471
    },
    {
        "content": "<p>there are some, this variant has <em>one</em> test ;)</p>",
        "id": 129536088,
        "sender_full_name": "lqd",
        "timestamp": 1531402680
    },
    {
        "content": "<p>Today in Polonius™ - results on the clap benchmark: -20% in the <code>datafrogopt</code> variant, and -15% in <code>leapfrog</code> (caveat: don't forget that these \"optimized\" variants still have known bugs and probably unknown ones ;)</p>",
        "id": 129604240,
        "sender_full_name": "lqd",
        "timestamp": 1531492531
    },
    {
        "content": "<blockquote>\n<p>error[E0499]: cannot borrow <code>*self</code> as mutable more than once at a time<br>\nnote: borrowed value must be valid for the lifetime 'a as defined on the impl at 8:1...</p>\n</blockquote>",
        "id": 129616363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531504392
    },
    {
        "content": "<p>Why does that note belong with that error?</p>",
        "id": 129616378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531504402
    },
    {
        "content": "<p>Did this ever work with NLL/mir borrowck? I thought I've tried it before, but I can't find a past nightly where it did</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129699019,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1531655137
    },
    {
        "content": "<p>It seems that <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">https://github.com/rust-lang/rust/issues/45696</a> was closed, but the PR to fix it didn't actually fix it.</p>",
        "id": 129700540,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1531658390
    },
    {
        "content": "<p>Reopened <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">https://github.com/rust-lang/rust/issues/45696</a></p>",
        "id": 129709048,
        "sender_full_name": "simulacrum",
        "timestamp": 1531673792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> BTW PR <a href=\"https://github.com/rust-lang/rust/issues/52405\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52405\">#52405</a> is an epic win</p>",
        "id": 129810307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531831127
    },
    {
        "content": "<p>the <em>only</em> nitpicky question I have is whether the test file <code>mutability-errors.rs</code> should be broken up into multiple files.</p>",
        "id": 129810377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531831214
    },
    {
        "content": "<p>but at this point I'm tempted to just r+ it as is.</p>",
        "id": 129810422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531831250
    },
    {
        "content": "<p>ah but it has merge conflicts anyway, so I'll go ahead and make my nitpicky comment</p>",
        "id": 129810575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1531831449
    },
    {
        "content": "<p>wow, I was just skimming the tests. very nice indeed <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 129811021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531832102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> easy r?s :) -- <a href=\"https://github.com/rust-lang-nursery/polonius/pull/72\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/72\">https://github.com/rust-lang-nursery/polonius/pull/72</a> <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/9\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/9\">https://github.com/rust-lang-nursery/datafrog/pull/9</a></p>",
        "id": 129866365,
        "sender_full_name": "lqd",
        "timestamp": 1531913732
    },
    {
        "content": "<p>thanks <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span></p>",
        "id": 129866794,
        "sender_full_name": "lqd",
        "timestamp": 1531914216
    },
    {
        "content": "<p>(I'll space the others out during the next 10 years)</p>",
        "id": 129866880,
        "sender_full_name": "lqd",
        "timestamp": 1531914291
    },
    {
        "content": "<p>(as a summary of the many things in-flight, leapfrog + compressed cfg + etc clocks in at around 1.5s)</p>",
        "id": 129867011,
        "sender_full_name": "lqd",
        "timestamp": 1531914466
    },
    {
        "content": "<p>( for the live loans)</p>",
        "id": 129868148,
        "sender_full_name": "lqd",
        "timestamp": 1531916113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can you remind us what thats in comparison to?</p>",
        "id": 129872622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531921905
    },
    {
        "content": "<p>suffering from a million branches, but from memory the <code>naive</code> (but correct) variant is at 30s; <code>datafrogopt</code> 5-6s</p>",
        "id": 129873273,
        "sender_full_name": "lqd",
        "timestamp": 1531922577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> informs me that </p>\n<blockquote>\n<p><code>-Zpolonius</code> is completely broken atm: it doesn't report any errors.</p>\n</blockquote>\n<p>I'd selfishly like to ask that be \"fixed\" either by disabling the flag or reporting the errors ;-)</p>",
        "id": 129896187,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531948148
    },
    {
        "content": "<p>Because I've been using that to \"prove\" that some given piece of code will or won't work in the future</p>",
        "id": 129896220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531948191
    },
    {
        "content": "<p>I used to pass <code>--stage 1 --keep-stage 0</code> to make building faster, that stopped working a while ago, what's the equivalent now? - I miss building quickly.</p>",
        "id": 129954786,
        "sender_full_name": "davidtwco",
        "timestamp": 1532032550
    },
    {
        "content": "<p>I use <code>./x.py build --stage 1 -i --keep-stage 1</code> and it seems to work pretty well</p>",
        "id": 129954865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532032629
    },
    {
        "content": "<p>I don't really understand what the argument to <code>keep-stage</code> represents though :)</p>",
        "id": 129954878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532032649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would know</p>",
        "id": 129954887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532032662
    },
    {
        "content": "<p>It's somewhat unclear to everyone :)</p>",
        "id": 129954889,
        "sender_full_name": "simulacrum",
        "timestamp": 1532032664
    },
    {
        "content": "<p>I thought it meant \"don't bother rebuilding that, re-use it\", so each time I'd just rebuild stage 1 (and then the <code>--stage 1</code> was slightly redundant).</p>",
        "id": 129954944,
        "sender_full_name": "davidtwco",
        "timestamp": 1532032693
    },
    {
        "content": "<p>You probably want --keep-stage 0 without any --stage flag and then use stage2/bin/rustc</p>",
        "id": 129954953,
        "sender_full_name": "simulacrum",
        "timestamp": 1532032721
    },
    {
        "content": "<p>I assume with that it would be safe to ignore the \"warning: using potentially old...\" messages?</p>",
        "id": 129955065,
        "sender_full_name": "davidtwco",
        "timestamp": 1532032818
    },
    {
        "content": "<p>probably worth updating <a href=\"https://forge.rust-lang.org/x-py.html#other-flags\" target=\"_blank\" title=\"https://forge.rust-lang.org/x-py.html#other-flags\">this part of the forge</a> which still mentions the old flags, that's where I got them from initially.</p>",
        "id": 129955115,
        "sender_full_name": "davidtwco",
        "timestamp": 1532032881
    },
    {
        "content": "<p>It's generally safe to ignore yes, certainly for (most) NLL work</p>",
        "id": 129955452,
        "sender_full_name": "simulacrum",
        "timestamp": 1532033208
    },
    {
        "content": "<p>If I <code>x.py build</code> first without <code>-keep-stage</code> or <code>--stage</code> and then in subsequent builds use only <code>-keep-stage 0</code> then it works as expected. It seems though that if I switch to using <code>x.py check</code> (still with <code>--keep-stage 0</code>) then any subsequent <code>x.py build</code>s with <code>--keep-stage 0</code> will fail unless I do a full build without <code>--keep-stage 0</code> again. Is that intended?</p>",
        "id": 129992563,
        "sender_full_name": "davidtwco",
        "timestamp": 1532088148
    },
    {
        "content": "<p>No -- I think eddyb also mentioned that. If you could file an issue with that description that'd be great</p>",
        "id": 129995112,
        "sender_full_name": "simulacrum",
        "timestamp": 1532091413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/issues/52565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52565\">#52565</a></p>",
        "id": 129995273,
        "sender_full_name": "davidtwco",
        "timestamp": 1532091597
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 129995332,
        "sender_full_name": "simulacrum",
        "timestamp": 1532091611
    },
    {
        "content": "<p>Could someone r+ <a href=\"https://github.com/rust-lang/rust/pull/52359\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52359\">https://github.com/rust-lang/rust/pull/52359</a>, please?</p>",
        "id": 130069018,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532205456
    },
    {
        "content": "<p>Done</p>",
        "id": 130069174,
        "sender_full_name": "simulacrum",
        "timestamp": 1532205701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there any plan to make the <code>region</code> concept transparent or more friendly to ordinary users in nll error message?  lifetime is used in most error message, but some of them use <code>region</code>, and lifetime is more common in teaching Rust. for example: </p>\n<div class=\"codehilite\"><pre><span></span>  --&gt; $DIR/return-wrong-bound-region.rs:21:23\n   |\nLL |     expect_sig(|a, b| b); // ought to return `a`\n   |                 -  -  ^ free region requires that `&#39;1` must outlive `&#39;2`\n   |                 |  |\n   |                 |  lifetime `&#39;1` appears in this argument\n   |                 lifetime `&#39;2` appears in this argument\n</pre></div>",
        "id": 130210150,
        "sender_full_name": "csmoe",
        "timestamp": 1532438184
    },
    {
        "content": "<p>I don't believe the \"free region requires\" is meant to be part of the message long term</p>",
        "id": 130210169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532438211
    },
    {
        "content": "<p>I would prefer not to use the word lifetime, which I think is quite confusing for people</p>",
        "id": 130210179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532438226
    },
    {
        "content": "<p>but I haven't found a good alternative...</p>",
        "id": 130210184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532438229
    },
    {
        "content": "<p>in any case I would expect that message to say something like \"returning <code>b</code> requires that <code>'2</code> outlives <code>'1</code>\"</p>",
        "id": 130210297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532438368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It says the following with <a href=\"https://github.com/rust-lang/rust/issues/52648\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52648\">#52648</a>:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/return-wrong-bound-region.rs:21:23\n   |\nLL |     expect_sig(|a, b| b); // ought to return `a`\n   |                 -  -  ^ closure was supposed to return data with lifetime `&#39;1` but it is returning data with lifetime `&#39;2`\n   |                 |  |\n   |                 |  has type `&amp;&#39;1 i32`\n   |                 | has type `&amp;&#39;2 i32`\n</pre></div>",
        "id": 130210413,
        "sender_full_name": "davidtwco",
        "timestamp": 1532438470
    },
    {
        "content": "<blockquote>\n<p>I would prefer not to use the word lifetime, which I think is quite confusing for people</p>\n</blockquote>\n<p>I brought this up on <em>some</em> RFC, but I think that abandoning \"lifetime\" 3 years after Rust 1.0 isn't something we should do, and <em>definitely</em> not something that should be done without an RFC. Getting rid of that word (even though I agree it wasn't the best choice) would undo <em>many</em> years of documentation and so on.</p>",
        "id": 130234659,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532463780
    },
    {
        "content": "<p>I don't disagree, though I do think that if we can find better ways to explain things, we should.</p>",
        "id": 130235026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464163
    },
    {
        "content": "<p>that is, I'm not proposing a kind of \"hard\" deprecation -- in fact, i'm not really proposed a deprecation at all, since most of our messages are using the word lifetime right now</p>",
        "id": 130235039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464184
    },
    {
        "content": "<p>but if we can find ways to express what we need that avoid the term, better still</p>",
        "id": 130235045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464194
    },
    {
        "content": "<p>that said I pretty commonly hear people getting confused about the lifetime of the <em>underlying value</em> and that of the reference itself</p>",
        "id": 130235103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464220
    },
    {
        "content": "<p>Absolutely. Lifetimes in Rust means \"time at a specific memory address\". Some people are accustomed to thinking of it as \"time from construction to destruction\"</p>",
        "id": 130235254,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464335
    },
    {
        "content": "<p>Semi-related: I keep seeing <code>'1</code> in the errors. What's that about?</p>",
        "id": 130235296,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464394
    },
    {
        "content": "<p>is that a test placeholder thing?</p>",
        "id": 130235306,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464405
    },
    {
        "content": "<p>the idea is to give a name to the lifetime in question so we can talk about it later -- particularly anonymous ones</p>",
        "id": 130235405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464487
    },
    {
        "content": "<p>unclear to me still if calling it with some untypable name is a good idea or not</p>",
        "id": 130235425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464504
    },
    {
        "content": "<p>but I think it's definitely better than the messages they replace...</p>",
        "id": 130235444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464518
    },
    {
        "content": "<p>ah</p>",
        "id": 130235593,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464608
    },
    {
        "content": "<p>Had a question in SO world: Will NLL be enabled by default in Edition 2015 (at some point)? I think yes, other people feel like they've heard no.</p>",
        "id": 130235710,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464717
    },
    {
        "content": "<p>I don't think that AST borrowck can be kept around forever</p>",
        "id": 130235887,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532464834
    },
    {
        "content": "<p>That's just tempting fate, to say that ;-)</p>",
        "id": 130235917,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532464867
    },
    {
        "content": "<blockquote>\n<p>Had a question in SO world: Will NLL be enabled by default in Edition 2015 (at some point)? I think yes, other people feel like they've heard no.</p>\n</blockquote>\n<p>yes, it will.</p>",
        "id": 130236037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532464969
    },
    {
        "content": "<p>whew!</p>",
        "id": 130236139,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532465045
    },
    {
        "content": "<p>Man, who gets to <code>git rm ast-borrowck</code>...</p>",
        "id": 130236157,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532465063
    },
    {
        "content": "<p>That's my favorite type of code</p>",
        "id": 130236169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532465084
    },
    {
        "content": "<p>re:lifetimes, I usually differentiate lifetimes from scopes, in that only references have lifetimes, and the underlying value lives under a scope</p>",
        "id": 130237870,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532466572
    },
    {
        "content": "<p>i don't think it makes a lot of sense to talk about the lifetime of a concrete value (i.e. a non-reference type), since we always know it's valid to be referenced any time, except when it goes out of scope</p>",
        "id": 130237962,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532466661
    },
    {
        "content": "<blockquote>\n<p>except when it goes out of scope</p>\n</blockquote>",
        "id": 130238176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532466895
    },
    {
        "content": "<p>as in, when it is moved? (or also when its lexical scope ends)</p>",
        "id": 130238182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532466904
    },
    {
        "content": "<p>sorry I'm being obtuse.  I guess what I mean is: This is not a trivial property. which is exactly why we need to maintain dynamic drop flags</p>",
        "id": 130238255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532466965
    },
    {
        "content": "<blockquote>\n<p>when it is moved?</p>\n</blockquote>\n<p>yes</p>",
        "id": 130238360,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467095
    },
    {
        "content": "<p>i think of lifetimes as basically answering the question, \"when/where is this reference safe to be dereferenced?\"</p>",
        "id": 130238382,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467159
    },
    {
        "content": "<blockquote>\n<p>i don't think it makes a lot of sense to talk about the lifetime of a concrete value</p>\n</blockquote>\n<p>Except I think that's the intuitive meaning of the word \"lifetime\", especially for those coming from other languages. It's the time between when the value is \"born\" and when it \"dies\". That's why I think that \"lifetime\" was an unfortunate choice of word.</p>",
        "id": 130238439,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532467205
    },
    {
        "content": "<blockquote>\n<p>dynamic drop flags</p>\n</blockquote>\n<p>remember when these were part of the type, and not on the stack? good times</p>",
        "id": 130238467,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532467253
    },
    {
        "content": "<blockquote>\n<p>re:lifetimes, I usually differentiate lifetimes from scopes, in that only references have lifetimes, and the underlying value lives under a scope</p>\n</blockquote>\n<p>I've tried to push for the terminology of \"scopes\" being when dtors run etc, but it's hard</p>",
        "id": 130238586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532467354
    },
    {
        "content": "<p>English is hard</p>",
        "id": 130239050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532467810
    },
    {
        "content": "<p>well, wait till you see the chinese translation of \"scope\"</p>",
        "id": 130239087,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467862
    },
    {
        "content": "<p>there are two versions of it, one taiwanese and one mainland chinese</p>",
        "id": 130239100,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467873
    },
    {
        "content": "<p>the taiwanese version is 生存空间 -- \"living space\"</p>",
        "id": 130239171,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467927
    },
    {
        "content": "<p>the mainland chinese version is 作用域 -- \"effective region\"</p>",
        "id": 130239177,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532467945
    },
    {
        "content": "<p>i personally think the mainland chinese version captures the essence better</p>",
        "id": 130239228,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532468018
    },
    {
        "content": "<p>Oh, I wasn't meaning that there wasn't <em>harder</em> languages ;-)</p>",
        "id": 130239431,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532468184
    },
    {
        "content": "<p>i think this ties back in to how lifetimes are actually regions in academia</p>",
        "id": 130239457,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1532468224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> somehow we managed to overlook <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a> . <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> caught it but something went wrong it seems</p>",
        "id": 130271846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532521269
    },
    {
        "content": "<p>hmm.</p>",
        "id": 130271933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532521358
    },
    {
        "content": "<p>(I'm hoping its not an EP2 blocker)</p>",
        "id": 130271972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532521403
    },
    {
        "content": "<p>but it seems like it should be an RC blocker.</p>",
        "id": 130271981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532521415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">https://github.com/rust-lang/rust/issues/45696</a> .. I had kind of forgotten about dangly paths :)</p>",
        "id": 130281640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532038
    },
    {
        "content": "<p>/me tries to bring that back into cache</p>",
        "id": 130281653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532053
    },
    {
        "content": "<p>I could certainly imagine implementing a specialized variant for <code>Box</code> specifically...</p>",
        "id": 130281664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532062
    },
    {
        "content": "<blockquote>\n<p>dangly paths</p>\n</blockquote>\n<p>Please try not to use specialized compiler-writer jargon so the rest of us can follow along <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 130281780,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532532158
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>dangly paths</p>\n</blockquote>\n<p>Please try not to use specialized compiler-writer jargon so the rest of us can follow along <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>its sort of hard to avoid in this case</p>",
        "id": 130281815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532532216
    },
    {
        "content": "<p>:D</p>",
        "id": 130281867,
        "sender_full_name": "DPC",
        "timestamp": 1532532256
    },
    {
        "content": "<p>should branch a thread anyhow</p>",
        "id": 130281991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FYI, try builds should be fixed now but we're still in tree closed as macOS builds are not fixed.</p>",
        "id": 130288182,
        "sender_full_name": "simulacrum",
        "timestamp": 1532538117
    },
    {
        "content": "<p>And that was the last we ever saw of <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </p>\n<p><a href=\"https://github.com/felix-lang/felix\" target=\"_blank\" title=\"https://github.com/felix-lang/felix\">https://github.com/felix-lang/felix</a></p>",
        "id": 130589417,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532967503
    },
    {
        "content": "<p>i think if you gather all the people who wrote their own programming language, you will have enough people to host a conference <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 130596497,
        "sender_full_name": "DPC",
        "timestamp": 1532974930
    },
    {
        "content": "<blockquote>\n<p>And that was the last we ever saw of <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </p>\n<p><a href=\"https://github.com/felix-lang/felix\" target=\"_blank\" title=\"https://github.com/felix-lang/felix\">https://github.com/felix-lang/felix</a></p>\n</blockquote>\n<p>Nah, if you ever lose me, it will be to <a href=\"https://github.com/pnkfelix/larceny\" target=\"_blank\" title=\"https://github.com/pnkfelix/larceny\">Scheme</a></p>",
        "id": 130597445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532975888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> are you excited about Dan Friedman and David Christiansen's new book (dependently typed language implementation in Scheme) ? I know I am :) (should be out in a couple weeks)</p>",
        "id": 130606596,
        "sender_full_name": "lqd",
        "timestamp": 1532987441
    },
    {
        "content": "<p>Hmm  i actually was not aware of it</p>",
        "id": 130606611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532987475
    },
    {
        "content": "<p>I sort of stopped following Dan Friedman's books at some point</p>",
        "id": 130606617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532987490
    },
    {
        "content": "<p>no real good reason</p>",
        "id": 130606628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532987504
    },
    {
        "content": "<p><a href=\"https://github.com/the-little-typer/pie\" target=\"_blank\" title=\"https://github.com/the-little-typer/pie\">https://github.com/the-little-typer/pie</a> is the language they'll be making</p>",
        "id": 130606993,
        "sender_full_name": "lqd",
        "timestamp": 1532987928
    },
    {
        "content": "<p>I've heard it's going to be good from people who read it at a previous OPLSS :)</p>",
        "id": 130607073,
        "sender_full_name": "lqd",
        "timestamp": 1532988004
    },
    {
        "content": "<p>there was a question on IRC and I wasn't sure so I wanted to check here: such cases of \"early returns\" like <a href=\"https://play.rust-lang.org/?gist=8f26fab1fcf7438d2739aa5635f443bc&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=8f26fab1fcf7438d2739aa5635f443bc&amp;version=nightly&amp;mode=debug&amp;edition=2015\">this</a> are considered out of scope until Polonius ? I <em>feel</em> they are but I also remember some of the conditional control flow examples in the RFC felt somewhat similar.</p>",
        "id": 130609443,
        "sender_full_name": "lqd",
        "timestamp": 1532991330
    },
    {
        "content": "<p>yes I think that is another example of the kind of control-flow dependent case that we are punting to Polonius</p>",
        "id": 130609710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532991824
    },
    {
        "content": "<p>It would actually be nice to try to put back the slow code and let us enable it with a debug flag</p>",
        "id": 130609750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532991845
    },
    {
        "content": "<p>but then again the slow code did have a maintenance burden</p>",
        "id": 130609756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532991856
    },
    {
        "content": "<p>yeah it \"used to work\"</p>",
        "id": 130609763,
        "sender_full_name": "lqd",
        "timestamp": 1532991899
    },
    {
        "content": "<p>alright thanks a lot <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 130609781,
        "sender_full_name": "lqd",
        "timestamp": 1532991914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> any cross-function conditional borrowing, IIRC</p>",
        "id": 130610340,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532992807
    },
    {
        "content": "<p>so you can inline the function and it should work</p>",
        "id": 130610349,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532992821
    },
    {
        "content": "<p>hm interesting</p>",
        "id": 130610367,
        "sender_full_name": "lqd",
        "timestamp": 1532992894
    },
    {
        "content": "<p>I'll try it in their example just in case, thanks Jake</p>",
        "id": 130610440,
        "sender_full_name": "lqd",
        "timestamp": 1532993038
    },
    {
        "content": "<p>but we will make it happen with Polonius!</p>",
        "id": 130610482,
        "sender_full_name": "lqd",
        "timestamp": 1532993062
    },
    {
        "content": "<p>AKA <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md#problem-case-3-conditional-control-flow-across-functions\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md#problem-case-3-conditional-control-flow-across-functions\">NLL case #3</a></p>",
        "id": 130610799,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532993612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> do you think you'll have time in the near future to address the feedback on PR <a href=\"https://github.com/rust-lang/rust/issues/52959\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52959\">#52959</a> ?</p>",
        "id": 130837904,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533301821
    },
    {
        "content": "<p>also, by the way... if I <em>don't</em> manage to fix <a href=\"https://github.com/rust-lang/rust/issues/53026\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53026\">#53026</a>, it is probably the scariest thing that I've seen in a while.</p>",
        "id": 130843213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533307281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 130843221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533307291
    },
    {
        "content": "<p>but I'm hoping to identify the root cause.... well, sometime very soon</p>",
        "id": 130843233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533307309
    },
    {
        "content": "<p>I'll try to have <a href=\"https://github.com/rust-lang/rust/issues/52959\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52959\">#52959</a> ready for tonight.</p>",
        "id": 130855854,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1533322168
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/49250\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49250\">#49250</a></p>",
        "id": 130898509,
        "sender_full_name": "Charles Lew",
        "timestamp": 1533404660
    },
    {
        "content": "<p>at least Matthew's minimized repro doesn't ICE on the playground</p>",
        "id": 130898759,
        "sender_full_name": "lqd",
        "timestamp": 1533405327
    },
    {
        "content": "<p>can i ask what can polonius solve, while MIR borrowck can't?</p>",
        "id": 130966673,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533546572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I think the theory is that we’ll be able to implement <em>efficient</em> per-location outlives/subtyping atop Polonius</p>",
        "id": 130974866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533557796
    },
    {
        "content": "<p>there are also examples that polonius can solve which the older MIR borrowck formulation never code</p>",
        "id": 130975426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533558450
    },
    {
        "content": "<p>they are linked in the blog post</p>",
        "id": 130975428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533558454
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/47680#issuecomment-363131420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680#issuecomment-363131420\">here is an example</a></p>",
        "id": 130975433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533558479
    },
    {
        "content": "<p>i see a lot of issues assigned to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> on github, are they more of a placeholder or are they actually working on all of the issues assigned to them?</p>",
        "id": 131000366,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533585157
    },
    {
        "content": "<p>afaik they are working on them :) but they may be able to say more... :)</p>",
        "id": 131001264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533586177
    },
    {
        "content": "<p>I have <a href=\"https://github.com/rust-lang/rust/issues/51759\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51759\">#51759</a> as more of a bookmark. I've unassigned myself from <a href=\"https://github.com/rust-lang/rust/issues/46632\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46632\">#46632</a>. The rest are being worked on and should have PRs soon.</p>",
        "id": 131002234,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1533587075
    },
    {
        "content": "<p>i've just checked the tests in <a href=\"https://github.com/rust-lang/rust/issues/46632\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46632\">https://github.com/rust-lang/rust/issues/46632</a>, it looks like all the diagnostics on that one is properly underlining just the head of the closure, instead of the entirety of it</p>",
        "id": 131003460,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533588547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> if you are looking for a task, maybe <a href=\"https://github.com/rust-lang/rust/issues/47349\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47349\">https://github.com/rust-lang/rust/issues/47349</a>  might be good?</p>",
        "id": 131005101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590745
    },
    {
        "content": "<p>I outlined a strategy for fixing towards the end</p>",
        "id": 131005108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590753
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/47349#issuecomment-410852205\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47349#issuecomment-410852205\">https://github.com/rust-lang/rust/issues/47349#issuecomment-410852205</a></p>",
        "id": 131005113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590758
    },
    {
        "content": "<p>you've read my mind :)</p>",
        "id": 131005114,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533590759
    },
    {
        "content": "<p>I'm happy to see all the discussion is nice <code>wg-nll</code>, not in silly old <code>t-compiler</code> today. Boo compiler, yay NLL</p>",
        "id": 131009824,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533598258
    },
    {
        "content": "<p>Out of curiosity, how much difference is there between the performance of polonius and non-polonius?</p>",
        "id": 131029943,
        "sender_full_name": "davidtwco",
        "timestamp": 1533630365
    },
    {
        "content": "<p>Also, can someone take a look at why on <a href=\"https://github.com/rust-lang/rust/issues/53124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53124\">#53124</a>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s <code>r+</code> comment hasn't done anything?</p>",
        "id": 131030033,
        "sender_full_name": "davidtwco",
        "timestamp": 1533630521
    },
    {
        "content": "<blockquote>\n<p>Out of curiosity, how much difference is there between the performance of polonius and non-polonius?</p>\n</blockquote>\n<p>unknown— haven't tried polonius in a while</p>",
        "id": 131034075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635849
    },
    {
        "content": "<p>a lot of opts we have done apply equally to both</p>",
        "id": 131034078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635855
    },
    {
        "content": "<p>but not all</p>",
        "id": 131034079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533635857
    },
    {
        "content": "<p>That's why I was wondering.</p>",
        "id": 131034277,
        "sender_full_name": "davidtwco",
        "timestamp": 1533636077
    },
    {
        "content": "<p>i'm having trouble building rustc at home using a windows machine</p>",
        "id": 131192089,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533842172
    },
    {
        "content": "<p>i suspect that they're issues arising from cmake</p>",
        "id": 131192114,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533842202
    },
    {
        "content": "<p>does anyone know of such kinds of quirks with rustc?</p>",
        "id": 131192131,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533842233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> Do you have an error message on hand?</p>",
        "id": 131192274,
        "sender_full_name": "simulacrum",
        "timestamp": 1533842396
    },
    {
        "content": "<p>unfortunately not, i've since erased my build folder, upgraded my cmake to the latest version and tried to rebuild</p>",
        "id": 131194933,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533845699
    },
    {
        "content": "<p>now it's complaining about the <code>cmake</code> command not found</p>",
        "id": 131194942,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1533845715
    },
    {
        "content": "<p>while adding tests, ran into <a href=\"https://github.com/rust-lang/rust/issues/21906#issuecomment-389400841\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21906#issuecomment-389400841\">https://github.com/rust-lang/rust/issues/21906#issuecomment-389400841</a></p>",
        "id": 132107138,
        "sender_full_name": "memoryruins",
        "timestamp": 1534249084
    },
    {
        "content": "<p>is this a regression or deferred for now?</p>",
        "id": 132107142,
        "sender_full_name": "memoryruins",
        "timestamp": 1534249087
    },
    {
        "content": "<p>can you say more? what test did you add exactly?</p>",
        "id": 132108575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251043
    },
    {
        "content": "<p>in any case, the example from <a href=\"https://github.com/rust-lang/rust/issues/21906\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21906\">https://github.com/rust-lang/rust/issues/21906</a> is of the kind that polonius aims to fix</p>",
        "id": 132108589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251076
    },
    {
        "content": "<p>the tell-tale sign is the conditional return:</p>",
        "id": 132108590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251081
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">one</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"k\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132108597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251093
    },
    {
        "content": "<p>hmm</p>",
        "id": 132108604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251104
    },
    {
        "content": "<p>I wonder if we can target that with an error message</p>",
        "id": 132108608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534251108
    },
    {
        "content": "<p>Specifically the last two comments, the first one says it built in May, but the second comment said it no longer did. Ah yea, exactly that example!</p>",
        "id": 132108702,
        "sender_full_name": "memoryruins",
        "timestamp": 1534251215
    },
    {
        "content": "<p>As for the tests, no problems there. I was looking into adding the above example, then read the last two comments. Glad to hear polonius is geared for it ^^. Copying the code samples from <a href=\"https://github.com/rust-lang/rust/issues/48697\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48697\">https://github.com/rust-lang/rust/issues/48697</a> and <a href=\"https://github.com/rust-lang/rust/issues/30104\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/30104\">https://github.com/rust-lang/rust/issues/30104</a> into a compile-pass ui test</p>",
        "id": 132108964,
        "sender_full_name": "memoryruins",
        "timestamp": 1534251493
    },
    {
        "content": "<p>meant to add that these tests are originating from issues labeled <code>E-needstest</code></p>",
        "id": 132113644,
        "sender_full_name": "memoryruins",
        "timestamp": 1534256523
    },
    {
        "content": "<p>nIce! here's what the dashboard would look like when njn's PR lands: <a href=\"https://perf.rust-lang.org/nll-dashboard.html?commit=496278c16018428a506261e2ed5396168b5c17b9&amp;stat=instructions%3Au\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html?commit=496278c16018428a506261e2ed5396168b5c17b9&amp;stat=instructions%3Au\">dashboard</a></p>",
        "id": 132286404,
        "sender_full_name": "lqd",
        "timestamp": 1534489199
    },
    {
        "content": "<p>wow! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 132288587,
        "sender_full_name": "memoryruins",
        "timestamp": 1534493190
    },
    {
        "content": "<p>What was <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>' gut feeling for the cutoff?</p>",
        "id": 132304146,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534514135
    },
    {
        "content": "<p>125% ?</p>",
        "id": 132304149,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534514142
    },
    {
        "content": "<p>20% is what The Research says ... I was shooting for 10% ;)</p>",
        "id": 132304193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534514165
    },
    {
        "content": "<p>by The Research I mean what <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> cited from somewhere :)</p>",
        "id": 132304202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534514181
    },
    {
        "content": "<p>So just a few crates in the benchmark need a boost to hit that</p>",
        "id": 132304209,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534514206
    },
    {
        "content": "<p>we're getting there</p>",
        "id": 132304211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534514208
    },
    {
        "content": "<p>probably from <a href=\"https://www.safaribooksonline.com/library/view/designing-and-engineering/9780321562944/\" target=\"_blank\" title=\"https://www.safaribooksonline.com/library/view/designing-and-engineering/9780321562944/\">https://www.safaribooksonline.com/library/view/designing-and-engineering/9780321562944/</a></p>",
        "id": 132304241,
        "sender_full_name": "lqd",
        "timestamp": 1534514228
    },
    {
        "content": "<p>Course, if you factor in the savings of not having to compile a second time just to add some extra <code>{}</code> because AST borrowck...</p>",
        "id": 132304243,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534514245
    },
    {
        "content": "<p>yeah that sounds right</p>",
        "id": 132304245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534514247
    },
    {
        "content": "<p>and there are a couple nice PRs in flight from Wesley and Santiago</p>",
        "id": 132304362,
        "sender_full_name": "lqd",
        "timestamp": 1534514389
    },
    {
        "content": "<p>twist: ends up outperforming current borrowck across the board</p>",
        "id": 132334301,
        "sender_full_name": "memoryruins",
        "timestamp": 1534550661
    },
    {
        "content": "<p>already is with deep-vector :)</p>",
        "id": 132334304,
        "sender_full_name": "memoryruins",
        "timestamp": 1534550671
    },
    {
        "content": "<p>Yup, that's the one, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 132336149,
        "sender_full_name": "scottmcm",
        "timestamp": 1534554280
    },
    {
        "content": "<p>Can someone with bors permissions retry <a href=\"https://github.com/rust-lang/rust/issues/53175\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53175\">#53175</a>?</p>",
        "id": 132351276,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1534581934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> might be up :) ^</p>",
        "id": 132352197,
        "sender_full_name": "lqd",
        "timestamp": 1534583604
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span></p>",
        "id": 132354985,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1534588778
    },
    {
        "content": "<p>I just saw this piece of code in a blog post, and I don't understand why it compiles (even with NLL):</p>\n<div class=\"codehilite\"><pre><span></span>pub struct Node {\n    value: u64,\n    next: Option&lt;Box&lt;Node&gt;&gt;,\n    prev: Option&lt;Box&lt;Node&gt;&gt;,\n}\n\nfn main() {\n    // must be mut so we can modify it\n    let mut head = Node {\n        value: 5,\n        next: None,\n        prev: None,\n    };\n    let next = Node {\n        value: 6,\n        next: None,\n                     // next takes ownership of head!!!\n        prev: Some(Box::new(head)),\n    };\n    // I actually don&#39;t understand why the line below compiles.\n    // Since `head` was moved into the box, I&#39;m not sure why I can mutate it.\n    head.next = Some(Box::new(next));\n}\n</pre></div>",
        "id": 132490612,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534812630
    },
    {
        "content": "<p>oh wow, and it looks like we have an answer here: <a href=\"https://github.com/rcoh/rcoh-dot-me-v2/issues/4\" target=\"_blank\" title=\"https://github.com/rcoh/rcoh-dot-me-v2/issues/4\">https://github.com/rcoh/rcoh-dot-me-v2/issues/4</a></p>",
        "id": 132490736,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1534812845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> see also <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">https://github.com/rust-lang/rust/issues/21232</a></p>",
        "id": 132491141,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534813570
    },
    {
        "content": "<p>it's an indented behavior in current borrowck, or more specific place check <a href=\"https://github.com/rust-lang/rust/issues/52669\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52669\">https://github.com/rust-lang/rust/issues/52669</a></p>",
        "id": 132624229,
        "sender_full_name": "csmoe",
        "timestamp": 1535011858
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53643\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53643\">#53643</a> is a new contender for huge statics</p>",
        "id": 132653463,
        "sender_full_name": "lqd",
        "timestamp": 1535048813
    },
    {
        "content": "<p>I wasn't expecting to see another one of those that soon</p>",
        "id": 132653594,
        "sender_full_name": "lqd",
        "timestamp": 1535048966
    },
    {
        "content": "<p>it would be interesting to try with the SCC + 'static PR</p>",
        "id": 132653614,
        "sender_full_name": "lqd",
        "timestamp": 1535048999
    },
    {
        "content": "<p>Are those measurements with the same improvements that helped with the previous huge statics issue?</p>",
        "id": 132653618,
        "sender_full_name": "davidtwco",
        "timestamp": 1535049002
    },
    {
        "content": "<p>at least some of them I think, but not the one which halved html5ever's memory usage, it has yet to land, <a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a></p>",
        "id": 132653730,
        "sender_full_name": "lqd",
        "timestamp": 1535049081
    },
    {
        "content": "<p>oh I was profiling this in the background and didn't notice <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was doing it at the same time; I'll make a PR to add the crate to perf later then</p>",
        "id": 132699367,
        "sender_full_name": "lqd",
        "timestamp": 1535121094
    },
    {
        "content": "<p>I have a profile with the SCC+'static PR if that's useful (<a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a>)</p>",
        "id": 132699480,
        "sender_full_name": "lqd",
        "timestamp": 1535121228
    },
    {
        "content": "<p>sounds useful</p>",
        "id": 132699557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535121330
    },
    {
        "content": "<p>now that my profile on master is done, the two turn out to be so similar to the point of not being useful :3</p>",
        "id": 132701187,
        "sender_full_name": "lqd",
        "timestamp": 1535123346
    },
    {
        "content": "<p>but the PR does indeed reduce the memory for this new bench as well: from 2G+ to 1G or so. in any case <a href=\"https://www.dropbox.com/sh/9wrwrr96prdelot/AADxi83My2YgC3C7dENFET6ha?dl=0\" target=\"_blank\" title=\"https://www.dropbox.com/sh/9wrwrr96prdelot/AADxi83My2YgC3C7dENFET6ha?dl=0\">here</a> are the 2 profiles, both in text and native format for qcachegrind.</p>\n<div class=\"message_inline_ref\"><a href=\"https://www.dropbox.com/sh/9wrwrr96prdelot/AADxi83My2YgC3C7dENFET6ha?dl=0\" target=\"_blank\" title=\"ucd\"><img src=\"https://www.dropbox.com/static/images/spectrum-icons/generated/content/content-folder_dropbox-large.png\"></a><div><div class=\"message_inline_image_title\">ucd</div><desc class=\"message_inline_image_desc\"></desc></div></div>",
        "id": 132702472,
        "sender_full_name": "lqd",
        "timestamp": 1535124799
    },
    {
        "content": "<blockquote>\n<p>from 2G+ to 1G </p>\n</blockquote>\n<p>not shabby 50%</p>",
        "id": 132703895,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535126722
    },
    {
        "content": "<p>Is <code>foo.method_takes_mut_self(foo.method_takes_self())</code> handled by \"two-phase borrows\"? I've never been clear on exactly what that feature means.</p>",
        "id": 132791906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535296882
    },
    {
        "content": "<p>yes, that example is indeed the whole purpose of that feature</p>",
        "id": 132792044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535297191
    },
    {
        "content": "<p>I thought that that much was implemented, was I wrong or was it rolled back?</p>",
        "id": 132792176,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535297498
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">split_at_mut</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0502]: cannot borrow `*x` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:4:20\n  |\n4 |     x.split_at_mut(x.len() / 2);\n  |     ---------------^-----------\n  |     |              |\n  |     |              immutable borrow occurs here\n  |     mutable borrow occurs here\n  |     borrow later used here\n</pre></div>",
        "id": 132792183,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535297522
    },
    {
        "content": "<p>It is implemented. Not sure why it's not working there. Hmm. Might be worth filing an issue. I would guess it has to do with us inserting more borrows than you might expect.</p>",
        "id": 132792692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298642
    },
    {
        "content": "<p>e.g., maybe we desugar that to something like <code>&amp;mut *( &amp;mut *x )</code> or something</p>",
        "id": 132792702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298670
    },
    {
        "content": "<p>there are some tricky cases, e.g., if <code>x</code> is a <code>Vec</code>, where the thing we are invoking the method on is actually the result of auto-deref to <code>[]</code></p>",
        "id": 132792706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298693
    },
    {
        "content": "<p>this is (roughly) why things like <code>x[i] += x[j]</code> don't necessarily work</p>",
        "id": 132792708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298715
    },
    {
        "content": "<p>or at least one reason</p>",
        "id": 132792747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298727
    },
    {
        "content": "<p>it's annoying that the playground \"MIR\" option doesn't succeed if there is a borrowck error! :)</p>",
        "id": 132792752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298774
    },
    {
        "content": "<p>in any case, I am slowly becoming convincd that we should consider a more general version -- but I'd prefer to do that in the context of polonius, I <em>think</em> -- or at least to defer thinking about it until we're done with what we've got now. But we might be able to fix this <em>particular</em> example by tweaking how we desugar to try and avoid introducing unnecessary borrows (which would prob just be a general improvement)</p>",
        "id": 132792798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535298846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, clearly I'm missing something - <a href=\"https://play.rust-lang.org/?gist=ab7e2ad353951d86bc2a17eff93c1049&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=ab7e2ad353951d86bc2a17eff93c1049&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=ab7e2ad353951d86bc2a17eff93c1049&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 132792972,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299265
    },
    {
        "content": "<p>there's no possibility for desugaring here, right?</p>",
        "id": 132792978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299279
    },
    {
        "content": "<p>you had <code>#[feature(nll)]</code></p>",
        "id": 132792979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535299298
    },
    {
        "content": "<p>try <code>#![feature(nll)]</code></p>",
        "id": 132792980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535299304
    },
    {
        "content": "<p>feh</p>",
        "id": 132792981,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299320
    },
    {
        "content": "<p>that <a href=\"https://play.rust-lang.org/?gist=dad0a7efd3f68b5239985badc86e1f49&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=dad0a7efd3f68b5239985badc86e1f49&amp;version=nightly&amp;mode=debug&amp;edition=2015\">works for me</a></p>",
        "id": 132792982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535299321
    },
    {
        "content": "<p>whew</p>",
        "id": 132793022,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299330
    },
    {
        "content": "<p>and I didn't make the same mistake for <code>split_at_mut</code>, good</p>",
        "id": 132793024,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299347
    },
    {
        "content": "<p>well, sort of good :P</p>",
        "id": 132793030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535299386
    },
    {
        "content": "<p>/me would rather you had</p>",
        "id": 132793031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535299397
    },
    {
        "content": "<p>good for <em>me</em>, not for <em>Rust</em></p>",
        "id": 132793032,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299401
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53723\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53723\">https://github.com/rust-lang/rust/issues/53723</a>. I tagged as NLL but didn't go deeper. Not sure how y'all are playing your tags these days</p>",
        "id": 132793075,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535299476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as I'm idling in #rust, I realize I really appreciate that you put forth effort to consistently use \"they\" / \"them\" on the Internet. Thanks for that <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span>️</p>",
        "id": 132793602,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535300646
    },
    {
        "content": "<blockquote>\n<p>it's annoying that the playground \"MIR\" option doesn't succeed if there is a borrowck error! :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just do <code>--emit=mir</code> — is there a file output even when the compiler returns non-zero?</p>",
        "id": 132793658,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535300806
    },
    {
        "content": "<p>well, you'd have to use <code>-Zdump-mir</code></p>",
        "id": 132793662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535300824
    },
    {
        "content": "<p>which dumps the MIR at each stage</p>",
        "id": 132793665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535300834
    },
    {
        "content": "<p>you could imagine having multiple MIR options, e.g. pre-opt and post-opt</p>",
        "id": 132793669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535300856
    },
    {
        "content": "<p>not that there is much difference now</p>",
        "id": 132793670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535300866
    },
    {
        "content": "<p>but there is some</p>",
        "id": 132793671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535300867
    },
    {
        "content": "<p><code>-Z</code> so it's nightly only, yeah? And this produces an undefined number of MIR files?</p>",
        "id": 132793769,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535301043
    },
    {
        "content": "<p>yes to both</p>",
        "id": 132794472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535302598
    },
    {
        "content": "<blockquote>\n<p>&lt;Dodo&gt; <a href=\"https://play.rust-lang.org/?gist=a2cddd874bbe8af95ce9d35f98a16aa2&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=a2cddd874bbe8af95ce9d35f98a16aa2&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=a2cddd874bbe8af95ce9d35f98a16aa2&amp;version=nightly&amp;mode=debug&amp;edition=2015</a><br>\n12:17 PM such a nice message :)<br>\n12:27 PM &lt;andytoshi&gt; wow, that is a really cool message<br>\n12:28 PM very close to my IRC explanation</p>\n</blockquote>",
        "id": 132867237,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535387569
    },
    {
        "content": "<p>Yay for NLL error messages!</p>",
        "id": 132867243,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535387578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-416396531\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-416396531\">your comment</a> got cut off \"(Then we could fix\"</p>",
        "id": 132886067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535411770
    },
    {
        "content": "<p>no idea what I wanted there...</p>",
        "id": 132886431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535412489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-416669986\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-416669986\">your keyboard slipped away again</a> \"In particular, when we lower\"</p>",
        "id": 132933566,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535480481
    },
    {
        "content": "<p>test test</p>",
        "id": 132933590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480519
    },
    {
        "content": "<p>I think I just meant to kill those last two paragraphs</p>",
        "id": 132933649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480559
    },
    {
        "content": "<p>thanks for being my copy editor :P</p>",
        "id": 132933652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480561
    },
    {
        "content": "<p>Nah, if I were doing that, I'd just edit it. It's more that I'm hanging on every word!</p>",
        "id": 132933679,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535480602
    },
    {
        "content": "<p>lol</p>",
        "id": 132933787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480746
    },
    {
        "content": "<p>I'm sure I've used some horrible grammatical monstrosities as well</p>",
        "id": 132933854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480776
    },
    {
        "content": "<p>that you have graciously resisted pointing out</p>",
        "id": 132933862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535480787
    },
    {
        "content": "<p>Eh. Different forums have different needs. SO is meant to be a \"forever repository\" so I care more about that. Ditto RFCs. GitHub, URLO/IRLO are more fluid, Zulip/IRC/Discord/Gitter even more so.</p>",
        "id": 132933990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535480963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> regarding your chaining iterator, I'd say that <code>Either</code> is far more common, but your point about efficiency is interesting. Would be  neat to see how they compare</p>",
        "id": 132934067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535481027
    },
    {
        "content": "<p>Either is a more mechanical transformation, to be sure</p>",
        "id": 132934124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481112
    },
    {
        "content": "<p>I guess it will depend on how many items you are iterating over</p>",
        "id": 132934163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481124
    },
    {
        "content": "<p>since it is sort of a \"proportional\" price</p>",
        "id": 132934170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481130
    },
    {
        "content": "<p>and of course how much work you're doing</p>",
        "id": 132934181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481138
    },
    {
        "content": "<p>it seems..unlikely to really matter</p>",
        "id": 132934185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481152
    },
    {
        "content": "<p>I don't know why the \"option variant\" appeals to me so</p>",
        "id": 132934224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481187
    },
    {
        "content": "<p>I guess it's the \"flatenning\" aspect</p>",
        "id": 132934227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481193
    },
    {
        "content": "<p>I dislike ifs :P</p>",
        "id": 132934229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481195
    },
    {
        "content": "<p>/me is aware that there are actually ifs either way</p>",
        "id": 132934235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481207
    },
    {
        "content": "<p>I also haven't looked closely at thow the \"exact len iterator\" and other such traits business propagates</p>",
        "id": 132934247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481228
    },
    {
        "content": "<p>I think that is perhaps more important</p>",
        "id": 132934251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481232
    },
    {
        "content": "<p>but in principle it could be propagated either way</p>",
        "id": 132934298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481246
    },
    {
        "content": "<p>Would you care to add this variant to <a href=\"https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators\" target=\"_blank\" title=\"https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators\">https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators</a> ?</p>",
        "id": 132934311,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535481261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">iter</span>::<span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Repeat x 5 times if present, otherwise count from 1 to 5</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Not quite as pretty, if I did it right.</p>",
        "id": 132934484,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535481476
    },
    {
        "content": "<p>I'm debating if what I said about perf is really true</p>",
        "id": 132934663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481656
    },
    {
        "content": "<p>chain would need to check every <code>next</code> call for <code>None</code>, either would check the enum for every next call</p>",
        "id": 132934764,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535481753
    },
    {
        "content": "<p>(posted)</p>",
        "id": 132934861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481863
    },
    {
        "content": "<p>I left out commentary about perf</p>",
        "id": 132934865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481874
    },
    {
        "content": "<p>since it's...complex</p>",
        "id": 132934867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481882
    },
    {
        "content": "<p>might be a win, might not</p>",
        "id": 132934872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535481888
    },
    {
        "content": "<p>thanks!</p>",
        "id": 132935003,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535482044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> RE: <a href=\"https://github.com/rust-lang/rust/issues/53643#issuecomment-416923045\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53643#issuecomment-416923045\">https://github.com/rust-lang/rust/issues/53643#issuecomment-416923045</a> the memory issue is greatly reduced by <a href=\"https://github.com/rust-lang/rust/issues/53327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53327\">#53327</a> <a href=\"https://github.com/rust-lang/rust/pull/53327#issuecomment-416623319\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53327#issuecomment-416623319\">https://github.com/rust-lang/rust/pull/53327#issuecomment-416623319</a></p>",
        "id": 132991308,
        "sender_full_name": "lqd",
        "timestamp": 1535543742
    },
    {
        "content": "<p>But by “only” 50%, right?</p>",
        "id": 132991467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535543994
    },
    {
        "content": "<p>I thought Simon reported a much more grave regression</p>",
        "id": 132991524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535544021
    },
    {
        "content": "<p>67%</p>",
        "id": 132991525,
        "sender_full_name": "lqd",
        "timestamp": 1535544021
    },
    {
        "content": "<p>Hmm ok</p>",
        "id": 132991529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535544031
    },
    {
        "content": "<p>it is \"reduced\" but I wouldn't say \"fixed\" or inexistant for sure</p>",
        "id": 132991539,
        "sender_full_name": "lqd",
        "timestamp": 1535544058
    },
    {
        "content": "<p>Oh oh I now see</p>",
        "id": 132991556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535544084
    },
    {
        "content": "<p>I misread Simon’s comment</p>",
        "id": 132991559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535544097
    },
    {
        "content": "<p>ie it will go from 542,664K to 772,052K once the PR lands</p>",
        "id": 132991564,
        "sender_full_name": "lqd",
        "timestamp": 1535544104
    },
    {
        "content": "<p>He mentioned a second worse regesssion, but that was <em>before</em> the current nightly</p>",
        "id": 132991604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535544124
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 132991616,
        "sender_full_name": "lqd",
        "timestamp": 1535544148
    },
    {
        "content": "<p>(it was a nightly from mid july causing problems; which was before the other memory work for html5ever IIRC)</p>",
        "id": 132991727,
        "sender_full_name": "lqd",
        "timestamp": 1535544310
    },
    {
        "content": "<p>oh the \"new\" try blocks require edition 2018</p>",
        "id": 132995233,
        "sender_full_name": "lqd",
        "timestamp": 1535548304
    },
    {
        "content": "<p>I was confused by these errors in Polonius on edition 2015 <a href=\"https://play.rust-lang.org/?gist=77369449a113b0c04383f0365d8bf28e&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=77369449a113b0c04383f0365d8bf28e&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=77369449a113b0c04383f0365d8bf28e&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 132995285,
        "sender_full_name": "lqd",
        "timestamp": 1535548326
    },
    {
        "content": "<p>#![feature(rust_2018_preview)] is not enough ?! wat</p>",
        "id": 132995694,
        "sender_full_name": "lqd",
        "timestamp": 1535548763
    },
    {
        "content": "<p>polonius is just broken I think?</p>",
        "id": 132998042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535551299
    },
    {
        "content": "<p>opting into the edition from Cargo.toml is the only way I managed to make it work</p>",
        "id": 132998161,
        "sender_full_name": "lqd",
        "timestamp": 1535551397
    },
    {
        "content": "<p>it might also be the correct way to make it work :)</p>",
        "id": 132998184,
        "sender_full_name": "lqd",
        "timestamp": 1535551431
    },
    {
        "content": "<p>Hey everyone!</p>\n<p>I'd like to work on NLL, is there a list of starter issues where I should pick one or should I just pick an issue in <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL\">https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL</a> ? (if that's the second case, any recommendation?)</p>",
        "id": 132999174,
        "sender_full_name": "Basile Desloges",
        "timestamp": 1535552412
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"127686\">@Basile Desloges</span> ; you may want to look over the list of issues that were discussed at the meeting last night, as documented in the <a href=\"https://paper.dropbox.com/doc/Non-lexical-lifetimes-NLL-Triage-Em2cJrvxQMMFWLE7lE5Be\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Non-lexical-lifetimes-NLL-Triage-Em2cJrvxQMMFWLE7lE5Be\">triage Paper</a></p>",
        "id": 133003863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535556729
    },
    {
        "content": "<p>Thanks! I'll take a look :)</p>",
        "id": 133003938,
        "sender_full_name": "Basile Desloges",
        "timestamp": 1535556809
    },
    {
        "content": "<p>(teasing yet again, -13% in leapfrog)</p>",
        "id": 133010135,
        "sender_full_name": "lqd",
        "timestamp": 1535563573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> are things in any kind of state to compare datafrog perf vs mainline compiler?</p>",
        "id": 133013701,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535567729
    },
    {
        "content": "<p>interesting question, I don't <em>think</em> so</p>",
        "id": 133013791,
        "sender_full_name": "lqd",
        "timestamp": 1535567835
    },
    {
        "content": "<p>absolutely not</p>",
        "id": 133013808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567859
    },
    {
        "content": "<p>e.g. the subtyping code is not creating facts</p>",
        "id": 133013818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567873
    },
    {
        "content": "<p>we have to go back and try to fix up polonius support at some point...</p>",
        "id": 133013863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535567887
    },
    {
        "content": "<p>(and our best strategy in polonius itself isn't fully baked / available / 100% correct yet)</p>",
        "id": 133013899,
        "sender_full_name": "lqd",
        "timestamp": 1535567951
    },
    {
        "content": "<p>also: it doesn't build :p</p>",
        "id": 133014022,
        "sender_full_name": "lqd",
        "timestamp": 1535568105
    },
    {
        "content": "<p>if would be cool to know what needs to be done fo fix up polonius support, maybe it can be done in the background of the current work, or by new contributors etc</p>",
        "id": 133014104,
        "sender_full_name": "lqd",
        "timestamp": 1535568187
    },
    {
        "content": "<p>or by <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span></p>",
        "id": 133014110,
        "sender_full_name": "lqd",
        "timestamp": 1535568201
    },
    {
        "content": "<p>Man... there's so much lacking knowledge in this brain between here and there</p>",
        "id": 133014172,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535568255
    },
    {
        "content": "<p>I could make it build again, maybe. And last I heard, it should be easy to get all the tests passing again ;-).</p>",
        "id": 133014177,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535568280
    },
    {
        "content": "<p>(I got it to build earlier, which is where that tiny bench came from, just needs to opt in the 2018 edition, switch the catch_exprs fleature flag to try_blocks, and s/do catch/ try/g)</p>",
        "id": 133014297,
        "sender_full_name": "lqd",
        "timestamp": 1535568387
    },
    {
        "content": "<p>ran across two untagged nll/borrowcheck related issues<br>\n<a href=\"https://github.com/rust-lang/rust/issues/53528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53528\">https://github.com/rust-lang/rust/issues/53528</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/52706\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52706\">https://github.com/rust-lang/rust/issues/52706</a></p>",
        "id": 133147454,
        "sender_full_name": "memoryruins",
        "timestamp": 1535748188
    },
    {
        "content": "<p>Is everyone happy with removing the \"not reporting region error due to nll\" warning? (cf. <a href=\"https://github.com/rust-lang/rust/issues/53865\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53865\">#53865</a>)</p>",
        "id": 133192030,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535838554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is there anything I can help you with <a href=\"https://github.com/rust-lang/rust/issues/52934\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52934\">#52934</a> ?</p>",
        "id": 133306618,
        "sender_full_name": "lqd",
        "timestamp": 1536062285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> nope, I'm about done writing a test I think</p>",
        "id": 133306631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536062308
    },
    {
        "content": "<p>It just took me a little while because I wanted to try to enumerate various cases in the design space</p>",
        "id": 133306649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536062337
    },
    {
        "content": "<p>sorry I wasn't able to look at it earlier, you had done a ton of work already when I was able to look at the issue</p>",
        "id": 133306671,
        "sender_full_name": "lqd",
        "timestamp": 1536062388
    },
    {
        "content": "<p>I've now had two instances where a PR (different PRs) will build locally but on Travis fails with a lifetime error - anyone know what might be causing tha?</p>",
        "id": 133323619,
        "sender_full_name": "davidtwco",
        "timestamp": 1536081534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> usually this indicates that you need to rebase, as travis tests post-merge</p>",
        "id": 133323872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536081803
    },
    {
        "content": "<p>could it be that?</p>",
        "id": 133323877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536081809
    },
    {
        "content": "<p>It doesn't feel like it is. I've seen it <a href=\"https://github.com/rust-lang/rust/pull/53900#issuecomment-418447270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53900#issuecomment-418447270\">here</a> and <a href=\"https://github.com/rust-lang/rust/pull/53830#issuecomment-417418159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53830#issuecomment-417418159\">here (I think this was it)</a>.</p>",
        "id": 133323958,
        "sender_full_name": "davidtwco",
        "timestamp": 1536081864
    },
    {
        "content": "<p>From what I can remember, in the latter PR there, I rebased locally and still couldn't reproduce, I just best-guess moved a function call and that satisfied it.</p>",
        "id": 133324007,
        "sender_full_name": "davidtwco",
        "timestamp": 1536081922
    },
    {
        "content": "<p>They seem like the type of errors that I wouldn't expect a rebase to cause.</p>",
        "id": 133324077,
        "sender_full_name": "davidtwco",
        "timestamp": 1536081993
    },
    {
        "content": "<p>In this case it might have been a rebase issue, ignore me. <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 133324518,
        "sender_full_name": "davidtwco",
        "timestamp": 1536082499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think <a href=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-419030308\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-419030308\">https://github.com/rust-lang/rust/issues/43234#issuecomment-419030308</a> should be sent to rfcbot instead of bors</p>",
        "id": 133435514,
        "sender_full_name": "lqd",
        "timestamp": 1536232445
    },
    {
        "content": "<p>oh of course</p>",
        "id": 133435523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536232465
    },
    {
        "content": "<p>we should have numbers comparing to incremental this afternoon</p>",
        "id": 133435551,
        "sender_full_name": "lqd",
        "timestamp": 1536232518
    },
    {
        "content": "<p>hmm is rfcbot notified when messages are edited ? looks like they didn't go through to <a href=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-410263039\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-410263039\">https://github.com/rust-lang/rust/issues/43234#issuecomment-410263039</a></p>",
        "id": 133435703,
        "sender_full_name": "lqd",
        "timestamp": 1536232766
    },
    {
        "content": "<p>yeah I think I'll just delete and repost</p>",
        "id": 133435709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536232782
    },
    {
        "content": "<p>although even <em>that</em> doesn't seem to have worked?</p>",
        "id": 133435771,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536232850
    },
    {
        "content": "<p>I think it did</p>",
        "id": 133435774,
        "sender_full_name": "lqd",
        "timestamp": 1536232861
    },
    {
        "content": "<p>all concerns look resolved now</p>",
        "id": 133435786,
        "sender_full_name": "lqd",
        "timestamp": 1536232888
    },
    {
        "content": "<p>oh okay, something was not handled right in my page load</p>",
        "id": 133435788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536232892
    },
    {
        "content": "<p>and <a href=\"https://perf.rust-lang.org/compare.html?start=b0297f3043e4ed592c63c0bcc11df3655ec8cf46&amp;end=3a8b7311d49570250afdeba6b45e5e7de7bca050\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=b0297f3043e4ed592c63c0bcc11df3655ec8cf46&amp;end=3a8b7311d49570250afdeba6b45e5e7de7bca050\">here are the numbers</a> for the migrate mode</p>",
        "id": 133438777,
        "sender_full_name": "lqd",
        "timestamp": 1536237009
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> anyone want to review <a href=\"https://github.com/rust-lang/rust/issues/53948\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53948\">#53948</a> ? I think its \"trivial\" enough that anyone in the WG is qualified to look it over. (Mostly a sanity check)</p>",
        "id": 133440891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536239508
    },
    {
        "content": "<p>(i'm going to assign it to niko in the meantime, but my intention is that anyone can review it.)</p>",
        "id": 133441080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536239699
    },
    {
        "content": "<p>I got it. Thanks for the assist <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>!</p>",
        "id": 133441737,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536240450
    },
    {
        "content": "<p>thanks to <em>you</em> Wesley. :)</p>",
        "id": 133441752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536240470
    },
    {
        "content": "<p>Just looking through the <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL+milestone%3A%22Rust+2018+RC%22+no%3Aassignee\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL+milestone%3A%22Rust+2018+RC%22+no%3Aassignee\">RC milestone issues</a> - the following issues read to me as if there are unresolved discussions or something that makes it a tad unclear what needs done:</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/53114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53114\">#53114</a>, <a href=\"https://github.com/rust-lang/rust/issues/53040\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53040\">#53040</a>, <a href=\"https://github.com/rust-lang/rust/issues/51269\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51269\">#51269</a></p>\n<p>I've got an issue to work on at the moment, but of the seven unassigned milestone issues, four aren't tracking/list issues of some kind and three of those read as unclear. IMO might be worth looking over those to clarify what is needing done since we normally point people looking for a issue at that list.</p>",
        "id": 133449947,
        "sender_full_name": "davidtwco",
        "timestamp": 1536247715
    },
    {
        "content": "<p>maybe/esp the ICE <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 133461184,
        "sender_full_name": "lqd",
        "timestamp": 1536259327
    },
    {
        "content": "<p>(btw the last 2 of these 3 issues are now no longer on the RC milestone)</p>",
        "id": 133498547,
        "sender_full_name": "lqd",
        "timestamp": 1536310835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is it <code>x.py test src/tools/tidy</code> to run tidy locally that you find inconvenient ? we'd maybe want a <code>x.py tidy</code> ?</p>",
        "id": 133521035,
        "sender_full_name": "lqd",
        "timestamp": 1536336639
    },
    {
        "content": "<p>actually ignore me</p>",
        "id": 133521356,
        "sender_full_name": "lqd",
        "timestamp": 1536336904
    },
    {
        "content": "<p>Which complaint of mine are you referring to?</p>",
        "id": 133521358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336904
    },
    {
        "content": "<p>On the rustc-guide?</p>",
        "id": 133521365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336910
    },
    {
        "content": "<p>As it happens, I do find that annoying :)</p>",
        "id": 133521368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336914
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/rustc-guide/pull/190#issuecomment-419475202\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-guide/pull/190#issuecomment-419475202\">https://github.com/rust-lang-nursery/rustc-guide/pull/190#issuecomment-419475202</a></p>",
        "id": 133521369,
        "sender_full_name": "lqd",
        "timestamp": 1536336914
    },
    {
        "content": "<p>right :(</p>",
        "id": 133521373,
        "sender_full_name": "lqd",
        "timestamp": 1536336917
    },
    {
        "content": "<p>yeah, however, the rustc-guide one is even more annoying</p>",
        "id": 133521378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336924
    },
    {
        "content": "<p>I misread it as regular rust repo sorry :((((((</p>",
        "id": 133521380,
        "sender_full_name": "lqd",
        "timestamp": 1536336927
    },
    {
        "content": "<p>:)</p>",
        "id": 133521392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336937
    },
    {
        "content": "<p>afaict <code>MAX_LINE_LENGTH=80 ci/check_line_lengths.sh src/**/*.md</code> is what you have to do there...</p>",
        "id": 133521394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336944
    },
    {
        "content": "<p>i should just make a bash script</p>",
        "id": 133521395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336948
    },
    {
        "content": "<p>something needs to be done about this lint to make it more ergonomic</p>",
        "id": 133521396,
        "sender_full_name": "lqd",
        "timestamp": 1536336952
    },
    {
        "content": "<p>or a makefile or something</p>",
        "id": 133521447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536336976
    },
    {
        "content": "<p>alias lint_of_doom=</p>",
        "id": 133521457,
        "sender_full_name": "lqd",
        "timestamp": 1536336996
    },
    {
        "content": "<p>part of it is that I'm just grumpy today :) I have to go to the dentist, that never helps! <span class=\"emoji emoji-1f628\" title=\"scared\">:scared:</span></p>",
        "id": 133521889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536337538
    },
    {
        "content": "<p>:/</p>",
        "id": 133522153,
        "sender_full_name": "lqd",
        "timestamp": 1536337829
    },
    {
        "content": "<p>hang in there :D</p>",
        "id": 133522156,
        "sender_full_name": "lqd",
        "timestamp": 1536337837
    },
    {
        "content": "<p>w/r/t being able to spot a long line:</p>\n<p>In Vim, I have the following set which adds a vertical bar at a certain column, might be useful to some:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">&quot; Colour 40 columns after column 80.</span>\n<span class=\"k\">let</span> &amp;<span class=\"nb\">colorcolumn</span><span class=\"p\">=</span><span class=\"s2\">&quot;100,&quot;</span>.<span class=\"k\">join</span><span class=\"p\">(</span>range<span class=\"p\">(</span><span class=\"m\">140</span><span class=\"p\">,</span> <span class=\"m\">1000</span><span class=\"p\">,</span> <span class=\"m\">40</span><span class=\"p\">),</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 133526146,
        "sender_full_name": "davidtwco",
        "timestamp": 1536342274
    },
    {
        "content": "<p>inb4 #wg-nll splits into #wg-nll-vim and #wg-nll-emacs</p>",
        "id": 133526445,
        "sender_full_name": "lqd",
        "timestamp": 1536342606
    },
    {
        "content": "<p>it has already split between #wg-nll-mir and #wg-nll-frog</p>",
        "id": 133529168,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1536345653
    },
    {
        "content": "<p>Does anyone remember the magic keywords I can search for for \"llvm deduplicates identical function bodies\"</p>",
        "id": 133815350,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536774911
    },
    {
        "content": "<p>I know that it was turned off for a while, then turned back on \"recently\", but I cant figure out when and what that feature was called to search for it</p>",
        "id": 133815361,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536774939
    },
    {
        "content": "<p>yeah just a sec</p>",
        "id": 133815704,
        "sender_full_name": "lqd",
        "timestamp": 1536775274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> the magic keyword is <code>mergefunc</code>, and the recent PR is <a href=\"https://github.com/rust-lang/rust/pull/49479\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/49479\">https://github.com/rust-lang/rust/pull/49479</a></p>",
        "id": 133815830,
        "sender_full_name": "lqd",
        "timestamp": 1536775415
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 133815890,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536775449
    },
    {
        "content": "<p>np</p>",
        "id": 133815904,
        "sender_full_name": "lqd",
        "timestamp": 1536775468
    },
    {
        "content": "<p>hey does anyone remember if there was a github issue discussing attempting to encode things like \"<code>Option&lt;S&lt;'a&gt;&gt;</code> cannot possibly keep the lifetime alive across a None branch of a <code>match</code>\"?</p>",
        "id": 133875939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536836029
    },
    {
        "content": "<p>I've done some searching but nothings come up yet</p>",
        "id": 133875942,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536836042
    },
    {
        "content": "<p>no, sorry :/</p>",
        "id": 133876851,
        "sender_full_name": "lqd",
        "timestamp": 1536837242
    },
    {
        "content": "<p>I could have sworn someone had suggested it as a future improvement and yet I cannot find a record of such discussion</p>",
        "id": 133876875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536837271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 133876878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536837281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I don't understand what you mean</p>",
        "id": 133884806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536845841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm basically referring to my <a href=\"https://github.com/rust-lang/rust/issues/53528#issuecomment-420987614\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53528#issuecomment-420987614\">comment from 53528</a></p>",
        "id": 133886246,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536847149
    },
    {
        "content": "<p>yeah, I had that impression</p>",
        "id": 133886252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847164
    },
    {
        "content": "<p>(which now has its own topic)</p>",
        "id": 133886255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536847168
    },
    {
        "content": "<p>I read that afterwards and realized this must be the context</p>",
        "id": 133886257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847170
    },
    {
        "content": "<p>Hmm, what am I missing here: <a href=\"https://play.rust-lang.org/?gist=5736ea474188c5a29de1257d790daf23&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=5736ea474188c5a29de1257d790daf23&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=5736ea474188c5a29de1257d790daf23&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 134164409,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537275504
    },
    {
        "content": "<p>OH</p>",
        "id": 134164425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537275533
    },
    {
        "content": "<p>So clever!</p>",
        "id": 134164428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537275537
    },
    {
        "content": "<p>another mut borrow could come in!</p>",
        "id": 134164439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537275546
    },
    {
        "content": "<p>(and in fact even the Drop could happen. Oh that's such a great example. I wish the diagnostics for it were a tiny bit better</p>",
        "id": 134164562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537275692
    },
    {
        "content": "<p>it's a tricky example to explain</p>",
        "id": 134177539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288922
    },
    {
        "content": "<p>particularly since <code>&amp;</code> borrows don't behave this way</p>",
        "id": 134177586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288937
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis:<br>\n<a href=\"#narrow/stream/122657-wg-nll/subject/weekly.20meeting.20September.2018/near/134190381\" title=\"#narrow/stream/122657-wg-nll/subject/weekly.20meeting.20September.2018/near/134190381\">it might be time to rejuvenate polonius then :)</a></p>\n</blockquote>\n<p>step 1: <a href=\"https://github.com/rust-lang-nursery/polonius/pull/77\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/77\">make it build</a></p>",
        "id": 134322785,
        "sender_full_name": "lqd",
        "timestamp": 1537463721
    },
    {
        "content": "<p>merged</p>",
        "id": 134325689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537466435
    },
    {
        "content": "<p>awesome, thank you niko</p>",
        "id": 134325717,
        "sender_full_name": "lqd",
        "timestamp": 1537466471
    },
    {
        "content": "<p>Step 2: Get facts to work on nightly?</p>",
        "id": 134326438,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537467198
    },
    {
        "content": "<p>Step 3: profit ?</p>",
        "id": 134326455,
        "sender_full_name": "lqd",
        "timestamp": 1537467235
    },
    {
        "content": "<p>With any luck</p>",
        "id": 134326708,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537467463
    },
    {
        "content": "<p>Step 3: get errors to work ;)</p>",
        "id": 134326782,
        "sender_full_name": "lqd",
        "timestamp": 1537467516
    },
    {
        "content": "<p>there is at least one FIXME around facts and subtyping relationships</p>",
        "id": 134326800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467551
    },
    {
        "content": "<p>I forget what else I broke :P</p>",
        "id": 134326803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467554
    },
    {
        "content": "<p>the way I would figure it out is probably to run the tests</p>",
        "id": 134326805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467559
    },
    {
        "content": "<p>move fast and break things, and all that</p>",
        "id": 134326815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467575
    },
    {
        "content": "<p>or at least the second half, anyway</p>",
        "id": 134326826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467593
    },
    {
        "content": "<p>Move faster than <code>./x.py build</code> at least</p>",
        "id": 134333694,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537474105
    },
    {
        "content": "<p>step 1.1: <a href=\"https://github.com/rust-lang-nursery/polonius/pull/78\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/78\">make it a little faster</a></p>",
        "id": 134371794,
        "sender_full_name": "lqd",
        "timestamp": 1537529205
    },
    {
        "content": "<p>gotchu <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> these were not integer steps :p</p>",
        "id": 134371807,
        "sender_full_name": "lqd",
        "timestamp": 1537529227
    },
    {
        "content": "<p>Polonius will be so fast when we finally get it to work with rustc.</p>",
        "id": 134372418,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537530091
    },
    {
        "content": "<p>I think there's also step 0. Decide what we want to do with polonius now that we don't have time constraints.</p>",
        "id": 134372862,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537530787
    },
    {
        "content": "<p>faster, probably. \"fast\", maybe, let's hope so :)</p>",
        "id": 134372865,
        "sender_full_name": "lqd",
        "timestamp": 1537530799
    },
    {
        "content": "<p>you have plot twisted the whole thing, these steps were not even positive floats</p>",
        "id": 134372912,
        "sender_full_name": "lqd",
        "timestamp": 1537530862
    },
    {
        "content": "<p>jokes aside, yes agreed</p>",
        "id": 134372933,
        "sender_full_name": "lqd",
        "timestamp": 1537530913
    },
    {
        "content": "<p>Step <code>NaN</code>; Step <code>+Inf</code></p>",
        "id": 134379639,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537538442
    },
    {
        "content": "<p>Step <code>+inf</code>: borrowck is perfect.</p>",
        "id": 134394954,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537553860
    },
    {
        "content": "<blockquote>\n<p>I think there's also step 0. Decide what we want to do with polonius now that we don't have time constraints.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> what are you thinking of here?</p>",
        "id": 134397326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537556221
    },
    {
        "content": "<p>At least: 1. Do we want to move initializedness checks to Polonius as well</p>",
        "id": 134398103,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537557067
    },
    {
        "content": "<p>2. How do we handle liveness, given that the current NLL implementation has to not calculate it for performance reasons.</p>",
        "id": 134398138,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537557114
    },
    {
        "content": "<p>ah, yes. I think the answer to 1 is probably yes, but I'd probably rather wait until we get the rest up and going. </p>\n<p>As for liveness, we are still computing it, we're doing it differently though. I don't think this matters much to polonius, actually, which doesn't have as much bias as to how the representation is setup.</p>\n<p>The real question though is whether polonius will need to <em>grow</em> such a bias, since right now it just operates on pairs of tuples, but we're using bitsets for liveness at present. </p>\n<p>Ideally, we'd move the liveness computation into polonius as well, I think</p>",
        "id": 134399273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537558299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we don't have to merge the previous PR quickly, you can take your time to review, when things are less hectic, and then iterate on it so that it is less hacky :)</p>",
        "id": 134400648,
        "sender_full_name": "lqd",
        "timestamp": 1537559845
    },
    {
        "content": "<p>I'll wait for a time that is more suitable for the whole WG, to make polonius PRs, so we can all weigh in on what to do and how to do it best, without time constraints or pressure, and the end result will be better I'm sure</p>",
        "id": 134402465,
        "sender_full_name": "lqd",
        "timestamp": 1537561633
    },
    {
        "content": "<p>PR for step2: <a href=\"https://github.com/rust-lang/rust/issues/54468\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54468\">#54468</a></p>",
        "id": 134437331,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537622220
    },
    {
        "content": "<p>Is there  a way to get to (file,line,column) triplet from the BasicBlock structure ?</p>",
        "id": 134450916,
        "sender_full_name": "blitzerr",
        "timestamp": 1537646836
    },
    {
        "content": "<p>Most likely you'll want to get a <code>Span</code>, and then get the error reporting functions to do the rest.</p>",
        "id": 134451171,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537647333
    },
    {
        "content": "<p>So generally you want <code>self.mir.source_info(location).span</code></p>",
        "id": 134451220,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537647470
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 134452332,
        "sender_full_name": "blitzerr",
        "timestamp": 1537649838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <br>\none more question, <br>\n```for moi in &amp;self.move_data.loc_map</p>\n<div class=\"codehilite\"><pre><span></span>How can I trace a move_out index back to line/column of code ?\n</pre></div>",
        "id": 134455067,
        "sender_full_name": "blitzerr",
        "timestamp": 1537655665
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">moves</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">moi</span><span class=\"p\">].</span><span class=\"n\">source</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">source_info</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">).</span><span class=\"n\">span</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// use span</span>\n</pre></div>",
        "id": 134455529,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537656832
    },
    {
        "content": "<p>From your reply in another thread, you do can just do <code>let span = self.mir.source_info(l).span;</code></p>",
        "id": 134455725,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537657220
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 134456456,
        "sender_full_name": "blitzerr",
        "timestamp": 1537658951
    },
    {
        "content": "<p>If I could also do <code>let span = self.mir.source_info(l).span</code> ?<br>\nThen what happens if the location is not a move location ?</p>",
        "id": 134456512,
        "sender_full_name": "blitzerr",
        "timestamp": 1537659053
    },
    {
        "content": "<p>I am only two weeks old in Rust; still getting my bearings right <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 134456566,
        "sender_full_name": "blitzerr",
        "timestamp": 1537659129
    },
    {
        "content": "<p>If there's no move there then the for loop will be iterating over an empty list of moves, so nothing happens.</p>",
        "id": 134470127,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537690040
    },
    {
        "content": "<blockquote>\n<p>statementizing</p>\n<p>new brain child</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I hope these aren't words that make it into the diagnostic <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 134618426,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537901047
    },
    {
        "content": "<p>My goal is Miriam Webster!!</p>",
        "id": 134618968,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537901491
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/3nrXWH5tTqHBvkw7VTuSQl3d/statementize.png\" target=\"_blank\" title=\"statementize.png\">statementize.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/3nrXWH5tTqHBvkw7VTuSQl3d/statementize.png\" target=\"_blank\" title=\"statementize.png\"><img src=\"/user_uploads/4715/3nrXWH5tTqHBvkw7VTuSQl3d/statementize.png\"></a></div>",
        "id": 134619526,
        "sender_full_name": "memoryruins",
        "timestamp": 1537901988
    },
    {
        "content": "<p>I followed the link </p>\n<p><a href=\"/user_uploads/4715/qTsdsEMn2SYR_M7bETx8xYUM/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/qTsdsEMn2SYR_M7bETx8xYUM/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/qTsdsEMn2SYR_M7bETx8xYUM/pasted_image.png\"></a></div>",
        "id": 134620061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537902442
    },
    {
        "content": "<p>Anyone want to review PR <a href=\"https://github.com/rust-lang/rust/issues/54355\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54355\">#54355</a> ? Its \"just\" a regression test, and it got auto-assigned to aturon who is pretty swamped.</p>",
        "id": 134730453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538037156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is this a know issue with type checking?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">call2</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Should error, don&#39;t know that &#39;a: &#39;b</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134773125,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538081586
    },
    {
        "content": "<p>Hmm, we don't check the user annot for WF I guess.</p>",
        "id": 134773151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081619
    },
    {
        "content": "<p>I feel like I did know about this</p>",
        "id": 134773155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081630
    },
    {
        "content": "<p>and had planned to fix it</p>",
        "id": 134773156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081635
    },
    {
        "content": "<p>but somehow it didn't happen</p>",
        "id": 134773160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081640
    },
    {
        "content": "<p>file a bug?</p>",
        "id": 134773161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081642
    },
    {
        "content": "<p>I can leave some notes on how to fix if you want to do so</p>",
        "id": 134773201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081649
    },
    {
        "content": "<p>and/or just give you a tip right now :)</p>",
        "id": 134773204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081652
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/54620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54620\">#54620</a></p>",
        "id": 134773423,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1538081994
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> , I'm doing some hacking that involves the <code>BorrowExplanation</code>s you added</p>",
        "id": 134812674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127535
    },
    {
        "content": "<p>and I was thinking that the name <code>.emit</code> is a little unfortunate, because the error objects that we create already use the name <code>emit</code> to mean \"issue this message to the stderr now please.\" (rather than say, buffering it)</p>",
        "id": 134812693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127577
    },
    {
        "content": "<p>So I wanted to know if you'd like to spend a moment now to help me bikeshed a different name?</p>",
        "id": 134812701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127601
    },
    {
        "content": "<p>Sure.</p>",
        "id": 134812759,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127620
    },
    {
        "content": "<p>I think I experimented with  a handful of names (I'm unsure if the similar change I made in the <code>region_name</code> module used <code>emit</code> too).</p>",
        "id": 134812766,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127661
    },
    {
        "content": "<p>So if I understand right, the current <code>BorrowExplanation::emit(&amp;self, tcx, err)</code> accumulates the explanation from <code>self</code> into <code>err</code></p>",
        "id": 134812769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127665
    },
    {
        "content": "<p>My first thought is \"report\"</p>",
        "id": 134812787,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127681
    },
    {
        "content": "<p>or even ... \"explain\" ?</p>",
        "id": 134812793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127690
    },
    {
        "content": "<p>(but having an explanation explain seems goofy)</p>",
        "id": 134812797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127703
    },
    {
        "content": "<p><code>add_explanation_to_diagnostic</code></p>",
        "id": 134812798,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127703
    },
    {
        "content": "<p>Hah!</p>",
        "id": 134812799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127708
    },
    {
        "content": "<p>Definitely self explanatory</p>",
        "id": 134812800,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127713
    },
    {
        "content": "<p>I like it</p>",
        "id": 134812801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127715
    },
    {
        "content": "<p>its not like this method name needs to be short</p>",
        "id": 134812840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127723
    },
    {
        "content": "<p>Okay I'll throw that alpha-rename into what I'm doing.</p>",
        "id": 134812849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127733
    },
    {
        "content": "<p>We should check the <code>region_name</code> module to see if it uses <code>emit</code> too - we might want to change that there too?</p>",
        "id": 134812851,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127734
    },
    {
        "content": "<p>I'll look quickly</p>",
        "id": 134812854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127745
    },
    {
        "content": "<p>Ah, no, I used <code>highlight_region_name</code> in that case.</p>",
        "id": 134812867,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127752
    },
    {
        "content": "<p>great</p>",
        "id": 134812871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127759
    },
    {
        "content": "<p>Also, before I waste time finding out</p>",
        "id": 134812872,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127771
    },
    {
        "content": "<p>was there any reason you didn't (or couldn't) send the <code>mir</code> along into the <code>emit</code> (aka <code>add_explanation_to_diagnostic</code>) method when you call it?</p>",
        "id": 134812886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127803
    },
    {
        "content": "<p>Didn't need it to do what the function did.</p>",
        "id": 134812896,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127821
    },
    {
        "content": "<p>Okay</p>",
        "id": 134812898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127828
    },
    {
        "content": "<p>The reason I ask <em>that</em> is that I'm adding a variant that corresponds to  \"Dropping an unnamed temporary\"</p>",
        "id": 134812942,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127850
    },
    {
        "content": "<p>and I can either have the variant carry all the spans I'm interested in</p>",
        "id": 134812945,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127863
    },
    {
        "content": "<p>or I could have it just carry the <code>mir::Local</code></p>",
        "id": 134812951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127873
    },
    {
        "content": "<p>I tried to do all of the logic that would need that in creating the <code>BorrowExplanation</code> - leaving just a couple spans and messages left. It was really just a mechanism so I could selectively choose not to emit certain types of explanations.</p>",
        "id": 134812955,
        "sender_full_name": "davidtwco",
        "timestamp": 1538127886
    },
    {
        "content": "<p>(sorry, \"just the <code>mir::Local</code> and the <code>Location</code>, I think...)</p>",
        "id": 134812961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127899
    },
    {
        "content": "<p>Hmm, interesting</p>",
        "id": 134812973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127910
    },
    {
        "content": "<p>So your thought is that the <code>add_explanation_to_diagnostic</code> should itself not do much extraction of the spans ?</p>",
        "id": 134812987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538127940
    },
    {
        "content": "<p>My intent when adding it was that it kept just what it needed to add a message to a diagnostic and that the <code>explain_borrow</code> function that creates it does all the working that out. If you think it makes more sense for it to do more, then feel free to change it though.</p>",
        "id": 134813060,
        "sender_full_name": "davidtwco",
        "timestamp": 1538128009
    },
    {
        "content": "<p>Okay I'll play around with it</p>",
        "id": 134813069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128019
    },
    {
        "content": "<p>thanks!</p>",
        "id": 134813072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128021
    },
    {
        "content": "<p>I figured that in 99% of cases, the explanation would have <code>add_explaination_to_diagnostic</code> called almost immediately after being created anyway - as it was previously. But for the PR I added it in, I wanted to be able to say \"add to the diagnostic unless your explanation is X, that isn't helpful now\"</p>",
        "id": 134813083,
        "sender_full_name": "davidtwco",
        "timestamp": 1538128062
    },
    {
        "content": "<p>I didn't even notice the indentation <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 134813531,
        "sender_full_name": "davidtwco",
        "timestamp": 1538128467
    },
    {
        "content": "<p>its easy to miss</p>",
        "id": 134813664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128641
    },
    {
        "content": "<p>(maybe auto-running <code>rustfmt</code> as part of bors isn't such a crazy idea after all...)</p>",
        "id": 134813675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128680
    },
    {
        "content": "<p>(at least having tidy run <code>rustfmt --write-mode diff</code> would have spotted it)</p>",
        "id": 134813720,
        "sender_full_name": "davidtwco",
        "timestamp": 1538128708
    },
    {
        "content": "<p>/me didn't even know about <code>rustfmt --write-mode diff</code> ...</p>",
        "id": 134813736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128739
    },
    {
        "content": "<p>I have <em>got</em> to put some time aside to better acquaint myself with the various tools in the Rust ecosystem</p>",
        "id": 134813751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128766
    },
    {
        "content": "<p>I only just today learned about the <code>-W</code> option to <code>git log --patch</code></p>",
        "id": 134813756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538128785
    },
    {
        "content": "<p>And now I have.</p>",
        "id": 134813944,
        "sender_full_name": "davidtwco",
        "timestamp": 1538128986
    },
    {
        "content": "<p><a href=\"https://xkcd.com/1053/\" target=\"_blank\" title=\"https://xkcd.com/1053/\">https://xkcd.com/1053/</a></p>",
        "id": 134813950,
        "sender_full_name": "davidtwco",
        "timestamp": 1538129006
    },
    {
        "content": "<p>I think I need to do something structured about this problem. Like, maybe plan to write a short blog post per week (or maybe per day?!?) discussing a \"favorite tool\" or even \"favorite option/flag/mode\" for a tool</p>",
        "id": 134814050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129150
    },
    {
        "content": "<p>It would be good to get in the habit of writing in a structured manner like that again. My previous blog posts were all so epic that it became daunting to attempt a new one..</p>",
        "id": 134814102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129195
    },
    {
        "content": "<p>(and thus I haven't posted in <em>literally</em> years....)</p>",
        "id": 134814104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  you need to finish your series on GCs :)</p>",
        "id": 134814475,
        "sender_full_name": "lqd",
        "timestamp": 1538129733
    },
    {
        "content": "<p>it was Good ™</p>",
        "id": 134814477,
        "sender_full_name": "lqd",
        "timestamp": 1538129754
    },
    {
        "content": "<p>yeah. There was rumblings of maybe having me resume looking at GC stuff again</p>",
        "id": 134814520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129784
    },
    {
        "content": "<p>Once the edition's out, we'll see</p>",
        "id": 134814524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129792
    },
    {
        "content": "<p>with josephine, and apparently Stephen Dolan's rust+ocaml shindig, the landscape has a bit changed since then as well</p>",
        "id": 134814537,
        "sender_full_name": "lqd",
        "timestamp": 1538129825
    },
    {
        "content": "<p>and WASM is also a significant part of the picture</p>",
        "id": 134814548,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538129853
    },
    {
        "content": "<p>hopefully they move on with their GC / host binding plans soon indeed</p>",
        "id": 134814591,
        "sender_full_name": "lqd",
        "timestamp": 1538129882
    },
    {
        "content": "<p>dtolnay found a nll ICE this morning. the issue appears to be more about lifetime inference than nll, but tagged/linking if it's worth being on radar <a href=\"https://github.com/rust-lang/rust/issues/54124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54124\">https://github.com/rust-lang/rust/issues/54124</a></p>",
        "id": 134993128,
        "sender_full_name": "memoryruins",
        "timestamp": 1538424190
    },
    {
        "content": "<p>is it <a href=\"https://github.com/rust-lang/rust/issues/53420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53420\">#53420</a> / <a href=\"https://play.rust-lang.org/?gist=5fba8c5e897ef55e730008fb6ebdb0b2&amp;version=stable&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=5fba8c5e897ef55e730008fb6ebdb0b2&amp;version=stable&amp;mode=debug&amp;edition=2015\">playground</a> ?</p>",
        "id": 134993697,
        "sender_full_name": "lqd",
        "timestamp": 1538424755
    },
    {
        "content": "<p>oh yea, those are incredibly similar, except the one using PhantomData doesn't ICE on 2015 or 2018 without explictly adding <code>#![feature(nll)]</code></p>",
        "id": 134993985,
        "sender_full_name": "memoryruins",
        "timestamp": 1538425078
    },
    {
        "content": "<p>but nearly the same code sample</p>",
        "id": 134994053,
        "sender_full_name": "memoryruins",
        "timestamp": 1538425111
    },
    {
        "content": "<p>left some comments</p>",
        "id": 134996182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538427534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in <a href=\"https://github.com/rust-lang/rust/issues/21232#issuecomment-426290385\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232#issuecomment-426290385\">https://github.com/rust-lang/rust/issues/21232#issuecomment-426290385</a>, do you mean to say \"Our current status <strong>in Rust 2018 / with NLL</strong>\"?</p>",
        "id": 135042029,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538492748
    },
    {
        "content": "<p>Because the <a href=\"https://play.integer32.com/?gist=3f8414e24598551b9a8c2ed231d1aec4&amp;version=stable&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.integer32.com/?gist=3f8414e24598551b9a8c2ed231d1aec4&amp;version=stable&amp;mode=debug&amp;edition=2015\">first example you gave doesn't compile pre-NLL</a></p>",
        "id": 135042122,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538492807
    },
    {
        "content": "<p>right, you have to use the variant that moves <code>s</code> away. I'll fix it.</p>",
        "id": 135042671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538493375
    },
    {
        "content": "<p>oh actually, it suffices to just declare <code>s</code> as <code>mut</code>.</p>",
        "id": 135042969,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538493714
    },
    {
        "content": "<p>Yep, which is a change from pre- / post- NLL too</p>",
        "id": 135043076,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538493814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I don't understand: it seems to me like NLL <em>also</em> <a href=\"https://play.integer32.com/?gist=d6bc9d86d5e8694576e3fa0e5f62de76&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.integer32.com/?gist=d6bc9d86d5e8694576e3fa0e5f62de76&amp;version=nightly&amp;mode=debug&amp;edition=2015\">requires</a> you declare <code>s</code> as <code>mut</code>?</p>",
        "id": 135043350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494090
    },
    {
        "content": "<p>(which might not be something we stick to in the long term; but I'm not yet seeing the change in behavior you are referencing in this particular case)</p>",
        "id": 135043379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494122
    },
    {
        "content": "<p>I do know that the unused_mut lint is broken for this case</p>",
        "id": 135043401,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494151
    },
    {
        "content": "<p>(for NLL)</p>",
        "id": 135043403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494155
    },
    {
        "content": "<p>which may well be an instance of <a href=\"https://github.com/rust-lang/rust/issues/54586\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54586\">#54586</a></p>",
        "id": 135043407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494162
    },
    {
        "content": "<p>Oh, I was just assuming that your original code worked and that you were testing it in a different context than \"stable\"</p>",
        "id": 135043414,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538494169
    },
    {
        "content": "<p>no i was just writing without testing. :)</p>",
        "id": 135043426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538494181
    },
    {
        "content": "<p>I was adding the comment to the other commenter showing that <code>let s: i32; s = 42</code> works today, but when I tried with a struct I got the \"needs mut\" error, which is the only reason I caught it in your comment</p>",
        "id": 135043511,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538494241
    },
    {
        "content": "<p>does Rust tests has some kind of interruption that makes the current output to be displayed?</p>",
        "id": 135129532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597008
    },
    {
        "content": "<p>so you don't need to wait until the whole thing finished to see the current failures output</p>",
        "id": 135129546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597028
    },
    {
        "content": "<p>I remember that minitest in Ruby handled ctrl+t in that way</p>",
        "id": 135129597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, others? <span class=\"emoji emoji-261d\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 135129627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597103
    },
    {
        "content": "<blockquote>\n<p>does Rust tests has some kind of interruption that makes the current output to be displayed?</p>\n</blockquote>\n<p>I guess you mean the <code>x.py test</code> stuff?</p>",
        "id": 135129642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597124
    },
    {
        "content": "<p>There's <code>cargo test -- --nocapture</code></p>",
        "id": 135129654,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538597148
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>does Rust tests has some kind of interruption that makes the current output to be displayed?</p>\n</blockquote>\n<p>I guess you mean the <code>x.py test</code> stuff?</p>\n</blockquote>\n<p>yep</p>",
        "id": 135129756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597236
    },
    {
        "content": "<p>I think verbose-tests  in config.toml might be doing that, it's IIRC how CI runs them, and it always shows them line by line, so I assume also with errors</p>",
        "id": 135129763,
        "sender_full_name": "lqd",
        "timestamp": 1538597244
    },
    {
        "content": "<p>well the <code>-- --nocapture</code> could work if can be passed to <code>x.py</code></p>",
        "id": 135129768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597259
    },
    {
        "content": "<p>I think you may want to tweak your config.toml</p>",
        "id": 135129855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597345
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> said, there is this setting:</p>\n<div class=\"codehilite\"><pre><span></span># Suppresses extraneous output from tests to ensure the output of the test\n# harness is relatively clean.\n#quiet-tests = true\n</pre></div>",
        "id": 135129883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597374
    },
    {
        "content": "<p>I think if it is false, you get more interactive output</p>",
        "id": 135129893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597386
    },
    {
        "content": "<p>ahhh ok ok</p>",
        "id": 135129995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597497
    },
    {
        "content": "<p>cool</p>",
        "id": 135129996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538597497
    },
    {
        "content": "<p>also responding to signals in a cross-platform, multi-threaded safe way is amazingly annoying</p>",
        "id": 135130064,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538597562
    },
    {
        "content": "<p>(it might be necessary to also nuke the built tests though)</p>",
        "id": 135130067,
        "sender_full_name": "lqd",
        "timestamp": 1538597565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't see <code>quiet-tests</code> on the generated config.toml.example file</p>",
        "id": 135132949,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538599851
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 135132954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538599856
    },
    {
        "content": "<p>ahh probably this ...</p>",
        "id": 135132981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538599896
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span># Emits extraneous output from tests to ensure that failures of the test\n# harness are debuggable just from logfiles.\n#verbose-tests = false\n</pre></div>",
        "id": 135132984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538599898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ah probably changed yeah</p>",
        "id": 135133171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538600150
    },
    {
        "content": "<p>since my config.toml was copie</p>",
        "id": 135133173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538600158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah that's the one I mentioned earlier :)</p>",
        "id": 135133342,
        "sender_full_name": "lqd",
        "timestamp": 1538600350
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135133429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538600409
    },
    {
        "content": "<p>Felix and I used it recently when looking for the weird CI error we couldn't reproduce, I haven't seen it fail so I only can assume it does what you want (and what CI does) but I've seen it switch from using the block ...II..FF to line by line so it should work</p>",
        "id": 135133476,
        "sender_full_name": "lqd",
        "timestamp": 1538600470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> here is an interesting temo  r-value lifetime oddity I was previously unaware of: <a href=\"https://github.com/rust-lang/rust/issues/21114#issuecomment-426963631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21114#issuecomment-426963631\">https://github.com/rust-lang/rust/issues/21114#issuecomment-426963631</a></p>",
        "id": 135234826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538716487
    },
    {
        "content": "<p>*\"temp\", not \"temo\"</p>",
        "id": 135241214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538727640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I believe that was quite intentional: whenever there is \"conditional flow\", temporaries cannot escape it. It's obvious that this makes sense for loops (to prevent unbounded buildup). I'm not sure if it was <em>necessary</em> for if/else but...</p>",
        "id": 135261587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753138
    },
    {
        "content": "<p>I certainly would understand if the temps in the <em>test condition</em> died early</p>",
        "id": 135262089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538753617
    },
    {
        "content": "<p>I think they do, too</p>",
        "id": 135262099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753637
    },
    {
        "content": "<p>regardless, I dont' think we can/should change the rules here at the moment, right?</p>",
        "id": 135262168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753685
    },
    {
        "content": "<p>But the tail of the then/else blocks strike me as analogous to “tail position”, when thinking about the space-efficiency semantics</p>",
        "id": 135262173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538753688
    },
    {
        "content": "<p>i.e., didn't we rule that out of scope without careful evaluation etc?</p>",
        "id": 135262175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753691
    },
    {
        "content": "<p>No I  don’t think we can change the rules in time for 2018 edition</p>",
        "id": 135262195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538753725
    },
    {
        "content": "<p>Just wanted to note it</p>",
        "id": 135262204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538753746
    },
    {
        "content": "<p>Since it led people to make interestign bugs</p>",
        "id": 135262208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538753756
    },
    {
        "content": "<p>k</p>",
        "id": 135262253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538753783
    },
    {
        "content": "<p>(I will be having little free time in the coming weeks because of $dayjob, so if I'm less active/available for the foreseeable future, this will be why)</p>",
        "id": 135386714,
        "sender_full_name": "lqd",
        "timestamp": 1538985944
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you have any opinion on how the intermediate buffering/filtering/sorting done by the <code>move_error_reported</code> BTreeMap should interact with <code>-Z dont-buffer-diagnostics</code> and, perhaps more importantly, <code>-Z treat-err-as-bug</code> ?</p>",
        "id": 135471612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539093731
    },
    {
        "content": "<p>right now the <code>move_error_reported</code> intermediate map sort of messes up the workflow of using <code>-Z treat-err-as-bug</code> to get stack traces that point right to the place where the error was generated. But its also not clear to me whether it makes sense to adopt the strategy of immediately emitting such errors when those <code>-Z</code> flags are present, since the errors in question might end up getting suppressed down the road</p>",
        "id": 135471657,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539093822
    },
    {
        "content": "<p>Hmm,  I'm not sure. Having an error fire straight away wouldn't work because, like you said, it might have ended up being suppressed. </p>\n<p>w/r/t <code>-Z dont-buffer-diagnostics</code>, I think we consider the location where the errors are currently loaded into the buffer as the place where they should be emitted since otherwise we get the normally suppressed errors being emitted and that's not useful. </p>\n<p>w/r/t <code>-Z treat-err-as-bug</code>, the <code>move_error_reported</code> map really messes this up. I believe there are like four maps/sets that are used to deduplicate errors but that particular one is the only one that doesn't just keep the first error IIRC. </p>\n<p>In a previous PR, I added a <code>debug!</code> log to <code>rustc_errors</code> when a diagnostic is buffered so that I can find it in <code>RUST_LOG</code> output and get some idea of where it is in the compiler from the surrounding logs.</p>",
        "id": 135472003,
        "sender_full_name": "davidtwco",
        "timestamp": 1539094172
    },
    {
        "content": "<p>I'm sort of tempted to try to generalize <code>-Z treat-err-as-bug</code> to take an optional argument. Or add a <code>-Z treat-nth-err-as-bug=&lt;N&gt;</code> and then that would cause a panic on the N'th <code>emit()</code> call</p>",
        "id": 135472384,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539094516
    },
    {
        "content": "<p>Unless there's some way that I'm not aware of to save the backtrace when we're buffering those errors so that we can error later with that backtrace (and I expect that this isn't possible), I'm not sure there's a nice way to have that interaction work.</p>",
        "id": 135472409,
        "sender_full_name": "davidtwco",
        "timestamp": 1539094535
    },
    {
        "content": "<p>(a <code>-Z treat-nth-err-as-bug=&lt;N&gt;</code> flag wouldn't be enough on its own... I'm just musing whether its a necessity, if one wants to have any chance of debugging an error that arises <em>after</em> another error has been emitted ...)</p>",
        "id": 135472500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539094601
    },
    {
        "content": "<p>I think we <em>could</em> save a backtrace. I don't know whether we <strong>should</strong>...</p>",
        "id": 135472527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539094630
    },
    {
        "content": "<p>after all, my memory is that the <code>RUST_BACKTRACE</code> support is itself implemented in Rust...</p>",
        "id": 135472548,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539094655
    },
    {
        "content": "<p>I suppose it wouldn't be possible to disable the deduplication in that case and get all of the errors, each with stack traces?</p>",
        "id": 135472553,
        "sender_full_name": "davidtwco",
        "timestamp": 1539094662
    },
    {
        "content": "<p>With a <code>warning: some errors might be deduplicated when rustc is run without this flag</code> or something.</p>",
        "id": 135472615,
        "sender_full_name": "davidtwco",
        "timestamp": 1539094693
    },
    {
        "content": "<blockquote>\n<p>I suppose it wouldn't be possible to disable the deduplication in that case and get all of the errors, each with stack traces?</p>\n</blockquote>\n<p>Yeah this might be the more principled approach</p>",
        "id": 135472621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539094697
    },
    {
        "content": "<p>The errors, as far as I can remember, were never the same, so it should be possible to ignore the ones that weren't showing up for the test case before adding that flag.</p>",
        "id": 135472670,
        "sender_full_name": "davidtwco",
        "timestamp": 1539094753
    },
    {
        "content": "<p>Does anyone object to me removing <a href=\"https://github.com/rust-lang/rust/issues/53114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53114\">#53114</a> from the RC 2 milestone (we have parity with AST borrowck)</p>",
        "id": 135533796,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1539169604
    },
    {
        "content": "<p>I do not</p>",
        "id": 135543545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539180692
    },
    {
        "content": "<p>is there a tracking issue for this? <a href=\"https://play.rust-lang.org/?gist=76a259242ade7730cbc0a5ad7b68c360&amp;version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=76a259242ade7730cbc0a5ad7b68c360&amp;version=nightly&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?gist=76a259242ade7730cbc0a5ad7b68c360&amp;version=nightly&amp;mode=debug&amp;edition=2018</a></p>",
        "id": 135589157,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539239059
    },
    {
        "content": "<p>the <code>x.get_mut(x.len())</code> is IMO a wrong error, even though it's going through a deref to get the method on slice</p>",
        "id": 135589322,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539239393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> my first guess is that this represents a limitation of our current implementation of two-phase borrows</p>",
        "id": 135596156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539249393
    },
    {
        "content": "<p>i.e. I think you've hit the nail on the head: I bet the need to go through the deref is causing the mutable borrow to be activated \"earlier\" than you would have hoped.</p>",
        "id": 135596183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539249431
    },
    {
        "content": "<p>But I do agree we should at least make sure this tracked somewhere</p>",
        "id": 135596569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539249869
    },
    {
        "content": "<p>There are a couple different candidate issues where one might consider filing this</p>",
        "id": 135596634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539249948
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/44100\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44100\">#44100</a> is the most obvious to me. But it was closed in favor of <a href=\"https://github.com/rust-lang/rust/issues/43234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43234\">#43234</a></p>",
        "id": 135596682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539249971
    },
    {
        "content": "<p>There are also some issues discussing expanding/generalizing two-phase borrows, namely <a href=\"https://github.com/rust-lang/rust/issues/51915\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51915\">#51915</a> and <a href=\"https://github.com/rust-lang/rust/issues/49434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49434\">#49434</a></p>",
        "id": 135596707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539250014
    },
    {
        "content": "<p>The other option is that we could just file an issue specifically about this particular case</p>",
        "id": 135596723,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539250034
    },
    {
        "content": "<p>i've written a comment on <a href=\"https://github.com/rust-lang/rust/issues/49434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49434\">#49434</a> which describes the problem</p>",
        "id": 135715718,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539402319
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , do you know offhand if the const-evaluator (or whatever system we use for compiling the RHS of statics) will generate different MIR depending on whether NLL is enabled or not?</p>",
        "id": 135904413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539700870
    },
    {
        "content": "<p>well</p>",
        "id": 135904781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539701180
    },
    {
        "content": "<p>it starts from MIR construction</p>",
        "id": 135904787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539701186
    },
    {
        "content": "<p>so to the extent that MIR construction differs, it will</p>",
        "id": 135904790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539701198
    },
    {
        "content": "<p>I think this is largely confined to matches right now?</p>",
        "id": 135904811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539701213
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 135904861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539701278
    },
    {
        "content": "<p>(I'm trying to puzzle out the difference in behavior between the 2015 and 2018 editions on <a href=\"https://github.com/rust-lang/rust/issues/54797\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54797\">#54797</a> )</p>",
        "id": 135904927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539701345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you think you'd have time to review <a href=\"https://github.com/rust-lang/rust/pull/55150\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55150\">https://github.com/rust-lang/rust/pull/55150</a> ? Its small. But its a patch to AST-borrowck. (or rather, mem_categorization)</p>",
        "id": 136366587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540328067
    },
    {
        "content": "<p>(and I think if we don't get it in for RC2, then it may be worth beta-nomination)</p>",
        "id": 136366633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540328134
    },
    {
        "content": "<p>ok</p>",
        "id": 136366698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540328166
    },
    {
        "content": "<p>oh I guess <code>#[thread_local]</code> is not stabilized. so not worth beta-nomination in any circumstance</p>",
        "id": 136366739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540328242
    },
    {
        "content": "<p>(I kept forgetting why this wasn't higher priority for me to get someone to review)</p>",
        "id": 136366750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540328259
    },
    {
        "content": "<blockquote>\n<p>I think Polonius is such a great name for that project. For those who didn't read Shakespeare's Hamlet, Polonius is known for giving the advice \"Neither a borrower nor a lender be.\"</p>\n</blockquote>",
        "id": 136496019,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540490854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^ someone got it ;-)</p>",
        "id": 136496022,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540490861
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 136496076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540490883
    },
    {
        "content": "<p>i just got a github notification informing me that i've been added to rust-lang/compiler-team</p>",
        "id": 147850803,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1542407463
    },
    {
        "content": "<p>did anyone receive the same notification?</p>",
        "id": 147850810,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1542407471
    },
    {
        "content": "<p>I think it's a because a new repository was created, anyone in the rust-lang org gets automatically subscribed.</p>",
        "id": 147850887,
        "sender_full_name": "davidtwco",
        "timestamp": 1542407534
    },
    {
        "content": "<p>ah</p>",
        "id": 147850894,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1542407543
    },
    {
        "content": "<p><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> 1.0 <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 150919450,
        "sender_full_name": "lqd",
        "timestamp": 1544007826
    },
    {
        "content": "<p>What happened to compare mode NLL? It doesn't get run by default in the UI suite unless I pass the <code>--compare-mode</code> flag now.</p>",
        "id": 151012880,
        "sender_full_name": "davidtwco",
        "timestamp": 1544108936
    },
    {
        "content": "<p>Is it some side effect of the change to disable it on Windows to speed up CI?</p>",
        "id": 151012916,
        "sender_full_name": "davidtwco",
        "timestamp": 1544108964
    },
    {
        "content": "<p>(note, not on Windows, well, I'm ssh'd into a Arch server from Windows, but I doubt x.py has figured that out)</p>",
        "id": 151012949,
        "sender_full_name": "davidtwco",
        "timestamp": 1544108989
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56391\">#56391</a></p>",
        "id": 151013016,
        "sender_full_name": "kennytm",
        "timestamp": 1544109009
    },
    {
        "content": "<p>it is disabled by default and only enabled on <code>x86_64-gnu-nopt</code> now.</p>",
        "id": 151013047,
        "sender_full_name": "kennytm",
        "timestamp": 1544109041
    },
    {
        "content": "<p>Ah, I assumed that change would have only applied to the CI and the default on dev machines would remain the same.</p>",
        "id": 151013053,
        "sender_full_name": "davidtwco",
        "timestamp": 1544109045
    },
    {
        "content": "<p>Thanks, I'll update my <code>config.toml</code>.</p>",
        "id": 151013070,
        "sender_full_name": "davidtwco",
        "timestamp": 1544109067
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> (and other contributors of course) congrats on shipping NLL to the world <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> you've done it! Thanks for all the hard work and talent and countless other things <span class=\"emoji emoji-1f44f\" title=\"clap\">:clap:</span></p>",
        "id": 151038423,
        "sender_full_name": "lqd",
        "timestamp": 1544126245
    },
    {
        "content": "<p>everyone, as some people know I'm organizing Rust Latam and we have opened the cfp</p>",
        "id": 151046291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544132811
    },
    {
        "content": "<p><a href=\"https://cfp.rustlatam.org/events/rust-latam\" target=\"_blank\" title=\"https://cfp.rustlatam.org/events/rust-latam\">https://cfp.rustlatam.org/events/rust-latam</a></p>",
        "id": 151046293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544132812
    },
    {
        "content": "<p>it would be nice if someone from this group want to send a proposal and maybe, why not, talk about the process of building NLL or something else that you want :)</p>",
        "id": 151046309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544132833
    },
    {
        "content": "<p>/cc <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span></p>",
        "id": 151046380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544132888
    },
    {
        "content": "<blockquote>\n<p>it would be nice if someone from this group want to send a proposal and maybe, why not, talk about the process of building NLL or something else that you want :)</p>\n</blockquote>\n<p>I love that idea</p>",
        "id": 151100879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177429
    },
    {
        "content": "<p>We probably should have advertised this PR (and how to \"undo\" its effects locally) quite a bit more within this WG: <a href=\"https://github.com/rust-lang/rust/issues/56391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56391\">#56391</a> \"ci: Only run compare-mode tests on one builder\"</p>",
        "id": 151440530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544529404
    },
    {
        "content": "<p>because its phrased as if it only affects the ci system, but I think its better phrased as a global effect (especially to us) that is undone on a single ci builder, I think.</p>",
        "id": 151440547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544529427
    },
    {
        "content": "<p>I've forgotten, looking at mir dumps, how do we map back from inference variables (I think it's their name, eg  _#1r) to named lifetimes again ? I'm not sure where to look in the mir dump (I wanted to check and generate NLL facts so I wanted to verify if a specific free region in the source was present in the facts)</p>",
        "id": 152298970,
        "sender_full_name": "lqd",
        "timestamp": 1545352973
    },
    {
        "content": "<p>I don't know if the current mir dumps include that info. I would have expected to see it somewhere in the <code>*.nll.0.mir</code> dump, but I don't see it in one I have handy here.</p>",
        "id": 152323117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390304
    },
    {
        "content": "<p>same</p>",
        "id": 152323140,
        "sender_full_name": "lqd",
        "timestamp": 1545390341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> for instance I'm looking at <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=2cdd6791d0a2d82967b4864ab396413a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=2cdd6791d0a2d82967b4864ab396413a\">code like this</a> and was wondering to which region they were mapped, especially since the same lifetime can be seen multiple times, and there are 6-8 regions for this function</p>",
        "id": 152323311,
        "sender_full_name": "lqd",
        "timestamp": 1545390516
    },
    {
        "content": "<p>it would be good to try to fix this</p>",
        "id": 152323324,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390543
    },
    {
        "content": "<p>maybe open an issue and tag it A-NLL for now</p>",
        "id": 152323335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390560
    },
    {
        "content": "<p>so, say, I was wondering whether the &amp;'a for the return type was the same inference variabla as the first argument</p>",
        "id": 152323356,
        "sender_full_name": "lqd",
        "timestamp": 1545390584
    },
    {
        "content": "<p>ok will do, thanks Felix :)</p>",
        "id": 152323366,
        "sender_full_name": "lqd",
        "timestamp": 1545390595
    },
    {
        "content": "<p>At this point the way I've been dealing with Q's like that</p>",
        "id": 152323433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390610
    },
    {
        "content": "<p>is staring at RUST_LOG output</p>",
        "id": 152323454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390614
    },
    {
        "content": "<p>for far too long</p>",
        "id": 152323457,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390618
    },
    {
        "content": "<p>yeah we can do that, but requires a custom rustc build for \"regular users\"</p>",
        "id": 152323486,
        "sender_full_name": "lqd",
        "timestamp": 1545390669
    },
    {
        "content": "<p>oh right</p>",
        "id": 152323490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390676
    },
    {
        "content": "<p>\"sigh\"</p>",
        "id": 152323492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390678
    },
    {
        "content": "<p>I wonder if we could get our CI to make a debug-build variant of the nightly channel added to <code>rustup</code></p>",
        "id": 152323512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390711
    },
    {
        "content": "<p>yeah like the llvm-assertions enabled one, ALT I guess</p>",
        "id": 152323556,
        "sender_full_name": "lqd",
        "timestamp": 1545390728
    },
    {
        "content": "<p>does that exist? An llvm-assertions enabled build?</p>",
        "id": 152323560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390747
    },
    {
        "content": "<p>I'm not sure it does, it was talked about at some point</p>",
        "id": 152323562,
        "sender_full_name": "lqd",
        "timestamp": 1545390765
    },
    {
        "content": "<p>if so we might be able to convince T-infra to just fold the two ideas into one build</p>",
        "id": 152323566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390767
    },
    {
        "content": "<p>since if you're paying for debug=true, you might also be willing to pay for LLVM assertions</p>",
        "id": 152323574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390783
    },
    {
        "content": "<p>but surely did not end up as a rustup channel</p>",
        "id": 152323579,
        "sender_full_name": "lqd",
        "timestamp": 1545390791
    },
    {
        "content": "<p>(the main issue I could imagine is LLVM-assertions causing an early failure and thus causing one to be unable to recreate a problem of interest)</p>",
        "id": 152323587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545390816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> sorry to bother you Felix, do you know of documentation about the NLL mir dump format ? sections are generally named, but not columns, so I was wondering what some of those were. Or should I maybe more simply look for the code that generates it ?</p>",
        "id": 152334013,
        "sender_full_name": "lqd",
        "timestamp": 1545402826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  I don't know offhand, sorry. You should probably look for the code that generates them.</p>",
        "id": 152334139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545402950
    },
    {
        "content": "<p>alright, thank you</p>",
        "id": 152334238,
        "sender_full_name": "lqd",
        "timestamp": 1545403002
    },
    {
        "content": "<p>Merry Christmas to everyone!!!</p>",
        "id": 152478635,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1545674062
    },
    {
        "content": "<p>Meeting today?</p>",
        "id": 154193249,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546455413
    },
    {
        "content": "<p>I'm around but still in general \"catch up mode\"</p>",
        "id": 154196405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458409
    },
    {
        "content": "<p>so I could go either way</p>",
        "id": 154196409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458418
    },
    {
        "content": "<p>I'll add a heading in the paper doc for people to write down any status updates, but I'm OK with no meeting.</p>",
        "id": 154197717,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546459799
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> cc <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 154198048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546460095
    },
    {
        "content": "<p>for people following at home, niko has a new <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\">polonius post</a></p>",
        "id": 156356706,
        "sender_full_name": "lqd",
        "timestamp": 1547805418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yay <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> for <a href=\"https://github.com/rust-lang/rust/issues/59114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59114\">#59114</a></p>",
        "id": 163910202,
        "sender_full_name": "lqd",
        "timestamp": 1555945699
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span> <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 163910253,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555945756
    },
    {
        "content": "<p>awesome job :)</p>",
        "id": 163910343,
        "sender_full_name": "lqd",
        "timestamp": 1555945827
    },
    {
        "content": "<p>Well done Matthew!</p>",
        "id": 163926545,
        "sender_full_name": "centril",
        "timestamp": 1555958573
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 163931979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555962432
    },
    {
        "content": "<p>okay, embarrassing question time: Who wants to remind me why I'm totally wrong on <a href=\"https://github.com/rust-lang/rust/issues/62170\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62170\">#62170</a> \"match guard is lengthening borrow unexpectedly under NLL\" ?</p>",
        "id": 169116281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561626311
    },
    {
        "content": "<p>isn't that a case for Polonius ?</p>",
        "id": 169172786,
        "sender_full_name": "lqd",
        "timestamp": 1561667572
    },
    {
        "content": "<p>à la <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a> ?</p>",
        "id": 169172832,
        "sender_full_name": "lqd",
        "timestamp": 1561667624
    },
    {
        "content": "<p>yes I think that is <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> 's assertion as well, since they added that as a tag to the issue I fild</p>",
        "id": 169189288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561683405
    },
    {
        "content": "<p>for some reason I thought this  case wouldn't require going all the way to polonius, but I am too tired to think straight about this right now</p>",
        "id": 169189306,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561683441
    },
    {
        "content": "<p>ah right I hadn’t seen Matthew’s tag, I’m just staring at <code>-z polonius</code> bugs in loops at the moment :) (and whenever I see a loop borrowing + killing the same variable + control flow, I think it’s probably a job for polonius more so than NLLs) it’s an interesting thought to try supporting these simpler cases (but as they work in Polonius today, maybe we wait a bit to see how that evolves and then revisit ?)</p>",
        "id": 169203473,
        "sender_full_name": "lqd",
        "timestamp": 1561705976
    }
]