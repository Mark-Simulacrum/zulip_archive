[
    {
        "content": "<p>The grammar wg is having an issue with NLL causing extremely long compile times (<a href=\"https://github.com/rust-lang/rust/issues/58178\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58178\">https://github.com/rust-lang/rust/issues/58178</a>). I was wondering if there were any known issues along these lines?  I searched around, but all the performance-related issues seem to be closed.</p>",
        "id": 157585437,
        "sender_full_name": "Eric Huss",
        "timestamp": 1549346789
    },
    {
        "content": "<p>while I was initially surprised a lot of time would be spent in <code>find_outlives_blame_span</code> (as I thought it was related to errors) quick logging seems to indicate this is indeed on the problematic codepath. It's hard to reduce the 2MB test file, and the crate involves proc_macros (i.e dark magic unknown to me to make it work on anything but a 30mins full stage-2 build just to add logging), a 2K line macro, etc, but it seems to be pointing at <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1100-L1125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1100-L1125\">check_universal_regions</a> + <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1135\">check_universal_region</a> being supralinear - the log shows some of these GLL closures propagating <em>thousands</em> of outlives_requirements (the highest I've seen was 9k of them, which was before stopping rustc trying to check a closure with 70K regions). Hopefully this will allow to reduce the problematic case from 45K lines to one of these <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 157607968,
        "sender_full_name": "lqd",
        "timestamp": 1549375189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> if you have time, can you try replacing the call here: <a href=\"https://github.com/rust-lang/rust/blob/b2c6b8c29f13f8d1f242da89e587960b95337819/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1173\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b2c6b8c29f13f8d1f242da89e587960b95337819/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1173\">https://github.com/rust-lang/rust/blob/b2c6b8c29f13f8d1f242da89e587960b95337819/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1173</a>  with <code>(ConstraintCategory::Boring, mir.span)</code> and seeing how the perf looks (this will regress diagnostics, but there are less computationally expensive ways  to determine them.</p>",
        "id": 157620401,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549385474
    },
    {
        "content": "<p>That code was know to be possibly expensive, but I didn't think it would be worthwhile until there was a know problem</p>",
        "id": 157620491,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549385554
    },
    {
        "content": "<p>I was casually trying to move it closer to where it's actually needed to see if it made a difference (esp since there's a conditional lower so I thought maybe it'll filter the calls a bit but I'm not sure), and will try stubbing it out as you say afterwards yeah</p>",
        "id": 157620493,
        "sender_full_name": "lqd",
        "timestamp": 1549385559
    },
    {
        "content": "<p>There's no small change that's going to fix this. It's too slow of a function to call thousands of times.</p>",
        "id": 157620545,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549385634
    },
    {
        "content": "<p>yeah</p>",
        "id": 157620606,
        "sender_full_name": "lqd",
        "timestamp": 1549385667
    },
    {
        "content": "<p>the 70k regions being checked almost with each other seemed an interesting point to investigate :)</p>",
        "id": 157620639,
        "sender_full_name": "lqd",
        "timestamp": 1549385703
    },
    {
        "content": "<p>It's written to only be called on error paths, but this was an exception because \"who writes enormous clsoures?\" <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 157620760,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549385795
    },
    {
        "content": "<p>it's likely (but would have to check) we're doing the same work multiple times here, since we're immediately going to check using the region's SCC</p>",
        "id": 157620773,
        "sender_full_name": "lqd",
        "timestamp": 1549385815
    },
    {
        "content": "<p>this closure's signature in the MIR is 50k characters <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 157620806,
        "sender_full_name": "lqd",
        "timestamp": 1549385847
    },
    {
        "content": "<p>yes, but hopefully this makes it a much smaller regression</p>",
        "id": 157620923,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549385939
    },
    {
        "content": "<p>I'll go launch the build now</p>",
        "id": 157620990,
        "sender_full_name": "lqd",
        "timestamp": 1549385996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yay not calling <code>find_outlives_blame_span</code>results in the much smaller difference you expected: around 45s on AST, and 54s with MIR borrowck :)</p>",
        "id": 157624075,
        "sender_full_name": "lqd",
        "timestamp": 1549388422
    },
    {
        "content": "<p>That's great thanks! I'll try to work out how to avoid diagnostic regressions over the next week.</p>",
        "id": 157624720,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549388868
    },
    {
        "content": "<p>np!</p>",
        "id": 157625050,
        "sender_full_name": "lqd",
        "timestamp": 1549389086
    },
    {
        "content": "<p>(IIRC less than 10 tests show a diagnostics difference here; and they're not <em>terrible</em>)</p>",
        "id": 157625193,
        "sender_full_name": "lqd",
        "timestamp": 1549389202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> btw if you need grunt work on this, experiments or whatever (as you're the one actually familiar with all this :) I'll be happy to assist just let me know</p>",
        "id": 157769612,
        "sender_full_name": "lqd",
        "timestamp": 1549539108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did you find the source for the closure with 70k regions?</p>",
        "id": 157944228,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549743760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> unfortunately the source is a mystery wrapped in a riddle wrapped in a macro, so all I have is <code>`DEBUG 2019-02-05T13:28:58Z: rustc_mir::borrow_check::nll::region_infer: check_universal_regions(mir_def_id=DefId(0/1:573 ~ rust_grammar[853b]::parse[0]::{{impl}}[67]::all[0]::{{closure}}[0]), propagated_outlives_requirements=Some([]), defns len=70860, errors_buffer len=0)</code> and the MIR dump</p>",
        "id": 158017572,
        "sender_full_name": "lqd",
        "timestamp": 1549877347
    },
    {
        "content": "<p>ah I see you've already opened a PR in the meantime</p>",
        "id": 158019656,
        "sender_full_name": "lqd",
        "timestamp": 1549879688
    },
    {
        "content": "<p>hey, thanks y'all for looking into this issue <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 158989186,
        "sender_full_name": "qmx",
        "timestamp": 1550679144
    }
]