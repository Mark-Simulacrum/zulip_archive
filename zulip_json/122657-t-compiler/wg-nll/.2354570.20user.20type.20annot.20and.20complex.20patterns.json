[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think you once sent a link to your in-progress branch here...</p>",
        "id": 135501205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121352
    },
    {
        "content": "<p>yeah its around</p>",
        "id": 135501217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121370
    },
    {
        "content": "<p>hold on one sec</p>",
        "id": 135501221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121380
    },
    {
        "content": "<p>I am looking at refactoring how user type annotations are attached to constants in order to address <a href=\"https://github.com/rust-lang/rust/issues/54574\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54574\">#54574</a> (and, I think, the other  issue assigned to me)</p>",
        "id": 135501227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121393
    },
    {
        "content": "<p>I think it will no longer suffice to just attach a <code>CanonicalTy</code></p>",
        "id": 135501236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121406
    },
    {
        "content": "<p>but actually this is probably somewhat disjoint from what you are doing</p>",
        "id": 135501242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121415
    },
    {
        "content": "<p>since it applies <em>specifically</em> to constants</p>",
        "id": 135501244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121421
    },
    {
        "content": "<p>still, I was curious to see</p>",
        "id": 135501248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121428
    },
    {
        "content": "<p>this is probably the easiest thing for me to share: <a href=\"https://github.com/pnkfelix/rust/tree/issue-54570-proj-path-into-pats-with-type\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/tree/issue-54570-proj-path-into-pats-with-type\">https://github.com/pnkfelix/rust/tree/issue-54570-proj-path-into-pats-with-type</a></p>",
        "id": 135501301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121464
    },
    {
        "content": "<p>I still need to rebase this atop your fix for the ICE</p>",
        "id": 135501316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121509
    },
    {
        "content": "<p>ok</p>",
        "id": 135501329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539121533
    },
    {
        "content": "<p>or ... hmm, well, that actually might currently be icing for an entirely different reason</p>",
        "id": 135501335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121551
    },
    {
        "content": "<p>I cannot remember, and my most recent build log shows an ice that I myself injected here</p>",
        "id": 135501393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121606
    },
    {
        "content": "<p>still, I think it captures the strategy I was planning to deploy</p>",
        "id": 135501408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121634
    },
    {
        "content": "<p>Oh  now I remember</p>",
        "id": 135501417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121652
    },
    {
        "content": "<p>Or ...  I thought I had a big comment somewhere in the commit that said \"if this works, why am I doing it this way\"</p>",
        "id": 135501505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121775
    },
    {
        "content": "<p>but now I cannot find that comment. I must have decided it didn't work. :)</p>",
        "id": 135501580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121860
    },
    {
        "content": "<p>Oh I bet its on my laptop!</p>",
        "id": 135501591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121895
    },
    {
        "content": "<p>(sorry, so much of my workflow is centered on my remote desktop.)</p>",
        "id": 135501594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121911
    },
    {
        "content": "<p>yes yes yes!</p>",
        "id": 135501647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121946
    },
    {
        "content": "<p>okay I need to push the work from my laptop to that branch</p>",
        "id": 135501654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121959
    },
    {
        "content": "<p>but the ICE I was seeing on my laptop looked like this:</p>",
        "id": 135501665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539121971
    },
    {
        "content": "<p><code>\"librustc_mir/borrow_check/nll/universal_regions.rs:754: cannot convert </code>ReScope(Remainder { block: ItemLocalId(110), first_statement_index: 1})<code> to a region vid</code></p>",
        "id": 135501693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122010
    },
    {
        "content": "<p>that is almost certainly the ICE I fixed, yes</p>",
        "id": 135501826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539122144
    },
    {
        "content": "<p>and I can see why the changes you are making might trigger it</p>",
        "id": 135501828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539122151
    },
    {
        "content": "<p>it would arise in particular if you were asserting types on more complex places that involve field projections</p>",
        "id": 135501881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539122169
    },
    {
        "content": "<p>okay github repo is updated</p>",
        "id": 135501884,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122177
    },
    {
        "content": "<p>and this is the comment slash big question to self that I was referring to up above: <a href=\"https://github.com/pnkfelix/rust/blob/30687327f112018837d227917e0331a052648b5f/src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs#L93\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/blob/30687327f112018837d227917e0331a052648b5f/src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs#L93\">https://github.com/pnkfelix/rust/blob/30687327f112018837d227917e0331a052648b5f/src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs#L93</a></p>",
        "id": 135501918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122229
    },
    {
        "content": "<p>basically, when I started on this task, I expected at some point to have to apply the series of PlaceProjections to a base other than the one I started with</p>",
        "id": 135501936,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122279
    },
    {
        "content": "<p>but that did not seem to happen</p>",
        "id": 135501996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122328
    },
    {
        "content": "<p>but I suspect I'm probably overlooking some way in which the state of the Place (or the base of the Place) gets updated between the  two points in the control flow of <code>rustc</code></p>",
        "id": 135502100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539122426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for the review. Got me off my duff and made an example that shows why we need to normalize during projection.</p>",
        "id": 136484398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540480551
    },
    {
        "content": "<p>if we weren't relatively close to cutting the beta, I'd wonder if I should be refactoring further (to fold my new code in with the code you had linked in sanitize type). But my current inclination is to try to land it as is, even with the minor amount of duplication of functionality?</p>",
        "id": 136484519,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540480643
    },
    {
        "content": "<p>(oops and clearly a last minute rebase broke my PR... will fix)</p>",
        "id": 136484535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540480673
    },
    {
        "content": "<p>ooh and oh boy I need to rebase atop PR <a href=\"https://github.com/rust-lang/rust/issues/55323\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55323\">#55323</a> anyway! Okay so I guess don't worry about a re-review until  i take care of that...</p>",
        "id": 136484692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540480797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ping me when ready</p>",
        "id": 136485496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540481432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping: I have a question about how to properly rebase this work</p>",
        "id": 136503863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540498407
    },
    {
        "content": "<p>the main question is this: You shifted the code for handling <code>TypeOf</code> to a ascribe_user_type query. It <em>looks</em> like the \"right\" way (and perhaps only way?) forward for me is to add the list of projections <em>to</em> the <code>AscribeUserType</code>.</p>",
        "id": 136506084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540500553
    },
    {
        "content": "<p>But the <code>struct AscribeUserType</code> must be <code>Copy</code>. And therefore I'm probably going to have to intern the  instances of <code>[ProjectionElem&lt;'tcx, (), ()&gt;]</code>. I can do that, it looks like a somewhat straight-forward addition. But I want you to stop me if this sounds like entirely the wrong path.</p>",
        "id": 136506164,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540500639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> why must <code>AscribeUserType</code> be copy?</p>",
        "id": 136507324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501902
    },
    {
        "content": "<p>let me think here...</p>",
        "id": 136507335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501917
    },
    {
        "content": "<p>because I tried making it non-Copy and everything went haywire?</p>",
        "id": 136507381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501926
    },
    {
        "content": "<p>heh :)</p>",
        "id": 136507386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501932
    },
    {
        "content": "<p>you could also intern them :)</p>",
        "id": 136507392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501945
    },
    {
        "content": "<p>I guess that's what you said</p>",
        "id": 136507395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501950
    },
    {
        "content": "<p>I get the impression that all the query types are Copy?</p>",
        "id": 136507397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501952
    },
    {
        "content": "<p>that may be true</p>",
        "id": 136507401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501958
    },
    {
        "content": "<p>it doesn't seem like it <em>has</em> to be true but maybe we added that requirement at some point to simplify things</p>",
        "id": 136507409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501968
    },
    {
        "content": "<p>(I didn't formally verify that. I just saw a macro that referenced <code>AscribeUserType</code> that itself requires it to be Copy. That was the impression I got from the compiler error)</p>",
        "id": 136507421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540501986
    },
    {
        "content": "<p>anyway I.. think I agree that we have to pipe those projections in with the query</p>",
        "id": 136507426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501992
    },
    {
        "content": "<p>I may be about to the stage in my second rebase attempt where I could retry the experiment of making <code>AscribeUserType</code> non-copy</p>",
        "id": 136507440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502008
    },
    {
        "content": "<p>that is, add them to the query key</p>",
        "id": 136507441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502008
    },
    {
        "content": "<p>as an aside, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>'s PR that converts canonical to use bound-tys would be mildly helpful — my initial attempt at that query had the query key including a <code>CanonicalUserTypeAnnotation</code></p>",
        "id": 136507465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502042
    },
    {
        "content": "<p>I had to back that out because we did not yet support recursive canonicalization</p>",
        "id": 136507509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502052
    },
    {
        "content": "<p>I think that should \"just work\" once <a href=\"https://github.com/rust-lang/rust/pull/55330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55330\">https://github.com/rust-lang/rust/pull/55330</a> lands</p>",
        "id": 136507519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502065
    },
    {
        "content": "<p>I guess that's sort of neither here nor there</p>",
        "id": 136507535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502085
    },
    {
        "content": "<p>okay</p>",
        "id": 136507543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502097
    },
    {
        "content": "<p>just might mean a bit less duplication</p>",
        "id": 136507544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502099
    },
    {
        "content": "<p>(the \"okay\" was largely in response to \"we have to pipe those projections in with the query\")</p>",
        "id": 136507559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502119
    },
    {
        "content": "<p>I should have tried harder to the win the race. :)</p>",
        "id": 136507566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502135
    },
    {
        "content": "<p>haha sorry</p>",
        "id": 136507634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502185
    },
    {
        "content": "<p>though fwiw it seems like fixing ICE before adding your stuff is the right way forward</p>",
        "id": 136507645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502199
    },
    {
        "content": "<p>yeah no I'm just kidding</p>",
        "id": 136507672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502232
    },
    {
        "content": "<p>I'm sure its better that this ends up on my shoulders</p>",
        "id": 136507678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502245
    },
    {
        "content": "<p>for many reasons</p>",
        "id": 136507679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502247
    },
    {
        "content": "<p>and I think I'll be able to do it tomorrow. But I don't think I'll be able to do it quickly tonight, which means I will probably just go to bed now.</p>",
        "id": 136507700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502280
    },
    {
        "content": "<p>This is why <code>AscribeUserType</code> has to be <code>Copy</code>: </p>\n<div class=\"codehilite\"><pre><span></span>error[E0204]: the trait `Copy` may not be implemented for this type\n   --&gt; librustc/ty/query/plumbing.rs:729:18\n    |\n729 |           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n    |                    ^^^^\n730 |           pub enum Query&lt;$tcx&gt; {\n731 |               $($(#[$attr])* $name($K)),*\n    |                                    -- this field does not implement `Copy`\n    |\n   ::: librustc/ty/query/mod.rs:106:1\n    |\n106 | / define_queries! { &lt;&#39;tcx&gt;\n107 | |     Other {\n108 | |         /// Records the type of every item.\n109 | |         [] fn type_of: TypeOfItem(DefId) -&gt; Ty&lt;&#39;tcx&gt;,\n...   |\n688 | |     },\n689 | | }\n    | |_- in this macro invocation\n</pre></div>",
        "id": 136507781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502363
    },
    {
        "content": "<p>are you suggesting that we might be able to just make <em>Query</em> non-copy as well?</p>",
        "id": 136507794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502386
    },
    {
        "content": "<p>welp</p>",
        "id": 136507795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502386
    },
    {
        "content": "<p>I don't know how much work that would entail</p>",
        "id": 136507802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502397
    },
    {
        "content": "<p>seems <em>plausible</em></p>",
        "id": 136507850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502403
    },
    {
        "content": "<p>otoh maybe it's better to just intern</p>",
        "id": 136507857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502408
    },
    {
        "content": "<p>it's kind of a pain</p>",
        "id": 136507859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502411
    },
    {
        "content": "<p>I think I'm better off interning the projection</p>",
        "id": 136507863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502417
    },
    {
        "content": "<p>the macros around this area are annoying I mean</p>",
        "id": 136507868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502424
    },
    {
        "content": "<p>but overall it seems probably good</p>",
        "id": 136507873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502427
    },
    {
        "content": "<p>I can at least <em>predict</em> the amount of effort attatched to that.</p>",
        "id": 136507875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502429
    },
    {
        "content": "<p>:)</p>",
        "id": 136507880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502436
    },
    {
        "content": "<p>I was musing to myself</p>",
        "id": 136507889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502447
    },
    {
        "content": "<p>whether we have any notion</p>",
        "id": 136507896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502452
    },
    {
        "content": "<p>of how much fragmentation is caused by these intern tables</p>",
        "id": 136507900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502459
    },
    {
        "content": "<p>i.e. how much a GC would reduce our rss</p>",
        "id": 136507918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502483
    },
    {
        "content": "<p>but its one of those things ... where you need to have a GC to even answer the question in the first place.</p>",
        "id": 136507931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540502510
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ping me when ready</p>\n</blockquote>\n<p>Okay PR <a href=\"https://github.com/rust-lang/rust/issues/55274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55274\">#55274</a> is now ready for review again. (I ended up merging much of the immediate review feedback into a commit during a rebase, but most of the new stuff to deal with the AscribeUserType type op is is follow-on commits, not squashed.</p>",
        "id": 136542327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540555514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 136542334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540555520
    },
    {
        "content": "<p>hup, no, apparently that was premature. :(</p>",
        "id": 136543320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540556745
    },
    {
        "content": "<p>or maybe its fine ...? I might have just hit some --keep-stage corruption on that last run, not sure yet</p>",
        "id": 136544263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540557846
    },
    {
        "content": "<p>Okay I think this is indeed ready <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> : would be awesome if we could manage to get this in before beta is cut over weekend. But not end of world if not.</p>",
        "id": 136553799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540567071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> r=me but needs rebase</p>",
        "id": 136564659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540577981
    },
    {
        "content": "<p>Yeah I hope to rebase tonight</p>",
        "id": 136565739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540579157
    }
]