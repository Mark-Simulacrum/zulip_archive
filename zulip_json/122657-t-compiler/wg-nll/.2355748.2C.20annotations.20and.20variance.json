[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 151443613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533231
    },
    {
        "content": "<p>there is an interesting issue that I've encountered while investigating <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 151443619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533247
    },
    {
        "content": "<p>you can read the comments on the issue to see where some of my investigation has taken me</p>",
        "id": 151443642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533273
    },
    {
        "content": "<p>but the latest thing is not relayed there (yet)</p>",
        "id": 151443863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533495
    },
    {
        "content": "<p>namely, I tried putting in a change that makes the user-type-annotation in question use an Invariant relation rather than a Covariant one</p>",
        "id": 151443892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533530
    },
    {
        "content": "<p>and it breaks one test (in NLL mode): run-pass/regions/regions-variance-covariant-use-covariant.rs</p>",
        "id": 151443961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533599
    },
    {
        "content": "<p>but here's the interesting tidbit</p>",
        "id": 151443966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533612
    },
    {
        "content": "<p>consider this: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f6cfa81b799084c12489344796a8ee04\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f6cfa81b799084c12489344796a8ee04\">play</a></p>",
        "id": 151444113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533797
    },
    {
        "content": "<p>namely, if we use type-ascription to attach the <code>: Covariant&lt;'static&gt;</code> annotation to the expression directly, rather than the local variable, the code gets rejected</p>",
        "id": 151444184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533830
    },
    {
        "content": "<p>I at least have not managed to wrap my head around making a consistent user-oriented story for this behavior</p>",
        "id": 151444233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544533885
    },
    {
        "content": "<p>(Well, thatâ€™s not totally true; I can sort of explain it in terms of saying that the point where the <code>co</code> is assigned into the local is a spot where subtyping takes place )</p>",
        "id": 151444562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544534247
    },
    {
        "content": "<p>also, its worth pointing out a <em>third</em> case where I do expect to see subtyping applied that is not quite the same as either of the two I've presented</p>",
        "id": 151446868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544536608
    },
    {
        "content": "<p>Here's a new playground with all three cases and a summary of the behaviors I've observed</p>",
        "id": 151446882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544536623
    },
    {
        "content": "<p>Here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6565550a5b6d9243b449e719bd18ac3d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6565550a5b6d9243b449e719bd18ac3d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6565550a5b6d9243b449e719bd18ac3d</a></p>",
        "id": 151447264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544536971
    },
    {
        "content": "<p>(maybe I will open a fresh issue about this matter, since it really has gone far afield of the core question underlying <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a> )</p>",
        "id": 151447281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537005
    },
    {
        "content": "<p>but the main point of the summary in the playground I linked above is that parameter passing still behaves as one expects (with respect to subtyping/variance)</p>",
        "id": 151447345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537055
    },
    {
        "content": "<p>and it is only the question of how ascription should behave when attached to a let binding -- should it be consistent with ascription to an expression? Or consistent with parameter passing?</p>",
        "id": 151447570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537264
    },
    {
        "content": "<p>OH! Even <em>more</em> interesting</p>",
        "id": 151447662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537312
    },
    {
        "content": "<p>the test <code>regions-variance-covariant-use-covariant.rs</code> is using <code>let _: Covariant&lt;'static&gt; = c;</code></p>",
        "id": 151447678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537332
    },
    {
        "content": "<p>(which my change is then rejecting)</p>",
        "id": 151447687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537339
    },
    {
        "content": "<p>but if you change it to <code>let _c: Covariant&lt;'static&gt; = c;</code></p>",
        "id": 151447708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537352
    },
    {
        "content": "<p>my change continues to accept</p>",
        "id": 151447719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537360
    },
    {
        "content": "<p>I think this is a sign that the my change is an improvement over the status quo</p>",
        "id": 151447736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537375
    },
    {
        "content": "<p>because ascriptions on <code>let _: T = RHS</code> bindings are IMO best interpreted as predicates directly on the RHS expression; no move is happening and thus it is not a predicate on any destination location for an assignment from RHS...</p>",
        "id": 151447820,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537437
    },
    {
        "content": "<p>here is a more complete playground covering the addition <code>_c</code> case I identified above: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6cc57e52b8465dab69a477bd08b33ba2\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6cc57e52b8465dab69a477bd08b33ba2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6cc57e52b8465dab69a477bd08b33ba2</a></p>",
        "id": 151448516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544537987
    },
    {
        "content": "<p>Also, just to be complete the record here, I have now filed an issue dedicated to the question immediately above: \"should <code>let _: T = RHS</code> be synonymous with <code>let _ = RHS: T</code>?\" <a href=\"https://github.com/rust-lang/rust/issues/56715\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56715\">#56715</a></p>",
        "id": 151524684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544621642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> sorry failed to follow up, reading now</p>",
        "id": 151543286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637885
    },
    {
        "content": "<blockquote>\n<p>I at least have not managed to wrap my head around making a consistent user-oriented story for this behavior</p>\n</blockquote>\n<p>I've been wondering about this. It seems also related to the meaning of <code>:</code> (type ascription) operator. Basically, if I follow you, it's often quite unclear whether exactly what the <code>T</code> in <code>let pat: T = ...</code> is constraining, right?</p>",
        "id": 151543551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544638103
    },
    {
        "content": "<p>You are asserting that <code>_: T</code> should be understood as constraining the RHS -- it's hard to see what else it could do. But where exactly do we draw the line?</p>",
        "id": 151543599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544638166
    },
    {
        "content": "<p>Or.. do we? I feel like perhaps the <code>T</code> has two effects?</p>\n<p>One is to be a supertype of the RHS?</p>\n<p>The other is to <em>specify</em> the types of the bindings (if any) as an \"equality\" constraint?</p>",
        "id": 151543663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544638205
    },
    {
        "content": "<p>hmm</p>",
        "id": 151560512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544645972
    },
    {
        "content": "<p>interesting, the idea of trying to divide it into two parts that way</p>",
        "id": 151560527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544645988
    },
    {
        "content": "<p>super-subtle. But also might be the only way we can hope to maintain backward compatibility while enforcing soundness</p>",
        "id": 151560600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646015
    },
    {
        "content": "<p>Yeah. I feel like I encountered this already</p>",
        "id": 151560766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I'm continuing to poke at the demo on this issue, this time atop <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's PR for <a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a></p>",
        "id": 152177609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221596
    },
    {
        "content": "<p>and I am still trying to puzzle through what the MIR does versus what it should do</p>",
        "id": 152177614,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221617
    },
    {
        "content": "<p>here is a <a href=\"https://gist.github.com/6e239bbb8643b9b2da958ef350625eb9\" target=\"_blank\" title=\"https://gist.github.com/6e239bbb8643b9b2da958ef350625eb9\">gist</a> of the MIR I am looking at (while looking in parallel at some RUST_LOG output)</p>",
        "id": 152177668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221684
    },
    {
        "content": "<p>oh this is for the source code at <a href=\"https://gist.github.com/759ae8412b56839f57aab5ae90d1ca1a\" target=\"_blank\" title=\"https://gist.github.com/759ae8412b56839f57aab5ae90d1ca1a\">this gist</a></p>",
        "id": 152177692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221748
    },
    {
        "content": "<p>so the main thing I note here is that we enforce the user-type annotation via <code>AscribeUserType(_6, +, UserTypeProjection { base: UserTypeAnnotation(2), projs: [] });</code></p>",
        "id": 152177746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221795
    },
    {
        "content": "<p>which uses <code>Variance::Covariant</code>, as we've discussed ad nauseum on this thread.</p>",
        "id": 152177750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221820
    },
    {
        "content": "<p>so my reading of that is that <code>_6</code> represents a temporary for the RHS of <code>let (mut y, mut _z): Pair&lt;&amp;u32&gt; = (s, &amp;local);</code></p>",
        "id": 152177761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221854
    },
    {
        "content": "<p>and then we subsequently bind <code>y</code> in <code>_4 = (_6.0: &amp;'_#6r u32);</code></p>",
        "id": 152177764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221881
    },
    {
        "content": "<p>but this means that we've failed to enforce any relationship between <code>'_#6r</code> and the user-type annotation</p>",
        "id": 152177809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545221906
    },
    {
        "content": "<p>well, I shouldn't say \"failed to enforce <em>any</em> relationship\"</p>",
        "id": 152177882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222008
    },
    {
        "content": "<p>but if you look at the printout of the region relationships that is in the gist for the MIR</p>",
        "id": 152177914,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222075
    },
    {
        "content": "<p>in my idealized world, the relations there would end up implying that the regions attached to the references for <code>_4</code> (<code>y</code>) and <code>_5</code> (<code>_z</code>) are equal. But those regions (<code>'_#13r</code> and <code>'_#14r</code> respectively) are not equal.</p>",
        "id": 152177982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222162
    },
    {
        "content": "<p>the MIR output there doesn't include this, but the RUST_LOG output includes lines like this: </p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::type_check: check_stmt: AscribeUserType(_6, +, UserTypeProjection { base: UserTypeAnnotation(2), projs: [] })\nDEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::type_check: relate_type_and_user_type(a=(&amp;&#39;_#15r u32, &amp;&#39;_#16r u32), v=+, user_ty=UserTypeProjection { base: UserTypeAnnotation(2), projs: [] }, locations=All(wildcard-tyvars.rs:1\\\n0:26: 10:36))\nDEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::type_check: user_ty base: UserTypeAnnotation(2) freshened: (&amp;&#39;_#22r u32, &amp;&#39;_#22r u32) projs: [] yields: Ok(Ty { ty: (&amp;&#39;_#22r u32, &amp;&#39;_#22r u32) })\nDEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::type_check::relate_tys: eq_types(a=(&amp;&#39;_#22r u32, &amp;&#39;_#22r u32), b=(&amp;&#39;_#15r u32, &amp;&#39;_#16r u32), locations=All(wildcard-tyvars.rs:10:26: 10:36))\nDEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::constraints: ConstraintSet::push(&#39;_#15r: &#39;_#22r @ All(wildcard-tyvars.rs:10:26: 10:36)\nDEBUG 2018-12-18T15:42:33Z: rustc_mir::borrow_check::nll::constraints: ConstraintSet::push(&#39;_#16r: &#39;_#22r @ All(wildcard-tyvars.rs:10:26: 10:36)\n</pre></div>",
        "id": 152178056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222262
    },
    {
        "content": "<p>so to my eye, that is where I'm associating <code>'_#22</code> with the region for the user-type annotation</p>",
        "id": 152178065,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222297
    },
    {
        "content": "<p>so in the end we end up with constraints that say (after some simplification): { <code>'_#15r : '_#22r</code>, <code>'_#16r : '_#22r</code>, <code>'_#15r : '_#13r</code>, <code>'_#16r : '_#14r</code> }</p>",
        "id": 152178263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222562
    },
    {
        "content": "<p>and I guess I'm trying to figure out whether MIR code generation should be including assertions at the uses of local variables like <code>y</code> stating that its explicitly annotated type should be a subtype of the inferred type. In order to achieve (maybe?) the end effect of directly relating <code>'_#22r</code> and <code>'_#13r</code></p>",
        "id": 152178387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222704
    },
    {
        "content": "<p>or maybe the simpler way to go is to explore the two prong solution you proposed earlier (which I'll quote immediately below)</p>",
        "id": 152178475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222787
    },
    {
        "content": "<blockquote>\n<p>Or.. do we? I feel like perhaps the <code>T</code> has two effects?</p>\n<p>One is to be a supertype of the RHS?</p>\n<p>The other is to <em>specify</em> the types of the bindings (if any) as an \"equality\" constraint?</p>\n</blockquote>\n<p>this</p>",
        "id": 152178482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545222796
    },
    {
        "content": "<p>in fact, maybe I will try to do that now</p>",
        "id": 152178779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545223097
    },
    {
        "content": "<blockquote>\n<p>in fact, maybe I will try to do that now</p>\n</blockquote>\n<p>yes, I think we actually need two distinct type assertions. I'm not totally sure what we do now, I thought that <em>was</em> what we did but...</p>",
        "id": 152210078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250891
    }
]