[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If I have an error being reported - and when it is reported the <code>MIr</code> at the time refers to a function. Inside that function is a closure that contains a captured variable from the parent function that isn't living long enough. I want to get the <code>Mir</code> of that closure that is inside. For example:</p>\n<div class=\"codehilite\"><pre><span></span>fn bar() {\n    let x = 22;\n    foo(|a| &amp;x)\n}\n</pre></div>\n\n\n<p>When the error is being reported for the above code, we've got the <code>Mir</code> and <code>mir_def_id</code> for the function <code>bar</code>. But at that point, in order to add the note that I want, I'll need to get the <code>Mir</code> (and <code>mir_def_id</code>) of the closure being passed to <code>foo</code> so I can look at the arguments and at whether it is a function or closure for when I refer to it.</p>",
        "id": 133456617,
        "sender_full_name": "davidtwco",
        "timestamp": 1536254748
    },
    {
        "content": "<p>are you sure you want the <em>MIR</em>?</p>",
        "id": 133456690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254796
    },
    {
        "content": "<p>it's not that it's necessarily hard to get, but it doesn't seem right to me</p>",
        "id": 133456695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254806
    },
    {
        "content": "<p>you can easily find out if it is a closure — and which variables it captures etc — without the MIR itself though</p>",
        "id": 133456722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254848
    },
    {
        "content": "<p>well, you can find out anyway</p>",
        "id": 133456726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536254858
    },
    {
        "content": "<p>Well, I need to find out what arguments it takes and then just how to name it.</p>",
        "id": 133456906,
        "sender_full_name": "davidtwco",
        "timestamp": 1536255057
    },
    {
        "content": "<p>In particular, I need to find out if any of the arguments are references to see if my suggestion is appropriate.</p>",
        "id": 133456920,
        "sender_full_name": "davidtwco",
        "timestamp": 1536255083
    },
    {
        "content": "<p>I've just got that check and the \"what should I call this\" code written in terms of the <code>Mir</code> currently - though that is for the parent function not the closure.</p>",
        "id": 133456977,
        "sender_full_name": "davidtwco",
        "timestamp": 1536255123
    },
    {
        "content": "<p>Won't be around much for the next few hours though.</p>",
        "id": 133457084,
        "sender_full_name": "davidtwco",
        "timestamp": 1536255265
    },
    {
        "content": "<p>can you give a bit more details about what it is you are trying to figure out?</p>",
        "id": 133463356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536261734
    },
    {
        "content": "<p>I'm trying to add an explanation for the <code>borrowed value must be valid for the static lifetime...</code> note. In particular, the explaination says something along the lines of \"we're expecting a static bound because we couldn't infer an applicable lifetime from the arguments to the function/closure\". </p>\n<p>Therefore, I'm trying to check whether or not there are arguments to the functions that are references - since that little explaination makes no sense if there aren't any applicable lifetimes in the arguments because there are no lifetimes in the arguments.</p>\n<p>I did that by just iterating over the arguments and checking for any references - via <code>Mir::args_iter</code>. But the <code>Mir</code> in this case is for the parent function and not the closure which is the arguments I'm trying to iterate over.  (I also use the <code>mir_def_id</code> field of the <code>MirBorrowckCtxt</code> to check whether it is the arguments of the \"closure\" or \"function\" I'm printing in my help message, and that's also referring to the wrong thing).</p>",
        "id": 133473121,
        "sender_full_name": "davidtwco",
        "timestamp": 1536271715
    },
    {
        "content": "<p>Hmm. I am not sure if this is the right road.</p>",
        "id": 133519391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334839
    },
    {
        "content": "<p>One challenge here is that the inference is spread across two functions:</p>",
        "id": 133519400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334849
    },
    {
        "content": "<p>The closure will infer that <code>&amp;x</code> must be borrowed for the lifetime <code>'static</code></p>",
        "id": 133519405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334859
    },
    {
        "content": "<p>it will propagate that back to the creator, which is the one that actually knows how long <code>x</code> can live</p>",
        "id": 133519420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334873
    },
    {
        "content": "<p>so — at the where we report out error — we know that the closure imposed a <code>'static</code> view but (currently, anyway) we don't have a very good view as to <em>why</em></p>",
        "id": 133519430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334897
    },
    {
        "content": "<p>we do propagate a span back</p>",
        "id": 133519431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334900
    },
    {
        "content": "<p>we could give more information back</p>",
        "id": 133519434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334903
    },
    {
        "content": "<p>one complication of that is that it might have some runtime cost, since we would be doing it all the time, not only when we are about to report an error</p>",
        "id": 133519438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536334917
    },
    {
        "content": "<p>I figure that in some cases it won't be over two functions too.</p>",
        "id": 133519630,
        "sender_full_name": "davidtwco",
        "timestamp": 1536335135
    },
    {
        "content": "<p>I guess it depends. There are many things that could extend the lifetime to <code>'static</code>, is the bottom line, and we should be \"explaining\" them</p>",
        "id": 133520379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335921
    },
    {
        "content": "<p>in this case, we can probably get a pointer to the fact that this arose from a closure constraint</p>",
        "id": 133520386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335936
    },
    {
        "content": "<p>but I think that the right bit of code to diagnose <em>why</em> the closure is imposing that constraint</p>",
        "id": 133520399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335950
    },
    {
        "content": "<p>is the closure itself</p>",
        "id": 133520400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536335952
    },
    {
        "content": "<p>Sure.</p>",
        "id": 133520688,
        "sender_full_name": "davidtwco",
        "timestamp": 1536336268
    },
    {
        "content": "<p>What approach would you like to take with this <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 133528179,
        "sender_full_name": "davidtwco",
        "timestamp": 1536344581
    },
    {
        "content": "<p>I think my first question is</p>",
        "id": 133531944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348465
    },
    {
        "content": "<p>what message do we want to give?</p>",
        "id": 133531946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348469
    },
    {
        "content": "<p>I think what I would like to see is something where we share code between the \"'a outlives 'b\" stuff and here</p>",
        "id": 133531995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348486
    },
    {
        "content": "<p>since both have the job of explaining why it is that one region outlives another</p>",
        "id": 133532000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think there were some suggestions in the issue for what the error might look like.</p>",
        "id": 133533758,
        "sender_full_name": "davidtwco",
        "timestamp": 1536350555
    },
    {
        "content": "<p>Locally, I've been adding a <code>...as no applicable lifetime from function arguments was found to match '&amp;y'</code> note for testing.</p>",
        "id": 133533942,
        "sender_full_name": "davidtwco",
        "timestamp": 1536350764
    },
    {
        "content": "<p>I feel like this is pretty wordy and not going to be that easy for people to understand</p>",
        "id": 133539312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536356965
    },
    {
        "content": "<p>Probably, we can iterate on what it actually says.</p>",
        "id": 133539388,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357039
    },
    {
        "content": "<p>The suggestions in the issue were good.</p>",
        "id": 133539396,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357058
    },
    {
        "content": "<p>in my ideal world, we would recognize that <code>'static</code> was kind of a \"hail mary\" pass</p>",
        "id": 133539408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357087
    },
    {
        "content": "<p>and not talk about it in the error at all</p>",
        "id": 133539409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357091
    },
    {
        "content": "<p>in this particular case, I think that the \"does not live long enough\" error framing is unhelpful</p>",
        "id": 133539423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357121
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: returning local variable\n  --&gt; src/main.rs:9:14\n   |\n9  |     foo(|a| &amp;x)\n   |          -  ^^ return value has to have the lifetime `&#39;1`\n   |          |\n   |          let&#39;s call the type of this `&amp;&#39;1 u32`\n   |\n</pre></div>",
        "id": 133539556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357247
    },
    {
        "content": "<p>(from issue)</p>",
        "id": 133539558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357250
    },
    {
        "content": "<p>I like that error.</p>",
        "id": 133539579,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357303
    },
    {
        "content": "<p>I agree that mentioning <code>'static</code> at all can confuse the situation - particularly if it isn't mentioned at all in the source.</p>",
        "id": 133539603,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357335
    },
    {
        "content": "<p>some further iterations in the issue</p>",
        "id": 133539833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536357600
    },
    {
        "content": "<p>I see them. I like those.</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: lifetime error\n --&gt; src/main.rs:9:14\n  |\n8 | fn foo(x: &amp;u32) -&gt; &amp;u32 {\n  |            -        -\n  |            |--------| let&#39;s call these `&#39;1`\n9 |     &amp;y\n  |      ^ `y` would have to be valid for `&#39;1`\n10| }\n  | - but `y` goes out of scope here\n</pre></div>",
        "id": 133539918,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357648
    },
    {
        "content": "<p>I like the idea of highlighting both the arg and the return type when we name it.</p>",
        "id": 133539944,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357677
    },
    {
        "content": "<p>To highlight that they are inferred as the same.</p>",
        "id": 133539956,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357684
    },
    {
        "content": "<p>As I kind-of show in the example above.</p>",
        "id": 133539964,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357696
    },
    {
        "content": "<p>let's call <em>these</em> <code>'1</code> ?</p>",
        "id": 133540009,
        "sender_full_name": "lqd",
        "timestamp": 1536357723
    },
    {
        "content": "<p>With an idea of what to aim for I should be able to experiment and see how close I can get though, so <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 133540066,
        "sender_full_name": "davidtwco",
        "timestamp": 1536357813
    },
    {
        "content": "<p>interesting :)</p>",
        "id": 133540319,
        "sender_full_name": "lqd",
        "timestamp": 1536358116
    },
    {
        "content": "<blockquote>\n<p>I like the idea of highlighting both the arg and the return type when we name it.</p>\n</blockquote>\n<p>ooh</p>",
        "id": 133542367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536360946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> maybe start on the non-closure one, I would say</p>",
        "id": 133542373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536360959
    },
    {
        "content": "<p>then we can talk about the closure details</p>",
        "id": 133542410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536360964
    },
    {
        "content": "<p>Yeah, that's what I was intending.</p>",
        "id": 133542418,
        "sender_full_name": "davidtwco",
        "timestamp": 1536360969
    },
    {
        "content": "<p>IMO, if the error is caused by returning a reference to a local variable, the error should just say that, no mention of lifetimes.</p>",
        "id": 133542763,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536361370
    },
    {
        "content": "<p>Highlighting both lifetimes in the free region errors where we just highlight the argument lifetime would definitely be an improvement though.</p>",
        "id": 133542849,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536361443
    },
    {
        "content": "<p>Hmm, so, I sort of agree and sort of not. I guess the two cases are mildly different here:</p>\n<p>In the case of the <em>closure</em>, the reason that returning a reference is wrong is because of the closure's return type. So it feels important to highlight that.</p>",
        "id": 133570803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536418800
    },
    {
        "content": "<p>In the case of the <code>fn</code>, the same is less true: it is probably just wrong no matter the return type.</p>",
        "id": 133570855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536418819
    },
    {
        "content": "<p>(I was initially trying to remove all reference to the return type in the closure case, and it felt like I couldn't explain what was going on that way)</p>",
        "id": 133570861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536418843
    },
    {
        "content": "<p>Yes, the closure case should mention lifetimes, since they matter there.</p>",
        "id": 133575217,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536427494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've been struggling with this one a little bit. I've got the error for the non-closure case working relatively well (unfortunately not as nice as what we wanted, but that's because I don't think the type of label I sent before is possible):</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534-1.rs:19:9\n   |\n17 |     fn bar(&amp;self, x: &amp;u32) -&gt; &amp;u32 {\n   |            -----              ---- also `&#39;1`\n   |            |\n   |            let&#39;s call this `&#39;1`\n18 |         let x = 22;\n19 |         &amp;x\n   |         ^^ `x` would have to be valid for `&#39;1`\n20 |     }\n   |     - but `x` dropped here while still borrowed\n\nerror[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534-1.rs:25:5\n   |\n23 | fn foo(x: &amp;u32) -&gt; &amp;u32 {\n   |           ----     ---- also `&#39;1`\n   |           |\n   |           let&#39;s call this `&#39;1`\n24 |     let x = 22;\n25 |     &amp;x\n   |     ^^ `x` would have to be valid for `&#39;1`\n26 | }\n| - but `x` dropped here while still borrowed\n</pre></div>\n\n\n<p>There are some problems though:</p>\n<p>I've currently got <code>'1</code> hardcoded (therefore making no sense with user-named lifetimes) - I've done some refactoring so I can call the region naming code (from the region inference error reporting) but it ICEs with the <code>is_universal_region</code> assertion.</p>",
        "id": 133741889,
        "sender_full_name": "davidtwco",
        "timestamp": 1536681189
    },
    {
        "content": "<p>In some cases as well, it would benefit from having the definition of the variable (<code>x</code> in the above example) labelled too.</p>",
        "id": 133741919,
        "sender_full_name": "davidtwco",
        "timestamp": 1536681227
    },
    {
        "content": "<p>can you send me your branch?</p>",
        "id": 133742112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681397
    },
    {
        "content": "<p>also,I think we can do those sorts of labels</p>",
        "id": 133742118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681400
    },
    {
        "content": "<p>via a <code>Multispan</code> thing</p>",
        "id": 133742121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681404
    },
    {
        "content": "<p>but I'm not entirely sure</p>",
        "id": 133742123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681408
    },
    {
        "content": "<p>maybe we don't support them for inline labels</p>",
        "id": 133742128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681418
    },
    {
        "content": "<p>regardless, I think that the formatting here seems fine...</p>",
        "id": 133742137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/davidtwco/rust/tree/issue-52534\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-52534\">https://github.com/davidtwco/rust/tree/issue-52534</a></p>",
        "id": 133742236,
        "sender_full_name": "davidtwco",
        "timestamp": 1536681509
    },
    {
        "content": "<p>That doesn't include the call to <code>to_error_region</code> on the <code>borrow.region</code> and then the attempt to get the name using the region naming code but it has all the foundations for that.</p>",
        "id": 133742483,
        "sender_full_name": "davidtwco",
        "timestamp": 1536681765
    },
    {
        "content": "<p>ok</p>",
        "id": 133742617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681892
    },
    {
        "content": "<p>I think what you are going to want to do is to iterate over the universal regions contained in <code>borrow.region</code>'s <em>value</em></p>",
        "id": 133742758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681978
    },
    {
        "content": "<p>but I also think this code should maybe move somewhere else</p>",
        "id": 133742770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536681990
    },
    {
        "content": "<p>I am going to go grab lunch, but I'll pull a local copy and try to form a more informed opinion</p>",
        "id": 133742786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536682003
    },
    {
        "content": "<p>Thanks, I'll give that a go.</p>",
        "id": 133742808,
        "sender_full_name": "davidtwco",
        "timestamp": 1536682033
    },
    {
        "content": "<p>I've come to the conclusion that I'm not really sure how to \"iterate over the universal regions contained in <code>borrow.regions</code>'s value\".</p>",
        "id": 133744343,
        "sender_full_name": "davidtwco",
        "timestamp": 1536683723
    },
    {
        "content": "<p>=)</p>",
        "id": 133744401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536683764
    },
    {
        "content": "<p>I attempted to call the naming function on the <code>RegionVid</code> contained in any variants with one, but that ICE'd, so it is presumably not that.</p>",
        "id": 133744409,
        "sender_full_name": "davidtwco",
        "timestamp": 1536683770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> sorry, so... what you want to do...</p>",
        "id": 133746247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536685880
    },
    {
        "content": "<p>something like this: <a href=\"https://github.com/rust-lang/rust/blob/7ee72070bdb789f58f272fab50d49bd48dd9c11f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L702-L703\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7ee72070bdb789f58f272fab50d49bd48dd9c11f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L702-L703\">https://github.com/rust-lang/rust/blob/7ee72070bdb789f58f272fab50d49bd48dd9c11f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L702-L703</a></p>",
        "id": 133746371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686038
    },
    {
        "content": "<p>but I'm not seeing any public helpers...</p>",
        "id": 133746408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686043
    },
    {
        "content": "<p>there is <a href=\"https://github.com/rust-lang/rust/blob/7ee72070bdb789f58f272fab50d49bd48dd9c11f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L867\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7ee72070bdb789f58f272fab50d49bd48dd9c11f/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L867\"><code>universal_upper_bound</code></a>, which is sort of close</p>",
        "id": 133746433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686068
    },
    {
        "content": "<p>might even do for your purposes, but it tries to combine the bounds</p>",
        "id": 133746443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686091
    },
    {
        "content": "<p>the thing here is that a region in NLL can be in general composed of the union of multiple named lifetimes</p>",
        "id": 133746464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686112
    },
    {
        "content": "<p>e.g., if you have something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">....;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133746479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686132
    },
    {
        "content": "<p>then the region for <code>x</code> might include both <code>'a</code> and <code>'b</code> — as it has to outlive both</p>",
        "id": 133746485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686143
    },
    {
        "content": "<p>if you invoke <code>universal_upper_bound</code>, it will combine those to yield <code>'static</code>, which isn't quite right</p>",
        "id": 133746497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686157
    },
    {
        "content": "<p>so you probably want to add another helper that yields up an iterator or something</p>",
        "id": 133746539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536686165
    },
    {
        "content": "<p>Sounds good, thanks.</p>",
        "id": 133746589,
        "sender_full_name": "davidtwco",
        "timestamp": 1536686230
    },
    {
        "content": "<p>That ICEs less. But there are still free regions it cannot name.</p>",
        "id": 133747433,
        "sender_full_name": "davidtwco",
        "timestamp": 1536687170
    },
    {
        "content": "<p>heh</p>",
        "id": 133747486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687241
    },
    {
        "content": "<p>example?</p>",
        "id": 133747524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687244
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: internal compiler error: librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs:181: can&#39;t make a name for free region &#39;_#1r\n  --&gt; src/test/ui/nll/issue-52534.rs:17:1\n   |\n17 | / fn bar() {\n18 | |     let x = 22;\n19 | |     foo(|a| &amp;x)\n20 | | }\n   | |_^\n\nthread &#39;main&#39; panicked at &#39;Box&lt;Any&gt;&#39;, librustc_errors/lib.rs:525:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: aborting due to previous error\n\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.30.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z borrowck=mir -Z two-phase-borrows\n</pre></div>",
        "id": 133747576,
        "sender_full_name": "davidtwco",
        "timestamp": 1536687300
    },
    {
        "content": "<p>hmm</p>",
        "id": 133747732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687425
    },
    {
        "content": "<p>can you run <code>-Zdump-mir=nll</code></p>",
        "id": 133747743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687433
    },
    {
        "content": "<p>and maybe extract the universal region part of that?</p>",
        "id": 133747753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687441
    },
    {
        "content": "<p>what is <code>_#1r</code>, I'm trying to figure out</p>",
        "id": 133747761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536687448
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/fedafbdd92a17b0e62856bad224997cf\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/fedafbdd92a17b0e62856bad224997cf\">https://gist.github.com/davidtwco/fedafbdd92a17b0e62856bad224997cf</a></p>",
        "id": 133747840,
        "sender_full_name": "davidtwco",
        "timestamp": 1536687501
    },
    {
        "content": "<p>What if you compile with <code>-Zidentify-regions -Zverbose</code>? ( I think those are the correct flags names)</p>",
        "id": 133749621,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536689196
    },
    {
        "content": "<p>Should that change the MIR output or output something new?</p>",
        "id": 133749669,
        "sender_full_name": "davidtwco",
        "timestamp": 1536689271
    },
    {
        "content": "<p>oh right so</p>",
        "id": 133749729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689317
    },
    {
        "content": "<p><code>'_#1r</code> is the free lifetime representing the function body</p>",
        "id": 133749735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689323
    },
    {
        "content": "<p>makes sense that we can't really name it</p>",
        "id": 133749741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689333
    },
    {
        "content": "<p>I think part of this is that — for the non-closure case — we ought to consider a distinct error ;)</p>",
        "id": 133749758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689360
    },
    {
        "content": "<p>that said, we could add some code to give that a name for now, just to see what output looks like, or else potentially filter it out</p>",
        "id": 133749766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689385
    },
    {
        "content": "<p>I could compare against <code>UniversalRegions.fr_fn_body</code> and skip?</p>",
        "id": 133749772,
        "sender_full_name": "davidtwco",
        "timestamp": 1536689390
    },
    {
        "content": "<p>If my understanding of what you're saying is correct at least.</p>",
        "id": 133749826,
        "sender_full_name": "davidtwco",
        "timestamp": 1536689412
    },
    {
        "content": "<p>at least for now, yes, though it doesn't sound complete long term</p>",
        "id": 133749849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689448
    },
    {
        "content": "<p>we should talk about how to deal with the closure case, though</p>",
        "id": 133749866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536689474
    },
    {
        "content": "<p>This issue is strange. It's been an oddly frustrating one as it's seemed like whatever I attempt to get spans or names or whatever it may be always seems to fail in one case but work in another.</p>",
        "id": 133749959,
        "sender_full_name": "davidtwco",
        "timestamp": 1536689581
    },
    {
        "content": "<p>I've got a local build of your branch now</p>",
        "id": 133750653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536690271
    },
    {
        "content": "<p>but I don't have your latest trial commits I guess</p>",
        "id": 133750656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536690276
    },
    {
        "content": "<p>I can push them if you'd like.</p>",
        "id": 133750663,
        "sender_full_name": "davidtwco",
        "timestamp": 1536690285
    },
    {
        "content": "<p>Pushed another WIP commit.</p>",
        "id": 133750678,
        "sender_full_name": "davidtwco",
        "timestamp": 1536690311
    },
    {
        "content": "<p>This one is printing out generally reasonable errors in the non-closure cases. I suspect it would fall down if there are multiple lifetimes involved.</p>",
        "id": 133750706,
        "sender_full_name": "davidtwco",
        "timestamp": 1536690354
    },
    {
        "content": "<p>I think using the <code>region</code> from <code>ty::TyKind::Ref(region, _, _)</code> could be beneficial now that I can name regions. Would make me more confident that the names I'm giving things make sense.</p>",
        "id": 133751050,
        "sender_full_name": "davidtwco",
        "timestamp": 1536690675
    },
    {
        "content": "<p>That is, for both the return and first argument <code>Ty</code>s.</p>",
        "id": 133751069,
        "sender_full_name": "davidtwco",
        "timestamp": 1536690700
    },
    {
        "content": "<p>one thing is that I feel like this code making labels and things probably belongs in the <code>region_name</code> module</p>",
        "id": 133751441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536691114
    },
    {
        "content": "<p>(as an aside)</p>",
        "id": 133751443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536691118
    },
    {
        "content": "<p>Yeah, I'm sure I'll move things around and comment things once I've got it working how I want.</p>",
        "id": 133751469,
        "sender_full_name": "davidtwco",
        "timestamp": 1536691158
    },
    {
        "content": "<p>I've pushed a commit (that removes the \"WIP\" ones) that tackles this in a slightly nicer (IMO) way. It doesn't handle closures but it seems to handle the other cases nicely as far as I can tell.</p>",
        "id": 133754596,
        "sender_full_name": "davidtwco",
        "timestamp": 1536694108
    },
    {
        "content": "<p>No doubt there's some way that it would completely fall on it's head that I've not thought of though.</p>",
        "id": 133754600,
        "sender_full_name": "davidtwco",
        "timestamp": 1536694123
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/issues/issue-30438-c.rs:19:5\n   |\n17 | fn silly&lt;&#39;y, &#39;z&gt;(_s: &amp;&#39;y Test&lt;&#39;z&gt;) -&gt; &amp;&#39;y &lt;Test&lt;&#39;z&gt; as Trait&gt;::Out where &#39;z: &#39;static {\n   |                       --               -- also has lifetime `&#39;y`\n   |                       |\n   |                       has lifetime `&#39;y`\n18 |     let x = Test { s: &quot;this cannot last&quot; };\n19 |     &amp;x\n   |     ^^ `x` would have to be valid for `&#39;y`\n20 |     //~^ ERROR: `x` does not live long enough\n21 | }\n   | - but `x` dropped here while still borrowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n</pre></div>",
        "id": 133754637,
        "sender_full_name": "davidtwco",
        "timestamp": 1536694181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've gotten the non-closure case where I'd like it. What ideas did you have for handling closure cases like this:</p>\n<div class=\"codehilite\"><pre><span></span>fn foo(_: impl FnOnce(&amp;u32) -&gt; &amp;u32) {\n}\n\nfn bar() {\n    let x = 22;\n    foo(|a| &amp;x)\n}\n</pre></div>",
        "id": 133811346,
        "sender_full_name": "davidtwco",
        "timestamp": 1536770576
    },
    {
        "content": "<p>well I think we have to somehow store information from the closure as part of the <code>ClosureRegionRequirements</code></p>",
        "id": 133811370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770607
    },
    {
        "content": "<p>currently we store a span</p>",
        "id": 133811372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770610
    },
    {
        "content": "<p>but I think we need to store enough info that we can recreate the error message we want</p>",
        "id": 133811383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770626
    },
    {
        "content": "<p>Alright, if I add more information to that, how do I access it where the error is reported?</p>",
        "id": 133811584,
        "sender_full_name": "davidtwco",
        "timestamp": 1536770853
    },
    {
        "content": "<p>so the <code>ClosureRegionRequirements</code> creates a bunch of \"outlives\" reuqirements</p>",
        "id": 133811770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771060
    },
    {
        "content": "<p>you would attach it to those in the form of causal information</p>",
        "id": 133811779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771073
    },
    {
        "content": "<p>I think we are using <code>Locations</code> for that</p>",
        "id": 133811873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771171
    },
    {
        "content": "<p>I imagine we would add something like</p>",
        "id": 133811874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771175
    },
    {
        "content": "<p>well, I imagine we would translate it somehow</p>",
        "id": 133811878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771182
    },
    {
        "content": "<p>we might add <code>Locations::ClosureBlahBlah</code> or something, not sure</p>",
        "id": 133811889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771194
    },
    {
        "content": "<p>the first question is... what info we are we going to keep exactly</p>",
        "id": 133811895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771201
    },
    {
        "content": "<p>I'm a bit nervous because this is stuff we have to do even without an error having been reported</p>",
        "id": 133811901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771210
    },
    {
        "content": "<p>since we don't know yet if there is an error</p>",
        "id": 133811904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771214
    },
    {
        "content": "<p>so ideally we won't do too much poking around, just store a few things and return</p>",
        "id": 133811913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771232
    },
    {
        "content": "<p>(do you know which bits of code I am talking about? want some pointers?)</p>",
        "id": 133812185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771545
    },
    {
        "content": "<p>I'll poke around and see what I come up with.</p>",
        "id": 133812195,
        "sender_full_name": "davidtwco",
        "timestamp": 1536771564
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 133812198,
        "sender_full_name": "davidtwco",
        "timestamp": 1536771567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What I've not been able to work out is: once I've created a <code>Locations</code> variant and added that with the closure constraints, how I can then access it near where the error reporting is.</p>",
        "id": 133874959,
        "sender_full_name": "davidtwco",
        "timestamp": 1536834516
    },
    {
        "content": "<p>Figured that out a bit ago. Now working out what I want to add to my variant.</p>",
        "id": 133880951,
        "sender_full_name": "davidtwco",
        "timestamp": 1536842147
    },
    {
        "content": "<p>Is the closure's <code>DefId</code> and <code>ClosureSubsts&lt;'tcx&gt;</code> too much? I'd need that to work out the signature.</p>",
        "id": 133881002,
        "sender_full_name": "davidtwco",
        "timestamp": 1536842188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok — did you  push your latest somewhere btw?</p>",
        "id": 133882003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536843287
    },
    {
        "content": "<p>Not yet.</p>",
        "id": 133882008,
        "sender_full_name": "davidtwco",
        "timestamp": 1536843297
    },
    {
        "content": "<p>Still trying to include <code>ClosureSubsts</code> since it has a lifetime it ends up propagating everywhere <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 133882023,
        "sender_full_name": "davidtwco",
        "timestamp": 1536843313
    },
    {
        "content": "<p>Hmm</p>",
        "id": 133882927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536844102
    },
    {
        "content": "<p>Yeah, I think I used to have some tcx data in there but wound up stripping it out</p>",
        "id": 133882957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536844126
    },
    {
        "content": "<p>I can't get the lifetimes to work out when I add a lifetime to <code>Locations</code> so it can include a <code>ClosureSubsts&lt;'tcx&gt;</code>. I've pushed a broken commit that has everything up to attempting that.</p>",
        "id": 133884243,
        "sender_full_name": "davidtwco",
        "timestamp": 1536845307
    },
    {
        "content": "<p>ok, let me take a look.</p>",
        "id": 133884264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536845337
    },
    {
        "content": "<p>fetching now</p>",
        "id": 133885870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846770
    },
    {
        "content": "<p>though compiler team mtg is in 10 minutes :)</p>",
        "id": 133885873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846776
    },
    {
        "content": "<p>I got my reminder for it.</p>",
        "id": 133885883,
        "sender_full_name": "davidtwco",
        "timestamp": 1536846784
    },
    {
        "content": "<p>I've tried to move some of the computation to when I add it to <code>Locations</code> so I can avoid adding something with a lifetime at that point, that didn't work.</p>",
        "id": 133886111,
        "sender_full_name": "davidtwco",
        "timestamp": 1536847003
    },
    {
        "content": "<p>Not sure if you've seen the branch since I ditched using <code>give_region_a_name</code> since none of the universal regions I could find using the technique you mentioned were the arguments or return type that I wanted - normally there wasn't any.</p>",
        "id": 133886142,
        "sender_full_name": "davidtwco",
        "timestamp": 1536847048
    },
    {
        "content": "<p>Seems that <code>Locations</code> (and types using it) rely on being <code>Copy</code> so I'm limited in that regard too.</p>",
        "id": 133891640,
        "sender_full_name": "davidtwco",
        "timestamp": 1536851531
    },
    {
        "content": "<p>Yeah, making another attempt to add a <code>ClosureSubsts&lt;'tcx&gt;</code> to the variant and it's definitely the <code>nll/constraints/graph.rs</code> code that I just can't get to work out. Since adding a lifetime to <code>Locations</code> requires adding one to <code>OutlivesConstraint</code> which this operates on.</p>",
        "id": 133894797,
        "sender_full_name": "davidtwco",
        "timestamp": 1536853986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed a commit where I attempt to include the <code>ClosureSubsts&lt;'tcx&gt;</code> that I need and fail spectacularly.</p>",
        "id": 133898415,
        "sender_full_name": "davidtwco",
        "timestamp": 1536857798
    },
    {
        "content": "<p>ok</p>",
        "id": 133898519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536857920
    },
    {
        "content": "<p>I can try to take a look now-ish, sorry, was busy earlier</p>",
        "id": 133898522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536857925
    },
    {
        "content": "<p>(incidentally, one option to address this is also indirection)</p>",
        "id": 133898710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858127
    },
    {
        "content": "<p>but I want to see if there's some other alternative</p>",
        "id": 133898715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858142
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 133898851,
        "sender_full_name": "davidtwco",
        "timestamp": 1536858335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> which test case are you running again?</p>",
        "id": 133899035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858522
    },
    {
        "content": "<p>Ah, one I have locally that I've not included with a commit. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<div class=\"codehilite\"><pre><span></span>fn foo(_: impl FnOnce(&amp;u32) -&gt; &amp;u32) {\n}\n\nfn bar() {\n    let x = 22;\n    foo(|a| &amp;x)\n}\n</pre></div>",
        "id": 133899160,
        "sender_full_name": "davidtwco",
        "timestamp": 1536858641
    },
    {
        "content": "<p>ok I want to stare at the data a bit :)</p>",
        "id": 133899195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858681
    },
    {
        "content": "<p>I'm currently considering a few things</p>",
        "id": 133899204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858700
    },
    {
        "content": "<p>one of them is that we might produce, in the closure, a bit more information about what to print</p>",
        "id": 133899216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858713
    },
    {
        "content": "<p>so that we don't have the <code>Locations</code> just say \"from this closure\" but rather something higher-level</p>",
        "id": 133899266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858748
    },
    {
        "content": "<p>that is sort of what I suggested <em>not</em> to do earlier :P</p>",
        "id": 133899268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858755
    },
    {
        "content": "<p>but maybe it makes sense</p>",
        "id": 133899271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858759
    },
    {
        "content": "<p>depends how much work it is for us to diagnose, kind of</p>",
        "id": 133899277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858768
    },
    {
        "content": "<p>in particular, it seems like these errors always come from certain kinds of interactions</p>",
        "id": 133899286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858783
    },
    {
        "content": "<p>at least I think that's true</p>",
        "id": 133899295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858788
    },
    {
        "content": "<p>e.g., escaping references that ought to be local and the like</p>",
        "id": 133899298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858795
    },
    {
        "content": "<p>and maybe we can identify those pretty cheaply</p>",
        "id": 133899299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858800
    },
    {
        "content": "<p>(I should think so)</p>",
        "id": 133899307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536858815
    },
    {
        "content": "<p>The main thing I need for the error is a way to get the type of a closure argument (so I can print it out with some synthesized lifetime). The primary issue that makes it painful is that getting the DefId for the closure and then looking it up in the HIR has a lot of TyKind::Infer. So we need to do the workarounds like including things in <code>Locations</code> in order to get anything.</p>",
        "id": 133899368,
        "sender_full_name": "davidtwco",
        "timestamp": 1536858856
    },
    {
        "content": "<p>I can't quite put my finger on why I've gotten frustrated with this PR and not with any others.</p>",
        "id": 133899470,
        "sender_full_name": "davidtwco",
        "timestamp": 1536859005
    },
    {
        "content": "<p>:)</p>",
        "id": 133899496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859077
    },
    {
        "content": "<p>this stuff is always a bit tricky</p>",
        "id": 133899537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859085
    },
    {
        "content": "<p>I wish we didn't poke at the HIR quite so much</p>",
        "id": 133899543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859092
    },
    {
        "content": "<p>but I'm not sure what else to do :P</p>",
        "id": 133899544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859096
    },
    {
        "content": "<p>anyway</p>",
        "id": 133899547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859098
    },
    {
        "content": "<p>(I'm thinking a lot lately about how to \"slice up\" rustc to have fewer interdependencies)</p>",
        "id": 133899555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859112
    },
    {
        "content": "<p>as a random comment on that example:</p>",
        "id": 133899798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859412
    },
    {
        "content": "<p>AST borrow check says:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n --&gt; /home/nmatsakis/tmp/davidtwco.rs:6:9\n  |\n6 |     foo(|a| &amp;x)\n  |         ^^^  - `x` is borrowed here\n  |         |\n  |         may outlive borrowed value `x`\nhelp: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n  |\n6 |     foo(move |a| &amp;x)\n  |         ^^^^^^^^\n</pre></div>",
        "id": 133899811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859428
    },
    {
        "content": "<p>That's not a bad error.</p>",
        "id": 133899860,
        "sender_full_name": "davidtwco",
        "timestamp": 1536859450
    },
    {
        "content": "<p>I think that \" may outlive borrowed value <code>x</code> \" is actually sort of confusing</p>",
        "id": 133899861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859452
    },
    {
        "content": "<p>yes, I worked hard on that one :)</p>",
        "id": 133899865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859458
    },
    {
        "content": "<p>I think I would prefer something like \"this closure may outlive the current function\"</p>",
        "id": 133899885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859489
    },
    {
        "content": "<p>\"the closure may outlive the current function\" is not intuitive to me.</p>",
        "id": 133899887,
        "sender_full_name": "davidtwco",
        "timestamp": 1536859490
    },
    {
        "content": "<p>lol</p>",
        "id": 133899891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859498
    },
    {
        "content": "<p>I actually think I prefer the \"escapes\" terminology</p>",
        "id": 133899895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859504
    },
    {
        "content": "<p>\"this closure escapes the current function,\"</p>",
        "id": 133899905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859515
    },
    {
        "content": "<p>but I don't really know</p>",
        "id": 133899908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859518
    },
    {
        "content": "<p>anyway, wording tweaks aside...</p>",
        "id": 133899910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859523
    },
    {
        "content": "<p>when we generate the <code>ClosureRegionRequirements</code>, we are going to be adding a <code>'x: 'static</code> constraint -- the <code>'static</code> arises beacuse we <em>had</em> a <code>'x: 'X</code> where <code>'X</code> is a local region...</p>",
        "id": 133899969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859566
    },
    {
        "content": "<p>...and you're saying you'd like to know, for the error, which argument contained <code>'X</code> (if any)</p>",
        "id": 133899977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859583
    },
    {
        "content": "<p>right?</p>",
        "id": 133899979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859586
    },
    {
        "content": "<p>I'm not sure I'm following.</p>",
        "id": 133900166,
        "sender_full_name": "davidtwco",
        "timestamp": 1536859791
    },
    {
        "content": "<p>ok so let's talk it through</p>",
        "id": 133900173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859798
    },
    {
        "content": "<p>it'll be helpful to me too :)</p>",
        "id": 133900174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859801
    },
    {
        "content": "<p>At the moment, my handling of this for functions is incredibly naive.</p>",
        "id": 133900195,
        "sender_full_name": "davidtwco",
        "timestamp": 1536859802
    },
    {
        "content": "<p>right so just ignore that for a second</p>",
        "id": 133900226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859814
    },
    {
        "content": "<p>the <code>ClosureRegionRequirements</code> for the closure are:</p>\n<div class=\"codehilite\"><pre><span></span>        ClosureRegionRequirements {\n            num_external_vids: 2,\n            outlives_requirements: [\n                ClosureOutlivesRequirement {\n                    subject: Region(\n                        &#39;_#1r\n                    ),\n                    outlived_free_region: &#39;_#0r,\n                    blame_span: /home/nmatsakis/tmp/davidtwco.rs:6:13: 6:15\n                }\n            ]\n        }\n</pre></div>",
        "id": 133900260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859866
    },
    {
        "content": "<p>(extracted from the <code>RUST_LOG=rustc_mir::borrow_check</code> output)</p>",
        "id": 133900268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859874
    },
    {
        "content": "<p>in particular, the <code>outlived_free_region</code> field is <code>_#0r</code></p>",
        "id": 133900279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859889
    },
    {
        "content": "<p>which represents <code>'static</code></p>",
        "id": 133900280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859893
    },
    {
        "content": "<p>this is the immediate source of our problems :)</p>",
        "id": 133900283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859898
    },
    {
        "content": "<p>but where did that requirement come from?</p>",
        "id": 133900292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859910
    },
    {
        "content": "<p>the answer is that, when type-checking the closure, we had to prove that <code>'_#1r: _#2r</code></p>",
        "id": 133900354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859954
    },
    {
        "content": "<p>if you skim back in the logs, you'll see that</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-09-13T17:30:31Z: rustc_mir::borrow_check::nll::region_infer: check_universal_region: fr=&#39;_#1r does not outlive shorter_fr=&#39;_#2r\n</pre></div>",
        "id": 133900371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536859972
    },
    {
        "content": "<p>(with me thus far or did I lose you? :)</p>",
        "id": 133900488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860101
    },
    {
        "content": "<p>Just trying to map what you're saying to the MIR I'm looking at.</p>",
        "id": 133900511,
        "sender_full_name": "davidtwco",
        "timestamp": 1536860134
    },
    {
        "content": "<p>more concretely, the <code>'_#1r</code> here is part of the type of the upvar <code>x</code></p>",
        "id": 133900520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860157
    },
    {
        "content": "<p>which is captured by reference</p>",
        "id": 133900521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860160
    },
    {
        "content": "<p>and has a type like <code>&amp;'_#1r X</code> for some <code>X</code></p>",
        "id": 133900562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860167
    },
    {
        "content": "<p>the <code>'_#2r</code> is a (local) region from the return type of the closure</p>",
        "id": 133900568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860177
    },
    {
        "content": "<p>(you can see those in the mir-dump)</p>",
        "id": 133900579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860187
    },
    {
        "content": "<p>Why is <code>'_#2r</code> the return type?</p>",
        "id": 133900620,
        "sender_full_name": "davidtwco",
        "timestamp": 1536860272
    },
    {
        "content": "<p>I was under the impression that the <code>'_#2r</code> would have been the argument to the closure?</p>",
        "id": 133900767,
        "sender_full_name": "davidtwco",
        "timestamp": 1536860413
    },
    {
        "content": "<p>Not sure why.</p>",
        "id": 133900773,
        "sender_full_name": "davidtwco",
        "timestamp": 1536860417
    },
    {
        "content": "<p>I think it is both</p>",
        "id": 133901232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860914
    },
    {
        "content": "<p>I think the closure's signature is <code>fn(&amp;'x) -&gt; &amp;'x</code></p>",
        "id": 133901239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860926
    },
    {
        "content": "<p>and <code>'_#2r</code> represents this <code>'x</code> here</p>",
        "id": 133901241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536860932
    },
    {
        "content": "<p>I would have expected that because of elision rules but thought the MIR would have separated the two.</p>",
        "id": 133901248,
        "sender_full_name": "davidtwco",
        "timestamp": 1536860946
    },
    {
        "content": "<p>no</p>",
        "id": 133901333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861008
    },
    {
        "content": "<p>in fn signatures, we keep the exact details</p>",
        "id": 133901338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861016
    },
    {
        "content": "<p>within the fn body, we introduce variables, because we want max flexibility</p>",
        "id": 133901347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861030
    },
    {
        "content": "<p>but we don't want to wind up with requirements that the given fn signature cannot satisfy</p>",
        "id": 133901360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861050
    },
    {
        "content": "<p>Alright, so I follow.</p>",
        "id": 133901845,
        "sender_full_name": "davidtwco",
        "timestamp": 1536861513
    },
    {
        "content": "<p>ok, so</p>",
        "id": 133902135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861755
    },
    {
        "content": "<p>let me give you a pointer to some code</p>",
        "id": 133902288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861876
    },
    {
        "content": "<p>this is <a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L984-L991\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L984-L991\">the <code>check_universal_region</code> function</a>, which is the one generating this constraint</p>",
        "id": 133902337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861915
    },
    {
        "content": "<p>er, bad link sort of</p>",
        "id": 133902354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861928
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1027-L1035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1027-L1035\">*this* is the function I meant</a></p>",
        "id": 133902357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861932
    },
    {
        "content": "<p>this is the point where we've determined that we can't locally prove the thing in question</p>",
        "id": 133902430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861973
    },
    {
        "content": "<p>and we try to propagate it out</p>",
        "id": 133902436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861977
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1070-L1071\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1070-L1071\">link</a></p>",
        "id": 133902439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861981
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1079-L1080\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1079-L1080\">this</a> is the call which will grow from <code>'_#2r</code> to <code>'_#0r</code></p>",
        "id": 133902461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862005
    },
    {
        "content": "<p>I'm trying to understand what that is doing in terms of the lifetimes we have in this case.</p>",
        "id": 133902635,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862187
    },
    {
        "content": "<p>Our <code>longer_fr</code> in this case would be <code>'_#1r</code> right? And we'd previously have \"presumed\" that it could live as long as <code>'_#2r</code>? So we try to find a smaller then larger region?</p>",
        "id": 133902711,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862238
    },
    {
        "content": "<p>Or am I getting that mixed up?</p>",
        "id": 133902716,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862243
    },
    {
        "content": "<p>that is correct</p>",
        "id": 133902825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862325
    },
    {
        "content": "<p>I'm not sure what you mean by <em>presumed</em> exactly</p>",
        "id": 133902839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862335
    },
    {
        "content": "<p>what happens is that we see you are returning a value of type <code>&amp;'_#1r T</code></p>",
        "id": 133902847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862348
    },
    {
        "content": "<p>but your expected return type is <code>&amp;'_#2r T</code></p>",
        "id": 133902854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862356
    },
    {
        "content": "<p>therefore, <code>'_#1r: '_#2r</code> must hold or else there is a type error</p>",
        "id": 133902861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862368
    },
    {
        "content": "<p>what we do is to propagate those constraints around</p>",
        "id": 133902884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862391
    },
    {
        "content": "<p>then we kind of go back over and check that everything can be satisfied</p>",
        "id": 133902893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862413
    },
    {
        "content": "<p>sorry, that's sort of confusing</p>",
        "id": 133902898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862419
    },
    {
        "content": "<p>basically, we make variables representing the things in the signature and we go back over and check that those variables weren't required to outlive anything that the signature doesn't say they outlive</p>",
        "id": 133902945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862443
    },
    {
        "content": "<p>And we do that by checking if <code>'_#1r</code> outlives everything that ends within <code>'_#2r</code>?</p>",
        "id": 133902961,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862453
    },
    {
        "content": "<p>not quite</p>",
        "id": 133902971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862463
    },
    {
        "content": "<p>in this case, <code>#_2r</code> would end up \"in\" the variable for <code>'1</code></p>",
        "id": 133902982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862480
    },
    {
        "content": "<p>we go over each such variable (each \"universal region\")</p>",
        "id": 133902995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862496
    },
    {
        "content": "<p>in this case, we are going over <code>'1</code></p>",
        "id": 133903001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862503
    },
    {
        "content": "<p>and we look at the things it was ultimately required to outlive (<code>'2</code>)</p>",
        "id": 133903014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862511
    },
    {
        "content": "<p>we check that the user declared <code>'1: '2</code></p>",
        "id": 133903019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862521
    },
    {
        "content": "<p>if they did not, then we either report an error or — in the case of a closure — we propagate it back to our creator</p>",
        "id": 133903033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862538
    },
    {
        "content": "<p>the reason we do that is because closures don't have explicit declarations of this kind</p>",
        "id": 133903043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862548
    },
    {
        "content": "<p>we are kind of inferring \"what outlives declarations does the closure need to type check\"</p>",
        "id": 133903095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862566
    },
    {
        "content": "<p>so e.g. consider a <code>fn</code> case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133903112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862587
    },
    {
        "content": "<p>here the requirement is <code>'a: 'b</code>, and that's an error because we didn't declare that</p>",
        "id": 133903121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862597
    },
    {
        "content": "<blockquote>\n<p>we go over each such variable (each \"universal region\")<br>\nin this case, we are going over '1<br>\nand we look at the things it was ultimately required to outlive ('2)</p>\n</blockquote>\n<p>I'm not following this part, but otherwise it makes sense.</p>",
        "id": 133903124,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862599
    },
    {
        "content": "<p>but if we had a <code>where 'a: 'b</code></p>",
        "id": 133903129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862605
    },
    {
        "content": "<p>in either case, the \"value\" we compute <code>'a</code> would be <code>{'a, 'b}</code></p>",
        "id": 133903139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862620
    },
    {
        "content": "<p>but then afterwards we compare that value against what the where clauses said</p>",
        "id": 133903153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862628
    },
    {
        "content": "<p>basically</p>",
        "id": 133903154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862629
    },
    {
        "content": "<p>except, for closures, we are inferring the where clauses</p>",
        "id": 133903162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862642
    },
    {
        "content": "<p>I think what I'm not understanding is the part you mentioned before about how, when we've got a <code>'a</code> and a <code>'b</code> and from the signature know that <code>'a: 'b</code> must hold how we work out (in the case of a closure where we don't just look for where clauses) if it holds or not.</p>",
        "id": 133903257,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862721
    },
    {
        "content": "<p>Essentially, what that function was doing.</p>",
        "id": 133903265,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862731
    },
    {
        "content": "<p>I kinda understood what the comments were trying to say.</p>",
        "id": 133903272,
        "sender_full_name": "davidtwco",
        "timestamp": 1536862742
    },
    {
        "content": "<p>ok.. I admit I don't quite follow this: \"the part you mentioned before ...\"</p>",
        "id": 133903617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863039
    },
    {
        "content": "<p>it may not be that important, not sure</p>",
        "id": 133903665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863046
    },
    {
        "content": "<p>that is, in some sense, the tl;dr is that — at this point in the code — we figured out that the closure requires this relationship between those two region variables</p>",
        "id": 133903691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863068
    },
    {
        "content": "<p>When you linked to the function, I'm trying to understand what that was doing and how it relates.</p>",
        "id": 133903696,
        "sender_full_name": "davidtwco",
        "timestamp": 1536863072
    },
    {
        "content": "<p>however, we don't know what values those variables have</p>",
        "id": 133903704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863088
    },
    {
        "content": "<p>so we don't know if that relationship is satisfied</p>",
        "id": 133903710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863095
    },
    {
        "content": "<p>In particular, the shrinking/growing of <code>fr</code> and adding a constraint for that.</p>",
        "id": 133903714,
        "sender_full_name": "davidtwco",
        "timestamp": 1536863099
    },
    {
        "content": "<p>so we pass the buck to our creator to figure it out by adding this constraint</p>",
        "id": 133903740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863126
    },
    {
        "content": "<blockquote>\n<p>In particular, the shrinking/growing of <code>fr</code> and adding a constraint for that.</p>\n</blockquote>\n<p>so the way that this relates</p>",
        "id": 133903749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863143
    },
    {
        "content": "<p>is that, in this case, I think we probably want to look and see that the <em>original</em> region (<code>'2</code>) was \"local\" to the closure</p>",
        "id": 133903759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863162
    },
    {
        "content": "<p>it's exactly that case where we have to \"grow\" the region (to <code>'static</code>, in this case)</p>",
        "id": 133903813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863179
    },
    {
        "content": "<p>local regions always appear somewhere in the closure signature, or else represent the closure body</p>",
        "id": 133903835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863207
    },
    {
        "content": "<p>so we could map this local region back to a region from the signature, or even to the argument(s) that contain it</p>",
        "id": 133903877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863243
    },
    {
        "content": "<p>depending on just what we want to do</p>",
        "id": 133903882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863247
    },
    {
        "content": "<p>and then I imagine we'd report back (in the <code>ClosureRegionRequirement</code>) something that carries some spans and info about this argument</p>",
        "id": 133903895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863270
    },
    {
        "content": "<p>(or else maybe just the region)</p>",
        "id": 133903944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863288
    },
    {
        "content": "<p>so that when we report the error, we can label it properly</p>",
        "id": 133903949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863295
    },
    {
        "content": "<p>Alright, I think I follow now.</p>",
        "id": 133903984,
        "sender_full_name": "davidtwco",
        "timestamp": 1536863344
    },
    {
        "content": "<p>At the very least, I understand the high-level tl;dr of it sufficiently that I'll stop holding your explanation up <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 133904006,
        "sender_full_name": "davidtwco",
        "timestamp": 1536863366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Got it to this - need to get the region naming in again and the span is off a little for the closure:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534-1.rs:19:9\n   |\n17 |     fn bar(&amp;self, x: &amp;u32) -&gt; &amp;u32 {\n   |            -----              ---- has type `&amp;u32`\n   |            |\n   |            has type `&amp;Test`\n18 |         let x = 22;\n19 |         &amp;x\n   |         ^^ `x` would have to be valid for `XXX`\n20 |     }\n   |     - but `x` dropped here while still borrowed\n\nerror[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534-1.rs:25:5\n   |\n23 | fn foo(x: &amp;u32) -&gt; &amp;u32 {\n   |           ----     ---- has type `&amp;u32`\n   |           |\n   |           has type `&amp;u32`\n24 |     let x = 22;\n25 |     &amp;x\n   |     ^^ `x` would have to be valid for `XXX`\n26 | }\n   | - but `x` dropped here while still borrowed\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0597`.\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534.rs:19:14\n   |\n19 |     foo(|a| &amp;x)\n   |           -  ^ `x` would have to be valid for `XXX`\n   |           |\n   |           has type `&amp;u32`\n20 | }\n   | - but `x` dropped here while still borrowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\n</pre></div>",
        "id": 133918421,
        "sender_full_name": "davidtwco",
        "timestamp": 1536879220
    },
    {
        "content": "<p>Other than the closure argument span off-by-one, the errors are now what I wanted them to be: submitted <a href=\"https://github.com/rust-lang/rust/issues/54229\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54229\">#54229</a>.</p>",
        "id": 133953322,
        "sender_full_name": "davidtwco",
        "timestamp": 1536932956
    },
    {
        "content": "<p>nice!</p>",
        "id": 133953489,
        "sender_full_name": "lqd",
        "timestamp": 1536933067
    },
    {
        "content": "<p>I hadn't seen cases with <code>'0</code> before</p>",
        "id": 133953742,
        "sender_full_name": "lqd",
        "timestamp": 1536933260
    },
    {
        "content": "<p>We do that with the region inference errors, we're trying it here with these errors to see if it is easier to understand.</p>",
        "id": 133953948,
        "sender_full_name": "davidtwco",
        "timestamp": 1536933472
    },
    {
        "content": "<p>Since <code>'0</code> isn't a valid lifetime that users can do.</p>",
        "id": 133953993,
        "sender_full_name": "davidtwco",
        "timestamp": 1536933483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did you mean <code>'0</code> is new, compared to e.g. <code>'a</code>? Or that <code>'0</code> is new compared to e.g <code>'1</code>, <code>'2</code> etc</p>",
        "id": 133954076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933549
    },
    {
        "content": "<p>?</p>",
        "id": 133954078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yeah, interesting</p>",
        "id": 133954090,
        "sender_full_name": "lqd",
        "timestamp": 1536933565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the '0 in the diffs of these different error messages, compared to '1 and so on yes</p>",
        "id": 133954184,
        "sender_full_name": "lqd",
        "timestamp": 1536933615
    },
    {
        "content": "<p>just checking, okay</p>",
        "id": 133954208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933631
    },
    {
        "content": "<p>Where's <code>'-1</code> / <code>'USIZE_MAX</code> <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 133954216,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536933636
    },
    {
        "content": "<p>new to me ofc :)</p>",
        "id": 133954218,
        "sender_full_name": "lqd",
        "timestamp": 1536933638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you have any tests that spit out both <code>'0</code> and <code>'1</code>, etc? I see that the code references some sort of counter in its generation of the message?</p>",
        "id": 133954390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933780
    },
    {
        "content": "<p>in particular, it would be unfortunate if we happened to reuse the same number for both a free lifetime and for one of the \"lets call this lifetime <code>'2</code> ...\" messages</p>",
        "id": 133954406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933803
    },
    {
        "content": "<p>so it'd be good to have a test demonstrating that this doesn't happen...</p>",
        "id": 133954418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536933817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I've been unable to think of an example where that would happen. Given we only ever highlight the first argument and the return type, it'll only ever be both <code>'0</code>; or <code>'0</code> and <code>'1</code>. </p>\n<p>I can't think of a example where I'm not explicitly naming lifetimes (since it'd spit out those names) and have the lifetime of the first argument and the return type be different (such that one would be <code>'0</code> and one would be <code>'1</code>) - since the elision rules (as I understand it) would make them the same?</p>",
        "id": 133955246,
        "sender_full_name": "davidtwco",
        "timestamp": 1536934537
    },
    {
        "content": "<p>so you're figuring that in fact it'll only ever be <code>'0</code> ?</p>",
        "id": 133955334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536934586
    },
    {
        "content": "<p>I don't have a problem with that, though ... we may want to .... assert it.? (!?)</p>",
        "id": 133955353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536934604
    },
    {
        "content": "<p>I think so. Perhaps if there are multiple references in the return type? a tuple of two references? But in that case we won't highlight it with this logic since it explicitly looks for a top-level <code>TyKind::Ref</code>.</p>",
        "id": 133955354,
        "sender_full_name": "davidtwco",
        "timestamp": 1536934605
    },
    {
        "content": "<p>/me wonders about the trade-offs/risks about an assert firing (and causing an ICE) vs a \"name\" collision making for a bad diagnostic...</p>",
        "id": 133955389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536934644
    },
    {
        "content": "<p>I guess a reference to a reference might do it.</p>",
        "id": 133955457,
        "sender_full_name": "davidtwco",
        "timestamp": 1536934688
    },
    {
        "content": "<p>In that case though, I'd expect we only add a <code>'0</code> to the outermost reference and then the inner one would have <code>&amp;type</code> without a name.</p>",
        "id": 133955480,
        "sender_full_name": "davidtwco",
        "timestamp": 1536934714
    },
    {
        "content": "<p>So it kind of breaks a little with a reference-to-a-reference as the return type:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/test/ui/nll/issue-52534-1.rs:30:6\n   |\n28 | fn baz(x: &amp;u32) -&gt; &amp;&amp;u32 {\n   |           ----     ----- also has type `&amp;&#39;0 u32`\n   |           |\n   |           has type `&amp;&#39;0 u32`\n29 |     let x = 22;\n30 |     &amp;&amp;x\n   |      ^^ `x` would have to be valid for `&#39;0`\n31 | }\n| - but `x` dropped here while still borrowed\n</pre></div>",
        "id": 133955875,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935046
    },
    {
        "content": "<p>Not really sure why though.</p>",
        "id": 133955882,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935055
    },
    {
        "content": "<p>Oh, I know why.</p>",
        "id": 133956027,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that is looking pretty good, did you push latest commits?</p>",
        "id": 133956528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935578
    },
    {
        "content": "<p>There's a PR linked above.</p>",
        "id": 133956535,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935584
    },
    {
        "content": "<p>Managed to do it without modifying <code>Locations</code> at all.</p>",
        "id": 133956550,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935598
    },
    {
        "content": "<p>Was able to get ahold of the <code>rustc::ty</code> types which had the closure signature whereas the <code>rustc::hir</code> types that I was trying before only had a <code>TyKind::Infer</code> for them.</p>",
        "id": 133956578,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935630
    },
    {
        "content": "<p>Fixing the case I found above just now, just building what should be the fix.</p>",
        "id": 133956662,
        "sender_full_name": "davidtwco",
        "timestamp": 1536935692
    },
    {
        "content": "<p>yeah just caught up</p>",
        "id": 133957120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936115
    },
    {
        "content": "<p>I'll take a look!</p>",
        "id": 133957161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936124
    },
    {
        "content": "<p>are you looking now for something else to do? :)</p>",
        "id": 133957166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936131
    },
    {
        "content": "<p>I guess so yeah. Do we want to tackle the slightly-off span for closures we're seeing in this PR now or is that another issue?</p>",
        "id": 133957241,
        "sender_full_name": "davidtwco",
        "timestamp": 1536936226
    },
    {
        "content": "<p>we'll probably want to do some changes</p>",
        "id": 133957312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936264
    },
    {
        "content": "<p>but I'm not sure yet</p>",
        "id": 133957317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936269
    },
    {
        "content": "<p>I probably won't review until the afternoon</p>",
        "id": 133957321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936276
    },
    {
        "content": "<p>That's fair. Gives me some time where I'm not look at these error messages.</p>",
        "id": 133957328,
        "sender_full_name": "davidtwco",
        "timestamp": 1536936293
    },
    {
        "content": "<p>I guess most of the issues are assigned</p>",
        "id": 133957373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936335
    },
    {
        "content": "<p>for NLL anyway</p>",
        "id": 133957379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936341
    },
    {
        "content": "<p>Alright, pushed a fix for the case above.</p>",
        "id": 133957896,
        "sender_full_name": "davidtwco",
        "timestamp": 1536936764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> left some nits...</p>",
        "id": 134177344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288714
    },
    {
        "content": "<p>actually I'm stll a bit confused about <a href=\"https://github.com/rust-lang/rust/pull/54229#discussion_r218503672\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54229#discussion_r218503672\">this bit</a></p>",
        "id": 134177611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537288976
    },
    {
        "content": "<p>Will take a look now.</p>",
        "id": 134178409,
        "sender_full_name": "davidtwco",
        "timestamp": 1537289695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> \"nits\" - I've updated most of the logic to now correctly handle named lifetimes too.</p>",
        "id": 134187680,
        "sender_full_name": "davidtwco",
        "timestamp": 1537299227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok</p>",
        "id": 134187746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299283
    },
    {
        "content": "<p>(I've resolved some of your comments, the ones that are just listed as outdated are still relevant I think)</p>",
        "id": 134187748,
        "sender_full_name": "davidtwco",
        "timestamp": 1537299288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so something i'm puzzling out</p>",
        "id": 134192881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304418
    },
    {
        "content": "<p>in your PR</p>",
        "id": 134192890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304428
    },
    {
        "content": "<p>the <code>annotate_argument_and_return_for_borrow</code> doesn't really know what region it's looking for, right?</p>",
        "id": 134192931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304484
    },
    {
        "content": "<p>that is, it's just kind of assuming that regions in the return type are relevant?</p>",
        "id": 134192939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304494
    },
    {
        "content": "<p>I'm wondering if this is always true</p>",
        "id": 134192945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304501
    },
    {
        "content": "<blockquote>\n<p>that is, it's just kind of assuming that regions in the return type are relevant?</p>\n</blockquote>\n<p>This is correct.</p>",
        "id": 134193053,
        "sender_full_name": "davidtwco",
        "timestamp": 1537304633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> does that error path trigger for this sort of code?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134193266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304836
    },
    {
        "content": "<p>I currently get</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `x` does not live long enough\n  --&gt; src/main.rs:8:9\n   |\n8  |         y = &amp;x;\n   |         ^^^^^^ borrowed value does not live long enough\n9  |     }\n   |     - `x` dropped here while still borrowed\n10 |\n11 |     println!(&quot;{}&quot;, y);\n   |                    - borrow later used here\n</pre></div>",
        "id": 134193275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304854
    },
    {
        "content": "<p>which looks like it would be generated by <code>report_local_value_does_not_live_long_enough</code></p>",
        "id": 134193335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304892
    },
    {
        "content": "<p>It wouldn't in that case because there is no return type.</p>",
        "id": 134193337,
        "sender_full_name": "davidtwco",
        "timestamp": 1537304896
    },
    {
        "content": "<p>yeah but if there were...</p>",
        "id": 134193341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304900
    },
    {
        "content": "<p>Let me check.</p>",
        "id": 134193345,
        "sender_full_name": "davidtwco",
        "timestamp": 1537304904
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134193356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304927
    },
    {
        "content": "<p>Yeah, that'll break it.</p>",
        "id": 134193394,
        "sender_full_name": "davidtwco",
        "timestamp": 1537304987
    },
    {
        "content": "<p>ok, I was afraid so</p>",
        "id": 134193398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537304991
    },
    {
        "content": "<p>I don't know that it'll be so hard to fix, though</p>",
        "id": 134193408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537305001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed that. It wasn't <em>hard</em> per say, but I certainly feel like the code should be simpler than it is.</p>",
        "id": 134203226,
        "sender_full_name": "davidtwco",
        "timestamp": 1537318264
    },
    {
        "content": "<p>I need to sleep now.</p>",
        "id": 134203234,
        "sender_full_name": "davidtwco",
        "timestamp": 1537318291
    }
]