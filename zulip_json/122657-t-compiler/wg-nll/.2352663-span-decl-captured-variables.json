[
    {
        "content": "<p>Looking at <a href=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409027282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52663#issuecomment-409027282\">this diagnostic improvement</a>. This is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/move_errors.rs#L238-L266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/move_errors.rs#L238-L266\">the code that produces the error</a>. I figured that I'd look up the <code>upvar_decls</code> to find the upvar and then get the span. However, normally I'd use <code>place.is_upvar_field_projection(..)</code> or look for the upvar index manually but I can't quite work it out. <a href=\"https://gist.github.com/davidtwco/85974c050a966585600913ce4361e52f\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/85974c050a966585600913ce4361e52f\">Here's the gist</a> - I'd normally expect one of the regions to be external but I might be getting mixed up. Thoughts <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 131040156,
        "sender_full_name": "davidtwco",
        "timestamp": 1533643791
    },
    {
        "content": "<p>/me looks</p>",
        "id": 131040232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533643856
    },
    {
        "content": "<p>ok so let's look at this code...</p>",
        "id": 131040260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533643919
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/move_errors.rs#L241-L247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/move_errors.rs#L241-L247\">this part is just checking that we have <code>self.foo</code> for some field</a></p>",
        "id": 131040303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533643928
    },
    {
        "content": "<p>that .. seems a bit bogus to me, I think it should be using <code>is_upvar_field_projection</code>, as you said</p>",
        "id": 131040310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533643938
    },
    {
        "content": "<p>Sorry, had to run for a moment there, back now.</p>",
        "id": 131043253,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647503
    },
    {
        "content": "<p>What I was finding is that inside that match arm, <code>is_upvar_field_projection</code> was returning <code>None</code> and therefore I wasn't able to get the definition span for the upvar.</p>",
        "id": 131043419,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647646
    },
    {
        "content": "<p>er sorry got distracted myself</p>",
        "id": 131043424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647655
    },
    {
        "content": "<p>hmm</p>",
        "id": 131043459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647676
    },
    {
        "content": "<p>Am I right in thinking that any upvars should have external regions in the MIR? This isn't related to how I want to tackle this issue, I just noticed that in the MIR, there wasn't a external region and that seemed strange.</p>",
        "id": 131043485,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647720
    },
    {
        "content": "<p>not all upvars will have external regions</p>",
        "id": 131043502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647757
    },
    {
        "content": "<p>e.g., when capturing \"by value\"</p>",
        "id": 131043522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647762
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 131043549,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647768
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 131043552,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647772
    },
    {
        "content": "<p>I'm confused why <code>is_upvar_field_projection</code> would not return true</p>",
        "id": 131043555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647779
    },
    {
        "content": "<p>I also found <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L386-L409\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L386-L409\">this function</a> which seems to be equivalent to <code>is_upvar_field_projection(..).is_some()</code>?</p>",
        "id": 131043601,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647858
    },
    {
        "content": "<p>yes</p>",
        "id": 131043652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647884
    },
    {
        "content": "<p>seems like there is some refactoring need here</p>",
        "id": 131043660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647891
    },
    {
        "content": "<p>(Since I ended up digging around related code figuring out what it used when looking up <code>upvar_decls</code> given that <code>is_upvar_field_projection</code> was returning <code>None</code>)</p>",
        "id": 131043661,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647892
    },
    {
        "content": "<p>it seems like it'd be useful to dump out the place etc</p>",
        "id": 131043665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647898
    },
    {
        "content": "<p>maybe we are confused about something</p>",
        "id": 131043669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647902
    },
    {
        "content": "<p>Give me a second, I've got a build with some logging here.</p>",
        "id": 131043681,
        "sender_full_name": "davidtwco",
        "timestamp": 1533647917
    },
    {
        "content": "<p>ok</p>",
        "id": 131043684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533647926
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/3b7e8c0bf0b8fb3cbf13c09e924350af#file-gistfile1-txt-L4370-L4371\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/3b7e8c0bf0b8fb3cbf13c09e924350af#file-gistfile1-txt-L4370-L4371\">Here we go</a> - that's the arguments and some of the intermediate variables of the <code>report</code> function I initially linked.</p>",
        "id": 131043814,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648034
    },
    {
        "content": "<p>In particular, the <code>(*_1)</code> is the place.</p>",
        "id": 131043823,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648048
    },
    {
        "content": "<p>Which makes sense, given that <code>_1</code> is the captured <code>y</code> variable.</p>",
        "id": 131043826,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648060
    },
    {
        "content": "<p>It's from <code>bb0[1]</code>.</p>",
        "id": 131043839,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648080
    },
    {
        "content": "<p>huh</p>",
        "id": 131043845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648089
    },
    {
        "content": "<p>let me check that MIR you sent</p>",
        "id": 131043850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648093
    },
    {
        "content": "<p>I'm probably missing something silly, but it made sense to me looking at it that <code>is_upvar_field_projection</code> should be a <code>Some(..)</code> with <code>_1</code>.</p>",
        "id": 131043875,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648122
    },
    {
        "content": "<p>well <code>is_upvar_field_projection</code> wants something like <code>(*_1).0</code></p>",
        "id": 131043943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648152
    },
    {
        "content": "<p>maybe we are feeding it just <code>*_1</code>?</p>",
        "id": 131043945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648157
    },
    {
        "content": "<p>Ah, that could be it.</p>",
        "id": 131043949,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648163
    },
    {
        "content": "<p>in that case, there is no speific field</p>",
        "id": 131043956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648169
    },
    {
        "content": "<p>that is, the field index comes from the <code>.0</code> part</p>",
        "id": 131043960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648173
    },
    {
        "content": "<p>maybe we have to modify the move code to give more information?</p>",
        "id": 131043965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648180
    },
    {
        "content": "<p>In this case there isn't a field I don't think.</p>",
        "id": 131043999,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648216
    },
    {
        "content": "<p>well there must be a field</p>",
        "id": 131044077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648291
    },
    {
        "content": "<p>but it's not included in the information at hand</p>",
        "id": 131044085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648299
    },
    {
        "content": "<p>I'm looking a bit to see what would be the easiest way to fix that</p>",
        "id": 131044106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648325
    },
    {
        "content": "<p>Backtracking slightly, in this <code>is_upvar</code> function, on <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L405\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L405\">this line</a> - there's an extra condition, that the upvar decl is <code>by_ref</code> - will that make it return differently from <code>is_upvar_field_projection(..).is_some()</code>?</p>",
        "id": 131044220,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648447
    },
    {
        "content": "<p>I <em>think</em> that this is where the move errors are collected:</p>",
        "id": 131044233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648473
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src/librustc_mir/dataflow/move_paths/builder.rs#L409-L412\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src/librustc_mir/dataflow/move_paths/builder.rs#L409-L412\">https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src/librustc_mir/dataflow/move_paths/builder.rs#L409-L412</a></p>",
        "id": 131044234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648474
    },
    {
        "content": "<p>in particular, if we modified <code>errors</code> from <code>Vec&lt;MoveError&lt;'tcx&gt;&gt;</code> to <code>Vec&lt;(Place&lt;'tcx&gt;, MoveError&lt;'tcx&gt;)&gt;</code></p>",
        "id": 131044291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648507
    },
    {
        "content": "<p>then we can keep along the original path</p>",
        "id": 131044293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648511
    },
    {
        "content": "<p>which is what we are missing here</p>",
        "id": 131044294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648516
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 131044304,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648526
    },
    {
        "content": "<p>what winds up happening is that we convert a <code>Place</code> like <code>(*_1).0</code> into a \"move path\"</p>",
        "id": 131044312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648532
    },
    {
        "content": "<p>this works recursively</p>",
        "id": 131044315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648536
    },
    {
        "content": "<p>so it will try to convert <code>*_1</code></p>",
        "id": 131044318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648540
    },
    {
        "content": "<p>when that fails, we don't have enough context anymore</p>",
        "id": 131044328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648546
    },
    {
        "content": "<p>but if we keep the top-level path, that would be good</p>",
        "id": 131044334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648553
    },
    {
        "content": "<p>of course, then we might wind up with something like <code>(*_1).0.1</code></p>",
        "id": 131044344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648571
    },
    {
        "content": "<p>but what we could do is to \"peel off\" projections from the original path</p>",
        "id": 131044349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648583
    },
    {
        "content": "<p>until we encounter something for which <code>is_upvar_field_projection</code> returns true</p>",
        "id": 131044355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648590
    },
    {
        "content": "<blockquote>\n<p>Backtracking slightly, in this <code>is_upvar</code> function, on <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L405\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mutability_errors.rs#L405\">this line</a> - there's an extra condition, that the upvar decl is <code>by_ref</code> - will that make it return differently from <code>is_upvar_field_projection(..).is_some()</code>?</p>\n</blockquote>\n<p>looking</p>",
        "id": 131044407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648609
    },
    {
        "content": "<p>I just spotted the <code>.0</code> part of <code>(*_1).0</code> in the MIR, I never read that properly before. <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 131044420,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648617
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that the two functions are \"morally\" equivalent</p>",
        "id": 131044433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648636
    },
    {
        "content": "<p>you are correct that <code>is_upvar</code> is a bit ... more careful</p>",
        "id": 131044438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648641
    },
    {
        "content": "<p>however</p>",
        "id": 131044443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648649
    },
    {
        "content": "<p>in practice we will never generate an access to a by-ref upvar</p>",
        "id": 131044458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648664
    },
    {
        "content": "<p>that does not have a deref</p>",
        "id": 131044466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648666
    },
    {
        "content": "<p>Just checking before refactoring slightly to use <code>is_upvar_field_projection</code> throughout.</p>",
        "id": 131044468,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648668
    },
    {
        "content": "<p>but really being careful is good</p>",
        "id": 131044477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648680
    },
    {
        "content": "<p>e.g., if we have a not by-ref upvar</p>",
        "id": 131044481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648684
    },
    {
        "content": "<p>then the MIR might be just <code>(*_1).0</code></p>",
        "id": 131044485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648693
    },
    {
        "content": "<p>whereas for a by-ref upvar we would have <code>*(*_1).0</code></p>",
        "id": 131044493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648705
    },
    {
        "content": "<p>(e.g. if the upvar has type <code>i32</code> or something)</p>",
        "id": 131044499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648713
    },
    {
        "content": "<p>it might make sense to merge the two</p>",
        "id": 131044552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648730
    },
    {
        "content": "<p>Add in an assert to the main <code>is_upvar_field_projection</code> since it shouldn't ever happen?</p>",
        "id": 131044567,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648752
    },
    {
        "content": "<p>that is, if you have some code like <code>move || *x</code> -- that will generate MIR like <code>*(*_1).0</code></p>",
        "id": 131044575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648763
    },
    {
        "content": "<p>no, I think it can happen</p>",
        "id": 131044577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648769
    },
    {
        "content": "<p><code>is_upvar_field_projection</code> will \"incorrectly\" categorize <code>*(*_1).0</code> as a field projection</p>",
        "id": 131044594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648785
    },
    {
        "content": "<p>I say \"incorrectly\" because it may never matter ..</p>",
        "id": 131044602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648795
    },
    {
        "content": "<p>but it could lead us to print <code>x</code> somewhere where we should print <code>*x</code> for example</p>",
        "id": 131044604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648802
    },
    {
        "content": "<p>I think what i'm saying is that we should maybe modify <code>is_upvar_field_projection</code> to be the same as the other one</p>",
        "id": 131044616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648839
    },
    {
        "content": "<p>but then merge everything to call just <code>is_upvar_field_projection</code></p>",
        "id": 131044655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  sorry for cutting in, this is the \"new\" def of <code>is_upvar_field_projection</code> based on new <code>Place</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Field</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">projection</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">to_ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\">  </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_closure</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_generator</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131044702,
        "sender_full_name": "csmoe",
        "timestamp": 1533648927
    },
    {
        "content": "<p>hmm what does <code>self.projection()</code> do?</p>",
        "id": 131044725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648962
    },
    {
        "content": "<p><code>place.elems.last()</code></p>",
        "id": 131044772,
        "sender_full_name": "csmoe",
        "timestamp": 1533648977
    },
    {
        "content": "<p>Does this mean we're in a race to see who will need to deal with the merge conflict of this change?</p>",
        "id": 131044780,
        "sender_full_name": "davidtwco",
        "timestamp": 1533648988
    },
    {
        "content": "<p>ok, that doesn't seem quite right then</p>",
        "id": 131044781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533648991
    },
    {
        "content": "<p>in particular, the current one includes some logic to skip derefs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131044793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649016
    },
    {
        "content": "<p>eddyb told me that in new <code>Place</code>, the projection lives in the last elems of the placeelem slice</p>",
        "id": 131044796,
        "sender_full_name": "csmoe",
        "timestamp": 1533649018
    },
    {
        "content": "<p>as I was just saying to <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, that logic is a bit aggressive</p>",
        "id": 131044799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649022
    },
    {
        "content": "<p>yes, so, I think that your version would work for e.g. a place like <code>(*_1).0</code></p>",
        "id": 131044824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649068
    },
    {
        "content": "<p>but not <code>*(*_1).0</code></p>",
        "id": 131044832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649074
    },
    {
        "content": "<p>I think it wants a kind of recursive call</p>",
        "id": 131044887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649100
    },
    {
        "content": "<p>well I'm not sure exactly how to write it but basically</p>",
        "id": 131044955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649189
    },
    {
        "content": "<p>if the final projection is a <code>Deref</code></p>",
        "id": 131044959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649193
    },
    {
        "content": "<p>then we want to look at the penultimate projection and check if it is a field</p>",
        "id": 131045017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I forget, is it easy to make a <code>Place</code> for the \"base\" path?</p>",
        "id": 131045031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649232
    },
    {
        "content": "<p>in particular, we can \"subslice\" I guess, right?</p>",
        "id": 131045037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649238
    },
    {
        "content": "<p>i.e., we have some kind of (Base, &amp;[Projections]) representation?</p>",
        "id": 131045042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649249
    },
    {
        "content": "<p>that would be useful here :)</p>",
        "id": 131045047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649256
    },
    {
        "content": "<p>the tuple repr is easy to generate</p>",
        "id": 131045062,
        "sender_full_name": "csmoe",
        "timestamp": 1533649283
    },
    {
        "content": "<p>MirBorrowckCtxt has a base_path method</p>",
        "id": 131045168,
        "sender_full_name": "csmoe",
        "timestamp": 1533649395
    },
    {
        "content": "<p>ok; it doesn't matter if it's a tuple or not per se</p>",
        "id": 131045180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MirBorrowckCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME (#16118): function intended to allow the borrow checker</span>\n<span class=\"w\">    </span><span class=\"c1\">// to be less precise in its handling of Box while still allowing</span>\n<span class=\"w\">    </span><span class=\"c1\">// moves out of a Box. They should be removed when/if we stop</span>\n<span class=\"w\">    </span><span class=\"c1\">// treating Box specially (e.g. when/if DerefMove is added...)</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">base_path</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;d</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;d</span><span class=\"w\"> </span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;d</span><span class=\"w\"> </span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"sd\">//! Returns the base of the leftmost (deepest) dereference of an</span>\n<span class=\"w\">        </span><span class=\"sd\">//! Box in `place`. If there is no dereference of an Box</span>\n<span class=\"w\">        </span><span class=\"sd\">//! in `place`, then it just returns `place` itself.</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">deepest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Place</span>::<span class=\"n\">Promo</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131045192,
        "sender_full_name": "csmoe",
        "timestamp": 1533649441
    },
    {
        "content": "<p>my main point was that if you have e.g. <code>(B, [P1, P2])</code> -- i.e., a base with two projections</p>",
        "id": 131045254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649485
    },
    {
        "content": "<p>we want to cheaply be able to make a Place like <code>(B, [P1])</code></p>",
        "id": 131045260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649494
    },
    {
        "content": "<p>or <code>(B, [])</code></p>",
        "id": 131045264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649500
    },
    {
        "content": "<p>i.e., the prefix paths</p>",
        "id": 131045266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649502
    },
    {
        "content": "<p>anyway, did you understand my concern about your \"translation\" of <code>is_upvar_field_projection</code>?</p>",
        "id": 131045275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649519
    },
    {
        "content": "<p>my <code>is_upvar_field_projection</code> just checks the \"final\" projection(<code>c</code>), it should cover like <code>b</code> in <code>base.[a, b, c]</code>?</p>",
        "id": 131045433,
        "sender_full_name": "csmoe",
        "timestamp": 1533649691
    },
    {
        "content": "<p>yes, in particular when <code>c</code> is a deref</p>",
        "id": 131045470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649769
    },
    {
        "content": "<p>for Place: <code>B.[P1, P2]</code> produce: <code>B.[]</code>, <code>B.[P1,]</code>, <code>B.[P1, P2]</code>?</p>",
        "id": 131045486,
        "sender_full_name": "csmoe",
        "timestamp": 1533649796
    },
    {
        "content": "<p>when we capture upvars, if we capture them \"by reference\", then something like <code>x</code> translates to (e.g.) <code>*self.x</code></p>",
        "id": 131045527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649804
    },
    {
        "content": "<blockquote>\n<p>for Place: <code>B.[P1, P2]</code> produce: <code>B.[]</code>, <code>B.[P1,]</code>, <code>B.[P1, P2]</code>?</p>\n</blockquote>\n<p>well, that is just a generally useful thing to be able to do</p>",
        "id": 131045541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649825
    },
    {
        "content": "<p>in this case we want logic that's like, at a high-level</p>\n<div class=\"codehilite\"><pre><span></span>is_upvar_field_projection() {\n    let mut place = self;\n    if place is a deref projection {\n        place = place.base_place();\n    }\n\n    if place is a field projection with index X {\n        if place.base_place() has closure type {\n            return Some(X)\n       }\n    }\n\n    None\n}\n</pre></div>",
        "id": 131045570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649891
    },
    {
        "content": "<p>at least, that is the current fn</p>",
        "id": 131045573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> pointed out that there is another version that is a bit more careful around the deref</p>",
        "id": 131045577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649906
    },
    {
        "content": "<p>but it would look like</p>\n<div class=\"codehilite\"><pre><span></span>is_upvar_field_projection() {\n    let mut place = self;\n    let mut by_ref = false;\n\n    if place is a deref projection {\n        place = place.base_place();\n        by_ref = true;\n    }\n\n    if place is a field projection with index X {\n        if place.base_place() has closure type {\n            if (upvar X is b reference) == by_ref {\n                return Some(X)\n             }\n       }\n    }\n\n    None\n}\n</pre></div>",
        "id": 131045629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649947
    },
    {
        "content": "<p>in any case, if I understood your code, you were missing the \"if place is a deref projection\" part</p>",
        "id": 131045646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533649968
    },
    {
        "content": "<blockquote>\n<p>well, that is just a generally useful thing to be able to do</p>\n</blockquote>\n<p>so what about create a <code>shrink</code> method for <code>Place</code>?  </p>\n<p>okay, that's clear. will fix it soon.</p>",
        "id": 131045669,
        "sender_full_name": "csmoe",
        "timestamp": 1533649994
    },
    {
        "content": "<p>then <code>base_place()</code> is <code>B.[]</code>?</p>",
        "id": 131045683,
        "sender_full_name": "csmoe",
        "timestamp": 1533650037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I wonder if we should make a <code>split_projection</code> method that returns <code>Option&lt;(Place&lt;'tcx&gt;, &amp;PlaceProjection&lt;'tcx&gt;)&gt;</code></p>",
        "id": 131046100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533650474
    },
    {
        "content": "<p>analogous to <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_last\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_last\">https://doc.rust-lang.org/std/primitive.slice.html#method.split_last</a></p>",
        "id": 131046110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533650498
    },
    {
        "content": "<p>anyway, this probably belongs in a different topic :)</p>",
        "id": 131046122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533650511
    },
    {
        "content": "<p>at this point, anyway...</p>",
        "id": 131046124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533650518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Submitted <a href=\"https://github.com/rust-lang/rust/issues/53164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53164\">#53164</a>.</p>",
        "id": 131055401,
        "sender_full_name": "davidtwco",
        "timestamp": 1533660574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/53164#pullrequestreview-144098474\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53164#pullrequestreview-144098474\">can you easily test this?</a></p>",
        "id": 131056878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662281
    },
    {
        "content": "<p>(is the test case I want clear?)</p>",
        "id": 131056919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662285
    },
    {
        "content": "<p>Yeah, it doesn't work for that.</p>",
        "id": 131057041,
        "sender_full_name": "davidtwco",
        "timestamp": 1533662436
    },
    {
        "content": "<p>Perhaps it is better to do something along the lines of <code>original_path.is_upvar_field_projection(self.mir, &amp;self.tcx).or_else(|| { place.is_upvar_field_projection(self.mir, &amp;self.tcx) })</code> rather than try modify <code>original_path</code>. Of course, the <code>place</code> that the function previously had wouldn't work as it only has <code>(*_1)</code> not <code>(*_1).0</code>.</p>",
        "id": 131057260,
        "sender_full_name": "davidtwco",
        "timestamp": 1533662650
    },
    {
        "content": "<p>well</p>",
        "id": 131057396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662769
    },
    {
        "content": "<p>what I had in mind was something like this:</p>",
        "id": 131057399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">prefixes</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">is_upvar_field_projection</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131057435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662836
    },
    {
        "content": "<p>though I don't know if the method <code>prefixes</code> exists :)</p>",
        "id": 131057439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662846
    },
    {
        "content": "<p>there is something more cumbersome:</p>",
        "id": 131057443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662851
    },
    {
        "content": "<p>Sadly, it does not.</p>",
        "id": 131057447,
        "sender_full_name": "davidtwco",
        "timestamp": 1533662858
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/struct.MirBorrowckCtxt.html#method.prefixes\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/struct.MirBorrowckCtxt.html#method.prefixes\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/struct.MirBorrowckCtxt.html#method.prefixes</a></p>",
        "id": 131057453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662871
    },
    {
        "content": "<p>we could write <code>prefixes</code> of course :)</p>",
        "id": 131057457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662877
    },
    {
        "content": "<p>or just open code it...</p>",
        "id": 131057462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662881
    },
    {
        "content": "<p>So, it does exist?</p>",
        "id": 131057505,
        "sender_full_name": "davidtwco",
        "timestamp": 1533662895
    },
    {
        "content": "<p>I only looked on <code>Place</code> itself before saying it didn't.</p>",
        "id": 131057516,
        "sender_full_name": "davidtwco",
        "timestamp": 1533662909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">is_upvar_field_project</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131057530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662927
    },
    {
        "content": "<p>the prefixes method that exists is something like <code>self.prefixes(place, PrefixSet::All)</code></p>",
        "id": 131057545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662941
    },
    {
        "content": "<p>where <code>self</code> is the <code>MirBorrowckCtxt</code></p>",
        "id": 131057564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533662948
    },
    {
        "content": "<p>Yeah, I'm trying that just now.</p>",
        "id": 131057645,
        "sender_full_name": "davidtwco",
        "timestamp": 1533663003
    },
    {
        "content": "<p>Seems to have done the job, adding that as a test case and updating the PR momentarily.</p>",
        "id": 131058399,
        "sender_full_name": "davidtwco",
        "timestamp": 1533663737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed on PR.</p>",
        "id": 131058909,
        "sender_full_name": "davidtwco",
        "timestamp": 1533664247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed PR again.</p>",
        "id": 131062664,
        "sender_full_name": "davidtwco",
        "timestamp": 1533668175
    },
    {
        "content": "<p>one annoying thing about the blue link</p>",
        "id": 131062719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533668273
    },
    {
        "content": "<p>we need a link to the PR :)</p>",
        "id": 131062720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533668275
    },
    {
        "content": "<p>I wonder if it can do two links?</p>",
        "id": 131062798,
        "sender_full_name": "davidtwco",
        "timestamp": 1533668356
    },
    {
        "content": "<p>It can.</p>",
        "id": 131062814,
        "sender_full_name": "davidtwco",
        "timestamp": 1533668379
    },
    {
        "content": "<p>I don't see any blue arrows in your zulip test...?</p>",
        "id": 131062888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533668416
    },
    {
        "content": "<p>Fixed again - I've been awful for lots of minor travis failures of late.</p>",
        "id": 131063890,
        "sender_full_name": "davidtwco",
        "timestamp": 1533669748
    },
    {
        "content": "<p>Looks like simulacrum already got it.</p>",
        "id": 131063894,
        "sender_full_name": "davidtwco",
        "timestamp": 1533669776
    },
    {
        "content": "<p>This PR needs a retry <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.</p>",
        "id": 132072715,
        "sender_full_name": "davidtwco",
        "timestamp": 1534195282
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53164\">#53164</a></p>",
        "id": 132072719,
        "sender_full_name": "davidtwco",
        "timestamp": 1534195290
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 132073072,
        "sender_full_name": "davidtwco",
        "timestamp": 1534195686
    },
    {
        "content": "<p>Rebased this after the big PR landed.</p>",
        "id": 132121491,
        "sender_full_name": "davidtwco",
        "timestamp": 1534264771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you quickly take a look at this again? It's just a rebase so nothing's really changed, just test output.</p>",
        "id": 132183883,
        "sender_full_name": "davidtwco",
        "timestamp": 1534349852
    },
    {
        "content": "<p>ok</p>",
        "id": 132184651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534350676
    }
]