[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 147624706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542142565
    },
    {
        "content": "<p>hi</p>",
        "id": 147624719,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542142580
    },
    {
        "content": "<p>you may want to read <a href=\"https://github.com/rust-lang/rust/issues/54015#issuecomment-420427995\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54015#issuecomment-420427995\">this comment</a> that I wrote on <a href=\"https://github.com/rust-lang/rust/issues/54015\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54015\">#54015</a></p>",
        "id": 147624851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542142693
    },
    {
        "content": "<p>it explains how that code is working now</p>",
        "id": 147624857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542142698
    },
    {
        "content": "<p>I'm not sure why that did not fix <a href=\"https://github.com/rust-lang/rust/issues/53773\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53773\">#53773</a></p>",
        "id": 147624872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542142717
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 147624901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542142761
    },
    {
        "content": "<p>I will start with this probably tomorrow</p>",
        "id": 147624910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542142768
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 147677180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209490
    },
    {
        "content": "<p>checking this out</p>",
        "id": 147677184,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209494
    },
    {
        "content": "<p>I see that the code compile without nll and doesn't compile with nll</p>",
        "id": 147677204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209512
    },
    {
        "content": "<p>to start with, is that correct?</p>",
        "id": 147677210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209520
    },
    {
        "content": "<p>I didn't notice that</p>",
        "id": 147677532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209798
    },
    {
        "content": "<p>good question :)</p>",
        "id": 147677535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209800
    },
    {
        "content": "<p>ah, yes, I think that's a case of NLL-fixed-by-NLL</p>",
        "id": 147677573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209834
    },
    {
        "content": "<p>so, it shouldn't compile?</p>",
        "id": 147677612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209875
    },
    {
        "content": "<p>I don't remember what's NLL-fixed-by-NLL :)</p>",
        "id": 147677658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209884
    },
    {
        "content": "<p>thinking about the example :)</p>",
        "id": 147677677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542209900
    },
    {
        "content": "<p>point is, this is supposed to error</p>",
        "id": 147677827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210004
    },
    {
        "content": "<p>yeah, I'm checking to figure out why</p>",
        "id": 147677879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210032
    },
    {
        "content": "<p>I see this <code>impl&lt;'a&gt; Drop for C&lt;'a&gt; { fn drop(&amp;mut self) { } }</code> and I guess that's why the stuff is dropped</p>",
        "id": 147677934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210090
    },
    {
        "content": "<p>but doesn't at that point you have references?</p>",
        "id": 147677947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210099
    },
    {
        "content": "<p>and C is created before that function</p>",
        "id": 147677958,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210106
    },
    {
        "content": "<p>trying to see why a <code>C</code> is created inside <code>fn error</code></p>",
        "id": 147677967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210118
    },
    {
        "content": "<blockquote>\n<p>I see this <code>impl&lt;'a&gt; Drop for C&lt;'a&gt; { fn drop(&amp;mut self) { } }</code> and I guess that's why the stuff is dropped</p>\n</blockquote>\n<p>point is that we assume <code>Drop</code> might touch the stuff in <code>C</code></p>",
        "id": 147678026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210141
    },
    {
        "content": "<p>ahhh</p>",
        "id": 147678027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210141
    },
    {
        "content": "<p><code>    fn next(&amp;mut self) -&gt; Option&lt;C&lt;'a&gt;&gt; { panic!() }</code></p>",
        "id": 147678029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210144
    },
    {
        "content": "<p>it's <code>C</code> there not <code>&amp;C</code></p>",
        "id": 147678037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210153
    },
    {
        "content": "<p>the iterator returns an owned thing</p>",
        "id": 147678062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210184
    },
    {
        "content": "<p>from the error ...</p>",
        "id": 147678774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>   Compiling playground v0.0.1 (/playground)\nerror[E0713]: borrow may still be in use when destructor runs\n  --&gt; src/main.rs:24:22\n   |\n24 |         members.push(child.raw);\n   |                      ^^^^^^^^^\n25 |     }\n   |     - here, drop of `child` needs exclusive access to `*child.raw`, because the type `C&lt;&#39;_&gt;` implements the `Drop` trait\n26 |     members.len();\n   |     ------- borrow used here, in later iteration of loop\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0713`.\nerror: Could not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</pre></div>",
        "id": 147678777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210750
    },
    {
        "content": "<p>all we want is to remove <code>, in later iteration of loop</code>, right?</p>",
        "id": 147678790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210767
    },
    {
        "content": "<p>and I also wonder if the error when you remove <code>member.len()</code> is right, which is ...</p>",
        "id": 147678862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210837
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>   Compiling playground v0.0.1 (/playground)\nerror[E0713]: borrow may still be in use when destructor runs\n  --&gt; src/main.rs:24:22\n   |\n24 |         members.push(child.raw);\n   |         -------      ^^^^^^^^^\n   |         |\n   |         borrow used here, in later iteration of loop\n25 |     }\n   |     - here, drop of `child` needs exclusive access to `*child.raw`, because the type `C&lt;&#39;_&gt;` implements the `Drop` trait\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0713`.\nerror: Could not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</pre></div>",
        "id": 147678866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210840
    },
    {
        "content": "<p>I'm unsure what \"in later iteration of the loop\" means</p>",
        "id": 147678916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542210858
    },
    {
        "content": "<p>ah, so, I think I see the problem</p>",
        "id": 147682797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214189
    },
    {
        "content": "<p>the existing code prints that message if the given point was reached via a loop backedge</p>",
        "id": 147682850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214208
    },
    {
        "content": "<p>however</p>",
        "id": 147682852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214210
    },
    {
        "content": "<p>what we want is to print the message if the given point is ONLY reachable via a loop backedge</p>",
        "id": 147682859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214219
    },
    {
        "content": "<p>i.e., here, you could reach the <code>    members.len();</code> call after traversing the for loop</p>",
        "id": 147682888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214242
    },
    {
        "content": "<p>but you might also ... not</p>",
        "id": 147682891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214246
    },
    {
        "content": "<p>actually I wonder if.. hmm</p>",
        "id": 147682897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214251
    },
    {
        "content": "<p>so ok maybe my formulation wasn't right</p>",
        "id": 147682958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214304
    },
    {
        "content": "<p>but regardless the point is:</p>",
        "id": 147682959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214309
    },
    {
        "content": "<p>the code is working \"correctly\" in some sense -- in order to reach the <code>members.len()</code> call, you have to pass through the loop backedge; the problem here is that the code in question is not \"in the loop\"</p>",
        "id": 147683028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214340
    },
    {
        "content": "<p>this is actually a bit tricky to tell</p>",
        "id": 147683045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214358
    },
    {
        "content": "<p>in a simple way</p>",
        "id": 147683051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are you following me at all?</p>",
        "id": 147683057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214373
    },
    {
        "content": "<p>hey</p>",
        "id": 147684439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542215673
    },
    {
        "content": "<p>back</p>",
        "id": 147684443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542215674
    },
    {
        "content": "<p>more or less yeah</p>",
        "id": 147684482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542215734
    },
    {
        "content": "<p>what is \"that message\", the \"in later iteration of the loop\" part or all the message?</p>",
        "id": 147684564,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542215793
    },
    {
        "content": "<p>what do you mean by loop backedge? backedge unsure what's the meaning of that in english but I have a guess :)</p>",
        "id": 147684591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542215831
    },
    {
        "content": "<blockquote>\n<p>what is \"that message\", the \"in later iteration of the loop\" part or all the message?</p>\n</blockquote>\n<p>the \"later iteration of loop\" part specifically</p>",
        "id": 147684667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215919
    },
    {
        "content": "<p>a backedge is a control-flow graph is an edge A -&gt; B where B dominates A (i.e., you can't reach A without going through B)</p>",
        "id": 147684686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215945
    },
    {
        "content": "<p>so in this case the final thing in the loop (A) branches back to the head of the loop (B)</p>",
        "id": 147684714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215993
    },
    {
        "content": "<p>what you meant is that you may skip the end of the loop and reach the <code>len()</code> call</p>",
        "id": 147684880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542216158
    },
    {
        "content": "<p>in case for instance the iterator has no elements</p>",
        "id": 147684883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542216166
    },
    {
        "content": "<p>yeah</p>",
        "id": 147685796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217122
    },
    {
        "content": "<p>but I think that was the wrong analysis</p>",
        "id": 147685801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217126
    },
    {
        "content": "<p>that is, in this example, the borrow occurs in the loop</p>",
        "id": 147685805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217134
    },
    {
        "content": "<p>it IS TRUE that we will always \"go back around the loop\" to reach the error</p>",
        "id": 147685813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217143
    },
    {
        "content": "<p>but the error was in the assumption that this meant we should say \"in a later iteration of the loop\"</p>",
        "id": 147685822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217155
    },
    {
        "content": "<p>I'm not 100% sure when we should print that :)</p>",
        "id": 147685840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542217176
    },
    {
        "content": "<p>yeah, I don't understand either</p>",
        "id": 147686194,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542217543
    },
    {
        "content": "<p>but besides from that, the text in this particular case shouldn't have that part?</p>",
        "id": 147686248,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542217564
    },
    {
        "content": "<p>is that all I need to do?</p>",
        "id": 147686252,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542217567
    },
    {
        "content": "<p>I was kind of still trying to understand what needs to be done</p>",
        "id": 147686262,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542217582
    },
    {
        "content": "<p>well we need to decide when to print that text:)</p>",
        "id": 147692232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223122
    },
    {
        "content": "<p>I'd like to come up with a relatively simple rule</p>",
        "id": 147692245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223131
    },
    {
        "content": "<p>one rule that would work but is perhaps a bit <em>too</em> conservative</p>",
        "id": 147692251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223139
    },
    {
        "content": "<p>ah well</p>",
        "id": 147692265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223151
    },
    {
        "content": "<p>ok so one thing you could do:</p>",
        "id": 147692266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223156
    },
    {
        "content": "<p>if the \"use\" dominates the \"borrow\" -- that means it <em>must</em> come \"before\" the borrow</p>",
        "id": 147692279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223176
    },
    {
        "content": "<p>in that case, printing the label is fine</p>",
        "id": 147692283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223182
    },
    {
        "content": "<p>and indeed I think we could even .. get rid of the backedge search altogether?</p>",
        "id": 147692294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, can try to get rid of that</p>",
        "id": 147692417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542223277
    },
    {
        "content": "<blockquote>\n<p>if the \"use\" dominates the \"borrow\" -- that means it <em>must</em> come \"before\" the borrow</p>\n</blockquote>\n<p>what do you mean by this?</p>",
        "id": 147692443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542223303
    },
    {
        "content": "<p>example:</p>\n<div class=\"codehilite\"><pre><span></span>let mut x = 1;\nlet mut y = &amp;22;\nloop {\n    *x += 1; // use\n    y = &amp;x; // borrow\n}\n</pre></div>",
        "id": 147693085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223806
    },
    {
        "content": "<p>however, that analysis is limited</p>",
        "id": 147693098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223812
    },
    {
        "content": "<p>I got distracted before completing</p>",
        "id": 147693101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223815
    },
    {
        "content": "<p>e.g., this would not trigger the \"next iteration of loop\" message, but arguably should</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// use</span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// borrow</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147693129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223850
    },
    {
        "content": "<p>nor would this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// use</span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// borrow</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147693145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223867
    },
    {
        "content": "<p>I think the <em>real</em> test we want is something like this:</p>\n<ul>\n<li>Did every path from the borrow to the use pass through a backedge? (As today)</li>\n<li>And is there a path from the use to the borrow? (Not something we currently check)</li>\n</ul>",
        "id": 147693166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223900
    },
    {
        "content": "<p>if so, they are part of the same loop</p>",
        "id": 147693167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542223904
    },
    {
        "content": "<p>back</p>",
        "id": 147700619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542230834
    },
    {
        "content": "<p>let me check again all this stuff</p>",
        "id": 147700625,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542230839
    },
    {
        "content": "<p>I still don't see some stuff</p>",
        "id": 147700812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231002
    },
    {
        "content": "<p>I'm more thinking as a user perspective</p>",
        "id": 147700841,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231010
    },
    {
        "content": "<p>haven't yet thought from rustc perspective</p>",
        "id": 147700860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231030
    },
    {
        "content": "<p>I guess, we want \"borrow used here in later iteration of loop\" when a value was dropped and used later in the loop</p>",
        "id": 147701028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is that right?</p>",
        "id": 147701043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231161
    },
    {
        "content": "<p>I wasn't sure I was understanding the phrase \"later iteration of loop\"</p>",
        "id": 147701107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231226
    },
    {
        "content": "<p>I guess it means that when you start iterating you have a value, you drop it and when you loop again you try to use that dropped thing</p>",
        "id": 147701208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231284
    },
    {
        "content": "<p>?</p>",
        "id": 147701210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah it's basically meant to capture cases where</p>",
        "id": 147701467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542231459
    },
    {
        "content": "<p>the execution order is not \"obvious\"</p>",
        "id": 147701478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542231470
    },
    {
        "content": "<p>particularly since the snippet doesn't show the loop</p>",
        "id": 147701489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542231480
    },
    {
        "content": "<p>actually, it might be nice to highlight the loop but anyway</p>",
        "id": 147701531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542231485
    },
    {
        "content": "<p>so e.g. something like this (not the actual labels, but same idea) would be kind of confusing</p>\n<div class=\"codehilite\"><pre><span></span>2  | do_foo();\n   | ------ then `foo` is called\n3  | do_bar();\n   | ^^^^^^ first `bar` is called\n</pre></div>\n\n\n<p>but maybe this is clearer:</p>\n<div class=\"codehilite\"><pre><span></span>2  | do_foo();\n   | ------ then `foo` is called, in a later iteration of the loop\n3  | do_bar();\n   | ^^^^^^ first `bar` is called\n</pre></div>",
        "id": 147701590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542231558
    },
    {
        "content": "<p>ok</p>",
        "id": 147701831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231749
    },
    {
        "content": "<p>now let me switch to rustc mode and read what you've said :')</p>",
        "id": 147701844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542231765
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back</p>",
        "id": 147774164,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316632
    },
    {
        "content": "<p>sorry that I ended not having time yesterday after our conversation</p>",
        "id": 147774173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316643
    },
    {
        "content": "<p>I've just read everything and makes sense</p>",
        "id": 147774182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316649
    },
    {
        "content": "<p>what I wonder is ...</p>",
        "id": 147774188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316656
    },
    {
        "content": "<blockquote>\n<p>I think the <em>real</em> test we want is something like this:</p>\n<ul>\n<li>Did every path from the borrow to the use pass through a backedge? (As today)</li>\n<li>And is there a path from the use to the borrow? (Not something we currently check)</li>\n</ul>\n</blockquote>\n<p>I wonder you're describing here the way to figure out if we are in a loop or not</p>",
        "id": 147774293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316773
    },
    {
        "content": "<p>don't we want something like ...</p>",
        "id": 147774299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316789
    },
    {
        "content": "<p>all the paths from borrow to the use pass through a backedge that is later than the use in the cfg and that back edge goes to a position that is before the use in the cfg</p>",
        "id": 147774519,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316961
    },
    {
        "content": "<p>isn't that what we want?</p>",
        "id": 147774522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542316975
    },
    {
        "content": "<p>I think that sounds roughly equivalent, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 147777520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319770
    },
    {
        "content": "<p>maybe even entirely equivalent :)</p>",
        "id": 147777532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319776
    },
    {
        "content": "<p>so in other words, \"yes\"</p>",
        "id": 147777542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319785
    },
    {
        "content": "<p>hehe, that's what I wanted to hear :)</p>",
        "id": 147780081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322031
    },
    {
        "content": "<p>now I see</p>",
        "id": 147780097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322050
    },
    {
        "content": "<p>makes sense</p>",
        "id": 147780102,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322054
    },
    {
        "content": "<p>path from the use to the borrow is equivalent and more oriented to the code that I need to write than what I've said</p>",
        "id": 147780121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322078
    },
    {
        "content": "<p>cool</p>",
        "id": 147780123,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322080
    },
    {
        "content": "<p>tomorrow I may implement this otherwise on monday</p>",
        "id": 147780171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322098
    },
    {
        "content": "<p>but seems easy :)</p>",
        "id": 147780178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542322103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why does this <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161</a> if branch fill is_loop_move and the next one doesn't?</p>",
        "id": 147829275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542387009
    },
    {
        "content": "<p>by next one I meant, <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L162\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L162\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L162</a></p>",
        "id": 147829285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542387027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey</p>",
        "id": 147987975,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655754
    },
    {
        "content": "<p>first check the questions I've left you</p>",
        "id": 147987993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655769
    },
    {
        "content": "<p>but then</p>",
        "id": 147987996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655772
    },
    {
        "content": "<p>I saw the traversed_back_edge thing you did</p>",
        "id": 147988008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655785
    },
    {
        "content": "<p>well unsure if it was you :)</p>",
        "id": 147988021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655796
    },
    {
        "content": "<p>I have a couple of questions about what do I have around</p>",
        "id": 147988122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655836
    },
    {
        "content": "<p>first, I guess from the <code>MoveData</code> structure I can get the borrow</p>",
        "id": 147988193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655893
    },
    {
        "content": "<blockquote>\n<p>I think the <em>real</em> test we want is something like this:</p>\n<ul>\n<li>Did every path from the borrow to the use pass through a backedge? (As today)</li>\n<li>And is there a path from the use to the borrow? (Not something we currently check)</li>\n</ul>\n</blockquote>\n<p>and then I was wondering, I guess I need to do something similar to what was done for the backedge, I mean, go to the get_moved_indexes fn and search the use</p>",
        "id": 147988294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655964
    },
    {
        "content": "<p>or is it the use already around?</p>",
        "id": 147988319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542655991
    },
    {
        "content": "<p>I'm searching for that info in the code</p>",
        "id": 147988327,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542656003
    },
    {
        "content": "<p>I see, I have the used_place</p>",
        "id": 147988669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542656266
    },
    {
        "content": "<p>anyway, I'm not sure where the information related to the borrow comes from</p>",
        "id": 147989507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542656867
    },
    {
        "content": "<blockquote>\n<p>first check the questions I've left you</p>\n</blockquote>\n<p>er, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry, I missed those I guess :)</p>",
        "id": 147990716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657639
    },
    {
        "content": "<blockquote>\n<p>I saw the traversed_back_edge thing you did</p>\n</blockquote>\n<p>well, it was <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>, but I was mentoring</p>",
        "id": 147990758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657670
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 147993082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542659709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you have some time and can answer the rest would be appreciated :)</p>",
        "id": 147993168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542659770
    },
    {
        "content": "<p>don't want to bother but I guess you may have missed some questions</p>",
        "id": 147993182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542659788
    },
    {
        "content": "<p>but the main sure is where do I get the borrow from</p>",
        "id": 147993235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542659859
    },
    {
        "content": "<blockquote>\n<p>why does this <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161</a> if branch fill is_loop_move and the next one doesn't?</p>\n</blockquote>\n<p>I think what <code>is_loop_move</code> is really asking is \"did we already put a label on <code>span</code>?</p>\n<p>i.e., if the use and move are not the same spot, we want to say \"value used here after move\".  Otherwise, we label it differently.</p>",
        "id": 147993365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659966
    },
    {
        "content": "<p>is there another question I missed, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 147993379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659989
    },
    {
        "content": "<blockquote>\n<p>first, I guess from the <code>MoveData</code> structure I can get the borrow</p>\n</blockquote>\n<p>oh, this</p>",
        "id": 147993441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660005
    },
    {
        "content": "<p>let me look at the code</p>",
        "id": 147993456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660018
    },
    {
        "content": "<p>yep that thing</p>",
        "id": 147993521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660089
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>why does this <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L161</a> if branch fill is_loop_move and the next one doesn't?</p>\n</blockquote>\n<p>I think what <code>is_loop_move</code> is really asking is \"did we already put a label on <code>span</code>?</p>\n<p>i.e., if the use and move are not the same spot, we want to say \"value used here after move\".  Otherwise, we label it differently.</p>\n</blockquote>\n<p>it is weird to me because both branches are about loops</p>",
        "id": 147993601,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660133
    },
    {
        "content": "<p>but one gets the is_loop_move = true and the other one not</p>",
        "id": 147993624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660148
    },
    {
        "content": "<p>check <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L156-L169\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L156-L169\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/error_reporting.rs#L156-L169</a></p>",
        "id": 147993645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660168
    },
    {
        "content": "<p>btw</p>",
        "id": 147993653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660185
    },
    {
        "content": "<p>looking at the actual diagnostic in question</p>",
        "id": 147993667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660193
    },
    {
        "content": "<blockquote>\n<p>but one gets the is_loop_move = true and the other one not</p>\n</blockquote>\n<p>the name of the variable is not good</p>",
        "id": 147993675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660204
    },
    {
        "content": "<p>but also, this part of code is for a sligthly different error</p>",
        "id": 147993681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660212
    },
    {
        "content": "<p>that is, this part of the code is for \"use after move\"</p>",
        "id": 147993685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660217
    },
    {
        "content": "<p>but <a href=\"https://github.com/rust-lang/rust/issues/53773\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53773\">#53773</a> is actually \" borrow may still be in use when destructor runs \"</p>",
        "id": 147993703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660236
    },
    {
        "content": "<p>that message appears to <a href=\"https://github.com/rust-lang/rust/blob/39852cae2b7486a7fb15a90866b9ad0b7bb7615d/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L73-L84\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/39852cae2b7486a7fb15a90866b9ad0b7bb7615d/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L73-L84\">be created here</a>,</p>",
        "id": 147993779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660274
    },
    {
        "content": "<p>based on the <code>UsedLaterInLoop</code> variant, which is <a href=\"https://github.com/rust-lang/rust/blob/39852cae2b7486a7fb15a90866b9ad0b7bb7615d/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L227-L229\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/39852cae2b7486a7fb15a90866b9ad0b7bb7615d/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L227-L229\">created here</a></p>",
        "id": 147993802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660298
    },
    {
        "content": "<p>so maybe the real question is why <code>is_borrow_location_in_loop</code> returns true</p>",
        "id": 147993813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660310
    },
    {
        "content": "<p>(I suspect, also, that maybe this code could be \"brought together\")</p>",
        "id": 147993904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660376
    },
    {
        "content": "<p>i.e., there is some kind of duplication here it feels like</p>",
        "id": 147993912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660384
    },
    {
        "content": "<p>in other words, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, I may have sent you on a bit of a wild goose chase</p>",
        "id": 147993931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660397
    },
    {
        "content": "<p>hehe, what does that mean?</p>",
        "id": 147993964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660431
    },
    {
        "content": "<p>just saying that the code I was showing you before</p>",
        "id": 147994083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660540
    },
    {
        "content": "<p>isn't actually responsible for the bug I dont' think</p>",
        "id": 147994090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660544
    },
    {
        "content": "<p>rather, this <em>other</em> logic is</p>",
        "id": 147994095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660550
    },
    {
        "content": "<p>logic which is .. kind of similar though</p>",
        "id": 147994101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542660558
    },
    {
        "content": "<p>ahh ok ok</p>",
        "id": 147994117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542660572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> weird</p>",
        "id": 147994955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542661306
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289</a></p>",
        "id": 147994959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542661307
    },
    {
        "content": "<p>I don't see how this code would return true for our example</p>",
        "id": 147995028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542661343
    },
    {
        "content": "<p>gonna investigate</p>",
        "id": 147995030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542661346
    },
    {
        "content": "<p>maybe is called with the wrong location?</p>",
        "id": 147995142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542661466
    },
    {
        "content": "<p>not sure</p>",
        "id": 147995959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542662276
    },
    {
        "content": "<p>isn't it location instead of context.loc?</p>",
        "id": 147996029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542662315
    },
    {
        "content": "<p>I was just trying with it and running but I'm not 100% will need to think and investigate a bit better</p>",
        "id": 147996068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542662347
    },
    {
        "content": "<p>using location works but it may be for another reason</p>",
        "id": 147996084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542662361
    },
    {
        "content": "<p>ok, I see what's the issue</p>",
        "id": 147996813,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542662966
    },
    {
        "content": "<p>it's what we talked about</p>",
        "id": 147996950,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542663063
    },
    {
        "content": "<p>we need to pass both locations</p>",
        "id": 147996954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542663068
    },
    {
        "content": "<p>the one of the borrow and the one of the use</p>",
        "id": 147996961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542663079
    },
    {
        "content": "<p>and check the things you mentioned</p>",
        "id": 147996970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542663087
    },
    {
        "content": "<blockquote>\n<p>I think the <em>real</em> test we want is something like this:</p>\n<ul>\n<li>Did every path from the borrow to the use pass through a backedge? (As today)</li>\n<li>And is there a path from the use to the borrow? (Not something we currently check)</li>\n</ul>\n</blockquote>\n<p>this basically</p>",
        "id": 147996990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542663118
    },
    {
        "content": "<p>yes, but applied to a different set of code I guess :)</p>",
        "id": 147998619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542664586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you mean?</p>",
        "id": 147998922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542664867
    },
    {
        "content": "<p>I just mean that the code we were talking about earlier had to do with move errors</p>",
        "id": 147998938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542664888
    },
    {
        "content": "<p>and is not executing here from what I can tell</p>",
        "id": 147998942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542664892
    },
    {
        "content": "<p>unless I'm missing something</p>",
        "id": 147998947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542664896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was talking about this <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L289</a></p>",
        "id": 147999027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542664973
    },
    {
        "content": "<p>seems that the important part is <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L227-L230\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L227-L230\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L227-L230</a></p>",
        "id": 147999046,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542664993
    },
    {
        "content": "<p>I guess that function needs to take both locations</p>",
        "id": 147999055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542665004
    },
    {
        "content": "<p>location of use and location of move</p>",
        "id": 147999059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542665009
    },
    {
        "content": "<p>and do the logic you mentioned</p>",
        "id": 147999064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542665017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah, the function currently seems to just compute whether the borrow location can reach itself</p>",
        "id": 148042563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724198
    },
    {
        "content": "<p>which isn't really an interesting question</p>",
        "id": 148042568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724202
    },
    {
        "content": "<p>thinking more about this</p>",
        "id": 148042645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724246
    },
    {
        "content": "<p>maybe we want a function like this:</p>",
        "id": 148042652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724256
    },
    {
        "content": "<p><code>can_reach_ignoring_backedges(P, Q)</code> -- is there a path from <code>P</code> to <code>Q</code> that doesn't use any backedges?</p>",
        "id": 148042669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724274
    },
    {
        "content": "<p>in that case, you could say something like this:</p>\n<ul>\n<li>if <code>can_reach_ignoring_backedges(Borrow, Use)</code> is <strong>false</strong>, then we print \"in previous iteration of loop\"</li>\n</ul>",
        "id": 148042710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724321
    },
    {
        "content": "<p>is it as simple as that? feels like it is</p>",
        "id": 148042751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724326
    },
    {
        "content": "<p>yeah, exactly</p>",
        "id": 148042842,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542724437
    },
    {
        "content": "<p>the search needs to go in forward direction and stop as soon as we reach the end and ignoring the already visited locations</p>",
        "id": 148042911,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542724490
    },
    {
        "content": "<p>and ignoring backedges</p>",
        "id": 148043197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724782
    },
    {
        "content": "<p>(any edge <code>P -&gt; Q</code> where <code>Q</code> dominates <code>P</code>)</p>",
        "id": 148043249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724805
    },
    {
        "content": "<p>yep</p>",
        "id": 148043636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542725177
    },
    {
        "content": "<p>but wouldn't just moving forward without visiting already visited locations do that already?</p>",
        "id": 148043656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542725209
    },
    {
        "content": "<p>already visited when?</p>",
        "id": 148043748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542725284
    },
    {
        "content": "<p>you're right ;)</p>",
        "id": 148043935,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542725457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was starting to build this thing</p>",
        "id": 148050112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730672
    },
    {
        "content": "<p>quick question</p>",
        "id": 148050115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        stack.extend(mir.predecessor_locations(context.loc).map(|predecessor| {\n            let is_back_edge = context.loc.dominates(predecessor, &amp;self.dominators);\n            (predecessor, is_back_edge)\n        }));\n</pre></div>",
        "id": 148050121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730677
    },
    {
        "content": "<p>this is the code of the is_back_edge stuff</p>",
        "id": 148050168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730690
    },
    {
        "content": "<p>in the code I'm writing the search is forward</p>",
        "id": 148050201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730724
    },
    {
        "content": "<p>so I'm looking at one location</p>",
        "id": 148050208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730732
    },
    {
        "content": "<p>I need to get the successors</p>",
        "id": 148050219,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730739
    },
    {
        "content": "<p>and check if successors dominates location</p>",
        "id": 148050274,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730793
    },
    {
        "content": "<p>right?</p>",
        "id": 148050275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730795
    },
    {
        "content": "<p>and the other question is ... that happens when the TerminatorKind is Goto?</p>",
        "id": 148050431,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542730910
    },
    {
        "content": "<blockquote>\n<p>right?</p>\n</blockquote>\n<p>right <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 148055938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736645
    },
    {
        "content": "<blockquote>\n<p>and the other question is ... that happens when the TerminatorKind is Goto?</p>\n</blockquote>\n<p>that should be like any other terminator, I think</p>",
        "id": 148055944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736662
    },
    {
        "content": "<p>there is a method to get the successors I think</p>",
        "id": 148055949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736674
    },
    {
        "content": "<p>I don't know why this particular method is making a difference between different terminators</p>",
        "id": 148055995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542736693
    },
    {
        "content": "<p>I guess I just should use a successors method and that's it?</p>",
        "id": 148055998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542736705
    },
    {
        "content": "<p>which method</p>",
        "id": 148055999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736706
    },
    {
        "content": "<p>oh</p>",
        "id": 148056004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736720
    },
    {
        "content": "<p>I think it's just written in ignorance of the <code>successors()</code> helper</p>",
        "id": 148056006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736728
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L317\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L317\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L317</a></p>",
        "id": 148056007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542736728
    },
    {
        "content": "<p>ok</p>",
        "id": 148056010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542736734
    },
    {
        "content": "<p>yeah, I think that <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L313-L345\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L313-L345\">all that code</a> can be replaced with one line :)</p>",
        "id": 148056013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542736740
    },
    {
        "content": "<p>hehe</p>",
        "id": 148056337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737155
    },
    {
        "content": "<p>yeah</p>",
        "id": 148056338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737156
    },
    {
        "content": "<p>ok, that thing confused me a lot</p>",
        "id": 148056365,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737163
    },
    {
        "content": "<p>and also, is the if part needed?</p>",
        "id": 148056386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737170
    },
    {
        "content": "<p>need to check successors method it may already handle that</p>",
        "id": 148056392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737182
    },
    {
        "content": "<p>ok, I need more or less this <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs#L77-L93\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs#L77-L93\">https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs#L77-L93</a></p>",
        "id": 148056616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737470
    },
    {
        "content": "<p>sounds right <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, I've wanted to make a helper for that exact bit of logic before</p>",
        "id": 148056931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542737770
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 148057111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542737979
    },
    {
        "content": "<p>thing is ready, I'm testing this</p>",
        "id": 148060258,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in case you want to check it out <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:erroneous-loop-diagnostic-in-nll\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:erroneous-loop-diagnostic-in-nll\">https://github.com/rust-lang/rust/compare/master...spastorino:erroneous-loop-diagnostic-in-nll</a></p>",
        "id": 148060644,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741529
    },
    {
        "content": "<p>if tests pass gonna open a PR</p>",
        "id": 148060656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741538
    },
    {
        "content": "<p>I'm not sure if I really need the visited_locations, since that the algorithm is already discarding back edges</p>",
        "id": 148060681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741562
    },
    {
        "content": "<p>I guess we don't and I can remove that</p>",
        "id": 148060686,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741568
    },
    {
        "content": "<p>well actually we need that despite of back edges :)</p>",
        "id": 148060797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542741633
    },
    {
        "content": "<blockquote>\n<p>well actually we need that despite of back edges :)</p>\n</blockquote>\n<p>yeah, could be a DAG</p>",
        "id": 148061247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542742023
    },
    {
        "content": "<p>I mean you don't <em>need</em> it</p>",
        "id": 148061252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542742027
    },
    {
        "content": "<p>but it's wasteful</p>",
        "id": 148061255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542742029
    },
    {
        "content": "<p>yep</p>",
        "id": 148061520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742266
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr b/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\nindex 19de3582c88..396fd6ffa0c 100644\n--- a/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\n+++ b/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\n@@ -8,13 +8,13 @@ LL |         borrow(&amp;*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n ...\n LL |     *x = box 5;\n-   |     -- mutable borrow used here, in later iteration of loop\n+   |     -- mutable borrow later used here\n\n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n   --&gt; $DIR/borrowck-lend-flow-loop.rs:109:16\n    |\n LL |         **x += 1;\n-   |         -------- mutable borrow used here, in later iteration of loop\n+   |         -------- mutable borrow later used here\n LL |         borrow(&amp;*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n ...\ndiff --git a/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr b/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\nindex 5301ee7a403..3b56c00145c 100644\n--- a/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\n+++ b/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\n@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n LL |             1 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n-   |                    first borrow used here, in later iteration of loop\n+   |                    first borrow later used here\n ...\n LL |             _ =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                              ------ first mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --&gt; $DIR/borrowck-mut-borrow-linear-errors.rs:25:30\n    |\n LL |             1 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n-   |                    ---- first borrow used here, in later iteration of loop\n+   |                    ---- first borrow later used here\n LL |             //[mir]~^ ERROR [E0499]\n LL |             2 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                              ^^^^^^ second mutable borrow occurs here\n</pre></div>",
        "id": 148061835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's changing some stuff</p>",
        "id": 148061841,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742537
    },
    {
        "content": "<p>in particular</p>",
        "id": 148061904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742567
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.rs</a></p>",
        "id": 148061905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742568
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr</a></p>",
        "id": 148061920,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742584
    },
    {
        "content": "<p>in particular this line <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L7\">https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L7</a></p>",
        "id": 148062049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742724
    },
    {
        "content": "<p>now says</p>",
        "id": 148062050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742727
    },
    {
        "content": "<p><code>first borrow later used here</code></p>",
        "id": 148062052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742729
    },
    {
        "content": "<p>and same here <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L16\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L16\">https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr#L16</a></p>",
        "id": 148062078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742768
    },
    {
        "content": "<p>I don't understand that example to be honest</p>",
        "id": 148062221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742880
    },
    {
        "content": "<p>what's wrong with it in nll mode?</p>",
        "id": 148062223,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542742886
    },
    {
        "content": "<p>also, the borrow and the use are siblings in the graph so I'm never going to reach one from the other one</p>",
        "id": 148062412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542743039
    },
    {
        "content": "<p>opened PR meanwhile we discuss <a href=\"https://github.com/rust-lang/rust/pull/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113\">https://github.com/rust-lang/rust/pull/56113</a></p>",
        "id": 148062940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542743491
    },
    {
        "content": "<blockquote>\n<p><code>first borrow later used here</code></p>\n</blockquote>\n<p>i.e., it no longer says \"in later iteration of loop\"?</p>",
        "id": 148063523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542743987
    },
    {
        "content": "<p>seems like it still <em>should</em> say that</p>",
        "id": 148063528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542743992
    },
    {
        "content": "<p>let me check the PR</p>",
        "id": 148063530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542743994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't it because borrow and use are siblings?</p>",
        "id": 148064065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542744368
    },
    {
        "content": "<p>never going to reach the arm of the match</p>",
        "id": 148064097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542744402
    },
    {
        "content": "<p>yes, so it <em>should</em> print the message</p>",
        "id": 148064402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542744712
    },
    {
        "content": "<p>i.e., if one can't reach the other without going through the loop</p>",
        "id": 148064406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542744717
    },
    {
        "content": "<p>then you say \"in later iteration of loop</p>",
        "id": 148064445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542744724
    },
    {
        "content": "<p>left a first round of nits<br>\n<a href=\"https://github.com/rust-lang/rust/pull/56113#pullrequestreview-176955464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#pullrequestreview-176955464\">https://github.com/rust-lang/rust/pull/56113#pullrequestreview-176955464</a></p>",
        "id": 148064823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745141
    },
    {
        "content": "<blockquote>\n<p>i.e., if one can't reach the other without going through the loop</p>\n</blockquote>\n<p>didn't understand what you mean here</p>",
        "id": 148064945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542745232
    },
    {
        "content": "<p>shouldn't we also print if the borrow itself is inside the loop? as it was done before</p>",
        "id": 148065003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542745279
    },
    {
        "content": "<p>nope</p>",
        "id": 148065109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745368
    },
    {
        "content": "<p>that's not really interesting</p>",
        "id": 148065113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745374
    },
    {
        "content": "<p>I mean the idea is to capture sort of surprising flow</p>",
        "id": 148065148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745411
    },
    {
        "content": "<p>if you see</p>",
        "id": 148065152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">x</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">later</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">      </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">x</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148065244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745460
    },
    {
        "content": "<p>it's a bit \"surprising\" because the use appears to come first</p>",
        "id": 148065249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745471
    },
    {
        "content": "<p>that is why we want to note \"because of a loop\"</p>",
        "id": 148065255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745478
    },
    {
        "content": "<p>but if you see <code>p = &amp;x; .. read(p);</code>, you don't really care if that's within a loop or not</p>",
        "id": 148065273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745500
    },
    {
        "content": "<p>yeah, that makes sense</p>",
        "id": 148065308,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542745527
    },
    {
        "content": "<p>what I don't see then is what's going on in those examples where changed the output</p>",
        "id": 148065335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542745551
    },
    {
        "content": "<p>as I commented on your PR, I think you just need to invert the sense of the <code>if</code></p>",
        "id": 148065564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745712
    },
    {
        "content": "<p>that is, you are saying \"print the loop message if there IS a path from borrow to use\"</p>",
        "id": 148065575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745723
    },
    {
        "content": "<p>but I think we want to print it there is NOT a path</p>",
        "id": 148065579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745728
    },
    {
        "content": "<p>or at least, no path that doesn't require backedges</p>",
        "id": 148065595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542745744
    },
    {
        "content": "<p>ok, let me check all that</p>",
        "id": 148065622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542745765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I didn't understand your feedback about visited_locations</p>",
        "id": 148066284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746330
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56113#discussion_r235154167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#discussion_r235154167\">https://github.com/rust-lang/rust/pull/56113#discussion_r235154167</a></p>",
        "id": 148066286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746332
    },
    {
        "content": "<p>should I change to a FxHashSet or remove it?</p>",
        "id": 148066294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746344
    },
    {
        "content": "<p>keep it, make it a set</p>",
        "id": 148066300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746352
    },
    {
        "content": "<p>if I should remove it, why?</p>",
        "id": 148066303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746352
    },
    {
        "content": "<p>a vector is just a poor choice of data structure for this</p>",
        "id": 148066308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746358
    },
    {
        "content": "<p>yes</p>",
        "id": 148066312,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746365
    },
    {
        "content": "<p>agree</p>",
        "id": 148066313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746367
    },
    {
        "content": "<p>but what about this <a href=\"https://github.com/rust-lang/rust/pull/56113#discussion_r235154222\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#discussion_r235154222\">https://github.com/rust-lang/rust/pull/56113#discussion_r235154222</a> ?</p>",
        "id": 148066315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess you regretted of that comment?</p>",
        "id": 148066660,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746650
    },
    {
        "content": "<p>I guess you did the if hash_set.insert thing :)</p>",
        "id": 148066724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746733
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 148066729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542746736
    },
    {
        "content": "<p>no I mean you don't need that</p>",
        "id": 148066824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746831
    },
    {
        "content": "<p>if you check instead later on</p>",
        "id": 148066828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746836
    },
    {
        "content": "<p>when you do the <code>insert</code></p>",
        "id": 148066832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746838
    },
    {
        "content": "<p>i.e., this code checks when you remove things from the stack</p>",
        "id": 148066835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746844
    },
    {
        "content": "<p>but it's better to check before you put them on</p>",
        "id": 148066839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746849
    },
    {
        "content": "<p>otherwise, you can grow the stack with a lot of duplicates</p>",
        "id": 148066842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746856
    },
    {
        "content": "<p>not super important but...</p>",
        "id": 148066844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746858
    },
    {
        "content": "<p>..it irks me:P</p>",
        "id": 148066846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746862
    },
    {
        "content": "<p>yes yes</p>",
        "id": 148067138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542747104
    },
    {
        "content": "<p>figured out after asking</p>",
        "id": 148067142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542747110
    },
    {
        "content": "<p>makes sense</p>",
        "id": 148067144,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542747111
    },
    {
        "content": "<p>that happens to me for copying code without paying a lot of attention ;)</p>",
        "id": 148067203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542747141
    },
    {
        "content": "<p>=)</p>",
        "id": 148067457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747368
    },
    {
        "content": "<p>made all the changes the issue still adds in later iteration of loop :(</p>",
        "id": 148068445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748285
    },
    {
        "content": "<p>let me take a look</p>",
        "id": 148068582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542748404
    },
    {
        "content": "<p>can you push <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> to <a href=\"https://github.com/rust-lang/rust/issues/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56113\">#56113</a> ?</p>",
        "id": 148068609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542748443
    },
    {
        "content": "<p>done</p>",
        "id": 148068680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748472
    },
    {
        "content": "<p>forgot to remove the skip locations if</p>",
        "id": 148068833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748587
    },
    {
        "content": "<p>but still that shouldn't make any difference</p>",
        "id": 148068836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748594
    },
    {
        "content": "<p>!location.dominates shouldn't be just location.dominates?</p>",
        "id": 148068882,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748682
    },
    {
        "content": "<p>because you're filtering those</p>",
        "id": 148068936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748697
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 148069187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542748886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was wrong in what I've said, still doesn't work</p>",
        "id": 148071276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542751033
    },
    {
        "content": "<p>I meant, anyway, the posted code still doesn't work</p>",
        "id": 148071798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542751519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and also there are a lot of failures with that code :( <a href=\"https://github.com/rust-lang/rust/pull/56113#issuecomment-440452364\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#issuecomment-440452364\">https://github.com/rust-lang/rust/pull/56113#issuecomment-440452364</a></p>",
        "id": 148073390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542753193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/pull/56113#pullrequestreview-177006673\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#pullrequestreview-177006673\">see comments here</a></p>",
        "id": 148073892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542753670
    },
    {
        "content": "<p>still same issue</p>",
        "id": 148075117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542755017
    },
    {
        "content": "<p>pushed</p>",
        "id": 148075187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542755063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> 2 existing examples fail and the new test still says in later iteration of loop</p>",
        "id": 148106963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542803663
    },
    {
        "content": "<p><a href=\"https://travis-ci.org/rust-lang/rust/jobs/457696480\" target=\"_blank\" title=\"https://travis-ci.org/rust-lang/rust/jobs/457696480\">https://travis-ci.org/rust-lang/rust/jobs/457696480</a></p>",
        "id": 148106964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542803664
    },
    {
        "content": "<p>if you have any other tip let me know, I'm going to debug this later</p>",
        "id": 148106971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542803677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah I'm not quite sure</p>",
        "id": 148130749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542826790
    },
    {
        "content": "<p>I'll have to do a local build I guess</p>",
        "id": 148130753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542826798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 148133818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542830292
    },
    {
        "content": "<p>I guess maybe tomorrow I can start debugging this</p>",
        "id": 148133827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542830307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we need to discuss about this issue :)</p>",
        "id": 148632039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543317916
    },
    {
        "content": "<p>not sure what exactly should I do now</p>",
        "id": 148632042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543317925
    },
    {
        "content": "<p>saw the discussion on Discord but I saw that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was not ok with adding info to the CFG</p>",
        "id": 148632276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543318257
    },
    {
        "content": "<p>dunno what to do to fix that then :)</p>",
        "id": 148632283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543318270
    },
    {
        "content": "<p>I'd defer to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> - it might not be that bad, we already have \"false edges\" and whatnot</p>",
        "id": 148632426,
        "sender_full_name": "eddyb",
        "timestamp": 1543318446
    },
    {
        "content": "<p>false edges are normative, while this is only for diagnostics</p>",
        "id": 148632455,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543318528
    },
    {
        "content": "<p>Yeah, we should discuss. I personally lean against modifying the MIR, but I guess we should decide how good a job we want to do.</p>\n<p>One option might be to modify the way that we print the diagnostic, such that it makes sense in either scenario</p>",
        "id": 148644796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332334
    },
    {
        "content": "<p>Another option might be to be more conservative</p>",
        "id": 148644801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332339
    },
    {
        "content": "<p>Another option is to consider the \"lexical scoping\" information</p>",
        "id": 148644808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332345
    },
    {
        "content": "<p>each statement has a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Statement.html#structfield.source_info\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.Statement.html#structfield.source_info\"><code>source_info</code></a>, we could check whether the <code>scope</code> of the backedge target includes the <code>scope</code> of the backedge source (in which case, they are part of the same loop from the user's POV)</p>",
        "id": 148644922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332433
    },
    {
        "content": "<p>not sure if scopes are that complete, maybe <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> or <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> remembers</p>",
        "id": 148644930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332441
    },
    {
        "content": "<blockquote>\n<p>One option might be to modify the way that we print the diagnostic, such that it makes sense in either scenario</p>\n</blockquote>\n<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0713]: borrow may still be in use when destructor runs\n  --&gt; src/main.rs:24:22\n   |\n23 |    for child in archive.iter() {\n   |    --- after the borrow, code flows around this loop to reach the use\n24 |         members.push(child.raw);\n   |                      ^^^^^^^^^\n25 |     }\n   |     - here, drop of `child` needs exclusive access to `*child.raw`, because the type `C&lt;&#39;_&gt;` implements the `Drop` trait\n26 |     members.len();\n   |     ------- borrow used here\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 148645021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332518
    },
    {
        "content": "<p>we usually emit scopes after <code>let</code>/inside <code>match</code></p>",
        "id": 148645070,
        "sender_full_name": "eddyb",
        "timestamp": 1543332571
    },
    {
        "content": "<p>I guess we could easily add scopes for loops</p>",
        "id": 148645195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332681
    },
    {
        "content": "<p>I think it's possible the scope check might make sense, although <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> and <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  found that the only use of <code>visibility_scope</code> in MIR borrowck was redundant (on top of being confusing)</p>",
        "id": 148645211,
        "sender_full_name": "eddyb",
        "timestamp": 1543332705
    },
    {
        "content": "<p>otherwise, I guess we would add some sort of \"no-op\" statement that marks exiting a loop?</p>",
        "id": 148645258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332733
    },
    {
        "content": "<p>I think that's what <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> proposed</p>",
        "id": 148645265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332744
    },
    {
        "content": "<p>I'm wondering about cases like this:</p>\n<div class=\"codehilite\"><pre><span></span>loop {\n    if something {\n        while something_else {\n            p = &amp;foo;\n        }\n    } else {\n        foo += 1;\n        use(p);\n    }\n}\n</pre></div>",
        "id": 148645307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332815
    },
    {
        "content": "<p>here, my scope proposal would not print any message, but arguably you should</p>",
        "id": 148645321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332834
    },
    {
        "content": "<p>(otoh I think people can sometimes figure this stuff out, it doens't have to be <em>perfect</em>)</p>",
        "id": 148645369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332858
    },
    {
        "content": "<p>well, the scope proposal <em>could</em> figure it out</p>",
        "id": 148645385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332900
    },
    {
        "content": "<p>you'd have to track the 'outermost scope' of the backedges you took</p>",
        "id": 148645394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332909
    },
    {
        "content": "<blockquote>\n<p>Yeah, we should discuss. I personally lean against modifying the MIR, but I guess we should decide how good a job we want to do.</p>\n<p>One option might be to modify the way that we print the diagnostic, such that it makes sense in either scenario</p>\n</blockquote>\n<p>I may be completely wrong but can't we just use a separate structure for this? like a bitset where cfg nodes are labelled as this node is the head of the loop and then in diagnostics you look for it, so is separated from the mir?</p>",
        "id": 148652532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543338818
    },
    {
        "content": "<p>maybe I got incorrectly what you mean by modifying the mir :)</p>",
        "id": 148652612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543338890
    },
    {
        "content": "<p>the real questions are \"why do you want that kind of precise AST shape information?\" and \"can you talk about the code without referring to specific syntax?\"</p>",
        "id": 148657604,
        "sender_full_name": "eddyb",
        "timestamp": 1543343050
    },
    {
        "content": "<blockquote>\n<p>maybe I got incorrectly what you mean by modifying the mir :)</p>\n</blockquote>\n<p>well, that's a kind of modification -- adding a \"side channel\" for more information</p>",
        "id": 148657674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543343138
    },
    {
        "content": "<p>The problem with relying on scopes of back-edges is that scopes of Goto instructions can get scrambled pretty well.</p>",
        "id": 148666463,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543351332
    },
    {
        "content": "<p>in the simplify-cfg pass. We could try maintaining them better, but that feels like more of a hack than having a specific \"loop header\" statement.</p>",
        "id": 148666501,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543351386
    },
    {
        "content": "<p>BTW, in that case you can use the source_info.scope and don't need the visibility_scope - loops are lexically scoped.</p>",
        "id": 148666514,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543351418
    },
    {
        "content": "<p>So the main Q is whether we want to make sure that the source-info of back-edges always represents the source-info of their loop through simplifycfg, or whether we prefer to have loop header statements with the source-info of the loop.</p>",
        "id": 148666970,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543351829
    },
    {
        "content": "<p>so yeah, what would be a nice idea to try then?</p>",
        "id": 148747929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543443052
    },
    {
        "content": "<p>maybe we can try a first simple approach so we fix this and leave an issue to improve?</p>",
        "id": 148747944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543443073
    },
    {
        "content": "<p>unsure if that would solve something</p>",
        "id": 148747949,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543443080
    },
    {
        "content": "<p>so I was thinking if we can find cases that are \"unambiguously correct\". Basically that would mean finding out that (a) borrow and use are part of the same loop and (b) the borrow cannot reach the use except through a backedge.</p>\n<p>I think that would suffice, but it would mean that if you have something that \"appears\" to be nested in the loop, but breaks out, it doesn't get a message.</p>\n<p>But how to decide if they are in the same loop?</p>\n<p>I was imagining something like: </p>\n<ul>\n<li>If the borrow reaches the use through the backedge B</li>\n<li>and the use can also reach that backedge without going through any backedges</li>\n</ul>",
        "id": 148748950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543444118
    },
    {
        "content": "<p>that's not quite right around nested loops I don't think</p>",
        "id": 148748955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543444129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 148748965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543444149
    },
    {
        "content": "<p>That would miss the case when there is a return after the <code>use</code></p>\n<div class=\"codehilite\"><pre><span></span>let x;\nlet t = 0;\nloop {\n    if * {\n        return t;\n    } else {\n        x = &amp;t;\n    }\n}\n</pre></div>",
        "id": 148751745,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543447126
    },
    {
        "content": "<p>and, if implemented stupidly, also the case when there are 2 backedges going to the same place (just a loop with an if).</p>",
        "id": 148752135,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543447585
    },
    {
        "content": "<p>I am aware that it would miss that case, it seems \"ok\"</p>",
        "id": 148788009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500028
    },
    {
        "content": "<p>basically I was saying \"we could do this without any fancy work and it will be helpful sometimes and not un-helpful othertimes\"</p>",
        "id": 148788027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500047
    },
    {
        "content": "<p>I think longer term I would like to think a bit more about our presentation anyway</p>",
        "id": 148788034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500057
    },
    {
        "content": "<p>as I don't think this message is <em>especially</em> clear to people</p>",
        "id": 148788044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500065
    },
    {
        "content": "<p>still <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> can you expand a bit on your loop header idea? it doesn't seem enough to me to just have a \"loop header block\" -- or did you mean for that to be the start of the loop <em>body</em> I guess? so the idea would be if we can't reach the use without going through the start of the loop <em>body</em>?</p>\n<p>but does that handle a case like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">borrow</span><span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"k\">use</span><span class=\"p\">;</span><span class=\"o\">*</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148788157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500153
    },
    {
        "content": "<p>clearly the answer is more dataflow <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148788199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543500213
    },
    {
        "content": "<p>I still sort of wonder if we can't just present the control flow in a way that doesn't talk about \"loops\" per se -- e.g., </p>\n<ul>\n<li>borrow occurs here</li>\n<li>then we head back to the top of the loop here</li>\n<li>then we reach the use from there</li>\n</ul>\n<p>or something.</p>",
        "id": 148788205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500219
    },
    {
        "content": "<p>but it feels like just only saying \", in previous iteration of loop\" when we <em>know</em> it is appropriate is \"ok\"</p>",
        "id": 148788254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500248
    },
    {
        "content": "<p>(if we can indeed find suitably narrow criteria)</p>",
        "id": 148788260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500254
    },
    {
        "content": "<p>I guess at the end of the day I am probably happy to go either way, though I'd like to see a complete proposal. It seems to me that some sort of \"loop exit\" blocks probably suffice. Maybe <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> wrote it in a comment I should go and re-read.</p>\n<p>I just feel a <em>bit</em> reluctant to add more statements into the MIR \"just\" for diagnostics. It feels like something that could have some unexpected complication down the line, though I guess these sort of \"no-op\" statements are particularly unlikely to cause problems, since we can always strip them out.</p>\n<p>It also seems to me that we are encoding lexical information, which is sort of the same as the unsafe check, so maybe it's inconsistent that we do so differently? (Like, why <em>not</em> use a \"scope\" to encode whether this statement was \"part of\" a loop or not?)</p>",
        "id": 148788725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500732
    },
    {
        "content": "<p>Regarding my earlier proposal:</p>\n<ul>\n<li>The idea was to first land a PR that \"stems the bleeding\". Stop doing the wrong thing. Print the message when we know we can, and print nothing otherwise.</li>\n<li>Then we can open an issue to decide how to handle the remaining cases (if at all)<br>\n    - we can document them too for posterity's sake =)</li>\n</ul>",
        "id": 148788918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500917
    },
    {
        "content": "<p>it seems I never actually wrote that second part out explicitly :P but it was on my mind</p>",
        "id": 148788923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543500931
    },
    {
        "content": "<p>The idea was to also use the source-info of the loop header statement</p>",
        "id": 148794328,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543505543
    },
    {
        "content": "<p>to check whether a point is within a loop</p>",
        "id": 148794395,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543505622
    },
    {
        "content": "<p>Y is \"across the loop\" from X iff there exists a loop header H such that<br>\na) X and Y are both in a subscope of H<br>\n2) every path from X to Y goes through H</p>",
        "id": 148794465,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543505661
    },
    {
        "content": "<p>the loop header is just a place where we can slap the loop scope</p>",
        "id": 148794611,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1543505788
    },
    {
        "content": "<p>oh, ok, that makes sense</p>",
        "id": 148796952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543507676
    },
    {
        "content": "<p>so we are ultimately using scope, but we are just making a fixed statement for it</p>",
        "id": 148797019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543507702
    },
    {
        "content": "<p>(versus, say, putting some scope on the basic block, which is also possible)</p>",
        "id": 148797035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543507719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've implemented your conservative idea</p>",
        "id": 148879668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543602978
    },
    {
        "content": "<p>how's it work :)</p>",
        "id": 148879672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602986
    },
    {
        "content": "<p>for now the code is gross</p>",
        "id": 148879687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603007
    },
    {
        "content": "<p>have repeated some stuff over</p>",
        "id": 148879691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603013
    },
    {
        "content": "<p>I just wanted to check if it worked or not</p>",
        "id": 148879700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603021
    },
    {
        "content": "<p>I'm getting a couple of changes</p>",
        "id": 148879711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr b/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\nindex 19de3582c88..396fd6ffa0c 100644\n--- a/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\n+++ b/src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr\n@@ -8,13 +8,13 @@ LL |         borrow(&amp;*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n ...\n LL |     *x = box 5;\n-   |     -- mutable borrow used here, in later iteration of loop\n+   |     -- mutable borrow later used here\n\n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n   --&gt; $DIR/borrowck-lend-flow-loop.rs:109:16\n    |\n LL |         **x += 1;\n-   |         -------- mutable borrow used here, in later iteration of loop\n+   |         -------- mutable borrow later used here\n LL |         borrow(&amp;*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n ...\ndiff --git a/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr b/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\nindex 5301ee7a403..3b56c00145c 100644\n--- a/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\n+++ b/src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr\n@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n LL |             1 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n-   |                    first borrow used here, in later iteration of loop\n+   |                    first borrow later used here\n ...\n LL |             _ =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                              ------ first mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --&gt; $DIR/borrowck-mut-borrow-linear-errors.rs:25:30\n    |\n LL |             1 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n-   |                    ---- first borrow used here, in later iteration of loop\n+   |                    ---- first borrow later used here\n LL |             //[mir]~^ ERROR [E0499]\n LL |             2 =&gt; { addr.push(&amp;mut x); } //[ast]~ ERROR [E0499]\n    |                              ^^^^^^ second mutable borrow occurs here\n</pre></div>",
        "id": 148879733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603049
    },
    {
        "content": "<p>actually the first one is right</p>",
        "id": 148879865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">block_overarching_alias_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// In this instance, the borrow encompasses the entire closure call.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//[ast]~ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"c1\">//[nll]~^ ERROR cannot borrow</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148879881,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603153
    },
    {
        "content": "<p>it's actually the thing we needed to test</p>",
        "id": 148879932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> LL |     *x = box 5;\n-   |     -- mutable borrow used here, in later iteration of loop\n+   |     -- mutable borrow later used here\n</pre></div>",
        "id": 148879989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603213
    },
    {
        "content": "<p>so first it mentioned in later iteration of loop and now it doesn't</p>",
        "id": 148879998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603226
    },
    {
        "content": "<p>then</p>",
        "id": 148880021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">while_aliased_mut_cond</span><span class=\"p\">(</span><span class=\"n\">cond</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cond2</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">**</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//[ast]~ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"c1\">//[nll]~^ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cond2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//[ast]~ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148880024,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> LL |         **x += 1;\n-   |         -------- mutable borrow used here, in later iteration of loop\n+   |         -------- mutable borrow later used here\n</pre></div>",
        "id": 148880035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603295
    },
    {
        "content": "<p>it's wrong</p>",
        "id": 148880038,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603298
    },
    {
        "content": "<p>:)</p>",
        "id": 148880388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603628
    },
    {
        "content": "<p>I'm filtering backedges but I want to find a path that ends in a backedge, need to avoid filtering that one</p>",
        "id": 148880409,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603673
    },
    {
        "content": "<p>hmm</p>",
        "id": 148880531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543603761
    },
    {
        "content": "<p>that seems lke \"the classic\" case</p>",
        "id": 148880542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543603774
    },
    {
        "content": "<p>what rule did you implement exactly, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ? :)</p>",
        "id": 148880549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543603784
    },
    {
        "content": "<blockquote>\n<p>I was imagining something like: </p>\n<ul>\n<li>If the borrow reaches the use through the backedge B</li>\n<li>and the use can also reach that backedge without going through any backedges</li>\n</ul>\n</blockquote>\n<p>This one</p>",
        "id": 148880636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543603849
    },
    {
        "content": "<p>hmm, it feels like it should work for that example</p>",
        "id": 148880778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543603983
    },
    {
        "content": "<p>did you update the PR?</p>",
        "id": 148880785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543603987
    },
    {
        "content": "<p>no</p>",
        "id": 148880813,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604033
    },
    {
        "content": "<p>but I found the issue</p>",
        "id": 148880819,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604037
    },
    {
        "content": "<p>maybe I wrote a bit weird and you didn't figure that :)</p>",
        "id": 148880877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604055
    },
    {
        "content": "<blockquote>\n<p>I'm filtering backedges but I want to find a path that ends in a backedge, need to avoid filtering that one</p>\n</blockquote>",
        "id": 148880880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604061
    },
    {
        "content": "<p>have already added that</p>",
        "id": 148880883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604071
    },
    {
        "content": "<p>running tests again</p>",
        "id": 148880888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> added the thing but didn't make any difference</p>",
        "id": 148881056,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604278
    },
    {
        "content": "<p>what do you mean by didn't make any difference?</p>",
        "id": 148881320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604473
    },
    {
        "content": "<p>that it's still wrong</p>",
        "id": 148881402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604548
    },
    {
        "content": "<p>the change I added was</p>",
        "id": 148881418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604567
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-                        .filter(|s| !self.is_back_edge(location, *s))\n+                        .filter(|s| !self.is_back_edge(location, *s) || to_any.contains(s))\n</pre></div>",
        "id": 148881421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604570
    },
    {
        "content": "<p>with that contains or without it, I get the same results</p>",
        "id": 148881429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604581
    },
    {
        "content": "<p>have pushed in case you want to check out</p>",
        "id": 148881437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604589
    },
    {
        "content": "<p>ok</p>",
        "id": 148881579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604696
    },
    {
        "content": "<p>I found a thing that is wrong but shouldn't make any difference</p>",
        "id": 148881770,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/pull/56113/files#r237969618\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113/files#r237969618\">maybe this</a>?</p>",
        "id": 148881861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604929
    },
    {
        "content": "<p>right, that's the issue</p>",
        "id": 148881893,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604969
    },
    {
        "content": "<p>and also</p>",
        "id": 148881895,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604970
    },
    {
        "content": "<p>that if is wrong, right?</p>",
        "id": 148881901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604981
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/pull/56113/files#diff-fe005d3dcf77fde8f189617b2599e10eR340\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113/files#diff-fe005d3dcf77fde8f189617b2599e10eR340\">https://github.com/rust-lang/rust/pull/56113/files#diff-fe005d3dcf77fde8f189617b2599e10eR340</a> is always false</p>",
        "id": 148881910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543604995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-261d\" title=\"wait one second\">:wait_one_second:</span></p>",
        "id": 148882140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543605202
    },
    {
        "content": "<p>any more attempts, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 148888912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I left since we've talked</p>",
        "id": 148896026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543619025
    },
    {
        "content": "<p>gonna see if I have a couple of minutes to try again</p>",
        "id": 148896070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543619043
    },
    {
        "content": "<p>I'm consistently hitting this ...</p>",
        "id": 150682969,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543669522
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: Could not compile `rustc`.\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: &quot;/home/santiago/src/oss/rust1/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-j&quot; &quot;4&quot; &quot;--release&quot; &quot;--features&quot; &quot;&quot; &quot;--manifest-path&quot; &quot;/home/santiago/src/oss/rust1/src/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nthread &#39;main&#39; panicked at &#39;cargo must succeed&#39;, bootstrap/compile.rs:1101:9\nstack backtrace:\n   0:     0x556b86761a9f - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h3c55afa80a996a32\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1:     0x556b8676ed47 - std::sys_common::backtrace::print::hcef907ea7a07cd40\n                               at libstd/sys_common/backtrace.rs:71\n                               at libstd/sys_common/backtrace.rs:59\n   2:     0x556b8676784f - std::panicking::default_hook::{{closure}}::hf541876c65f36ea7\n                               at libstd/panicking.rs:211\n   3:     0x556b867675b4 - std::panicking::default_hook::h4ecc06b30ae4459d\n                               at libstd/panicking.rs:227\n   4:     0x556b86767f2e - std::panicking::rust_panic_with_hook::h0cc6d9cc9f34a947\n                               at libstd/panicking.rs:476\n   5:     0x556b86740027 - std::panicking::begin_panic::he4089b50490d89cc\n                               at libstd/panicking.rs:410\n   6:     0x556b85fb242a - bootstrap::compile::run_cargo::h24b31fcf4cc848dc\n                               at bootstrap/compile.rs:1101\n   7:     0x556b85faa84a - &lt;bootstrap::compile::Rustc as bootstrap::builder::Step&gt;::run::h5a63412c57dc1205\n                               at bootstrap/compile.rs:503\n   8:     0x556b8636a544 - bootstrap::builder::Builder::ensure::h059931c28a4fae58\n                               at bootstrap/builder.rs:1215\n   9:     0x556b85fb03b7 - &lt;bootstrap::compile::Assemble as bootstrap::builder::Step&gt;::run::hb1adf09f74ea3290\n                               at bootstrap/compile.rs:959\n  10:     0x556b86471d54 - bootstrap::builder::Builder::ensure::hf971c4454e83cc78\n                               at bootstrap/builder.rs:1215\n  11:     0x556b86496079 - bootstrap::builder::Builder::compiler::h261980de65d32f94\n                               at bootstrap/builder.rs:579\n  12:     0x556b85fa55f6 - &lt;bootstrap::compile::Std as bootstrap::builder::Step&gt;::make_run::h5b3c0a1480f5473a\n                               at bootstrap/compile.rs:55\n  13:     0x556b86491400 - bootstrap::builder::StepDescription::maybe_run::h4cbaeb9b41a83a82\n                               at bootstrap/builder.rs:191\n  14:     0x556b86491fd4 - bootstrap::builder::StepDescription::run::h81efe27184fab9ba\n                               at bootstrap/builder.rs:234\n  15:     0x556b86496028 - bootstrap::builder::Builder::run_step_descriptions::h15ca74516d14f99b\n                               at bootstrap/builder.rs:571\n  16:     0x556b86495e6a - bootstrap::builder::Builder::execute_cli::h2b142c7158a4cf31\n                               at bootstrap/builder.rs:561\n  17:     0x556b85d9ae66 - bootstrap::Build::build::h9b1d15d32ff16426\n                               at bootstrap/lib.rs:479\n  18:     0x556b85cf7414 - bootstrap::main::h4e2538703a968edf\n                               at bootstrap/bin/main.rs:29\n  19:     0x556b85cf751f - std::rt::lang_start::{{closure}}::h89db4fb3346f68bc\n                               at libstd/rt.rs:74\n  20:     0x556b86767952 - std::panicking::try::do_call::h203c4989fde7f201\n                               at libstd/rt.rs:59\n                               at libstd/panicking.rs:310\n  21:     0x556b86779f79 - __rust_maybe_catch_panic\n                               at libpanic_unwind/lib.rs:102\n  22:     0x556b8674f40a - std::rt::lang_start_internal::h80fd76ad39d9c8d9\n                               at libstd/panicking.rs:289\n                               at libstd/panic.rs:392\n                               at libstd/rt.rs:58\n  23:     0x556b85cf74f8 - std::rt::lang_start::he4ebe066ecf58bc3\n                               at libstd/rt.rs:74\n  24:     0x556b85cf7499 - main\n  25:     0x7fc8e7717222 - __libc_start_main\n  26:     0x556b85cf725d - _start\n  27:                0x0 - &lt;unknown&gt;\nfailed to run: /home/santiago/src/oss/rust1/build/bootstrap/debug/bootstrap build -i --stage 1 --keep-stage 1 src/libstd\nBuild completed unsuccessfully in 0:04:41\n``\n</pre></div>",
        "id": 150682970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543669527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed for you to review, there are some tests that changed the output though</p>",
        "id": 150697616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543699725
    },
    {
        "content": "<p>the first one I think is more correct</p>",
        "id": 150697618,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543699733
    },
    {
        "content": "<p>from the second one on the changes are also more correct because it's not in later iteration of loop, it's inside the loop but it's just later</p>",
        "id": 150697619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543699739
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/pull/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113\">https://github.com/rust-lang/rust/pull/56113</a></p>",
        "id": 150697666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543699804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as I told you there is already three times where we are repeating a bfs search</p>",
        "id": 150697988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543700534
    },
    {
        "content": "<p>and this PR keeps adding ;)</p>",
        "id": 150697989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543700546
    },
    {
        "content": "<p>let me know if you want to refactor that as part of this PR or you just want to merge this and we can refactor as a separate thing</p>",
        "id": 150697991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543700574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> say more about this \"could not compile rustc\" thing? did it go away?</p>",
        "id": 150841404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543924319
    },
    {
        "content": "<p>as it happens, I regularly hit a segfault in llvm that is baffling me (it never happens twice)</p>",
        "id": 150841447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543924332
    },
    {
        "content": "<p>I've been tracking backtraces</p>",
        "id": 150841449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543924335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it go away yes</p>",
        "id": 150847909,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543931831
    },
    {
        "content": "<p>I think it’s the same issue I always hit</p>",
        "id": 150847931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543931849
    },
    {
        "content": "<p>related to memory</p>",
        "id": 150847941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543931855
    },
    {
        "content": "<p>ended shutting down computer and executing without even entering the ui, went straight to the console</p>",
        "id": 150848047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543931913
    },
    {
        "content": "<p>and removed build just in case</p>",
        "id": 150848052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543931921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so I think what <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> <a href=\"https://github.com/rust-lang/rust/pull/56113#discussion_r238454978\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#discussion_r238454978\">means here</a> is that the test they describe would be a better way to test \"is this use part of the loop X\" -- and I think I agree</p>",
        "id": 150854964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937338
    },
    {
        "content": "<p>basically, we first find that the borrow B reaches the use U through some outermost backedge, right? the target L of that backedge is the \"head\" of the outermost loop</p>",
        "id": 150854991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937371
    },
    {
        "content": "<p>er, that's confusingly written</p>",
        "id": 150855011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937400
    },
    {
        "content": "<p>but basically we find that the borrow B can only reach the use U by going around some loop L</p>",
        "id": 150855093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937448
    },
    {
        "content": "<p>and we want to check if the use U is also in that loop</p>",
        "id": 150855097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937453
    },
    {
        "content": "<p>the check that <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> proposed is basically to do a DFS from the use forward, looking for the loop header, but stopping whenever we reach a node that is not dominated by the loop header (which therefore falls outside the loop)</p>",
        "id": 150855171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543937533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this comment <a href=\"https://github.com/rust-lang/rust/pull/56113#discussion_r238454978\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#discussion_r238454978\">https://github.com/rust-lang/rust/pull/56113#discussion_r238454978</a> from <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span>, so when he talks about <code>N</code> we are talking about the <code>use</code> but when he talks about <code>L</code> he is talking about the header of the loop and we were using the <code>borrow</code></p>",
        "id": 150942641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544028554
    },
    {
        "content": "<p>because if it is the header of the loop we are back to square 1, how can we get it?</p>",
        "id": 150942654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544028575
    },
    {
        "content": "<p>was reading the stuff on github, now I'm seeing your comments here which seems to clarify a bit :)</p>",
        "id": 150942667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544028594
    },
    {
        "content": "<blockquote>\n<p>basically, we first find that the borrow B reaches the use U through some outermost backedge, right? the target L of that backedge is the \"head\" of the outermost loop</p>\n</blockquote>\n<p>so you meant that <code>L</code> is the thing we found?</p>",
        "id": 150944334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544029804
    },
    {
        "content": "<p>unsure what the target L of that backedge is the \"head\" of the outermost loop</p>",
        "id": 150944363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544029821
    },
    {
        "content": "<blockquote>\n<p>but basically we find that the borrow B can only reach the use U by going around some loop L</p>\n</blockquote>\n<p>don't understand what some loop L means, I guess you're talking about the target of a backedge?</p>",
        "id": 150944400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544029854
    },
    {
        "content": "<blockquote>\n<p>unsure what the target L of that backedge is the \"head\" of the outermost loop</p>\n</blockquote>\n<p>I think I see what you meant, so basically this is what we already did</p>",
        "id": 150944437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544029914
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L299\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L299\">https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L299</a></p>",
        "id": 150944454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544029922
    },
    {
        "content": "<p>ok seems like I need to adapt the rest</p>",
        "id": 150944551,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544030005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do we have a reusable dfs around?, what I've mainly is bfs used around</p>",
        "id": 150944622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544030046
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/error_reporting.rs#L1113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/error_reporting.rs#L1113\">https://github.com/rust-lang/rust/blob/34059401f4f1cb5ef0a0ec6a4d73503eb9d29eb9/src/librustc_mir/borrow_check/error_reporting.rs#L1113</a> suggest a dfs given the label there but it's not really a dfs</p>",
        "id": 150945260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544030728
    },
    {
        "content": "<p>I mean, I can build one but don't want to keep adding repeated stuff :)</p>",
        "id": 150945389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544030879
    },
    {
        "content": "<p>generic bfs and dfs over locations seems something useful :)</p>",
        "id": 150945445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544030914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so -- was it clear what I meant by \"Loop L\" and all that?</p>",
        "id": 151007281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104234
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 151012290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544108496
    },
    {
        "content": "<p>have pushed something to see what the CI says <a href=\"https://github.com/rust-lang/rust/pull/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113\">https://github.com/rust-lang/rust/pull/56113</a></p>",
        "id": 154609519,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546903041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^^</p>",
        "id": 154609523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546903049
    },
    {
        "content": "<p>I already see there are some differences on the used in <code>used here, in later iteration of loop</code> that I need to check if are right or not</p>",
        "id": 154609575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546903109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> checking the diffs now</p>",
        "id": 154661149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546968729
    },
    {
        "content": "<p>for instance</p>",
        "id": 154661152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546968732
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56113/files#diff-49dad6257ff5648bdcbcbe5e1b5445f7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113/files#diff-49dad6257ff5648bdcbcbe5e1b5445f7\">https://github.com/rust-lang/rust/pull/56113/files#diff-49dad6257ff5648bdcbcbe5e1b5445f7</a></p>",
        "id": 154661154,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546968733
    },
    {
        "content": "<p>the first change is for the better and the second one is for the worse</p>",
        "id": 154661165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546968753
    },
    {
        "content": "<p>unsure if it's one of the confusible cases we were talking about</p>",
        "id": 154661486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546969001
    },
    {
        "content": "<p>gonna check that in a while and check the rest of the changes</p>",
        "id": 154661496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546969009
    },
    {
        "content": "<p>no, the second one is better too</p>",
        "id": 154663178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546970387
    },
    {
        "content": "<p>because there's no need to later in the loop it's just later but it happens that both statements are in the loop</p>",
        "id": 154663244,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546970410
    },
    {
        "content": "<p>from my point of view this example is better</p>",
        "id": 154663295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546970427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this case doesn't seem to be right <a href=\"https://github.com/rust-lang/rust/pull/56113/files#diff-9c381bde352f6799a887ef7dda1c3318L7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113/files#diff-9c381bde352f6799a887ef7dda1c3318L7\">https://github.com/rust-lang/rust/pull/56113/files#diff-9c381bde352f6799a887ef7dda1c3318L7</a></p>",
        "id": 154664417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971411
    },
    {
        "content": "<p>I mean, after my PR</p>",
        "id": 154664423,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971418
    },
    {
        "content": "<p>what do you think?</p>",
        "id": 154664426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971423
    },
    {
        "content": "<p>well there are more cases like that one</p>",
        "id": 154664614,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971576
    },
    {
        "content": "<p>maybe if use location = borrow location and that's inside of the loop we should just emit that loop message?</p>",
        "id": 154664713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971640
    },
    {
        "content": "<p>actually not 100% sure why the code don't cover that gonna check</p>",
        "id": 154664740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546971666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> after checking all the examples I think all are better BUT <code>src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr</code></p>",
        "id": 154666727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546973314
    },
    {
        "content": "<p>checking that one again</p>",
        "id": 154666736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546973331
    },
    {
        "content": "<p>I agree that <code>borrowck-mut-borrow-linear-errors.mir.stderr </code> seems less good</p>",
        "id": 154669136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I see what's going on</p>",
        "id": 154669382,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        StorageLive(_10);                // bb9[0]: scope 3 at test.rs:8:20: 8:24\n        _10 = &amp;&#39;_#7r mut _2;             // bb9[1]: scope 3 at test.rs:8:20: 8:24\n        StorageLive(_11);                // bb9[2]: scope 3 at test.rs:8:30: 8:36\n        _11 = &amp;&#39;_#8r mut _1;             // bb9[3]: scope 3 at test.rs:8:30: 8:36\n        _9 = const &lt;std::vec::Vec&lt;T&gt;&gt;::push(move _10, move _11) -&gt; [return: bb17, unwind: bb8]; // bb9[4]: scope 3 at test.rs:8:20: 8:37\n</pre></div>",
        "id": 154669385,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975358
    },
    {
        "content": "<p>the borrow happens before the use</p>",
        "id": 154669396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975365
    },
    {
        "content": "<p>so it's not printing the <code>in later iteration of loop</code></p>",
        "id": 154669417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975382
    },
    {
        "content": "<p>but given that high level code is the same line, it seems like it would be better to print that</p>",
        "id": 154669437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts? what should we do?</p>",
        "id": 154669454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I left my comments as to which I think are \"better\" or \"less good\" — put another way, places where I think printing \"in a later iteration of the loop\" would make sense</p>",
        "id": 154669572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975544
    },
    {
        "content": "<blockquote>\n<p>the borrow happens before the use</p>\n</blockquote>\n<p>yes, I wondered if this would be it</p>",
        "id": 154669589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975560
    },
    {
        "content": "<p>well, actually, that's what is confusing to me</p>",
        "id": 154669636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975566
    },
    {
        "content": "<p>that is, the borrow of <code>_10 = &amp;mut _2</code> occurs <em>before</em> the access to <code>_1</code></p>",
        "id": 154669662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975589
    },
    {
        "content": "<p>but I suspect that the error is occuring at the point of the <em>call</em></p>",
        "id": 154669672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975599
    },
    {
        "content": "<p>because of 2-phase borrows</p>",
        "id": 154669676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975603
    },
    {
        "content": "<p>yes, that's what I meant</p>",
        "id": 154669684,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975611
    },
    {
        "content": "<p>that seems... ok to me</p>",
        "id": 154669690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975617
    },
    {
        "content": "<p>if that's ok I guess this is good to go</p>",
        "id": 154669706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975629
    },
    {
        "content": "<p>I think the ideal would be</p>",
        "id": 154669711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975631
    },
    {
        "content": "<p>to notice that the use is a call</p>",
        "id": 154669717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975637
    },
    {
        "content": "<p>or at least good to review :)</p>",
        "id": 154669718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975638
    },
    {
        "content": "<p>and say something like \", during the call\"</p>",
        "id": 154669720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975641
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 154669728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975650
    },
    {
        "content": "<p>I think I wrote something about this in the RFC</p>",
        "id": 154669744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975665
    },
    {
        "content": "<p>the reason being that \"during the call\" is a case where the order in which we write things is sort of reverse</p>",
        "id": 154669757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975681
    },
    {
        "content": "<p>yep</p>",
        "id": 154669811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975697
    },
    {
        "content": "<p>do you want me to add during the call in this PR?</p>",
        "id": 154669821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975706
    },
    {
        "content": "<p>because you mentioned an RFC which I'm not sure which one is</p>",
        "id": 154669837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975722
    },
    {
        "content": "<p>oh I meant the NLL RFC</p>",
        "id": 154669844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975728
    },
    {
        "content": "<p>are you planning some future changes?</p>",
        "id": 154669848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975730
    },
    {
        "content": "<p>I think I used that phrasing in some examples</p>",
        "id": 154669850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975731
    },
    {
        "content": "<p>ahh ok ok</p>",
        "id": 154669851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975732
    },
    {
        "content": "<p>but this doesn't really require an RFC or anything</p>",
        "id": 154669857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975736
    },
    {
        "content": "<p>I thought some major changes were going on for a bit :)</p>",
        "id": 154669883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975756
    },
    {
        "content": "<p>I gotta run -- I guess I don't care too much about whether we put it in the PR, if it's easy maybe why not? it feels a bit different but not unrelated</p>",
        "id": 154669888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975760
    },
    {
        "content": "<p>:)</p>",
        "id": 154669897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546975768
    },
    {
        "content": "<p>yeah, let me do that in this PR then</p>",
        "id": 154669907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546975779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back for a bit with this</p>",
        "id": 154743680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547056627
    },
    {
        "content": "<p>first of all</p>",
        "id": 154743681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547056629
    },
    {
        "content": "<p>can you elaborate a bit more on <a href=\"https://github.com/rust-lang/rust/pull/56113#discussion_r246120584\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#discussion_r246120584\">https://github.com/rust-lang/rust/pull/56113#discussion_r246120584</a> ?</p>",
        "id": 154743687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547056639
    },
    {
        "content": "<p>I mean, more specifically, do you think that the new output is not wrong? it should look like before? or do you want something different?</p>",
        "id": 154743762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547056693
    },
    {
        "content": "<p>well, this is the function in question</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">while_aliased_mut_cond</span><span class=\"p\">(</span><span class=\"n\">cond</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cond2</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">**</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//[ast]~ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"c1\">//[nll]~^ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cond2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//[ast]~ ERROR cannot borrow</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154754442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065283
    },
    {
        "content": "<p>and the error</p>\n<div class=\"codehilite\"><pre><span></span>error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n  --&gt; $DIR/borrowck-lend-flow-loop.rs:109:16\n   |\nLL |         **x += 1;\n   |         -------- mutable borrow later used here\nLL |         borrow(&amp;*v); //[ast]~ ERROR cannot borrow\n   |                ^^^ immutable borrow occurs here\n...\nLL |             x = &amp;mut v; //[ast]~ ERROR cannot borrow\n   |                 ------ mutable borrow occurs here\n</pre></div>",
        "id": 154754453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065295
    },
    {
        "content": "<p>yes</p>",
        "id": 154754511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065335
    },
    {
        "content": "<p>that's using the output of my PR</p>",
        "id": 154754519,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065342
    },
    {
        "content": "<p>in this case, the \"flow of events\" is that </p>\n<ul>\n<li><code>x = &amp;mut v</code> starts a borrow,</li>\n<li>we go around the loop,</li>\n<li>we start an immutable borrow with <code>&amp;*v</code>,</li>\n<li>we go around the loop,</li>\n<li>we use the borrow <code>x</code> to do <code>**x += 1</code></li>\n</ul>",
        "id": 154754521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065349
    },
    {
        "content": "<p>so you see that we did indeed have to go around the loop</p>",
        "id": 154754529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065359
    },
    {
        "content": "<p>otoh the case is so convoluted...</p>",
        "id": 154754535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065363
    },
    {
        "content": "<p>I see</p>",
        "id": 154754548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065382
    },
    {
        "content": "<p>I feel like this is a good example where it'd be nicer to format the error differently</p>",
        "id": 154754552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065384
    },
    {
        "content": "<p>in a more general way</p>",
        "id": 154754558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065387
    },
    {
        "content": "<p>but that's a whole separate matter</p>",
        "id": 154754561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065394
    },
    {
        "content": "<p>and that means, leave as is? :)</p>",
        "id": 154754571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065406
    },
    {
        "content": "<p>I'm fine with it as is</p>",
        "id": 154754577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065411
    },
    {
        "content": "<p>ok</p>",
        "id": 154754579,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065415
    },
    {
        "content": "<p>another thing</p>",
        "id": 154754581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065416
    },
    {
        "content": "<p>about the during the call thing now</p>",
        "id": 154754593,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065428
    },
    {
        "content": "<p>I was just saying that it didn't seem <em>more correct</em> than before kind of \"for the record\" =)</p>",
        "id": 154754595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065429
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154754599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065439
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L66\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L66\">https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L66</a></p>",
        "id": 154754607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065444
    },
    {
        "content": "<p>I was expecting that to be a Call</p>",
        "id": 154754666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065485
    },
    {
        "content": "<p>but if it were a call it should have printed <code>borrow later used by call</code></p>",
        "id": 154754688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065504
    },
    {
        "content": "<p>which is something similar to what we want</p>",
        "id": 154754697,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065511
    },
    {
        "content": "<p>the thing is that it's a <code>LaterUseKind::Other</code> thing</p>",
        "id": 154754711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065525
    },
    {
        "content": "<p>so ... when you said, look for a call were you referring to that? or to something else?</p>",
        "id": 154754720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065545
    },
    {
        "content": "<p>that does look like the same general idea</p>",
        "id": 154754839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065670
    },
    {
        "content": "<p>I feel like we probably have a lot of \"strands\" of code that do similar/same things</p>",
        "id": 154754892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547065691
    },
    {
        "content": "<p>yeah, now I wonder why is that an Other in the moment of printing the message</p>",
        "id": 154754903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065712
    },
    {
        "content": "<p>and it's not a call</p>",
        "id": 154754907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065716
    },
    {
        "content": "<p>ok, I'd need to check this out properly</p>",
        "id": 154754916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065733
    },
    {
        "content": "<p><code>addr.push(&amp;mut x);</code> addr was the use, so I guess it should be a call, right?</p>",
        "id": 154754948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065787
    },
    {
        "content": "<p>I mean, theoretically</p>",
        "id": 154754953,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065795
    },
    {
        "content": "<p>or am I getting something wrong?</p>",
        "id": 154754956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547065799
    },
    {
        "content": "<p>something is confusing to me</p>",
        "id": 154756094,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547066704
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L446-L465\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L446-L465\">https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs#L446-L465</a></p>",
        "id": 154756099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547066705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why the use being a function is tagged as a terminator thing?</p>",
        "id": 154756210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547066778
    },
    {
        "content": "<p>basically I think I don't understand this <a href=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc/mir/mod.rs#L1130-L1146\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc/mir/mod.rs#L1130-L1146\">https://github.com/rust-lang/rust/blob/35d970dc09eead49521bbe905180a44f4639c05a/src/librustc/mir/mod.rs#L1130-L1146</a></p>",
        "id": 154756373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547066919
    },
    {
        "content": "<p>or that's talking about something different to what I'm looking for</p>",
        "id": 154756380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547066930
    },
    {
        "content": "<p>well maybe I'm not understanding what is <code>/// Block ends with a call of a converging function</code></p>",
        "id": 154756562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547067088
    },
    {
        "content": "<blockquote>\n<p><code>addr.push(&amp;mut x);</code> addr was the use, so I guess it should be a call, right?</p>\n</blockquote>\n<p>maybe :) but maybe it's some code elsewhere in the call lowering</p>",
        "id": 154761012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547070991
    },
    {
        "content": "<p>re: the Terminator, a \"call\" in MIr is always the last thing in a basic block (since it can panic)</p>",
        "id": 154761024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547071021
    },
    {
        "content": "<p>(given that it can panic, a call has two successors -- the \"normal return\" and the \"unwind\" path)</p>",
        "id": 154761034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547071034
    },
    {
        "content": "<p>does that answer your question, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 154761050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547071065
    },
    {
        "content": "<p>yes</p>",
        "id": 154763310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547073351
    },
    {
        "content": "<p>it makes sense and it’s more or less what I thought <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 154763362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547073374
    },
    {
        "content": "<p>if <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the \"during the call\" thing is hard, it seems ok not to do it :)</p>",
        "id": 154763853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547073903
    },
    {
        "content": "<p>unsure if it’s hard <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 154765207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547075185
    },
    {
        "content": "<p>I already left but tomorrow next thing to do I guess is dumping the mir and debugging this example to see what’s going on</p>",
        "id": 154765250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547075233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any other tip?</p>",
        "id": 154765262,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547075245
    },
    {
        "content": "<p>I mean, if I can’t figure out a call there</p>",
        "id": 154765297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547075283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 154844166,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154844167,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132230
    },
    {
        "content": "<p>vs</p>",
        "id": 154844168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154844176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132245
    },
    {
        "content": "<p>first example prints</p>",
        "id": 154844179,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `x` as mutable more than once at a time\n  --&gt; test.rs:15:28\n   |\n15 |             _ =&gt; addr.push(&amp;mut x),\n   |                            ^^^^^^ mutable borrow starts here in previous iteration of loop\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0499`.\n</pre></div>",
        "id": 154844202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132273
    },
    {
        "content": "<p>which seems correct to me</p>",
        "id": 154844208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132280
    },
    {
        "content": "<p>second example prints</p>",
        "id": 154844269,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132305
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `x` as mutable more than once at a time\n  --&gt; test.rs:15:28\n   |\n15 |             1 =&gt; addr.push(&amp;mut x),\n   |                  ----      ^^^^^^ second mutable borrow occurs here\n   |                  |\n   |                  first borrow later used here\n16 |             _ =&gt; addr.push(&amp;mut x),\n   |                            ------ first mutable borrow occurs here\n\nerror[E0499]: cannot borrow `x` as mutable more than once at a time\n  --&gt; test.rs:16:28\n   |\n16 |             _ =&gt; addr.push(&amp;mut x),\n   |                            ^^^^^^ mutable borrow starts here in previous iteration of loop\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0499`.\n</pre></div>",
        "id": 154844271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132308
    },
    {
        "content": "<p>which is ... weird I guess but not entirely wrong in the sense of mir maybe</p>",
        "id": 154844306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132354
    },
    {
        "content": "<p>I guess on mir the <code>_ =&gt;</code> part shows up before?</p>",
        "id": 154844325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132371
    },
    {
        "content": "<p>can check the mir output</p>",
        "id": 154844329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132375
    },
    {
        "content": "<p>but anyway, there's also something weird about the first and second thing noted there</p>",
        "id": 154844407,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132408
    },
    {
        "content": "<p>well it actually makes sense if in mir <code>_ =&gt;</code> happens before</p>",
        "id": 154844434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132443
    },
    {
        "content": "<p>the problem is that the <code>1 =&gt;</code> arm is wrong on it's own as the <code>_ =&gt;</code></p>",
        "id": 154844538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132524
    },
    {
        "content": "<p>so saying <code>mutable borrow starts here in previous iteration of loop</code> only for <code>_ =&gt;</code> and not for <code>1 =&gt;</code> may be weird</p>",
        "id": 154844567,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132553
    },
    {
        "content": "<p>I guess what happens before depends on what <code>block.terminator().successors()</code> returns if returns first <code>_ =&gt;</code> that would be the first thing, unsure how that logic works</p>",
        "id": 154844786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547132750
    },
    {
        "content": "<p>I mean I think in the end there are many possible diagnostics here <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 154853577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139238
    },
    {
        "content": "<p>that is, what comes \"first\" and \"second\" is sort of arbitrary</p>",
        "id": 154853628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139246
    },
    {
        "content": "<p>since these things are in a loop</p>",
        "id": 154853648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139264
    },
    {
        "content": "<p>yeah, I'd expect first as the one that is above in the source code</p>",
        "id": 154853670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139291
    },
    {
        "content": "<blockquote>\n<p>the problem is that the <code>1 =&gt;</code> arm is wrong on it's own as the <code>_ =&gt;</code></p>\n</blockquote>\n<p>I don't quite get what you mean by this</p>",
        "id": 154853686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139305
    },
    {
        "content": "<blockquote>\n<p>yeah, I'd expect first as the one that is above in the source code</p>\n</blockquote>\n<p>it does seem like that would be a better choice; I'm not sure how hard it would be to fix.</p>",
        "id": 154853716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139333
    },
    {
        "content": "<p>I mean, both arms are wrong if you put them in the code by themselves</p>",
        "id": 154853723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139339
    },
    {
        "content": "<p>I guess I have to dig a bit in the code</p>",
        "id": 154853724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139339
    },
    {
        "content": "<p>I think the diagnostic is also mixing both arms</p>",
        "id": 154853733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139350
    },
    {
        "content": "<p>which is another way for that code of being wrong</p>",
        "id": 154853745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139358
    },
    {
        "content": "<p>right, basically there are multiple ways</p>",
        "id": 154853799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139369
    },
    {
        "content": "<p>the code finds \"a way\"</p>",
        "id": 154853801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139373
    },
    {
        "content": "<p>and reports it to you</p>",
        "id": 154853805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139375
    },
    {
        "content": "<p>exactly</p>",
        "id": 154853806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139375
    },
    {
        "content": "<p>I'm not sure how hard it would be for it to find \"the best way\"</p>",
        "id": 154853813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139388
    },
    {
        "content": "<p>I guess I feel like this is an entirely different problem</p>",
        "id": 154853822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139397
    },
    {
        "content": "<p>from the one you set out to fix</p>",
        "id": 154853826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139402
    },
    {
        "content": "<p>though possibly one worth tackling</p>",
        "id": 154853829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139406
    },
    {
        "content": "<p>basically, looking for cases where -- in a loop -- we can \"rejigger\" the points we consider to be \"first second and third\" in order to get a more natural display</p>",
        "id": 154853855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139424
    },
    {
        "content": "<p>agreed</p>",
        "id": 154854378,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139775
    },
    {
        "content": "<p>in that case should we just merge the PR as is?</p>",
        "id": 154854398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547139792
    },
    {
        "content": "<p>probably yes</p>",
        "id": 154854478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139855
    },
    {
        "content": "<p>i'll give it a once over later today</p>",
        "id": 154854482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there a way to kick travis?</p>",
        "id": 154854804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547140090
    },
    {
        "content": "<p>to run tests again over the PR?</p>",
        "id": 154854817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547140100
    },
    {
        "content": "<p>I know it should be green, but now after I've pushed a rustfmt commit it failed</p>",
        "id": 154854847,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547140118
    },
    {
        "content": "<p>doh, my bad</p>",
        "id": 154854863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547140134
    },
    {
        "content": "<p>thought it was giving timeouts but was my bad</p>",
        "id": 154854984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547140207
    },
    {
        "content": "<p>ci is green <a href=\"https://github.com/rust-lang/rust/pull/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113\">https://github.com/rust-lang/rust/pull/56113</a> :)</p>",
        "id": 154870304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547153170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just opened the follow up issue <a href=\"https://github.com/rust-lang/rust/issues/57528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57528\">https://github.com/rust-lang/rust/issues/57528</a> we talked about</p>",
        "id": 154946093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547239821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> homu is failing for <code>x86_64-gnu-nopt</code> <a href=\"https://github.com/rust-lang/rust/pull/56113#issuecomment-453730748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113#issuecomment-453730748\">https://github.com/rust-lang/rust/pull/56113#issuecomment-453730748</a></p>",
        "id": 155169210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547559386
    },
    {
        "content": "<p>unsure what's going on</p>",
        "id": 155169430,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547559624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> hmm there must be some non-determinism here</p>",
        "id": 155181399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568438
    },
    {
        "content": "<p>are we using hashmaps to control ordering or something somewhere?</p>",
        "id": 155181410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568447
    },
    {
        "content": "<p>often this results in error messages that vary slightly depending on the platform</p>",
        "id": 155181425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568456
    },
    {
        "content": "<p>couldn't that be successors?</p>",
        "id": 155181446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568475
    },
    {
        "content": "<p>the output of this strongly depends on the successors list</p>",
        "id": 155181513,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568495
    },
    {
        "content": "<p>can we just get successors sorted by location?</p>",
        "id": 155181525,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568505
    },
    {
        "content": "<p>that would make things better from my perspective</p>",
        "id": 155181532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568512
    },
    {
        "content": "<p>the successors list from the MIR is meaningful and is not in some arbitrary order</p>",
        "id": 155181593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568577
    },
    {
        "content": "<p>but you could potentially sort the result if you wanted</p>",
        "id": 155181609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568589
    },
    {
        "content": "<p>that is, this particular algorithm doesn't care</p>",
        "id": 155181618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568596
    },
    {
        "content": "<blockquote>\n<p>that is, this particular algorithm doesn't care</p>\n</blockquote>\n<p>what do you mean by this?</p>",
        "id": 155181763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568681
    },
    {
        "content": "<p>what particular algorithm?</p>",
        "id": 155181770,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568687
    },
    {
        "content": "<p>skimming the PR, I don't see any obvious problem</p>",
        "id": 155181785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568700
    },
    {
        "content": "<blockquote>\n<p>what particular algorithm?</p>\n</blockquote>\n<p>the one you wrote :)</p>",
        "id": 155181787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568705
    },
    {
        "content": "<p>that decides whether or not to print a label</p>",
        "id": 155181795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568712
    },
    {
        "content": "<p>in my case depending on how I get successors it may say in later iteration or not</p>",
        "id": 155181798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568715
    },
    {
        "content": "<p>or at least I believe that could happen</p>",
        "id": 155181867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568746
    },
    {
        "content": "<p>if I have ...</p>",
        "id": 155181887,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568762
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>use\nsomething\nborrow\n</pre></div>",
        "id": 155181913,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568784
    },
    {
        "content": "<p>does this pass for you locally?</p>",
        "id": 155181916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568787
    },
    {
        "content": "<p>and I get</p>",
        "id": 155181922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568789
    },
    {
        "content": "<p>maybe it's just an outdated stderr file?</p>",
        "id": 155181923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568791
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>borrow\nsomething\nuse\n</pre></div>",
        "id": 155181932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568800
    },
    {
        "content": "<p>output would be different</p>",
        "id": 155181937,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568805
    },
    {
        "content": "<p>but it pass on a lot of platforms on travis</p>",
        "id": 155181954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568822
    },
    {
        "content": "<p>the question would be ...</p>",
        "id": 155182115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568934
    },
    {
        "content": "<p>can I get</p>",
        "id": 155182123,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>use\nsomething\nborrow\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>borrow\nsomething\nuse\n</pre></div>",
        "id": 155182169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568962
    },
    {
        "content": "<p>depending on how successors are returned?</p>",
        "id": 155182202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568979
    },
    {
        "content": "<p>or that's not possible?</p>",
        "id": 155182207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568984
    },
    {
        "content": "<p>I guess it could in the match example we talked about</p>",
        "id": 155184971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547571159
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn main() {\n    let mut x = 1;\n    let mut addr = vec![];\n    loop {\n        match 1 {\n            1 =&gt; addr.push(&amp;mut x),\n            _ =&gt; addr.push(&amp;mut x),\n        }\n    }\n}\n</pre></div>",
        "id": 155184999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547571190
    },
    {
        "content": "<p>which one shows up first, <code>1 =&gt;</code> or <code>_ =&gt;</code> and in the code it was <code>_ =&gt;</code> if I remember correctly</p>",
        "id": 155185026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547571225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I run tests locally and they pass</p>",
        "id": 155199466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547582592
    },
    {
        "content": "<p>have rebased and force pushed</p>",
        "id": 155199477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547582599
    },
    {
        "content": "<p>maybe we should r+ again and see what happens?</p>",
        "id": 155199492,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547582614
    },
    {
        "content": "<p>hmm</p>",
        "id": 155202536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584955
    },
    {
        "content": "<p>I feel like the order of successors ought to be consistent across all platforms</p>",
        "id": 155202543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584967
    },
    {
        "content": "<p>so that should not be it</p>",
        "id": 155202544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584968
    },
    {
        "content": "<p>must be something else</p>",
        "id": 155202549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547584972
    },
    {
        "content": "<p>can we r+ again and see?</p>",
        "id": 155202991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547585289
    },
    {
        "content": "<p>just in case</p>",
        "id": 155202995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547585291
    },
    {
        "content": "<p>I've just rebased on top of master and pushed again</p>",
        "id": 155203015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547585318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we could, if the PR is green, but it seems strange to be a spurious error</p>",
        "id": 155206457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588060
    },
    {
        "content": "<p>hmm yeah, gonna check out tomorrow</p>",
        "id": 155208821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547590165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so this is failing according to Travis <a href=\"https://travis-ci.com/rust-lang/rust/jobs/169962373\" target=\"_blank\" title=\"https://travis-ci.com/rust-lang/rust/jobs/169962373\">https://travis-ci.com/rust-lang/rust/jobs/169962373</a> on <code>x86_64-gnu-nopt</code> is there an easy way to get that image and debug?</p>",
        "id": 155338169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734862
    },
    {
        "content": "<p>You may want to ask in the infra channel on Discord -- I think there is some way to use docker images but don't know the details.</p>",
        "id": 155342021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547737737
    },
    {
        "content": "<p>maybe I can take a look later today or something though</p>",
        "id": 155342095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547737798
    },
    {
        "content": "<p>confusing</p>",
        "id": 155342099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547737801
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 155355335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547748177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> nothing come to my mind other than sorting <code>successors</code> and I was suggested on #infra to run <code>src/ci/docker/run.sh</code></p>",
        "id": 156393093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839566
    },
    {
        "content": "<p>I guess I can pass a flag or something to just use the right platform</p>",
        "id": 156393160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839652
    },
    {
        "content": "<p>need  to investigate</p>",
        "id": 156393162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839657
    },
    {
        "content": "<p>ok, I'll have another look in a bit</p>",
        "id": 156393332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547839798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> have you actually managed to confirm in some fashion that <code>successors</code> is returning different orderings?</p>",
        "id": 157029834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548686711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> no, I have this issue in my todo list still</p>",
        "id": 157037388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548692814
    },
    {
        "content": "<p>jumped to <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">#52708</a></p>",
        "id": 157037530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548692918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe I should work-steal this (<a href=\"https://github.com/rust-lang/rust/issues/53773\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53773\">#53773</a>) from you in that case?</p>",
        "id": 157092685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548754669
    },
    {
        "content": "<p>yes, feel free to do so</p>",
        "id": 157095778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548758367
    },
    {
        "content": "<p>okay. I'm not ready to work-steal anything immediately, but if I manage to finish one of the tasks I'm multi-tasking between right now, I'll consider doing it then.</p>",
        "id": 157097096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548760015
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 157098054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548761170
    },
    {
        "content": "<p>I was planning to come back to this task at some point also</p>",
        "id": 157098067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548761190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> about this issue I've added a commit that fixes the thing <a href=\"https://github.com/rust-lang/rust/pull/56113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56113\">https://github.com/rust-lang/rust/pull/56113</a></p>",
        "id": 157484372,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549229275
    },
    {
        "content": "<p>it was lacking a bless over .nll files</p>",
        "id": 157484416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549229315
    },
    {
        "content": "<p>and had no idea that when opening a PR this tests didn't run</p>",
        "id": 157484420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549229334
    },
    {
        "content": "<p>they only run on approval</p>",
        "id": 157484421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549229340
    }
]