[
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> ; the weekly meeting will be starting in ... gee about two minutes; sorry for not providing more of a heads up</p>",
        "id": 148740775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543436933
    },
    {
        "content": "<p>(some quick triage; I just categorized <a href=\"https://github.com/rust-lang/rust/issues/56254\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56254\">#56254</a> as NLL-sound ...)</p>",
        "id": 148740941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437097
    },
    {
        "content": "<p>I don't know what we're doing right now about milestone assignments so I'll leave that item on the standing agenda alone</p>",
        "id": 148740957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437121
    },
    {
        "content": "<p>and the <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL+-label%3ANLL-deferred+-label%3ANLL-fixed-by-NLL+no%3Aassignee+milestone%3A%22Rust+2018+Release%22\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-NLL+-label%3ANLL-deferred+-label%3ANLL-fixed-by-NLL+no%3Aassignee+milestone%3A%22Rust+2018+Release%22\">unassigned link</a> doesn't have anyone listed on it, but that might be a sign that we need to fix some milestones. Or maybe all is well.</p>",
        "id": 148741026,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437164
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 148741038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437183
    },
    {
        "content": "<p>(maybe we've removed everything from the one remaining milestone since its all linked to the edition, and so we need to use a different methodology for triage now....)</p>",
        "id": 148741048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437200
    },
    {
        "content": "<p>So what should we talk about today?</p>",
        "id": 148741067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437241
    },
    {
        "content": "<p>I've been kind of out of it last few days owing to illness but I have a few things on my mind :)</p>",
        "id": 148741120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437272
    },
    {
        "content": "<p>There are 7 open issues tagged as NLL-sound</p>",
        "id": 148741126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437285
    },
    {
        "content": "<p>5 open issues tagged as NLL-complete</p>",
        "id": 148741130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437295
    },
    {
        "content": "<p>(I'm not trying to do anything clever with filtering out NLL-deferred etc though right now)</p>",
        "id": 148741154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437315
    },
    {
        "content": "<p>41 open issues tagged as NLL-deferred</p>",
        "id": 148741159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437326
    },
    {
        "content": "<p>definitely one of the big questions has been how to prioritize</p>",
        "id": 148741171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437349
    },
    {
        "content": "<p>I tagged <a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a> as I-needs-decision back in mid-october</p>",
        "id": 148741223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437387
    },
    {
        "content": "<p>I think in a previous meeting we kind of broke down into a few buckets of \"things to do going forward\"...</p>\n<ul>\n<li>Fix bugs in what we have</li>\n<li>Port code over to using NLL borrow check that doesn't use it today</li>\n<li>Experiment with extended polonius support</li>\n</ul>\n<p>was sort of my breakdown</p>",
        "id": 148741227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437406
    },
    {
        "content": "<p>I feel like item 2 is probably worth deferring a bit. I think fixing bugs is good :)</p>",
        "id": 148741241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you removed <a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a> from the release milestone. But the comment you left leads me to think that its <em>still</em> I-needs-decision ... its just not a high priority decision?</p>",
        "id": 148741243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437427
    },
    {
        "content": "<blockquote>\n<p>I tagged <a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a> as I-needs-decision back in mid-october</p>\n</blockquote>\n<p>That's 95% done now, see the topic here for latest updates on it.</p>",
        "id": 148741245,
        "sender_full_name": "davidtwco",
        "timestamp": 1543437428
    },
    {
        "content": "<p>okay</p>",
        "id": 148741250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437447
    },
    {
        "content": "<p>yeah I think we more-or-less decided \"might as well fix\"</p>",
        "id": 148741252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437450
    },
    {
        "content": "<p>\"Port code over to using NLL borrow check that doesn't use it today\" What is this about?</p>",
        "id": 148741258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437476
    },
    {
        "content": "<p>We should recategorize NLL-deferred issues in those groups.</p>",
        "id": 148741260,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543437479
    },
    {
        "content": "<p>identifying code in the rustc or stdlib that falls into that category?</p>",
        "id": 148741304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437492
    },
    {
        "content": "<p>In rustc</p>",
        "id": 148741312,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543437504
    },
    {
        "content": "<p>I thought the vast majority of rustc crates were using NLL already?</p>",
        "id": 148741327,
        "sender_full_name": "davidtwco",
        "timestamp": 1543437525
    },
    {
        "content": "<blockquote>\n<p>\"Port code over to using NLL borrow check that doesn't use it today\" What is this about?</p>\n</blockquote>\n<p>there are lots of bits of code in rustc that still use the lexical region checker</p>",
        "id": 148741329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437528
    },
    {
        "content": "<p>I would think the only cases where we would prioritize such rewrites is where the existing code is slower because it is working around AST-borrowck limitations</p>",
        "id": 148741335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437535
    },
    {
        "content": "<p>I want to remove the lexical solver</p>",
        "id": 148741344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437545
    },
    {
        "content": "<p>Oh oh I see now</p>",
        "id": 148741345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437547
    },
    {
        "content": "<p>therefore, I want to convert that code</p>",
        "id": 148741346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437547
    },
    {
        "content": "<p>Sorry I misintpreted the bullet</p>",
        "id": 148741349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437553
    },
    {
        "content": "<p><em>however,</em> I don't want to prioritize that</p>",
        "id": 148741352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437556
    },
    {
        "content": "<p>Oh, I see what you meant by that. <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 148741353,
        "sender_full_name": "davidtwco",
        "timestamp": 1543437558
    },
    {
        "content": "<p>because I want to do more work on NLL checker first</p>",
        "id": 148741355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437563
    },
    {
        "content": "<p>as meaning <em>make use of NLL</em> as a language feature</p>",
        "id": 148741356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437564
    },
    {
        "content": "<p>yeah, it was sort of ambiguous :)</p>",
        "id": 148741358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437567
    },
    {
        "content": "<p>(and because I'd like us to have time to shake out bugs etc)</p>",
        "id": 148741377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437592
    },
    {
        "content": "<p>anyway I agree with <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> that revisited \"deferred\" issues is a good idea</p>",
        "id": 148741432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437613
    },
    {
        "content": "<p>Is it \"just\" item checking that still needs porting, or is there something more significant?</p>",
        "id": 148741433,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543437614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so you're pretty confident that most (or all) of the NLL-deferred things fall into one of those three buckets, or are <em>very</em> low priority?</p>",
        "id": 148741438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437624
    },
    {
        "content": "<p>no :) I'm not sure <em>what's</em> in there</p>",
        "id": 148741451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437633
    },
    {
        "content": "<p>I think it makes sense to remove NLL-deferred</p>",
        "id": 148741460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437642
    },
    {
        "content": "<p>k</p>",
        "id": 148741462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437642
    },
    {
        "content": "<p>as a thing</p>",
        "id": 148741464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437644
    },
    {
        "content": "<p>and move instead to P-medium vs P-low I guess</p>",
        "id": 148741477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437653
    },
    {
        "content": "<p>or untag en masse and then reuse it for future postponements. :)</p>",
        "id": 148741499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437671
    },
    {
        "content": "<blockquote>\n<p>Is it \"just\" item checking that still needs porting, or is there something more significant?</p>\n</blockquote>\n<p>I can think of a few random things; wf checking, comparing impl methods against obligations, ... that may be it, not sure</p>",
        "id": 148741508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437681
    },
    {
        "content": "<p>but yeah P-low sounds better I guess</p>",
        "id": 148741510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437683
    },
    {
        "content": "<blockquote>\n<p>or untag en masse and then reuse it for future postponements. :)</p>\n</blockquote>\n<p>well untagging en masse</p>",
        "id": 148741520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437695
    },
    {
        "content": "<p>and then triaging</p>",
        "id": 148741522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437697
    },
    {
        "content": "<p>is not the worst idea ever</p>",
        "id": 148741523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437699
    },
    {
        "content": "<p>but maybe it makes sense to look at the non-deferred things first?</p>",
        "id": 148741537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437716
    },
    {
        "content": "<p>e.g., the <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-sound+label%3AA-NLL\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-sound+label%3AA-NLL\">nll-sound issues</a></p>",
        "id": 148741601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437749
    },
    {
        "content": "<p>I guess they are all assigned</p>",
        "id": 148741612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437768
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3ANLL-deferred+label%3AA-NLL++-label%3ANLL-fixed-by-NLL\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3ANLL-deferred+label%3AA-NLL++-label%3ANLL-fixed-by-NLL\">Non-deferred and non-fixed-by-NLL issues</a></p>",
        "id": 148741615,
        "sender_full_name": "davidtwco",
        "timestamp": 1543437774
    },
    {
        "content": "<p>but maybe it makes sense to decide if any of them are \"P-high\" in the ordinary compiler sense?</p>",
        "id": 148741622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437777
    },
    {
        "content": "<p>i.e., something we should be checking in on each week</p>",
        "id": 148741637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437787
    },
    {
        "content": "<p>ouch forgot about the meeting and filling the doc</p>",
        "id": 148741642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543437793
    },
    {
        "content": "<p>ok, hi everyone :), sorry for being late</p>",
        "id": 148741648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543437801
    },
    {
        "content": "<p>just arrived today from Europe</p>",
        "id": 148741654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1543437809
    },
    {
        "content": "<p>I guess we have some P-high annotations</p>",
        "id": 148741745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437866
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/issues/54105\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54105\">#54105</a> is not assigned</p>",
        "id": 148741746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437867
    },
    {
        "content": "<p>yeah, I'll take that one, I want to compare with the work that <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>'s been doing</p>",
        "id": 148741760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437889
    },
    {
        "content": "<p><del>(why wasn't it caught in the earlier listing...)</del> ((it was there, nevermind))</p>",
        "id": 148741763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437899
    },
    {
        "content": "<p>it's definitely an edge case</p>",
        "id": 148741766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437901
    },
    {
        "content": "<p>if it's even a real bug</p>",
        "id": 148741773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437906
    },
    {
        "content": "<p>it'd be good to decide on way or the other :)</p>",
        "id": 148741788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437917
    },
    {
        "content": "<p>I was not able to reproduce a problem iirc</p>",
        "id": 148741790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437922
    },
    {
        "content": "<p>maybe we should go down the NLL-sound list?</p>",
        "id": 148741807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437938
    },
    {
        "content": "<p>okay</p>",
        "id": 148741811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437941
    },
    {
        "content": "<p>e.g.,  prohibit \"two-phase borrows\" with existing borrows? <a href=\"https://github.com/rust-lang/rust/issues/56254\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56254\">#56254</a></p>",
        "id": 148741818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437950
    },
    {
        "content": "<p>I'm not sure what's the latest in the thread but this needs to be acted up on relatively promptly I think</p>",
        "id": 148741820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437960
    },
    {
        "content": "<p>if we're going to make changes</p>",
        "id": 148741863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437966
    },
    {
        "content": "<p>Given that we were already trying to limit two-phase borrows (to e.g. autoref)</p>",
        "id": 148741867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543437971
    },
    {
        "content": "<p>I'm not inclined to backport though, as I wrote, because it just seems too stressful and not worth it</p>",
        "id": 148741873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543437976
    },
    {
        "content": "<p>it probably makes some sense to impose this limitation as well. Though I don't know anything about the supposed motivation (stacked borrows model, whatever that is)</p>",
        "id": 148741905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438003
    },
    {
        "content": "<p>\"how much code will be uploaded to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> that exploits this in 6 weeks\" (famous last words)</p>",
        "id": 148741906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438003
    },
    {
        "content": "<p>it's <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s attempt to come up with a definition of UB for unsafe code</p>",
        "id": 148741939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438036
    },
    {
        "content": "<p>I mean it is also true that</p>",
        "id": 148741956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438047
    },
    {
        "content": "<p>we may want to permit this sort of thing, even if it complicates the model</p>",
        "id": 148741962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438060
    },
    {
        "content": "<p>but it's nice to have the freedom to decide that</p>",
        "id": 148741968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438064
    },
    {
        "content": "<p>and this pattern is outside the original goals of 2PB</p>",
        "id": 148742016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438083
    },
    {
        "content": "<p>Well, the PR that I have up breaks some code in the compiler</p>",
        "id": 148742027,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438085
    },
    {
        "content": "<p>I've not looked at your PR</p>",
        "id": 148742037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438097
    },
    {
        "content": "<p>what code is broken?</p>",
        "id": 148742040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438101
    },
    {
        "content": "<blockquote>\n<p>we may want to permit this sort of thing, even if it complicates the model</p>\n</blockquote>\n<p>complicates the model and makes optimizations harder / require more information / stronger analysis</p>",
        "id": 148742105,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438165
    },
    {
        "content": "<p>the aforementioned PR from <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> : PR <a href=\"https://github.com/rust-lang/rust/issues/56301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56301\">#56301</a></p>",
        "id": 148742117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438174
    },
    {
        "content": "<p>it's some code in <code>add_retag.rs</code> <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 148742189,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[00:31:40] error[E0502]: cannot borrow `block_data.statements` as mutable because it is also borrowed as immutable\n[00:31:40]    --&gt; src/librustc_mir/transform/add_retag.rs:185:29\n[00:31:40]     |\n[00:31:40] 167 |                 match block_data.statements[i].kind {\n[00:31:40] ...\n[00:31:40] ...\n[00:31:40] 185 |                             block_data.statements.insert(i, Statement {\n[00:31:40] 186 |                                 source_info,\n[00:31:40] 186 |                                 source_info,\n[00:31:40] 187 |                                 kind: StatementKind::EscapeToRaw(src.clone()),\n[00:31:40]     |                                                                  --- immutable borrow used here, in later iteration of loop\n[00:31:40]\n[00:31:40] error[E0502]: cannot borrow `block_data.statements` as mutable because it is also borrowed as immutable\n[00:31:40]    --&gt; src/librustc_mir/transform/add_retag.rs:197:25\n[00:31:40]     |\n[00:31:40] 167 |                 match block_data.statements[i].kind {\n[00:31:40] ...\n[00:31:40] ...\n[00:31:40] 197 |                         block_data.statements.insert(i+1, Statement {\n[00:31:40] 198 |                             source_info,\n[00:31:40] 198 |                             source_info,\n[00:31:40] 199 |                             kind: StatementKind::Retag { fn_entry: false, place: place.clone() },\n[00:31:40]     |                                                                                  ----- immutable borrow used here, in later iteration of loop\n[00:31:48] error: aborting due to 2 previous errors\n</pre></div>",
        "id": 148742243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438258
    },
    {
        "content": "<p>(see the travis failure)</p>",
        "id": 148742248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438260
    },
    {
        "content": "<p>that I guess?</p>",
        "id": 148742250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438262
    },
    {
        "content": "<p>Yes, the clones can just be moved out of the calls to fix this</p>",
        "id": 148742340,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438289
    },
    {
        "content": "<p>but ... is this code that used to work under AST-borrowck ?</p>",
        "id": 148742398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438323
    },
    {
        "content": "<p>interesting</p>",
        "id": 148742411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438329
    },
    {
        "content": "<p>or was it only added after we turned on NLL by default?</p>",
        "id": 148742418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438336
    },
    {
        "content": "<p>I added it fairly recently</p>",
        "id": 148742426,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438343
    },
    {
        "content": "<p>but I was certainly not aware I was even relying on 2PB^^</p>",
        "id": 148742430,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438350
    },
    {
        "content": "<p>added 2018-11-06</p>",
        "id": 148742434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438351
    },
    {
        "content": "<p>so you admit to using the feature you want to remove! J'accuse! <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148742448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438364
    },
    {
        "content": "<p>amusing</p>",
        "id": 148742458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438378
    },
    {
        "content": "<p>well I think this refutes niko's argument that no code relying on this will land on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> in 6 weeks :P</p>",
        "id": 148742468,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438387
    },
    {
        "content": "<p>heh. =) it may well</p>",
        "id": 148742486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438406
    },
    {
        "content": "<p>There may already be projects on nightly with code that relies on it.</p>",
        "id": 148742580,
        "sender_full_name": "davidtwco",
        "timestamp": 1543438464
    },
    {
        "content": "<p>do we want to make an executive decision here on our own as a team, or do we want to let T-lang weigh in tomororw night?</p>",
        "id": 148742582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438469
    },
    {
        "content": "<p>We could just revert the match guard desugaring and then the fix is simple. The match bug has been around since forever and it's only a warning in migrate mode.</p>",
        "id": 148742660,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438540
    },
    {
        "content": "<p>(Or not, but then it's less simple)</p>",
        "id": 148742677,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438555
    },
    {
        "content": "<p>hmm my reading was that the regression of <a href=\"http://add_retag.rs\" target=\"_blank\" title=\"http://add_retag.rs\">add_retag.rs</a> was due to the fundamental restriction being added; you say its actually part of the new match guard desugaring?</p>",
        "id": 148742739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438595
    },
    {
        "content": "<p>/me goes to look more carefully at the code in question</p>",
        "id": 148742748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438610
    },
    {
        "content": "<p>No, I'm talking about the easiest way to make Reservations mutable accesses</p>",
        "id": 148742765,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438631
    },
    {
        "content": "<p>it looks fundamental to me</p>",
        "id": 148742767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438633
    },
    {
        "content": "<p>Which is what the current match checking relies on. (It relies on them only being shared accesses)</p>",
        "id": 148742787,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> okay, but hold on. There may be different threads of conversation going on ...</p>",
        "id": 148742841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438683
    },
    {
        "content": "<p>I think we should probably hash this out in the other topic</p>",
        "id": 148742847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438685
    },
    {
        "content": "<p>(outside of this mtg?)</p>",
        "id": 148742857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438694
    },
    {
        "content": "<p>yeah, add_retag fundamentally relies on the thing I am suggesting to not allow</p>",
        "id": 148742858,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438695
    },
    {
        "content": "<p>rather ironically, I must admit^^</p>",
        "id": 148742862,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438702
    },
    {
        "content": "<p>but it does seem like we have to reach a decision asap</p>",
        "id": 148742866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438704
    },
    {
        "content": "<p>I though the point raised by the <code>add_retag.rs</code> example was that code in the wild might in practice <em>want</em> to lift the constraint being requested by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 148742876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438712
    },
    {
        "content": "<p>not only is that code I wrote, it is part of the Stacked Borrows implementation which gives rise to my suggestions</p>",
        "id": 148742883,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438724
    },
    {
        "content": "<p>okay.</p>",
        "id": 148742891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438733
    },
    {
        "content": "<p>That's the best irony I've seen in so long.</p>",
        "id": 148742898,
        "sender_full_name": "davidtwco",
        "timestamp": 1543438741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah okay so maybe we got sidetracked, or maybe this is the most important Q to resolve in the meeting, given the time pressure...?</p>",
        "id": 148742934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438761
    },
    {
        "content": "<p>(honestly not sure)</p>",
        "id": 148742940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438769
    },
    {
        "content": "<p>heh I too am unsure</p>",
        "id": 148742949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438779
    },
    {
        "content": "<p>I am reluctant to revert the match guard protections etc</p>",
        "id": 148742970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438801
    },
    {
        "content": "<blockquote>\n<p>I though the point raised by the <code>add_retag.rs</code> example was that code in the wild might in practice <em>want</em> to lift the constraint being requested by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>\n</blockquote>\n<p>yeah there's a tradeoff between allowing more code on the one hand, and more optimizations / easier analysis (in the optimizer) on the other hand</p>",
        "id": 148743005,
        "sender_full_name": "RalfJ",
        "timestamp": 1543438803
    },
    {
        "content": "<p>Do we think that it's worth trying at all to get a fix for this in before the release?</p>",
        "id": 148743051,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438824
    },
    {
        "content": "<blockquote>\n<p>I am reluctant to revert the match guard protections etc</p>\n</blockquote>\n<p>the risks around match guards may be fundamentally lower</p>",
        "id": 148743093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438872
    },
    {
        "content": "<p>because there is feature gate guarding the more full featured expressive forms there</p>",
        "id": 148743098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438885
    },
    {
        "content": "<p>/me goes to look for the link</p>",
        "id": 148743106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438893
    },
    {
        "content": "<p>this one: <a href=\"https://github.com/rust-lang/rfcs/pull/107\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/107\">https://github.com/rust-lang/rfcs/pull/107</a></p>",
        "id": 148743120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438909
    },
    {
        "content": "<p>aka <a href=\"https://github.com/rust-lang/rust/issues/15287\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15287\">#15287</a></p>",
        "id": 148743132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438920
    },
    {
        "content": "<p>aka <code>#![feature(bind_by_move_pattern_guards)]</code></p>",
        "id": 148743180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438930
    },
    {
        "content": "<p>I guess then the options are:</p>\n<ul>\n<li>land <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s PR as is, perhaps backport</li>\n<li>revert arm guards and land a variant on the PR, perhaps backport</li>\n<li>do not backport and discuss more</li>\n</ul>\n<p>in the first two cases, we probably want to revisit the model a bit and see if we can't find something we're happier with overall?</p>",
        "id": 148743200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438953
    },
    {
        "content": "<p>You need to use a closure that captures the variable being matched on.</p>",
        "id": 148743201,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543438953
    },
    {
        "content": "<p>in other words, I am claiming that it will be harder for people to run into trouble there ... maybe... because we already limit them so much</p>",
        "id": 148743205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438957
    },
    {
        "content": "<blockquote>\n<p>You need to use a closure that captures the variable being matched on.</p>\n</blockquote>\n<p>right, that's the <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> workaround for exposing the old bug</p>",
        "id": 148743231,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543438985
    },
    {
        "content": "<p>it just feels like a lot of code to change too</p>",
        "id": 148743233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543438987
    },
    {
        "content": "<p>what does reverting the match guard protection mean exactly?</p>",
        "id": 148743253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439011
    },
    {
        "content": "<p>we would make <code>ref mut p</code> exposed as a true <code>&amp;mut</code> in the arm guard code?</p>",
        "id": 148743271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439030
    },
    {
        "content": "<p>I think we do have some sort of \"boolean\" there, or used to, to change how the MIR was generated</p>",
        "id": 148743277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439040
    },
    {
        "content": "<p>so perhaps that's still well tested</p>",
        "id": 148743280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439043
    },
    {
        "content": "<blockquote>\n<p>we would make <code>ref mut p</code> exposed as a true <code>&amp;mut</code> in the arm guard code?</p>\n</blockquote>\n<p>that's not even needed, \"just\" the fake refs/reads are in the way</p>",
        "id": 148743334,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439060
    },
    {
        "content": "<p>(I think the \"final result\" we want may well just be the \"transmute\" approach anyway?)</p>",
        "id": 148743336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439062
    },
    {
        "content": "<ul>\n<li>Set the <code>generate_borrow_of_any_match_input</code> flag to false by default, even in NLL</li>\n<li>Change the <code>ref mut</code> borrow back to \"one phase\"</li>\n</ul>",
        "id": 148743363,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439089
    },
    {
        "content": "<blockquote>\n<p>that's not even needed, \"just\" the fake refs/reads are in the way</p>\n</blockquote>\n<p>which fake refs are you referring to?</p>",
        "id": 148743418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439132
    },
    {
        "content": "<blockquote>\n<p>Set the <code>generate_borrow_of_any_match_input</code> flag to false by default, even in NLL</p>\n</blockquote>\n<p>won't that open a soundness hole?</p>",
        "id": 148743424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439140
    },
    {
        "content": "<p>oh only if you do the closure thing</p>",
        "id": 148743438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439160
    },
    {
        "content": "<p>Yes, but it's a hard one to exploit</p>",
        "id": 148743479,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439163
    },
    {
        "content": "<p>iirc, we first insert a bunch of shallow borrows for all the \"discriminants\" we switch on -- these last until we enter the match arm.</p>\n<p>then for guards with <code>&amp;mut</code> variables we do 2PB that are never activated.</p>\n<p>It's these 2PB that are a problem, right?</p>",
        "id": 148743486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439165
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>that's not even needed, \"just\" the fake refs/reads are in the way</p>\n</blockquote>\n<p>which fake refs are you referring to?</p>\n</blockquote>\n<p>the \"fake\" stuff in <a href=\"https://github.com/rust-lang/rust/issues/56254#issuecomment-442357546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56254#issuecomment-442357546\">https://github.com/rust-lang/rust/issues/56254#issuecomment-442357546</a></p>",
        "id": 148743496,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439173
    },
    {
        "content": "<p>with those gone, the borrow can even stay <code>&amp;mut2phase</code>, because there'll be no outstanding shared borrows</p>",
        "id": 148743605,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439281
    },
    {
        "content": "<p>(from what I understand, not sure if I got this right)</p>",
        "id": 148743649,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439290
    },
    {
        "content": "<p>right, so from my list, you're talking about the \"shallow borrows for discriminants\"</p>",
        "id": 148743663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439308
    },
    {
        "content": "<p>but the whole point of the FakeReads is to catch mutations from the guards, no?</p>",
        "id": 148743672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439315
    },
    {
        "content": "<p>there were some pretty bad soundness problems in matches iirc</p>",
        "id": 148743679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439318
    },
    {
        "content": "<p>that required less than a closure to exploit :)</p>",
        "id": 148743690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439332
    },
    {
        "content": "<p>I want to be sure we don't re-open those doors</p>",
        "id": 148743699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439340
    },
    {
        "content": "<p>I'm not convinced that just reverting the guard treatment helps here? In particular, if we go back to the old way, then aren't <code>ref mut</code> bindings a strict <code>&amp;mut</code>, which means that they will <em>definitely</em> conflict with the \"fake\" borrows of the discriminants, right? or am I being silly?</p>",
        "id": 148743833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439420
    },
    {
        "content": "<p>The particularly bad one was that AST borrowck has no concept of a \"discriminant(x)\" which accesses memory</p>",
        "id": 148743840,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is my summary roughly correct of what we are doing now?</p>",
        "id": 148743853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439453
    },
    {
        "content": "<p>Yes, that's why I'm suggesting turning them off, for now</p>",
        "id": 148743868,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439469
    },
    {
        "content": "<p>right but how does that help. Then we do the discriminant borrows and we do <em>real</em> <code>&amp;mut</code> borrows, not 2phase</p>",
        "id": 148743956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439538
    },
    {
        "content": "<p>which <em>definitely</em> conflict</p>",
        "id": 148743962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439543
    },
    {
        "content": "<p>I think he's proposing to not do discriminant borrows</p>",
        "id": 148743972,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439556
    },
    {
        "content": "<p>No, I mean the discriminant borrows</p>",
        "id": 148743974,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439558
    },
    {
        "content": "<p>that's what's being turned off</p>",
        "id": 148743975,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439560
    },
    {
        "content": "<p>ah ok</p>",
        "id": 148743976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439562
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Set the <code>generate_borrow_of_any_match_input</code> flag to false by default, even in NLL</li>\n<li>Change the <code>ref mut</code> borrow back to \"one phase\"</li>\n</ul>\n</blockquote>\n<p>so not this :)</p>",
        "id": 148743987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439574
    },
    {
        "content": "<p>.... no that is what he's describing</p>",
        "id": 148744003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439591
    },
    {
        "content": "<p>ok, I guess I'm confused as to the role of that flag</p>",
        "id": 148744012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439610
    },
    {
        "content": "<p>Setting <code>generate_borrow_of_any_match_input</code> flag to false will cause the discriminant borrows to be suppressed</p>",
        "id": 148744023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439618
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 148744025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439619
    },
    {
        "content": "<p>ok ok thanks sorry :)</p>",
        "id": 148744031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439624
    },
    {
        "content": "<p>in that case we don't have to change the ref mut borrows back to 1phase</p>",
        "id": 148744040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439635
    },
    {
        "content": "<p>we can if we like</p>",
        "id": 148744045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439641
    },
    {
        "content": "<p>(right?)</p>",
        "id": 148744096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439660
    },
    {
        "content": "<p>I think so (that's what I said above)</p>",
        "id": 148744110,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439676
    },
    {
        "content": "<p>I don't quite grok the logic of what we're talking about</p>",
        "id": 148744113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439678
    },
    {
        "content": "<p>in terms of re-injecting an (admittedly subtle) soundness hole</p>",
        "id": 148744125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439693
    },
    {
        "content": "<p>in order to accommodate a hypothetical soundness model...</p>",
        "id": 148744144,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543439713
    },
    {
        "content": "<p>It's doesn't really matter either way. It just keeps more options open.</p>",
        "id": 148744148,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> it'd make restricting 2PB as suggested trivial (backportable, even, maybe), that's all</p>",
        "id": 148744184,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439758
    },
    {
        "content": "<p>but yeah knowingly introducing unsoundness is... rather drastic</p>",
        "id": 148744242,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439778
    },
    {
        "content": "<p>it seems like <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s Pr is \"not so bad\"</p>",
        "id": 148744258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439798
    },
    {
        "content": "<p>the only thing that we would wnt to do to clean it up</p>",
        "id": 148744268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439805
    },
    {
        "content": "<p>If we're not backporting. Then I'll create a PR that does this all properly.</p>",
        "id": 148744270,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439807
    },
    {
        "content": "<p>is to remove 2PB and replace with transmute</p>",
        "id": 148744273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439811
    },
    {
        "content": "<p>and sidestep the whole issue</p>",
        "id": 148744293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439826
    },
    {
        "content": "<p>i.e., transmute a <code>&amp;&amp;Foo</code> to a <code>&amp;&amp;mut Foo</code></p>",
        "id": 148744316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439850
    },
    {
        "content": "<p>which -- as <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has proven =) -- are equivalent</p>",
        "id": 148744329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439864
    },
    {
        "content": "<p>and then we don't have the special cases anymore</p>",
        "id": 148744337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439876
    },
    {
        "content": "<p>(we could maybe even do that in the PR itself, I suppose)</p>",
        "id": 148744379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439884
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 148744382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439887
    },
    {
        "content": "<p>I think so</p>",
        "id": 148744409,
        "sender_full_name": "RalfJ",
        "timestamp": 1543439921
    },
    {
        "content": "<blockquote>\n<p><code>match x { ref mut z if x == z =&gt; ...</code></p>\n</blockquote>\n<p>If we're happy with this compiling</p>",
        "id": 148744424,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543439942
    },
    {
        "content": "<p>ok, right, so there is the question of </p>\n<div class=\"codehilite\"><pre><span></span>match x { ref mut z if x == 1\n</pre></div>\n\n\n<p>but .. I feel ok about it personally. In partcular,</p>",
        "id": 148744458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439977
    },
    {
        "content": "<p>it would be UB to (e.g.) use unsafe code to modify through that <code>*z</code> etc</p>",
        "id": 148744469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439988
    },
    {
        "content": "<p>so there is already some \"specialness\" going on</p>",
        "id": 148744478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543439996
    },
    {
        "content": "<p>i.e., there is an edge case where the desugaring becomes visible, but it's not clearly a problem</p>",
        "id": 148744548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440024
    },
    {
        "content": "<p>I guess I don't know what the alternative is that rejects that, did you have a concrete proposal <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>?</p>",
        "id": 148744560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440038
    },
    {
        "content": "<p>wait was it supposed to be <code>1</code> or <code>z</code> in there</p>",
        "id": 148744569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440054
    },
    {
        "content": "<p><code>z</code>, right?</p>",
        "id": 148744573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440058
    },
    {
        "content": "<p>no</p>",
        "id": 148744581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440062
    },
    {
        "content": "<p>the point is</p>",
        "id": 148744586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440064
    },
    {
        "content": "<p>we have a <code>z</code> with type <code>&amp;&amp;mut u32</code></p>",
        "id": 148744600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440072
    },
    {
        "content": "<p>Either: it doesn't really matter</p>",
        "id": 148744605,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440078
    },
    {
        "content": "<p>but it's kind of a lie -- but not <em>really</em> a lie</p>",
        "id": 148744609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440080
    },
    {
        "content": "<p>er sorry <code>z</code> has type <code>&amp;mut u32</code></p>",
        "id": 148744618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440093
    },
    {
        "content": "<p>but you can access <code>x</code> directly</p>",
        "id": 148744623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440102
    },
    {
        "content": "<p>since <em>really</em> what you have when you reference <code>z</code> is not an <code>&amp;mut u32</code></p>",
        "id": 148744633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440110
    },
    {
        "content": "<p>but rather a \"shared\" <code>&amp;mut u32</code></p>",
        "id": 148744643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440117
    },
    {
        "content": "<p>(this also compiles today, I presume)</p>",
        "id": 148744691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440128
    },
    {
        "content": "<p>I feel like guards are in a weird state and when someone notices this, it's time for them to \"level up\" and learn about the desugaring a bit more deeply :P</p>",
        "id": 148744718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440153
    },
    {
        "content": "<p>but maybe i'm rationalizing</p>",
        "id": 148744734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440170
    },
    {
        "content": "<p>Are we going to be committing to this same code gen strategy forever?</p>",
        "id": 148744777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440219
    },
    {
        "content": "<p>we're committed to that code compiling</p>",
        "id": 148744794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440236
    },
    {
        "content": "<p>but the stuff about using unsafe code to observe the underlying pointers</p>",
        "id": 148744842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440249
    },
    {
        "content": "<p>but really what it comes down to is</p>",
        "id": 148744846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440256
    },
    {
        "content": "<p>I'm asking if we're committing to that always having the same semantics</p>",
        "id": 148744848,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440259
    },
    {
        "content": "<p>when does the \"uniqueness\" kick in</p>",
        "id": 148744850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440260
    },
    {
        "content": "<p>IMO, we should take the obvious codegen, and remove unsound cases. Not create new cases that are OK</p>",
        "id": 148744856,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440268
    },
    {
        "content": "<p>effectively we're building an upgradable read-write lock</p>",
        "id": 148744859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440269
    },
    {
        "content": "<p>I must have missed it. What is the \"obvious codegen\"?</p>",
        "id": 148744865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440281
    },
    {
        "content": "<blockquote>\n<p>effectively we're building an upgradable read-write lock</p>\n</blockquote>\n<p>this is what 2PB is doing today; we're recreating that behavior through a shared lock that transitions to a <code>&amp;mut</code></p>",
        "id": 148744877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440300
    },
    {
        "content": "<p>Create a mutable reference immediately, no fake borrows, only one version of the variable.</p>",
        "id": 148744906,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> the fake borrows are what prevent aliased mutation (via closure)</p>",
        "id": 148744973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440385
    },
    {
        "content": "<p>right, that is what we started with, but we adopted this to close soundness holes</p>",
        "id": 148744986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440398
    },
    {
        "content": "<blockquote>\n<p>Create a mutable reference immediately, no fake borrows, only one version of the variable.</p>\n</blockquote>\n<p>but then how do we reject guards that mutate the discriminant?</p>",
        "id": 148744992,
        "sender_full_name": "RalfJ",
        "timestamp": 1543440408
    },
    {
        "content": "<p>(the background here, for the peanut gallery, is available in PR <a href=\"https://github.com/rust-lang/rust/issues/50783\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50783\">#50783</a> and issue <a href=\"https://github.com/rust-lang/rust/issues/27282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282\">#27282</a> )</p>",
        "id": 148745015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440444
    },
    {
        "content": "<p>ah thanks I was looking for <a href=\"https://github.com/rust-lang/rust/issues/27282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282\">#27282</a></p>",
        "id": 148745045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440479
    },
    {
        "content": "<p>oh, I was searching with <code>is:closed</code></p>",
        "id": 148745098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440495
    },
    {
        "content": "<p>that's why I couldn't find it :)</p>",
        "id": 148745102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440499
    },
    {
        "content": "<p>Indeed, we need to prevent mutation except the \"mutation\" from <code>ref mut</code>. I just don't think that we should allow more code in the process.</p>",
        "id": 148745111,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440509
    },
    {
        "content": "<p>well, including the mutation from <code>ref mut</code>?</p>",
        "id": 148745125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440525
    },
    {
        "content": "<p>(er, what I mean is, the guard should not mutate through the <code>ref mut</code> binding)</p>",
        "id": 148745144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440545
    },
    {
        "content": "<p>Yes, it shouldn't, but <code>ref mut</code> should be allowed</p>",
        "id": 148745174,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440568
    },
    {
        "content": "<p>I see your point, in any case, I'm just not sure how that is to be done.</p>",
        "id": 148745179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440574
    },
    {
        "content": "<p>Indeed, there's no way I'm implementing a solution there in 2 days.</p>",
        "id": 148745195,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440598
    },
    {
        "content": "<p>I know we've written up various edge cases in the past</p>",
        "id": 148745242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440607
    },
    {
        "content": "<p>that said</p>",
        "id": 148745253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440612
    },
    {
        "content": "<p>I think that if we leave this rather narrow window open</p>",
        "id": 148745258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440618
    },
    {
        "content": "<p>that you can access the value being matched <em>in a match arm</em></p>",
        "id": 148745261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440624
    },
    {
        "content": "<p>(and i think many of the edge cases are in the comment thread of <a href=\"https://github.com/rust-lang/rust/issues/27282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/27282\">#27282</a> ...)</p>",
        "id": 148745266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440630
    },
    {
        "content": "<p>there's a good chance we can close it, if we come up with a good fix</p>",
        "id": 148745273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440633
    },
    {
        "content": "<p>and if not, I think we can live with it</p>",
        "id": 148745285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440645
    },
    {
        "content": "<p>since basically the way to think about it is:</p>\n<ul>\n<li>during matching -- <strong>and guard evaluation</strong> -- you have shared borrows to everything</li>\n<li>the <code>ref mut</code> is only really activated once you pick an arm</li>\n</ul>",
        "id": 148745314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440669
    },
    {
        "content": "<p>I agree it's not ideal, but it seems tolerably simple</p>",
        "id": 148745332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440698
    },
    {
        "content": "<p>that said I think it's not a bad idea to try and revisit (and document, this time!) the whole saga</p>",
        "id": 148745342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440717
    },
    {
        "content": "<p>i.e., schedule a time to go over and rederive all the edge cases</p>",
        "id": 148745381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440724
    },
    {
        "content": "<p>and see if we see another solution</p>",
        "id": 148745384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440730
    },
    {
        "content": "<blockquote>\n<p>I agree it's not ideal, but it seems tolerably simple</p>\n</blockquote>\n<p>it seems like a more likely way for people to learn about this is when they try to pass the <code>&amp;mut</code> to a function that mutates, like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148745424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440778
    },
    {
        "content": "<p>and we all agree that will not be permitted...</p>",
        "id": 148745444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440795
    },
    {
        "content": "<p>speaking of which, I bet we give a terrible error message for that</p>",
        "id": 148745462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440819
    },
    {
        "content": "<p>(or we will once that feature gate is lifted)</p>",
        "id": 148745532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440874
    },
    {
        "content": "<p>so does that mean we want to start by trying to land some variant of <a href=\"https://github.com/rust-lang/rust/issues/56301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56301\">#56301</a> ?</p>",
        "id": 148745558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440909
    },
    {
        "content": "<p>and backport?</p>",
        "id": 148745563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow `*v` as mutable, as it is immutable for the pattern guard\n --&gt; &lt;source&gt;:9:22\n  |\n9 |         ref mut v if v.insert(22) =&gt; { }\n  |                      ^ cannot borrow as mutable\n  |\n  = note: variables bound in patterns are immutable until the end of the pattern guard\nerror: aborting due to previous error\nFor more information about this error, try `rustc --explain E0596`.\nCompiler returned: 1\n</pre></div>\n\n\n<p>Could be worse</p>",
        "id": 148745569,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543440923
    },
    {
        "content": "<p>and then do a comprehensive review of the situation?</p>",
        "id": 148745572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440928
    },
    {
        "content": "<blockquote>\n<p>Could be worse</p>\n</blockquote>\n<p>I stand corrected! pretty decent</p>",
        "id": 148745579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543440942
    },
    {
        "content": "<p>is that from nightly, or from your PR, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  ?</p>",
        "id": 148745597,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543440963
    },
    {
        "content": "<p>I got this with <code>#![feature(nll)]</code> unless I'm doing something wrong? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=557f22e6c8ae84fc3b77cc8cfaa77f61\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=557f22e6c8ae84fc3b77cc8cfaa77f61\">playground</a></p>\n<div class=\"codehilite\"><pre><span></span>error[E0301]: cannot mutably borrow in a pattern guard\n --&gt; src/main.rs:6:22\n  |\n6 |         ref mut v if v.insert(22) =&gt; { println!(&quot;{:?}&quot;, v); }\n  |                      ^ borrowed mutably in pattern guard\n  |\n  = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n</pre></div>",
        "id": 148745661,
        "sender_full_name": "davidtwco",
        "timestamp": 1543441000
    },
    {
        "content": "<p><code>#![feature(nll, bind_by_move_pattern_guards)]</code></p>",
        "id": 148745681,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441015
    },
    {
        "content": "<p>Or am I missing that attribute..</p>",
        "id": 148745683,
        "sender_full_name": "davidtwco",
        "timestamp": 1543441016
    },
    {
        "content": "<p>Yeah, as soon as I sent that it clicked.</p>",
        "id": 148745692,
        "sender_full_name": "davidtwco",
        "timestamp": 1543441023
    },
    {
        "content": "<p><span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 148745698,
        "sender_full_name": "davidtwco",
        "timestamp": 1543441025
    },
    {
        "content": "<p>Hmm, how easy is it to generate a transmute in MIR?</p>",
        "id": 148745720,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441060
    },
    {
        "content": "<p>oh we can just make it a <code>Cast</code></p>",
        "id": 148745728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441073
    },
    {
        "content": "<p>(that was my plan, anyway)</p>",
        "id": 148745737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441082
    },
    {
        "content": "<p>will that pass mir-typeck ?</p>",
        "id": 148745785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441098
    },
    {
        "content": "<p>I was expecting to add a new <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.CastKind.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.CastKind.html\"><code>CastKind</code></a></p>",
        "id": 148745805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441120
    },
    {
        "content": "<p>for converting <code>&amp;&amp; T</code> to <code>&amp;&amp;mut T</code></p>",
        "id": 148745817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441129
    },
    {
        "content": "<p>ah</p>",
        "id": 148745819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441132
    },
    {
        "content": "<p>we'd have to add support to mir typeck</p>",
        "id": 148745832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441144
    },
    {
        "content": "<p>but doesn't seem so hard</p>",
        "id": 148745840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441148
    },
    {
        "content": "<p>basically just equate the lifetimes and the type</p>",
        "id": 148745848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441156
    },
    {
        "content": "<p>I wouldn't want to <em>literally</em> invoke <code>transmute</code>, that'd be a pain</p>",
        "id": 148745871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441192
    },
    {
        "content": "<p>(and would hurt compilation time)</p>",
        "id": 148745880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441198
    },
    {
        "content": "<p>Ah, OK. Still, that sounds like more work than I have time for.</p>",
        "id": 148745967,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441250
    },
    {
        "content": "<p>it seems \"not hard\" but not <em>easy</em></p>",
        "id": 148746022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441323
    },
    {
        "content": "<blockquote>\n<p>i.e., schedule a time to go over and rederive all the edge cases</p>\n</blockquote>\n<p>I don't know if this counts, but I did try to transcribe all of them into tests. Look in ui/issues/ and look for filenames that start with issue-27282</p>",
        "id": 148746024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441324
    },
    {
        "content": "<p>can we at least fix the travis error <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> in your PR and see what happens next?</p>",
        "id": 148746069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441345
    },
    {
        "content": "<p>that seems like the most immediate thing that needs to be done</p>",
        "id": 148746076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441354
    },
    {
        "content": "<p>Sure</p>",
        "id": 148746080,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441359
    },
    {
        "content": "<p>also, we are ridiculously over time :)</p>",
        "id": 148746082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441361
    },
    {
        "content": "<p>we really have to reach a final decision on this ASAP, presumably tomorrow morning</p>",
        "id": 148746089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441373
    },
    {
        "content": "<p>so sorry for crashing your meeting :/</p>",
        "id": 148746096,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441379
    },
    {
        "content": "<p>It had to be addressed</p>",
        "id": 148746114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441401
    },
    {
        "content": "<p>that's why I put it on the agenda</p>",
        "id": 148746117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> just to be clear, though, another alternative here is that SB knows about 2PB and we make the \"activation point\" be a \"thing\", right?</p>",
        "id": 148746141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441431
    },
    {
        "content": "<p>and also big <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span> for actually seriously considering such a change so late in the process. whatever the outcome, it is much appreciated!</p>",
        "id": 148746142,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441431
    },
    {
        "content": "<p>(even if we never actually reached that agenda item per se)</p>",
        "id": 148746147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441437
    },
    {
        "content": "<p>i.e., a <code>&amp;mut2</code> pushes something onto the stack that is more like \"shared\"</p>",
        "id": 148746149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441439
    },
    {
        "content": "<p>and then the activation pushes the true mut on there</p>",
        "id": 148746192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441445
    },
    {
        "content": "<p>i.e., it's not necessarily a full-on-graph that is required</p>",
        "id": 148746206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441459
    },
    {
        "content": "<p>just that 2PB is more \"known\" to stacked borrows than you would like</p>",
        "id": 148746219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441474
    },
    {
        "content": "<p>well I think it might need a tree</p>",
        "id": 148746221,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> has some examples with multiple outstanding 2PB</p>",
        "id": 148746237,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441486
    },
    {
        "content": "<p>can you send me a link?</p>",
        "id": 148746259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441503
    },
    {
        "content": "<p>I'm sure you have already done so ...</p>",
        "id": 148746272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441518
    },
    {
        "content": "<p>I'm afraid <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> 's notebook in Rome doesn't have a URL</p>",
        "id": 148746277,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441525
    },
    {
        "content": "<p>heh</p>",
        "id": 148746284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441529
    },
    {
        "content": "<p>ok, maybe they can transcribe them</p>",
        "id": 148746288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441535
    },
    {
        "content": "<p>I'd like to see an example at some point</p>",
        "id": 148746361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441574
    },
    {
        "content": "<p>roughly, it was</p>\n<div class=\"codehilite\"><pre><span></span>let tpb1 = &amp;2phase x;\nlet tpb2 = &amp;2phase x;\nif condition { activate(tbp1) } else { activate (tbp2) }\n</pre></div>",
        "id": 148746365,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441577
    },
    {
        "content": "<p>that can't happen</p>",
        "id": 148746372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441584
    },
    {
        "content": "<p>well, with the current restrictive desugaring yes</p>",
        "id": 148746380,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441598
    },
    {
        "content": "<p>but it is a rather natural question if you say \"2pb isn't initially exclusive\"</p>",
        "id": 148746389,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441612
    },
    {
        "content": "<p>and remember that the model has to work in unsafe code</p>",
        "id": 148746415,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441639
    },
    {
        "content": "<p>basically I am trying to figure out</p>",
        "id": 148746422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441645
    },
    {
        "content": "<p>even in that case, I guess</p>",
        "id": 148746428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441651
    },
    {
        "content": "<p>it seems like if we made the activations a real thing</p>",
        "id": 148746433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441656
    },
    {
        "content": "<p>and the borrow is then just effectively a shared borrow</p>",
        "id": 148746440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441666
    },
    {
        "content": "<p>that reminds me of <code>EndRegion</code>. in all the bad ways.</p>",
        "id": 148746446,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441673
    },
    {
        "content": "<p>but the activation is what pushes the <code>&amp;mut</code></p>",
        "id": 148746450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441676
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148746494,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441688
    },
    {
        "content": "<p>wtf is that?^^</p>",
        "id": 148746511,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441711
    },
    {
        "content": "<p>that seems fine to me</p>",
        "id": 148746520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441716
    },
    {
        "content": "<p>the aliasing never gets observed, no?</p>",
        "id": 148746536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441731
    },
    {
        "content": "<p>or is <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> 's point that this is not intuitive?</p>",
        "id": 148746614,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441791
    },
    {
        "content": "<blockquote>\n<p>that reminds me of <code>EndRegion</code>. in all the bad ways.</p>\n</blockquote>\n<p>it feels pretty different to me. The activation is a \"real point\" that we have to consider in the borrow checker anyway, and it corresponds to a single use.</p>",
        "id": 148746678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441806
    },
    {
        "content": "<p>Actually, never mind, it's fine.</p>",
        "id": 148746701,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441830
    },
    {
        "content": "<p>(and also, I think the current impl of 2PB would still reject it .... )</p>",
        "id": 148746715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441848
    },
    {
        "content": "<p>in any case, i'm just trying to tease out exactly what we are committed to</p>",
        "id": 148746719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441852
    },
    {
        "content": "<p>if we wind up doing nothing</p>",
        "id": 148746720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441854
    },
    {
        "content": "<blockquote>\n<p>(and also, I think the current impl of 2PB would still reject it .... )</p>\n</blockquote>\n<p>those are not even 2PB I don't think</p>",
        "id": 148746730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441864
    },
    {
        "content": "<p>It doesn't even need 2PB</p>",
        "id": 148746735,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441868
    },
    {
        "content": "<p>but you could imagine such code being accepted for some plausible extension</p>",
        "id": 148746754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441892
    },
    {
        "content": "<p>The borrows end immediately</p>",
        "id": 148746781,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543441919
    },
    {
        "content": "<p>ah, heh :)</p>",
        "id": 148746830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441932
    },
    {
        "content": "<p>well we can \"fix\" that</p>",
        "id": 148746836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543441940
    },
    {
        "content": "<blockquote>\n<p>i'm just trying to tease out exactly what we are committed to<br>\nif we wind up doing nothing</p>\n</blockquote>\n<p>well I dont yet have a model that can explain this. there might be a nice one, or at least nicer than trees. but I wont be able to complete this analysis in time.</p>",
        "id": 148746838,
        "sender_full_name": "RalfJ",
        "timestamp": 1543441947
    },
    {
        "content": "<p>basically I think the idea would be that <code>&amp;2phase</code> is a shared borrow</p>",
        "id": 148746852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441970
    },
    {
        "content": "<p>and an activation pushes an <code>&amp;mut</code> onto the stack</p>",
        "id": 148746860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441978
    },
    {
        "content": "<blockquote>\n<p>basically I think the idea would be that <code>&amp;2phase</code> is a shared borrow</p>\n</blockquote>\n<p>or equivalent to</p>",
        "id": 148746865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441984
    },
    {
        "content": "<p>anyway I know that's not a real proposal and I'm sure it has flaws</p>",
        "id": 148746869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543441992
    },
    {
        "content": "<p>I just had an idea based on what you said (make the two-phase borrows be shared borrows that also remember in their tag the mutable morrow they were created one, and do a mutable reborrow on the first write) -- but whether and how that would work out, no idea (I foresee some conflicts with the \"redundant reborrow\" rule)</p>",
        "id": 148746879,
        "sender_full_name": "RalfJ",
        "timestamp": 1543442009
    },
    {
        "content": "<p>but the <em>currently implemented variant</em> of 2PB, which is fairly restictive in that it requires a postdominating use etc, isn't that expressive</p>",
        "id": 148746887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543442018
    },
    {
        "content": "<p>okay I really have to go like right now because of <span class=\"emoji emoji-1f476\" title=\"baby\">:baby:</span> <span class=\"emoji emoji-1f37c\" title=\"baby bottle\">:baby_bottle:</span> <span class=\"emoji emoji-23f0\" title=\"alarm clock\">:alarm_clock:</span></p>",
        "id": 148746895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543442029
    },
    {
        "content": "<p>I gotta go too :)</p>",
        "id": 148746900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543442034
    },
    {
        "content": "<p>bye all</p>",
        "id": 148746901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543442036
    },
    {
        "content": "<p>illuminating y'all</p>",
        "id": 148746905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543442040
    },
    {
        "content": "<p>sure would've been nice to be \"illuminated\" a month ago but oh well <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 148746965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543442055
    },
    {
        "content": "<p>yeah in hindsight it's so easy to assign priorities...^^</p>",
        "id": 148746984,
        "sender_full_name": "RalfJ",
        "timestamp": 1543442083
    },
    {
        "content": "<p>Apart from matches, 2PB is incredibly minimal. The activation is the next and only use (excluding StorageLive/Dead) of the mutable reference created by the 2PB.</p>",
        "id": 148747041,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543442160
    }
]