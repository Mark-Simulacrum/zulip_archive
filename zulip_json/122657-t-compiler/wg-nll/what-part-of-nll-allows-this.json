[
    {
        "content": "<p>From <a href=\"https://stackoverflow.com/q/51295816/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/51295816/155423\">a SO question</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Superhero</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">power</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;Bruce Wayne&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">98</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Superhero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">n</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">power</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">p</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hero</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This fails before NLL and compiles with NLL, but I don't understand which part of NLL enables it. Pre NLL, my argument would have been:</p>\n<blockquote>\n<p>Since <code>Superhero</code> has a single lifetime for both fields, when you create it, <code>'a</code> is unified to be the intersection of the variables, which is the inner scope. When you try to get <code>hero.name</code> back out, the fact that it came from a longer lifetime originally is lost, so you get the error.</p>\n<p>You can fix this by assigning two distinct lifetimes for each field</p>\n</blockquote>",
        "id": 129512245,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531363546
    },
    {
        "content": "<p>But AIUI, that same argument would be true in NLL world. Is <code>hero</code> in some weird superposition of lifetimes? Is the MIR borrowchecker clever enough to see that <code>power</code> is never used so it never plays a part in lifetimes?</p>",
        "id": 129512314,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1531363661
    },
    {
        "content": "<p>You are correct that <code>r</code> cannot outlive <code>p</code> <em>or</em> <code>n</code>. The thing that makes this work under NLL is that we consider <code>r</code> to be \"live\" only until its last use, and not until the end of the block it is declared in. In this case, that last use is within the scope of <code>p</code>, so everything works. But this variant, where I moved the <code>println!</code> outside of the block declaring <code>p</code>, fails to compile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Superhero</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">power</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;Bruce Wayne&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">98</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Superhero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">n</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">power</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">p</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hero</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- I moved this to outside of the scope of `p`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 129517042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531372284
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `p` does not live long enough\n  --&gt; src/main.rs:16:24\n   |\n16 |                 power: &amp;p,\n   |                        ^^ borrowed value does not live long enough\n...\n20 |     }\n   |     - borrowed value only lives until here\n21 |     println!(&quot;{}&quot;, r);\n   |                    - borrow later used here\n</pre></div>",
        "id": 129517043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531372292
    },
    {
        "content": "<p>It <em>would</em> be nice -- and isn't out of the question at some point -- if we could highlight the connection to <code>Superhero</code>'s single lifetime parameter</p>",
        "id": 129517087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531372342
    }
]