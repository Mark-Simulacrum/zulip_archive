[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> suggested that it'd be helpful for me to teach someone else how I do profiles of rustc. To use my setup, you do need to be using linux; he suggested I do a pairing session with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> and make a video</p>",
        "id": 127603987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209687
    },
    {
        "content": "<p>I'd be up for that if either of you are down</p>",
        "id": 127603990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209694
    },
    {
        "content": "<p>that said, I could also try to just write the instructions out, it ain't <em>that</em> complex</p>",
        "id": 127603995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209702
    },
    {
        "content": "<p>maybe both is good :)</p>",
        "id": 127603997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209706
    },
    {
        "content": "<p>I'm up for it, we just need to find a time that works for us both :)</p>",
        "id": 127604059,
        "sender_full_name": "qmx",
        "timestamp": 1528209762
    },
    {
        "content": "<p>that's the trick I suppose</p>",
        "id": 127604146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209884
    },
    {
        "content": "<p>the first thing in any case is to prep a build of rust-lang/master with the right config.toml :)</p>",
        "id": 127604149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209895
    },
    {
        "content": "<p>that alone takes a good 30 minutes...</p>",
        "id": 127604154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209900
    },
    {
        "content": "<p>...or longer I suppose :)</p>",
        "id": 127604164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209907
    },
    {
        "content": "<p>let me try to make a gist in any case</p>",
        "id": 127604168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209915
    },
    {
        "content": "<p>Any idea if a Linux VM or Docker container works? For those of us not on Linux ;-)</p>",
        "id": 127604655,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528210457
    },
    {
        "content": "<p>I guess maybe</p>",
        "id": 127604756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210611
    },
    {
        "content": "<p>this is probably gonna use perf + some of niko's focus scripts, but in general valgrind/callgrind also work on osx (not High Sierra IIRC), and ofc Instruments</p>",
        "id": 127604847,
        "sender_full_name": "lqd",
        "timestamp": 1528210716
    },
    {
        "content": "<p>yeah so my setup is not the only one :)</p>",
        "id": 127604859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210742
    },
    {
        "content": "<p>valgrind etc is also fine</p>",
        "id": 127604862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210745
    },
    {
        "content": "<p>I'm just .. prone to use the tools I wrote, since naturally they work the way my mind works ;)</p>",
        "id": 127604867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Oh, I use Instruments, but sometimes switching between tools gets you different info to lead to new places to explore, which is my interest. And yeah, Valgrind always lags behind, sadly.</p>",
        "id": 127604958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528210855
    },
    {
        "content": "<p>but CPU counting profilers seem like they would be ok in VMs, but wallclock-based would be less so.</p>",
        "id": 127605038,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528210926
    },
    {
        "content": "<p>here is a gist where I am writing up my procedure:</p>",
        "id": 127605818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528211981
    },
    {
        "content": "<p>naturally i've found there is more to write than I thought</p>",
        "id": 127605822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528211986
    },
    {
        "content": "<p>seems like good material for the rustc-guide</p>",
        "id": 127605824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528211990
    },
    {
        "content": "<p>gist url: <a href=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\">https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e</a></p>",
        "id": 127605834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528212001
    },
    {
        "content": "<p>(needs to lose the /edit at the end)</p>",
        "id": 127605925,
        "sender_full_name": "lqd",
        "timestamp": 1528212089
    },
    {
        "content": "<p>I hate that</p>",
        "id": 127605929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528212101
    },
    {
        "content": "<p>I've always enjoyed the rationale behind 99Hz</p>",
        "id": 127606069,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528212289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I work from a container - even on linux - it works</p>",
        "id": 127606739,
        "sender_full_name": "qmx",
        "timestamp": 1528213200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> there's \"works\" and then there's \"produces correct / useful output\" <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span>. A wallclock-based / sampling profiler <em>works</em> in a VM, but may overinflate IO timings, virtualized syscalls, etc.</p>",
        "id": 127606885,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528213328
    },
    {
        "content": "<p>you're totally right</p>",
        "id": 127606968,
        "sender_full_name": "qmx",
        "timestamp": 1528213476
    },
    {
        "content": "<p>ok, updated the gist with more details</p>",
        "id": 127606998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213516
    },
    {
        "content": "<p>what I do is run a single container on a big machine, so the overhead should be minimal (I just want to have a turn-key dev env)</p>",
        "id": 127607012,
        "sender_full_name": "qmx",
        "timestamp": 1528213540
    },
    {
        "content": "<blockquote>\n<p>So <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> suggested that it'd be helpful for me to teach someone else how I do profiles of rustc. To use my setup, you do need to be using linux; he suggested I do a pairing session with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> and make a video</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you need something from me :)</p>",
        "id": 127607077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528213587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well, so I wrote <a href=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\">this gist</a> that contains the directions for how to analyze performance</p>",
        "id": 127607089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213607
    },
    {
        "content": "<p>a good first step would be:</p>",
        "id": 127607092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213611
    },
    {
        "content": "<p>try to follow it and use it to analyze the <code>inflate</code> test</p>",
        "id": 127607101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213623
    },
    {
        "content": "<p>this will let me know what steps I've forgotten to document ;)</p>",
        "id": 127607111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213632
    },
    {
        "content": "<p>but also will give us some info on what that test is so ridiculously slow</p>",
        "id": 127607115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213643
    },
    {
        "content": "<p>ok</p>",
        "id": 127607181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528213700
    },
    {
        "content": "<p>(another polonius datapoint, leapfrog is actually a bit slower than datafrog_opt on inflate)</p>",
        "id": 127607213,
        "sender_full_name": "lqd",
        "timestamp": 1528213744
    },
    {
        "content": "<p>Clearly you have to race all the algorithms in parallel, taking the first to finish.</p>",
        "id": 127607538,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528214107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> starting to follow your gist :), <code>debuginfo-lines = true</code> and <code>debuginfo = false</code>?</p>",
        "id": 127609969,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528217264
    },
    {
        "content": "<p>yes</p>",
        "id": 127610021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528217287
    },
    {
        "content": "<p>ok, building the thing</p>",
        "id": 127610063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528217361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>   Compiling rustc_asan v0.0.0 (file:///home/santiago/src/oss/rust-perf/src/librustc_asan)\nerror: failed to run custom build command for `compiler_builtins v0.0.0 (file:///home/santiago/src/oss/rust-perf/src/rustc/compiler_builtins_shim)`\nprocess didn&#39;t exit successfully: `/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage0-std/release/build/compiler_builtins-c62c02041b0ab233/build-script-build` (exit code: 101)\n--- stdout\ncargo:rerun-if-changed=build.rs\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/absvsi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/absvti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/addvdi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/addvsi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/addvti3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/apple_versioning.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/clzdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/clzsi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/clzti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/cmpdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/cmpti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ctzdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ctzsi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ctzti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/divdc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/divsc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/divxc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/extendhfsf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ffsdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ffsti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/x86_64/floatdisf.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/x86_64/floatdixf.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/x86_64/floatundidf.S\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/x86_64/floatundisf.S\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/x86_64/floatundixf.S\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/int_util.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/muldc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/mulsc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/mulvdi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/mulvsi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/mulvti3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/mulxc3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negdf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negsf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negvdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negvsi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/negvti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/paritydi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/paritysi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/parityti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/popcountdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/popcountsi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/popcountti2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/powixf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/subvdi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/subvsi3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/subvti3.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/truncdfhf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/truncdfsf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/truncsfhf2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ucmpdi2.c\ncargo:rerun-if-changed=../../libcompiler_builtins/compiler-rt/lib/builtins/ucmpti2.c\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nOPT_LEVEL = Some(&quot;2&quot;)\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nHOST = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nHOST = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nCC_x86_64-unknown-linux-gnu = Some(&quot;cc&quot;)\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nHOST = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nCFLAGS_x86_64-unknown-linux-gnu = Some(&quot;-ffunction-sections -fdata-sections -fPIC -m64&quot;)\nDEBUG = Some(&quot;false&quot;)\nTARGET = Some(&quot;x86_64-unknown-linux-gnu&quot;)\nCC_x86_64-unknown-linux-gnu = Some(&quot;cc&quot;)\nCFLAGS_x86_64-unknown-linux-gnu = Some(&quot;-ffunction-sections -fdata-sections -fPIC -m64&quot;)\nrunning: &quot;cc&quot; &quot;-O2&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-m64&quot; &quot;-m64&quot; &quot;-fno-builtin&quot; &quot;-fvisibility=hidden&quot; &quot;-ffreestanding&quot; &quot;-fomit-frame-pointer&quot; &quot;-DVISIBILITY_HIDDEN&quot; &quot;-o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage0-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-ffd422941bf53e42/out/../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.o&quot; &quot;-c&quot; &quot;../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.c&quot;\ncargo:warning=cc: error: ../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.c: No such file or directory\ncargo:warning=cc: fatal error: no input files\ncargo:warning=compilation terminated.\nexit code: 1\n\n--- stderr\nthread &#39;main&#39; panicked at &#39;\n\nInternal error occurred: Command &quot;cc&quot; &quot;-O2&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-m64&quot; &quot;-m64&quot; &quot;-fno-builtin&quot; &quot;-fvisibility=hidden&quot; &quot;-ffreestanding&quot; &quot;-fomit-frame-pointer&quot; &quot;-DVISIBILITY_HIDDEN&quot; &quot;-o&quot; &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage0-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-ffd422941bf53e42/out/../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.o&quot; &quot;-c&quot; &quot;../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.c&quot; with args &quot;cc&quot; did not execute successfully (status code exit code: 1).\n\n&#39;, /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.15/src/lib.rs:2158:5\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\ncommand did not execute successfully: &quot;/home/santiago/src/oss/rust-perf/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-j&quot; &quot;4&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace&quot; &quot;--manifest-path&quot; &quot;/home/santiago/src/oss/rust-perf/src/libstd/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nthread &#39;main&#39; panicked at &#39;cargo must succeed&#39;, bootstrap/compile.rs:1091:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nfailed to run: /home/santiago/src/oss/rust-perf/build/bootstrap/debug/bootstrap build\nBuild completed unsuccessfully in 0:02:16\n</pre></div>",
        "id": 127613028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528221340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's always failing here</p>",
        "id": 127613034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528221348
    },
    {
        "content": "<p>Have you tried something like <code>git submodule update --init</code>?</p>",
        "id": 127613153,
        "sender_full_name": "simulacrum",
        "timestamp": 1528221447
    },
    {
        "content": "<p>uh...</p>",
        "id": 127613157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221451
    },
    {
        "content": "<p>Generally speaking that type of error comes from stale submodules</p>",
        "id": 127613165,
        "sender_full_name": "simulacrum",
        "timestamp": 1528221458
    },
    {
        "content": "<p>/me glad <span class=\"user-mention\" data-user-id=\"116122\">@Mark Simulacrum</span> is here</p>",
        "id": 127613181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221478
    },
    {
        "content": "<p>...what Mark said :)</p>",
        "id": 127613233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221496
    },
    {
        "content": "<p>and updating is on by default, IIRC, so you probably turned it off?</p>",
        "id": 127613401,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528221721
    },
    {
        "content": "<p>that is confusing yes -- I feel like <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you've hit problems with this before?</p>",
        "id": 127613482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221814
    },
    {
        "content": "<p>I rarely do</p>",
        "id": 127613483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221815
    },
    {
        "content": "<p>or never</p>",
        "id": 127613489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221824
    },
    {
        "content": "<p>I think this periodically happens when submodules change... but I've never narrowed it down</p>",
        "id": 127613561,
        "sender_full_name": "simulacrum",
        "timestamp": 1528221908
    },
    {
        "content": "<p>We've \"optimized\" the submodule code to do less work, primarily because of Windows where that's super slow</p>",
        "id": 127613567,
        "sender_full_name": "simulacrum",
        "timestamp": 1528221928
    },
    {
        "content": "<p>That leads to this sort of problem</p>",
        "id": 127613569,
        "sender_full_name": "simulacrum",
        "timestamp": 1528221934
    },
    {
        "content": "<blockquote>\n<p>Have you tried something like <code>git submodule update --init</code>?</p>\n</blockquote>\n<p>yes, it's not that</p>",
        "id": 127613636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222021
    },
    {
        "content": "<p>just cloned the thing</p>",
        "id": 127613650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222057
    },
    {
        "content": "<p>ran git submodule update --init</p>",
        "id": 127613654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222070
    },
    {
        "content": "<p>changed the config.toml to what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> suggested and ran ./x.py build</p>",
        "id": 127613698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222087
    },
    {
        "content": "<p>in particular</p>",
        "id": 127613789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222203
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cargo:warning=cc: error: ../../libcompiler_builtins/compiler-rt/lib/builtins/absvdi2.c: No such file or directory\ncargo:warning=cc: fatal error: no input files\ncargo:warning=compilation terminated.\nexit code: 1\n</pre></div>",
        "id": 127613796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222207
    },
    {
        "content": "<p>what on earth</p>",
        "id": 127613872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528222332
    },
    {
        "content": "<p>starting fresh again just in case</p>",
        "id": 127613879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528222360
    },
    {
        "content": "<p>ok</p>",
        "id": 127613895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528222392
    },
    {
        "content": "<p>I think I've found the issue</p>",
        "id": 127614573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223264
    },
    {
        "content": "<p><code>git submodule update --init --recursive</code></p>",
        "id": 127614575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223266
    },
    {
        "content": "<p>the recursive bit is important</p>",
        "id": 127614583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223275
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust-perf (master)]$ git submodule update --init --recursive\nSubmodule &#39;compiler-rt&#39; (https://github.com/rust-lang/compiler-rt) registered for path &#39;src/libcompiler_builtins/compiler-rt&#39;\nCloning into &#39;/home/santiago/src/oss/rust-perf/src/libcompiler_builtins/compiler-rt&#39;...\nSubmodule path &#39;src/libcompiler_builtins/compiler-rt&#39;: checked out &#39;dfd960b5f1a1751b22738fa34fd27b583f4618db&#39;\n</pre></div>",
        "id": 127614625,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223288
    },
    {
        "content": "<p>I don't get why you have to do this manually</p>",
        "id": 127614757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528223496
    },
    {
        "content": "<p>I never do this kind of stuff :)</p>",
        "id": 127614760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528223501
    },
    {
        "content": "<p>at most I occasionally run <code>rm -rf build</code></p>",
        "id": 127614762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528223505
    },
    {
        "content": "<p>I don't need to do this manually I guess</p>",
        "id": 127614841,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223584
    },
    {
        "content": "<p>the thing is that I was already bitten by this</p>",
        "id": 127614850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223596
    },
    {
        "content": "<p>so I just did it</p>",
        "id": 127614856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223603
    },
    {
        "content": "<p>I don't know exactly the steps you need to follow to end in a state where you really need to run git submodule update --init</p>",
        "id": 127614919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223645
    },
    {
        "content": "<p>ah, yeah, recursive</p>",
        "id": 127615089,
        "sender_full_name": "simulacrum",
        "timestamp": 1528223871
    },
    {
        "content": "<p>I guess <code>x.py</code> doesn't do the right thing? or need to be fixed in some way?</p>",
        "id": 127615170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528223951
    },
    {
        "content": "<p>I think I mentioned above -- x.py tries to be smart to do less filesystem operations because those are slow on Windows; that means that I think it doesn't detect stale submodules quite as well. Perhaps that's especially true when they're nested.</p>",
        "id": 127615303,
        "sender_full_name": "simulacrum",
        "timestamp": 1528224089
    },
    {
        "content": "<p>during the night I compiled a rustc like Niko's gist as well (it takes a while on a 7y old macbook air :3) and cargo checked inflate. it took a long time and I think segfaulted in the end, but there is some data — mainly, I think it's the liveness in the MIR typechecking</p>",
        "id": 127646657,
        "sender_full_name": "lqd",
        "timestamp": 1528276399
    },
    {
        "content": "<p>if the callgrind profile can be useful I can upload it, otherwise the liveness::generate is <a href=\"https://i.imgur.com/sDqi9X1.png\" target=\"_blank\" title=\"https://i.imgur.com/sDqi9X1.png\">https://i.imgur.com/sDqi9X1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/sDqi9X1.png\" target=\"_blank\" title=\"https://i.imgur.com/sDqi9X1.png\"><img src=\"https://i.imgur.com/sDqi9X1.png\"></a></div>",
        "id": 127646745,
        "sender_full_name": "lqd",
        "timestamp": 1528276528
    },
    {
        "content": "<p>Interesting. I should drill in a bit more with my instrumented build then.</p>",
        "id": 127646894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528276762
    },
    {
        "content": "<p>hopefully this profile isn't messed up and isn't a goose chase...</p>",
        "id": 127647083,
        "sender_full_name": "lqd",
        "timestamp": 1528277067
    },
    {
        "content": "<p>it sounds reasonable</p>",
        "id": 127647301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528277437
    },
    {
        "content": "<p>I'm collecting a profile on clap now, which is the 2nd worst after inflate</p>",
        "id": 127648266,
        "sender_full_name": "lqd",
        "timestamp": 1528279168
    },
    {
        "content": "<p>a bit more muddy (and unfamiliar to me): 4% in liveness, 4% in the mysterious visit_mir, 3% in visit_place, 16% in ena's SnapshotVec::set_all -- it'd probably be interesting to compare to a non-NLL profile, so I'll do that</p>",
        "id": 127648870,
        "sender_full_name": "lqd",
        "timestamp": 1528280296
    },
    {
        "content": "<p>(I was mostly trying to compare these profiles using callgrind, to the ones w/ perf linked in the Paper doc)</p>",
        "id": 127652737,
        "sender_full_name": "lqd",
        "timestamp": 1528287120
    },
    {
        "content": "<p>both the <code>liveness</code> and <code>set_all</code> costs are things i'm trying to address</p>",
        "id": 127653570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528288278
    },
    {
        "content": "<p>basically by doing smart (chalk-like, in fact) memoization</p>",
        "id": 127653577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528288295
    },
    {
        "content": "<p>and I'm guessing we can't easily help ?</p>",
        "id": 127654083,
        "sender_full_name": "lqd",
        "timestamp": 1528289061
    },
    {
        "content": "<p>not sure how yet</p>",
        "id": 127654212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528289305
    },
    {
        "content": "<p>how does <a href=\"https://perf.rust-lang.org/nll-dashboard.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html\">https://perf.rust-lang.org/nll-dashboard.html</a> works?</p>",
        "id": 127659957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528296709
    },
    {
        "content": "<p>I mean, what's in each column, and what's being compared exactly?</p>",
        "id": 127660004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528296728
    },
    {
        "content": "<p>We're comparing the equivalent of <code>cargo check</code> with <code>cargo check --with-nll</code> (if that was a flag); within one commit</p>",
        "id": 127660215,
        "sender_full_name": "simulacrum",
        "timestamp": 1528296985
    },
    {
        "content": "<p>just the leaf crate is being built</p>",
        "id": 127660220,
        "sender_full_name": "simulacrum",
        "timestamp": 1528296998
    },
    {
        "content": "<p>those are the -check benchmarks ?</p>",
        "id": 127660259,
        "sender_full_name": "lqd",
        "timestamp": 1528297062
    },
    {
        "content": "<p>from the numbers it seems like so indeed :)</p>",
        "id": 127660326,
        "sender_full_name": "lqd",
        "timestamp": 1528297118
    },
    {
        "content": "<p>Yeah, Niko said that there's no real point in having non-check benchmarks -- this should be illustrative of the difference</p>",
        "id": 127660576,
        "sender_full_name": "simulacrum",
        "timestamp": 1528297408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux inflate (master)]$ perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-min-percent 3\nMatcher    : {do_mir_borrowck}\nMatches    : 2290\nNot Matches: 331\nPercentage : 87%\n\nTree\n| matched `{do_mir_borrowck}` (87% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (72% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check_internal (64% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::type_check::_$u7b$$u7b$closure$u7d$$u7d$::h5e644cf9693979bb (63% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (63% total, 59% self)\n: : | rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext::solve (6% total, 0% self)\n: : : | rustc::util::common::time (6% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext::solve_inner (6% total, 0% self)\n: : : : : | rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext::compute_region_values (6% total, 0% self)\n: : : : : : | &lt;rustc_data_structures::bitvec::SparseBitMatrix&lt;R, C&gt;&gt;::merge (6% total, 0% self)\n: : : : : : : | &lt;alloc::btree::map::BTreeMap&lt;K, V&gt;&gt;::entry (5% total, 1% self)\n: : : : : : : : | alloc::btree::search::search_tree (3% total, 0% self)\n: : : : : : : : : | alloc::btree::search::search_tree (3% total, 3% self)\n: | rustc::mir::visit::Visitor::visit_mir (5% total, 3% self)\n: | &lt;rustc_mir::borrow_check::MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; as rustc_mir::dataflow::DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt;&gt;::visit_statement_entry (4% total, 0% self)\n: | rustc_mir::dataflow::do_dataflow (3% total, 0% self)\n</pre></div>",
        "id": 127668162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528307213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span></p>",
        "id": 127668173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528307231
    },
    {
        "content": "<p>72% spent on compute_regions</p>",
        "id": 127668179,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528307240
    },
    {
        "content": "<p>most of the time is in <code>rustc_mir::borrow_check::nll::type_check::liveness::generate</code> 63%</p>",
        "id": 127668192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528307279
    },
    {
        "content": "<p><code>rustc_mir::borrow_check::nll::region_infer::RegionInferenceContext::solve (6% total, 0% self)</code> that is sort of interesting</p>",
        "id": 127669035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528308194
    },
    {
        "content": "<p>I have an ongoing branch that I <em>hope</em> will improve the <code>liveness::generate</code> results</p>",
        "id": 127669049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528308218
    },
    {
        "content": "<p>but I didn't have any plans to improve <code>RegionInferenceContext::solve</code></p>",
        "id": 127669054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528308227
    },
    {
        "content": "<p>hehe</p>",
        "id": 127669225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528308419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I've not looked at anything after sentry-cli</p>",
        "id": 127671253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310737
    },
    {
        "content": "<p>so if you wanted to do some measurements of some of those, seems like it could be useful</p>",
        "id": 127671261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310749
    },
    {
        "content": "<p>(ok, back)</p>",
        "id": 127671401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310888
    },
    {
        "content": "<p>I don't think we have to look at them <em>all</em></p>",
        "id": 127671407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310901
    },
    {
        "content": "<p>but it'd be nice to make sure there is not some strikingly different pattern out there</p>",
        "id": 127671416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528310919
    },
    {
        "content": "<p>ok</p>",
        "id": 127671908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311493
    },
    {
        "content": "<p>maybe I should start a document or something with the results?</p>",
        "id": 127671916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> let's use <a href=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\">this one that I just made</a></p>",
        "id": 127672041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528311669
    },
    {
        "content": "<p>was creating this <a href=\"https://paper.dropbox.com/doc/Profiling-of-rustc-perfs-benchmark-examples--AEcIIlo6J0xqvFBQ78VwegH_AQ-M6IR7tbGRqmRg8cwKZin2\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Profiling-of-rustc-perfs-benchmark-examples--AEcIIlo6J0xqvFBQ78VwegH_AQ-M6IR7tbGRqmRg8cwKZin2\">https://paper.dropbox.com/doc/Profiling-of-rustc-perfs-benchmark-examples--AEcIIlo6J0xqvFBQ78VwegH_AQ-M6IR7tbGRqmRg8cwKZin2</a></p>",
        "id": 127672121,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311768
    },
    {
        "content": "<p>but ok</p>",
        "id": 127672124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311770
    },
    {
        "content": "<p>let me paste that there</p>",
        "id": 127672125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311773
    },
    {
        "content": "<p>or well you can decide what to do with the clap part :)</p>",
        "id": 127672137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528311788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> take a look, do you think the tables are worth it? I'm not sure :)</p>",
        "id": 127672259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528311944
    },
    {
        "content": "<p>maybe just an indented list is fine...</p>",
        "id": 127672265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528311949
    },
    {
        "content": "<p>ok, I updated the template</p>",
        "id": 127672419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528312160
    },
    {
        "content": "<p>gonna have to step out for a bit soon</p>",
        "id": 127672516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528312292
    },
    {
        "content": "<p>let me check</p>",
        "id": 127673606,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528313666
    },
    {
        "content": "<p>I think it's fine :)</p>",
        "id": 127673619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528313699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux sentry-cli (master)]$ perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --relative --tree-max-depth 1 --tree-min-percent 5\nMatcher    : {do_mir_borrowck}\nMatches    : 0\nNot Matches: 42\nPercentage : 0%\n\nTree\n</pre></div>",
        "id": 127678084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319120
    },
    {
        "content": "<p>hmm</p>",
        "id": 127678086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when running the profile on <code>clap-rs</code> to confirm the <code>visit_mir</code> observation - is there anything other than <a href=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/45e81ac4cfcf21c665176e3e2907f40e\">these steps</a> that I need to do? I'm not seeing any mentions of <code>visit_mir</code> but I may have messed up in the profiling (<a href=\"https://gist.github.com/davidtwco/65218c446d927df0778b4d2aa8f53fb8\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/65218c446d927df0778b4d2aa8f53fb8\">here's what I'm seeing</a> from <code>perf-focus</code>)</p>",
        "id": 127678090,
        "sender_full_name": "davidtwco",
        "timestamp": 1528319130
    },
    {
        "content": "<p>hmm, no that should be it</p>",
        "id": 127678140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319167
    },
    {
        "content": "<p>interesting, because everybody else seemed to see it</p>",
        "id": 127678145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319175
    },
    {
        "content": "<p>Just to check, you did enable MIR borrowck?</p>",
        "id": 127678165,
        "sender_full_name": "simulacrum",
        "timestamp": 1528319204
    },
    {
        "content": "<p>also interesting because you have a missing %</p>",
        "id": 127678169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319209
    },
    {
        "content": "<p>43% total, but 32% and 3%</p>",
        "id": 127678176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319221
    },
    {
        "content": "<p>not sure if you guys are talking about <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> case or mine ::P</p>",
        "id": 127678183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319231
    },
    {
        "content": "<p>leaving around 7% :)</p>",
        "id": 127678184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319233
    },
    {
        "content": "<p>I have enabled MIR borrowck, yeah</p>",
        "id": 127678189,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that was a case where you don't want <code>--lib</code> iirc</p>",
        "id": 127678192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319256
    },
    {
        "content": "<p>could that be it?</p>",
        "id": 127678198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319259
    },
    {
        "content": "<p>I did profile that one</p>",
        "id": 127678201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319260
    },
    {
        "content": "<p>ahh</p>",
        "id": 127678204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319272
    },
    {
        "content": "<p>could be</p>",
        "id": 127678205,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319274
    },
    {
        "content": "<p>or you want to <code>touch src/main.rs</code></p>",
        "id": 127678208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319277
    },
    {
        "content": "<p>You can see what args perf passes from perf-config.json in the directory</p>",
        "id": 127678209,
        "sender_full_name": "simulacrum",
        "timestamp": 1528319279
    },
    {
        "content": "<p>oh, good to know</p>",
        "id": 127678251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319289
    },
    {
        "content": "<p>I could never figure out where those were</p>",
        "id": 127678253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319292
    },
    {
        "content": "<p>perf will also touch all files in the dir (<code>find . -name '*.rs' | xargs touch</code>)</p>",
        "id": 127678258,
        "sender_full_name": "simulacrum",
        "timestamp": 1528319305
    },
    {
        "content": "<p>which case are we talking about ? IIRC there is no <a href=\"http://main.rs\" target=\"_blank\" title=\"http://main.rs\">main.rs</a> for clap right ? (Ok David is talking about clap, and Santiago about sentry-cli)</p>",
        "id": 127678366,
        "sender_full_name": "lqd",
        "timestamp": 1528319426
    },
    {
        "content": "<p>(shocked face) not <code>find -print0 | xargs -0</code>? how irresponsible ;-)</p>",
        "id": 127678377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528319459
    },
    {
        "content": "<p>I ran <code>CARGO_INCREMENTAL=0 perf record -F99 --call-graph dwarf cargo +rust0-perf rustc --profile check --lib -- -Zborrowck=mir</code> to generate the perf data for my run.</p>",
        "id": 127678470,
        "sender_full_name": "davidtwco",
        "timestamp": 1528319625
    },
    {
        "content": "<p>that seems like it <em>should</em> work</p>",
        "id": 127678698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319918
    },
    {
        "content": "<p>what <code>perf focus</code> command did you use?</p>",
        "id": 127678704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528319933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux sentry-cli (master)]$ perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-min-percent 3\nMatcher    : {do_mir_borrowck}\nMatches    : 256\nNot Matches: 430\nPercentage : 37%\n\nTree\n| matched `{do_mir_borrowck}` (37% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (26% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check_internal (22% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::type_check::_$u7b$$u7b$closure$u7d$$u7d$::h5e644cf9693979bb (16% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (16% total, 2% self)\n: : : : : | rustc_mir::borrow_check::nll::type_check::TypeChecker::fully_perform_op (11% total, 0% self)\n: : : : : : | rustc::infer::InferCtxt::commit_if_ok (5% total, 0% self)\n: : : : : : : | rustc::traits::query::dropck_outlives::&lt;impl rustc::infer::at::At&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;&gt;::dropck_outlives (4% total, 0% self)\n: : : : : : | rustc::infer::InferCtxt::take_and_reset_region_constraints (4% total, 0% self)\n: : : : : : : | rustc::infer::region_constraints::RegionConstraintCollector::take_and_reset_data (4% total, 0% self)\n: : : : : : : : | &lt;ena::snapshot_vec::SnapshotVec&lt;D&gt;&gt;::set_all (4% total, 4% self)\n: | &lt;rustc_mir::borrow_check::MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; as rustc_mir::dataflow::DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt;&gt;::visit_terminator_entry (3% total, 0% self)\n: : | rustc_mir::borrow_check::MirBorrowckCtxt::visit_terminator_drop (3% total, 0% self)\n</pre></div>",
        "id": 127678713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528319952
    },
    {
        "content": "<p>I used the same command as in Santiago's snippet there, doesn't show up in <code>perf report</code> either though.</p>",
        "id": 127678737,
        "sender_full_name": "davidtwco",
        "timestamp": 1528319988
    },
    {
        "content": "<p>could visit_mir be less than 3% and filtered out ?</p>",
        "id": 127678800,
        "sender_full_name": "lqd",
        "timestamp": 1528320039
    },
    {
        "content": "<p>could be, maybe try <code>--tree-max-depth 1</code></p>",
        "id": 127678823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320083
    },
    {
        "content": "<p>If I don't add in <code>--tree-min-percent</code> and grep for it then I still don't see it.</p>",
        "id": 127678834,
        "sender_full_name": "davidtwco",
        "timestamp": 1528320108
    },
    {
        "content": "<p>I'm wondered where that \"lost\" percentage has gone</p>",
        "id": 127678886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320128
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>❯ ~/.cargo/bin/perf-focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-max-depth 1\nMatcher    : {do_mir_borrowck}\nMatches    : 2184\nNot Matches: 4383\nPercentage : 33%\n\nTree\n| matched `{do_mir_borrowck}` (33% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (24% total, 0% self) [...]\n: | rustc_mir::dataflow::DataflowResultsConsumer::analyze_results (2% total, 0% self) [...]\n: | rustc_mir::dataflow::do_dataflow (2% total, 0% self) [...]\n: | &lt;rustc::mir::Mir&lt;&#39;tcx&gt; as rustc_mir::util::collect_writes::FindAssignments&gt;::find_assignments (1% total, 0% self) [...]\n: | rustc_mir::borrow_check::nll::replace_regions_in_mir (0% total, 0% self) [...]\n: | rustc_mir::dataflow::impls::borrows::Borrows::new (0% total, 0% self) [...]\n: | &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (0% total, 0% self) [...]\n: | rustc_mir::dataflow::move_paths::MoveData::gather_moves (0% total, 0% self) [...]\n: | rustc_mir::borrow_check::borrow_set::BorrowSet::build (0% total, 0% self) [...]\n: | core::ptr::drop_in_place (0% total, 0% self) [...]\n: | &lt;rustc::mir::Mir&lt;&#39;tcx&gt; as core::clone::Clone&gt;::clone (0% total, 0% self) [...]\n: | _init (0% total, 0% self)\n: | rustc_mir::borrow_check::location::LocationTable::new (0% total, 0% self) [...]\n: | rustc::ty::maps::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;tcx, &#39;lcx&gt;&gt;::param_env (0% total, 0% self) [...]\n: | rustc_data_structures::control_flow_graph::dominators::dominators (0% total, 0% self) [...]\n</pre></div>",
        "id": 127678895,
        "sender_full_name": "davidtwco",
        "timestamp": 1528320150
    },
    {
        "content": "<p>because it comes to 7% or 8%</p>",
        "id": 127678896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320150
    },
    {
        "content": "<p>which is exactly what we saw</p>",
        "id": 127678897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320152
    },
    {
        "content": "<p><code>find_assignments</code> .. interesting</p>",
        "id": 127678911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320178
    },
    {
        "content": "<blockquote>\n<p>could visit_mir be less than 3% and filtered out ?</p>\n</blockquote>\n<p>in my case it was</p>",
        "id": 127678934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528320222
    },
    {
        "content": "<p>where are the last 4% ? :)</p>",
        "id": 127678937,
        "sender_full_name": "lqd",
        "timestamp": 1528320231
    },
    {
        "content": "<p>Well, it was 7% in niko's profiling of clap-rs, not inflate, so it might only be &lt; 3% for inflate.</p>",
        "id": 127678989,
        "sender_full_name": "davidtwco",
        "timestamp": 1528320258
    },
    {
        "content": "<p>(unless I'm mistaken)</p>",
        "id": 127678994,
        "sender_full_name": "davidtwco",
        "timestamp": 1528320267
    },
    {
        "content": "<p>oh, wait, is this inflate?</p>",
        "id": 127678998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320276
    },
    {
        "content": "<p>Mine isn't, I'm running it on <code>clap-rs</code>.</p>",
        "id": 127679015,
        "sender_full_name": "davidtwco",
        "timestamp": 1528320288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, I'm not able to see analyze_results in the results, the top level thing seems to be visit_terminator_entry, ... unsure</p>",
        "id": 127679055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528320357
    },
    {
        "content": "<p>anyway, added entry-cli results here <a href=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\">https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8</a></p>",
        "id": 127679110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528320381
    },
    {
        "content": "<p>I'd say just put what you see</p>",
        "id": 127679915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528320949
    },
    {
        "content": "<p>just looking at liveness and wondering: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L193-L217\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/liveness.rs#L193-L217\">this part</a> is not hot on the profiles we've seen, right ?</p>",
        "id": 127681548,
        "sender_full_name": "lqd",
        "timestamp": 1528323168
    },
    {
        "content": "<p>njn would be good at this, I'm not sure they've looked at NLL during their recent rustc optimization work</p>",
        "id": 127682730,
        "sender_full_name": "lqd",
        "timestamp": 1528324955
    },
    {
        "content": "<p>I believe that part is reasonably hot; that is part of what I am looking to memoize more.</p>",
        "id": 127683406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528325919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was going to measure serde as next in the list</p>",
        "id": 127683608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528326273
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux serde (master)]$ ls\nappveyor.yml  Cargo.toml       LICENSE-APACHE  perf-config.json  rustfmt.toml  serde_derive            serde_test  test_suite\nCargo.lock    CONTRIBUTING.md  LICENSE-MIT     README.md         serde         serde_derive_internals  target      travis.sh\n</pre></div>",
        "id": 127683614,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528326285
    },
    {
        "content": "<p>I guess I should measure the internal serde crate, right?</p>",
        "id": 127683615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528326298
    },
    {
        "content": "<p>is that what shows up <a href=\"https://perf.rust-lang.org/nll-dashboard.html\" target=\"_blank\" title=\"https://perf.rust-lang.org/nll-dashboard.html\">https://perf.rust-lang.org/nll-dashboard.html</a> ?</p>",
        "id": 127683626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528326334
    },
    {
        "content": "<p>Yes, that's what's measured by the dashboard. You can look in perf-config for the specific invocation</p>",
        "id": 127685319,
        "sender_full_name": "simulacrum",
        "timestamp": 1528329112
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127686418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528331199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you familiar with <code>perf probe</code>? I am now learning about it and am wondering whether we might find it useful for instrumenting <code>rustc</code> binaries</p>",
        "id": 127723262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528384764
    },
    {
        "content": "<p>i suppose its probably not necessary for our use case...</p>",
        "id": 127723442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1528384958
    },
    {
        "content": "<p>I had heard of it. I wanted to try and setup something with that and/or dtrace or one of the various other mechanisms to use for query profiling at some point. I remembered <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> did some experimentation in this direction, right?</p>",
        "id": 127747950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528420080
    },
    {
        "content": "<p>I don't think we need it for NLL in particular</p>",
        "id": 127747990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528420087
    },
    {
        "content": "<p>Yeah, I played with integrating LTTNG into the query system</p>",
        "id": 127748605,
        "sender_full_name": "Reed Koser",
        "timestamp": 1528421110
    },
    {
        "content": "<p>it went... OK. I think I've misplaced some of the code for that</p>",
        "id": 127748608,
        "sender_full_name": "Reed Koser",
        "timestamp": 1528421123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've not looked into the <code>clap-rs</code> strangeness since mid last week when I couldn't reproduce your measurement, is there anything I should be doing on that?</p>",
        "id": 127954467,
        "sender_full_name": "davidtwco",
        "timestamp": 1528811570
    },
    {
        "content": "<p>Hmm, if you can't reproduce, I don't see what — I've <em>almost</em> got my caching branch up and going — maybe we'll investigate again after that</p>",
        "id": 127954533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528811681
    },
    {
        "content": "<p>it's interesting though that you can't reproduce, since <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and I both did (I can't remember if <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did)</p>",
        "id": 127954538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528811699
    },
    {
        "content": "<p>one thing maybe worth looking at is the test case that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> added</p>",
        "id": 127954544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528811708
    },
    {
        "content": "<p>\"coercions\"</p>",
        "id": 127954550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528811721
    },
    {
        "content": "<p>2,273.06% slower :)</p>",
        "id": 127954552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528811724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  didn't you recently start measurements on coercions, or a bisect, which were literally in-flight ? :)</p>",
        "id": 127954700,
        "sender_full_name": "lqd",
        "timestamp": 1528811993
    },
    {
        "content": "<p>ah no I was bisecting the test failure on <a href=\"https://github.com/rust-lang/rust/pull/51460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51460\">https://github.com/rust-lang/rust/pull/51460</a></p>",
        "id": 127954841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528812133
    },
    {
        "content": "<p>which I did do</p>",
        "id": 127954843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528812136
    },
    {
        "content": "<p>and am now looking at the best way to fix ;)</p>",
        "id": 127954845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528812140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about clap-rs?</p>",
        "id": 127955170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812555
    },
    {
        "content": "<p>I can try again</p>",
        "id": 127955173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812571
    },
    {
        "content": "<p>not clap-rs</p>",
        "id": 127955330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528812768
    },
    {
        "content": "<p>er, I don't quite know what you are asking :)</p>",
        "id": 127955333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528812776
    },
    {
        "content": "<blockquote>\n<p>it's interesting though that you can't reproduce, since <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and I both did (I can't remember if <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did)</p>\n</blockquote>\n<p>this ^^^</p>",
        "id": 127955393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812856
    },
    {
        "content": "<p>anyway in case you need my data ...</p>",
        "id": 127955396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812865
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux clap-rs (master)]$ perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-min-percent 3\nMatcher    : {do_mir_borrowck}\nMatches    : 948\nNot Matches: 793\nPercentage : 54%\n\nTree\n| matched `{do_mir_borrowck}` (54% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (33% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check (24% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::type_check_internal (24% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::type_check::_$u7b$$u7b$closure$u7d$$u7d$::h2f6b8fe8a646401e (8% total, 0% self)\n: : : : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (8% total, 0% self)\n: : : : : : | rustc_mir::borrow_check::nll::type_check::TypeChecker::fully_perform_op (7% total, 0% self)\n: : : : : : : | rustc::infer::InferCtxt::take_and_reset_region_constraints (5% total, 0% self)\n: : : : : : : : | rustc::infer::region_constraints::RegionConstraintCollector::take_and_reset_data (5% total, 0% self)\n: : : : : : : : : | &lt;ena::unify::UnificationTable&lt;S&gt;&gt;::reset_unifications (5% total, 5% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::TypeChecker::sub_types (6% total, 0% self)\n: : : : : | rustc::infer::InferCtxt::take_and_reset_region_constraints (5% total, 0% self)\n: : : : : : | rustc::infer::region_constraints::RegionConstraintCollector::take_and_reset_data (5% total, 0% self)\n: : : : : : : | &lt;ena::unify::UnificationTable&lt;S&gt;&gt;::reset_unifications (5% total, 5% self)\n: : : : | &lt;rustc_mir::borrow_check::nll::type_check::TypeVerifier&lt;&#39;a, &#39;b, &#39;gcx, &#39;tcx&gt; as rustc::mir::visit::Visitor&lt;&#39;tcx&gt;&gt;::visit_mir (4% total, 0% self)\n: : : : : | &lt;rustc_mir::borrow_check::nll::type_check::TypeVerifier&lt;&#39;a, &#39;b, &#39;gcx, &#39;tcx&gt; as rustc::mir::visit::Visitor&lt;&#39;tcx&gt;&gt;::visit_constant (3% total, 0% self)\n: : | rustc_mir::util::liveness::liveness_of_locals (3% total, 0% self)\n: | rustc::mir::visit::Visitor::visit_mir (6% total, 4% self)\n: | &lt;rustc_mir::borrow_check::MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; as rustc_mir::dataflow::DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt;&gt;::visit_statement_entry (5% total, 0% self)\n: | rustc_mir::dataflow::do_dataflow (3% total, 0% self)\n</pre></div>",
        "id": 127955402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you reproduce the NLL slowdown on clap-rs ?</p>",
        "id": 127955428,
        "sender_full_name": "lqd",
        "timestamp": 1528812909
    },
    {
        "content": "<p>now I'm not sure what you meant by the slowdown, maybe we are talking about different thing</p>",
        "id": 127955494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812972
    },
    {
        "content": "<p>thought Niko mentioned me here because of this data</p>",
        "id": 127955506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528812994
    },
    {
        "content": "<p>cargo check on clap is 2-3x slower with NLL than without NLL</p>",
        "id": 127955517,
        "sender_full_name": "lqd",
        "timestamp": 1528813020
    },
    {
        "content": "<p>ok, I can just measure that</p>",
        "id": 127955526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813036
    },
    {
        "content": "<p>how are you measuring that?</p>",
        "id": 127955594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813131
    },
    {
        "content": "<p>using clap-rs on rustc-perf?</p>",
        "id": 127955599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813140
    },
    {
        "content": "<p>well what <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> failed to reproduce was not the slowdown</p>",
        "id": 127955607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813148
    },
    {
        "content": "<p>but rather the mysterios <code>visit_mir</code> calls`</p>",
        "id": 127955610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813154
    },
    {
        "content": "<p>I see them in <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s profile though</p>",
        "id": 127955613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>: | rustc::mir::visit::Visitor::visit_mir (6% total, 4% self)\n</pre></div>",
        "id": 127955618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813167
    },
    {
        "content": "<p>so the \"strangeness\" is only those calls missing ?</p>",
        "id": 127955631,
        "sender_full_name": "lqd",
        "timestamp": 1528813189
    },
    {
        "content": "<p>well so we don't know who is making those calls</p>",
        "id": 127955678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813205
    },
    {
        "content": "<p>so what I had in mind was to try and instrument rustc very closely</p>",
        "id": 127955689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813223
    },
    {
        "content": "<p>if <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> has the slowdown, we're not sure either what is slow on their profile either then :)</p>",
        "id": 127955690,
        "sender_full_name": "lqd",
        "timestamp": 1528813224
    },
    {
        "content": "<p>and try to track down where they are coming from</p>",
        "id": 127955692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813227
    },
    {
        "content": "<p>I do recall that <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span>'s numbers seemed to be \"missing\" the same percentage</p>",
        "id": 127955700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813242
    },
    {
        "content": "<p>that is, about 7% of total MIR borrowck time was unaccounted for</p>",
        "id": 127955712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528813262
    },
    {
        "content": "<p>and btw ...</p>",
        "id": 127955791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux clap-rs (master)]$ touch src/lib.rs\n[santiago@archlinux clap-rs (master)]$ time cargo +rust-prof build\nwarning: profile `doc` is deprecated and has no effect\n   Compiling clap v2.29.0 (file:///home/santiago/src/oss/rustc-perf/collector/benchmarks/clap-rs)\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/app/settings.rs:3:5\n  |\n3 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(deprecated)] on by default\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/app/validator.rs:4:5\n  |\n4 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/args/settings.rs:3:5\n  |\n3 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/completions/zsh.rs:4:5\n  |\n4 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/completions/shell.rs:2:5\n  |\n2 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\n    Finished dev [unoptimized + debuginfo] target(s) in 4.56s\n\nreal    0m4.577s\nuser    0m3.991s\nsys 0m0.582s\n[santiago@archlinux clap-rs (master)]$ touch src/lib.rs\n[santiago@archlinux clap-rs (master)]$ time cargo +rust-prof rustc -- -Zborrowck=mir\nwarning: profile `doc` is deprecated and has no effect\n   Compiling clap v2.29.0 (file:///home/santiago/src/oss/rustc-perf/collector/benchmarks/clap-rs)\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/app/settings.rs:3:5\n  |\n3 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(deprecated)] on by default\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/app/validator.rs:4:5\n  |\n4 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/args/settings.rs:3:5\n  |\n3 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/completions/zsh.rs:4:5\n  |\n4 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated item &#39;std::ascii::AsciiExt&#39;: use inherent methods instead\n --&gt; src/completions/shell.rs:2:5\n  |\n2 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\n    Finished dev [unoptimized + debuginfo] target(s) in 32.67s\n\nreal    0m32.700s\nuser    0m48.666s\nsys 0m0.913s\n</pre></div>",
        "id": 127955812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813402
    },
    {
        "content": "<p>4.577s vs 32.700s</p>",
        "id": 127955826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> since your profile has our weird visit_mir calls, you're in the same situation as we are :) but if you need it, the NLL slowdown can be seen comparing for example <code>cargo +nightly clean &amp;&amp; CARGO_INCREMENTAL=0 cargo +nightly check &amp;&amp; touch src/lib.rs &amp;&amp; time CARGO_INCREMENTAL=0 cargo +nightly rustc --profile check --lib</code> vs <code>cargo +nightly clean &amp;&amp; CARGO_INCREMENTAL=0 cargo +nightly check &amp;&amp; touch src/lib.rs &amp;&amp; time CARGO_INCREMENTAL=0 cargo +nightly rustc --profile check --lib -- -Zborrowck=mir</code></p>",
        "id": 127955829,
        "sender_full_name": "lqd",
        "timestamp": 1528813427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>❯ ~/.cargo/bin/perf-focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-max-depth 1\nMatcher    : {do_mir_borrowck}\nMatches    : 2184\nNot Matches: 4383\nPercentage : 33%\n\nTree\n| matched `{do_mir_borrowck}` (33% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (24% total, 0% self) [...]\n: | rustc_mir::dataflow::DataflowResultsConsumer::analyze_results (2% total, 0% self) [...]\n: | rustc_mir::dataflow::do_dataflow (2% total, 0% self) [...]\n: | &lt;rustc::mir::Mir&lt;&#39;tcx&gt; as rustc_mir::util::collect_writes::FindAssignments&gt;::find_assignments (1% total, 0% self) [...]\n: | rustc_mir::borrow_check::nll::replace_regions_in_mir (0% total, 0% self) [...]\n: | rustc_mir::dataflow::impls::borrows::Borrows::new (0% total, 0% self) [...]\n: | &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (0% total, 0% self) [...]\n: | rustc_mir::dataflow::move_paths::MoveData::gather_moves (0% total, 0% self) [...]\n: | rustc_mir::borrow_check::borrow_set::BorrowSet::build (0% total, 0% self) [...]\n: | core::ptr::drop_in_place (0% total, 0% self) [...]\n: | &lt;rustc::mir::Mir&lt;&#39;tcx&gt; as core::clone::Clone&gt;::clone (0% total, 0% self) [...]\n: | _init (0% total, 0% self)\n: | rustc_mir::borrow_check::location::LocationTable::new (0% total, 0% self) [...]\n: | rustc::ty::maps::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;tcx, &#39;lcx&gt;&gt;::param_env (0% total, 0% self) [...]\n: | rustc_data_structures::control_flow_graph::dominators::dominators (0% total, 0% self) [...]\n</pre></div>\n\n\n<p>Here's my data from before.</p>",
        "id": 127955875,
        "sender_full_name": "davidtwco",
        "timestamp": 1528813443
    },
    {
        "content": "<p>Apparently Zulip doesn't like quoting code blocks.</p>",
        "id": 127955889,
        "sender_full_name": "davidtwco",
        "timestamp": 1528813470
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> since your profile has our weird visit_mir calls, you're in the same situation as we are :) but if you need it, the NLL slowdown can be seen comparing for example <code>cargo +nightly clean &amp;&amp; CARGO_INCREMENTAL=0 cargo +nightly check &amp;&amp; touch src/lib.rs &amp;&amp; time CARGO_INCREMENTAL=0 cargo +nightly rustc --profile check --lib</code> vs <code>cargo +nightly clean &amp;&amp; CARGO_INCREMENTAL=0 cargo +nightly check &amp;&amp; touch src/lib.rs &amp;&amp; time CARGO_INCREMENTAL=0 cargo +nightly rustc --profile check --lib  -- -Zborrowck=mir</code></p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127955894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528813481
    },
    {
        "content": "<p>I've still got the build so when I get home I can run it again.</p>",
        "id": 127955918,
        "sender_full_name": "davidtwco",
        "timestamp": 1528813528
    },
    {
        "content": "<p>oh I hadn't noticed that the rustc-perf repo can't be cloned on windows (cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>) but with this partial clone I can at least reproduce the coercions slowdown for sure (&lt;1s vs 17s); I can't really profile on windows though so I'll try later tonight :)</p>",
        "id": 127956878,
        "sender_full_name": "lqd",
        "timestamp": 1528814771
    },
    {
        "content": "<p>oh but valgrind runs :3 this <code>coercions</code> profile might be trash but just in case: could \"95% of the time is now spent in ena's UnificationTable::reset_unifications\" make sense for a huge static array of strs <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 127960921,
        "sender_full_name": "lqd",
        "timestamp": 1528819516
    },
    {
        "content": "<p>ah. yes.</p>",
        "id": 127962567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528821737
    },
    {
        "content": "<p>I suspect my pending PR will make a huge difference here.</p>",
        "id": 127962569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528821743
    },
    {
        "content": "<p>gotta fix those bugs.</p>",
        "id": 127962571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528821748
    },
    {
        "content": "<p>I found the cause but I have to do a bit of refactoring to fix properly</p>",
        "id": 127962578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528821761
    },
    {
        "content": "<p>I'll look into the windows issue, though I don't have access to windows so it might be somewhat hard to test. Should be able to figure something out though.</p>",
        "id": 127964058,
        "sender_full_name": "simulacrum",
        "timestamp": 1528823829
    },
    {
        "content": "<p>redoing the <code>coercions</code> profile on osx seems to still point at heavier usage of ena in <code>RegionConstraintCollector::take_and_reset_data</code>, but here/now it's 93% <code>SnapshotVec::set_all</code>... I'll be looking forward to the comparisons with profiles made by others</p>",
        "id": 127971875,
        "sender_full_name": "lqd",
        "timestamp": 1528833885
    },
    {
        "content": "<p>we're still unsure about where the <code>visir_mir</code>calls are coming from ? is there something I could do to help gather some information about that ?</p>",
        "id": 127994125,
        "sender_full_name": "lqd",
        "timestamp": 1528873753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is this how I should do it: set up a String global variable in <code>librustc::mir::visit</code>, which would be printed in the visitor <code>super_mir</code>, and update this string context in different parts of NLL's <code>do_mir_borrowck</code> to tally up the different calls ?</p>",
        "id": 128002226,
        "sender_full_name": "lqd",
        "timestamp": 1528887331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I would probably do something like. Or else, set the variable to TRUE for each path that we know of (and FALSE afterwards), and then assert that it is TRUE in the mysterious <code>visit_mir</code>?</p>",
        "id": 128004958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891887
    },
    {
        "content": "<p>basically looking to find the path that makes it assert</p>",
        "id": 128004969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891905
    },
    {
        "content": "<p>but I think the idea of recording \"where each call comes from\" is probably better</p>",
        "id": 128004979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891917
    },
    {
        "content": "<p>since there is a decent chance that this is indeed a profiler fail</p>",
        "id": 128005026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891934
    },
    {
        "content": "<p>and in fact the calls <em>are</em> coming from one of the places we know of</p>",
        "id": 128005030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891944
    },
    {
        "content": "<p>and the backtrace is just wrong</p>",
        "id": 128005032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528891948
    },
    {
        "content": "<p>if I'm not sorely mistaken I think around half of the visit_mir calls come from parts of do_mir_borrowck</p>",
        "id": 128005038,
        "sender_full_name": "lqd",
        "timestamp": 1528891966
    },
    {
        "content": "<p>are you able to narrow down <em>where</em> from within <code>do_mir_borrowck</code>?</p>",
        "id": 128005056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528892011
    },
    {
        "content": "<p>like, can you just update your variable at various points</p>",
        "id": 128005060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528892019
    },
    {
        "content": "<p>and see what comes out?</p>",
        "id": 128005062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528892021
    },
    {
        "content": "<p>(binary search-esque)</p>",
        "id": 128005068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528892027
    },
    {
        "content": "<p>yeah I can update it at various points in the fn</p>",
        "id": 128005125,
        "sender_full_name": "lqd",
        "timestamp": 1528892090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> update: callgrind reports around 8-8.1k calls to <code>visit_mir</code>, but a println in <code>super_mir</code> yields 31k results — and I'm now a bit more confused than I was when I started this; binary search-esque results are <a href=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21\" target=\"_blank\" title=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21\">here</a> where I moved the tracing between different \"regions\" of the code. I will need to recheck all of these tomorrow because of this confusing bit: <code>mir_borrowck</code> yields 4.9k <code>super_mir</code>traces, while a part of <code>do_mir_borrowck</code> does 8.1k :/</p>",
        "id": 128027644,
        "sender_full_name": "lqd",
        "timestamp": 1528921002
    },
    {
        "content": "<p>... a night's sleep and it makes sense ... one last trace and this should be done</p>",
        "id": 128049921,
        "sender_full_name": "lqd",
        "timestamp": 1528958597
    },
    {
        "content": "<p>for those following at home my <code>visit_mir</code> / <code>super_mir</code> rollercoaster adventures, I'm back at \"I'm missing something\"</p>",
        "id": 128063170,
        "sender_full_name": "lqd",
        "timestamp": 1528981074
    },
    {
        "content": "<p>d'oh :)</p>",
        "id": 128063246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528981164
    },
    {
        "content": "<p>oh but mir_borrowck is recursive, this seems a key fact to find out now :p</p>",
        "id": 128078068,
        "sender_full_name": "lqd",
        "timestamp": 1528999800
    },
    {
        "content": "<p>(something like maybe <code>nll::compute_regions</code> indirectly calling <code>mir_borrowck</code>again — to the stack-of-traces mobile!)</p>",
        "id": 128079474,
        "sender_full_name": "lqd",
        "timestamp": 1529001643
    },
    {
        "content": "<p>hmm, that's a good point, I had sort of forgotten about that</p>",
        "id": 128079677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529001921
    },
    {
        "content": "<p>good to remember if/when we parallelize one day :)</p>",
        "id": 128079821,
        "sender_full_name": "lqd",
        "timestamp": 1529002090
    },
    {
        "content": "<p>not really relevant</p>",
        "id": 128079982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002299
    },
    {
        "content": "<p>for that in particular</p>",
        "id": 128079987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002302
    },
    {
        "content": "<p>I mean, it recurses via a query basically</p>",
        "id": 128079990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002309
    },
    {
        "content": "<p>and that will \"just work\" with the parallelization work</p>",
        "id": 128079992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002317
    },
    {
        "content": "<p>(which is in progress btw...)</p>",
        "id": 128080030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002322
    },
    {
        "content": "<p>(specifically it recurses in the case of a fn analyzing the closures contained within)</p>",
        "id": 128080042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529002336
    },
    {
        "content": "<p>good to know!</p>",
        "id": 128080071,
        "sender_full_name": "lqd",
        "timestamp": 1529002403
    },
    {
        "content": "<p>yeah zoxc's work IIRC</p>",
        "id": 128080075,
        "sender_full_name": "lqd",
        "timestamp": 1529002420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I finally managed to locate the origins of the MIR borrowck <code>super_mir</code> calls (which I assume would be related to the mysterious <code>visit_mir</code> calls), does <a href=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21\" target=\"_blank\" title=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21\">this</a> help ?</p>",
        "id": 128124903,
        "sender_full_name": "lqd",
        "timestamp": 1529075863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> actually, yes it does =) I <em>suspect</em> that <a href=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21#file-mod-rs-L243-L256\" target=\"_blank\" title=\"https://gist.github.com/lqd/7e178cb9ac8302e24272965048627f21#file-mod-rs-L243-L256\">this is the mysterious source</a></p>",
        "id": 128142567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529098594
    },
    {
        "content": "<p>callgrind reported around the same number of visit_mir calls</p>",
        "id": 128142647,
        "sender_full_name": "lqd",
        "timestamp": 1529098741
    },
    {
        "content": "<p>and hehe this is the part of the code where the non-recursive proof tracing behaviour was the most confusing :)</p>",
        "id": 128142712,
        "sender_full_name": "lqd",
        "timestamp": 1529098838
    },
    {
        "content": "<p>I forgot to mention I had already massaged this loop a little to confirm that the find_assignments call was the only source of mir visits in this part of the code indeed</p>",
        "id": 128201022,
        "sender_full_name": "lqd",
        "timestamp": 1529232517
    }
]