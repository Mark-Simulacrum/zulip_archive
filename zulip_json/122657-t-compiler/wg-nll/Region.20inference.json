[
    {
        "content": "<p>From the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/borrow_check/region_inference.html#final-example\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/borrow_check/region_inference.html#final-example\">rustc-guide</a>, can someone explain to me in this example:<br>\n<code>for&lt;'a&gt; fn(&amp;'a u32, &amp;'a u32) -&gt; &amp;'a u32\n    &lt;:\nfn(&amp;'!1 u32, &amp;'!2 u32) -&gt; &amp;'!1 u32</code></p>\n<p>How this happens, <br>\n<code>&amp;'!1 u32 &lt;: &amp;'?3 u32 // arg 1 (makes sense)\n&amp;'!2 u32 &lt;: &amp;'?3 u32 // arg 2 (makes sense)\n&amp;'?3 u32 &lt;: &amp;'!1 u32 // return type (doesn't make sense, unless we say they are subtypes)</code></p>\n<p>The last line that is for the return type, is <br>\n<code>&amp;'?3 u32 &lt;: &amp;'!1 u32 // return type</code><br>\nand NOT<br>\n<code>&amp;'!1 u32 &lt;: &amp;'?3 u32  // return type</code></p>",
        "id": 136086745,
        "sender_full_name": "blitzerr",
        "timestamp": 1539919334
    },
    {
        "content": "<p>And this one<br>\n<code>V1 in U1 = {skol(1)}\nV2 in U2 = {skol(2)}\nV3 in U2 = {}</code></p>\n<p>Why is V3 in <strong>U2</strong> and not in <strong>U1</strong> ?</p>",
        "id": 136086804,
        "sender_full_name": "blitzerr",
        "timestamp": 1539919459
    },
    {
        "content": "<p>this difference between <code>arg1/2</code> and <code>return type</code> caused by <code> fn(T) -&gt; U is contravariant over T, but covariant over U</code></p>",
        "id": 136104964,
        "sender_full_name": "csmoe",
        "timestamp": 1539948302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> cc <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\" target=\"_blank\" title=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>",
        "id": 136104981,
        "sender_full_name": "csmoe",
        "timestamp": 1539948325
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  it seems you had cleared <code>skolemize</code> with <code>placeholder</code> in rustc, should that be apply to rustc-guide?<br>\nand function is covariant over its return type should be mentioned in this example as arguments.</p>",
        "id": 136105693,
        "sender_full_name": "csmoe",
        "timestamp": 1539949202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> yep that should be applied to rustc-guide</p>",
        "id": 136105720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539949216
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> that doc does explain the first part. But I still don't get this one. Why is V3 working with U2 and not U1 ?</p>\n<p><code>V1 in U1 = {skol(1)}\nV2 in U2 = {skol(2)}\nV3 in U2 = {}</code></p>\n<p>Why is V3 in <strong>U2</strong> and not in <strong>U1</strong> ?</p>",
        "id": 136107099,
        "sender_full_name": "blitzerr",
        "timestamp": 1539951126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> sorry, this ques'n is beyond my knowledge, maybe you can refer to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 136109540,
        "sender_full_name": "csmoe",
        "timestamp": 1539954228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> the subtyping algorithm instantiates the binders in the <strong>subtype</strong> as <strong>existentials</strong> in some universe that can name all the things in the super type</p>",
        "id": 136111032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955713
    },
    {
        "content": "<p>one way to think about it is this:</p>",
        "id": 136111039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955718
    },
    {
        "content": "<p>if you have <code>for&lt;A&gt; T &lt;: for&lt;B&gt; U</code> (in general...)</p>",
        "id": 136111043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955731
    },
    {
        "content": "<p>that is true if <code>forall&lt;B&gt; { exists&lt;A&gt; { T &lt;: U } }</code></p>",
        "id": 136111065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955751
    },
    {
        "content": "<p>that is, if \"for all lifetimes B\", whatever they are, there exists <em>some</em> lifetimes A, such that <code>T &lt;: U</code></p>",
        "id": 136111088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955775
    },
    {
        "content": "<p>the reason for this is: we have a value of the <strong>subtype</strong> (<code>T</code>)</p>",
        "id": 136111094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955786
    },
    {
        "content": "<p>we are storing it into a slot that is typed with the <strong>supertype</strong> (<code>U</code>)</p>",
        "id": 136111105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955794
    },
    {
        "content": "<p>so we have to be sure that the subtype is an instance of the supertype</p>",
        "id": 136111181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955815
    },
    {
        "content": "<p>to use a concrete example, if you had</p>",
        "id": 136111205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955842
    },
    {
        "content": "<p>for&lt;'a&gt; fn(&amp;'a u32) &lt;: fn(&amp;'static u32)</p>",
        "id": 136111212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955848
    },
    {
        "content": "<p>that should be true, because on the one hand we have a fn that accepts <strong>any</strong> region</p>",
        "id": 136111225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955858
    },
    {
        "content": "<p>and we are using it in a spot where it will only have to accept the <strong>static region</strong></p>",
        "id": 136111241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955868
    },
    {
        "content": "<p>since the static region is a region, that should be fine</p>",
        "id": 136111246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955874
    },
    {
        "content": "<p>(but the reverse is not true -- if the fn only accepts <code>'static</code>, it cannot be used in a spot where it maybe given anything)</p>",
        "id": 136111251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955891
    },
    {
        "content": "<blockquote>\n<p>since the static region is a region, that should be fine</p>\n</blockquote>\n<p>expressed the way I put it before:</p>\n<p><code>forall&lt;&gt; { exists&lt;'a&gt; { fn(&amp;'a u32) &lt;: fn(&amp;'static u32) } }</code></p>",
        "id": 136111316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955933
    },
    {
        "content": "<p>the outer <code>forall</code> is empty because the supertype here doesn't have any bound regions</p>",
        "id": 136111324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539955941
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  that makes sense. How do we read “&lt;:” ?</p>",
        "id": 136113068,
        "sender_full_name": "blitzerr",
        "timestamp": 1539957545
    },
    {
        "content": "<p>you mean how is <code>&lt;:</code> pronounced?</p>",
        "id": 136113519,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539957957
    },
    {
        "content": "<p><code>S &lt;: T</code>, for types <code>S</code> and <code>T</code>, is usually pronounced \"S is a subtype of T\"</p>",
        "id": 136113604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539958001
    },
    {
        "content": "<p>Right</p>",
        "id": 136113608,
        "sender_full_name": "blitzerr",
        "timestamp": 1539958005
    },
    {
        "content": "<p>e.g. <a href=\"https://en.wikipedia.org/wiki/Subtyping\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Subtyping\">https://en.wikipedia.org/wiki/Subtyping</a></p>",
        "id": 136113648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539958053
    },
    {
        "content": "<p>Ahh Subtype, I was thinking sunset.</p>",
        "id": 136113654,
        "sender_full_name": "blitzerr",
        "timestamp": 1539958060
    },
    {
        "content": "<p>there's a relationship :)</p>",
        "id": 136113664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539958069
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 136113668,
        "sender_full_name": "blitzerr",
        "timestamp": 1539958075
    },
    {
        "content": "<p>i.e., the set of values with type T is a subset of those with type U, if T &lt;: U</p>",
        "id": 136113672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539958079
    },
    {
        "content": "<p>oh oh, <em>sub</em>set</p>",
        "id": 136113719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539958086
    },
    {
        "content": "<p>/me was super confused</p>",
        "id": 136113727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539958096
    },
    {
        "content": "<p>to the tune of \"sunrise, subset\"... \"super-subset\"</p>",
        "id": 136113746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539958125
    },
    {
        "content": "<p>Subtype*.  This autocorrect <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 136113770,
        "sender_full_name": "blitzerr",
        "timestamp": 1539958155
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 136115391,
        "sender_full_name": "blitzerr",
        "timestamp": 1539959826
    },
    {
        "content": "<p>I am traveling and on way to somewhere but after I read up on all this, will post further questions if I had any. Thanks <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  for clarifications.</p>",
        "id": 136117860,
        "sender_full_name": "blitzerr",
        "timestamp": 1539962152
    },
    {
        "content": "<p>And sorry for the /subset/sunset/ confusion. <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 136117929,
        "sender_full_name": "blitzerr",
        "timestamp": 1539962194
    },
    {
        "content": "<p>i love staring for hours at a good subset</p>",
        "id": 136118037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539962300
    },
    {
        "content": "<p>Usually with some wine <span class=\"emoji emoji-1f44c\" title=\"ok\">:ok:</span></p>",
        "id": 136119096,
        "sender_full_name": "blitzerr",
        "timestamp": 1539963260
    },
    {
        "content": "<p>I have always liked every subset I have met <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 136119098,
        "sender_full_name": "blitzerr",
        "timestamp": 1539963260
    }
]