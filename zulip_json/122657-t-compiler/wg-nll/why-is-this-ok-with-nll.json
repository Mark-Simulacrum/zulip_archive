[
    {
        "content": "<p>Why does this compile with NLL?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashSet</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashSet</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">((</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133809802,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769208
    },
    {
        "content": "<p>why wouldn't it?</p>",
        "id": 133809882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769297
    },
    {
        "content": "<p>I guess you are imagining: there is a drop on <code>HashSet</code>, and it has access to those (invalid) references?</p>",
        "id": 133809949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769327
    },
    {
        "content": "<p>yep</p>",
        "id": 133809951,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769334
    },
    {
        "content": "<p>this is because <code>HashSet</code> declares that it doesn't touch the K, V pairs during drop</p>",
        "id": 133809961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769346
    },
    {
        "content": "<p>does hashset have the... yeah</p>",
        "id": 133809971,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769352
    },
    {
        "content": "<p>via its <code>#[may_dangle]</code> attribute</p>",
        "id": 133809972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769353
    },
    {
        "content": "<p>I guess the flip question is then... why doesn't it work without NLL?</p>",
        "id": 133810006,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769386
    },
    {
        "content": "<p>Is NLL aware of <code>may_dangle</code>?</p>",
        "id": 133810042,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769429
    },
    {
        "content": "<p>NLL is aware of <code>#[may_dangle]</code>, yes</p>",
        "id": 133810140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769489
    },
    {
        "content": "<p>as is the AST borrowck</p>",
        "id": 133810144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769499
    },
    {
        "content": "<p>the reason that it didn't work with the old borrowck is that there is a fundamental rule that the type of each variable must be live until the end of the block</p>",
        "id": 133810166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769518
    },
    {
        "content": "<p>or, sort of, right up until it is dropped (but not necessarily during the call to drop itself)</p>",
        "id": 133810179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769535
    },
    {
        "content": "<p>(that is where may-dangle comes in)</p>",
        "id": 133810186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769555
    },
    {
        "content": "<p>in AST borrowck, when would <code>may_dangle</code> have an effect?</p>",
        "id": 133810235,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536769568
    },
    {
        "content": "<p>so, in this case, the <code>h</code> type has to be live until it is dropped, but that outlives <code>a</code></p>",
        "id": 133810236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769568
    },
    {
        "content": "<p>you can observe it if you build up cycles</p>",
        "id": 133810247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769580
    },
    {
        "content": "<p>it's rather awkward to do, but it happens</p>",
        "id": 133810251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769587
    },
    {
        "content": "<p>arenas are a case of this:</p>",
        "id": 133810256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769591
    },
    {
        "content": "<p>when you allocate from an arena, you get something that lives with its lifetime, and you can build up cycles amongst those data structures</p>",
        "id": 133810276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769618
    },
    {
        "content": "<p>Do you think that with the spread of NLL, <code>may_dangle</code> may gain more prominence? Since it will be more obvious that code in this general shape can work for <code>Vec</code> but not for <code>MyCustomContainer</code>?</p>\n<p>I guess if it's built on top of one of the stdlib containers you can benefit...</p>",
        "id": 133810890,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536770162
    },
    {
        "content": "<p>thus pushing to stabilize it in some fashion</p>",
        "id": 133810934,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536770178
    },
    {
        "content": "<p>hmm</p>",
        "id": 133811002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770277
    },
    {
        "content": "<p>I hadn't thought about that</p>",
        "id": 133811004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770281
    },
    {
        "content": "<p>perhaps</p>",
        "id": 133811046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770287
    },
    {
        "content": "<p>I would like to get our story straight</p>",
        "id": 133811056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770301
    },
    {
        "content": "<p>there are also some details of how it integrates with NLL that need a bit of work</p>",
        "id": 133811060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770309
    },
    {
        "content": "<p>Is \"values in a scope are dropped in the opposite order they are created\" no longer strictly true? Is <code>h</code> dropped before <code>a</code>? Or is there actually some dangly going on?</p>",
        "id": 133811218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536770455
    },
    {
        "content": "<p>it is strictly true</p>",
        "id": 133811264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770517
    },
    {
        "content": "<p>but we only require data to be live where it is used now</p>",
        "id": 133811319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770535
    },
    {
        "content": "<p>and we know the drop of <code>h</code> doesn't use <code>a</code></p>",
        "id": 133811322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770539
    },
    {
        "content": "<p>which is via the <code>#[may_dangle]</code></p>",
        "id": 133811368,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536770600
    },
    {
        "content": "<p>yes</p>",
        "id": 133811388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770634
    },
    {
        "content": "<p>I can see why you might want to have a more general \"I guarantee this function won't access this value\" then, and why it would be very difficult to get that right</p>",
        "id": 133811434,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536770656
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s approach feels pretty right, but we've not tried to work it out too hard</p>",
        "id": 133811473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770724
    },
    {
        "content": "<p>basically being able to say that, in contrast to a regular function, this type need not be valid in this function</p>",
        "id": 133811481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770738
    },
    {
        "content": "<p>this will in turn have to propagate to helper functions and the like</p>",
        "id": 133811488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770754
    },
    {
        "content": "<p>there is basically an implicit outlives clause in all functions now that says</p>",
        "id": 133811533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770770
    },
    {
        "content": "<p>for each type parameter T, the value given for T must outlive the call to the fn itself</p>",
        "id": 133811545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770780
    },
    {
        "content": "<p>this would be sort of removing that... but it has trickle-down effects</p>",
        "id": 133811548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770791
    },
    {
        "content": "<p>e.g., right now, <code>drop</code> has the signature <code>&amp;mut self</code> -- but normally we require that <code>&amp;'a mut Self</code> is valid if <code>Self: 'a</code></p>",
        "id": 133811565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770824
    },
    {
        "content": "<p>and here we are saying that the <code>self</code> is valid (so <code>'a</code> is live) but some of the data in <code>Self</code> is not...?</p>",
        "id": 133811576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770837
    },
    {
        "content": "<p>not sure how to deal with that</p>",
        "id": 133811579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770839
    },
    {
        "content": "<p>huh, so that means temporaries created just for the purpose of being an argument to a function call already outlives the call itself nowadays?</p>",
        "id": 133811583,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1536770853
    },
    {
        "content": "<p>yes</p>",
        "id": 133811749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771027
    },
    {
        "content": "<p>(of course?)</p>",
        "id": 133811753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771033
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary\" target=\"_blank\" title=\"https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary\">https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary</a></p>",
        "id": 133811766,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536771054
    },
    {
        "content": "<p>because lexically it looks as if it only lives during the function call, not outlive it</p>",
        "id": 133811777,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1536771072
    },
    {
        "content": "<p>conceptually, it outlives the call by like one line</p>",
        "id": 133811792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536771095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">__a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133811864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536771152
    }
]