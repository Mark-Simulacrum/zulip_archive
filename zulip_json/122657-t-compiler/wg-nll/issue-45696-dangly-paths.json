[
    {
        "content": "<p>Just to spite <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>, I'm going to use the \"dangly paths\" jargon here -- but this thread is devoted to figuring out how to resolve <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a>. There is some background discussion on the general problem in <a href=\"https://github.com/nikomatsakis/nll-rfc/issues/40\" target=\"_blank\" title=\"https://github.com/nikomatsakis/nll-rfc/issues/40\">https://github.com/nikomatsakis/nll-rfc/issues/40</a> as well.</p>\n<p>In any case, I think <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that we probably just want to hardcode a rule around <code>Box</code> for the time-being...</p>",
        "id": 130282061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532450
    },
    {
        "content": "<p>specifically, some kind of rule saying that when a <code>Box </code> is dropped, it's ok to have borrows of its referent</p>",
        "id": 130282087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532476
    },
    {
        "content": "<p>the example from <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the problem here is that we drop <code>x</code> on exit from the fn -- even though <code>**x</code> is still borrowed (note that the return is actually implicitly equal to <code>&amp;mut **x</code>, even though it looks like a move)</p>",
        "id": 130282196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532532554
    },
    {
        "content": "<p>I had a look at special casing Box recently.</p>",
        "id": 130304397,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532555370
    },
    {
        "content": "<p>Some notes: we currently drop individual fields of <code>!Drop</code> structs/tuples/closures/generators and only access the fields that need drop (so <code>&amp;mut T</code> fields don't have an access allowing their referent to be borrowed.</p>",
        "id": 130304579,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532555571
    },
    {
        "content": "<p>Storage dead stops the actual reference being borrowed)</p>",
        "id": 130304596,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532555601
    },
    {
        "content": "<p>However, this can't be naively extended to Box, by making Drop do a deep access of the field of <code>*x</code> that implement <code>Drop</code>, followed by a shallow access of <code>*x</code>, since this causes dropping <code>struct A(Box&lt;A&gt;)</code> to give an infinite loop.</p>",
        "id": 130304750,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532555765
    },
    {
        "content": "<p>So it seems like the special casing would have to be when/after checking for conflicts, which probably saves some time checking whether types implement <code>Drop</code> when it doesn't matter.</p>",
        "id": 130304850,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1532555894
    },
    {
        "content": "<blockquote>\n<p>specifically, some kind of rule saying that when a <code>Box </code> is dropped, it's ok to have borrows of its referent</p>\n</blockquote>\n<p>yeah okay, I'll try to do this</p>",
        "id": 130335204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1532601816
    }
]