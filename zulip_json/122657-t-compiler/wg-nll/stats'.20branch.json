[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've managed to make your branch to compile, but I'm not sure that's what you wanted it to do</p>",
        "id": 126362646,
        "sender_full_name": "qmx",
        "timestamp": 1525955451
    },
    {
        "content": "<p><a href=\"https://github.com/qmx/borrow-check/commit/1cadd3c8e4334bf2f723bc381ffca9c103648605\" target=\"_blank\" title=\"https://github.com/qmx/borrow-check/commit/1cadd3c8e4334bf2f723bc381ffca9c103648605\">https://github.com/qmx/borrow-check/commit/1cadd3c8e4334bf2f723bc381ffca9c103648605</a></p>",
        "id": 126362662,
        "sender_full_name": "qmx",
        "timestamp": 1525955492
    },
    {
        "content": "<p>maybe instead put a <code>*x</code> in the closure</p>",
        "id": 126362711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955552
    },
    {
        "content": "<p>e.g. <code>flat_map(|(r1, r2s)| r2s.iter().map(move |r2| (r1, r2)))</code> could be:</p>",
        "id": 126362720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955566
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>flat_map(|(r1, r2s)| r2s.iter().map(move |r2| (*r1, *r2)))\n</pre></div>",
        "id": 126362724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525955577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> ok</p>",
        "id": 126364294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958228
    },
    {
        "content": "<p>I think I need to step back a little bit and understand the bigger picture here</p>",
        "id": 126364300,
        "sender_full_name": "qmx",
        "timestamp": 1525958248
    },
    {
        "content": "<p>I guess first thing is I have to refresh my memory what that branch was even doing</p>",
        "id": 126364302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958253
    },
    {
        "content": "<p>but yes, that sounds right</p>",
        "id": 126364303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958258
    },
    {
        "content": "<p>we wanted to print a histogram from the analysis data</p>",
        "id": 126364305,
        "sender_full_name": "qmx",
        "timestamp": 1525958268
    },
    {
        "content": "<p>right, I remember that much :)</p>",
        "id": 126364350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958293
    },
    {
        "content": "<p>probably, I suspect, many histograms</p>",
        "id": 126364351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958296
    },
    {
        "content": "<p>but let's start with one</p>",
        "id": 126364355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958299
    },
    {
        "content": "<p>anyway, how far back do you want to step?</p>",
        "id": 126364356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958303
    },
    {
        "content": "<p>but that led me to more philosophical questions like what <code>(Region, Region)</code> actually means</p>",
        "id": 126364357,
        "sender_full_name": "qmx",
        "timestamp": 1525958305
    },
    {
        "content": "<p>(beyond tuple of regions, of course <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span> )</p>",
        "id": 126364363,
        "sender_full_name": "qmx",
        "timestamp": 1525958326
    },
    {
        "content": "<p>:)</p>",
        "id": 126364390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958400
    },
    {
        "content": "<p>so the \"underlying model\" here is sort of \"sets of tuples\"</p>",
        "id": 126364435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958421
    },
    {
        "content": "<p>you can think of that in many ways</p>",
        "id": 126364437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958425
    },
    {
        "content": "<p>but e.g. if we think about the blog post</p>",
        "id": 126364444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958437
    },
    {
        "content": "<p>it talked about something like, at this point <code>P</code> in the code, we know that <code>r1 &lt;= r2</code></p>",
        "id": 126364447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958444
    },
    {
        "content": "<p>and maybe at some other point <code>Q</code> we know that <code>r2 &lt;= r3</code></p>",
        "id": 126364456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958467
    },
    {
        "content": "<p>(with me so far?)</p>",
        "id": 126364458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958474
    },
    {
        "content": "<p>yep!</p>",
        "id": 126364459,
        "sender_full_name": "qmx",
        "timestamp": 1525958480
    },
    {
        "content": "<p>we could represent those facts as a set of 3-tuples: (Point, Region, Region)</p>",
        "id": 126364464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958498
    },
    {
        "content": "<p>so we would have:</p>\n<div class=\"codehilite\"><pre><span></span>(P, r1, r2)\n(Q, r2, r3)\n</pre></div>",
        "id": 126364474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958510
    },
    {
        "content": "<p>what that <code>all_subsets</code> function aims to do is to collapse that to (one sec, afk)</p>",
        "id": 126364518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958557
    },
    {
        "content": "<p>right so we are going to reduce those 3-tuples to ignore the points</p>",
        "id": 126364574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958684
    },
    {
        "content": "<p>so basically the result in this case would just be</p>\n<div class=\"codehilite\"><pre><span></span>(r1, r2)\n(r2, r3)\n</pre></div>",
        "id": 126364583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958703
    },
    {
        "content": "<p><span class=\"emoji emoji-2714\" title=\"heavy check mark\">:heavy_check_mark:</span> ?</p>",
        "id": 126364592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958721
    },
    {
        "content": "<p>gotcha</p>",
        "id": 126364597,
        "sender_full_name": "qmx",
        "timestamp": 1525958741
    },
    {
        "content": "<p>I sort of forget why I was doing <em>that</em></p>",
        "id": 126364642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958785
    },
    {
        "content": "<p>well, basically, I think what I figured is</p>",
        "id": 126364643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958795
    },
    {
        "content": "<p>in the real analysis, the subset relation kind of grows and shrinks</p>",
        "id": 126364644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958802
    },
    {
        "content": "<p>but if we look at the union over all points</p>",
        "id": 126364647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958809
    },
    {
        "content": "<p>we get a kind of \"upper bound\" on how many edges result</p>",
        "id": 126364648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958815
    },
    {
        "content": "<p>anyway, it's not clear that this is the right kind of stats to be gathering</p>",
        "id": 126364656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958826
    },
    {
        "content": "<p>(but it seems like an ok starting point)</p>",
        "id": 126364665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958857
    },
    {
        "content": "<p>(oh, I sort of remember, I think I wanted to print out the maximum in-degree and out-degree of a node at any particular point?)</p>",
        "id": 126364669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958876
    },
    {
        "content": "<p>exactly</p>",
        "id": 126364708,
        "sender_full_name": "qmx",
        "timestamp": 1525958885
    },
    {
        "content": "<p>right so I think I was going to take those 2-tuples and then produce two results:</p>",
        "id": 126364721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958911
    },
    {
        "content": "<p>like, for each region R, how many tuples are there like <code>(R, _)</code> -- that is kind of the \"out-degree\"</p>",
        "id": 126364734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958926
    },
    {
        "content": "<p>because each tuple <code>(A, B)</code> represents an edge <code>A -&gt; B</code> in the \"subset graph\"</p>",
        "id": 126364750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958940
    },
    {
        "content": "<p>another way of saying it is that we are computing \"how regions is R is a subset of\"</p>",
        "id": 126364757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958961
    },
    {
        "content": "<p>then the other result would be \"how many tuples are there like <code>(_, R)</code>\"</p>",
        "id": 126364774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958976
    },
    {
        "content": "<p>that answers roughly the opposite question (\"how many regions are a subset of R\")</p>",
        "id": 126364781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525958988
    },
    {
        "content": "<p>this makes sense</p>",
        "id": 126364838,
        "sender_full_name": "qmx",
        "timestamp": 1525959019
    },
    {
        "content": "<p>(it's interesting to note though that these tuples will be <em>after</em> we've computed the transitive closure operation; we might later be interested in the same results, but with \"transitive implications\" removed...)</p>",
        "id": 126364841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959029
    },
    {
        "content": "<p>anyway both of those computations begin with the all_tuples computation</p>",
        "id": 126364848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959042
    },
    {
        "content": "<p>though it occurs to me now</p>",
        "id": 126364849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959044
    },
    {
        "content": "<p>that differential-dataflow would make this more elegant</p>",
        "id": 126364851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959049
    },
    {
        "content": "<p>maybe we should be using that :)</p>",
        "id": 126364852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959053
    },
    {
        "content": "<p>/me is going back to read differential-dataflow examples</p>",
        "id": 126364861,
        "sender_full_name": "qmx",
        "timestamp": 1525959082
    },
    {
        "content": "<p>but in \"normal Rust\" code you might do something like:</p>\n<div class=\"codehilite\"><pre><span></span>for &quot;each region `r`&quot; {\n  let out_degree = all_subset.tuples().filter(|(a, _)| if a == r).count();\n  let in_degree = all_subset.tuples().filter(|(_, b)| if b == r).count();\n}\n</pre></div>",
        "id": 126364935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> let's do it in normal Rust first</p>",
        "id": 126364937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959143
    },
    {
        "content": "<p>I think it would be easier to learn 1 thing at a time ;)</p>",
        "id": 126364943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959158
    },
    {
        "content": "<p>then we can port to differential-dataflow</p>",
        "id": 126364944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959162
    },
    {
        "content": "<p>fair enough</p>",
        "id": 126364946,
        "sender_full_name": "qmx",
        "timestamp": 1525959166
    },
    {
        "content": "<p>so, once you compute those in- and out-degrees</p>",
        "id": 126365017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959255
    },
    {
        "content": "<p>you can then add those two pnts to the histogram</p>",
        "id": 126365020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959262
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>let mut out_histogram, in_histogram;\nfor &quot;each region `r`&quot; {\n  let out_degree = all_subset.tuples().filter(|(a, _)| if a == r).count();\n  let in_degree = all_subset.tuples().filter(|(_, b)| if b == r).count();\n  out_histogram.add(out_degree);\n  in_histogram.add(in_degree);\n}\nout_histogram.print();\nin_histogram.print();\n</pre></div>",
        "id": 126365024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959269
    },
    {
        "content": "<p>that was the idea, anyhow</p>",
        "id": 126365049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959341
    },
    {
        "content": "<p>sounds like a good start, lemme give it a try</p>",
        "id": 126365097,
        "sender_full_name": "qmx",
        "timestamp": 1525959383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> I suppose a more efficient formulation might be like this</p>",
        "id": 126365118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>let mut in_count, out_count = FxHashMap::default();\nfor (a, b) in all_subsets {\n  *out_count.entry(a).or_insert(0) += 1;\n  *in_count.entry(a).or_insert(0) += 1;\n}\n</pre></div>",
        "id": 126365178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959497
    },
    {
        "content": "<p>assuming no duplicates</p>",
        "id": 126365181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959511
    },
    {
        "content": "<p>(we can remove duplicates in various ways)</p>",
        "id": 126365199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959584
    },
    {
        "content": "<p>that said, I guess what we care about is really the in-degree or out-degree at <em>any particular point</em></p>",
        "id": 126365206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959600
    },
    {
        "content": "<p>anyway, I'll stop badgering you and let you get something</p>",
        "id": 126365246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959606
    },
    {
        "content": "<p>it'll be easy to tweak</p>",
        "id": 126365250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959611
    },
    {
        "content": "<p><code>tracking::RegionDegrees</code> has similar information and updating code right ?</p>",
        "id": 126365327,
        "sender_full_name": "lqd",
        "timestamp": 1525959754
    },
    {
        "content": "<p>lol, that's what I was going to ask now</p>",
        "id": 126365336,
        "sender_full_name": "qmx",
        "timestamp": 1525959774
    },
    {
        "content": "<p>heh, yes... we could use that :P</p>",
        "id": 126365356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959827
    },
    {
        "content": "<p>I forgot that was there</p>",
        "id": 126365358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525959830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>In-degree stats\n# Number of samples = 22\n# Min = 1\n# Max = 3\n#\n# Mean = 1.3636363636363638\n# Standard deviation = 0.5677270907634907\n# Variance = 0.3223140495867768\n#\n# Each ∎ is a count of 1\n#\n 1 ..  2 [ 15 ]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n 2 ..  3 [  6 ]: ∎∎∎∎∎∎\n 3 ..  4 [  1 ]: ∎\n 4 ..  5 [  0 ]:\n 5 ..  6 [  0 ]:\n 6 ..  7 [  0 ]:\n 7 ..  8 [  0 ]:\n 8 ..  9 [  0 ]:\n 9 .. 10 [  0 ]:\n10 .. 11 [  0 ]:\nOut-degree stats\n# Number of samples = 22\n# Min = 1\n# Max = 3\n#\n# Mean = 1.3636363636363638\n# Standard deviation = 0.5677270907634907\n# Variance = 0.3223140495867768\n#\n# Each ∎ is a count of 1\n#\n 1 ..  2 [ 15 ]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n 2 ..  3 [  6 ]: ∎∎∎∎∎∎\n 3 ..  4 [  1 ]: ∎\n 4 ..  5 [  0 ]:\n 5 ..  6 [  0 ]:\n 6 ..  7 [  0 ]:\n 7 ..  8 [  0 ]:\n 8 ..  9 [  0 ]:\n 9 .. 10 [  0 ]:\n10 .. 11 [  0 ]:\n</pre></div>",
        "id": 126368391,
        "sender_full_name": "qmx",
        "timestamp": 1525964312
    },
    {
        "content": "<p>I'm having mixed feelings with the output tho, is this supposed to be something separate from dump? Cause it's a lot of info :)</p>",
        "id": 126368835,
        "sender_full_name": "qmx",
        "timestamp": 1525964984
    },
    {
        "content": "<p>maybe for -v with the other in/out degree info ? (or replacing it)</p>",
        "id": 126368913,
        "sender_full_name": "lqd",
        "timestamp": 1525965049
    },
    {
        "content": "<p>the thing is that this information has been only generated when you ask for <code>-v</code></p>",
        "id": 126368973,
        "sender_full_name": "qmx",
        "timestamp": 1525965126
    },
    {
        "content": "<p>and I wonder if this is the expected behavior here</p>",
        "id": 126368995,
        "sender_full_name": "qmx",
        "timestamp": 1525965188
    },
    {
        "content": "<p>I imagined a <code>--stats</code> option (or family of options)</p>",
        "id": 126369006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965210
    },
    {
        "content": "<p>anyway I guess we should think about what else we want to know --</p>",
        "id": 126369093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965338
    },
    {
        "content": "<p>one thing  I would like is to get some idea of how many regions \"go dead\" at each point. Meaning that:</p>\n<ul>\n<li>There is an edge <code>P -&gt; Q</code></li>\n<li>There is a region <code>R</code> that appears in the subset relation at <code>P</code></li>\n<li>That same region <code>R</code> is not live at <code>Q</code></li>\n</ul>",
        "id": 126369167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> if you wanted to mess about with differential-dataflow, we could talk through how to compute that</p>",
        "id": 126369175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965423
    },
    {
        "content": "<p>not sure if you still have more time for the morning :)</p>",
        "id": 126369181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965430
    },
    {
        "content": "<p>whoa, I didn't expect the clap analysis to be that slow (and big!)</p>",
        "id": 126369255,
        "sender_full_name": "qmx",
        "timestamp": 1525965512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can talk now, and work on it later :)</p>",
        "id": 126369264,
        "sender_full_name": "qmx",
        "timestamp": 1525965533
    },
    {
        "content": "<p>gonna dump what I have on a PR later today</p>",
        "id": 126369285,
        "sender_full_name": "qmx",
        "timestamp": 1525965567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> well <a href=\"https://github.com/rust-lang-nursery/borrow-check/blob/440ada78e5cce8d170b32e03d05534f0d3262068/src/output/timely.rs#L86-L90\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/blob/440ada78e5cce8d170b32e03d05534f0d3262068/src/output/timely.rs#L86-L90\">consider this code</a></p>",
        "id": 126369401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965698
    },
    {
        "content": "<p>that is currently what \"moves\" subset relations from a point P to its successor Q</p>",
        "id": 126369410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965718
    },
    {
        "content": "<p>the differential-dataflow version of the datalog is a bit complex because of the \"or\" (<code>;</code>)</p>",
        "id": 126369481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965827
    },
    {
        "content": "<p>I glossed over that in my blog post; it's sort of a micro-perf-opt, actually</p>",
        "id": 126369522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965846
    },
    {
        "content": "<p>the idea is that there are some regions (the \"universal regions\") that are known to be live at every point</p>",
        "id": 126369535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965860
    },
    {
        "content": "<p>we could generate a fact <code>region_live_at(R, P)</code> for each point P</p>",
        "id": 126369545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965872
    },
    {
        "content": "<p>but instead we generate one <code>universal_region(R)</code> fact</p>",
        "id": 126369549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965879
    },
    {
        "content": "<p>this is kind of annoying and maybe wasn't the right call =)</p>",
        "id": 126369562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965897
    },
    {
        "content": "<p>anyway if we look at the first bit:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">subset</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">))).</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cfg_edge</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126369577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965922
    },
    {
        "content": "<p>at least it's &lt;5 universal regions, vs 50k region_live_at facts per universal region :)</p>",
        "id": 126369585,
        "sender_full_name": "lqd",
        "timestamp": 1525965939
    },
    {
        "content": "<p>that is equivalent to this in datalog:</p>\n<div class=\"codehilite\"><pre><span></span>subset(R1, R2, Q) :-\n    subset(R1, R2, P),\n    cfg_edge(P, Q).\n</pre></div>",
        "id": 126369595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965958
    },
    {
        "content": "<p>differentia-dataflow operates over streams of tuples</p>",
        "id": 126369638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965977
    },
    {
        "content": "<p>the base primitive is <code>join</code></p>",
        "id": 126369639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525965981
    },
    {
        "content": "<p>which takes one stream of tuples of type <code>(A, B)</code> and another of type <code>(A, C)</code> and produces a third stream <code>(A, B, C)</code>. think SQL join.</p>",
        "id": 126369649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966005
    },
    {
        "content": "<p>i.e., tuples are matched up when the first part is equal</p>",
        "id": 126369656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966014
    },
    {
        "content": "<p>so in this case we started out with tuples like <code>(r1, r2, p)</code> (that's the <code>subset</code> relation)</p>",
        "id": 126369674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966038
    },
    {
        "content": "<p>and we have the <code>cfg_edge</code> relation with has tuples <code>(p, q)</code></p>",
        "id": 126369681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966051
    },
    {
        "content": "<p>we use <code>map</code> to reorder things so that the thing we want to join on is first, and the rest is latter</p>",
        "id": 126369688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966062
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>subset.map(|(r1, r2, p)| (p, (r1, r2)))\n</pre></div>",
        "id": 126369694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966071
    },
    {
        "content": "<p>produces tuples <code>(p, (r1, r2))</code></p>",
        "id": 126369696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966078
    },
    {
        "content": "<p>same data, different configuration</p>",
        "id": 126369736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966084
    },
    {
        "content": "<p>now we join that with the cfg-edge <code>(p, q)</code></p>",
        "id": 126369741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966090
    },
    {
        "content": "<p>and so we will get tuples like <code>(p, (r1, r2), q)</code></p>",
        "id": 126369745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966096
    },
    {
        "content": "<p>make sense?</p>",
        "id": 126369757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966114
    },
    {
        "content": "<p>yep, it's dense but makes sense</p>",
        "id": 126369761,
        "sender_full_name": "qmx",
        "timestamp": 1525966123
    },
    {
        "content": "<p>that's the basic pattern, but there are two other operations used from time to time</p>",
        "id": 126369779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966152
    },
    {
        "content": "<p>one is <code>semijoin</code> -- this is kind of like \"filter\"</p>",
        "id": 126369780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966158
    },
    {
        "content": "<p>the other is \"antijoin\", which is kind of like join except it <em>removes</em> things that match</p>",
        "id": 126369784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966170
    },
    {
        "content": "<p>/me can see more uses for that</p>",
        "id": 126369860,
        "sender_full_name": "qmx",
        "timestamp": 1525966212
    },
    {
        "content": "<p>anyway so what I wanted to compute, expressed in <em>datalog</em>, is something like</p>\n<div class=\"codehilite\"><pre><span></span>subset(R1, R2, Q) :-\n  subset(R1, R2, P),\n  cfg_edge(P, Q),\n  !((region_live_at(R1, Q); universal_region(R1)); (region_live_at(R2, Q); universal_region(R2))).\n</pre></div>\n\n\n<p>(or something like that)</p>",
        "id": 126369889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966277
    },
    {
        "content": "<p>that is probably not legal datalog but anyway</p>",
        "id": 126369892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966285
    },
    {
        "content": "<p>i.e., where there was a subset relation at the point P (<code>subset(R1, R2, P)</code>) ,and there is an edge P-&gt;Q (<code>cfg_edge(P, Q)</code>), but either r1 or r2 is not live at <code>Q</code></p>",
        "id": 126369901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966314
    },
    {
        "content": "<p>we should be able to translate that into differential-dataflow with a bit of ... shuffling around of the existing equations :P</p>",
        "id": 126369951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966349
    },
    {
        "content": "<p>I think I have the precise detail wrong there</p>",
        "id": 126369963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966395
    },
    {
        "content": "<p>said simpler, it would be something like this:</p>\n<div class=\"codehilite\"><pre><span></span>subset(R1, R2, Q) :-\n  subset(R1, R2, P),\n  cfg_edge(P, Q),\n  (!viable_at(R1, Q)); (!viable_at(R2, Q)).\n\nviable_at(R, P) :- region_live_at(R, P).\nviable_at(R, P) :- universal_region(R). // &lt;-- though this is not valid datalog but anyway\n</pre></div>",
        "id": 126370027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966456
    },
    {
        "content": "<p>/me will need to re-read that a few times for it to sink in</p>",
        "id": 126370028,
        "sender_full_name": "qmx",
        "timestamp": 1525966461
    },
    {
        "content": "<p>we can probably jsut ignore the universal region stuff for now</p>",
        "id": 126370031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966465
    },
    {
        "content": "<p>\"desugar\" it</p>",
        "id": 126370034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966471
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>subset(R1, R2, Q) :-\n  subset(R1, R2, P),\n  cfg_edge(P, Q),\n  !region_live_at(R1, Q).\n\nsubset(R1, R2, Q) :-\n  subset(R1, R2, P),\n  cfg_edge(P, Q),\n  !region_live_at(R2, Q).\n</pre></div>",
        "id": 126370060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966505
    },
    {
        "content": "<p>that would give rules like that (also avoiding <code>;</code>, which is sort of confusing)</p>",
        "id": 126370070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  your automatic \"datalog queries to DD\" builder idea is looking better and better by the minute :)</p>",
        "id": 126370142,
        "sender_full_name": "lqd",
        "timestamp": 1525966573
    },
    {
        "content": "<p>heh yeah would be fairly easy</p>",
        "id": 126370148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966585
    },
    {
        "content": "<p>once you grok the pattern, that is</p>",
        "id": 126370155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966592
    },
    {
        "content": "<p>until then it looks completely opaque</p>",
        "id": 126370157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525966597
    },
    {
        "content": "<p>I guess the only unknown for translation here would be when to use DD's collection::iterate rather than operators on other parts of the computation ? is that because there's one \"rel1(...) :- relB(...).\" (eg in <code>subset</code>and <code>requires</code>) which is not present in <code>borrow_live_at</code>for example ?</p>",
        "id": 126371936,
        "sender_full_name": "lqd",
        "timestamp": 1525968889
    },
    {
        "content": "<p>(I think it could influence how @qmx would implement <code>viable_at</code>)</p>",
        "id": 126372576,
        "sender_full_name": "lqd",
        "timestamp": 1525969752
    },
    {
        "content": "<p>or maybe more likely because those are inputs</p>",
        "id": 126376844,
        "sender_full_name": "lqd",
        "timestamp": 1525975827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> I'd like to measure how often the conditions <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\">described in #20</a> happen</p>",
        "id": 126388798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525993164
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/21\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/21\">https://github.com/rust-lang-nursery/borrow-check/pull/21</a></p>",
        "id": 126389131,
        "sender_full_name": "qmx",
        "timestamp": 1525993732
    },
    {
        "content": "<p>ugh, I think travis got the new nightly :P</p>",
        "id": 126389312,
        "sender_full_name": "qmx",
        "timestamp": 1525994053
    },
    {
        "content": "<p>hmm so it really is broken? sigh, I guess I have to file an issue. I was sort of half-hoping it was just my system.</p>",
        "id": 126389404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994208
    },
    {
        "content": "<p>though not really since then I would have to figure out why my system is different :P</p>",
        "id": 126389406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994217
    },
    {
        "content": "<p>I think I added a <code>rust-toolchain</code> file with an older nightly locally</p>",
        "id": 126389416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994232
    },
    {
        "content": "<p>do we have all the feature we're using in beta?</p>",
        "id": 126389495,
        "sender_full_name": "qmx",
        "timestamp": 1525994381
    },
    {
        "content": "<p>ooh, ooh, we can use <a href=\"https://github.com/rust-lang-nursery/cargo-bisect-rustc\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/cargo-bisect-rustc\">https://github.com/rust-lang-nursery/cargo-bisect-rustc</a></p>",
        "id": 126389550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> no way man, we're bleeding edge</p>",
        "id": 126389554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994420
    },
    {
        "content": "<p><span class=\"emoji emoji-1f52a\" title=\"kitchen knife\">:kitchen_knife:</span></p>",
        "id": 126389560,
        "sender_full_name": "qmx",
        "timestamp": 1525994438
    },
    {
        "content": "<p>ok alex informed me that we must now have <code>edition = 2018</code> for that to work in our cargo.tomt</p>",
        "id": 126389749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994817
    },
    {
        "content": "<p>although..</p>",
        "id": 126389759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994843
    },
    {
        "content": "<p>well, there's still some bugs in the newer nightlies -- specifically doc tests</p>",
        "id": 126389820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525994987
    },
    {
        "content": "<p>sooo, for <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\">#20</a> you want only the analysis/statistics first?</p>",
        "id": 126390860,
        "sender_full_name": "qmx",
        "timestamp": 1525996691
    },
    {
        "content": "<p>seems like a good starting point</p>",
        "id": 126390994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525996993
    },
    {
        "content": "<p>I'd be curious to know how many such opportunities there are</p>",
        "id": 126391001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525997019
    },
    {
        "content": "<p>seems like a precursor anyway if we are going to try to take advantage of them</p>",
        "id": 126391007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1525997032
    }
]