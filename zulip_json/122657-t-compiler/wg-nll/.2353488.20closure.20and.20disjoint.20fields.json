[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> regarding <a href=\"https://github.com/rust-lang/rust/issues/53488\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53488\">#53488</a>, I think maybe the first thing to do is to spend a bit of time looking at how \"upvar inference\" and closure desugaring works now. Actually, I wonder if you'd be interested in trying to write up some material in the rustc-guide about it? What I can imagine is: you + me do a video call to talk it over (which we can record and post) and you try to distill some of that into a chapter, which we can then edit together. Thoughts? (Feel free to say no if you don't feel comfortable writing -- the video call may be a good idea regardless)</p>",
        "id": 136721466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540834031
    },
    {
        "content": "<p>Absolutely, I will look up the code and pen down my understanding in the rustc guide. <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 136721742,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834287
    },
    {
        "content": "<p>Do you want to try and schedule a video call, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> ?</p>",
        "id": 136721809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540834331
    },
    {
        "content": "<p>Sure, we can definitely do a video call and get started with it.</p>",
        "id": 136721815,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834338
    },
    {
        "content": "<p>Sure, how do I schedule a call?</p>",
        "id": 136721823,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834349
    },
    {
        "content": "<p>Google calendar or something ?</p>",
        "id": 136721829,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834360
    },
    {
        "content": "<p>I'm not sure what time would work for me this week. I guess the first question is what time zone you are in :)</p>",
        "id": 136721830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540834362
    },
    {
        "content": "<p>Seattle so PST <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 136721842,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834380
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 136721847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540834383
    },
    {
        "content": "<p>I know you are Boston</p>",
        "id": 136721853,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834391
    },
    {
        "content": "<p>let me check my calendar and send you a privmsg I guess</p>",
        "id": 136721857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540834397
    },
    {
        "content": "<p>sure</p>",
        "id": 136721864,
        "sender_full_name": "blitzerr",
        "timestamp": 1540834405
    },
    {
        "content": "<p>in case you are curious, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> and I did a \"pair programming\" session discussing how upvar analysis works for closures; you can <a href=\"https://www.youtube.com/watch?v=fMopdkn5-Xw&amp;index=6&amp;t=1988s&amp;list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fMopdkn5-Xw&amp;index=6&amp;t=1988s&amp;list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\">watch it here</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"fMopdkn5-Xw\" href=\"https://www.youtube.com/watch?v=fMopdkn5-Xw&amp;index=6&amp;t=1988s&amp;list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fMopdkn5-Xw&amp;index=6&amp;t=1988s&amp;list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\"><img src=\"https://i.ytimg.com/vi/fMopdkn5-Xw/default.jpg\"></a></div>",
        "id": 136793677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540921602
    },
    {
        "content": "<p>I want there to be an \"upvar\" joke equivalent to \"updog\"</p>",
        "id": 136797786,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540925135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI posted a PR for rustc guide (just the various modes of closure and their MIR de-sugaring) here<br>\n<a href=\"https://github.com/rust-lang-nursery/rustc-guide/pull/225\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-guide/pull/225\">https://github.com/rust-lang-nursery/rustc-guide/pull/225</a></p>\n<p>The issue is all the de-sugaring looks the same. Everywhere the variable is moved. Should I be looking at a different file ?</p>",
        "id": 137053097,
        "sender_full_name": "blitzerr",
        "timestamp": 1541172612
    },
    {
        "content": "<p>I just put up the PR so that I can start a discussion. I will make it more sane as we go along. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 137053491,
        "sender_full_name": "blitzerr",
        "timestamp": 1541172704
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mf\">1.</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hi {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">9</span>: <span class=\"mi\">11</span>:<span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"mf\">2.</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hi {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">9</span>: <span class=\"mi\">11</span>:<span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// bb0[6]: scope 1 at test.rs:9:9: 11:6</span>\n</pre></div>\n\n\n<p>In both the cases, I see that the MIR is exactly the same and the variable is being moved.  I was thinking that in first case it should be an immutable borrow (or whatever the MIR version of it), in the second case it should be a mutable borrow and then in the 3rd case (not shown here but the case of where X is a Vec and the closure calls <code>drop(x)</code>, there it should be a move).</p>",
        "id": 137081878,
        "sender_full_name": "blitzerr",
        "timestamp": 1541191983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  is my understanding incorrect ?</p>",
        "id": 137081896,
        "sender_full_name": "blitzerr",
        "timestamp": 1541192000
    },
    {
        "content": "<p><code>\n$ rust-lldb build/x86_64-apple-darwin/stage1/bin/rustc\n(lldb) command script import \"/Users/blitz/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py\"\n(lldb) type summary add --no-value --python-function lldb_rust_formatters.print_val -x \".*\" --category Rust\n(lldb) type category enable Rust\n(lldb) target create \"build/x86_64-apple-darwin/stage1/bin/rustc\"\nCurrent executable set to 'build/x86_64-apple-darwin/stage1/bin/rustc' (x86_64).\n(lldb) b upvar.rs:107\nBreakpoint 1: where = librustc_typeck-343623f2c64cba7c.dylib</code>rustc_typeck:<span class=\"emoji emoji-2705\" title=\"check\">:check:</span>:upvar::_$LT$impl$u20$rustc_typeck..check..FnCtxt$LT$$u27$a$C$$u20$$u27$gcx$C$$u20$$u27$tcx$GT$$GT$::analyze_closure::h65ebe12563fafb96 + 225 at upvar.rs:107, address = 0x00000000000f65e1<br>\n(lldb) r ../../progs/mut/mut.rs<br>\nProcess 14184 launched: '/Users/blitz/rustc-dev/rust/build/x86_64-apple-darwin/stage1/bin/rustc' (x86_64)<br>\nProcess 14184 stopped</p>\n<ul>\n<li>\n<p>thread <a href=\"https://github.com/rust-lang/rust/issues/2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2\">#2</a>, stop reason = signal SIGUSR1<br>\n    frame <a href=\"https://github.com/rust-lang/rust/issues/0\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/0\">#0</a>: 0x00007fff756cbdf8 libdyld.dylib<code>dyld_stub_binder + 244\nlibdyld.dylib</code>dyld_stub_binder:<br>\n-&gt;  0x7fff756cbdf8 &lt;+244&gt;: addq   $0x8, %r8<br>\n    0x7fff756cbdfc &lt;+248&gt;: cmpq   %r8, %r9<br>\n    0x7fff756cbdff &lt;+251&gt;: ja     0x7fff756cbdf5            ; &lt;+241&gt;<br>\n    0x7fff756cbe01 &lt;+253&gt;: movl   0x32e12b25(%rip), %eax    ; features_lo32<br>\nTarget 0: (rustc) stopped.<br>\n(lldb) bt<br>\nerror: need to add support for DW_TAG_base_type '()' encoded with DW_ATE = 0x7, bit_size = 0</p>\n</li>\n<li>\n<p>thread <a href=\"https://github.com/rust-lang/rust/issues/2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2\">#2</a>, stop reason = signal SIGUSR1</p>\n<ul>\n<li>frame <a href=\"https://github.com/rust-lang/rust/issues/0\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/0\">#0</a>: 0x00007fff756cbdf8 libdyld.dylib<code>dyld_stub_binder + 244\n  frame #1: 0x00000001033bb008 librustc-1c7b4125116510e6.dylib\n  frame #2: 0x0000000103198aee librustc-1c7b4125116510e6.dylib</code>_$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h9df08c05f901b603 [inlined] std::panic::catch_unwind::hdd9eeedd8cb255a0 at panic.rs:392 [opt]<br>\n  frame <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>: 0x0000000103198a8d librustc-1c7b4125116510e6.dylib<code>_$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h9df08c05f901b603 [inlined] std::thread::Builder::spawn_unchecked::_$u7b$$u7b$closure$u7d$$u7d$::h7d053cb4ec467bbb at mod.rs:476 [opt]\n  frame #4: 0x0000000103198a59 librustc-1c7b4125116510e6.dylib</code>_$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h9df08c05f901b603(self=&amp;0x10cee45f0, args=&lt;unavailable&gt;) at boxed.rs:672 [opt]<br>\n  frame <a href=\"https://github.com/rust-lang/rust/issues/5\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/5\">#5</a>: 0x00000001052a7d28 libstd-16938f24f5f8fba8.dylib<code>std::sys_common::thread::start_thread::h4664f89b81fe0cd0 [inlined] _$LT$alloc..boxed..Box$LT$$LP$dyn$u20$alloc..boxed..FnBox$LT$A$C$$u20$Output$u3d$R$GT$$u20$$u2b$$u20$$u27$a$RP$$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h4317014fdee55c87(self=&lt;unavailable&gt;) at boxed.rs:682 [opt]\n  frame #6: 0x00000001052a7d25 libstd-16938f24f5f8fba8.dylib</code>std::sys_common::thread::start_thread::h4664f89b81fe0cd0(main=&amp;0x10cee44f0) at thread.rs:24 [opt]<br>\n  frame <a href=\"https://github.com/rust-lang/rust/issues/7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/7\">#7</a>: 0x00000001052b7cd9 libstd-16938f24f5f8fba8.dylib<code>std::sys::unix::thread::Thread::new::thread_start::h178119c94097229d(main=&lt;unavailable&gt;) at thread.rs:90 [opt]\n  frame #8: 0x00007fff758d2339 libsystem_pthread.dylib</code>_pthread_body + 126<br>\n  frame <a href=\"https://github.com/rust-lang/rust/issues/9\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/9\">#9</a>: 0x00007fff758d52a7 libsystem_pthread.dylib<code>_pthread_start + 70\n  frame #10: 0x00007fff758d1445 libsystem_pthread.dylib</code>thread_start + 13<br>\n`</li>\n</ul>\n</li>\n</ul>",
        "id": 146917633,
        "sender_full_name": "blitzerr",
        "timestamp": 1541565381
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 147390046,
        "sender_full_name": "blitzerr",
        "timestamp": 1541788312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 147540594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542045095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Welcome back. I read your blog post. Looks like you had a very productive time</p>",
        "id": 147542685,
        "sender_full_name": "blitzerr",
        "timestamp": 1542047215
    },
    {
        "content": "<p>I posted a PR but that's just the first-cut, RustFmt on <a href=\"http://upvar.rs\" target=\"_blank\" title=\"http://upvar.rs\">upvar.rs</a>, before I modify the code as you prefer.</p>",
        "id": 147542727,
        "sender_full_name": "blitzerr",
        "timestamp": 1542047257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">UpvarId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">var_id</span>: <span class=\"nc\">hir</span>::<span class=\"n\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">closure_expr_id</span>: <span class=\"nc\">LocalDefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I was thinking that instead of wrapping the UpvarId inside another struct, I was thinking how about we wrap <code>pub var_id: hir::HirId</code> inside another called VarPath or something?</p>",
        "id": 147543248,
        "sender_full_name": "blitzerr",
        "timestamp": 1542047746
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nAny inputs ?</p>",
        "id": 147628630,
        "sender_full_name": "blitzerr",
        "timestamp": 1542146362
    },
    {
        "content": "<p>well, I R+'d your Pr, I think?</p>",
        "id": 147628705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146408
    },
    {
        "content": "<p>but on to the next question</p>",
        "id": 147628717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146418
    },
    {
        "content": "<p>that sounds reasonable</p>",
        "id": 147628724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146429
    },
    {
        "content": "<blockquote>\n<p>how about we wrap pub var_id: hir::HirId inside another called VarPath or something</p>\n</blockquote>\n<p>that in particular</p>",
        "id": 147628740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146458
    },
    {
        "content": "<p>Another pull: <a href=\"https://github.com/rust-lang/rust/pull/55953\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55953\">https://github.com/rust-lang/rust/pull/55953</a></p>",
        "id": 147721720,
        "sender_full_name": "blitzerr",
        "timestamp": 1542259317
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . This is the topic thread.</p>",
        "id": 150846493,
        "sender_full_name": "blitzerr",
        "timestamp": 1543930497
    },
    {
        "content": "<p>ok so picking this up again <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> :)</p>",
        "id": 151007734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104669
    },
    {
        "content": "<p>I don't recall, you did land <em>some</em> kind of refactoring PR, right?</p>",
        "id": 151007788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104685
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 151007817,
        "sender_full_name": "blitzerr",
        "timestamp": 1544104707
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55953/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55953/files\">https://github.com/rust-lang/rust/pull/55953/files</a></p>",
        "id": 151007972,
        "sender_full_name": "blitzerr",
        "timestamp": 1544104793
    },
    {
        "content": "<p>So basically separating out hir_id into a struct of it's own</p>",
        "id": 151008044,
        "sender_full_name": "blitzerr",
        "timestamp": 1544104824
    },
    {
        "content": "<p>right ok</p>",
        "id": 151008084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104864
    },
    {
        "content": "<p>so</p>",
        "id": 151008090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104866
    },
    {
        "content": "<p>here is a question</p>",
        "id": 151008118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104878
    },
    {
        "content": "<p>we should try to identify some cases that are particularly easy basically</p>",
        "id": 151008141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104894
    },
    {
        "content": "<p>so we can try to tackle those first</p>",
        "id": 151008143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104898
    },
    {
        "content": "<p>really <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> this job is not particularly hard</p>",
        "id": 151008212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104933
    },
    {
        "content": "<p>conceptually :P</p>",
        "id": 151008220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104939
    },
    {
        "content": "<p>(famous last words)</p>",
        "id": 151008227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104945
    },
    {
        "content": "<p>Right.<br>\nI remember you saying we start with tuples first</p>",
        "id": 151008228,
        "sender_full_name": "blitzerr",
        "timestamp": 1544104947
    },
    {
        "content": "<p>maybe a good place to start is trying to just <strong>identify the paths</strong> we would capture (but not actually capture them)</p>",
        "id": 151008241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104958
    },
    {
        "content": "<p>ah, I was smart</p>",
        "id": 151008242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104962
    },
    {
        "content": "<p>but I think trying to identify the paths is good</p>",
        "id": 151008265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104983
    },
    {
        "content": "<p>also</p>",
        "id": 151008272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104985
    },
    {
        "content": "<p>one technique we sometimes use for this is to add some kind of special, perm-unstable attribute like <code>#[rustc_dump_closure_paths]</code></p>",
        "id": 151008285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105002
    },
    {
        "content": "<p>which then causes the tests to emit special errors at each closure containing interesting information</p>",
        "id": 151008302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105019
    },
    {
        "content": "<p>I was thinking we could add such an attribute and then make some tests like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[rustc_dump_closure_paths]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this would presently emit an error like \"capturing <code>x</code>\" on the closure</p>",
        "id": 151008369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105067
    },
    {
        "content": "<p>then the job is to write the code that will look at the HIR and try to decide that <code>x.0</code> would be a better path to capture :P</p>",
        "id": 151008386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105090
    },
    {
        "content": "<p>(sorry, just thinking out loud)</p>",
        "id": 151008415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105099
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 151008429,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105117
    },
    {
        "content": "<p>there is another place that might be a better starting point</p>",
        "id": 151008433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105124
    },
    {
        "content": "<p>I will try that out</p>",
        "id": 151008436,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105130
    },
    {
        "content": "<p>right now there is a fair amount of code that is using <code>tcx.with_freevars</code></p>",
        "id": 151008448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105149
    },
    {
        "content": "<p>this function is problematic</p>",
        "id": 151008451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105152
    },
    {
        "content": "<p>Okay.  So we need to change that as well</p>",
        "id": 151008565,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105270
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyCtxt.html#method.with_freevars\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyCtxt.html#method.with_freevars\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyCtxt.html#method.with_freevars</a></p>",
        "id": 151008570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105279
    },
    {
        "content": "<p>the reason it's problematic is that</p>",
        "id": 151008571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105282
    },
    {
        "content": "<p>(sorry, slicing up a few conversations)</p>",
        "id": 151008811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105474
    },
    {
        "content": "<p>well basically that it returns a slice of variables</p>",
        "id": 151008815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105480
    },
    {
        "content": "<p>You mean because it takes the NodeId ?</p>",
        "id": 151008817,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105482
    },
    {
        "content": "<p>that is also ungreat ;)</p>",
        "id": 151008824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105490
    },
    {
        "content": "<p>but basically all code that uses it is implicitly assuming that closures capture entire variables</p>",
        "id": 151008842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105507
    },
    {
        "content": "<p>and not paths</p>",
        "id": 151008843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105509
    },
    {
        "content": "<p>it's not <em>that</em> much code that uses it:</p>\n<div class=\"codehilite\"><pre><span></span>/home/nmatsakis/.cargo/bin/rg --no-heading --color never &#39;\\.with_freevars\\(&#39;\nsrc/librustc_passes/rvalue_promotion.rs:474:            if v.tcx.with_freevars(e.id, |fv| !fv.is_empty()) {\nsrc/librustc_typeck/collect.rs:1102:        tcx.with_freevars(node_id, |fv| {\nsrc/librustc_mir/build/mod.rs:609:    let upvar_decls: Vec&lt;_&gt; = tcx.with_freevars(fn_id, |freevars| {\nsrc/librustc_mir/borrow_check/error_reporting.rs:1651:                        .with_freevars(node_id, |fv| fv[field.index()]);\nsrc/librustc_mir/borrow_check/error_reporting.rs:2423:            let var_span = self.infcx.tcx.with_freevars(\nsrc/librustc/mir/mod.rs:2371:                            tcx.with_freevars(node_id, |freevars| {\nsrc/librustc/mir/mod.rs:2389:                            tcx.with_freevars(node_id, |freevars| {\nsrc/librustc/util/ppaux.rs:1221:                        tcx.with_freevars(node_id, |freevars| {\nsrc/librustc/util/ppaux.rs:1261:                        tcx.with_freevars(node_id, |freevars| {\nsrc/librustc/middle/liveness.rs:475:        ir.tcx.with_freevars(expr.id, |freevars| {\nsrc/librustc/middle/expr_use_visitor.rs:936:        self.tcx().with_freevars(closure_expr.id, |freevars| {\nsrc/librustc_typeck/check/upvar.rs:134:        self.tcx.with_freevars(closure_node_id, |freevars| {\nsrc/librustc_typeck/check/upvar.rs:244:        tcx.with_freevars(closure_id, |freevars| {\nsrc/librustc_typeck/check/coercion.rs:701:            ty::FnPtr(_) if self.tcx.with_freevars(node_id_a, |v| v.is_empty()) =&gt; {\nsrc/librustc_mir/hair/cx/expr.rs:530:            let upvars = cx.tcx.with_freevars(expr.id, |freevars| {\n</pre></div>",
        "id": 151008906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105534
    },
    {
        "content": "<p>but e.g. all the code in <code>librustc_mir</code> needs to be generalized, and I'm sure most of the rest</p>",
        "id": 151008932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105557
    },
    {
        "content": "<p>it would be kind of good to look at those uses and try to write out what they are doing I guess</p>",
        "id": 151008941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I wonder if the thing for us to do is to schedule another hour-long slot next week or something</p>",
        "id": 151008949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105583
    },
    {
        "content": "<p>I'm probably not going to have enough time at this second</p>",
        "id": 151008961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105603
    },
    {
        "content": "<p>but clearly we need to carve out a bit of time</p>",
        "id": 151008963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105608
    },
    {
        "content": "<p>Sure. <br>\nWe can have another call. Meanwhile I will try to figure out what the other callers use it for</p>",
        "id": 151009082,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105710
    },
    {
        "content": "<p>Thanks for looking into this on a busy all <span class=\"emoji emoji-270b\" title=\"hand\">:hand:</span> week <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 151009103,
        "sender_full_name": "blitzerr",
        "timestamp": 1544105749
    },
    {
        "content": "<p>Is this all that uses the entire upvar node  or expects it? We have to get an exhaustive list. I wonder how.</p>",
        "id": 151009792,
        "sender_full_name": "blitzerr",
        "timestamp": 1544106301
    },
    {
        "content": "<p>I think this is a pretty exhaustive list</p>",
        "id": 151010414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106822
    },
    {
        "content": "<p>well</p>",
        "id": 151010417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106828
    },
    {
        "content": "<p>the other place you might check would be things that invoke <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ClosureSubsts.html#method.upvar_tys\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ClosureSubsts.html#method.upvar_tys\"><code>upvar_tys</code></a>. I suspect that most of them are also calling freevars in the same vicinity, or else don't really need to be changed, but still.</p>",
        "id": 151010489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106874
    },
    {
        "content": "<p>@nikomatsakis Let me know when you will have time for a call/ discussion</p>",
        "id": 151486282,
        "sender_full_name": "blitzerr",
        "timestamp": 1544567681
    },
    {
        "content": "<p>@nikomatsakis <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 151564682,
        "sender_full_name": "blitzerr",
        "timestamp": 1544649704
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> so -- I have a few minutes before my next meeting but not a ton</p>",
        "id": 151565808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544650819
    },
    {
        "content": "<p>I definitely still think some refactoring around this area is good</p>",
        "id": 151565835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544650836
    },
    {
        "content": "<p>it seems like we're not quite at the point of knowing what to do</p>",
        "id": 151565864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544650870
    },
    {
        "content": "<p>let me see if in the next 10 minutes or so I can sketch out a plan</p>",
        "id": 151565869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544650877
    },
    {
        "content": "<p>digging around I am starting to get some idea of the range of problems we'll have :P</p>",
        "id": 151566239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651305
    },
    {
        "content": "<p>but I guess a starting point would be to identify some of the places we use <code>freevars</code> and perhaps convert them to use data withdrawn from <code>TypeckTables</code> instead</p>",
        "id": 151566251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651321
    },
    {
        "content": "<p>let's start with exactly one example</p>",
        "id": 151566267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651343
    },
    {
        "content": "<p>this code <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L667-L668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L667-L668\">during MIR construction</a> iterates over the freevariables using <code>with_freevars</code></p>",
        "id": 151566287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651377
    },
    {
        "content": "<p>for each free variable, it looks up the borrow mode using the <code>upvar_capture</code> method <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L670-L676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L670-L676\">here</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">var_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fv</span><span class=\"p\">.</span><span class=\"n\">var_id</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">var_hir_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">node_to_hir_id</span><span class=\"p\">(</span><span class=\"n\">var_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure_expr_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id</span><span class=\"p\">(</span><span class=\"n\">fn_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">capture</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"p\">().</span><span class=\"n\">upvar_capture</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">UpvarId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">var_path</span>: <span class=\"nc\">ty</span>::<span class=\"n\">UpvarPath</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">hir_id</span>: <span class=\"nc\">var_hir_id</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">closure_expr_id</span>: <span class=\"nc\">LocalDefId</span>::<span class=\"n\">from_def_id</span><span class=\"p\">(</span><span class=\"n\">closure_expr_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151566357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651414
    },
    {
        "content": "<p>it'd be nice if we didn't use <code>with_freevars</code> but instead were able to get the list of free var capture into from <code>hir.tables()</code></p>",
        "id": 151566370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651431
    },
    {
        "content": "<p>this might require however adding another field to <code>TypeckTables</code>, something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">upvar_list</span>: <span class=\"nc\">ty</span>::<span class=\"n\">UpvarListMap</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">UpvarListMap</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">UpvarId</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151566401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651497
    },
    {
        "content": "<p>so maybe a good first step is just adding this field to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TypeckTables.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TypeckTables.html\"><code>TypeckTables</code></a>, and populating it. I imagine we would populate it right around <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L134\">this code</a>. Basically in <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L135-L162\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L135-L162\">this loop</a> we could be pushing <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L136-L142\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L136-L142\">the <code>UpvarId</code> values we create</a> into a vector, so that we can store that vector into the map we added to the tables, <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L157-L159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_typeck/check/upvar.rs#L157-L159\">sort of like this</a> -- but after the loop, once the vector is complete.</p>",
        "id": 151566562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651653
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>, that's all I have time for for now -- what we should probably do is open an issue and I can move these notes to there. The issue would be something like \"refactor uses of <code>freevar</code>\" I guess. I can try to file one later.</p>",
        "id": 151566694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544651774
    },
    {
        "content": "<p>@nikomatsakis  Thanks a lot. I will create an issue and add your notes and then you can add more to that. Thanks a lot for your time</p>",
        "id": 151566817,
        "sender_full_name": "blitzerr",
        "timestamp": 1544651920
    },
    {
        "content": "<p>I hope <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> some of that made sense =)</p>",
        "id": 151568388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544653616
    },
    {
        "content": "<p>@nikomatsakis what you said makes sense in terms of the steps but I don't get why it's bad for the current code to loop over with_freevars ? The only thing I can think of is having it in hir.tables() is cleaner ?</p>",
        "id": 151569043,
        "sender_full_name": "blitzerr",
        "timestamp": 1544654419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\n<a href=\"https://github.com/rust-lang/rust/issues/53553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53553\">https://github.com/rust-lang/rust/issues/53553</a><br>\nIs this similar to what you were thinking ? Can we use this issue or we would like to create our own ?</p>",
        "id": 151584375,
        "sender_full_name": "blitzerr",
        "timestamp": 1544674809
    },
    {
        "content": "<blockquote>\n<p>@nikomatsakis what you said makes sense in terms of the steps but I don't get why it's bad for the current code to loop over with_freevars ? The only thing I can think of is having it in hir.tables() is cleaner ?</p>\n</blockquote>\n<p>well, in the future, we expect closures to capture not only free variables, but entire paths. Most code using <code>freevars</code> will not be compatible with that assumption.</p>",
        "id": 151614959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544714742
    },
    {
        "content": "<blockquote>\n<p>Is this similar to what you were thinking ? Can we use this issue or we would like to create our own ?</p>\n</blockquote>\n<p>Similar, yes, though different. Seems like a good place to discuss, at leaset.</p>",
        "id": 151615036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544714784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, I will add your words to the issue <a href=\"https://github.com/rust-lang/rust/issues/53553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53553\">#53553</a>.</p>",
        "id": 151621438,
        "sender_full_name": "blitzerr",
        "timestamp": 1544719755
    },
    {
        "content": "<p>This is actually a sort of complication we have to work through — the current setup relies on knowing the types of all captured variables in the closure before type-check runs. I have to go revisit the RFC and see what we discussed there in this regard.</p>",
        "id": 151621674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544719916
    },
    {
        "content": "<p>You mean in working through <a href=\"https://github.com/rust-lang/rust/issues/53488\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53488\">#53488</a> we will also solve <a href=\"https://github.com/rust-lang/rust/issues/53553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53553\">#53553</a> ?</p>",
        "id": 151621891,
        "sender_full_name": "blitzerr",
        "timestamp": 1544720133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Created a new issue : <a href=\"https://github.com/rust-lang/rust/issues/56905\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56905\">https://github.com/rust-lang/rust/issues/56905</a>.</p>",
        "id": 151904682,
        "sender_full_name": "blitzerr",
        "timestamp": 1545008455
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56906/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/files\">https://github.com/rust-lang/rust/pull/56906/files</a></p>",
        "id": 151904984,
        "sender_full_name": "blitzerr",
        "timestamp": 1545009003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\n<span class=\"emoji emoji-261d\" title=\"wait one second\">:wait_one_second:</span>️</p>",
        "id": 152044036,
        "sender_full_name": "blitzerr",
        "timestamp": 1545067256
    },
    {
        "content": "<p>Saw it, great!</p>",
        "id": 152044194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067351
    },
    {
        "content": "<p>I'll try to add some more notes, not sure if I can get to that today, but I've added it to my list</p>",
        "id": 152044206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067361
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for reviewing.  I have a question related to your comment :D</p>",
        "id": 152083533,
        "sender_full_name": "blitzerr",
        "timestamp": 1545104922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://github.com/rust-lang/rust/pull/56906#discussion_r242579794\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906#discussion_r242579794\">responded</a></p>",
        "id": 152115086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545146587
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152141756,
        "sender_full_name": "blitzerr",
        "timestamp": 1545170361
    },
    {
        "content": "<p>I will post an update tonight.</p>",
        "id": 152141761,
        "sender_full_name": "blitzerr",
        "timestamp": 1545170371
    },
    {
        "content": "<p>great, I will try to post some further comments about next steps</p>",
        "id": 152141862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545170427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  When you have a chance if you can look at <a href=\"https://github.com/rust-lang/rustc-guide/pull/225\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/pull/225\">https://github.com/rust-lang/rustc-guide/pull/225</a>, it would be great or else we can push it after we wrap up the <a href=\"https://github.com/rust-lang/rust/issues/53488\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53488\">#53488</a> as well. Whatever works.</p>",
        "id": 152141902,
        "sender_full_name": "blitzerr",
        "timestamp": 1545170478
    },
    {
        "content": "<blockquote>\n<p>great, I will try to post some further comments about next steps</p>\n</blockquote>\n<p>That will be awesome.</p>",
        "id": 152141925,
        "sender_full_name": "blitzerr",
        "timestamp": 1545170501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  If we are thinking the same thing, the next step will be to replace the calls to with_freevars with the map we introduced ?</p>",
        "id": 152142821,
        "sender_full_name": "blitzerr",
        "timestamp": 1545171353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> right -- but not all of them. I think I highlighted one good candidate to start.</p>",
        "id": 152143393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171954
    },
    {
        "content": "<p>there are some bigger questions we need to think through though that I've not had time to ponder</p>",
        "id": 152143439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Maybe if you tell me what the big questions are, I can think of something and then you can tell me I am wrong <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 152143502,
        "sender_full_name": "blitzerr",
        "timestamp": 1545172043
    },
    {
        "content": "<p>specifically, the problem has to do with the way we handle \"closure substs\"</p>",
        "id": 152143616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172163
    },
    {
        "content": "<p>the current scheme is explained <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ClosureSubsts.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ClosureSubsts.html\">here</a>, in the comments</p>",
        "id": 152143630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172181
    },
    {
        "content": "<p>the problem is that this scheme relies on knowing the set of captured variables</p>",
        "id": 152143643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172200
    },
    {
        "content": "<p>and it creates one generic parameter for each of them</p>",
        "id": 152143686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172205
    },
    {
        "content": "<p>but if we are going to be capturing <em>paths</em>, and we don't know those paths until type check...</p>",
        "id": 152143706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172218
    },
    {
        "content": "<p>we might need to adjust that scheme</p>",
        "id": 152143737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172270
    },
    {
        "content": "<p>since I think we have to know the number of parameters etc before typeck completes</p>",
        "id": 152143744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172284
    },
    {
        "content": "<p>but maybe not</p>",
        "id": 152143749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172291
    },
    {
        "content": "<p>or maybe we can figure out the set of captured paths <em>syntactically</em> without needing to know typeck results; but I doubt it</p>",
        "id": 152143759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>or maybe we can figure out the set of captured paths <em>syntactically</em> without needing to know typeck results; but I doubt it</p>\n</blockquote>\n<p>Sounds like doing the same thing twice. <br>\nBut its good to run into problems. I will learn more.  <span class=\"emoji emoji-1f980\" title=\"crab\">:crab:</span></p>",
        "id": 152147669,
        "sender_full_name": "blitzerr",
        "timestamp": 1545176801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\n<a href=\"https://github.com/rust-lang/rust/pull/56906/commits/d7519544694c1866ba4bf32cd307ed6f670e1267\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/commits/d7519544694c1866ba4bf32cd307ed6f670e1267\">https://github.com/rust-lang/rust/pull/56906/commits/d7519544694c1866ba4bf32cd307ed6f670e1267</a></p>",
        "id": 152159353,
        "sender_full_name": "blitzerr",
        "timestamp": 1545195478
    },
    {
        "content": "<p>@nikomatsakis Maybe I made a mistake <a href=\"https://github.com/rust-lang/rust/pull/56906/files#diff-193820a23727493def60049c0b6af47eR172\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/files#diff-193820a23727493def60049c0b6af47eR172\">here</a>. I should have used <code>closure_node_id</code> instead of <code>closure_def_id</code> as the key to the <code>uppvar_list</code>. <br>\nI say that because, there is a step to get to closure_def_id from closure_hir_id<br>\n<code>let (closure_def_id, substs) = match self.node_ty(closure_hir_id).sty {</code></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L667-L668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/mod.rs#L667-L668\">This</a> provides ast::NodeId and therefore using closure_node_id as the key to upvar_list we can get the list of upvar directly or else we have to use <br>\n<code>tcx.hir().local_def_id(fn_id)</code> to get <strong>closure_def_id</strong> and then use that to arrive at the list of upvars. Do you agree ?</p>",
        "id": 152307163,
        "sender_full_name": "blitzerr",
        "timestamp": 1545365331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nThis is my first attempt at using the new data structure we created in the mir creation of a function. I have a question for you, to get unblocked. My question is in the PR as a <a href=\"https://github.com/rust-lang/rust/pull/56906/commits/239c9ef716574dd0deba2ac38e24dbac8f9035a5#diff-2daa9fd281d82f3fc811f6058691747bR658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/commits/239c9ef716574dd0deba2ac38e24dbac8f9035a5#diff-2daa9fd281d82f3fc811f6058691747bR658\">comment</a></p>",
        "id": 152406090,
        "sender_full_name": "blitzerr",
        "timestamp": 1545520464
    },
    {
        "content": "<p>Also, I think I messed up by commit/git somehow and now I see this being posted as part of the last PR and not as a new PR as I would have hoped. Can someone please educate me on how to solve <a href=\"https://github.com/rust-lang/rust/pull/56906\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906\">this</a> ?</p>",
        "id": 152406155,
        "sender_full_name": "blitzerr",
        "timestamp": 1545520575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> you should definitely <strong>not</strong> use the closure node-id</p>",
        "id": 152564281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847846
    },
    {
        "content": "<p>node-ids are kind of deprecated</p>",
        "id": 152564282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847852
    },
    {
        "content": "<p>I'll take a look at your comment though</p>",
        "id": 152564289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nThanks a lot.</p>",
        "id": 152564872,
        "sender_full_name": "blitzerr",
        "timestamp": 1545848535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> is <a href=\"https://github.com/rust-lang/rust/pull/56906/files#diff-2daa9fd281d82f3fc811f6058691747bR658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/files#diff-2daa9fd281d82f3fc811f6058691747bR658\">this</a> the comment you were referring to?</p>",
        "id": 152564884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848576
    },
    {
        "content": "<p>Yup that's it <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152564981,
        "sender_full_name": "blitzerr",
        "timestamp": 1545848692
    },
    {
        "content": "<p>ok gimme a sec but I am confused -- which <code>NodeId</code> are you referring to, in that code, that is causing you problems?</p>",
        "id": 152565006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848755
    },
    {
        "content": "<p>is it <code>fn_id</code>?</p>",
        "id": 152565050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848778
    },
    {
        "content": "<p>oh, I guess you mean this part:</p>\n<div class=\"codehilite\"><pre><span></span>var_id is needed because further down, in this\n             });\n         // closure, it is used to find the Node::Binding to update the UpvarDecl, which will be\n             let by_ref = match capture {\n         // eventually returned by the closure. So the other way would be, if we can get the\n                 ty::UpvarCapture::ByValue =&gt; false,\n         // Node::Binding, given an HirId, we can also solve this.\n</pre></div>",
        "id": 152565152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848920
    },
    {
        "content": "<p>Right, that's where I am stuck <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152565855,
        "sender_full_name": "blitzerr",
        "timestamp": 1545849733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  That is one issue and the other one is what should upvar_list's key be ?<br>\nWhereever we use with_freevars, I see the code snippets use ast::NodeId and therefore I was suggesting using NodeId as the key but if it is deprecated,  then maybe we should use BodyId or DefId I think. The last PR used DefId as the key, do you think that's better that the BodyId ?</p>",
        "id": 152572063,
        "sender_full_name": "blitzerr",
        "timestamp": 1545859934
    },
    {
        "content": "<p>This brings us the second issue, no matter what we end up with, we will need NodeId to work with as that is what the <code>hir().find()</code> expects <a href=\"https://github.com/rust-lang/rust/pull/56906/commits/239c9ef716574dd0deba2ac38e24dbac8f9035a5#diff-2daa9fd281d82f3fc811f6058691747bL676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/commits/239c9ef716574dd0deba2ac38e24dbac8f9035a5#diff-2daa9fd281d82f3fc811f6058691747bL676\">here</a><br>\n<code>if let Some(Node::Binding(pat)) = tcx.hir().find(var_id)</code></p>",
        "id": 152572133,
        "sender_full_name": "blitzerr",
        "timestamp": 1545860110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> ok I'll leave some tips today, sorry, got distracted yesterday</p>",
        "id": 152599786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545914581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://github.com/rust-lang/rust/pull/56906#pullrequestreview-188094562\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906#pullrequestreview-188094562\">see this comment</a> -- tl;dr you can freely interconvert between node-id and hir-id</p>",
        "id": 152602583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545918873
    },
    {
        "content": "<p>I was at first going to propose a more extensive refactoring, but it seems fine for now</p>",
        "id": 152602587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545918884
    },
    {
        "content": "<p>Ohh man! I missed that utility function ! Embarrassing</p>",
        "id": 152607457,
        "sender_full_name": "blitzerr",
        "timestamp": 1545925873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nRegarding the second question, what do you think we should use as the key in our upvar_list ?</p>",
        "id": 152607473,
        "sender_full_name": "blitzerr",
        "timestamp": 1545925916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I would prefer <code>DefId</code></p>",
        "id": 152607814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926386
    },
    {
        "content": "<p>I think we use <code>DefId</code> most places</p>",
        "id": 152607819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926390
    },
    {
        "content": "<p>also, a <code>BodyId</code> doesn't work across crates</p>",
        "id": 152607826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926399
    },
    {
        "content": "<p>Sounds good !</p>",
        "id": 152608089,
        "sender_full_name": "blitzerr",
        "timestamp": 1545926647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nWhat is the way you start another PR on your fork? <br>\nIf you see this PR got started on a previous PR that was already merged. How do I clean this up or just add on top of this one ?</p>",
        "id": 152608137,
        "sender_full_name": "blitzerr",
        "timestamp": 1545926736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> well if that PR was already merged, then just create a new branch</p>",
        "id": 152608219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926863
    },
    {
        "content": "<p>e.g., <code>git checkout -b my-new-branch</code></p>",
        "id": 152608223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926870
    },
    {
        "content": "<p>and push the new branch to your repository</p>",
        "id": 152608226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926874
    },
    {
        "content": "<p>then do a rebase atop <code>rust-lang/master</code></p>",
        "id": 152608230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926879
    },
    {
        "content": "<p>leaving just the new commits</p>",
        "id": 152608270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545926886
    },
    {
        "content": "<p>thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152612673,
        "sender_full_name": "blitzerr",
        "timestamp": 1545933377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI see there are ways to get a local defId from  NodeId but is there a way to get global DefId from the NodeId ?</p>",
        "id": 152657851,
        "sender_full_name": "blitzerr",
        "timestamp": 1546010142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> not all node-ids have a def-id, but yes you can use <code>opt_local_def_id</code></p>",
        "id": 152657910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010212
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/map/struct.Map.html#method.opt_local_def_id\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/map/struct.Map.html#method.opt_local_def_id\">docs</a></p>",
        "id": 152657915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010225
    },
    {
        "content": "<p>well, not much docs there :)</p>",
        "id": 152657917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010231
    },
    {
        "content": "<p>But the upvar_list is keyed on global DefId</p>",
        "id": 152657925,
        "sender_full_name": "blitzerr",
        "timestamp": 1546010258
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 152657977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010312
    },
    {
        "content": "<p>a <code>DefId</code> is a <code>DefId</code></p>",
        "id": 152657978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010316
    },
    {
        "content": "<p>ah, I guess it's the name \"local def-id\" that is confusing?</p>",
        "id": 152657986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010334
    },
    {
        "content": "<p>in this context, that just means: a <code>DefId</code> where the <code>crate</code> field is <code>LOCAL_CRATE</code></p>",
        "id": 152657992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010346
    },
    {
        "content": "<p>but once you have a <code>DefId</code>, it is canonical and can always be compared against other <code>DefId</code> values</p>",
        "id": 152658001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546010372
    },
    {
        "content": "<p>Ahh! Thanks for clarifying <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI was thinking there are two flavors one local to crate and one global. You got it, the name local_def_id was what lead me there <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 152660403,
        "sender_full_name": "blitzerr",
        "timestamp": 1546014030
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56906/commits/2dd69109e56fbbc366a592cd53d4763d2dc5d7a5#diff-2daa9fd281d82f3fc811f6058691747bR660\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/commits/2dd69109e56fbbc366a592cd53d4763d2dc5d7a5#diff-2daa9fd281d82f3fc811f6058691747bR660\">PR</a></p>",
        "id": 152715440,
        "sender_full_name": "blitzerr",
        "timestamp": 1546113315
    },
    {
        "content": "<p>This leads to ice because for some reason, the upvar_List when checked inside librustc_mir is empty.</p>",
        "id": 152715500,
        "sender_full_name": "blitzerr",
        "timestamp": 1546113434
    },
    {
        "content": "<p>You might have to modify <code>src/librustc_typeck/check/writeback.rs</code> to handle upvar lists as well.</p>",
        "id": 152715624,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546113651
    },
    {
        "content": "<p>The only parts of <code>TypeckTables</code> that get persisted are the parts stored there.</p>",
        "id": 152715694,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546113823
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <br>\nI didn't know about that.</p>",
        "id": 152715757,
        "sender_full_name": "blitzerr",
        "timestamp": 1546113957
    },
    {
        "content": "<p>Is that a specific function I need to add this new list to ?</p>",
        "id": 152715811,
        "sender_full_name": "blitzerr",
        "timestamp": 1546114026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <br>\ncan you give a brief description about how the writeback struct and friends works ?</p>",
        "id": 152715858,
        "sender_full_name": "blitzerr",
        "timestamp": 1546114112
    },
    {
        "content": "<p>OK, so <code>typeck_tables_of</code> takes the def id of an item that is local to the current crate, and has a body (a function, constant or static), type-infers/type-checks the body, and returns the <code>TypeckTables</code> for that item, which contains all of the inferred information.</p>",
        "id": 152715988,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546114365
    },
    {
        "content": "<p>Cool. Thank you so much.</p>",
        "id": 152716101,
        "sender_full_name": "blitzerr",
        "timestamp": 1546114588
    },
    {
        "content": "<p>During type inference, partially inferred types are represented using Type variables (ty::Infer). These don't appear in the final TypeckTables since all of the types should have been inferred once <code>typeck_tables_of</code> is done.</p>",
        "id": 152716155,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546114702
    },
    {
        "content": "<p>When type inference is running however, having to update the typeck tables every time a new type is inferred would be unreasonably slow, so instead all of the replacement happens at the end in <code>resolve_type_vars_in_body</code>, which creates a new <code>TypeTables</code> which doesn't contain any inference types.</p>",
        "id": 152716226,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546114866
    },
    {
        "content": "<p>As <code>UpvarListMap</code> doesn't contain any types, you should be able to copy it to the new table in resolve_type_vars_in_body. As an aside <code>UpvarListMap</code> doesn't appear to use it's lifetime parameter.</p>",
        "id": 152716273,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546115006
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  I didn't see the last few messages. Thanks a lot for the detailed explanation. Very helpful. <br>\nRegarding lifetime parameter, do you think I should remove it then ?</p>",
        "id": 154031144,
        "sender_full_name": "blitzerr",
        "timestamp": 1546146205
    },
    {
        "content": "<p>Yes, unless you're going to add a use of it later.</p>",
        "id": 154040290,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546166552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> is the PR updated now?</p>",
        "id": 154201150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463089
    },
    {
        "content": "<p>looks like no</p>",
        "id": 154201269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nNot with the changes to copy the tables inside <code>typeck_tables_of</code></p>",
        "id": 154201278,
        "sender_full_name": "blitzerr",
        "timestamp": 1546463186
    },
    {
        "content": "<p>ok, should be a small diff</p>",
        "id": 154201293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ya and I can check if that makes the panic go away.</p>",
        "id": 154201319,
        "sender_full_name": "blitzerr",
        "timestamp": 1546463239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Also, as an aside, we can add <code>eprintln!</code> in the rustc-guide as a way of debugging rustc. I found it very helpful</p>",
        "id": 154201499,
        "sender_full_name": "blitzerr",
        "timestamp": 1546463415
    },
    {
        "content": "<p>we...could...I never use it myself</p>",
        "id": 154201615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463549
    },
    {
        "content": "<p>I usually just add <code>debug!</code></p>",
        "id": 154201618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463554
    },
    {
        "content": "<p>in fact, I would not recommend <code>eprintln!</code></p>",
        "id": 154201636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463575
    },
    {
        "content": "<p>because it prints out when you are bootstrapping</p>",
        "id": 154201642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463582
    },
    {
        "content": "<p>I find adding <code>debug!</code> or <code>info!</code> is better (the latter can be useful to distinguish the things you've just added from other <code>debug!</code> calls already in the compiler)</p>",
        "id": 154201662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463610
    },
    {
        "content": "<p>but either way we should have some \"debugging tips\", I know we've talked about adding that before</p>",
        "id": 154201677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463620
    },
    {
        "content": "<p>(and in said section we could mention <code>eprintln!</code> as an easy way, though it has downsides)</p>",
        "id": 154201837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546463775
    },
    {
        "content": "<p>The debug statements are printed when you use the rustc to compile a new file <br>\n<code>RUST_LOG=rustc::traits rustc +local my-file.rs</code><br>\nLike here we are using the already built rustc to compile <a href=\"http://my-file.rs\" target=\"_blank\" title=\"http://my-file.rs\">my-file.rs</a> and generating the debug logs. In my case, the compiler would panic, while being built (./x.py build ...). In that case debug won't help right ?</p>",
        "id": 154201890,
        "sender_full_name": "blitzerr",
        "timestamp": 1546463844
    },
    {
        "content": "<p>ah, that is true, though you can use <code>RUST_LOG</code> when running <code>x.py</code></p>",
        "id": 154202566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464527
    },
    {
        "content": "<p>in general tips for dealing with crashes during bootstrapping is a good topic</p>",
        "id": 154202578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464542
    },
    {
        "content": "<p>but you are definitely correct that <code>eprintln!</code> may be particularly useful in that scenario</p>",
        "id": 154202744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  FYI: there's <code>dbg!</code> now, <a href=\"https://doc.rust-lang.org/nightly/std/macro.dbg.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/macro.dbg.html\">https://doc.rust-lang.org/nightly/std/macro.dbg.html</a></p>",
        "id": 154202777,
        "sender_full_name": "centril",
        "timestamp": 1546464721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I left a few notes (<a href=\"https://github.com/rust-lang/rust/issues/56905#issuecomment-451004313\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56905#issuecomment-451004313\">link</a>) regarding some of the steps we will have to do in this closure refactoring. Those weren't more \"internal notes to myself\", but we should discuss, as I think it suggests a few more refactorings to try out =)</p>",
        "id": 154205864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546468172
    },
    {
        "content": "<p>the good news is that I think the path is <em>starting</em> to become clear</p>",
        "id": 154205865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546468178
    },
    {
        "content": "<p>and you will be the world's expert on closures by the time we're done :P</p>",
        "id": 154205867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546468185
    },
    {
        "content": "<blockquote>\n<p>ah, that is true, though you can use <code>RUST_LOG</code> when running <code>x.py</code></p>\n</blockquote>\n<p>Can you tell me how and I can add that to rustc-guide as well</p>",
        "id": 154206219,
        "sender_full_name": "blitzerr",
        "timestamp": 1546468581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 154207043,
        "sender_full_name": "blitzerr",
        "timestamp": 1546469597
    },
    {
        "content": "<p>Thanks for the notes ! I will read them tonight</p>",
        "id": 154207426,
        "sender_full_name": "blitzerr",
        "timestamp": 1546470111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> debugging chapter from <a href=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html\">https://rust-lang.github.io/rustc-guide/compiler-debugging.html</a></p>",
        "id": 154207666,
        "sender_full_name": "csmoe",
        "timestamp": 1546470404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <br>\nI see lines like this <code>$ RUST_LOG=rustc::traits rustc +local my-file.rs</code><br>\nwhich is invoking it after the compiler is built and not while building it using x.py</p>",
        "id": 154207924,
        "sender_full_name": "blitzerr",
        "timestamp": 1546470759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>  Let me know if you are seeing something that I missed ?</p>",
        "id": 154207944,
        "sender_full_name": "blitzerr",
        "timestamp": 1546470801
    },
    {
        "content": "<p>oops, rust_log only works with built rustc.</p>",
        "id": 154208004,
        "sender_full_name": "csmoe",
        "timestamp": 1546470859
    },
    {
        "content": "<p>Right but looks like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  has a trick to make it work while it is being built</p>",
        "id": 154208083,
        "sender_full_name": "blitzerr",
        "timestamp": 1546470974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/commit/923042e1d9a59edb7fdef579f666299a29103afa\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/923042e1d9a59edb7fdef579f666299a29103afa\">New commit</a></p>",
        "id": 154218938,
        "sender_full_name": "blitzerr",
        "timestamp": 1546488556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> you just need to do <code>RUST_LOG=rustc::traits ./x.py ...</code></p>",
        "id": 154248542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546531717
    },
    {
        "content": "<p>Thanks</p>",
        "id": 154251212,
        "sender_full_name": "blitzerr",
        "timestamp": 1546534448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI think, one way to remove the usage of Freevars struct will be for the with_freevars function to be able to call the closure provided with the upvar_list and then all callers code can change to accommodate to use the UpvarId instead of Freevar. But that said, it will have to be an all at once change instead of the way we are currently doing it, tackling one with_freevar call at a time.</p>",
        "id": 154252231,
        "sender_full_name": "blitzerr",
        "timestamp": 1546535620
    },
    {
        "content": "<p>Not sure if you reviewed the code, but looking at your comments on the issue, I think we have a direction for the next change. There are two methods you suggest, have you made your mind on which one ? Maybe we want to do the tuples based one ? When you suggest that the closure can keep a list of all the upvars it is referencing, we don't really need to right ? I think we have to extend the UpvarId struct to keep track of which fields in aggregate datatypes are borrowed by the closure ?</p>",
        "id": 154252500,
        "sender_full_name": "blitzerr",
        "timestamp": 1546535947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 154270218,
        "sender_full_name": "blitzerr",
        "timestamp": 1546553450
    },
    {
        "content": "<p>I would prefer <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> to migrate callers of the <code>with_freevars</code> code one by one, since then it can be done incrementally — but also because there may be some callers that should not be migrated, I'm not sure</p>",
        "id": 154429247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628712
    },
    {
        "content": "<p>I think the next refactoring I would pursue though is indeed to introduce a tuple of type variables for the upvar types</p>",
        "id": 154429266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628743
    },
    {
        "content": "<p>I wonder <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> if you want to try to do that one -- or get started on it, anyways -- doing a pair programming session</p>",
        "id": 154429315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628765
    },
    {
        "content": "<p>I feel like it looks \"not that hard\" to me, but I could imagine if you are not that familiar with the code it would be hard to know what to do</p>",
        "id": 154429332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nSure we can pick up the tuple introduction part. A pair programming sounds like a great idea. I want to do that ever since I read <a href=\"https://www.newyorker.com/magazine/2018/12/10/the-friendship-that-made-google-huge\" target=\"_blank\" title=\"https://www.newyorker.com/magazine/2018/12/10/the-friendship-that-made-google-huge\">this</a></p>",
        "id": 154430941,
        "sender_full_name": "blitzerr",
        "timestamp": 1546630290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> then we need to schedule a slot :)</p>",
        "id": 154432369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546631583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Awesome ! How does your schedule look like next week ?</p>",
        "id": 154432537,
        "sender_full_name": "blitzerr",
        "timestamp": 1546631713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/commit/923042e1d9a59edb7fdef579f666299a29103afa\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/923042e1d9a59edb7fdef579f666299a29103afa\">New commit</a>.  Any chance you can take a look at that ?</p>",
        "id": 154585831,
        "sender_full_name": "blitzerr",
        "timestamp": 1546882716
    },
    {
        "content": "<p>It's the same one from last week, no changes</p>",
        "id": 154585861,
        "sender_full_name": "blitzerr",
        "timestamp": 1546882754
    },
    {
        "content": "<p>from a brief glance it looks good to me :)</p>",
        "id": 154590808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546886997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://github.com/rust-lang/rust/pull/56906#pullrequestreview-190396095\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906#pullrequestreview-190396095\">posted a review</a></p>",
        "id": 154668815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546974900
    },
    {
        "content": "<p>Thank you for your time <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . I will submit an update for this one tonight.</p>",
        "id": 154669575,
        "sender_full_name": "blitzerr",
        "timestamp": 1546975548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/pull/56906/commits/69e491815d927b3206c8acf88fbdbed8521e5955\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56906/commits/69e491815d927b3206c8acf88fbdbed8521e5955\">update</a></p>",
        "id": 154696599,
        "sender_full_name": "blitzerr",
        "timestamp": 1547004404
    },
    {
        "content": "<p>Addressed your comments and posted another update</p>",
        "id": 154696602,
        "sender_full_name": "blitzerr",
        "timestamp": 1547004419
    },
    {
        "content": "<p>r+'d</p>",
        "id": 154729319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Created <a href=\"https://github.com/rust-lang/rust/issues/57482\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57482\">New Issue</a> for the work on making the \"upvar types\" a tuple of the actual upvar types work item</p>",
        "id": 154862292,
        "sender_full_name": "blitzerr",
        "timestamp": 1547146565
    },
    {
        "content": "<p>great</p>",
        "id": 154864370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\n<a href=\"https://github.com/rust-lang/rust/compare/master...blitzerr:upvar-tuple\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...blitzerr:upvar-tuple\">Changes so far</a><br>\nWhat it addresses</p>\n<ul>\n<li>Make ClosureSubsts return a tuple of the types (I re-did this to understand the code better).</li>\n<li>Make GeneratorSubsts return a tuple of the types</li>\n<li>Created a helper that returns an option of [Ty] to be used by the ppaux code for both generators and closures.</li>\n</ul>\n<p>What remains is change the lifetime parameters from <code>tcx: TyCtxt&lt;'_, '_, 'tcx&gt;</code> to<code> tcx: TyCtxt&lt;'_, 'tcx 'tcx&gt;</code><br>\nI want to ask that in <a href=\"https://github.com/rust-lang/rust/blob/1c561d9b55aabc7df484f8faba24430421aee998/src/librustc/ty/sty.rs#L464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1c561d9b55aabc7df484f8faba24430421aee998/src/librustc/ty/sty.rs#L464\">this</a> case, the generator takes <code>'gcx</code> lifetime and changing that to the <code>'tcx</code> does not look good. Any ideas on how to do it or not do it at all ?</p>",
        "id": 155039654,
        "sender_full_name": "blitzerr",
        "timestamp": 1547401710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> okay <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155091632,
        "sender_full_name": "csmoe",
        "timestamp": 1547479644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 155111903,
        "sender_full_name": "blitzerr",
        "timestamp": 1547496034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> nice! will review shortly</p>",
        "id": 155197109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> left various comments on the commits</p>",
        "id": 155203834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547586020
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nRegarding naming I agree with the inconsistent part. What do you suggest, we adopt the clear naming (by this I mean, refactor the existing code to adopt the new name) or stick to the old convention ?</p>",
        "id": 155206845,
        "sender_full_name": "blitzerr",
        "timestamp": 1547588393
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 155206925,
        "sender_full_name": "blitzerr",
        "timestamp": 1547588452
    },
    {
        "content": "<blockquote>\n<p>What remains is change the lifetime parameters from <code>tcx: TyCtxt&lt;'_, '_, 'tcx&gt;</code> to<code> tcx: TyCtxt&lt;'_, 'tcx 'tcx&gt;</code><br>\nI want to ask that in <a href=\"https://github.com/rust-lang/rust/blob/1c561d9b55aabc7df484f8faba24430421aee998/src/librustc/ty/sty.rs#L464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1c561d9b55aabc7df484f8faba24430421aee998/src/librustc/ty/sty.rs#L464\">this</a> case, the generator takes <code>'gcx</code> lifetime and changing that to the <code>'tcx</code> does not look good. Any ideas on how to do it or not do it at all</p>\n</blockquote>",
        "id": 155206960,
        "sender_full_name": "blitzerr",
        "timestamp": 1547588511
    },
    {
        "content": "<p>Any ideas on that one <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 155207015,
        "sender_full_name": "blitzerr",
        "timestamp": 1547588535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nAddressed your comments <a href=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split\">here</a></p>",
        "id": 155272360,
        "sender_full_name": "blitzerr",
        "timestamp": 1547660445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#r31963272\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#r31963272\">comment</a> -- the logic in ppaux still doesn't seem quite right to me</p>",
        "id": 155274922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547662591
    },
    {
        "content": "<p>I added a comment and maybe we can iterate here more quickly?<br>\n\"<br>\nAre you saying that we can be in a situation where the type is neither a type or an inference variable ?<br>\nIn that case we will already panic as the code stands in src/librustc/ty/sty.rs(line 389 of this commit)</p>\n<p>And this code will do that right? In case of an inference variable the opt_tuple_tys returns an empty list and so the some branch will do the usual running through an empty list ?<br>\n\"</p>",
        "id": 155275734,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"emoji emoji-261d\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 155275758,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663259
    },
    {
        "content": "<blockquote>\n<p>Are you saying that we can be in a situation where the type is neither a type or an inference variable ?</p>\n</blockquote>\n<p>do you mean neither a tuple nor an inference variable? If so, I'm not saying that, it should always be one of those 2 things.</p>",
        "id": 155275833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663308
    },
    {
        "content": "<blockquote>\n<p>In case of an inference variable the opt_tuple_tys returns an empty list</p>\n</blockquote>\n<p>ah, I missed that maybe</p>",
        "id": 155275847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663324
    },
    {
        "content": "<p>this is the definition of <code>opt_tuple_tys</code> that I see</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"sd\">/// This is safe to be called even when the upvar type parameters are not</span>\n<span class=\"w\">    </span><span class=\"sd\">/// bound and is exactly called for that same reason.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">opt_tuple_tys</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty_or_infer_var</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155275896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663389
    },
    {
        "content": "<p>looks like it returns <code>None</code>, not an empty loop</p>",
        "id": 155275906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663399
    },
    {
        "content": "<p>which actually I think is the right thing</p>",
        "id": 155275949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663403
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">opt_tuple_tys</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty_or_infer_var</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Infer</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">List</span>::<span class=\"n\">empty</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;unexpected type&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155276132,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663534
    },
    {
        "content": "<p>This is what I see on the <a href=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split\">commit</a></p>",
        "id": 155276143,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663557
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#diff-b180e2fcc6ac765371cbd5b1dc95c914R386\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#diff-b180e2fcc6ac765371cbd5b1dc95c914R386\">here</a><br>\nand<br>\n<a href=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#diff-b180e2fcc6ac765371cbd5b1dc95c914R491\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/61a1d2c75d?diff=split#diff-b180e2fcc6ac765371cbd5b1dc95c914R491\">here</a></p>",
        "id": 155276449,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-261d\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 155276466,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663827
    },
    {
        "content": "<p>ok</p>",
        "id": 155276481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663847
    },
    {
        "content": "<p>I personally thikn I would still return <code>None</code> for infer</p>",
        "id": 155276486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663854
    },
    {
        "content": "<p>otherwise, you can't tell the difference between \"no upvars\"</p>",
        "id": 155276496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663868
    },
    {
        "content": "<p>and \"upvars not yet known\"</p>",
        "id": 155276510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663872
    },
    {
        "content": "<p>but at the caller site, if you don't care about that difference (which we probably don't),</p>",
        "id": 155276515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663883
    },
    {
        "content": "<p>we can just do <code>opt_tuple_tys().unwrap_or(&amp;[])</code> or something</p>",
        "id": 155276566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663898
    },
    {
        "content": "<p>specifically I think I would return <code>Option&lt;&amp;[Ty&lt;'tcx&gt;]&gt;</code></p>",
        "id": 155276575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663905
    },
    {
        "content": "<p>The upvars tuple vs not inferred yet can be obtained from the list being filled vs empty.</p>",
        "id": 155276606,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663949
    },
    {
        "content": "<p>But I do get your point.</p>",
        "id": 155276623,
        "sender_full_name": "blitzerr",
        "timestamp": 1547663959
    },
    {
        "content": "<p>I'm not sure how you can tell it is filled if the list is empty</p>",
        "id": 155276633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663972
    },
    {
        "content": "<p>also, why return <code>Option</code> if you never return <code>None</code> =)</p>",
        "id": 155276642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547663982
    },
    {
        "content": "<p>That's true <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155276702,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664006
    },
    {
        "content": "<p>So you want it to not return an iterator anymore ?</p>",
        "id": 155276730,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Is that because it will save us from cloning ?</p>",
        "id": 155276773,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664099
    },
    {
        "content": "<p>I would return a slice just because it's more convenient for everyone</p>",
        "id": 155276864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547664152
    },
    {
        "content": "<p>I get your suggestions now. Sorry for the confusion. Unfortunately, I can only implement this tonight <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 155276902,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664194
    },
    {
        "content": "<p>I agree with you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The syntax is much nicer <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155276928,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  While I have your attention, any thoughts on </p>\n<div class=\"codehilite\"><pre><span></span>What remains is change the lifetime parameters from tcx: TyCtxt&amp;lt;&#39;_, &#39;_, &#39;tcx&amp;gt; to tcx: TyCtxt&amp;lt;&#39;_, &#39;tcx &#39;tcx&amp;gt;\nI want to ask that in this case, the generator takes &#39;gcx lifetime and changing that to the &#39;tcx does not look good. Any ideas on how to do it or not do it at all ?\n</pre></div>",
        "id": 155277151,
        "sender_full_name": "blitzerr",
        "timestamp": 1547664414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> er that is hard to read</p>",
        "id": 155278412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547665373
    },
    {
        "content": "<p>what's the question exactly?</p>",
        "id": 155278415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547665376
    },
    {
        "content": "<p>maybe re-paste it without the \"```\"</p>",
        "id": 155278429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547665386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nAs we <a href=\"https://github.com/rust-lang/rust/commit/59a6a0c400\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/59a6a0c400\">discussed</a></p>",
        "id": 155307647,
        "sender_full_name": "blitzerr",
        "timestamp": 1547694871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0700</span><span class=\"p\">]</span>: <span class=\"nc\">hidden</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">549</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">549</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">hidden</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Chain</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Once</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;gcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">532</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">532</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">532</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GeneratorSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0700</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">Could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I get this error when I make this change </p>\n<div class=\"codehilite\"><pre><span></span>-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt&lt;&#39;_, &#39;_, &#39;tcx&gt;) -&gt;\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt&lt;&#39;_, &#39;tcx, &#39;tcx&gt;) -&gt;\n</pre></div>",
        "id": 155311012,
        "sender_full_name": "blitzerr",
        "timestamp": 1547700360
    },
    {
        "content": "<p>This is what I meant. Sorry for the confusion and late response.</p>",
        "id": 155311198,
        "sender_full_name": "blitzerr",
        "timestamp": 1547700675
    },
    {
        "content": "<p>Yeah so that's one of the least favorite impl Trait limitations :)</p>",
        "id": 155336199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733289
    },
    {
        "content": "<p>there are workarounds but...before we go there...</p>",
        "id": 155336204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733296
    },
    {
        "content": "<p>maybe we can return a slice?</p>",
        "id": 155336323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733378
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> what branch are you working from on your fork?</p>",
        "id": 155336389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733430
    },
    {
        "content": "<p><code>upvar-tuple</code>, I guess</p>",
        "id": 155336508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733534
    },
    {
        "content": "<p>anyway so yeah I suspect we <em>can</em> make this a slice now</p>",
        "id": 155336541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733557
    },
    {
        "content": "<p>I would just do that</p>",
        "id": 155336542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733559
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt&lt;&#39;_, &#39;tcx, &#39;tcx&gt;)  -&gt; &amp;[Ty&lt;&#39;tcx&gt;]\n</pre></div>",
        "id": 155336559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nYou guessed it right, upvar-tuple it is. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155337236,
        "sender_full_name": "blitzerr",
        "timestamp": 1547734153
    },
    {
        "content": "<p>We are returning a slice in the opt_tuple_ty function now ( latest change). We also want to return slices from upvar_tys ?</p>",
        "id": 155337533,
        "sender_full_name": "blitzerr",
        "timestamp": 1547734397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"emoji emoji-261d\" title=\"wait one second\">:wait_one_second:</span>️</p>",
        "id": 155337543,
        "sender_full_name": "blitzerr",
        "timestamp": 1547734413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> right</p>",
        "id": 155340753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547736856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  maybe tonight I shall have it <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155342635,
        "sender_full_name": "blitzerr",
        "timestamp": 1547738151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  changing the return type of <code>upvar_tys</code> from <code>impl Iterator&lt;Item=Ty&lt;'tcx&gt;&gt; + 'tcx</code> to <code>&amp;'tcx[Ty&lt;'tcx&gt;]</code>, is it really required to fix the lifetime error? This change will be at quite a few places</p>",
        "id": 156363918,
        "sender_full_name": "blitzerr",
        "timestamp": 1547814615
    },
    {
        "content": "<p>Also a change like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">upvar_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">[</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;upvar_tuple_ty is not a valid tuple: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>throws errors like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0271</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Once</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">551</span>:<span class=\"mi\">44</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">551</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">iter</span>::<span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                            </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0271</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Chain</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">slice</span>::<span class=\"n\">Iter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Once</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">549</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">549</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">statically</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0271</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Once</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">549</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">549</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I can guess why the compiler is unhappy but is there an idiomatic way, it can be re-written with least effort to make the compiler happy ?</p>",
        "id": 156365274,
        "sender_full_name": "blitzerr",
        "timestamp": 1547816306
    },
    {
        "content": "<p>yeah, you'll need to add <code>.iter()</code> and maybe <code>.iter().cloned()</code> into various places...</p>",
        "id": 156372449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822536
    },
    {
        "content": "<p>it's not <em>necessary</em> to fix</p>",
        "id": 156372453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822540
    },
    {
        "content": "<p>I just thought it might be nicer to return a slice</p>",
        "id": 156372456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822549
    },
    {
        "content": "<p>but maybe not</p>",
        "id": 156372458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/commit/8568565465\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/8568565465\">here</a> we go.</p>",
        "id": 156422416,
        "sender_full_name": "blitzerr",
        "timestamp": 1547876199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">   </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">upvar_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Closure</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">Either</span>::<span class=\"n\">Left</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">Either</span>::<span class=\"n\">Right</span><span class=\"p\">(</span><span class=\"n\">Either</span>::<span class=\"n\">Left</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">FnDef</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Const</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">Either</span>::<span class=\"n\">Right</span><span class=\"p\">(</span><span class=\"n\">Either</span>::<span class=\"n\">Right</span><span class=\"p\">(</span><span class=\"n\">iter</span>::<span class=\"n\">empty</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>There is still this function in the <code>nll/universal_regions.rs</code> which returns an iterator. Its the branch returning the<code> iter::empty</code> that's messing things up. Couldn't think of an easy way to address this</p>",
        "id": 156422960,
        "sender_full_name": "blitzerr",
        "timestamp": 1547877144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I'm a bit unsure what you are asking :)</p>",
        "id": 156617346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174086
    },
    {
        "content": "<p>oh, like, how can that fn be converted to return a slice?</p>",
        "id": 156617366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174116
    },
    {
        "content": "<p>you can just return <code>&amp;[]</code> from that final branch</p>",
        "id": 156617414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">upvar_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Closure</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">FnDef</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DefiningTy</span>::<span class=\"n\">Const</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">¦</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156617431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174156
    },
    {
        "content": "<p>this works because <code>[]</code> is a constant and hence <code>&amp;[]</code> can be assigned <code>'static</code> lifetime</p>",
        "id": 156617448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Awesome. Thank you.</p>",
        "id": 156626907,
        "sender_full_name": "blitzerr",
        "timestamp": 1548181656
    },
    {
        "content": "<blockquote>\n<p>Yeah so that's one of the least favorite impl Trait limitations <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>I think we are ready for the next phase. You were talking of a workaround. So, we can do that and move to the next phase of <a href=\"https://github.com/rust-lang/rust/issues/53488\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53488\">#53488</a></p>",
        "id": 156627061,
        "sender_full_name": "blitzerr",
        "timestamp": 1548181754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> you'll have to remind me -- workaround for what?</p>",
        "id": 156627101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181780
    },
    {
        "content": "<p>iirc, the next phase was going to be changing the closure substs etc to <em>actually</em> have a tuple</p>",
        "id": 156627117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181796
    },
    {
        "content": "<p>instead of now, where it has N parameters, and then we <em>synthesize</em> the tuple</p>",
        "id": 156627178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181806
    },
    {
        "content": "<p>right?</p>",
        "id": 156627179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181807
    },
    {
        "content": "<p>That is the logical next step but before that we wanted to make sure (at compilation time) that people don't end up calling upvar_tys from the inference code. So, basically </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">upvar_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">upvar_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;\n</pre></div>",
        "id": 156627347,
        "sender_full_name": "blitzerr",
        "timestamp": 1548181942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0700</span><span class=\"p\">]</span>: <span class=\"nc\">hidden</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">549</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">549</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">hidden</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Chain</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Once</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;gcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">532</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">532</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">532</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GeneratorSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0700</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">Could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Gives me this error</p>",
        "id": 156627378,
        "sender_full_name": "blitzerr",
        "timestamp": 1548181979
    },
    {
        "content": "<p>ah I see</p>",
        "id": 156627396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181991
    },
    {
        "content": "<p>and you don't want to remove the <code>impl Iterator</code>, right?</p>",
        "id": 156627409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182012
    },
    {
        "content": "<blockquote>\n<p>there are workarounds but...before we go there...</p>\n</blockquote>\n<p>To which you said <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 156627427,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182039
    },
    {
        "content": "<p>so the problem here is that the type returned for the <code>impl Trait</code> is only allowed to reference the lifetimes that appear in the <code>impl Iterator&lt;Item=Ty&lt;'tcx&gt;&gt; + 'a</code> type itself -- namely <code>'tcx</code> and <code>'a</code></p>",
        "id": 156627493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182065
    },
    {
        "content": "<p>Ohh no, I value your opinion <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 156627503,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182071
    },
    {
        "content": "<p>but here we are capturing the <code>TyCtxt&lt;'a, 'gcx, 'tcx&gt;</code>, which includes <code>'gcx</code></p>",
        "id": 156627510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182075
    },
    {
        "content": "<p>I already removed all the iterator returns</p>",
        "id": 156627518,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182084
    },
    {
        "content": "<p>there is this weird trait called <code>Captures</code> that can be used as a workaround</p>",
        "id": 156627521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182086
    },
    {
        "content": "<p>oh, well, then I don't understand the error</p>",
        "id": 156627531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182098
    },
    {
        "content": "<p>Except for one, which you just told me how to do</p>",
        "id": 156627532,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182100
    },
    {
        "content": "<p>ah ok</p>",
        "id": 156627536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182102
    },
    {
        "content": "<p>well in any case you can do <code>impl Iterator&lt;...&gt; + Captures&lt;'gcx&gt; + 'a</code></p>",
        "id": 156627554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182117
    },
    {
        "content": "<p>Tonight, I will  check that again.</p>",
        "id": 156627564,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182124
    },
    {
        "content": "<p>captures trait: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/util/captures/trait.Captures.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/util/captures/trait.Captures.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/util/captures/trait.Captures.html</a></p>",
        "id": 156627570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182130
    },
    {
        "content": "<p>it's basically a hack -- a \"dummy\" requirement just to let you mention <code>'gcx</code></p>",
        "id": 156627582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182140
    },
    {
        "content": "<p>You think, after changing iterator to slice ref, that error should go away ?</p>",
        "id": 156627588,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182143
    },
    {
        "content": "<p>but I sort of prefer the slice personally</p>",
        "id": 156627591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182146
    },
    {
        "content": "<p>at least I think I do</p>",
        "id": 156627601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182155
    },
    {
        "content": "<blockquote>\n<p>You think, after changing iterator to slice ref, that error should go away ?</p>\n</blockquote>\n<p>that immediate error yes</p>",
        "id": 156627655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182166
    },
    {
        "content": "<p>I would perhaps expect other errors :)</p>",
        "id": 156627658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182172
    },
    {
        "content": "<p>:D</p>",
        "id": 156627703,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182214
    },
    {
        "content": "<p>Okay. So then I will make the last change you suggest and try changing <code>TyCtxt&lt;'_, '_, 'tcx&gt;) to  TyCtxt&lt;'_, 'tcx, 'tcx&gt;)</code> and see what new errors I get.</p>",
        "id": 156627824,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nThen we might be good for the next steps. We should discuss that soon</p>",
        "id": 156627992,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182422
    },
    {
        "content": "<p>Thanks for explaining the error. I haven't written much Rust other than my compiler contributions which aren't many either. <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 156628427,
        "sender_full_name": "blitzerr",
        "timestamp": 1548182756
    },
    {
        "content": "<p>great, let me know how it goes!</p>",
        "id": 156637991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190012
    },
    {
        "content": "<p>Making the change</p>\n<div class=\"codehilite\"><pre><span></span>-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt&lt;&#39;_, &#39;_, &#39;tcx&gt;) -&gt;\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt&lt;&#39;_, &#39;tcx, &#39;tcx&gt;) -&gt;\n</pre></div>\n\n\n<p>gives the errors</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span>: <span class=\"nc\">unsatisfied</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">constraints</span><span class=\"o\">=====================&gt;</span><span class=\"w\">        </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">107</span><span class=\"o\">/</span><span class=\"mi\">125</span>: <span class=\"nc\">rustc</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">sty</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">550</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">531</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GeneratorSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">----</span><span class=\"w\">  </span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;tcx</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;gcx</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"mi\">550</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">iter</span>::<span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;tcx</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;gcx</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156663044,
        "sender_full_name": "blitzerr",
        "timestamp": 1548217472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>   In this function I think I need to change the argument <br>\n<code>tcx: TyCtxt&lt;'a, 'gcx, 'tcx&gt;</code> to <code>tcx: TyCtxt&lt;'a, 'tcx, 'tcx&gt;</code> but not sure if that is the right way</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GeneratorSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pre_transforms_tys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;\n       <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">upvar_tys</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">iter</span>::<span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156663111,
        "sender_full_name": "blitzerr",
        "timestamp": 1548217612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> it looks like changing that signature may cause trouble</p>",
        "id": 156704670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262452
    },
    {
        "content": "<p>it may not be necessary to change to <code>'tcx, 'tcx</code></p>",
        "id": 156704675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262460
    },
    {
        "content": "<p>that does guarantee that we use this outside of an infernce context</p>",
        "id": 156704681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262465
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 156704682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262466
    },
    {
        "content": "<p>we could also enforce that dynamically (by asserting)</p>",
        "id": 156704690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262474
    },
    {
        "content": "<p>in particular, <code>pre_transforms_ty</code> is used in the NLL type-check (which <em>does</em> have an inference context)</p>",
        "id": 156704734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262509
    },
    {
        "content": "<p>however, we could also just rewrite that function -- and perhaps move it into the NLL <code>type_check/mod.rs</code> file, the only place it is invoked -- to match against the tuple and extract the contents</p>",
        "id": 156704771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262545
    },
    {
        "content": "<p>the point being that we know that, when we are in the NLL type-check, these types should be fully inferred (we do have an active inference context then, but we are inferring different things)</p>",
        "id": 156704833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262569
    },
    {
        "content": "<p>We are enforcing it dynamically (as in the latest change)</p>",
        "id": 156704834,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262571
    },
    {
        "content": "<p>So you suggest we don't mess with the signature ?</p>",
        "id": 156704863,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262595
    },
    {
        "content": "<p>I'm torn -- it might not be worth the trouble</p>",
        "id": 156704914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262644
    },
    {
        "content": "<p>we could leave it for a FIXME</p>",
        "id": 156704922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262649
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 156704930,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262653
    },
    {
        "content": "<p>I think this is what I would actually do :)</p>",
        "id": 156704931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262653
    },
    {
        "content": "<p>because i'd like to press on and get to the harder bits</p>",
        "id": 156704946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262665
    },
    {
        "content": "<p>and we can come back and clean this part up later</p>",
        "id": 156704955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262672
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 156704963,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262676
    },
    {
        "content": "<p>do you want to try and schedule another pairing session? might be useful to get into the next step</p>",
        "id": 156705008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548262685
    },
    {
        "content": "<p>I will leave a fixme and move to the next steps</p>",
        "id": 156705015,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262694
    },
    {
        "content": "<p>Absolutely</p>",
        "id": 156705019,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262702
    },
    {
        "content": "<p>How does this week look to you ?</p>",
        "id": 156705032,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262714
    },
    {
        "content": "<p>Any particular day you prefer ?</p>",
        "id": 156705047,
        "sender_full_name": "blitzerr",
        "timestamp": 1548262727
    },
    {
        "content": "<p>good question</p>",
        "id": 156705775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263231
    },
    {
        "content": "<p>I could maybe do later today for a bit</p>",
        "id": 156705928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263326
    },
    {
        "content": "<p>and/or some time on Friday is prob next best option</p>",
        "id": 156705933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263334
    },
    {
        "content": "<p>How about Friday 12:30 - 1:30 pm your time ?</p>",
        "id": 156707081,
        "sender_full_name": "blitzerr",
        "timestamp": 1548264091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"wait one second\" class=\"emoji emoji-261d\" role=\"img\" title=\"wait one second\">:wait_one_second:</span>️</p>",
        "id": 156707539,
        "sender_full_name": "blitzerr",
        "timestamp": 1548264454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I could do that</p>",
        "id": 156716108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548271135
    },
    {
        "content": "<p>Cool, will set something up</p>",
        "id": 156716141,
        "sender_full_name": "blitzerr",
        "timestamp": 1548271153
    },
    {
        "content": "<p>ok, if you can send me an invite to <code>nmatsakis@mozilla.com</code> would be appreciated</p>",
        "id": 156716163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548271168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>     I just did  :D</p>",
        "id": 156716632,
        "sender_full_name": "blitzerr",
        "timestamp": 1548271490
    },
    {
        "content": "<p>Let me know of you get it and if the video url looks good to you. I used the i-heart-rust extension that you generally use.</p>",
        "id": 156716689,
        "sender_full_name": "blitzerr",
        "timestamp": 1548271545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> the new video is uploading to YouTube now</p>",
        "id": 156875541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548443008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Awesome <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><br>\nThanks a lot for your time. Very grateful <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 156875674,
        "sender_full_name": "blitzerr",
        "timestamp": 1548443090
    },
    {
        "content": "<p>Likewise =)</p>",
        "id": 156875688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548443097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://youtu.be/2QCuNtISoYc\" target=\"_blank\" title=\"https://youtu.be/2QCuNtISoYc\">video uploaded</a></p>",
        "id": 156878850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445329
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 156880370,
        "sender_full_name": "blitzerr",
        "timestamp": 1548446559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> how is it going with this?</p>",
        "id": 157361285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549035253
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nIt hasn't been going as fast as we would like it to be. Haven't had much time this week at all in the evenings. I am planning to find some time this weekend. Sorry again for not making any progress.</p>",
        "id": 157362177,
        "sender_full_name": "blitzerr",
        "timestamp": 1549036034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> no pressure, just wanted to check in</p>",
        "id": 157362544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549036362
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 157363300,
        "sender_full_name": "blitzerr",
        "timestamp": 1549037003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">closures</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"k\">move</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;explicit</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">compiletest</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtest</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3245</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">closures</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"o\">-</span><span class=\"mf\">1.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">5</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">                 </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"o\">-</span><span class=\"mf\">1.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">29</span>: <span class=\"mi\">6</span>:<span class=\"mi\">50</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">_</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">                 </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"o\">-</span><span class=\"mf\">1.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">29</span>: <span class=\"mi\">6</span>:<span class=\"mi\">50</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\">  </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If we look at this error, we somehow removed a variable from the closure name <code>[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]</code> to <code>[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50]</code></p>",
        "id": 157481853,
        "sender_full_name": "blitzerr",
        "timestamp": 1549224704
    },
    {
        "content": "<p>generators errors are more wordy, and I don't understand them</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">generator</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"o\">-</span><span class=\"w\">   </span><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">30</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0597</span><span class=\"p\">]</span>: <span class=\"nc\">borrowed</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">44</span>:<span class=\"mi\">24</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">assert_foo</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                        </span><span class=\"o\">^^^^</span><span class=\"w\">                </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">dropped</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                        </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">until</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">OnlyFooIfStaticRef</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"err\">&#39;</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">OnlyFooIfStaticRef</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kd\">let</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">binding</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">increase</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">   </span><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">48</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0597</span><span class=\"p\">]</span>: <span class=\"nc\">borrowed</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">44</span>:<span class=\"mi\">35</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">assert_foo</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                                   </span><span class=\"o\">^^^^</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">dropped</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                                   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                                   </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">temporary</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">until</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"mi\">15</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">lifetimes</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">2</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kd\">let</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">binding</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">increase</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"></span>\n<span class=\"mi\">18</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">   </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0626</span><span class=\"p\">]</span>: <span class=\"nc\">borrow</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">generator</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">44</span>:<span class=\"mi\">24</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                        </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kr\">yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0626</span><span class=\"p\">]</span>: <span class=\"nc\">borrow</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">generator</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">auto</span><span class=\"o\">-</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">regions</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">44</span>:<span class=\"mi\">35</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">                                   </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kr\">yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"nb\">Some</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">occurred</span>: <span class=\"nc\">E0597</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E0626</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0597</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">21</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157481983,
        "sender_full_name": "blitzerr",
        "timestamp": 1549224906
    },
    {
        "content": "<p>For the closure related failures, looking at the code, looks like it comes from <br>\n<code>format!(\"[closure@{:?}]\", tcx.hir().span(node_id))</code> in <code>src/librustc/mir/mod.rs</code>.  So might be that the span no longer gives you that param.</p>",
        "id": 157482990,
        "sender_full_name": "blitzerr",
        "timestamp": 1549226772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span><br>\nBased on some of your post after all hands, I assume you are re-organizing things that you had on your plate. What happens to this ? <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 158574147,
        "sender_full_name": "blitzerr",
        "timestamp": 1550186029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> heh, a good questionm, I've been wondering about that very question!</p>",
        "id": 158648414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263946
    },
    {
        "content": "<p>At the moment, I'm still hoping to work with you on it, but it might be better for both of us if we could find another mentor.</p>",
        "id": 158648455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  sure, whatever helps you be more efficient.</p>",
        "id": 158649729,
        "sender_full_name": "blitzerr",
        "timestamp": 1550265012
    },
    {
        "content": "<p>I was also wondering if for the less fortunate, who were not invited, will there be a blog post or rust internal post with the big bullet points from the all hands? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 158649788,
        "sender_full_name": "blitzerr",
        "timestamp": 1550265073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> yeah I want to make one of those. Also we should try to talk, maybe next week?</p>",
        "id": 159179740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550860573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  My availability will be a little spotty till mid March. I will be travelling. But if we can sync async, then I can try to make some progress on the issue.</p>\n<p>If you want a talk today, I will be available.</p>",
        "id": 159180027,
        "sender_full_name": "blitzerr",
        "timestamp": 1550860773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI think that now you have some time after the region bug fix so I would like to draw your attention to this.  <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 159778091,
        "sender_full_name": "blitzerr",
        "timestamp": 1551502408
    },
    {
        "content": "<p>One of the ui-tests compiled with rustc with our changes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">stage1</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">S</span>: <span class=\"nc\">std</span>::<span class=\"n\">clone</span>::<span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">11</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR the trait bound `S: std::clone::Clone` is not satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">clone</span>::<span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">S</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0277</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159778139,
        "sender_full_name": "blitzerr",
        "timestamp": 1551502457
    },
    {
        "content": "<p>The same file compiled with nightly rustc</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">S</span>: <span class=\"nc\">std</span>::<span class=\"n\">clone</span>::<span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">11</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR the trait bound `S: std::clone::Clone` is not satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">clone</span>::<span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">S</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">17</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">a</span>:<span class=\"nc\">S</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0277</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159778143,
        "sender_full_name": "blitzerr",
        "timestamp": 1551502488
    },
    {
        "content": "<p>The difference is the presence of this extra line <br>\n<code>= note: required because it appears within the type </code>(S,)``</p>",
        "id": 159778157,
        "sender_full_name": "blitzerr",
        "timestamp": 1551502518
    },
    {
        "content": "<p>contents of the test file</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">clone</span><span class=\"o\">-</span><span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"c1\">// Check that closures do not implement `Clone` if their environment is not `Clone`.</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR the trait bound `S: std::clone::Clone` is not satisfied</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159778564,
        "sender_full_name": "blitzerr",
        "timestamp": 1551503267
    },
    {
        "content": "<p>So I am trying to step through but I might be doing something wrong as instead of stack I am getting assembly </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">Process</span> <span class=\"mi\">11116</span> <span class=\"no\">stopped</span>\n<span class=\"err\">*</span> <span class=\"nf\">thread</span> <span class=\"c\">#1, queue = &#39;com.apple.main-thread&#39;, stop reason = instruction step over</span>\n    <span class=\"nf\">frame</span> <span class=\"c\">#0: 0x000000010006b8d0 rustc`main + 224</span>\n<span class=\"nf\">rustc</span><span class=\"err\">`</span><span class=\"no\">main</span><span class=\"p\">:</span>\n<span class=\"err\">-&gt;</span>  <span class=\"err\">0</span><span class=\"nf\">x10006b8d0</span> <span class=\"err\">&lt;+</span><span class=\"mi\">224</span><span class=\"err\">&gt;</span><span class=\"p\">:</span> <span class=\"no\">callq</span>  <span class=\"mi\">0x10042e498</span>               <span class=\"c\">; symbol stub for: mprotect</span>\n    <span class=\"err\">0</span><span class=\"nf\">x10006b8d5</span> <span class=\"err\">&lt;+</span><span class=\"mi\">229</span><span class=\"err\">&gt;</span><span class=\"p\">:</span> <span class=\"no\">testl</span>  <span class=\"nv\">%eax</span><span class=\"p\">,</span> <span class=\"nv\">%eax</span>\n    <span class=\"err\">0</span><span class=\"nf\">x10006b8d7</span> <span class=\"err\">&lt;+</span><span class=\"mi\">231</span><span class=\"err\">&gt;</span><span class=\"p\">:</span> <span class=\"no\">jne</span>    <span class=\"mi\">0x10006bac3</span>               <span class=\"c\">; &lt;+723&gt;</span>\n    <span class=\"err\">0</span><span class=\"nf\">x10006b8dd</span> <span class=\"err\">&lt;+</span><span class=\"mi\">237</span><span class=\"err\">&gt;</span><span class=\"p\">:</span> <span class=\"no\">movq</span>   <span class=\"mi\">0x4ec764</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span> <span class=\"nv\">%r15</span>      <span class=\"c\">; std::sys::unix::thread::guard::PAGE_SIZE::h7a87b6bd0741865a (.llvm.14947831840210026976)</span>\n<span class=\"nf\">Target</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"no\">rustc</span><span class=\"p\">)</span> <span class=\"no\">stopped.</span>\n</pre></div>",
        "id": 159778815,
        "sender_full_name": "blitzerr",
        "timestamp": 1551503694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> it's not clear that this is something you are doing <em>wrong</em></p>",
        "id": 159949331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732596
    },
    {
        "content": "<p>Are you saying that your branch <strong>added</strong> the line in question, or removed it?</p>",
        "id": 159949403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732617
    },
    {
        "content": "<p>I can certainly imagine how this diff might occur, not sure that I am worried about it, basically</p>",
        "id": 159949421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732630
    },
    {
        "content": "<p>I imagine your branch added the new line?</p>",
        "id": 159949429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732636
    },
    {
        "content": "<p>That does appear to be the case (i.e., nightly does not have the line). Seems like an improvement to me :)</p>",
        "id": 159949506,
        "sender_full_name": "simulacrum",
        "timestamp": 1551732719
    },
    {
        "content": "<p>debatable, but I think it's ok either way</p>",
        "id": 159949569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732745
    },
    {
        "content": "<p>what's happening is that, in the trait selection code, there is this code that enumeates all the \"components\"</p>",
        "id": 159949601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732776
    },
    {
        "content": "<p>of a given typ</p>",
        "id": 159949605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732779
    },
    {
        "content": "<p>in the case of closures, it used to produce 1 component per upvar (captured variable)</p>",
        "id": 159949623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732790
    },
    {
        "content": "<p>we changed it <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> to produce a tuple of all upvar types</p>",
        "id": 159949628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732797
    },
    {
        "content": "<p>and that is the line you are now seeing</p>",
        "id": 159949636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732801
    },
    {
        "content": "<p>we <em>could</em> probably make it go away by inspecting the type variable representing the upvar types and -- if it is known to be a tuple -- inlining its contents</p>",
        "id": 159949675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732836
    },
    {
        "content": "<p>(it could also be an unresolved type variable)</p>",
        "id": 159949680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551732840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , that makes sense.</p>\n<blockquote>\n<p>(it could also be an unresolved type variable)</p>\n</blockquote>\n<p>Do you think we will be error checking before type resolution in some cases ?</p>",
        "id": 159972102,
        "sender_full_name": "blitzerr",
        "timestamp": 1551754602
    },
    {
        "content": "<p>ps, further convesation on this topic can move to <a class=\"stream\" data-stream-id=\"189812\" href=\"/#narrow/stream/189812-t-compiler.2Fwg-rfc-2229\">#t-compiler/wg-rfc-2229</a></p>",
        "id": 160008545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551797242
    }
]