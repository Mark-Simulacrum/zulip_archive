[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nas you suggested in <a href=\"https://github.com/rust-lang/rust/issues/52708#issue-344543133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708#issue-344543133\">https://github.com/rust-lang/rust/issues/52708#issue-344543133</a> , since the real def of <code>ProjectionElem</code> is <code>ProjectionElem&lt;'tcx, V, T&gt;</code>, so repr of <code>Place</code> will be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elem</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but <code>Place&lt;'tcx, V, T&gt;</code> is a bit untidy when the other objects wrap it like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Abc</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the new-intro'd <code>V, T</code> type parameter will break tons of code, I think it's unnecessary(wrong?).</p>\n<p>(maybe lucky?) I find </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// Alias for projections as they appear in places, where the base is a place</span>\n<span class=\"sd\">/// and the index is a local.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">PlaceElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>already lives there, so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elem</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>can hidden <code>V, T</code>.  can <code>PlaceElem</code> be intro'd here?</p>",
        "id": 130579199,
        "sender_full_name": "csmoe",
        "timestamp": 1532957705
    },
    {
        "content": "<p>why does <code>Place</code> need the V/T parameters?</p>",
        "id": 130583484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532961733
    },
    {
        "content": "<p>in any case, I think a type alias is ok</p>",
        "id": 130583487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532961736
    },
    {
        "content": "<p><code>V, T</code> come from <code>ProjectionElem&lt;'tcx, V, T&gt;</code></p>",
        "id": 130611891,
        "sender_full_name": "csmoe",
        "timestamp": 1532995676
    },
    {
        "content": "<p>right, but in the existing <code>Place</code> struct they are defined to e <code>Place</code> and <code>Ty</code> respectively, right?</p>",
        "id": 130621077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533011621
    },
    {
        "content": "<p>are you saying that some places which used to use <code>ProjectionElem</code> with other values of <code>V</code> and <code>T</code> now want to use <code>Place</code>?</p>",
        "id": 130621120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533011656
    },
    {
        "content": "<p>in other words, the existing <code>Place</code> uses this alias:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(as I think you already observed)</p>",
        "id": 130621129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533011705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> what ever happened here? (My apologies if there is an open PR, I haven't swept those yet)</p>",
        "id": 130982524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533566390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm working on this right now, I asked help from eddyb in niko-missing time.</p>",
        "id": 130982668,
        "sender_full_name": "csmoe",
        "timestamp": 1533566482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks, your instructions will be addressed soon</p>",
        "id": 131046202,
        "sender_full_name": "csmoe",
        "timestamp": 1533650582
    },
    {
        "content": "<blockquote>\n<p>I wonder if we should make a <code>split_projection</code>method that returns <code>Option&lt;(Place&lt;'tcx&gt;, &amp;PlaceProjection&lt;'tcx&gt;)&gt;</code></p>\n</blockquote>\n<p><code>Option&lt;(Place&lt;'tcx&gt;, &amp;PlaceProjection&lt;'tcx&gt;)&gt;</code> should be <code>Option&lt;(Place, Slice&lt;PlaceProjection&gt;)&gt;</code>?</p>",
        "id": 131046375,
        "sender_full_name": "csmoe",
        "timestamp": 1533650746
    },
    {
        "content": "<p>no</p>",
        "id": 131046823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651178
    },
    {
        "content": "<p>I meant that given e.g. <code>(B, [P1, P2])</code> it might return <code>((B, [P1]), &amp;P2)</code></p>",
        "id": 131046835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651200
    },
    {
        "content": "<p>i.e., it \"peels off\" the last projection</p>",
        "id": 131046841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651205
    },
    {
        "content": "<p>and returns it to you, along with the \"base\" place</p>",
        "id": 131046843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651211
    },
    {
        "content": "<p>i.e., the place without that projection</p>",
        "id": 131046848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651215
    },
    {
        "content": "<p>I suspect this is something we commonly want to do</p>",
        "id": 131046853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533651225
    },
    {
        "content": "<p>ooh, get it</p>",
        "id": 131046922,
        "sender_full_name": "csmoe",
        "timestamp": 1533651317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> may I ask a bit stupid question(unrelated to this topic)? for single <code>let x = 3</code>, does <code>x</code> has a region(lifetime) in NLL? I get used to thinki that <code>region</code> only involves  in borrow like <code>let x = &amp;3</code>.</p>",
        "id": 131162279,
        "sender_full_name": "csmoe",
        "timestamp": 1533809364
    },
    {
        "content": "<p><code>x</code> does not have a region</p>",
        "id": 131162395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809509
    },
    {
        "content": "<p>you are correct that lifetimes are only for borrows</p>",
        "id": 131162441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809527
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/pull/53247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247\">https://github.com/rust-lang/rust/pull/53247</a><br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> some lifetime conflicts  caused by introduced <code>TyCtxt</code>for interning will be addressed soon . and the <code>place_conflict</code>https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/librustc_mir/borrow_check/places_conflict.rs#L32-L37 is simply translated, maybe I need to rewrite it with slice disjoint detection?</p>",
        "id": 131236537,
        "sender_full_name": "csmoe",
        "timestamp": 1533906966
    },
    {
        "content": "<p>oh, nice :)</p>",
        "id": 131236560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907031
    },
    {
        "content": "<p>I'll take a look I guess</p>",
        "id": 131236562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907035
    },
    {
        "content": "<p><code>places_conflict</code> ought to be something we can implement much more simply...</p>",
        "id": 131236567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907051
    },
    {
        "content": "<p>btw, it's the first time I make such a big modification sine learning programming, could you give me some tips about the conflict detection since I'm a algorithm newbie?</p>",
        "id": 131236670,
        "sender_full_name": "csmoe",
        "timestamp": 1533907180
    },
    {
        "content": "<p>like, how it works in general?</p>",
        "id": 131236735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907260
    },
    {
        "content": "<p>the idea is that we start with the base of the path and go forward, iirc</p>",
        "id": 131236751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907299
    },
    {
        "content": "<p>so e.g. if you have <code>a.b.c</code> and <code>a.b.d.e</code></p>",
        "id": 131236756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907308
    },
    {
        "content": "<p>and we want to see if a borrow of <code>a.b.c</code> affects a write to <code>a.b.d.e</code></p>",
        "id": 131236764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907316
    },
    {
        "content": "<p>we start with the local -- <code>a</code> in each case -- and we see that <em>so far</em> they appear to be overlapping paths</p>",
        "id": 131236806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907328
    },
    {
        "content": "<p>then we go to the next step: <code>a.b</code> in both cases</p>",
        "id": 131236809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907333
    },
    {
        "content": "<p>still overlapping</p>",
        "id": 131236810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907335
    },
    {
        "content": "<p>finally we get to <code>a.b.c</code> vs <code>a.b.d</code></p>",
        "id": 131236811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907339
    },
    {
        "content": "<p>and there we see they are disjoint</p>",
        "id": 131236814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907343
    },
    {
        "content": "<p>(sometimes, though, the same field name may still be overlapping -- e.g., in a <code>union</code>)</p>",
        "id": 131236825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907360
    },
    {
        "content": "<p>er, sorry, different field names</p>",
        "id": 131236830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907366
    },
    {
        "content": "<p>e.g., if <code>c</code> and <code>d</code> are declared in the same  union</p>",
        "id": 131236841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907378
    },
    {
        "content": "<p>the lifetime conflict isn't solved now, so the <code>./x.py check</code> cannot pass, but it's just complains lifetime conflicts, I have clean up all the other errors</p>",
        "id": 131236842,
        "sender_full_name": "csmoe",
        "timestamp": 1533907378
    },
    {
        "content": "<p>ok</p>",
        "id": 131236849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907384
    },
    {
        "content": "<p>if you want</p>",
        "id": 131236855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907386
    },
    {
        "content": "<p>I can pull the branch and take a look</p>",
        "id": 131236858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907390
    },
    {
        "content": "<p>sometimes these are obvious when you've been hacking on the compiler daily for years ;)</p>",
        "id": 131236868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907404
    },
    {
        "content": "<p>thanks, I will try to address conflict-detection.<br>\nyep, I wanna your pulling.</p>",
        "id": 131237067,
        "sender_full_name": "csmoe",
        "timestamp": 1533907587
    },
    {
        "content": "<p>ok, will do</p>",
        "id": 131237161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533907755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ping — I haven't had any time to look at your PR, but I would likely be able to do so next week</p>",
        "id": 132253626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534440365
    },
    {
        "content": "<p>have you had any time to look at it any more?</p>",
        "id": 132253637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534440372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm working on this daily, rewriting the old-recursive place check stuffs to iter as eddyb reviewed(it's a bit slow since I am not proficient in algorithms and the place check, but I made some progress). If I am stuck or it's done, i'll ping you/eddyb</p>",
        "id": 132268289,
        "sender_full_name": "csmoe",
        "timestamp": 1534457373
    },
    {
        "content": "<p>ok, well, RustConf is over and I'm more available, so let me know if you want me to take another look</p>",
        "id": 132535042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534877748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> updating: <code>./py check</code> succeeded locally, taking care of <code>./x.py test --stage 1</code></p>",
        "id": 132555436,
        "sender_full_name": "csmoe",
        "timestamp": 1534907230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>./x.py test</code> emitted abort panic <code>stack overflow</code> when compiling core :<br>\n<a href=\"/user_uploads/4715/lbzNRTA5oRRz-b7BPTWdenIO/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> <br>\nIf you have time, may I have your review? here is my latest code <a href=\"https://github.com/rust-lang/rust/pull/53247/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247/files\">https://github.com/rust-lang/rust/pull/53247/files</a><br>\nanyway, I'm self-reviewing to find the bug.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lbzNRTA5oRRz-b7BPTWdenIO/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/lbzNRTA5oRRz-b7BPTWdenIO/pasted_image.png\"></a></div>",
        "id": 132563264,
        "sender_full_name": "csmoe",
        "timestamp": 1534922189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> you could try compiling a minimal <code>#![no_core]</code>library to see if you can minimise the problem.</p>",
        "id": 132574020,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1534939280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> thanks</p>",
        "id": 132574085,
        "sender_full_name": "csmoe",
        "timestamp": 1534939359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ok, doing a local build now</p>",
        "id": 132591584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534959681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> so I fixed one problem -- but there are more. <a href=\"https://github.com/rust-lang/rust/pull/53247#issuecomment-415846128\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247#issuecomment-415846128\">See my comments here</a> -- let me know if that makes any sense.</p>",
        "id": 132712287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535136140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thank you, I'll fix the rest and recheck the other potential bug with the new place workflow.<br>\nbtw, would you mind sharing  your stack overflow debugging approach generally?(or maybe this bug is just discovered by reviewing)</p>",
        "id": 132717989,
        "sender_full_name": "csmoe",
        "timestamp": 1535142664
    },
    {
        "content": "<p>in this case, I did this:</p>",
        "id": 132717999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142677
    },
    {
        "content": "<p>first, <code>./x.py build ... -vv</code></p>",
        "id": 132718001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142686
    },
    {
        "content": "<p>this will cause it to print out the command it was using</p>",
        "id": 132718004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142692
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\"><pre><span></span>rustc command: &quot;LD_LIBRARY_PATH&quot;=&quot;/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1/lib:/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1-std/release/deps:/home/\\\nnmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &quot;/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;--crate-name&quot; &quot;core&quot; &quot;libcore/lib.rs&quot; &quot;--crate-ty\\\npe&quot; &quot;lib&quot; &quot;--emit=dep-info,link&quot; &quot;-C&quot; &quot;opt-level=2&quot; &quot;-C&quot; &quot;metadata=b33d847693b19528-rustc&quot; &quot;-C&quot; &quot;extra-filename=-b33d847693b19528&quot; &quot;--out-dir&quot; &quot;/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux\\\n-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-C&quot; &quot;incremental=/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-li\\\nnux-gnu/release/incremental&quot; &quot;-L&quot; &quot;dependency=/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-L&quot; &quot;dependency=/home/nmatsakis/versioned/\\\nrust-3/build/x86_64-unknown-linux-gnu/stage1-std/release/deps&quot; &quot;--cfg&quot; &quot;stage1&quot; &quot;--sysroot&quot; &quot;/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage1&quot; &quot;-Cprefer-dynamic&quot; &quot;-Cdebuginfo=1&quot; &quot;-C\\\n&quot; &quot;debug-assertions=y&quot; &quot;-C&quot; &quot;codegen-units=28&quot; &quot;-C&quot; &quot;link-args=-Wl,-rpath,$ORIGIN/../lib&quot; &quot;-Z&quot; &quot;force-unstable-if-unmarked&quot; &quot;-Dwarnings&quot; &quot;-Dbare_trait_objects&quot;\n</pre></div>",
        "id": 132718065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142727
    },
    {
        "content": "<p>kind of a pain to parse visually :)</p>",
        "id": 132718077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142742
    },
    {
        "content": "<p>in any case, then you find the place in there where the rustc executable is</p>",
        "id": 132718085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142753
    },
    {
        "content": "<p>and you put <code>gdb --args </code> in front of it (if using linux)</p>",
        "id": 132718089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142761
    },
    {
        "content": "<p>type <code>r</code></p>",
        "id": 132718093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142766
    },
    {
        "content": "<p>when it crashes, you can run the <code>up</code> command various times to see the points in the cycle</p>",
        "id": 132718102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142779
    },
    {
        "content": "<p>you can also press <code>bt</code> but for overflow there tend to be a ton of frames :)</p>",
        "id": 132718109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535142788
    },
    {
        "content": "<p>really helps, thank you :)</p>",
        "id": 132718183,
        "sender_full_name": "csmoe",
        "timestamp": 1535142853
    },
    {
        "content": "<p>if you want me to help with the next cycle you encounter, I can do so =)</p>",
        "id": 132718337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535143065
    },
    {
        "content": "<p>I'll try to resolve it, if stuck, will ping you here. really thanks :)</p>",
        "id": 132718442,
        "sender_full_name": "csmoe",
        "timestamp": 1535143198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> how goes it?</p>",
        "id": 132876203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535398787
    },
    {
        "content": "<p>stack overflow cleared, trying to fix the <code>broken MIr</code> err</p>",
        "id": 132920846,
        "sender_full_name": "csmoe",
        "timestamp": 1535466594
    },
    {
        "content": "<p>ok, I can try a local build and see what I see</p>",
        "id": 132921185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535466921
    },
    {
        "content": "<p>well I can definitely reproduce the broken MIR =)</p>",
        "id": 132921638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535467368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I've been looking at your PR some</p>",
        "id": 133024028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535579277
    },
    {
        "content": "<p>I am a bit worried about perf implications of some aspects of it (in particular, the modifications to MIR builder may be problematic since they seem to do a lot of interning)</p>",
        "id": 133024073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535579301
    },
    {
        "content": "<p>but I guess let's get it working first :)</p>",
        "id": 133024078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535579306
    },
    {
        "content": "<p>(interning stuff like <code>Place.field(tcx, ...)</code>)?</p>\n<p>my self-review almost done, but still cannot capture the logic bug</p>",
        "id": 133051928,
        "sender_full_name": "csmoe",
        "timestamp": 1535625856
    },
    {
        "content": "<p>Re: efficiency, my thought is that we may want to rework the MIR builder so it doesn't return a fully-formed <code>Place</code>  but rather a kind of \"place builder\" that (using a <code>Vec</code>) that we can intern once we are done.</p>",
        "id": 133055757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631038
    },
    {
        "content": "<p>but let's find the logic bug first I think</p>",
        "id": 133055762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631049
    },
    {
        "content": "<p>I'm doing a bit of investigating on the side</p>",
        "id": 133055840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631138
    },
    {
        "content": "<p>this is where things go wrong:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-08-30T12:15:51Z: rustc_mir::borrow_check::nll::type_check: sanitize_place: Place { base: _1, elems: [Deref, Index(_17)] }\nDEBUG 2018-08-30T12:15:51Z: rustc_mir::borrow_check::nll::type_check: prove_predicates(predicate=Binder(TraitPredicate(&lt;&amp;mut [u8] as marker::Copy&gt;)), locations=Interesting(bb16[0]))\nDEBUG 2018-08-30T12:15:51Z: rustc_mir::borrow_check::nll::type_check: prove_predicate(predicate=Binder(TraitPredicate(&lt;&amp;mut [u8] as marker::Copy&gt;)), location=Interesting(bb16[0]))\n</pre></div>",
        "id": 133056163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631541
    },
    {
        "content": "<p>if you look at the MIR, you will see that <code>_1</code> has type <code>&amp;mut [u8]</code></p>",
        "id": 133056177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631554
    },
    {
        "content": "<p>the MIR in question is:</p>",
        "id": 133056180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>CheckedAdd(Place { base: _1, elems: [Deref, Index(_17)] }, const 1u8)\n</pre></div>",
        "id": 133056185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631573
    },
    {
        "content": "<p>in particular, <code>Place { base: _1, elems: [Deref, Index(_17)] }</code> should not have the type <code>&amp;mut [u8]</code> but rather <code>[u8]</code></p>",
        "id": 133056193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631592
    },
    {
        "content": "<p>ah, I think the bug is in the changes to <code>sanitize_place</code></p>",
        "id": 133056253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631651
    },
    {
        "content": "<p>it seems to just ignore the projections altogether now</p>",
        "id": 133056258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631662
    },
    {
        "content": "<p>hmm not quite</p>",
        "id": 133056269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631685
    },
    {
        "content": "<p>ps I see a lot of code like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">has_no_projection</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(){</span><span class=\"w\"> </span><span class=\"cm\">/* side effect */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133056277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631707
    },
    {
        "content": "<p>afaict it would be simpler to just do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(){</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133056282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631719
    },
    {
        "content": "<p>since, if the vector is empty, that has no effect</p>",
        "id": 133056323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631731
    },
    {
        "content": "<p>anyway, I'm trying <a href=\"https://gist.github.com/nikomatsakis/150aae73abcdd09fbed63af253454479\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/150aae73abcdd09fbed63af253454479\">this diff</a> and we'll see what effect it has</p>",
        "id": 133056366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535631805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ok I pushed a commit that seems to solve a lot of problems. I'll leave a few tips on the <em>next</em> problem in the PR I think</p>",
        "id": 133060256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks, your tips will be addressed soon</p>",
        "id": 133060276,
        "sender_full_name": "csmoe",
        "timestamp": 1535636107
    },
    {
        "content": "<p>did you ever add a <code>split</code> function to <code>Place</code> as I suggested?</p>",
        "id": 133060284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636125
    },
    {
        "content": "<p>I don't see one, so maybe not</p>",
        "id": 133060287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636128
    },
    {
        "content": "<p>I think it is what we need for the next problem :)</p>",
        "id": 133060296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636139
    },
    {
        "content": "<p>I have added it, early named <code>split_projection</code>, now <code>elem_base</code>? let me have a look.</p>",
        "id": 133060392,
        "sender_full_name": "csmoe",
        "timestamp": 1535636228
    },
    {
        "content": "<p>I have to look at the details of how you defined <code>Place</code>.</p>",
        "id": 133060527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636391
    },
    {
        "content": "<p>oops, I removed <code>split_projection</code> in my latest commits, since eddyb said it is not needed  from irc</p>",
        "id": 133060535,
        "sender_full_name": "csmoe",
        "timestamp": 1535636400
    },
    {
        "content": "<p>I see</p>",
        "id": 133060576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636405
    },
    {
        "content": "<p>I disagree :)</p>",
        "id": 133060577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636406
    },
    {
        "content": "<p>but maybe</p>",
        "id": 133060588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636415
    },
    {
        "content": "<p>in many cases it is not</p>",
        "id": 133060590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636419
    },
    {
        "content": "<p>in this particular case, maybe</p>",
        "id": 133060594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636421
    },
    {
        "content": "<p>let me leave my comment anyway</p>",
        "id": 133060599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636425
    },
    {
        "content": "<p>okay</p>",
        "id": 133060617,
        "sender_full_name": "csmoe",
        "timestamp": 1535636452
    },
    {
        "content": "<p>I think ti'd be useful to be able to treat a <code>Place</code> as a tree <em>or</em> a slice</p>",
        "id": 133060621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636461
    },
    {
        "content": "<p>which seems like it <em>should</em> be possible if we set things up right</p>",
        "id": 133060630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636474
    },
    {
        "content": "<p>comment: <a href=\"https://github.com/rust-lang/rust/pull/53247/files#r214034747\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247/files#r214034747\">https://github.com/rust-lang/rust/pull/53247/files#r214034747</a></p>",
        "id": 133060649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535636512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, If you have extra time, could you take a look at the <code>place_conflict</code> diffs <a href=\"https://github.com/rust-lang/rust/pull/53247/files#diff-97da28e7b634e3c63bd18a6dc618d962\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247/files#diff-97da28e7b634e3c63bd18a6dc618d962\">https://github.com/rust-lang/rust/pull/53247/files#diff-97da28e7b634e3c63bd18a6dc618d962</a> ?(maybe you have already reviewed that).</p>",
        "id": 133061540,
        "sender_full_name": "csmoe",
        "timestamp": 1535637276
    },
    {
        "content": "<p>my new conflict checking workflow: <br>\n1. checking base<br>\n2. if base EqOrDisjoint, then process to elems<br>\n3. if base Disjoint, return true immediately</p>",
        "id": 133061681,
        "sender_full_name": "csmoe",
        "timestamp": 1535637443
    },
    {
        "content": "<p>I wanna your review since I feel a bit mess when rewrite that</p>",
        "id": 133061754,
        "sender_full_name": "csmoe",
        "timestamp": 1535637494
    },
    {
        "content": "<p>ok, will review</p>",
        "id": 133062394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535638163
    },
    {
        "content": "<p>update: stuck by <code>const_err </code><br>\n<a href=\"/user_uploads/4715/izQKh0-HVRDXx9C5pXr72llR/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/izQKh0-HVRDXx9C5pXr72llR/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/izQKh0-HVRDXx9C5pXr72llR/pasted_image.png\"></a></div>",
        "id": 133429161,
        "sender_full_name": "csmoe",
        "timestamp": 1536223061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I've been meaning to come back to this branch. I'm mildly worried that we should see if we can find a way to take another, less disruptive stab at this refactoring... do you have new commits I should pull, in any case?</p>",
        "id": 133432275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536227405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, latest commits had been pushed</p>",
        "id": 133432313,
        "sender_full_name": "csmoe",
        "timestamp": 1536227507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>I'm mildly worried that we should see if we can find a way to take another</p>\n</blockquote>\n<p>yep, I think so, the master has merged several <code>Place</code>  related PRs and my commits are very hybrid.<br>\n(really regretted that i hadn't followed the  <code>change-check-pass-change</code> commit workflow your told me in the <code>DebrjinIndex</code> PR)</p>",
        "id": 133432633,
        "sender_full_name": "csmoe",
        "timestamp": 1536227927
    },
    {
        "content": "<p>I have to think about what those gradual steps <em>are</em> perhaps</p>",
        "id": 133432651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536227963
    },
    {
        "content": "<p>one thing I could imagine: not changing anything about the actual <code>Place</code> <em>structure</em>, just adding methods that convert a Place into the new format, and then converting the algorithms one by one</p>",
        "id": 133432660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536227990
    },
    {
        "content": "<p>the truth is, these sorts of refactorings are hard to pull off :)</p>",
        "id": 133432717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536228028
    },
    {
        "content": "<p>I don't see any new commits btw...? the last I see is 552a935f26, is that right?</p>",
        "id": 133432723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536228046
    },
    {
        "content": "<p>In any case, I got to go, bbl</p>",
        "id": 133432732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536228058
    },
    {
        "content": "<p>btw, as eddyb mentioned in IRC, he wanna refactor <code>Deref</code>out of  <code>Place</code></p>",
        "id": 133432818,
        "sender_full_name": "csmoe",
        "timestamp": 1536228150
    },
    {
        "content": "<p>yes 552a935</p>",
        "id": 133432823,
        "sender_full_name": "csmoe",
        "timestamp": 1536228166
    },
    {
        "content": "<blockquote>\n<p>btw, as eddyb mentioned in IRC, he wanna refactor <code>Deref</code>out of  <code>Place</code></p>\n</blockquote>\n<p>yes, I know. That's.. a much bigger job.</p>",
        "id": 133433871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536229720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> you around btw? we should maybe reserve a time to dig into this together and decide what next steps are</p>",
        "id": 133755798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536695357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i'll be here about 1 day later. will ping you then</p>",
        "id": 133795123,
        "sender_full_name": "csmoe",
        "timestamp": 1536754958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping, I'm back</p>",
        "id": 133882435,
        "sender_full_name": "csmoe",
        "timestamp": 1536843669
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> — I'll be back in a few minutes :)</p>",
        "id": 133882856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536844069
    },
    {
        "content": "<p>ok, back now <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, let's talk briefly...</p>",
        "id": 133884963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536845993
    },
    {
        "content": "<p>so I think we both agree that the existing PR is sort of doing too much in one bite, right?</p>",
        "id": 133885022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846013
    },
    {
        "content": "<p>still, it's quite useful as it contains some version of all the things we're going to have to do (well, most)</p>",
        "id": 133885053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846049
    },
    {
        "content": "<p>so we can kind of skim over it and see what the steps are and if there is a way to order them so that we can test them more piece-by-piece</p>",
        "id": 133885077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846071
    },
    {
        "content": "<p>there is one thing that I think we <em>are</em> missing still, which is that I think we may want to modify MIR construction so that we don't intern every little \"in between place\", but rather accumulate a full place and then intern the end result</p>",
        "id": 133885158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846140
    },
    {
        "content": "<blockquote>\n<p>so we can kind of skim over it and see what the steps are and if there is a way to order them so that we can test them more piece-by-piece</p>\n</blockquote>\n<p>oh, and I think it's useful for another reason: I strongly suspect we'll be kind of copying over these hunks as we go</p>",
        "id": 133885238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846225
    },
    {
        "content": "<p>so what are the pieces?</p>\n<ul>\n<li>rewriting some algorithms to operate using iteration and not recursion</li>\n<li>separating out a <code>PlaceBuilder</code> for use during MIR construction </li>\n<li>changing the actual representation itself and adding whatever interning code etc is required</li>\n</ul>",
        "id": 133885371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846338
    },
    {
        "content": "<p>I think that's it?</p>",
        "id": 133885375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846343
    },
    {
        "content": "<p>I think where I would start is by creating an alternative place, let's call it <code>PlaceSlice&lt;'tcx&gt;</code> or <code>Place2</code> or something; this defines the new representation</p>",
        "id": 133885442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846381
    },
    {
        "content": "<p>then I would have a way to convert from the existing <code>Place</code> into that form</p>",
        "id": 133885446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846390
    },
    {
        "content": "<p>impl From&lt;Place&gt; for NewPlace like?</p>",
        "id": 133885459,
        "sender_full_name": "csmoe",
        "timestamp": 1536846414
    },
    {
        "content": "<p>then I would go through and find the algorithms you had to rewrite — starting with the ones (like <code>places_conflict</code>) that work better using iteration</p>",
        "id": 133885461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846416
    },
    {
        "content": "<blockquote>\n<p>impl From&lt;Place&gt; for NewPlace like?</p>\n</blockquote>\n<p>well, I was thinking more like <code>place.as_new_place(tcx)</code></p>",
        "id": 133885477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846431
    },
    {
        "content": "<p>or <code>tcx.as_new_place(place)</code></p>",
        "id": 133885487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846442
    },
    {
        "content": "<p>the reason being you will want the tcx to do interning</p>",
        "id": 133885493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846448
    },
    {
        "content": "<p>this basically lets us add the \"new repr + intern\" code without breaking anything yet :)</p>",
        "id": 133885502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846459
    },
    {
        "content": "<p>then we can go to each algorithm, 1 by 1, and have them convert from \"old place\" to \"new place\"</p>",
        "id": 133885518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846473
    },
    {
        "content": "<p>(it's slow, but so what)</p>",
        "id": 133885522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846478
    },
    {
        "content": "<p>once you've converted an algorithm, you can then run tests, everything should still work</p>",
        "id": 133885569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846494
    },
    {
        "content": "<p>eventually we should be able to remove all uses of the original place</p>",
        "id": 133885585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846520
    },
    {
        "content": "<p>I would probably do this by making the details of the struct private or something, running <code>x.py check</code>, find a place that breaks. Make it public again, but change that place. Then repeat.</p>",
        "id": 133885617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846550
    },
    {
        "content": "<p>at that point we'll have a slow compiler but a working on that basically uses the new places only</p>",
        "id": 133885627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846564
    },
    {
        "content": "<p>okay, get it.<br>\n I'll start working on that with <code>change-test-change</code> flow tomorrow(midnight now in utc+8)</p>",
        "id": 133885628,
        "sender_full_name": "csmoe",
        "timestamp": 1536846565
    },
    {
        "content": "<p>finally then we can figure out the MIR construction piece and just make the new places from the start</p>",
        "id": 133885640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846578
    },
    {
        "content": "<p>ok, let me know how it goes</p>",
        "id": 133885663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846591
    },
    {
        "content": "<p>thank you :)</p>",
        "id": 133885720,
        "sender_full_name": "csmoe",
        "timestamp": 1536846613
    },
    {
        "content": "<p>also, once you've got the first commit (the one that just adds a new kind of place but doesn't really use it yet), ping me so I can take a look :)</p>",
        "id": 133885751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846652
    },
    {
        "content": "<p>okay.</p>",
        "id": 133885769,
        "sender_full_name": "csmoe",
        "timestamp": 1536846672
    },
    {
        "content": "<p>cool!</p>",
        "id": 133885773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846677
    },
    {
        "content": "<p>PS I will just share with you one concern. I like 99.5% sure that — once we're done — this will be a better way to represent places. but there is the chance we'll decide otherwise. ;)</p>",
        "id": 133885785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846695
    },
    {
        "content": "<p>(I am particularly confident having seen your PR, a lot of the algorithms and code felt more natural)</p>",
        "id": 133885792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846708
    },
    {
        "content": "<p>(and I think we can trivially recover the \"recursive\" style of Place as well, so we've lost nothing)</p>",
        "id": 133885816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846722
    },
    {
        "content": "<p>anyway, that's always the risk with refactorings I guess though</p>",
        "id": 133885855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536846741
    },
    {
        "content": "<p>a bit sorry that I can't give you some more constructive reply as a newbie, but I'll try my best to land your instructions, at least.</p>",
        "id": 133886109,
        "sender_full_name": "csmoe",
        "timestamp": 1536846999
    },
    {
        "content": "<p>I'm mostly just prep'ing you :)</p>",
        "id": 133886265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847179
    },
    {
        "content": "<p>that is, warning you</p>",
        "id": 133886277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847192
    },
    {
        "content": "<p>but I figure, either way, you got a tour of the codebase</p>",
        "id": 133886279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847196
    },
    {
        "content": "<p>:P</p>",
        "id": 133886281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847198
    },
    {
        "content": "<p>as I said, i'm pretty sure we want to go in this direction</p>",
        "id": 133886332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847205
    },
    {
        "content": "<p>yep :)</p>",
        "id": 133886373,
        "sender_full_name": "csmoe",
        "timestamp": 1536847262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nupdate: introduce new place definition<br>\n<a href=\"https://github.com/csmoe/rust/commit/fde10d88700968e35af4cac0ab9ad2c724dc9635\" target=\"_blank\" title=\"https://github.com/csmoe/rust/commit/fde10d88700968e35af4cac0ab9ad2c724dc9635\">https://github.com/csmoe/rust/commit/fde10d88700968e35af4cac0ab9ad2c724dc9635</a></p>",
        "id": 133937126,
        "sender_full_name": "csmoe",
        "timestamp": 1536910856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> looking good =) we probably want to write the code to convert from <code>Place</code> to <code>NeoPlace</code> I guess :)</p>",
        "id": 133957044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536936026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nupdate: implement .as_new_place for TyCtxt<br>\n<a href=\"https://github.com/csmoe/rust/commit/ea0d974ce01abc8f2c09b8f9516f9e8fc109b1e9\" target=\"_blank\" title=\"https://github.com/csmoe/rust/commit/ea0d974ce01abc8f2c09b8f9516f9e8fc109b1e9\">https://github.com/csmoe/rust/commit/ea0d974ce01abc8f2c09b8f9516f9e8fc109b1e9</a></p>",
        "id": 134001100,
        "sender_full_name": "csmoe",
        "timestamp": 1536997006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I noticed one bug, left <a href=\"https://github.com/csmoe/rust/commit/ea0d974ce01abc8f2c09b8f9516f9e8fc109b1e9#r30516559\" target=\"_blank\" title=\"https://github.com/csmoe/rust/commit/ea0d974ce01abc8f2c09b8f9516f9e8fc109b1e9#r30516559\">a comment</a></p>",
        "id": 134006069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay fixed, then I'll \"copy\" the methods of old_place to <code>NeoPlace</code>.</p>",
        "id": 134007212,
        "sender_full_name": "csmoe",
        "timestamp": 1537008169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is the comment on <a href=\"https://github.com/rust-lang/rust/pull/53247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247\">https://github.com/rust-lang/rust/pull/53247</a> just antiquated?</p>",
        "id": 134185487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537297063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 134228451,
        "sender_full_name": "csmoe",
        "timestamp": 1537359577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nfor some data structures wrap <code>Place</code> inside them, like <code>T(Place)</code>, should I replace inner <code>Place</code> with <code>NeoPlace</code> or just leave the def unchanged and convert it to <code>NeoPlace</code> later in every method acted on it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">as_new_place</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>EDIT: i'd take the later approach since early changes on def is kind of breaking change, it's hard to maintain.</p>",
        "id": 134514523,
        "sender_full_name": "csmoe",
        "timestamp": 1537779973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> sounds wise... how goes?</p>",
        "id": 134535057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537804511
    },
    {
        "content": "<p>goes well locally</p>",
        "id": 134535154,
        "sender_full_name": "csmoe",
        "timestamp": 1537804571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for the inelegant <code>.has_no_projection()</code> checking you said when we wanna match with  place without projection, how about add a helper as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">NeoPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// Base.[]</span>\n<span class=\"w\">  </span><span class=\"c1\">//       ^^ no projection</span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">bare_place</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceBase</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then the old matching <br>\n<code>if let Some(Place::Local(...)) = old_place</code><br>\n =&gt;<br>\n<code>if let Some(PlaceBase::Local) = neo_place.bare_place()</code></p>",
        "id": 134648612,
        "sender_full_name": "csmoe",
        "timestamp": 1537942380
    },
    {
        "content": "<p>ok, CI said yes about this, I'll move forward, if you have any suggestions, i'll be back to fixup</p>",
        "id": 134663566,
        "sender_full_name": "csmoe",
        "timestamp": 1537958488
    },
    {
        "content": "<blockquote>\n<p>how about add a helper as:</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> sounds reasonable :)</p>",
        "id": 134686514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537978590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <a href=\"https://github.com/rust-lang/rust/pull/54426#pullrequestreview-159997132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#pullrequestreview-159997132\">left a comment on the PR</a></p>",
        "id": 134846730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538163476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> an unrelated question:<br>\nwhy this snippet failed as <code>Eq</code> seems already implemented for <code>fn</code>?  cc <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html#implementors\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html#implementors\">https://doc.rust-lang.org/std/cmp/trait.Eq.html#implementors</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0369</span><span class=\"p\">]</span>: <span class=\"nc\">binary</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">==</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">applied</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"n\">foo</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">12</span>:<span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">an</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">PartialEq</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"n\">foo</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?gist=5b2ba6a3308e2ff369e67348c8645023&amp;version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=5b2ba6a3308e2ff369e67348c8645023&amp;version=nightly&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?gist=5b2ba6a3308e2ff369e67348c8645023&amp;version=nightly&amp;mode=debug&amp;edition=2018</a></p>",
        "id": 134881580,
        "sender_full_name": "csmoe",
        "timestamp": 1538225144
    },
    {
        "content": "<p>Hmm, this seems dubious. AFAIK Rust does not guarantee that different functions won't have the same address. So maybe this is intended, to avoid bugs?</p>",
        "id": 134884220,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538230371
    },
    {
        "content": "<p>it compiles if we annotate x and y (and correctly panics on the assert_eq) <a href=\"https://play.rust-lang.org/?gist=466217d00a9cb33e9f5156046c85603a&amp;version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=466217d00a9cb33e9f5156046c85603a&amp;version=nightly&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?gist=466217d00a9cb33e9f5156046c85603a&amp;version=nightly&amp;mode=debug&amp;edition=2018</a></p>",
        "id": 134888396,
        "sender_full_name": "memoryruins",
        "timestamp": 1538239266
    },
    {
        "content": "<p>compiling on release causes them to have the same address, but the assert will still panic</p>",
        "id": 134890241,
        "sender_full_name": "memoryruins",
        "timestamp": 1538242723
    },
    {
        "content": "<p>wait, adding a println doesnt make the assert panic though? <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span> <a href=\"https://play.rust-lang.org/?gist=ba8b4da114bac52f4e94eaaa0d8f1e98&amp;version=nightly&amp;mode=release&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=ba8b4da114bac52f4e94eaaa0d8f1e98&amp;version=nightly&amp;mode=release&amp;edition=2018\">https://play.rust-lang.org/?gist=ba8b4da114bac52f4e94eaaa0d8f1e98&amp;version=nightly&amp;mode=release&amp;edition=2018</a></p>",
        "id": 134907230,
        "sender_full_name": "memoryruins",
        "timestamp": 1538279522
    },
    {
        "content": "<p>an issue was opened after tossing into another chat <a href=\"https://github.com/rust-lang/rust/issues/54685\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54685\">https://github.com/rust-lang/rust/issues/54685</a></p>",
        "id": 134907863,
        "sender_full_name": "memoryruins",
        "timestamp": 1538280821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131022\">@Gabriel Majeri</span> <span class=\"user-mention\" data-user-id=\"125246\">@memoryruins</span>  thanks, it makes no sense to compare two pointers(raw address), as ishitatsuyuki <a href=\"https://github.com/rust-lang/rust/issues/54685#issuecomment-425694676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54685#issuecomment-425694676\">said</a>:</p>\n<blockquote>\n<p>We run mergefunc pass on release builds. Anyway, can you explain why this is a problem? Rust does not make any guarantee on pointer values.</p>\n</blockquote>\n<p>I messed up the <code>fn</code> type and function pointer in the comparison</p>",
        "id": 134909213,
        "sender_full_name": "csmoe",
        "timestamp": 1538283907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> fn pointers implement <code>PartialEq</code> so it's understandable to expect some consistency. the conversation on the thread has led to proposing a patch of llvm (it affects constant globals too)</p>",
        "id": 134981704,
        "sender_full_name": "memoryruins",
        "timestamp": 1538412114
    },
    {
        "content": "<p>that's great:)</p>",
        "id": 134981798,
        "sender_full_name": "csmoe",
        "timestamp": 1538412196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> the problem in your original example is that the values are not actually of <code>fn</code> type, but perhaps that was clarified for you already?</p>",
        "id": 134985350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538416164
    },
    {
        "content": "<p>yes</p>",
        "id": 135026588,
        "sender_full_name": "csmoe",
        "timestamp": 1538475949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> how's it going?</p>",
        "id": 135213661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538684129
    },
    {
        "content": "<p>sorry for postponing,  I have been preparing for an exam recently. will ping for review with commits.</p>",
        "id": 135350240,
        "sender_full_name": "csmoe",
        "timestamp": 1538913839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> saw your comment there, I'm trapped in a China M.S. entrance exam(Dec. 22), so I cannot allocate enough time to the complicated parts but cleaning up small stuffs about neo_place when taking a break from the books.<br>\nI feel good with current incremental refactoring so far and beg your patience, this issue can be fixed within 1 week once I'm freed from the exam.<br>\nbut if you wanna the place be replaced as soon as possible, splitting is fine.</p>",
        "id": 135912381,
        "sender_full_name": "csmoe",
        "timestamp": 1539708314
    },
    {
        "content": "<p>nah it's fine, I was just worried you were not having time and I didn't want to see the PR flounder after you've put so much good work into it</p>",
        "id": 135912783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539708706
    },
    {
        "content": "<p>I don't think it's <em>urgent</em> per se</p>",
        "id": 135912791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539708718
    },
    {
        "content": "<p>thank you :)</p>",
        "id": 135912856,
        "sender_full_name": "csmoe",
        "timestamp": 1539708778
    },
    {
        "content": "<p>(Probably better to wait until after October 25th to land the refactoring, IMO ... to avoid losing time rebasing last minute PRs for the edition ....)</p>",
        "id": 135921987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539716595
    },
    {
        "content": "<p>it won't be ready by then anyway :)</p>",
        "id": 135922604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539717185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm interested in getting involved in this part of the code, if <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is ok I can take a look and start to figure out what's going on and then if <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> wants I can try to help them, pair or something like that</p>",
        "id": 135933661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539728060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> thank you<br>\nso let me take a summary here:<br>\n1. niko mentored me to refactor <code>Place</code> <a href=\"https://github.com/rust-lang/rust/pull/54426\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426\">Take 2: step-by-step</a> instead of replacing all its appearances <a href=\"https://github.com/rust-lang/rust/pull/53247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247\">Take 1: at once</a>(this approach is really hard to maintain)<br>\n2. the <code>Place</code> itself and needed methods were already refactored for <code>NeoPlace</code>(it will be rename to <code>Place</code> finally), as you can check them in <code>mir/mod.rs</code> <code>mir/tcx.rs</code>, so you can pull my branch(I rebased it onto the latest master just now) and continue the following work.<br>\n3. the tasks left are just rewriting the original recursive operations on <code>Place</code> into iterative, as diff showed in the img <a href=\"user_uploads/4715/Cez2b9_CykGYej_4qOliTceT/pasted_image.png\" target=\"_blank\" title=\"user_uploads/4715/Cez2b9_CykGYej_4qOliTceT/pasted_image.png\">pasted image</a><br>\n- btw, a common workflow is:<br>\n  recur_logic(old_place)<br>\n  =&gt; let neo_place = tcx.as_new_place(old_place)<br>\n  =&gt; recur_logic_to_iter(neo_place)<br>\n4. when all the recursive stuffs are cleared, just delete old <code>Place</code> and rename <code>NeoPlace</code> to <code>Place</code>, finally clean up all the conversions by <code>as_new_place</code>,.</p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/Cez2b9_CykGYej_4qOliTceT/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"user_uploads/4715/Cez2b9_CykGYej_4qOliTceT/pasted_image.png\"></a></div>",
        "id": 135948624,
        "sender_full_name": "csmoe",
        "timestamp": 1539750109
    },
    {
        "content": "<p>for anyone interested in this,  the remaining tasks are not hard based on my experience in take1, the most complicated parts are <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/places_conflict.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/places_conflict.rs\">places_conflict</a> and <a href=\"https://github.com/rust-lang/rust/pull/54426#discussion_r221360415\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#discussion_r221360415\">describe_place</a>, but they're kind of easy with the existing comments/niko's reviews.</p>",
        "id": 135951473,
        "sender_full_name": "csmoe",
        "timestamp": 1539754918
    },
    {
        "content": "<p>I think it's a great idea to collaborate here</p>",
        "id": 135972101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782454
    },
    {
        "content": "<p>there are a large-ish number of small changes to make, after all</p>",
        "id": 135972114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782461
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135993421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539802722
    },
    {
        "content": "<p>thanks for the info <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span></p>",
        "id": 135993426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539802734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wanna your help in this <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/c246e70b57934ff7a4e6e236d1a4e41446f57a36\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/c246e70b57934ff7a4e6e236d1a4e41446f57a36\">diff</a><br>\nI've tried 4 times as the CI complained, but still failed at codegen <a href=\"https://github.com/rust-lang/rust/pull/54426#issuecomment-431584844\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#issuecomment-431584844\">testcases</a></p>",
        "id": 136171287,
        "sender_full_name": "csmoe",
        "timestamp": 1540046255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ok</p>",
        "id": 136275582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540222986
    },
    {
        "content": "<p>looking now</p>",
        "id": 136353543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540316828
    },
    {
        "content": "<p>left a comment with a possible source of the problem</p>",
        "id": 136354035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540317249
    },
    {
        "content": "<p>left a new comment <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span></p>",
        "id": 136433148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540411580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it still breaks.</p>",
        "id": 136468018,
        "sender_full_name": "csmoe",
        "timestamp": 1540462888
    },
    {
        "content": "<p>the logic for scalar is wrong as the codegen/scalar-pair-bool.rs failed?</p>",
        "id": 136468076,
        "sender_full_name": "csmoe",
        "timestamp": 1540462945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> did you push your latest?</p>",
        "id": 136473981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540470741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, it's latest</p>",
        "id": 136474987,
        "sender_full_name": "csmoe",
        "timestamp": 1540472152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just inform you, I'm back on this. but still cannot figure out what's wrong with codegen_llvm, so I'm gonna revert the diffs in <code>src/codegen_llvm</code> and move the refactoring direction to the other parts.</p>",
        "id": 147904998,
        "sender_full_name": "csmoe",
        "timestamp": 1542519266
    },
    {
        "content": "<p>update: rewrite places_confilct <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/3258cc057c710fb91b8057545610120ceb9329ae\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/3258cc057c710fb91b8057545610120ceb9329ae\">done</a></p>",
        "id": 147957459,
        "sender_full_name": "csmoe",
        "timestamp": 1542623616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ok -- as some point you and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> were talking about collaborating</p>",
        "id": 147981070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648729
    },
    {
        "content": "<p>I'm presuming that's not happened, but maybe it'd be useful?</p>",
        "id": 147981071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648740
    },
    {
        "content": "<p>sorry i've not had time to help out with debugging</p>",
        "id": 147981075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648745
    },
    {
        "content": "<p>but that could change</p>",
        "id": 147981077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648748
    },
    {
        "content": "<p>on wed is the code deadline for Rust 2018</p>",
        "id": 147981084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648754
    },
    {
        "content": "<p>I could prob spare a few hours after that</p>",
        "id": 147981093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542648758
    },
    {
        "content": "<p>yes</p>",
        "id": 147981546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542649266
    },
    {
        "content": "<p>I can collaborate</p>",
        "id": 147981549,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542649269
    },
    {
        "content": "<p>after I finish my assigned task I guess I can start helping</p>",
        "id": 147981562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1542649284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\ndoes <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.UpvarDecl.html#structfield.by_ref\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.UpvarDecl.html#structfield.by_ref\">upvardecl.by_ref</a> mean?:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{...};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">closure</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">^--</span><span class=\"n\">by_ref</span><span class=\"o\">?</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150926516,
        "sender_full_name": "csmoe",
        "timestamp": 1544015814
    },
    {
        "content": "<p>nope :) that is not an upvar</p>",
        "id": 150926531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015839
    },
    {
        "content": "<p>a by-ref upvar might be <code>foo</code> in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150926545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544015859
    },
    {
        "content": "<p>thanks, gocha <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 150926639,
        "sender_full_name": "csmoe",
        "timestamp": 1544015936
    },
    {
        "content": "<p>Upvar is a variable declared before the closure definition. Hence, the name up-var, so you stand at the closure definition and look up, to find your up var <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 150959062,
        "sender_full_name": "blitzerr",
        "timestamp": 1544042483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> sorry been unresponsive this week -- how is the PR going? I'll try to check in and do some reviews this morning</p>",
        "id": 151007713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have been working on this these days these days</p>",
        "id": 151007742,
        "sender_full_name": "csmoe",
        "timestamp": 1544104677
    },
    {
        "content": "<p>great!</p>",
        "id": 151007795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104689
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was maybe going to poke at it too? Not sure if you ever found any way to divide work</p>",
        "id": 151007808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544104701
    },
    {
        "content": "<p>new place_conflict was impl'd</p>",
        "id": 151007840,
        "sender_full_name": "csmoe",
        "timestamp": 1544104728
    },
    {
        "content": "<p>but still stuck by describe_neo_place, it's a bit complicated. I am trying to impl the tree structure you mentioned</p>",
        "id": 151008003,
        "sender_full_name": "csmoe",
        "timestamp": 1544104803
    },
    {
        "content": "<p>so maybe the <code>describe_place</code> can be divided into sub-task</p>",
        "id": 151008085,
        "sender_full_name": "csmoe",
        "timestamp": 1544104864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">base</span><span class=\"p\">.[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Deref</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"w\">     </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">c</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is this tree you expected?</p>",
        "id": 151008636,
        "sender_full_name": "csmoe",
        "timestamp": 1544105343
    },
    {
        "content": "<p>I'm not sure <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> what this notation means :)</p>",
        "id": 151010532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106923
    },
    {
        "content": "<p>what is \"base\" here?</p>",
        "id": 151010545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544106943
    },
    {
        "content": "<p><code>PlaceBase::Local</code> etc</p>",
        "id": 151010607,
        "sender_full_name": "csmoe",
        "timestamp": 1544106974
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54426#discussion_r220255568\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#discussion_r220255568\">https://github.com/rust-lang/rust/pull/54426#discussion_r220255568</a><br>\nhere is your review comment.</p>",
        "id": 151010642,
        "sender_full_name": "csmoe",
        "timestamp": 1544107018
    },
    {
        "content": "<p>same like comment for describe_place <a href=\"https://github.com/rust-lang/rust/pull/54426#discussion_r221360415\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#discussion_r221360415\">https://github.com/rust-lang/rust/pull/54426#discussion_r221360415</a></p>",
        "id": 151010759,
        "sender_full_name": "csmoe",
        "timestamp": 1544107091
    },
    {
        "content": "<p>so assuming <code>base</code> is (e.g.) a local variable like <code>x</code>, I expect <code>base.[a, Deref, b, c]</code> to mean:</p>\n<div class=\"codehilite\"><pre><span></span>base\n|\nfield: a\n|\nderef\n|\nb\n|\nc\n</pre></div>",
        "id": 151011215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107487
    },
    {
        "content": "<p>or put in rust struct notation:</p>\n<div class=\"codehilite\"><pre><span></span>PlaceProjection {\n  field: c,\n  base: PlaceProjection {\n    field: b,\n    base: PlaceProjection {\n      deref,\n      base: PlaceProjection {\n        field: a,\n        base: PlaceBase {\n            local: x\n        }\n      }\n    }\n  }\n}\n</pre></div>",
        "id": 151011282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 151011298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544107556
    },
    {
        "content": "<p>thanks, get the direction.</p>",
        "id": 151011667,
        "sender_full_name": "csmoe",
        "timestamp": 1544107833
    },
    {
        "content": "<p>hey, yeah, we could see a way in which I can help</p>",
        "id": 151012246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544108452
    },
    {
        "content": "<p>I guess, I'd need to catch up with what <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is already doing</p>",
        "id": 151012272,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544108472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any ideas for that?</p>",
        "id": 151012279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544108478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'll update the status tomorrow(it's local midnight)</p>",
        "id": 151012498,
        "sender_full_name": "csmoe",
        "timestamp": 1544108661
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 151013398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1544109285
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">capture_assign_part</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is <code>x.0</code> a upvar_field_projection? <a href=\"https://github.com/rust-lang/rust/blob/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2/src/librustc/mir/tcx.rs#L186\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2/src/librustc/mir/tcx.rs#L186\">is_upvar_field_projection</a></p>",
        "id": 152172375,
        "sender_full_name": "csmoe",
        "timestamp": 1545214751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>NeoPlace { base: _1, elems: [Deref, Field(field[0], &amp;mut (i32,)), Deref, Field(field[0], i32)] }\n</pre></div>\n\n\n<p>this is <code>x.0</code> written in on-working new_place.</p>",
        "id": 152172465,
        "sender_full_name": "csmoe",
        "timestamp": 1545214838
    },
    {
        "content": "<p>CI was happy with my new <a href=\"https://github.com/rust-lang/rust/pull/54426/files#diff-b3de64d5546855bc714650abe562b142\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/files#diff-b3de64d5546855bc714650abe562b142\">is_upvar_field_projection</a>, but while checking <code>x.0</code>, it failed.</p>",
        "id": 152172682,
        "sender_full_name": "csmoe",
        "timestamp": 1545215071
    },
    {
        "content": "<p>I think so..</p>",
        "id": 152173007,
        "sender_full_name": "davidtwco",
        "timestamp": 1545215506
    },
    {
        "content": "<p>okay, I'd recheck my refactoring of is_upvar_field_projection.</p>",
        "id": 152173162,
        "sender_full_name": "csmoe",
        "timestamp": 1545215702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  here is your <code>is_upvar_field_projection</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Mir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Field</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 1st</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// 2nd</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">to_ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_closure</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"p\">.</span><span class=\"n\">is_generator</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">by_ref</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">upvar_decls</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()].</span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>given <code>x.0</code>written as the old recursive <code>Place</code>:</p>\n<div class=\"codehilite\"><pre><span></span>Place {\n    elem: Field2,\n    base: Place {\n        elem: Deref,  // ERROR: base_ty is_not_closure\n        base: Place {\n            elem: Field1,\n            base: Place {\n                elem: deref,\n                base: Place {\n                    base: Local(1)\n                }\n            }\n        }\n    }\n}\n</pre></div>\n\n\n<p>while following your checking-flow,  <code>x.0</code> cannot be <code>upvar_field_projection</code>.</p>",
        "id": 152175602,
        "sender_full_name": "csmoe",
        "timestamp": 1545218687
    },
    {
        "content": "<p>I was probably wrong then, it's been a while since I messed with <code>is_upvar_field_projection</code>.</p>",
        "id": 152175725,
        "sender_full_name": "davidtwco",
        "timestamp": 1545218838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  could you give me some tips about validating a place<code>is_upvar_field_projection</code> with &gt;=2 <code>field</code> projection?</p>",
        "id": 152177519,
        "sender_full_name": "csmoe",
        "timestamp": 1545221414
    },
    {
        "content": "<p>this current version seems only works for place with only ONE <code>field</code></p>",
        "id": 152177526,
        "sender_full_name": "csmoe",
        "timestamp": 1545221438
    },
    {
        "content": "<p>as above, the base_ty of <code>field2</code> is by-passed by <code>field1</code>, <code>field1_ty</code> shadows the inner most ty_of_<code>Local</code>(closure ty info lives here)</p>",
        "id": 152177586,
        "sender_full_name": "csmoe",
        "timestamp": 1545221523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> hmm</p>",
        "id": 152209242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250149
    },
    {
        "content": "<p>are you saying you have a version that works but only for one field?</p>",
        "id": 152209246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250161
    },
    {
        "content": "<p>I should refresh my build of your branch I guess</p>",
        "id": 152209257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have translated the original method with neo_place and replace all its usages with new one,  CI was happy with the new one.<br>\nbut while trying to check <code>base.deref.field1.deref.field2</code>, it failed.<br>\nso I suspect that there is something wrong with the original checking logic if we declare <code>x.0</code> is <code>upvar_field_projection</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">is_upvar_field_projection</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">to_ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this flow works with <code>Base.deref. field1.deref</code>: unwarps <code>deref</code> and <code>field1</code>;  base = <code>Base.deref</code>; base_ty = base.ty(...); the base_ty derive from <code>Base</code> holds the <code>is_closure_generator</code> info.</p>\n<p>for  <code>Base.deref.field1.deref.field2</code>: after unwrapping <code>field2</code> and <code>deref</code>, base = <code>base.deref.field1</code>,  base_ty = base.ty(..); but this case the base_ty from <code>field1</code> lost the <code>is_closure_generator</code> info. so  <code>is_upvar_field_projection</code> checking failed.</p>",
        "id": 152263177,
        "sender_full_name": "csmoe",
        "timestamp": 1545319422
    },
    {
        "content": "<p>anyway, the tldr above can be ignored. since CI was happy with <code>is_upvar_field_projection</code> and I found some trick to avoid <code>is_upvar_field_projection</code>  checking with <code>x.0</code>.</p>",
        "id": 152263784,
        "sender_full_name": "csmoe",
        "timestamp": 1545319897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> what is current status of this branch anyway? I'm sorry this turned into such a monster project :) should I be starting up doing reviews again?</p>",
        "id": 152266183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545321992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> describe-place is finally done, but I'm sorry that I didn't follow the structure you suggested since that was kind new recursion while implementing it. my solution is a bit tricky. may i have your review on the latest 4 describe-place commits?</p>",
        "id": 152266761,
        "sender_full_name": "csmoe",
        "timestamp": 1545322418
    },
    {
        "content": "<p>and especially for the diffs in ui stderr, I made some changes on them.</p>",
        "id": 152266924,
        "sender_full_name": "csmoe",
        "timestamp": 1545322534
    },
    {
        "content": "<p>as for the status, I think the hardest time will be gone if you are happy with redescribe-place. the remaining work is easy.</p>",
        "id": 152267184,
        "sender_full_name": "csmoe",
        "timestamp": 1545322722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> sorry for not doing those reviews yet, will try to do so asap</p>",
        "id": 154205009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466965
    },
    {
        "content": "<p>holidays intervened</p>",
        "id": 154205011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were just discussing if collaboration would be helpful</p>",
        "id": 154205018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466985
    },
    {
        "content": "<p>sorry that I've promised to do so in the past and didn't have time</p>",
        "id": 154205076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546467017
    },
    {
        "content": "<p>can be around now</p>",
        "id": 154205078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546467022
    },
    {
        "content": "<p>need to catch up</p>",
        "id": 154205082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1546467026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if possible, would you mind taking a look at the stderr diffs(made by redescribe-place) first?</p>",
        "id": 154205277,
        "sender_full_name": "csmoe",
        "timestamp": 1546467308
    },
    {
        "content": "<p>I changed some deref descriptions like:<br>\nassignment to <code>*foo.bar</code> =&gt; assignment to <code>foo.bar</code></p>",
        "id": 154205360,
        "sender_full_name": "csmoe",
        "timestamp": 1546467442
    },
    {
        "content": "<p>ok</p>",
        "id": 154205372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546467476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> which commit is that in particular?</p>",
        "id": 154260936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546543842
    },
    {
        "content": "<p>I am looking now</p>",
        "id": 154260940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546543844
    },
    {
        "content": "<p>oh I guess \" re-describe place \"</p>",
        "id": 154261311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546544216
    },
    {
        "content": "<p>left some comments</p>",
        "id": 154262144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546545073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> amended some changes, reduced the stderr diffs to just 3 <code>ref foo</code><a href=\"https://github.com/rust-lang/rust/pull/54426#discussion_r245231108\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426#discussion_r245231108\">cases</a>.</p>",
        "id": 154395698,
        "sender_full_name": "csmoe",
        "timestamp": 1546589098
    },
    {
        "content": "<p><a href=\"#narrow/stream/122657-wg-nll/subject/.2352708-new-place/near/151011215\" title=\"#narrow/stream/122657-wg-nll/subject/.2352708-new-place/near/151011215\">https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/.2352708-new-place/near/151011215</a><br>\nhere is your suggestions to me, while tried to implement that, I felt like introducing another recursive datastructure.</p>",
        "id": 154395915,
        "sender_full_name": "csmoe",
        "timestamp": 1546589430
    },
    {
        "content": "<p>(really sorry for \"betray\"ing)</p>",
        "id": 154395973,
        "sender_full_name": "csmoe",
        "timestamp": 1546589555
    },
    {
        "content": "<p>the key for describing <code>Deref</code> is detecting <code>autoderef</code>, which controls whether <code>*</code> should be print.</p>",
        "id": 154396988,
        "sender_full_name": "csmoe",
        "timestamp": 1546591263
    },
    {
        "content": "<p>my approach is for each <code>Deref</code>elem, it is <code>autoderef</code> if the future contains autoderef_elem: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">autoderef_elem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(..)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Subslice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">ConstantIndex</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Index</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">autoderef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">..].</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">autoderef_elem</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154397144,
        "sender_full_name": "csmoe",
        "timestamp": 1546591492
    },
    {
        "content": "<p>for example: <code>base.[Deref1, Field, Deref2]</code>:<br>\n1. base: place = <code>base</code>;<br>\n2. deref1: its next elem is <code>Field</code>, and <code>autoderf = true</code>, thus no <code>*</code>, place = <code>base</code><br>\n3. field: place = <code>base.field</code><br>\n4. deref2: autoderef = <code>false</code>,  then <code>*</code> should be there, place = <code>*base.field</code></p>",
        "id": 154397332,
        "sender_full_name": "csmoe",
        "timestamp": 1546591760
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54426/commits/372e25a7f4ae363bc3a5b853b53de9387f676d8c#r245229701\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/372e25a7f4ae363bc3a5b853b53de9387f676d8c#r245229701\">trick</a> explanation:</p>",
        "id": 154397467,
        "sender_full_name": "csmoe",
        "timestamp": 1546592007
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">no_local_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">[</span><span class=\"n\">Local</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">Local</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">no_local_name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// see [check-explanation] below.</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">local_str</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"c1\">// Blame</span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to be honest, this snippet is ugly. </p>\n<p>[check-explanation]<br>\nall those check is for avoiding unindented panic  when we cannot get the name from <code>local_str()?</code><br>\nas you can see, I describe place <strong>from base to elems</strong>. when <code>local_str()?</code> panic, <br>\n<code>describe_place</code> will return <code>None</code> directly, but it should not in some cases. <br>\nin the original recursive flow, place is described <strong>from outer elems to base</strong>, although it cannot get a name from base, it still got a name from elem like <code>Field</code>.<br>\n so my check will skip <code>Local</code> base in those cases and just forward to elems description.</p>",
        "id": 154397618,
        "sender_full_name": "csmoe",
        "timestamp": 1546592282
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, I'll take another look. Would you object if I do a bit of experimentation and maybe push something?</p>",
        "id": 154429204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, whatever.</p>",
        "id": 154430702,
        "sender_full_name": "csmoe",
        "timestamp": 1546630060
    },
    {
        "content": "<p>btw, all the commits before the latest rec_lookup rewriting works fine(include re-describing).</p>",
        "id": 154431057,
        "sender_full_name": "csmoe",
        "timestamp": 1546630427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> would you want to try and schedule a time to chat synchronously about this? Maybe with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>? could be a video call or else maybe chat on zulip</p>",
        "id": 154864529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148416
    },
    {
        "content": "<p>it's been really hard for me to carve out time to follow up and I'm sorry, which is partly why I'm thinking scheduling time might help :)</p>",
        "id": 154864548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148430
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154864882,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547148716
    },
    {
        "content": "<p>it would be great so I can catch up</p>",
        "id": 154864934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547148730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> it's 17:00pm now in my local time, I'll be available in next 5 hours. if you are here, just ping me.</p>",
        "id": 154903245,
        "sender_full_name": "csmoe",
        "timestamp": 1547197109
    },
    {
        "content": "<p>we'll chat here.</p>",
        "id": 154903253,
        "sender_full_name": "csmoe",
        "timestamp": 1547197122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> hey, I’m not around, will be in 2hs but let’s coordinate a day and time</p>",
        "id": 154915709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547212192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> okay, I see, I'll be available again 9 hours later, it'll be 19:20pm at your timezone.</p>",
        "id": 154916280,
        "sender_full_name": "csmoe",
        "timestamp": 1547212832
    },
    {
        "content": "<p>during january I’m around between 12pm and 4pm GMT-3</p>",
        "id": 154918052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547214788
    },
    {
        "content": "<p><span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 154918057,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547214803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so how about writing down what you wanna know here? I'll try my best to clearfy. if really needed, I'll align your 4 hours.</p>",
        "id": 154919292,
        "sender_full_name": "csmoe",
        "timestamp": 1547215975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> just in case, right now I'm available but the idea was to make a call or chat with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 154919766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547216346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should we coordinate?</p>",
        "id": 154919772,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547216352
    },
    {
        "content": "<p>sorry about my tight schedule during january but I'm on vacations with my family and doing some work on hours when the sun exposure would be bad :)</p>",
        "id": 154919870,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547216413
    },
    {
        "content": "<p>ok, I was thinking more like \"some time next week\" vs right now</p>",
        "id": 154944022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237978
    },
    {
        "content": "<p>in the limit, we could do a doodle</p>",
        "id": 154944033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237991
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154944034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237992
    },
    {
        "content": "<p>maybe we should just do that</p>",
        "id": 154944035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237995
    },
    {
        "content": "<p>yes</p>",
        "id": 154944040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238000
    },
    {
        "content": "<p>I can build it if you want</p>",
        "id": 154944092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'd appreciate it =)</p>",
        "id": 154944376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238301
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154944404,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238325
    },
    {
        "content": "<p><a href=\"https://doodle.com/poll/7mwdnxdpbtrv8f9n\" target=\"_blank\" title=\"https://doodle.com/poll/7mwdnxdpbtrv8f9n\">https://doodle.com/poll/7mwdnxdpbtrv8f9n</a></p>",
        "id": 154944973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 154945026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238846
    },
    {
        "content": "<p>I filled it out</p>",
        "id": 154949236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> remember to complete the doodle so we can see when to meet <a href=\"https://doodle.com/poll/7mwdnxdpbtrv8f9n\" target=\"_blank\" title=\"https://doodle.com/poll/7mwdnxdpbtrv8f9n\">https://doodle.com/poll/7mwdnxdpbtrv8f9n</a></p>",
        "id": 155091425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547479446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> there are 2 possibilities, today 1pm GMT-3, which is in half an hour or wednesday 1pm GMT-3</p>",
        "id": 155091957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547479935
    },
    {
        "content": "<p>I'm fine with both, but unsure if doing a meeting in 30 minutes is a wise thing to do :P</p>",
        "id": 155091973,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547479974
    },
    {
        "content": "<p>let me know what do you think</p>",
        "id": 155092077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547480072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm fine with both <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155092390,
        "sender_full_name": "csmoe",
        "timestamp": 1547480387
    },
    {
        "content": "<p>no matter how long the meeting will take, I'll be there.<br>\na bit sorry for the time mismatching in the past days.</p>",
        "id": 155092569,
        "sender_full_name": "csmoe",
        "timestamp": 1547480539
    },
    {
        "content": "<p>no worries</p>",
        "id": 155092600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547480574
    },
    {
        "content": "<p>it's probably too late to let <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> know about the meeting for today</p>",
        "id": 155092616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547480592
    },
    {
        "content": "<p>I'd aim for wednesday 1pm GMT-3</p>",
        "id": 155092626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547480609
    },
    {
        "content": "<p>but let's wait for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 155092635,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547480618
    },
    {
        "content": "<p>ok, definitely wednesday 1pm GMT-3</p>",
        "id": 155094711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547482390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 155094738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547482423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"emoji emoji-23f3\" title=\"time ticking\">:time_ticking:</span></p>",
        "id": 155094819,
        "sender_full_name": "csmoe",
        "timestamp": 1547482474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I can send a calendar invite if you want</p>",
        "id": 155094869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547482523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yes, I need your ping.</p>",
        "id": 155094946,
        "sender_full_name": "csmoe",
        "timestamp": 1547482566
    },
    {
        "content": "<p>give me your email address if you want that :)</p>",
        "id": 155094976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547482596
    },
    {
        "content": "<p><a href=\"mailto:csmoe@msn.com\" title=\"mailto:csmoe@msn.com\">csmoe@msn.com</a></p>",
        "id": 155094987,
        "sender_full_name": "csmoe",
        "timestamp": 1547482607
    },
    {
        "content": "<p>done <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> both invited to the calendar event</p>",
        "id": 155095026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547482658
    },
    {
        "content": "<p><span class=\"emoji emoji-1f4c5\" title=\"calendar\">:calendar:</span></p>",
        "id": 155095092,
        "sender_full_name": "csmoe",
        "timestamp": 1547482695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> just in case, the meeting is confirmed for tomorrow (wednesday) 1pm GMT-3</p>",
        "id": 155179327,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547567067
    },
    {
        "content": "<p>Niko just confirmed that he is able</p>",
        "id": 155179335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547567080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  gotcha</p>",
        "id": 155179559,
        "sender_full_name": "csmoe",
        "timestamp": 1547567252
    },
    {
        "content": "<p>just to be clear, the meeting event is updated?</p>",
        "id": 155181331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568383
    },
    {
        "content": "<p>but yeah that time works for me</p>",
        "id": 155181351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568398
    },
    {
        "content": "<p>no, it's not updated just wednesday 1pm GMT-3</p>",
        "id": 155181375,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547568423
    },
    {
        "content": "<p>wait, it's not updated?</p>",
        "id": 155181448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568477
    },
    {
        "content": "<p>can we update it? :)</p>",
        "id": 155181506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568491
    },
    {
        "content": "<p>/me does some time zone arithmetic</p>",
        "id": 155181508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568493
    },
    {
        "content": "<p>my calendar shows 11 UTC-5, which -- I think -- is the same as 13 UTC-5 :P</p>",
        "id": 155181543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568529
    },
    {
        "content": "<p>but maybe I'm doing my math wrong or something</p>",
        "id": 155181566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547568546
    },
    {
        "content": "<blockquote>\n<p>my calendar shows 11 UTC-5, which -- I think -- is the same as 13 UTC-5 :P</p>\n</blockquote>\n<p>This is that new math I keep hearing about. <code>(11, -5) =?= (13, -5)</code></p>",
        "id": 155190758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547575998
    },
    {
        "content": "<p>11 UTC-5 = 13 UTC-3 (UTC-3 is my time zone)</p>",
        "id": 155191170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547576315
    },
    {
        "content": "<p>11+5=13+3 :)</p>",
        "id": 155191220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547576350
    },
    {
        "content": "<p>sure, but those aren't the numbers that were typed</p>",
        "id": 155192351,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547577180
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/HicRX7wUecvYe7VQcvj1EWeS/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HicRX7wUecvYe7VQcvj1EWeS/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/HicRX7wUecvYe7VQcvj1EWeS/pasted_image.png\"></a></div>",
        "id": 155192363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547577190
    },
    {
        "content": "<blockquote>\n<p>This is that new math I keep hearing about. <code>(11, -5) =?= (13, -5)</code></p>\n</blockquote>\n<p>die</p>",
        "id": 155196677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580302
    },
    {
        "content": "<p>you know what I meant :P</p>",
        "id": 155196694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547580307
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> meeting in 2 mins :)</p>",
        "id": 155264405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547654361
    },
    {
        "content": "<p>pong:)</p>",
        "id": 155264421,
        "sender_full_name": "csmoe",
        "timestamp": 1547654382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are we having the meeting here or a video call?</p>",
        "id": 155264509,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547654445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'd like to chat here, it's midnight here, my little brother sleeping aside, sorry</p>",
        "id": 155264653,
        "sender_full_name": "csmoe",
        "timestamp": 1547654575
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span>, let's wait for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> then</p>",
        "id": 155264854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547654760
    },
    {
        "content": "<p>meanwhile, can you explain more or less what the task was about and what have you done?</p>",
        "id": 155264912,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547654790
    },
    {
        "content": "<p>so meanwhile Niko is coming I can more or less catch up</p>",
        "id": 155264920,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547654801
    },
    {
        "content": "<p>okay</p>",
        "id": 155265072,
        "sender_full_name": "csmoe",
        "timestamp": 1547654909
    },
    {
        "content": "<p>this PR is intended to change the representation of <code>Place</code> from recursive into iteration as the issue wrote <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">https://github.com/rust-lang/rust/issues/52708</a></p>",
        "id": 155265235,
        "sender_full_name": "csmoe",
        "timestamp": 1547655040
    },
    {
        "content": "<p>niko mentored me to make it in an \"incremental\" way as:<br>\n 1. introduce a temp place named <code>NeoPlace</code></p>",
        "id": 155265381,
        "sender_full_name": "csmoe",
        "timestamp": 1547655144
    },
    {
        "content": "<p>2. then \"mirror\" all the methods associated to <code>Place</code> for <code>NeoPlace</code>(impl NeoPlace { ... })</p>",
        "id": 155265452,
        "sender_full_name": "csmoe",
        "timestamp": 1547655211
    },
    {
        "content": "<p>(this part was done)</p>",
        "id": 155265471,
        "sender_full_name": "csmoe",
        "timestamp": 1547655241
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 155265526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655258
    },
    {
        "content": "<p>first thing I wonder is what comprehends a <code>Place</code> thing</p>",
        "id": 155265542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655278
    },
    {
        "content": "<p>from the docs it says</p>",
        "id": 155265555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> /// A path to a value; something that can be evaluated without\n/// changing or disturbing program state.\n</pre></div>",
        "id": 155265559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655297
    },
    {
        "content": "<p>I wonder specifically about <code>changing or disturbing program state</code></p>",
        "id": 155265596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655320
    },
    {
        "content": "<p>what's an example of a path that disturbs the program state?</p>",
        "id": 155265617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655341
    },
    {
        "content": "<p>I guess assigning a thing is not considered a <code>Place</code>?</p>",
        "id": 155265625,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655351
    },
    {
        "content": "<p>I want to be 100% clear of what a <code>Place</code> is because I'm not 100% sure</p>",
        "id": 155265682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655371
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"mi\">1</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"c1\">// place</span>\n</pre></div>",
        "id": 155265685,
        "sender_full_name": "csmoe",
        "timestamp": 1547655375
    },
    {
        "content": "<p>and things like <code>array[2]</code></p>",
        "id": 155265713,
        "sender_full_name": "csmoe",
        "timestamp": 1547655405
    },
    {
        "content": "<p>yeah</p>",
        "id": 155265721,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655419
    },
    {
        "content": "<p>I mean</p>",
        "id": 155265722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655420
    },
    {
        "content": "<p>from</p>",
        "id": 155265724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655422
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"sd\">/// local variable</span>\n<span class=\"w\">     </span><span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">Local</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"sd\">/// static or static mut variable</span>\n<span class=\"w\">     </span><span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Static</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"sd\">/// Constant code promoted to an injected static</span>\n<span class=\"w\">     </span><span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Promoted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"sd\">/// projection out of a place (access a field, deref a pointer, etc)</span>\n<span class=\"w\">     </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155265733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655426
    },
    {
        "content": "<p>there are a lot of things that are clearly a <code>Place</code></p>",
        "id": 155265738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655435
    },
    {
        "content": "<blockquote>\n<p>I wonder specifically about changing or disturbing program state</p>\n</blockquote>\n<p>I'm not sure about what this means, left to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 155265747,
        "sender_full_name": "csmoe",
        "timestamp": 1547655456
    },
    {
        "content": "<p>I wonder where is exactly the line</p>",
        "id": 155265759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655468
    },
    {
        "content": "<p>argh argh</p>",
        "id": 155265761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655471
    },
    {
        "content": "<p>of things that seems like a <code>Place</code> but are not :)</p>",
        "id": 155265765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655477
    },
    {
        "content": "<p>I was in another meeting and it ran over</p>",
        "id": 155265768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655480
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> !!!</p>",
        "id": 155265776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655482
    },
    {
        "content": "<p>let me read the backlog</p>",
        "id": 155265789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655482
    },
    {
        "content": "<p>no worries</p>",
        "id": 155265814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655485
    },
    {
        "content": "<p>I was just asking silly questions ;)</p>",
        "id": 155265834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655498
    },
    {
        "content": "<p>ok</p>",
        "id": 155265871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655543
    },
    {
        "content": "<p>from the code I get that</p>",
        "id": 155265875,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655544
    },
    {
        "content": "<p>regarding your question about \"disturbing program state\"</p>",
        "id": 155265879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655548
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155265880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655550
    },
    {
        "content": "<p>I thnk the way to think of it is:</p>",
        "id": 155265882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655551
    },
    {
        "content": "<p>\"places\" are <em>expressions</em></p>",
        "id": 155265894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655560
    },
    {
        "content": "<p>ok go ahead better :)</p>",
        "id": 155265896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655563
    },
    {
        "content": "<p>but not <em>all expressions</em></p>",
        "id": 155265897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655563
    },
    {
        "content": "<p>so e.g. <code>*x</code> in rust surface syntax might or might not be a place, depending on whether <code>*</code> is overloaded</p>",
        "id": 155265918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655582
    },
    {
        "content": "<p><code>foo()</code> is not a place expression</p>",
        "id": 155265926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655587
    },
    {
        "content": "<p>yep</p>",
        "id": 155265943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655600
    },
    {
        "content": "<p>another way to think about it is:</p>",
        "id": 155265987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655603
    },
    {
        "content": "<p>place expressions can be evaluated to a location in memory</p>",
        "id": 155266005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655610
    },
    {
        "content": "<p>it's an expression that leads to an area in the memory I guess?</p>",
        "id": 155266013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655615
    },
    {
        "content": "<p>something with an address</p>",
        "id": 155266014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655615
    },
    {
        "content": "<p>exactly :)</p>",
        "id": 155266027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655625
    },
    {
        "content": "<p>so</p>",
        "id": 155266028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655627
    },
    {
        "content": "<p>right, but <code>foo().f</code> in some sense leads to memory, but is not a <em>place</em></p>",
        "id": 155266034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655630
    },
    {
        "content": "<p>a.b.c = \"hi\"</p>",
        "id": 155266036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655631
    },
    {
        "content": "<p>(As an aside, I actually have come to prefer the term <em>path</em>)</p>",
        "id": 155266062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655656
    },
    {
        "content": "<p>this is a place or not?</p>",
        "id": 155266063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655656
    },
    {
        "content": "<p>and to use <code>place</code> to refer to the memory location at runtime (which a path refers to)</p>",
        "id": 155266088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655672
    },
    {
        "content": "<p>bu aynway</p>",
        "id": 155266089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655673
    },
    {
        "content": "<blockquote>\n<p>right, but <code>foo().f</code> in some sense leads to memory, but is not a <em>place</em></p>\n</blockquote>\n<p>hmm I'd have said that it was a <code>Place</code></p>",
        "id": 155266093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655675
    },
    {
        "content": "<p>why not ?</p>",
        "id": 155266095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655677
    },
    {
        "content": "<p>because to figure out where <code>f</code> is, you have to call <code>foo()</code></p>",
        "id": 155266107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655686
    },
    {
        "content": "<p>in MIR terms, it is not a place</p>",
        "id": 155266110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655689
    },
    {
        "content": "<p>I see</p>",
        "id": 155266115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655693
    },
    {
        "content": "<blockquote>\n<p>and to use <code>place</code> to refer to the memory location at runtime (which a path refers to)</p>\n</blockquote>\n<p>what's the difference you're seeing between a path and a place?</p>",
        "id": 155266120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655706
    },
    {
        "content": "<p>if you have e.g. <code>&amp;foo().f</code>, we will compile that down to:</p>\n<div class=\"codehilite\"><pre><span></span>tmp0 = foo();\n&amp;tmp0.f\n</pre></div>",
        "id": 155266126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655721
    },
    {
        "content": "<p>here, <code>tmp0.f</code> is a place</p>",
        "id": 155266174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655725
    },
    {
        "content": "<p>yes</p>",
        "id": 155266180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655730
    },
    {
        "content": "<p>makes sense</p>",
        "id": 155266182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655731
    },
    {
        "content": "<blockquote>\n<p>what's the difference you're seeing between a path and a place?</p>\n</blockquote>\n<p>I mean the term <code>Place</code> as it is used today, in the MIR anyway, is the same as what I was calling <code>Path</code></p>",
        "id": 155266199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655747
    },
    {
        "content": "<p>anyway ignore the <code>Path</code> thing perhaps, separate question</p>",
        "id": 155266205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655754
    },
    {
        "content": "<p>so the refactoring is, as <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> said, just about changing the representation of <code>mir::Place</code></p>",
        "id": 155266214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655765
    },
    {
        "content": "<p>ok</p>",
        "id": 155266217,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655767
    },
    {
        "content": "<p>last thing</p>",
        "id": 155266220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> /// A path to a value; something that can be evaluated without\n/// changing or disturbing program state.\n</pre></div>",
        "id": 155266224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655771
    },
    {
        "content": "<p>what's the meaning of that?</p>",
        "id": 155266227,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655775
    },
    {
        "content": "<p>isn't that what we were just talking about? :)</p>",
        "id": 155266242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655786
    },
    {
        "content": "<p>I mean, what's the changing and disturbing program state part?</p>",
        "id": 155266246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655789
    },
    {
        "content": "<p><em>evaluating</em> a place means finding the location in memory it refers to</p>",
        "id": 155266260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655809
    },
    {
        "content": "<p>the reason that <code>foo().f</code> is not a <em>place</em> in this sense,</p>",
        "id": 155266264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655820
    },
    {
        "content": "<p>is that evaluating it would require invoking <code>foo()</code>,</p>",
        "id": 155266270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655825
    },
    {
        "content": "<p>which might mutate stuff</p>",
        "id": 155266273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655829
    },
    {
        "content": "<p>and \"change or disturb program state\"</p>",
        "id": 155266275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655835
    },
    {
        "content": "<p>I see :)</p>",
        "id": 155266326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655846
    },
    {
        "content": "<p>(in contrast, evaluating <code>a.b.c.</code> has no side-effects)</p>",
        "id": 155266330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655855
    },
    {
        "content": "<p>makes a lot of sense and now it's 100% clear what a Place is to me :)</p>",
        "id": 155266333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655858
    },
    {
        "content": "<p>OK so the goal was to change from the <em>recursive</em> representation that we use today</p>",
        "id": 155266355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655885
    },
    {
        "content": "<p>I've read the issue and got what you want to do</p>",
        "id": 155266360,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655891
    },
    {
        "content": "<p>to a \"flat\" one</p>",
        "id": 155266361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655892
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 155266362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655893
    },
    {
        "content": "<p>ok</p>",
        "id": 155266364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655894
    },
    {
        "content": "<p>what I'm not sure is what's the current state of that</p>",
        "id": 155266387,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655907
    },
    {
        "content": "<p>this does however require rewriting the algorithms that use the representation today</p>",
        "id": 155266388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655908
    },
    {
        "content": "<p>and if you have any tip on how can I help</p>",
        "id": 155266398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655917
    },
    {
        "content": "<p>well, that is where <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> comes in, I am also a bit unclear on the current status</p>",
        "id": 155266410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655931
    },
    {
        "content": "<p>I'd also like us to discuss the plan to land this PR, which has been open a long time and is definitely a \"merge conflict magnet\"</p>",
        "id": 155266439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547655950
    },
    {
        "content": "<blockquote>\n<p>this does however require rewriting the algorithms that use the representation today</p>\n</blockquote>\n<p>yep, basically change the representations and see compilation and tests errors :')</p>",
        "id": 155266443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547655953
    },
    {
        "content": "<p>maybe best to start with this question: <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> can you update us on sort of \"where things are\" -- how many bits of code do you think you have left to convert? are there particular bits of code that are still causing you trouble? etc</p>",
        "id": 155266536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656005
    },
    {
        "content": "<p>and I'd also like to know how can I help you <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> :)</p>",
        "id": 155266571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656032
    },
    {
        "content": "<p>I have \"mirror\"ed the methods of <code>Place</code>, and rewrote the places_conflict detecting successfully. <br>\nso the next task is: describe the place in error reporting</p>",
        "id": 155266572,
        "sender_full_name": "csmoe",
        "timestamp": 1547656035
    },
    {
        "content": "<p>if you want me to help thinking</p>",
        "id": 155266577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656038
    },
    {
        "content": "<p>if you want me to help coding :)</p>",
        "id": 155266582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656045
    },
    {
        "content": "<p>etc :)</p>",
        "id": 155266591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656053
    },
    {
        "content": "<blockquote>\n<p>I have \"mirror\"ed the methods of <code>Place</code>, and rewrote the places_conflict detecting successfully. <br>\nso the next task is: describe the place in error reporting</p>\n</blockquote>\n<p>what do you mean by \"mirror\"?</p>",
        "id": 155266601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656063
    },
    {
        "content": "<p>old_place.xxx() =&gt; neo_palce.xxx()</p>",
        "id": 155266655,
        "sender_full_name": "csmoe",
        "timestamp": 1547656085
    },
    {
        "content": "<p>I mean. <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span></p>",
        "id": 155266676,
        "sender_full_name": "csmoe",
        "timestamp": 1547656103
    },
    {
        "content": "<p>I was also wondering about the old_place + neo_place approach</p>",
        "id": 155266686,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656112
    },
    {
        "content": "<p>why not just changing the thing</p>",
        "id": 155266710,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I guess you had reasons that I don't see :)</p>",
        "id": 155266720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656138
    },
    {
        "content": "<blockquote>\n<p>why not just changing the thing</p>\n</blockquote>",
        "id": 155266727,
        "sender_full_name": "csmoe",
        "timestamp": 1547656143
    },
    {
        "content": "<p>because changing everything at once is untenable</p>",
        "id": 155266736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656149
    },
    {
        "content": "<p>you want to be able to change one piece of code without changing all the pieces of code</p>",
        "id": 155266747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656159
    },
    {
        "content": "<p>yeah, makes sense</p>",
        "id": 155266774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656185
    },
    {
        "content": "<p>at the end can just replace things and done</p>",
        "id": 155266785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656192
    },
    {
        "content": "<p>however, I'm not sure the neo-place approach itself was best. Or at least I was thinking of a different tactic.</p>",
        "id": 155266796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656198
    },
    {
        "content": "<p>I would really like it if we can get something that we can land</p>",
        "id": 155266835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656203
    },
    {
        "content": "<p>and have a \"to do\" list of other code to convert</p>",
        "id": 155266858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656210
    },
    {
        "content": "<p>and meanwhile having tiny parts which you can compile, test, etc</p>",
        "id": 155266864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656211
    },
    {
        "content": "<p>but not have to do everything in one PR</p>",
        "id": 155266875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656220
    },
    {
        "content": "<p>on the other hand, if <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is already close enough, maybe it's not worth it, that's part of what I'm trying to judge</p>",
        "id": 155266901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656232
    },
    {
        "content": "<p>One question: <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, at times we have discussed my idea to add some methods that you operate on the new \"flat places\" in a \"tree-like way\"</p>",
        "id": 155266925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656256
    },
    {
        "content": "<p>( I can try to make that more concrete for <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> perhaps )</p>",
        "id": 155266944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656267
    },
    {
        "content": "<p>so basically the new representation would be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">projections</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">PlaceProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155266972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> describe_place is the last biggest refactoring part.</p>",
        "id": 155266994,
        "sender_full_name": "csmoe",
        "timestamp": 1547656321
    },
    {
        "content": "<p>just go ahead <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155267055,
        "sender_full_name": "csmoe",
        "timestamp": 1547656348
    },
    {
        "content": "<p>and I was saying that you could imagine a method <code>as_tree</code> that returned a <code>PlaceTree</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">PlaceTree</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;me</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;me</span><span class=\"w\"> </span><span class=\"n\">PlaceBase</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Proj</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This structure is basically the same as today's <code>Place</code></p>",
        "id": 155267072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656372
    },
    {
        "content": "<p><code>as_tree</code> might look like:</p>",
        "id": 155267076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656377
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_tree</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;me</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;me</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PlaceTree</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;me</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">projections</span><span class=\"p\">.</span><span class=\"n\">split_last</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PlaceTree</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">last</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PlaceTree</span>::<span class=\"n\">Proj</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...},</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155267239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656468
    },
    {
        "content": "<p>so basically if you had a place like <code>a.b.c</code>, which is now represented as <code>(a, [b, c])</code>, then <code>as_tree</code> would change that to <code>PlaceTree::Proj((a, [b]), c)</code></p>",
        "id": 155267268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656497
    },
    {
        "content": "<p>the reason for this is:</p>",
        "id": 155267269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656500
    },
    {
        "content": "<p>yep <code>impl PlaceTree</code> :)</p>",
        "id": 155267281,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656504
    },
    {
        "content": "<p>you can then convert old in a very mechanical way</p>",
        "id": 155267287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656506
    },
    {
        "content": "<p>i.e., where it used to descend down a <code>mir::Place</code>, it now just converts to a tree at each step</p>",
        "id": 155267314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656528
    },
    {
        "content": "<blockquote>\n<p>yep <code>impl PlaceTree</code> :)</p>\n</blockquote>\n<p>ahh I what you meant</p>",
        "id": 155267341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656554
    },
    {
        "content": "<p>so Place is the new Place, PlaceTree is the old one</p>",
        "id": 155267386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656564
    },
    {
        "content": "<p>I imagine we could land a PR that (a) introduced the PlaceTree abstraction but leaves Place the same (in this case, PlaceTree is basically the same as place), then (b) change how places are build to build new-style places, but the analyses still work, then (c) convert the analyses one by one to not use <code>as_tree</code> where appropriate</p>",
        "id": 155267402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656587
    },
    {
        "content": "<p>and basically all over the code we call as_tree in places where we haven't converted the algorithms to use the new data type</p>",
        "id": 155267406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656589
    },
    {
        "content": "<p>right</p>",
        "id": 155267408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656590
    },
    {
        "content": "<p>part of the context here is that many analyses are easier with the new place</p>",
        "id": 155267417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656599
    },
    {
        "content": "<p>than the old place</p>",
        "id": 155267420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656601
    },
    {
        "content": "<p>but .. not necessarily <strong>all</strong></p>",
        "id": 155267431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656608
    },
    {
        "content": "<p>e.g., describe-place might not fit this description</p>",
        "id": 155267438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656614
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, what do you think? I kind of think this approach <strong>would've</strong> been better in some sense, but maybe it's too late now? or still worth it?</p>",
        "id": 155267481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656636
    },
    {
        "content": "<p>(I imagine even if we did this, we can keep your existing branch and refer to it as we convert analyses, also)</p>",
        "id": 155267500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656651
    },
    {
        "content": "<blockquote>\n<p>and basically all over the code we call as_tree in places where we haven't converted the algorithms to use the new data type</p>\n</blockquote>\n<p>well, as I said, in some cases, I think that the code might be nicer with <code>as_tree</code> anyway -- like, it's not bad to view places as a \"tree\"</p>",
        "id": 155267574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think <code>as_tree</code> should be a helper for describing_place.</p>",
        "id": 155267575,
        "sender_full_name": "csmoe",
        "timestamp": 1547656686
    },
    {
        "content": "<p>based on my previous experience, the other parts works well with the new place</p>",
        "id": 155267606,
        "sender_full_name": "csmoe",
        "timestamp": 1547656716
    },
    {
        "content": "<p>so one concernI have is:</p>",
        "id": 155267631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656738
    },
    {
        "content": "<p>with the PR as it is, I don't think we can land it until we convert place construction</p>",
        "id": 155267648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656748
    },
    {
        "content": "<p>because converting to a \"neo-place\" is expensive</p>",
        "id": 155267657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656757
    },
    {
        "content": "<p>exactly</p>",
        "id": 155267660,
        "sender_full_name": "csmoe",
        "timestamp": 1547656759
    },
    {
        "content": "<p>I <em>think</em> this alternate path I described could be landed as we go</p>",
        "id": 155267674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656773
    },
    {
        "content": "<p>and then we could port over the code from your branch once we have place construction in place</p>",
        "id": 155267687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656781
    },
    {
        "content": "<p>or we can keep rebasing your branch, and just get it done</p>",
        "id": 155267705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656797
    },
    {
        "content": "<p>I feel like either is ok, but if past experience is any guide, it's better to go with the incremental approach :)</p>",
        "id": 155267770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656814
    },
    {
        "content": "<blockquote>\n<p>with the PR as it is, I don't think we can land it until we convert place construction</p>\n</blockquote>\n<p>I guess I can help shaping the PR</p>",
        "id": 155267778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656822
    },
    {
        "content": "<p>if that's desirable</p>",
        "id": 155267784,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656826
    },
    {
        "content": "<p>like picking and tidying commits from @csmoe and adapting to this idea</p>",
        "id": 155267807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656844
    },
    {
        "content": "<blockquote>\n<p>I feel like either is ok, but if past experience is any guide, it's better to go with the incremental approach :)</p>\n</blockquote>\n<p>by this I mean: it's always more work left than you think :)</p>",
        "id": 155267817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656853
    },
    {
        "content": "<p>I kept rebasing my branch these days, there has no conflict now.</p>",
        "id": 155267860,
        "sender_full_name": "csmoe",
        "timestamp": 1547656893
    },
    {
        "content": "<p>so I prefer to follow my PR, if we clean up describe_place, it can be landed very soon.</p>",
        "id": 155267927,
        "sender_full_name": "csmoe",
        "timestamp": 1547656936
    },
    {
        "content": "<p>ok</p>",
        "id": 155267933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656940
    },
    {
        "content": "<p>that seems reasonable too :)</p>",
        "id": 155267935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656945
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 155267942,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656952
    },
    {
        "content": "<p>do you think that <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can help in any way?</p>",
        "id": 155267945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547656955
    },
    {
        "content": "<p>exactly what I was going to ask :)</p>",
        "id": 155267961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547656973
    },
    {
        "content": "<p>if I've helped by asking questions and having this meeting I'm perfectly fine :)</p>",
        "id": 155268004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657004
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, I wanna your help for <code>as_tree</code> and describe_place</p>",
        "id": 155268006,
        "sender_full_name": "csmoe",
        "timestamp": 1547657006
    },
    {
        "content": "<p>ok</p>",
        "id": 155268013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> do you want me to try to give you some tips and guide if I can? or just coding something and ammending to your commits?</p>",
        "id": 155268087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657055
    },
    {
        "content": "<p>(I guess the other question is whether <em>I</em> can help at any place =)</p>",
        "id": 155268126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657096
    },
    {
        "content": "<p>:D</p>",
        "id": 155268146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657110
    },
    {
        "content": "<p>last question I have to be 100% sure what I need to do</p>",
        "id": 155268171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657140
    },
    {
        "content": "<p>I can pull <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> PR</p>",
        "id": 155268180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657146
    },
    {
        "content": "<p>I don't have much coding time, so it'd be more like \"dear god Niko why have you not reviewed commit X yet\"</p>",
        "id": 155268181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657146
    },
    {
        "content": "<p>an alternative would be</p>",
        "id": 155268189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657152
    },
    {
        "content": "<p>that I could do a pairing session with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> to kind of get them off int he right direction</p>",
        "id": 155268247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657164
    },
    {
        "content": "<p>and on top of that convert to use the <code>Place</code> and <code>PlaceTree</code> idea and provide <code>as_tree</code> fn</p>",
        "id": 155268256,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657167
    },
    {
        "content": "<p>and then go and see the describe thing?</p>",
        "id": 155268267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657175
    },
    {
        "content": "<p>is there some amount of work on your branch, <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, that we would want to revert? i.e., existing edits to <code>describe_place</code>?</p>",
        "id": 155268273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> i prefer former. so if possible, may I have your mentorship?</p>",
        "id": 155268286,
        "sender_full_name": "csmoe",
        "timestamp": 1547657198
    },
    {
        "content": "<blockquote>\n<p>that I could do a pairing session with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> to kind of get them off int he right direction</p>\n</blockquote>\n<p>that would be nice</p>",
        "id": 155268306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the last one commit</p>",
        "id": 155268322,
        "sender_full_name": "csmoe",
        "timestamp": 1547657219
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> i prefer former. so if possible, may I have your mentorship?</p>\n</blockquote>\n<p>I don't have a solid experience on the compiler to mentor</p>",
        "id": 155268341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657233
    },
    {
        "content": "<p>but I can try to think and help you of course</p>",
        "id": 155268344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657240
    },
    {
        "content": "<p>ci was happy with everything before re-describe-place</p>",
        "id": 155268347,
        "sender_full_name": "csmoe",
        "timestamp": 1547657243
    },
    {
        "content": "<p>would be great if I can guide you :)</p>",
        "id": 155268352,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> thank you <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span></p>",
        "id": 155268364,
        "sender_full_name": "csmoe",
        "timestamp": 1547657264
    },
    {
        "content": "<p>ok, let's do this</p>",
        "id": 155268373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657275
    },
    {
        "content": "<p>mentoring seems like a too strong word for my compiler knowledge <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 155268378,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you and I will schedule a slot to pair up -- <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> if you can come, great, but I'll record it too and put it on youtube -- and we'll try to get started</p>",
        "id": 155268448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657307
    },
    {
        "content": "<p>maybe we can find a time today?</p>",
        "id": 155268451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657310
    },
    {
        "content": "<p>it would have to be soon I realize</p>",
        "id": 155268459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657325
    },
    {
        "content": "<p>since I am a bit busy this afternoon</p>",
        "id": 155268462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657331
    },
    {
        "content": "<p>yes</p>",
        "id": 155268465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657336
    },
    {
        "content": "<p>I'm busy too</p>",
        "id": 155268471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657339
    },
    {
        "content": "<p>right now is 1.47pm</p>",
        "id": 155268484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657344
    },
    {
        "content": "<p>maybe now</p>",
        "id": 155268489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I am glad to have your seniors, you bring me to the programming world.</p>",
        "id": 155268496,
        "sender_full_name": "csmoe",
        "timestamp": 1547657350
    },
    {
        "content": "<p>I have a meeting at 3pm</p>",
        "id": 155268499,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657351
    },
    {
        "content": "<p>it's midnight here. 00:49</p>",
        "id": 155268513,
        "sender_full_name": "csmoe",
        "timestamp": 1547657370
    },
    {
        "content": "<p>and didn't have lunch yet</p>",
        "id": 155268522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you can now would be great</p>",
        "id": 155268533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657384
    },
    {
        "content": "<p>yeah now is ok</p>",
        "id": 155268636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657442
    },
    {
        "content": "<blockquote>\n<p>if you can come, great, but I'll record it too and put it on youtube -- and we'll try to get started</p>\n</blockquote>",
        "id": 155268645,
        "sender_full_name": "csmoe",
        "timestamp": 1547657449
    },
    {
        "content": "<p>I will be there. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155268650,
        "sender_full_name": "csmoe",
        "timestamp": 1547657457
    },
    {
        "content": "<p>give me five minutes</p>",
        "id": 155268774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657574
    },
    {
        "content": "<p><a href=\"https://appear.in/i-heart-rust\" target=\"_blank\" title=\"https://appear.in/i-heart-rust\">https://appear.in/i-heart-rust</a></p>",
        "id": 155268780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547657576
    },
    {
        "content": "<p>yeah will be here in 2 mins</p>",
        "id": 155268823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547657610
    },
    {
        "content": "<p>ssh <a href=\"mailto:etEC8yzGxp83SAlxPd9H9SOm7@ny2.tmate.io\" title=\"mailto:etEC8yzGxp83SAlxPd9H9SOm7@ny2.tmate.io\">etEC8yzGxp83SAlxPd9H9SOm7@ny2.tmate.io</a></p>",
        "id": 155269346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547658053
    },
    {
        "content": "<p>whomever just ssh'd in, can you grow your screen? :)</p>",
        "id": 155269556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547658211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> are you connected to the ssh? if so, can you make your terminal window bigger and/or font smaller? :)</p>",
        "id": 155270348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547658821
    },
    {
        "content": "<p>hi?</p>",
        "id": 155270737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547659164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> lost you :)</p>",
        "id": 155270747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547659174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my ssh window frozen, is it safe to exit and reconnect?</p>",
        "id": 155271580,
        "sender_full_name": "csmoe",
        "timestamp": 1547659862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> yes</p>",
        "id": 155271727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547659967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we have as_place_base in librustc/mir/tcx.rs</p>",
        "id": 155272244,
        "sender_full_name": "csmoe",
        "timestamp": 1547660389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ah ok =)</p>",
        "id": 155272321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660415
    },
    {
        "content": "<p>OK that work is at <a href=\"https://github.com/nikomatsakis/rust/tree/place2b\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/tree/place2b\">https://github.com/nikomatsakis/rust/tree/place2b</a></p>",
        "id": 155272632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660700
    },
    {
        "content": "<p>I think the next steps are:</p>\n<ul>\n<li>Get it to compile =)</li>\n<li>Convert any remaining users of <code>Place</code> to use <code>NeoPlace</code><br>\n    - we could use the <code>tree</code> version to do that mechanically</li>\n<li>Convert place construction to build a <code>NeoPlace</code> directly</li>\n</ul>\n<p>One nit about the tree stuff was that, because <code>PlaceBase</code> is not <code>Copy</code>, it might require some cloning here and there to use the tree view, which is a bit less efficient. For <code>describe_place</code>, that doesn't matter, but it might be a problem elsewhere. I think I would prefer to fix this by making <code>PlaceBase</code> be <code>Copy</code> -- basically removing the <code>Box</code> and replacing with interned <code>&amp;'tcx</code> pointers.</p>",
        "id": 155272746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> that sound about right? <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 155272752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660788
    },
    {
        "content": "<p>yep</p>",
        "id": 155272763,
        "sender_full_name": "csmoe",
        "timestamp": 1547660803
    },
    {
        "content": "<p>I also recorded that session</p>",
        "id": 155272764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660806
    },
    {
        "content": "<p>I can post to YouTube</p>",
        "id": 155272771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660811
    },
    {
        "content": "<p>if desired</p>",
        "id": 155272775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660817
    },
    {
        "content": "<p>including my daughter's interruption ;)</p>",
        "id": 155272787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547660825
    },
    {
        "content": "<p>yes, youtube</p>",
        "id": 155272818,
        "sender_full_name": "csmoe",
        "timestamp": 1547660863
    },
    {
        "content": "<p>haha <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 155272824,
        "sender_full_name": "csmoe",
        "timestamp": 1547660874
    },
    {
        "content": "<p>don't worry for me :)</p>",
        "id": 155274941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662607
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> want to watch, unsure if you were able to follow everything</p>",
        "id": 155274968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662633
    },
    {
        "content": "<p>I lost connection twice :P</p>",
        "id": 155274970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I won't be able to continue with this today</p>",
        "id": 155274994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662666
    },
    {
        "content": "<p>probably tomorrow</p>",
        "id": 155274997,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662674
    },
    {
        "content": "<p>have a Rust Latam meeting now :)</p>",
        "id": 155275052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547662686
    },
    {
        "content": "<p>how goes y'all?</p>",
        "id": 156392215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547838823
    },
    {
        "content": "<p>hey Niko</p>",
        "id": 156392652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839199
    },
    {
        "content": "<p>promised doing something today, couldn't yet</p>",
        "id": 156392704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839207
    },
    {
        "content": "<p>gonna spend some time now</p>",
        "id": 156392705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839210
    },
    {
        "content": "<p>I have the thing compiling</p>",
        "id": 156392707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839214
    },
    {
        "content": "<p>looking for Place usages</p>",
        "id": 156392727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839230
    },
    {
        "content": "<p>basically I'm going to remove Place, make the thing compile and then I guess we can rename NeoPlace to Place</p>",
        "id": 156392794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839316
    },
    {
        "content": "<p>right?</p>",
        "id": 156392796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547839319
    },
    {
        "content": "<p>update: re-describe-place done</p>",
        "id": 156529396,
        "sender_full_name": "csmoe",
        "timestamp": 1548069549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> have you pushed the code somewhere?</p>",
        "id": 156533432,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548074176
    },
    {
        "content": "<p>I've done a couple of things too</p>",
        "id": 156533437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548074184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the last two commits, I merged niko's work into the PR. and made some modifications.</p>",
        "id": 156533707,
        "sender_full_name": "csmoe",
        "timestamp": 1548074488
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54426/commits/cba36331ef061a30bfaf8a3d30118ef10a06d4d2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/cba36331ef061a30bfaf8a3d30118ef10a06d4d2\">https://github.com/rust-lang/rust/pull/54426/commits/cba36331ef061a30bfaf8a3d30118ef10a06d4d2</a></p>",
        "id": 156533722,
        "sender_full_name": "csmoe",
        "timestamp": 1548074515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> you around?</p>",
        "id": 156540226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081482
    },
    {
        "content": "<p>so ... should I just get what's here <a href=\"https://github.com/rust-lang/rust/pull/54426/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/\">https://github.com/rust-lang/rust/pull/54426/</a> ?</p>",
        "id": 156540283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081516
    },
    {
        "content": "<p>and continue from there?</p>",
        "id": 156540289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081521
    },
    {
        "content": "<p>that branch is the same as Niko's branch or did you changed something else?</p>",
        "id": 156540292,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081527
    },
    {
        "content": "<p>maybe could be good idea if you can give me commit access so we can keep stuff in sync</p>",
        "id": 156540313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081546
    },
    {
        "content": "<p>okay, but how can i give the access to you?</p>",
        "id": 156540459,
        "sender_full_name": "csmoe",
        "timestamp": 1548081715
    },
    {
        "content": "<p>you need to give me push access to csmoe/rust</p>",
        "id": 156540505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081730
    },
    {
        "content": "<blockquote>\n<p>that branch is the same as Niko's branch or did you changed something else?</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 156540516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081754
    },
    {
        "content": "<p>because last commits I'm seeing there are the ones from Niko</p>",
        "id": 156540536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081785
    },
    {
        "content": "<p>do you want to pair with me for a while at some point?</p>",
        "id": 156540547,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081803
    },
    {
        "content": "<p>yep. same as niko's</p>",
        "id": 156540612,
        "sender_full_name": "csmoe",
        "timestamp": 1548081848
    },
    {
        "content": "<p>ahh ok ok</p>",
        "id": 156540655,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548081954
    },
    {
        "content": "<p><a href=\"https://github.com/csmoe/rust/invitations\" target=\"_blank\" title=\"https://github.com/csmoe/rust/invitations\">https://github.com/csmoe/rust/invitations</a></p>",
        "id": 156540826,
        "sender_full_name": "csmoe",
        "timestamp": 1548082115
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 156540853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548082163
    },
    {
        "content": "<p>invited you as csmoe/rust collaborator, does this guarantee you access?</p>",
        "id": 156540922,
        "sender_full_name": "csmoe",
        "timestamp": 1548082204
    },
    {
        "content": "<p>yes</p>",
        "id": 156540986,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548082290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm going over this thing</p>",
        "id": 156546446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087698
    },
    {
        "content": "<blockquote>\n<p>I think the next steps are:</p>\n<ul>\n<li>Get it to compile =)</li>\n<li>Convert any remaining users of <code>Place</code> to use <code>NeoPlace</code><br>\n    - we could use the <code>tree</code> version to do that mechanically</li>\n<li>Convert place construction to build a <code>NeoPlace</code> directly</li>\n</ul>\n<p>One nit about the tree stuff was that, because <code>PlaceBase</code> is not <code>Copy</code>, it might require some cloning here and there to use the tree view, which is a bit less efficient. For <code>describe_place</code>, that doesn't matter, but it might be a problem elsewhere. I think I would prefer to fix this by making <code>PlaceBase</code> be <code>Copy</code> -- basically removing the <code>Box</code> and replacing with interned <code>&amp;'tcx</code> pointers.</p>\n</blockquote>\n<p>from this suggestion ...</p>",
        "id": 156546473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087723
    },
    {
        "content": "<p>convert remaining uses of <code>Place</code> to <code>NeoPlace</code> there are some that are complicated, like hash_stable</p>",
        "id": 156546515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087768
    },
    {
        "content": "<p>or things like that that touches a lot of things</p>",
        "id": 156546521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087779
    },
    {
        "content": "<p>but anyway, I may follow my own strategy</p>",
        "id": 156546544,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087817
    },
    {
        "content": "<p>the thing is ... do we want to get rid of old <code>Place</code> at the end?</p>",
        "id": 156546548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087827
    },
    {
        "content": "<p>and convert everything to <code>NeoPlace</code> and <code>NeoPlaceTree</code>?</p>",
        "id": 156546591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548087845
    },
    {
        "content": "<p>I'm working on this thing but I'm after removing old <code>Place</code></p>",
        "id": 156546701,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548088011
    },
    {
        "content": "<p>I'm trying different approaches but unsure what's the best, maybe I just need now to convert place into neoplace everywhere</p>",
        "id": 156548098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089504
    },
    {
        "content": "<p>for instance</p>",
        "id": 156548100,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/librustc/mir/tcx.rs b/src/librustc/mir/tcx.rs\nindex 408fb076442..5af92ed8f28 100644\n--- a/src/librustc/mir/tcx.rs\n+++ b/src/librustc/mir/tcx.rs\n@@ -157,20 +157,6 @@ EnumTypeFoldableImpl! {\n }\n\n impl&lt;&#39;tcx&gt; Place&lt;&#39;tcx&gt; {\n-    pub fn ty&lt;&#39;a, &#39;gcx, D&gt;(&amp;self, local_decls: &amp;D, tcx: TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;) -&gt; PlaceTy&lt;&#39;tcx&gt;\n-        where D: HasLocalDecls&lt;&#39;tcx&gt;\n-    {\n-        match *self {\n-            Place::Local(index) =&gt;\n-                PlaceTy::Ty { ty: local_decls.local_decls()[index].ty },\n-            Place::Promoted(ref data) =&gt; PlaceTy::Ty { ty: data.1 },\n-            Place::Static(ref data) =&gt;\n-                PlaceTy::Ty { ty: data.ty },\n-            Place::Projection(ref proj) =&gt;\n-                proj.base.ty(local_decls, tcx).projection_ty(tcx, &amp;proj.elem),\n-        }\n-    }\n-\n     // If this is a field projection, and the field is being projected from a closure type,\n     // then returns the index of the field being projected. Note that this closure will always\n     // be `self` in the current MIR, because that is the only time we directly access the fields\n@@ -377,7 +363,9 @@ impl&lt;&#39;tcx&gt; Rvalue&lt;&#39;tcx&gt; {\n                 tcx.mk_array(operand.ty(local_decls, tcx), count)\n             }\n             Rvalue::Ref(reg, bk, ref place) =&gt; {\n-                let place_ty = place.ty(local_decls, tcx).to_ty(tcx);\n+                let neo_place = tcx.as_new_place(place);\n+                let place_ty = neo_place.ty(local_decls, tcx).to_ty(tcx);\n+\n                 tcx.mk_ref(reg,\n                     ty::TypeAndMut {\n                         ty: place_ty,\n@@ -403,7 +391,8 @@ impl&lt;&#39;tcx&gt; Rvalue&lt;&#39;tcx&gt; {\n                 operand.ty(local_decls, tcx)\n             }\n             Rvalue::Discriminant(ref place) =&gt; {\n-                let ty = place.ty(local_decls, tcx).to_ty(tcx);\n+                let neo_place = tcx.as_new_place(place);\n+                let ty = neo_place.ty(local_decls, tcx).to_ty(tcx);\n                 if let ty::Adt(adt_def, _) = ty.sty {\n                     adt_def.repr.discr_type().to_ty(tcx)\n                 } else {\n@@ -452,7 +441,10 @@ impl&lt;&#39;tcx&gt; Operand&lt;&#39;tcx&gt; {\n     {\n         match self {\n             &amp;Operand::Copy(ref l) |\n-            &amp;Operand::Move(ref l) =&gt; l.ty(local_decls, tcx).to_ty(tcx),\n+            &amp;Operand::Move(ref l) =&gt; {\n+                let neo_place = tcx.as_new_place(l);\n+                neo_place.ty(local_decls, tcx).to_ty(tcx)\n+            }\n             &amp;Operand::Constant(ref c) =&gt; c.ty,\n         }\n     }\n</pre></div>",
        "id": 156548104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089509
    },
    {
        "content": "<p>and after that are 53 errors because I need to apply ty over neoplace</p>",
        "id": 156548161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089530
    },
    {
        "content": "<p>and convert place into neoplace</p>",
        "id": 156548171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089538
    },
    {
        "content": "<p>but then when I convert to create neoplace I'd need to change the stuff again</p>",
        "id": 156548180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089559
    },
    {
        "content": "<p>I guess it's better to just create neoplace instead of place</p>",
        "id": 156548202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089593
    },
    {
        "content": "<p>looking for where in code that happens ...</p>",
        "id": 156548208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure what did you exactly mean by <code>Convert place construction to build a NeoPlace directly</code></p>",
        "id": 156549354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548090854
    },
    {
        "content": "<p>if you meant that in the entire code and that basically means replacing the whole place thing with neoplace or if you were talking about some specific cases</p>",
        "id": 156549381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548090902
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so what I mean is</p>",
        "id": 156617979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174622
    },
    {
        "content": "<p>there is various bits of code in MIR construction that build up a \"place\"</p>",
        "id": 156617985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174632
    },
    {
        "content": "<p>usually converting from a HAIR expression</p>",
        "id": 156618172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548174786
    },
    {
        "content": "<p>the code tends to work in a 'recursive' way right now:</p>\n<p>so e.g. to translate <code>a.b.c</code> ,we might translate <code>a</code> to a Place, and then wrap that in another place to build <code>a.b</code> etc</p>",
        "id": 156620325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176435
    },
    {
        "content": "<p>however, for building a neo-place, that approach would lead to terrible performance</p>",
        "id": 156620339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176451
    },
    {
        "content": "<p>what we need is some sort of <code>PlaceBuilder</code></p>",
        "id": 156620345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176458
    },
    {
        "content": "<p>that replaces the <code>&amp;[Projection]</code> array with a <code>Vec&lt;Projection&gt;</code></p>",
        "id": 156620361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176471
    },
    {
        "content": "<p>not sure about what case are you talking about</p>",
        "id": 156620393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548176520
    },
    {
        "content": "<p>my approach was just to remove <code>Place</code> entirely</p>",
        "id": 156620446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548176537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm talking about <a href=\"https://github.com/rust-lang/rust/blob/ad30e9a6814b5d29dfbdcd85ecde48afcc94389b/src/librustc_mir/build/expr/as_place.rs#L14-L21\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ad30e9a6814b5d29dfbdcd85ecde48afcc94389b/src/librustc_mir/build/expr/as_place.rs#L14-L21\">this method</a>, basically</p>",
        "id": 156627227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548181856
    },
    {
        "content": "<p>ok, what I don't see is what process are you suggesting to follow</p>",
        "id": 156629663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548183689
    },
    {
        "content": "<p>I was more or less trying to remove Place and make the thing compile</p>",
        "id": 156629676,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548183699
    },
    {
        "content": "<p>regardless of performance</p>",
        "id": 156629681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548183703
    },
    {
        "content": "<p>then as a second step I can transform things to make them better I guess</p>",
        "id": 156629698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548183721
    },
    {
        "content": "<p>or are you suggesting this for some reason that I don't see</p>",
        "id": 156629758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548183741
    },
    {
        "content": "<blockquote>\n<p>I was more or less trying to remove Place and make the thing compile</p>\n</blockquote>\n<p>this seems ok, modulo one thing</p>",
        "id": 156636500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188838
    },
    {
        "content": "<p>I would definitely to keep each \"major refactoring\" within a single commit</p>",
        "id": 156636508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188848
    },
    {
        "content": "<p>i.e., to refactor one bit of code at a time so that you can test it in isolation</p>",
        "id": 156636516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188863
    },
    {
        "content": "<p>I guess that for the <code>librustc_mir</code>, I personally wouldn't refactor it first to build <code>Place</code> slowly and then <code>PlaceBuilder</code> but rather just direct to <code>PlaceBuilder</code>, but I also have no objection to doing it in 2 steps</p>",
        "id": 156636574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188890
    },
    {
        "content": "<p>maybe it's just because I see more clearly where I think it should go and it seems like a similar-ish amount of work</p>",
        "id": 156636583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188904
    },
    {
        "content": "<blockquote>\n<p>I would definitely to keep each \"major refactoring\" within a single commit</p>\n</blockquote>\n<p>the problem is that I'm not sure that's always possible</p>",
        "id": 156636587,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548188906
    },
    {
        "content": "<p>maybe not, we should be trying to find ways to make it possible though :)</p>",
        "id": 156636602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188930
    },
    {
        "content": "<p>up till now we've been doing by interconverting between the two at \"boundaries\"</p>",
        "id": 156636605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188938
    },
    {
        "content": "<p>cases like implementing the mentioned traits could be isolated</p>",
        "id": 156636617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548188945
    },
    {
        "content": "<p>which seems \"ok\" -- it's slow obviously, but presuably the final commit will be to remove all of that</p>",
        "id": 156636620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188948
    },
    {
        "content": "<p>yes, agree on that</p>",
        "id": 156636638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548188974
    },
    {
        "content": "<p>I think if we don't manage to confine the rewrite to narrow pieces of code, though, the PR will never land =) (I still sort of worry that may be true)</p>",
        "id": 156636641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188977
    },
    {
        "content": "<p>but for instance ...</p>",
        "id": 156636642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548188978
    },
    {
        "content": "<p>it's not always easy to convert from <code>Place</code> to <code>NeoPlace</code></p>",
        "id": 156636767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189053
    },
    {
        "content": "<p>because we need a context which we don't always have</p>",
        "id": 156636789,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189067
    },
    {
        "content": "<p>as_new_place is in <code>TyCtxt</code></p>",
        "id": 156636808,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189093
    },
    {
        "content": "<p>and there are places where I do not have the context</p>",
        "id": 156636831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189109
    },
    {
        "content": "<p>ok</p>",
        "id": 156636964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189189
    },
    {
        "content": "<p>apart from MIR <em>construction</em>, how many places are left that consume raw places and not neo-places, roughly? do we have an idea of that?</p>",
        "id": 156637012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189233
    },
    {
        "content": "<p>and, what's an example of a such a place where you encountered trouble?</p>",
        "id": 156637067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189245
    },
    {
        "content": "<p>I don't think there's that much left other than MIR construction</p>",
        "id": 156637111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189295
    },
    {
        "content": "<p>let me check a bit again</p>",
        "id": 156637183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for instance <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ich/impls_mir.rs#L201\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ich/impls_mir.rs#L201\">https://github.com/rust-lang/rust/blob/master/src/librustc/ich/impls_mir.rs#L201</a></p>",
        "id": 156637290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189445
    },
    {
        "content": "<p>and a lot of stuff that's there</p>",
        "id": 156637296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189450
    },
    {
        "content": "<p>I mean, in order to implement <code>hash_stable</code> for some types you need <code>Place</code> implementing that thing</p>",
        "id": 156637403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189544
    },
    {
        "content": "<p>so if you want to convert that to <code>NeoPlace</code> you need to convert a lot of things</p>",
        "id": 156637416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189557
    },
    {
        "content": "<p>same for mir construction</p>",
        "id": 156637423,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189567
    },
    {
        "content": "<p>anyway, I guess I can continue working on this and maybe tomorrow we can sync</p>",
        "id": 156637434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189585
    },
    {
        "content": "<p>let me figure out some more things</p>",
        "id": 156637441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the doubt I have now is how to implement <code>is_prefix_of</code> for <code>NeoPlace</code></p>",
        "id": 156637522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189633
    },
    {
        "content": "<p>given that <code>PlaceBase</code> and <code>PlaceElem</code> are different types</p>",
        "id": 156637546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189656
    },
    {
        "content": "<p>I can't just try to see if self's <code>&amp;[PlaceElem]</code> includes other's <code>&amp;[PlaceElem]</code> because we would be missing the base</p>",
        "id": 156637602,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189714
    },
    {
        "content": "<p>basically unsure how to compare <code>PlaceBase</code> to <code>PlaceElem</code></p>",
        "id": 156637674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548189743
    },
    {
        "content": "<blockquote>\n<p>and a lot of stuff that's there</p>\n</blockquote>\n<p>well, yeah, I would not modify the hashing impls</p>",
        "id": 156638063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190067
    },
    {
        "content": "<p>yeah, agreed :)</p>",
        "id": 156638133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190095
    },
    {
        "content": "<p>as for <code>is_prefix_of</code></p>",
        "id": 156638148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190106
    },
    {
        "content": "<p>if you have two neo-places...</p>",
        "id": 156638190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190148
    },
    {
        "content": "<p>I guess that <code>is_prefix_of</code> would iterate in \"lock-step\" down self/other</p>",
        "id": 156638200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190159
    },
    {
        "content": "<p>so first the base of both must be equal</p>",
        "id": 156638204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190166
    },
    {
        "content": "<p>then each elem in self must be equal to an elem in other</p>",
        "id": 156638212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190178
    },
    {
        "content": "<p>plus other must have longer length</p>",
        "id": 156638216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190183
    },
    {
        "content": "<p>so something like</p>",
        "id": 156638217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190184
    },
    {
        "content": "<p>we are missing the base in the projection now, that's why I can't compare things</p>",
        "id": 156638308,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190239
    },
    {
        "content": "<p>I guess I'm missing something ... :)</p>",
        "id": 156638309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">is_prefix_of</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">NeoPlace</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">).</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">self_elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other_elem</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">self_elem</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other_elem</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156638322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190247
    },
    {
        "content": "<p>or </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">is_prefix_of</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">NeoPlace</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">).</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">self_elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other_elem</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">self_elem</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other_elem</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156638351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190270
    },
    {
        "content": "<p>you'd have to modify the trait though, maybe to something like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsPrefixOf</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_prefix_of</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156638367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190303
    },
    {
        "content": "<p>the idea is that e.g. <code>a.b</code> is a prefix of <code>a.b.c</code>, right?</p>",
        "id": 156638388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190322
    },
    {
        "content": "<p>if that's the implementation I was misunderstanding what was is_prefix_of exactly</p>",
        "id": 156638442,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190334
    },
    {
        "content": "<p>I believe that is the idea</p>",
        "id": 156638478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190373
    },
    {
        "content": "<p>ahh ya</p>",
        "id": 156638502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190386
    },
    {
        "content": "<p>yes</p>",
        "id": 156638504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190387
    },
    {
        "content": "<p>so yes</p>",
        "id": 156638506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190389
    },
    {
        "content": "<p>I was confused</p>",
        "id": 156638510,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190394
    },
    {
        "content": "<p>the thing I was trying to implement is way more complicated :)</p>",
        "id": 156638532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548190406
    },
    {
        "content": "<p>it's actually a good example for the kind of 'inversion' you have to do</p>",
        "id": 156638533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190407
    },
    {
        "content": "<p>to the existing logic</p>",
        "id": 156638539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190409
    },
    {
        "content": "<p>i.e., the existing code compares from the \"end\" backwards sort of, but this new code compares <em>forward</em></p>",
        "id": 156638554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548190431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've pushed a couple of commits</p>",
        "id": 156692619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548253732
    },
    {
        "content": "<p>in a while I'm going to check out what happens if I remove <code>Place</code> definition, in order to see if some other usage shows up and share with you to see what strategy may be better to follow</p>",
        "id": 156692653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548253765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok. I'll try to be available to answer questions</p>",
        "id": 156705745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263213
    },
    {
        "content": "<p>we could maybe do a brief video chat if we hit some thorny parts</p>",
        "id": 156705755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263223
    },
    {
        "content": "<p>that would be great</p>",
        "id": 156705779,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263234
    },
    {
        "content": "<p>first I've pushed some stuff to the PR, csmoe gave me access</p>",
        "id": 156705800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263246
    },
    {
        "content": "<p>then I've removed the old <code>Place</code> and have some errors</p>",
        "id": 156705914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263307
    },
    {
        "content": "<p>I expect quite a few :)</p>",
        "id": 156705952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263344
    },
    {
        "content": "<p>yes, I was surprised because I was expecting more</p>",
        "id": 156706091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263417
    },
    {
        "content": "<p><code>error: aborting due to 83 previous errors</code></p>",
        "id": 156706105,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263428
    },
    {
        "content": "<p>let me make a gist with them</p>",
        "id": 156706127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263445
    },
    {
        "content": "<p><a href=\"https://gist.github.com/spastorino/31239f650e52047e9f436c97fa377ebd\" target=\"_blank\" title=\"https://gist.github.com/spastorino/31239f650e52047e9f436c97fa377ebd\">https://gist.github.com/spastorino/31239f650e52047e9f436c97fa377ebd</a></p>",
        "id": 156706159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263471
    },
    {
        "content": "<p>for instance</p>",
        "id": 156706203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263511
    },
    {
        "content": "<p>the ones coming from <code>src/librustc/ich/impls_mir.rs</code> are related to hash stable</p>",
        "id": 156706209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263520
    },
    {
        "content": "<p>k</p>",
        "id": 156706292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263557
    },
    {
        "content": "<p>I have to run out for a bit</p>",
        "id": 156706298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263560
    },
    {
        "content": "<p>no worries</p>",
        "id": 156706329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263579
    },
    {
        "content": "<p>I will keep this going</p>",
        "id": 156706333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263582
    },
    {
        "content": "<p>there's for instance</p>",
        "id": 156706342,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263585
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>impl&lt;&#39;tcx&gt; Place&lt;&#39;tcx&gt; {\n    pub fn ty&lt;&#39;a, &#39;gcx, D&gt;(&amp;self, local_decls: &amp;D, tcx: TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;) -&gt; PlaceTy&lt;&#39;tcx&gt;\n</pre></div>",
        "id": 156706346,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263587
    },
    {
        "content": "<p>I guess I can just remove that and change to use <code>NeoPlace</code> one and keep that idea going</p>",
        "id": 156706366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548263605
    },
    {
        "content": "<blockquote>\n<p>yes, I was surprised because I was expecting more</p>\n</blockquote>\n<p>That's only the errors in librustc, there will also be errors in librustc_mir and librustc_codegen_ssa once librustc compiles.</p>",
        "id": 156711059,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548267239
    },
    {
        "content": "<blockquote>\n<p>I guess I can just remove that and change to use <code>NeoPlace</code> one and keep that idea going</p>\n</blockquote>\n<p>Yes</p>",
        "id": 156711127,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548267272
    },
    {
        "content": "<p>yes, right</p>",
        "id": 156715040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548270285
    },
    {
        "content": "<p>you can check the my previous work as kind of \"diff map\" <a href=\"https://github.com/rust-lang/rust/pull/53247/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53247/files\">https://github.com/rust-lang/rust/pull/53247/files</a><br>\nI replaced the <code>Place</code> with new <code>Place</code> in the whole codebase at once in that PR, and <code>x.py check</code> passed but <code>x.py test</code> failed. that was hard to maintain, so niko suggested current neo_place approach.</p>",
        "id": 156768754,
        "sender_full_name": "csmoe",
        "timestamp": 1548333231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just rebased because there were merging conflicts, you can check some of my latest commits in the branch to see if everything is going as you more or less expected</p>",
        "id": 156859727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548429804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> oops, I had rebased hours ago and made some commits, your force push bypassed the building.(anyway, never mind, I'd recommit later)</p>",
        "id": 156863248,
        "sender_full_name": "csmoe",
        "timestamp": 1548432885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> it must have been almost simultaneosly</p>",
        "id": 156863885,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548433358
    },
    {
        "content": "<p>because I checked</p>",
        "id": 156863890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548433365
    },
    {
        "content": "<p>anyway, great that you have your part</p>",
        "id": 156863898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548433369
    },
    {
        "content": "<p>do you want to pair at some point or something?</p>",
        "id": 156863924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548433389
    },
    {
        "content": "<p>what are you exactly working on?</p>",
        "id": 156863933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548433394
    },
    {
        "content": "<p>the commits cleaned up all the place in rustc_mir/borrow_check</p>",
        "id": 156865902,
        "sender_full_name": "csmoe",
        "timestamp": 1548435155
    },
    {
        "content": "<p>can you rebase now those now and push to <code>place2</code>?</p>",
        "id": 156866050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548435288
    },
    {
        "content": "<p>or push to a different branch? or even do a push -f with your stuff and I will fix stuff</p>",
        "id": 156866071,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548435306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> because I guess we are more or less doing the same stuff :)</p>",
        "id": 156866128,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548435359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry, cannot play with my machine right now, you can just move forward, I'll make the commit track your path.</p>",
        "id": 156867504,
        "sender_full_name": "csmoe",
        "timestamp": 1548436547
    },
    {
        "content": "<p>ok :)</p>",
        "id": 156867850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548436838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I was tlaking to <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> about doing a quick meeting sometime next week. If we arrange it, we can either record or perhaps you'll be able to attend</p>",
        "id": 156875854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548443225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> yeah, I've also mentioned that I'd be ok to pair if you want or doing a coding session where you can connect and we can chat or whatever works for you</p>",
        "id": 156876024,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548443341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, I'll be there.<br>\nbtw, I wanna express my sincere gratitude to you. I just received an offer as a junior Rust developer. I don't know if you still remember, your <a href=\"https://twitter.com/nikomatsakis/status/966737996434366464\" target=\"_blank\" title=\"https://twitter.com/nikomatsakis/status/966737996434366464\">tweet</a> and the comments in my first pull request gave me a lot of encouragement and confidence. You are my gateway to the Rust and open source world. Thank you</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/nikomatsakis/status/966737996434366464\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1577044478/Me-2011_normal.jpeg\"></a><p>I love these kinds of improvements to diagnotics: <a href=\"https://t.co/uN5yaAN6rQ\" target=\"_blank\" title=\"https://t.co/uN5yaAN6rQ\">https://github.com/rust-lang/rust/pull/48198</a> Go csmoe, go!</p><span>- Niko Matsakis (@nikomatsakis)</span></div></div>",
        "id": 156890951,
        "sender_full_name": "csmoe",
        "timestamp": 1548455615
    },
    {
        "content": "<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 156891613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548456222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> this is amazing, congrats</p>",
        "id": 156891626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548456240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> thanks <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 156891792,
        "sender_full_name": "csmoe",
        "timestamp": 1548456379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> oooh awesome, congratulations !</p>",
        "id": 156894747,
        "sender_full_name": "lqd",
        "timestamp": 1548459422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> oh, awesome! congratulations!</p>",
        "id": 157053043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548705589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 157058264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710198
    },
    {
        "content": "<p>unsure if you saw my commits to the PR</p>",
        "id": 157058273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710205
    },
    {
        "content": "<p>I did not see them</p>",
        "id": 157058277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710213
    },
    {
        "content": "<p>but I'm now in the point where I need to start changing the visitor and hash_stable</p>",
        "id": 157058289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710224
    },
    {
        "content": "<p>the thing is if you start changing things randomly in that area you end changing all the stuff at once</p>",
        "id": 157058326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710278
    },
    {
        "content": "<p>I guess I can check if there's some leaf, some place where <code>Place</code> can be replaced with <code>NeoPlace</code> but the rest of the data structures can keep working with <code>Place</code></p>",
        "id": 157058416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710331
    },
    {
        "content": "<p>so maybe I'd even need some convertions</p>",
        "id": 157058427,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710339
    },
    {
        "content": "<p>my guess is that first of all I can move from <code>Place</code> to use <code>NeoPlaceTree</code></p>",
        "id": 157058457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710362
    },
    {
        "content": "<p>and in some parts from <code>NeoPlaceTree</code> to use <code>NeoPlace</code> directly</p>",
        "id": 157058478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710388
    },
    {
        "content": "<p>and then if someone needs that <code>NeoPlace</code> but accepts a <code>Place</code> which would now be a <code>NeoPlaceTree</code> I can convert between <code>NeoPlace</code> to <code>NeoPlaceTree</code> using the <code>as_tree</code> function</p>",
        "id": 157058574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> unsure if you understood what I've tried to say because I know that my english was a bit entangled</p>",
        "id": 157058604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710481
    },
    {
        "content": "<p>=)</p>",
        "id": 157058617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710503
    },
    {
        "content": "<p>hehe</p>",
        "id": 157058621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710509
    },
    {
        "content": "<p>so</p>",
        "id": 157058626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710511
    },
    {
        "content": "<p>there's a graph of type dependencies</p>",
        "id": 157058629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710520
    },
    {
        "content": "<p>I confess i'm a bit lost though I think I <em>sort</em> of get the idea :P</p>",
        "id": 157058681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710529
    },
    {
        "content": "<p>some needs <code>Place</code></p>",
        "id": 157058690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710539
    },
    {
        "content": "<p>and stuff like that</p>",
        "id": 157058695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710543
    },
    {
        "content": "<p>my idea is first of all I guess we can remove <code>Place</code> and make that be a <code>NeoPlaceTree</code> which should be a direct thing to do</p>",
        "id": 157058729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710574
    },
    {
        "content": "<p>then, slowly replace <code>NeoPlaceTree</code> with <code>NeoPlace</code> in some areas where it's easier, let's say in a leaf of that graph (in a place where nothing else depends on that type)</p>",
        "id": 157058751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710601
    },
    {
        "content": "<p>there's a possibility that some other type use that type I've just converted</p>",
        "id": 157058833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710643
    },
    {
        "content": "<p>then it will be expecting a <code>NeoPlaceTree</code> but I have a <code>NeoPlace</code></p>",
        "id": 157058852,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710657
    },
    {
        "content": "<p>then I can keep this idea going by just ... first using <code>as_tree</code></p>",
        "id": 157058866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710673
    },
    {
        "content": "<p>I see</p>",
        "id": 157058873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710679
    },
    {
        "content": "<p>and then just making the thing using <code>NeoPlace</code></p>",
        "id": 157058874,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710682
    },
    {
        "content": "<p>interesting</p>",
        "id": 157058876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710684
    },
    {
        "content": "<p>I guess that idea may work</p>",
        "id": 157058885,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710689
    },
    {
        "content": "<p>I'm trying to decide if convering to a <code>NeoPlaceTree</code> is a side-step or worthwhile</p>",
        "id": 157058894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710699
    },
    {
        "content": "<p>i.e., in a way they are equivalent</p>",
        "id": 157058907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710703
    },
    {
        "content": "<p>but I guess yu're right that at least we're down to \"two types\" somehow :)</p>",
        "id": 157058928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710719
    },
    {
        "content": "<p>well, maybe <code>NeoPlaceTree</code> should just be <code>Place</code> :)</p>",
        "id": 157058943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710737
    },
    {
        "content": "<p>and because convering from <code>NeoPlace</code> to <code>NeoPlaceTree</code> sort of exists</p>",
        "id": 157058944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710737
    },
    {
        "content": "<p>yeah, that's something I was debating :)</p>",
        "id": 157058954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710756
    },
    {
        "content": "<p>I mean, we could certainly write the code to conver from <code>NeoPlace</code> to <code>Place</code></p>",
        "id": 157058995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710765
    },
    {
        "content": "<p>we can remove <code>NeoPlaceTree</code> and make the function return <code>Place</code></p>",
        "id": 157058998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710766
    },
    {
        "content": "<p>merge neo-place-tree and place, somehow</p>",
        "id": 157059003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710772
    },
    {
        "content": "<p>yeah</p>",
        "id": 157059004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710773
    },
    {
        "content": "<p>and then try to switch the code that creates places</p>",
        "id": 157059009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710781
    },
    {
        "content": "<p>to create neo-places</p>",
        "id": 157059010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710784
    },
    {
        "content": "<p>isn't exactly the same type with a different name?</p>",
        "id": 157059013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710785
    },
    {
        "content": "<p>and convert back to place at each consumer point</p>",
        "id": 157059017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710790
    },
    {
        "content": "<p>I think it's more-or-less the same type, yes</p>",
        "id": 157059024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710798
    },
    {
        "content": "<p>there may be some minor difference</p>",
        "id": 157059029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710804
    },
    {
        "content": "<p>ok</p>",
        "id": 157059030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710805
    },
    {
        "content": "<p>I forget exactly how <code>Place</code> is formulated</p>",
        "id": 157059035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710809
    },
    {
        "content": "<p>going to try something like that out</p>",
        "id": 157059043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710818
    },
    {
        "content": "<p>when you can check the PR</p>",
        "id": 157059051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710824
    },
    {
        "content": "<p>it's probably a very quick thing to do because most of the commits are self explanatory</p>",
        "id": 157059066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710841
    },
    {
        "content": "<p>and very mechanical code</p>",
        "id": 157059075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710850
    },
    {
        "content": "<p>would be a good way to validate if what I did is more or less what you were expecting</p>",
        "id": 157059097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548710871
    },
    {
        "content": "<p>ok</p>",
        "id": 157059212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548710955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://zoom.us/j/432921624\" target=\"_blank\" title=\"https://zoom.us/j/432921624\">https://zoom.us/j/432921624</a></p>",
        "id": 157116092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548778709
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were chatting a bit</p>",
        "id": 157120275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548781997
    },
    {
        "content": "<p>I think in the end we decided a few things</p>",
        "id": 157120288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782006
    },
    {
        "content": "<p>as an immediate way forward, we can create a function that builds a <code>Place</code> from a <code>NeoPlace</code></p>",
        "id": 157120304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782019
    },
    {
        "content": "<p>we can then convert the MIR IR to store <code>NeoPlace</code></p>",
        "id": 157120309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782025
    },
    {
        "content": "<p>we do NOT modify the builder OR the (remaining) analyses at this time</p>",
        "id": 157120323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782038
    },
    {
        "content": "<p>instead, we take the Place that the builder makes now and convert it to neo-place</p>",
        "id": 157120372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782049
    },
    {
        "content": "<p>then convert back at the consumer</p>",
        "id": 157120375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782052
    },
    {
        "content": "<p>this is kind of a \"no-op\"</p>",
        "id": 157120384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782056
    },
    {
        "content": "<p>but once it is done, we can convert the builder and analyses independently</p>",
        "id": 157120396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782064
    },
    {
        "content": "<p>and everything should keep working</p>",
        "id": 157120399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782068
    },
    {
        "content": "<p>however, I did want to raise a concern :)</p>",
        "id": 157120408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782074
    },
    {
        "content": "<p>notably, I expect us to talk over changes to MIR at the all hands</p>",
        "id": 157120416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782083
    },
    {
        "content": "<p>I think this change will be a part of it</p>",
        "id": 157120421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782087
    },
    {
        "content": "<p>but it may be that the branch winds up kind of outdated</p>",
        "id": 157120425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782092
    },
    {
        "content": "<p>we'll see, but I wanted to raise the possibility that the branch will never land :'(</p>",
        "id": 157120454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782114
    },
    {
        "content": "<p>(though my take is sort of \"that happens\" -- a lot of experimental branches like this never land, but instead become the foundation for a new approach)</p>",
        "id": 157120476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782131
    },
    {
        "content": "<p>as I said on zoom, this is fine for me and a learning experience anyway</p>",
        "id": 157124203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548784966
    },
    {
        "content": "<p>and also the way to go, if the task is kind of exploratory the result may be worse than the actual code or as you said it could even be that we realize of a better approach</p>",
        "id": 157124234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548785002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  gotcha</p>",
        "id": 157162491,
        "sender_full_name": "csmoe",
        "timestamp": 1548823666
    },
    {
        "content": "<p>I'm replacing <code>Place</code> with <code>NeoPlace</code> in some parts of the code</p>",
        "id": 157185451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853698
    },
    {
        "content": "<p>in particular, <code>Place</code> derives <code>RustcEncodable</code></p>",
        "id": 157185460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853713
    },
    {
        "content": "<p>I need to make <code>NeoPlace</code> derive it too</p>",
        "id": 157185465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853727
    },
    {
        "content": "<p>or at least implement it</p>",
        "id": 157185469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853733
    },
    {
        "content": "<p>yep</p>",
        "id": 157185476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853739
    },
    {
        "content": "<p>can you just implement it by hand and have it work by converting into a <code>Place</code> and then calling the encode method on that?</p>",
        "id": 157185493,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853756
    },
    {
        "content": "<p>the problem is that <code>NeoPlace</code>'s <code>elem</code> field is <code>&amp;'tcx [PlaceElem&lt;'tcx&gt;]</code></p>",
        "id": 157185500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853766
    },
    {
        "content": "<p>oh</p>",
        "id": 157185503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853772
    },
    {
        "content": "<p>well</p>",
        "id": 157185511,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853785
    },
    {
        "content": "<p>so I'd need ...</p>",
        "id": 157185515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853789
    },
    {
        "content": "<p><code>impl&lt;'tcx&gt; serialize::UseSpecializedDecodable for &amp;'tcx [PlaceElem&lt;'tcx&gt;] {</code></p>",
        "id": 157185517,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853791
    },
    {
        "content": "<p>/me goes to double-check API of Encodeable</p>",
        "id": 157185518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853792
    },
    {
        "content": "<p>the question is ...</p>",
        "id": 157185521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853796
    },
    {
        "content": "<p>exactly</p>",
        "id": 157185526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853798
    },
    {
        "content": "<p>where do I find some information about all that</p>",
        "id": 157185579,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853806
    },
    {
        "content": "<p>trying to search for Encodable right now</p>",
        "id": 157185585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853817
    },
    {
        "content": "<p><a href=\"https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html\" target=\"_blank\" title=\"https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html\">https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html</a> right?</p>",
        "id": 157185591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853824
    },
    {
        "content": "<p>but related to <code>UseSpecializedDecodable</code> doesn't seem to be that much info</p>",
        "id": 157185596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853834
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html\" target=\"_blank\" title=\"https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html\">https://docs.rs/rustc-serialize/0.3.24/rustc_serialize/trait.Encodable.html</a> right?</p>\n</blockquote>\n<p>well I see that, but what about <code>UseSpecializedDecodable</code></p>",
        "id": 157185634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853879
    },
    {
        "content": "<p>I might be looking at the wrong thing anyway</p>",
        "id": 157185635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853882
    },
    {
        "content": "<p>and why I see a lot of things implementing that with empty bodies</p>",
        "id": 157185652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548853897
    },
    {
        "content": "<p>do they have attributes? its possible proc-macros are injecting the actual code</p>",
        "id": 157185733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548853983
    },
    {
        "content": "<p>/me switches to looking at actual code</p>",
        "id": 157185747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>src/librustc/hir/def_id.rs\n98:impl serialize::UseSpecializedDecodable for CrateNum {}\n190:impl serialize::UseSpecializedDecodable for DefIndex {}\n258:impl serialize::UseSpecializedDecodable for DefId {}\n292:impl serialize::UseSpecializedDecodable for LocalDefId {}\n</pre></div>",
        "id": 157185812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854057
    },
    {
        "content": "<p>okay so the relevant code for the API's here is in <code>src/libserialize/</code></p>",
        "id": 157185861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854129
    },
    {
        "content": "<p>I guess I can do something like ...</p>",
        "id": 157185864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854138
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">serialize</span>::<span class=\"n\">UseSpecializedDecodable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default_decode</span><span class=\"o\">&lt;</span><span class=\"n\">D</span>: <span class=\"nc\">Decoder</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">HirId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">owner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefIndex</span>::<span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ItemLocalId</span>::<span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">owner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">local_id</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157186090,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854359
    },
    {
        "content": "<p>but for my types</p>",
        "id": 157186092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854367
    },
    {
        "content": "<p>By the way, what happens if you just try to make <code>NeoPlace</code> derive <code>RustcEncodeable</code> and <code>RustcDecodable</code> ?</p>",
        "id": 157186094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854371
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0277]: the trait bound `&amp;[mir::ProjectionElem&lt;&#39;_, mir::Local, &amp;ty::TyS&lt;&#39;_&gt;&gt;]: serialize::UseSpecializedDecodable` is not satisfied\n    --&gt; src/librustc/mir/mod.rs:1910:61\n     |\n1910 | #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n     |                                                             ^^^^^^^^^^^^^^ the trait `serialize::UseSpecializedDecodable` is not implemented for `&amp;[mir::ProjectionElem&lt;&#39;\n_, mir::Local, &amp;ty::TyS&lt;&#39;_&gt;&gt;]`\n     |\n     = note: required because of the requirements on the impl of `serialize::Decodable` for `&amp;[mir::ProjectionElem&lt;&#39;_, mir::Local, &amp;ty::TyS&lt;&#39;_&gt;&gt;]`\n     = note: required by `serialize::Decodable::decode`\n</pre></div>",
        "id": 157186138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854403
    },
    {
        "content": "<p>sorry</p>",
        "id": 157186174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854410
    },
    {
        "content": "<p>not that error</p>",
        "id": 157186180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854413
    },
    {
        "content": "<p>that error :)</p>",
        "id": 157186204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854453
    },
    {
        "content": "<p>hmm</p>",
        "id": 157186215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854474
    },
    {
        "content": "<p>I suppose if I read sufficient backlog, I'd learn why <code>NeoPlace</code> carries a slice rather than a <code>Vec</code> ?</p>",
        "id": 157186275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854525
    },
    {
        "content": "<p>:)</p>",
        "id": 157186463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854692
    },
    {
        "content": "<p>good question</p>",
        "id": 157186479,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854711
    },
    {
        "content": "<p>Niko and csmoe did that</p>",
        "id": 157186494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548854732
    },
    {
        "content": "<p>(even so, i'd be tempted, based on this problem, to use a cow-slice, i.e. <code>Cow&lt;'tcx, [PlaceElem&lt;'tcx&gt;]&gt;</code>... but I also am now curious how other code is handling decoding of non-slice references. Must be interning or something.)</p>",
        "id": 157186585,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854848
    },
    {
        "content": "<p>ah okay I'm starting to understand</p>",
        "id": 157186674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854958
    },
    {
        "content": "<p>the whole <code>UseSpecialized*</code> stuff is precisely to hook into specialized decoders for reference types</p>",
        "id": 157186708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548854999
    },
    {
        "content": "<p>start reading from this line: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L846\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L846\">https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L846</a></p>",
        "id": 157186807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548855095
    },
    {
        "content": "<p>the empty impls you are seeing are markers  allowing this impl to trigger: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L898\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L898\">https://github.com/rust-lang/rust/blob/master/src/libserialize/serialize.rs#L898</a></p>",
        "id": 157186870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548855135
    },
    {
        "content": "<p>ok</p>",
        "id": 157186914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548855224
    },
    {
        "content": "<p>will be back in a bit</p>",
        "id": 157186929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548855236
    },
    {
        "content": "<p>thanks for the info</p>",
        "id": 157186936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548855240
    },
    {
        "content": "<p>which then allow the specialized decoders to trigger, like this one: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L369\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L369\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L369</a> (with actual code here <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L216\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L216\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/codec.rs#L216</a> )</p>",
        "id": 157187086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548855356
    },
    {
        "content": "<p>back</p>",
        "id": 157190716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548858718
    },
    {
        "content": "<p>I'm getting this</p>",
        "id": 157190721,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548858722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n    --&gt; src/librustc/mir/mod.rs:3531:1\n     |\n3531 | impl&lt;&#39;tcx&gt; serialize::UseSpecializedDecodable for &amp;&#39;tcx [PlaceElem&lt;&#39;tcx&gt;] {}\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn&#39;t use types inside crate\n     |\n     = note: the impl does not reference any types defined in this crate\n     = note: define and implement a trait or new type instead\n</pre></div>",
        "id": 157190761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548858725
    },
    {
        "content": "<p>unsure why because I'm doing so in the place where <code>PlaceElem</code> is defined there</p>",
        "id": 157190778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548858747
    },
    {
        "content": "<p>and also this ...</p>",
        "id": 157192221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548859890
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>impl&lt;&#39;tcx&gt; serialize::UseSpecializedEncodable for &amp;&#39;tcx [PlaceElem&lt;&#39;tcx&gt;] {}\nimpl&lt;&#39;tcx&gt; serialize::UseSpecializedDecodable for &amp;&#39;tcx [PlaceElem&lt;&#39;tcx&gt;] {}\n</pre></div>",
        "id": 157192241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548859901
    },
    {
        "content": "<p>exist in the same file</p>",
        "id": 157192250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548859907
    },
    {
        "content": "<p>the problem is with the slice, I guess, because <code>PlaceElem</code> is defined in the crate but <code>&amp;[PlaceElem]</code> is not</p>",
        "id": 157194667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861647
    },
    {
        "content": "<p>unsure how to fix this exactly</p>",
        "id": 157194680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ^^^</p>",
        "id": 157194691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861665
    },
    {
        "content": "<p>Personally I think your best bet is to not attempt to use a slice at all here</p>",
        "id": 157194712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548861697
    },
    {
        "content": "<p>I guess I can wrap the type</p>",
        "id": 157194720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861703
    },
    {
        "content": "<p>ok</p>",
        "id": 157194733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861716
    },
    {
        "content": "<p>Okay well that's another short-term option</p>",
        "id": 157194781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548861725
    },
    {
        "content": "<p>I guess I can change to <code>Vec</code> and move forward</p>",
        "id": 157194782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861725
    },
    {
        "content": "<p>hmm yeah</p>",
        "id": 157194799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548861737
    },
    {
        "content": "<p>You can either commit to <code>Vec</code>, or if you're nervous about that, you could use <code>Cow&lt;'tcx, [PlaceElem]&gt;</code>. From what I skimmed earlier, it seemed like <code>Cow&lt;[T]&gt;</code> would be supported in serialization contexts where you might have wanted to use <code>&amp;[T]</code>.</p>",
        "id": 157194846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548861793
    },
    {
        "content": "<p>(But if you're already going to go through the effort of changing the type, you probably can just go with <code>Vec</code> and just check with <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> and/or <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> later to find out whether they had a strong motivation for using a slice here.</p>",
        "id": 157194896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548861842
    },
    {
        "content": "<blockquote>\n<p>I guess I can change to <code>Vec</code> and move forward</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> consider <code>List</code></p>",
        "id": 157195267,
        "sender_full_name": "csmoe",
        "timestamp": 1548862084
    },
    {
        "content": "<p>my original implementation of elems copied the approach from existential code base as <a href=\"https://github.com/rust-lang/rust/blob/43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac/src/librustc/ty/context.rs#L126\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac/src/librustc/ty/context.rs#L126\">https://github.com/rust-lang/rust/blob/43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac/src/librustc/ty/context.rs#L126</a></p>",
        "id": 157195715,
        "sender_full_name": "csmoe",
        "timestamp": 1548862452
    },
    {
        "content": "<p>but we don't currently use that elsewhere in <em>MIR</em> ...</p>",
        "id": 157195783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548862548
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> changed to <code>&amp;[...]</code> days ago <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/6eb57e9fc4fcd132450ed8e3603b96ef0fcc4aff\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/6eb57e9fc4fcd132450ed8e3603b96ef0fcc4aff\">https://github.com/rust-lang/rust/pull/54426/commits/6eb57e9fc4fcd132450ed8e3603b96ef0fcc4aff</a></p>",
        "id": 157195837,
        "sender_full_name": "csmoe",
        "timestamp": 1548862571
    },
    {
        "content": "<p>hmm. Okay then. That serves as a hint that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in fact <em>did</em> intend to <code>impl&lt;'tcx&gt; serialize::UseSpecializedDecodable for &amp;'tcx List&lt;PlaceElem&lt;'tcx&gt;&gt;</code></p>",
        "id": 157195889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548862627
    },
    {
        "content": "<p>It looks like a rats nest to me, but whatever.</p>",
        "id": 157195897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548862634
    },
    {
        "content": "<p>( if we expect lots of sharing between <code>Places</code> then a slice makes sense. I just haven't seen what the MIR tree structures look like yet.)</p>",
        "id": 157195933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548862680
    },
    {
        "content": "<blockquote>\n<p>hmm. Okay then. That serves as a hint that <span class=\"user-mention silent\" data-user-id=\"116009\">@nikomatsakis</span> in fact <em>did</em> intend to <code>impl&lt;'tcx&gt; serialize::UseSpecializedDecodable for &amp;'tcx List&lt;PlaceElem&lt;'tcx&gt;&gt;</code></p>\n</blockquote>\n<p>oh, no, that's me misreading the code/commit</p>",
        "id": 157196010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548862736
    },
    {
        "content": "<p>actually the wrapper doesn't make any sense :)</p>",
        "id": 157201785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548867183
    },
    {
        "content": "<p>NeoPlace can work already as a wrapper</p>",
        "id": 157201804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548867195
    },
    {
        "content": "<p>the thing is that I guess I need to just implement the decode API on <code>NeoPlace</code></p>",
        "id": 157201818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548867210
    },
    {
        "content": "<blockquote>\n<p>I suppose if I read sufficient backlog, I'd learn why <code>NeoPlace</code> carries a slice rather than a <code>Vec</code> ?</p>\n</blockquote>\n<p>we want a slice -- the decoder can do the interning</p>",
        "id": 157217536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548878896
    },
    {
        "content": "<p>the reason we want a slice is so that we can make subslices :)</p>",
        "id": 157217549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548878903
    },
    {
        "content": "<p>we used to, however, use the <code>List</code> type, which kind of handled this for us, but that was a bit too restrictive</p>",
        "id": 157217563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548878925
    },
    {
        "content": "<p>I have to refresh my memory how this works</p>",
        "id": 157217588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548878945
    },
    {
        "content": "<p>hmm :)</p>",
        "id": 157217661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548878997
    },
    {
        "content": "<p>ok</p>",
        "id": 157217664,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879001
    },
    {
        "content": "<p>I'm not sure how the serializer API works</p>",
        "id": 157217757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879053
    },
    {
        "content": "<p>searching ...</p>",
        "id": 157217767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879061
    },
    {
        "content": "<p>ok ok</p>",
        "id": 157218014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879243
    },
    {
        "content": "<p>I remember now</p>",
        "id": 157218017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879243
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> this is a bit of a kludge</p>",
        "id": 157218036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879252
    },
    {
        "content": "<p>(it's also one of the places that rustc is relying on an unsoundness in Rust)</p>",
        "id": 157218052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879267
    },
    {
        "content": "<p>(but never mind that now)</p>",
        "id": 157218059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879274
    },
    {
        "content": "<p>I'm pondering whether to leave some of these notes in a form that could become a rustc-guide chapter</p>",
        "id": 157218076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879292
    },
    {
        "content": "<p>:)</p>",
        "id": 157218108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879318
    },
    {
        "content": "<p>so I'm also a bit confused about libserialize and friends</p>",
        "id": 157218129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879338
    },
    {
        "content": "<p>So, we have this <code>Deserialize</code> trait</p>",
        "id": 157218132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879348
    },
    {
        "content": "<p>er, sorr</p>",
        "id": 157218191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879366
    },
    {
        "content": "<p><code>Decodable</code></p>",
        "id": 157218193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879368
    },
    {
        "content": "<p>my guess is that I need to implement <code>Decodable</code> for <code>NeoPlace</code></p>",
        "id": 157218240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879400
    },
    {
        "content": "<p>trying to decide just where to start</p>",
        "id": 157218249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879409
    },
    {
        "content": "<p>no, that's not true</p>",
        "id": 157218252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879413
    },
    {
        "content": "<p>I mean, you do, but not directly</p>",
        "id": 157218255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879417
    },
    {
        "content": "<p>but confused, the errors lead me .... ok</p>",
        "id": 157218256,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879417
    },
    {
        "content": "<p>so the problem is this: </p>\n<p>In order to deseriable a <code>NeoPlace</code>, you need access to a <code>tcx</code></p>",
        "id": 157218273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879431
    },
    {
        "content": "<p>yep to intern</p>",
        "id": 157218285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879445
    },
    {
        "content": "<p>you can get that, in theory, be invoking a method from on the \"decoder\" that is given to you</p>",
        "id": 157218291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879454
    },
    {
        "content": "<p>and also, elems is &amp;[]</p>",
        "id": 157218307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879470
    },
    {
        "content": "<p>because — in practice — this Decoder will be some type that implements <code>TyDecoder</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// src/librustc/ty/codec.rs</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TyDecoder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Decoder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tcx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157218363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879496
    },
    {
        "content": "<p>so I can't implement <code>impl&lt;'tcx&gt; serialize::UseSpecializedDecodable for &amp;'tcx &amp;[PlaceElem&lt;'tcx&gt;] {}</code></p>",
        "id": 157218381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879523
    },
    {
        "content": "<blockquote>\n<p>because — in practice — this Decoder will be some type that implements <code>TyDecoder</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// src/librustc/ty/codec.rs</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TyDecoder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Decoder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tcx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>ok got it</p>",
        "id": 157218400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879545
    },
    {
        "content": "<blockquote>\n<p>so I can't implement <code>impl&lt;'tcx&gt; serialize::UseSpecializedDecodable for &amp;'tcx &amp;[PlaceElem&lt;'tcx&gt;] {}</code></p>\n</blockquote>\n<p>this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> is one of the main issues I have :)</p>",
        "id": 157218545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879647
    },
    {
        "content": "<p>So</p>",
        "id": 157218681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879734
    },
    {
        "content": "<p>(sorry, got called away for a sec)</p>",
        "id": 157218687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879740
    },
    {
        "content": "<p>one problem is, the <code>Decodable</code> trait  doesn't let you specialize on the type of decoder you have</p>",
        "id": 157218698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879755
    },
    {
        "content": "<p>it is defined</p>",
        "id": 157218700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Decodable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">decode</span><span class=\"o\">&lt;</span><span class=\"n\">D</span>: <span class=\"nc\">Decoder</span><span class=\"o\">&gt;</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- so you have to implement for all `D`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157218715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879773
    },
    {
        "content": "<p>this is the <code>UseSpecializedDecodable</code> trait exists</p>",
        "id": 157218731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879783
    },
    {
        "content": "<p>there is an impl:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">UseSpecializedDecodable</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Decodable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"o\">&lt;</span><span class=\"n\">D</span>: <span class=\"nc\">Decoder</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">D</span>::<span class=\"n\">specialized_decode</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157218743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879799
    },
    {
        "content": "<p>so the idea is, if you implement <code>UseSpecializedDecodable</code>, you will be directed to <code>specialized_decode</code>, which is setup in such a way that you <em>can</em> specialize</p>",
        "id": 157218760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879825
    },
    {
        "content": "<p>there is also a blanket impl here for all <code>T</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UseSpecializedEncodable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157218776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879841
    },
    {
        "content": "<p>anyway, I guess, hmm, you won't be able to implement for the slice, you are correct, owing to the orphan rules</p>",
        "id": 157218851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879884
    },
    {
        "content": "<p>yeah, but still I'm not sure how to implement it for <code>&amp;[PlaceElem]</code></p>",
        "id": 157218863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879895
    },
    {
        "content": "<p>well, to start, you wouldn't want to</p>",
        "id": 157218889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879908
    },
    {
        "content": "<p>I mean, how to avoid the compiler error I've shared above</p>",
        "id": 157218892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879913
    },
    {
        "content": "<p>though you might want to implement for <code>[PlaceElem]</code></p>",
        "id": 157218894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879914
    },
    {
        "content": "<p>it seems like we might need a newtype wrapper, or else to define that elsewhere</p>",
        "id": 157218912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879930
    },
    {
        "content": "<p>alternatively, we implement for <code>NeoPlace</code> by hand</p>",
        "id": 157218918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879939
    },
    {
        "content": "<p>and side-step the problem</p>",
        "id": 157218921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879941
    },
    {
        "content": "<p>which is perhaps easier</p>",
        "id": 157218922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548879944
    },
    {
        "content": "<p>yeah that was what I was referring to when I mentioned that I needed to implement the thing for <code>NeoPlace</code></p>",
        "id": 157218989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879969
    },
    {
        "content": "<p>which already acts as a wrapper</p>",
        "id": 157218992,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548879974
    },
    {
        "content": "<p>the other question is ... how does rustc_encodable and rustc_decodable play in this combo?</p>",
        "id": 157219015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880007
    },
    {
        "content": "<p>I guess if I implement this trait for <code>NeoPlace</code> I should not derive?</p>",
        "id": 157219042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880034
    },
    {
        "content": "<p>I'm not sure deriving that what's the trait that wins a implementation for NeoPlace automatically</p>",
        "id": 157219069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880060
    },
    {
        "content": "<p>I think what you would want to do</p>",
        "id": 157219073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880064
    },
    {
        "content": "<p>is to add an impl into the <code>implement_ty_decoder</code> macro definition</p>",
        "id": 157219078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880073
    },
    {
        "content": "<p>in <code>ty/codec.rs</code></p>",
        "id": 157219081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880075
    },
    {
        "content": "<p>e.g., in there, you will see impls like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">$($typaram</span><span class=\"p\">),</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">SpecializedDecoder</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">AdtDef</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$DecoderName</span><span class=\"o\">&lt;</span><span class=\"cp\">$($typaram</span><span class=\"p\">),</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">fn</span> <span class=\"nf\">specialized_decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">AdtDef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">decode_adt_def</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157219128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880095
    },
    {
        "content": "<p>and you could in theory add a</p>",
        "id": 157219133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">$($typaram</span><span class=\"p\">),</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">SpecializedDecoder</span><span class=\"o\">&lt;</span><span class=\"n\">NeoPlace</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$DecoderName</span><span class=\"o\">&lt;</span><span class=\"cp\">$($typaram</span><span class=\"p\">),</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">fn</span> <span class=\"nf\">specialized_decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">NeoPlace</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157219146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880124
    },
    {
        "content": "<p>anyway, i'm debating about this</p>",
        "id": 157219306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880260
    },
    {
        "content": "<p>the reason we used the slice was to easily support <code>NeoPlaceTree</code></p>",
        "id": 157219322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880273
    },
    {
        "content": "<p>which...still seems useful to me</p>",
        "id": 157219326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880279
    },
    {
        "content": "<p>so I guess it's worth doing this</p>",
        "id": 157219328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880281
    },
    {
        "content": "<p>(as opposed to using <code>&amp;'tcx List&lt;ProjectionElem&lt;'tcx&gt;&gt;</code>, which I think is what <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> initially had.</p>",
        "id": 157219347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880296
    },
    {
        "content": "<p>yeah</p>",
        "id": 157219362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880305
    },
    {
        "content": "<p>If we used that type, a lot of the plumbing is written for us, but we lose the ability to do subslicing</p>",
        "id": 157219365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548880310
    },
    {
        "content": "<p>yeah</p>",
        "id": 157219417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880326
    },
    {
        "content": "<p>couldn't we delay doing this?</p>",
        "id": 157219444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880356
    },
    {
        "content": "<p>I mean, maybe just going with <code>List</code> and after revisiting all the Place &lt;-&gt; NeoPlace we can come back</p>",
        "id": 157219491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880392
    },
    {
        "content": "<p>or is there something that won't work?</p>",
        "id": 157219500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880399
    },
    {
        "content": "<p>mentioning this because it may be faster to experiment with the real migration to NeoPlace</p>",
        "id": 157219530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880428
    },
    {
        "content": "<p>and then we can just change the List type to be a Slice</p>",
        "id": 157219538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548880439
    },
    {
        "content": "<p>/me thinks <code>Cow</code> would be another way to delay doing this</p>",
        "id": 157220431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548881219
    },
    {
        "content": "<p>I hate cow :P</p>",
        "id": 157221688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882133
    },
    {
        "content": "<p>but you're not wrong</p>",
        "id": 157221694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882136
    },
    {
        "content": "<p>I mean another way would be to make a newtype like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">ProjectionList</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157221714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882156
    },
    {
        "content": "<p>I think it'd not be too hard</p>",
        "id": 157221725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882164
    },
    {
        "content": "<p>yeah I've already done that</p>",
        "id": 157222048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882424
    },
    {
        "content": "<p>but I mean, why is better to make a wrapper around <code>&amp;'tcx [ProjectionElem&lt;'tcx&gt;]</code> rather than just using <code>NeoPlace</code>?</p>",
        "id": 157222091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882458
    },
    {
        "content": "<p>The fact that anyone hates Cow represents a design bug somewhere</p>",
        "id": 157222178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548882501
    },
    {
        "content": "<p>(Not that you’re wrong to hate Cow)</p>",
        "id": 157222209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548882528
    },
    {
        "content": "<blockquote>\n<p>The fact that anyone hates Cow represents a design bug somewhere</p>\n</blockquote>\n<p>in the language :P</p>",
        "id": 157222217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882541
    },
    {
        "content": "<p>I don't even know what I mean by that</p>",
        "id": 157222233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882553
    },
    {
        "content": "<p>((But it should be an easier thing to put in API’s))</p>",
        "id": 157222244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548882560
    },
    {
        "content": "<blockquote>\n<p>but I mean, why is better to make a wrapper around <code>&amp;'tcx [ProjectionElem&lt;'tcx&gt;]</code> rather than just using <code>NeoPlace</code>?</p>\n</blockquote>\n<p>no particular reason I suppose, just more narrow</p>",
        "id": 157222251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882565
    },
    {
        "content": "<p>but yeah it's not easier</p>",
        "id": 157222263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882573
    },
    {
        "content": "<p>mosly I think this code is not actually that <em>hard</em></p>",
        "id": 157222266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882576
    },
    {
        "content": "<p>otoh if <code>NeoPlaceTree</code> is only used rarely</p>",
        "id": 157222285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882592
    },
    {
        "content": "<p>maybe it's fine for it to be inefficient</p>",
        "id": 157222289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882598
    },
    {
        "content": "<p>seems like a shame tho</p>",
        "id": 157222293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is this stuff all on <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> 's branch? i.e., can I take a look at it?</p>",
        "id": 157222346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548882618
    },
    {
        "content": "<p>everything is in there</p>",
        "id": 157222371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882642
    },
    {
        "content": "<p>but there's code wip on my machine</p>",
        "id": 157222377,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882649
    },
    {
        "content": "<p>unsure what do you want to look at</p>",
        "id": 157222390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882659
    },
    {
        "content": "<p>I can open tmate and allow you in if you want :)</p>",
        "id": 157222413,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548882672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we could try that :)</p>",
        "id": 157223743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548883598
    },
    {
        "content": "<p>:)</p>",
        "id": 157223822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548883648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166\">pushed a commit</a> that implements <code>RustcDecodable</code> for <code>NeoPlace&lt;'tcx&gt;</code></p>",
        "id": 157226554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548885459
    },
    {
        "content": "<p>at least, <code>x.py check</code> builds</p>",
        "id": 157226721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548885569
    },
    {
        "content": "<p>will check tomorrow</p>",
        "id": 157238810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548898010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> get a chance to look?</p>",
        "id": 157274587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548944453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey, almost back</p>",
        "id": 157274601,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944472
    },
    {
        "content": "<p>catching up with Rust Latam stuff :)</p>",
        "id": 157274605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944479
    },
    {
        "content": "<p>yesterday I took a look at it</p>",
        "id": 157274610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944489
    },
    {
        "content": "<p>actually, let me go over it quickly</p>",
        "id": 157274611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944493
    },
    {
        "content": "<p>you don't derive RustcDecodable</p>",
        "id": 157274622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944515
    },
    {
        "content": "<p>I guess that interferes with what you're doing, right?</p>",
        "id": 157274668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944525
    },
    {
        "content": "<p>I'm not sure what deriving RustcDecodable make the type implement</p>",
        "id": 157274682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944543
    },
    {
        "content": "<p>ok, read it</p>",
        "id": 157274766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944623
    },
    {
        "content": "<p>there some things that seem magic to me :P</p>",
        "id": 157274778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548944629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back to this, yeah the thing makes sense</p>",
        "id": 157276987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548946454
    },
    {
        "content": "<p>so <code>UseSpecializedDecoder</code> is a marker trait and the decoder API checks for that in order to use a <code>SpecializedDecoder</code> I guess</p>",
        "id": 157277015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548946498
    },
    {
        "content": "<p>which in this case is the one you defined using macros</p>",
        "id": 157277037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548946511
    },
    {
        "content": "<p>the only thing I don't understand is what is exactly <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R428\">https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R428</a> which is the entity that knows how to decode a PlaceBase and stuff like that and used all over the place like in <a href=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R274\">https://github.com/rust-lang/rust/pull/54426/commits/cf4da24aa9dc93c99d175b9e7a3456b3cec5a166#diff-ba672cead097ccdd2da4d223f02f4735R274</a></p>",
        "id": 157277164,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548946621
    },
    {
        "content": "<p>but I guess that's generic code, it's just decoding a struct :)</p>",
        "id": 157277185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548946636
    },
    {
        "content": "<p>decoding a <code>PlaceBase</code> comes from the <code>derive</code> on <code>PlaceBase</code></p>",
        "id": 157294834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548960585
    },
    {
        "content": "<p>ahh right</p>",
        "id": 157295582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961126
    },
    {
        "content": "<p>what does the decoder do then exactly?</p>",
        "id": 157295597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961142
    },
    {
        "content": "<p>or what role it plays?</p>",
        "id": 157295614,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961148
    },
    {
        "content": "<p>sorry, I'm not asking correctly :)</p>",
        "id": 157295673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961201
    },
    {
        "content": "<blockquote>\n<p>what does the decoder do then exactly?</p>\n</blockquote>\n<p>e.g., in this line?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">mir</span>::<span class=\"n\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Decodable</span>::<span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157295748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961234
    },
    {
        "content": "<p>yeah, everywhere</p>",
        "id": 157295760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961244
    },
    {
        "content": "<p>what's the type?</p>",
        "id": 157295768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961248
    },
    {
        "content": "<p>the <em>decoder</em> basically gives the context needed</p>",
        "id": 157295771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961251
    },
    {
        "content": "<p>how does it know how to decode?</p>",
        "id": 157295773,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961254
    },
    {
        "content": "<p>etc</p>",
        "id": 157295774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961255
    },
    {
        "content": "<p>it's type is <code>impl TyDecode</code></p>",
        "id": 157295781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961262
    },
    {
        "content": "<p>that is, some type that implements the <code>TyDecoder</code> trait</p>",
        "id": 157295797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961267
    },
    {
        "content": "<p>which extends the <code>Decoder</code> trait</p>",
        "id": 157295802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961272
    },
    {
        "content": "<p>ok</p>",
        "id": 157295814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961280
    },
    {
        "content": "<p>the most basic methods it offers are like <code>decode_usize</code></p>",
        "id": 157295818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961285
    },
    {
        "content": "<p>basically think of it like this:</p>",
        "id": 157295823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961289
    },
    {
        "content": "<p>there is some stream of data being decoded</p>",
        "id": 157295828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961293
    },
    {
        "content": "<p>the <code>decoder</code> knows about that stream</p>",
        "id": 157295836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961300
    },
    {
        "content": "<p>yeah basically you need to do what derive RustcDecodable does but you need to unroll the slice</p>",
        "id": 157295838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961302
    },
    {
        "content": "<p>you can tell it to e.g. read the next <code>usize</code> from the stream</p>",
        "id": 157295842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961307
    },
    {
        "content": "<p>and other simple, built-in operations</p>",
        "id": 157295856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961317
    },
    {
        "content": "<p>but then the <code>Decodable</code> trait composes those methods to build bigger types</p>",
        "id": 157295901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961325
    },
    {
        "content": "<p>yeah</p>",
        "id": 157295919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961334
    },
    {
        "content": "<p>makes a lot of sense</p>",
        "id": 157295924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961337
    },
    {
        "content": "<p>so e.g. the <code>Decodable</code> for <code>(u32, u32)</code> would be like \"read two u32s and I will build a tuple\"</p>",
        "id": 157295932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961341
    },
    {
        "content": "<p>yes</p>",
        "id": 157295939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961348
    },
    {
        "content": "<p>except that really it's built generically, so the <code>Decodable</code> for <code>(A, B)</code> says \"read an A and a B\"</p>",
        "id": 157295945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961353
    },
    {
        "content": "<p>and the <code>Decodable</code> trait for <code>u32</code>, in turn, says \"read a u32\"</p>",
        "id": 157295960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961364
    },
    {
        "content": "<p>yeah, exactly in the way I was thinking about it :)</p>",
        "id": 157295963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961367
    },
    {
        "content": "<p>the whole <code>UseSpecializedDecoder</code> thing</p>",
        "id": 157295982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961379
    },
    {
        "content": "<p>it's just that there are things that seem to appear from nowhere</p>",
        "id": 157295994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961385
    },
    {
        "content": "<p>just lets us take advantage of the fact that we have a <code>TyDecoder</code>, which has a <code>tcx</code></p>",
        "id": 157296005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961390
    },
    {
        "content": "<p>yeah, maybe that part is the part I see the less</p>",
        "id": 157296027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961407
    },
    {
        "content": "<p>where that comes from</p>",
        "id": 157296030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961411
    },
    {
        "content": "<p>in a sense it is saying \"here is a <code>Decodable</code> that requires not just any Decoder but a TyDecoder\" -- there is also a \"base implementation\" that works for any decoder</p>",
        "id": 157296031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961412
    },
    {
        "content": "<p>I guess the macro does something?</p>",
        "id": 157296035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961416
    },
    {
        "content": "<p>but that base implementation just panics</p>",
        "id": 157296038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961416
    },
    {
        "content": "<p>the macro is generating the impl, yeah</p>",
        "id": 157296043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961425
    },
    {
        "content": "<p>I forget why the macro is needed</p>",
        "id": 157296055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961434
    },
    {
        "content": "<p>probably coherence</p>",
        "id": 157296063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961437
    },
    {
        "content": "<p>ok</p>",
        "id": 157296072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961441
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 157296113,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548961443
    },
    {
        "content": "<p>basically we can't define a rule for \"any type T that implements TyDecoder\"</p>",
        "id": 157296120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961449
    },
    {
        "content": "<p>because we're in the wrong crate</p>",
        "id": 157296130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961456
    },
    {
        "content": "<p>so instead we define mulitple impls, one for each type that is a TyDecoder</p>",
        "id": 157296138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961463
    },
    {
        "content": "<p>and use the macro to avoid code duplication</p>",
        "id": 157296153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548961471
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 157297250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548962178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> during non sleep time of MVD -&gt; MAD I've added a commit to the PR</p>",
        "id": 157411550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091141
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54426/commits/fe2fedbd469b3c0a8a1b4543cee21b8ff05c4264\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54426/commits/fe2fedbd469b3c0a8a1b4543cee21b8ff05c4264\">https://github.com/rust-lang/rust/pull/54426/commits/fe2fedbd469b3c0a8a1b4543cee21b8ff05c4264</a></p>",
        "id": 157411551,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091142
    },
    {
        "content": "<p>it was failing on my machine</p>",
        "id": 157411552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091152
    },
    {
        "content": "<p>still unsure why, if you can take a look please do :)</p>",
        "id": 157411593,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091168
    },
    {
        "content": "<p>it's an ICE</p>",
        "id": 157411595,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091188
    },
    {
        "content": "<p>here is the error <a href=\"https://gist.github.com/spastorino/fe996acdc5091d8298432485bb5d36dc\" target=\"_blank\" title=\"https://gist.github.com/spastorino/fe996acdc5091d8298432485bb5d36dc\">https://gist.github.com/spastorino/fe996acdc5091d8298432485bb5d36dc</a></p>",
        "id": 157411766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549091613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I noticed that you created local place with <code>NeoPlace { base: Local(local), elems: &amp;[]}</code> repeatedly, you can check out the methods <code>impl NeoPlace {}</code> in the PR at src/librustc/mir/mod.rs(line 2119-2211)</p>",
        "id": 157413201,
        "sender_full_name": "csmoe",
        "timestamp": 1549094467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> The issue is that <code>MutVisitor::visit_assign</code> needs to write the new place back to the Assign, if it's been modified.</p>",
        "id": 157414876,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549097680
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">@Santiago Pastorino</span> The issue is that <code>MutVisitor::visit_assign</code> needs to write the new place back to the Assign, if it's been modified.</p>\n</blockquote>\n<p>you're right, anyway this is basically code to be removed</p>",
        "id": 157418919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549105360
    },
    {
        "content": "<p>but wanna change</p>",
        "id": 157418921,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549105364
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">@Santiago Pastorino</span> The issue is that <code>MutVisitor::visit_assign</code> needs to write the new place back to the Assign, if it's been modified.</p>\n</blockquote>\n<p>hmm, the problem is Assign takes a NeoPlace and visit_assign a Place</p>",
        "id": 157419071,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549105640
    },
    {
        "content": "<p>do you mean that I need both things to be the same thing?</p>",
        "id": 157419074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549105650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> why exactly?</p>",
        "id": 157419075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549105655
    },
    {
        "content": "<blockquote>\n<p>do you mean that I need both things to be the same thing?</p>\n</blockquote>\n<p>I mean that you need to convert the modified place back to a NeoPlace and use it in the Assign.</p>",
        "id": 157420115,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549107561
    },
    {
        "content": "<p>pushed some fixes, still ICEing</p>",
        "id": 157434256,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549133783
    },
    {
        "content": "<p>need to take a closer look</p>",
        "id": 157434257,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549133807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> FYI this is a good thing to read regarding <code>'tcx</code>: <a href=\"https://rust-lang.github.io/rustc-guide/ty.html?highlight=TyCtxt#the-tcx-and-how-it-uses-lifetimes\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/ty.html?highlight=TyCtxt#the-tcx-and-how-it-uses-lifetimes\">https://rust-lang.github.io/rustc-guide/ty.html?highlight=TyCtxt#the-tcx-and-how-it-uses-lifetimes</a></p>",
        "id": 157703467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549470773
    },
    {
        "content": "<p>Hi again <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ; it was too bad you were not able to stay until Friday. The changes you and <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>  have been making to <code>Place</code> came up during the MIR 2.0 talks</p>",
        "id": 158029050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549890833
    },
    {
        "content": "<p>you can see discussion at <a href=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--AXXCs_fiKzui0tii_ZOXNEJFAg-BwHR7kOhxDwL6vuAUoSTQ\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--AXXCs_fiKzui0tii_ZOXNEJFAg-BwHR7kOhxDwL6vuAUoSTQ\">this paper doc</a></p>",
        "id": 158030216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549891888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> noted that we may want to change our strategy, if possible, to first abstract the API (while leaving the implementation unchanged)</p>",
        "id": 158030230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549891915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so is there anything I can help then?</p>",
        "id": 158033700,
        "sender_full_name": "csmoe",
        "timestamp": 1549895324
    },
    {
        "content": "<p>I'm not sure. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> seemed very concerned that any attempt to land <code>NeoPlace</code> was going to be very ugly (and/or inefficient) and repeatedly argued that it would be cleaner to just switch over the representation all at once, without trying to convert between the two representations on the fly. In terms of code-cleanliness in short term and  ease-of-reviewing, I don't currently agree. But I don't have much of an argument about the inefficiency claim.</p>",
        "id": 158033885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895502
    },
    {
        "content": "<p>The proposal to change the API (namely by putting iterator methods in place that work on either the recursive rep or the array-of-projs rep) was made by <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> . I am currently experimenting in a local branch to evaluate whether this would be a realistic avenue.</p>",
        "id": 158033965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895557
    },
    {
        "content": "<p>I guess if you (<span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> ) felt like playing around with that idea, then that would be great. But I also understand that you haven't had much time to work on this task, right?</p>",
        "id": 158034010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895589
    },
    {
        "content": "<p>(I had also proposed to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that we try to set up a video-conf meeting with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and anyone else interested in this issue. I could attempt to include you, <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> , in that discussion, if it actually happens. But it might not; nothing has been planned yet.)</p>",
        "id": 158034088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895648
    },
    {
        "content": "<p>I'm very interested in continuing with this also given that we have been putting some work on it</p>",
        "id": 158034122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549895688
    },
    {
        "content": "<p>I've also asked <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about this because that's what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> suggested me to do</p>",
        "id": 158034138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549895718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , do you just mean you spoke with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about this last week? Or did you make plans to continue talking to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in the near future about this topic?</p>",
        "id": 158034214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> okay, get it.<br>\nI am just back from the Chinese New Year, having plenty of time to spend.  and I'm interested in the conf.</p>",
        "id": 158034229,
        "sender_full_name": "csmoe",
        "timestamp": 1549895786
    },
    {
        "content": "<p>Ah great thanks for correcting me about that, <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span></p>",
        "id": 158034256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549895818
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">@Santiago Pastorino</span> , do you just mean you spoke with <span class=\"user-mention silent\" data-user-id=\"124288\">@oli</span> about this last week? Or did you make plans to continue talking to <span class=\"user-mention silent\" data-user-id=\"124288\">@oli</span> in the near future about this topic?</p>\n</blockquote>\n<p>I've just talked to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> after the meeting to know how this is going to continue</p>",
        "id": 158035436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549896826
    },
    {
        "content": "<p>can we pull this topic into <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> ? While nll is a user that needs it, it's not nll specific</p>",
        "id": 158042160,
        "sender_full_name": "oli",
        "timestamp": 1549901696
    },
    {
        "content": "<p>it's not possible to move topics between streams, you'd just need to start a new topic.</p>",
        "id": 158042807,
        "sender_full_name": "davidtwco",
        "timestamp": 1549902166
    },
    {
        "content": "<p>have closed the PR we have been working on, after we figure our exactly what to do we can start working on a new one :)</p>",
        "id": 158062020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1549916761
    }
]