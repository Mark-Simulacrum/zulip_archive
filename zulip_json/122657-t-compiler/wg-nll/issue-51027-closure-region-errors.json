[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so I was thinking about <a href=\"https://github.com/rust-lang/rust/issues/51027\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51027\">#51027</a> and what error to print</p>",
        "id": 129944949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021587
    },
    {
        "content": "<p>I sorta like something like this</p>\n<div class=\"codehilite\"><pre><span></span>error: borrowed data cannot be stored outside of its closure\n  --&gt; issue-45983.rs:17:27\n   |\n16 |     let mut x = None;\n   |         ----- `x` is declared here, outside of the closure body\n17 |     give_any(|y| x = Some(y));:\n   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n   |               |\n   |               `y` is a reference that is only valid in the closure body\n</pre></div>",
        "id": 129945013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021649
    },
    {
        "content": "<p>anyway I thought I would drop a few notes on how to identify the scenario</p>",
        "id": 129945015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021659
    },
    {
        "content": "<p>I guess we can fine-tune the wording in the PR etc</p>",
        "id": 129945016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021664
    },
    {
        "content": "<p>Yeah, I think that is a pretty clear error.</p>",
        "id": 129945027,
        "sender_full_name": "davidtwco",
        "timestamp": 1532021694
    },
    {
        "content": "<p>You mentioned how to identify the scenario briefly in the existing notes w/r/t what sub, sup and the most interesting constraint should be.</p>",
        "id": 129945056,
        "sender_full_name": "davidtwco",
        "timestamp": 1532021748
    },
    {
        "content": "<p>oh, right, I did, cool</p>",
        "id": 129945113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021791
    },
    {
        "content": "<p>this may take some refactoring, looking more at the code</p>",
        "id": 129945173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021878
    },
    {
        "content": "<p>right now, when we add a label like \"let's call the lifetime of this reference <code>'1</code>\"</p>",
        "id": 129945216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021894
    },
    {
        "content": "<p>we have code that both searches <em>and</em> adds the label to the diagnostic</p>",
        "id": 129945221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021903
    },
    {
        "content": "<p>I was wondering if that was the right approach</p>",
        "id": 129945224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021907
    },
    {
        "content": "<p>it is convenient because it lets us handle many kinds of scenarios</p>",
        "id": 129945226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021915
    },
    {
        "content": "<p>but if we want to tweak the langage -- e.g., to say something like \"this reference is only valid during the closure body\"</p>",
        "id": 129945234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021934
    },
    {
        "content": "<p>it's a bit annoying</p>",
        "id": 129945241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021945
    },
    {
        "content": "<p>might be nicer if we passed things back up -- e.g., I found the lifetime at this span etc</p>",
        "id": 129945248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021958
    },
    {
        "content": "<p>though I guess we can pass <em>down</em> a flavor as well</p>",
        "id": 129945253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532021967
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 129945257,
        "sender_full_name": "davidtwco",
        "timestamp": 1532021975
    },
    {
        "content": "<p>ok I <a href=\"https://github.com/rust-lang/rust/issues/51027#issuecomment-406358994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51027#issuecomment-406358994\">wrote some additional notes here</a></p>",
        "id": 129945542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532022292
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 129945885,
        "sender_full_name": "davidtwco",
        "timestamp": 1532022717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Am I right in thinking that <code>-Z dump-mir=all</code> should output a <code>.dot</code> file?</p>",
        "id": 129951287,
        "sender_full_name": "davidtwco",
        "timestamp": 1532028610
    },
    {
        "content": "<p>Hmm, seems like something strange to do with <code>RUST_LOG</code> and piping the output of rustc into <code>less</code> meant that it didn't output it.</p>",
        "id": 129951561,
        "sender_full_name": "davidtwco",
        "timestamp": 1532028918
    },
    {
        "content": "<p>Anyway..</p>",
        "id": 129951563,
        "sender_full_name": "davidtwco",
        "timestamp": 1532028921
    },
    {
        "content": "<p>weird</p>",
        "id": 129951924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532029312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've submitted <a href=\"https://github.com/rust-lang/rust/issues/52572\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52572\">#52572</a> that has the bulk of the issue solved. There are two tests mentioned in the issue that it doesn't yet handle and there's a note I've added for a change that I wasn't sure about. I had a blast working on this one, not sure why.</p>",
        "id": 130010390,
        "sender_full_name": "davidtwco",
        "timestamp": 1532106311
    },
    {
        "content": "<p>I don't know if it passes all the tests, I only ran the <code>ui</code> ones locally.</p>",
        "id": 130010402,
        "sender_full_name": "davidtwco",
        "timestamp": 1532106337
    },
    {
        "content": "<p>For the <code>issue-7573.rs</code> case that currently isn't working, I understand what is happening, but I don't know how to work out what I want to work out. We've got this mir for the closure:</p>\n<div class=\"codehilite\"><pre><span></span>fn remove_package_from_database::{{closure}}(_1: &amp;mut [closure@src/test/ui/borrowck/issue-7573.rs:29:19: 35:6 lines_to_use:&amp;mut std::vec::Vec&lt;&amp;CrateId&gt;], _2: &amp;CrateId) -&gt; (){\n    let mut _0: ();                      // return place\n    let mut _3: ();\n    let mut _4: &amp;mut std::vec::Vec&lt;&amp;CrateId&gt;;\n    let mut _5: &amp;CrateId;\n\n    bb0: {\n                                         | Live variables on entry to bb0[0]: [_1, _2]\n        StorageLive(_4);                 // bb0[0]: scope 0 at src/test/ui/borrowck/issue-7573.rs:32:9: 32:21\n                                         | Live variables on entry to bb0[1]: [_1, _2]\n        _4 = &amp;mut (*((*_1).0: &amp;mut std::vec::Vec&lt;&amp;CrateId&gt;)); // bb0[1]: scope 0 at src/test/ui/borrowck/issue-7573.rs:32:9: 32:21\n                                         | Live variables on entry to bb0[2]: [_2, _4]\n        StorageLive(_5);                 // bb0[2]: scope 0 at src/test/ui/borrowck/issue-7573.rs:32:27: 32:39\n                                         | Live variables on entry to bb0[3]: [_2, _4]\n        _5 = &amp;(*_2);                     // bb0[3]: scope 0 at src/test/ui/borrowck/issue-7573.rs:32:27: 32:39\n                                         | Live variables on entry to bb0[4]: [_4, _5]\n        _3 = const &lt;std::vec::Vec&lt;T&gt;&gt;::push(move _4, move _5) -&gt; [return: bb2, unwind: bb1]; // bb0[4]: scope 0 at src/test/ui/borrowck/issue-7573.rs:32:9: 32:40\n        // ...more stuff...\n</pre></div>\n\n\n<p>In the above mir, <code> _3 = const &lt;std::vec::Vec&lt;T&gt;&gt;::push(move _4, move _5)</code> is the problematic line, it's trying to push <code>_5</code> into <code>_4</code> which won't work. <code>_4</code> is a mutable borrow of <code>_1</code> which is the captured upvar.</p>\n<p>My current code that detects whether we're in an \"escaping data\" scenario using <code>is_upvar_field_projection</code>. In this case, with a function call, I check whether the receiver is an upvar field projection - ie . it will check whether the place for <code>_4</code> is an upvar using <code>is_upvar_field_projection</code>.</p>\n<p>However, <code>_4</code> is a <code>Place::Local(..)</code>, not a <code>Place::Projection(..)</code>. So I'd need to work out (somehow) that <code>_4</code> is just a mutable borrow of <code>_1</code> which I can then check as normal with <code>is_upvar_field_projection</code>. After that, everything just falls out of the rest of the code from earlier commits. I'm not sure how to associate <code>_4</code> with <code>_1</code> to do this check though - I start with <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.TerminatorKind.html#variant.Call\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.TerminatorKind.html#variant.Call\">TerminatorKind::Call</a>.</p>",
        "id": 130013967,
        "sender_full_name": "davidtwco",
        "timestamp": 1532110660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> that looks awesome!</p>",
        "id": 130037455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532144605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> you around by any chance?</p>",
        "id": 130051296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173745
    },
    {
        "content": "<p>yeah, I'm around.</p>",
        "id": 130051375,
        "sender_full_name": "davidtwco",
        "timestamp": 1532173879
    },
    {
        "content": "<p>cool, I was reviewing your PR and I had a question</p>",
        "id": 130051425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173924
    },
    {
        "content": "<p>thogh I may have answered it now</p>",
        "id": 130051447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532173979
    },
    {
        "content": "<p>I left a review in any case, mostly a request for some more docs</p>",
        "id": 130051516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174104
    },
    {
        "content": "<p>your code doesn't trigger on a case like this, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130051528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174124
    },
    {
        "content": "<p>No, that's similar to the <code>issue-7573.rs</code> case I mentioned above.</p>",
        "id": 130051535,
        "sender_full_name": "davidtwco",
        "timestamp": 1532174142
    },
    {
        "content": "<p>ah, ok, I can take a look</p>",
        "id": 130051584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174169
    },
    {
        "content": "<p>I attempted to add another variant to <code>ConstraintCategory</code> to handle this case but I was struggling to get <code>is_upvar_field_projection</code> to recognize that it was infact a upvar.</p>",
        "id": 130051587,
        "sender_full_name": "davidtwco",
        "timestamp": 1532174181
    },
    {
        "content": "<p>as I mentioned elsewhere I think my desktop in Boston has stopped responding to pings  though :) so it'll take me longer than usual to do a build, since now I have to run on my laptop</p>",
        "id": 130051594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174197
    },
    {
        "content": "<p>I'm feeling grumpy about it :)</p>",
        "id": 130051597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174202
    },
    {
        "content": "<p>I work on my laptop all the time, you get used to slow builds.</p>",
        "id": 130051609,
        "sender_full_name": "davidtwco",
        "timestamp": 1532174222
    },
    {
        "content": "<p>heh</p>",
        "id": 130051625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174248
    },
    {
        "content": "<p>the other thing is having tons of active rust working directories :)</p>",
        "id": 130051632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174264
    },
    {
        "content": "<p>I am so excited about these new errors though...</p>",
        "id": 130051674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174289
    },
    {
        "content": "<p>right now my laptop is driving itself crazy trying to build LLVM, for the most part</p>",
        "id": 130051776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532174486
    },
    {
        "content": "<p>FYI pushed a commit that addressed the documentation comments and the function returning an unneccesary <code>Option&lt;..&gt;</code>.</p>",
        "id": 130052567,
        "sender_full_name": "davidtwco",
        "timestamp": 1532175814
    },
    {
        "content": "<p>Checking now whether considering only the first Deref messes with other tests.</p>",
        "id": 130052615,
        "sender_full_name": "davidtwco",
        "timestamp": 1532175844
    },
    {
        "content": "<p>I saw later that it had the same signature as the one for arguments...?</p>",
        "id": 130052619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532175847
    },
    {
        "content": "<p>(I guess that was the original motivation?)</p>",
        "id": 130052622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532175862
    },
    {
        "content": "<p>Yeah, it was. I just added a <code>.map(..)</code> call in that function instead of changing the signature.</p>",
        "id": 130052639,
        "sender_full_name": "davidtwco",
        "timestamp": 1532175953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Doing a deref only once still causes those duplicate errors:</p>\n<div class=\"codehilite\"><pre><span></span>---- [ui] ui/issue-27282-reborrow-ref-mut-in-guard.rs stdout ----\ndiff of stderr:\n\n+       error[E0596]: cannot borrow immutable item `r` as mutable\n+         --&gt; $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:26:40\n+          |\n+       LL |         ref mut r if { (|| { let bar = &amp;mut *r; **bar = false; })();\n+          |                                        ^^^^^^^ cannot borrow as mutable\n+\n1       error[E0596]: cannot borrow immutable item `*r` as mutable\n2         --&gt; $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:26:24\n3          |\n\n4       LL |         ref mut r if { (|| { let bar = &amp;mut *r; **bar = false; })();\n5          |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n6\n-       error: aborting due to previous error\n+       error: aborting due to 2 previous errors\n8\n9       For more information about this error, try `rustc --explain E0596`.\n10\n</pre></div>",
        "id": 130052960,
        "sender_full_name": "davidtwco",
        "timestamp": 1532176450
    },
    {
        "content": "<p>hmm</p>",
        "id": 130053069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176733
    },
    {
        "content": "<p>ok so ... I think .. those duplicate errors are \"correct\" in some sense</p>",
        "id": 130053077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176784
    },
    {
        "content": "<p>well I guess I don't know</p>",
        "id": 130053080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176791
    },
    {
        "content": "<p>I'm not crazy about the <code>recurse</code> boolean parameter</p>",
        "id": 130053124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176815
    },
    {
        "content": "<p>but I guess I have to look at the other logic maybe</p>",
        "id": 130053126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176836
    },
    {
        "content": "<p>right now, it's all the places that are using <code>false</code>, I assume?</p>",
        "id": 130053131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176859
    },
    {
        "content": "<p>ah so .. ok I think I see the problem</p>",
        "id": 130053145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176909
    },
    {
        "content": "<p>there is already a \"deref\" built-in in some of the uses</p>",
        "id": 130053186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176945
    },
    {
        "content": "<p>e.g. this one</p>\n<div class=\"codehilite\"><pre><span></span>             Place::Projection(ref proj) =&gt; {\n                 match proj.elem {\n                     ProjectionElem::Deref =&gt; {\n<span class=\"gd\">-                        if let Some(field) = self.is_upvar_field_projection(&amp;proj.base) {</span>\n<span class=\"gi\">+                        let upvar_field_projection = proj.base.is_upvar_field_projection(</span>\n<span class=\"gi\">+                            self.mir, &amp;self.tcx, false);</span>\n<span class=\"gi\">+                        if let Some(field) = upvar_field_projection {</span>\n                             let var_index = field.index();\n                             let name = self.mir.upvar_decls[var_index].debug_name.to_string();\n                             if self.mir.upvar_decls[var_index].by_ref {\n</pre></div>",
        "id": 130053187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176952
    },
    {
        "content": "<p>if you changed that from <code>proj.base.is_upvar_field_projection</code> to <code>proj.is_upvar_field_projection</code> it would probably work</p>",
        "id": 130053191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532176974
    },
    {
        "content": "<p>some of the other users are a bit less clear but I <em>suspect</em> the <code>*</code> is ok</p>",
        "id": 130053203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177033
    },
    {
        "content": "<p>that is, handling the deref case is ok</p>",
        "id": 130053214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177044
    },
    {
        "content": "<p>Ah, I didn't notice that, I'll go check the callsites.</p>",
        "id": 130053311,
        "sender_full_name": "davidtwco",
        "timestamp": 1532177168
    },
    {
        "content": "<p>otoh</p>",
        "id": 130053324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177211
    },
    {
        "content": "<p>it doesn't seem terrible to split</p>",
        "id": 130053327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177217
    },
    {
        "content": "<p>i.e., the current method just checks for what it says: <em>is this a field projection</em> (not a deref projection)</p>",
        "id": 130053335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177235
    },
    {
        "content": "<p>and you could have a wrapper is</p>",
        "id": 130053336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177238
    },
    {
        "content": "<p><code>is_upvar_ref</code></p>",
        "id": 130053339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177241
    },
    {
        "content": "<p>that also checks for deref</p>",
        "id": 130053342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177249
    },
    {
        "content": "<p>if that winds up being useful</p>",
        "id": 130053345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177259
    },
    {
        "content": "<p>but probably better to just have one :)</p>",
        "id": 130053349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177265
    },
    {
        "content": "<p>to really know whether the deref is important or not, we'd have to consider the 'mode' of the upvar, which I don't think we currently do?</p>",
        "id": 130053403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177318
    },
    {
        "content": "<p>that is, you could have <code>x: &amp;mut u32; move || *x</code> and that would desugar to <code>*self.x</code></p>",
        "id": 130053408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532177332
    },
    {
        "content": "<p>Back in the correct topic again... I've done the required rebase, just doing tests locally before pushing.</p>",
        "id": 130096526,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263378
    },
    {
        "content": "<p>ok let me take a look</p>",
        "id": 130096534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263397
    },
    {
        "content": "<p>I think I almost r+'d yesterday but wanted to see travis results</p>",
        "id": 130096537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263402
    },
    {
        "content": "<p>then I got distracted</p>",
        "id": 130096538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263404
    },
    {
        "content": "<p>I'm doing a bit of work this afternoon so I'll be around</p>",
        "id": 130096540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263409
    },
    {
        "content": "<p>Sounds good. If this PR is still fine then I've got bandwidth to take something else.</p>",
        "id": 130096543,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263435
    },
    {
        "content": "<p>Just pushed the rebase.</p>",
        "id": 130096578,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263443
    },
    {
        "content": "<p>hmm so the question what is best next thing to take on</p>",
        "id": 130096594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263493
    },
    {
        "content": "<p>I feel like there is more work on region errors</p>",
        "id": 130096595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263500
    },
    {
        "content": "<p>if you want to continue in this vein</p>",
        "id": 130096598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263503
    },
    {
        "content": "<p>they have definitely made many, many strides</p>",
        "id": 130096610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263512
    },
    {
        "content": "<p>Yeah, we could look into improving some of the cases this PR didn't cover.</p>",
        "id": 130096619,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263537
    },
    {
        "content": "<p>I opened some issues iirc</p>",
        "id": 130096693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263666
    },
    {
        "content": "<p>one of which had what I thought was an interesting test case to improve</p>",
        "id": 130096696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263673
    },
    {
        "content": "<p>in general I think things that say \"free region requires\" is ungreat</p>",
        "id": 130096739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532263691
    },
    {
        "content": "<p>Yeah, those aren't great.</p>",
        "id": 130096828,
        "sender_full_name": "davidtwco",
        "timestamp": 1532263838
    },
    {
        "content": "<p>well I'm marking your PR r+</p>",
        "id": 130097129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532264450
    },
    {
        "content": "<p>if travis gets upset we'll cancel it :)</p>",
        "id": 130097130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532264458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> what does your branch do for this example?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130097176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532264537
    },
    {
        "content": "<p>I am reminded that there were some cases where we wanted to do follow-up</p>",
        "id": 130097178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532264544
    },
    {
        "content": "<p>that example came from <a href=\"https://github.com/rust-lang/rust/issues/52533\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52533\">https://github.com/rust-lang/rust/issues/52533</a></p>",
        "id": 130097179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532264555
    },
    {
        "content": "<p>Still doing a build (did a check so it needs a full build because of <a href=\"https://github.com/rust-lang/rust/issues/52565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52565\">#52565</a>) locally but I'll let you know.</p>",
        "id": 130097330,
        "sender_full_name": "davidtwco",
        "timestamp": 1532264872
    },
    {
        "content": "<p>Seems like my branch didn't have an effect <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n --&gt; test1.rs:7:16\n  |\n7 |     foo(|a, b| b)\n  |          -  -  ^ free region requires that `&#39;1` must outlive `&#39;2`\n  |          |  |\n  |          |  lifetime `&#39;1` appears in this argument\n  |          lifetime `&#39;2` appears in this argument\n</pre></div>",
        "id": 130098341,
        "sender_full_name": "davidtwco",
        "timestamp": 1532266952
    },
    {
        "content": "<p>ok I expect that is because this is the \"return value\" case, and I think you disabled your branch in that case...</p>",
        "id": 130098359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267002
    },
    {
        "content": "<p>I don't think it was explicitly disabled for that case, just that it only handles assignments and function calls.</p>",
        "id": 130098413,
        "sender_full_name": "davidtwco",
        "timestamp": 1532267052
    },
    {
        "content": "<p>ok I see</p>",
        "id": 130098488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267215
    },
    {
        "content": "<p>well</p>",
        "id": 130098499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267230
    },
    {
        "content": "<p>this should be an assignment actually</p>",
        "id": 130098502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267234
    },
    {
        "content": "<p>but an assignment to the \"return place\"</p>",
        "id": 130098504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267238
    },
    {
        "content": "<p>(that is, <code>_0</code>)</p>",
        "id": 130098509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267247
    },
    {
        "content": "<p>if you look at the MIR, you'll see what I mean</p>",
        "id": 130098512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267252
    },
    {
        "content": "<p>\"return slot place\"</p>",
        "id": 130098515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267253
    },
    {
        "content": "<p>we could detect that</p>",
        "id": 130098517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267256
    },
    {
        "content": "<p>Ah yeah, that's categorized as a <code>Return</code> not an <code>Assignment</code>.</p>",
        "id": 130098518,
        "sender_full_name": "davidtwco",
        "timestamp": 1532267260
    },
    {
        "content": "<p>It'd be pretty easy to support that with the way it's done now.</p>",
        "id": 130098526,
        "sender_full_name": "davidtwco",
        "timestamp": 1532267279
    },
    {
        "content": "<p>do you want to roll that into the same PR?</p>",
        "id": 130098580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267376
    },
    {
        "content": "<p>or should we do a follow-up</p>",
        "id": 130098581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267382
    },
    {
        "content": "<p>A new PR is cleaner, but depends if we think that one will land quickly. No point in having another PR waiting for that to land before it can be approved and get in the queue.</p>",
        "id": 130098631,
        "sender_full_name": "davidtwco",
        "timestamp": 1532267444
    },
    {
        "content": "<p>I was gonna p=1 it</p>",
        "id": 130098786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532267699
    },
    {
        "content": "<p>I'll experiment locally with that example see if I can get it to use the newer messages.</p>",
        "id": 130099324,
        "sender_full_name": "davidtwco",
        "timestamp": 1532268361
    },
    {
        "content": "<p>gave p=1 since travis is happy</p>",
        "id": 130099856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532269074
    },
    {
        "content": "<p>I know I keep saying it, but I am quite happy with how these new region errors are turning out :)</p>",
        "id": 130099922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532269154
    },
    {
        "content": "<p>it feels like we're finally getting close to \"cracking the case\"</p>",
        "id": 130099924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532269160
    },
    {
        "content": "<p>Interestingly, it seems as though the return in that example is being classified as <code>Boring</code>.</p>",
        "id": 130099941,
        "sender_full_name": "davidtwco",
        "timestamp": 1532269200
    },
    {
        "content": "<p>Right now we consider anything that isn't <code>Locations::Interesting</code> as boring. Including <code>Locations::Boring</code> and <code>Locations:All</code> (this example has a combination of both).</p>",
        "id": 130100018,
        "sender_full_name": "davidtwco",
        "timestamp": 1532269261
    },
    {
        "content": "<p>So they aren't even considered for classification as anything more.</p>",
        "id": 130100035,
        "sender_full_name": "davidtwco",
        "timestamp": 1532269288
    },
    {
        "content": "<p>I'd like to remove that distintion, I think, and just move all of that logic into the classificaiton scheme</p>",
        "id": 130102457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532272727
    },
    {
        "content": "<p>maybe we will still need a bit of \"pre-logic\" though, not sure</p>",
        "id": 130102464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532272737
    },
    {
        "content": "<p>i.e., if the location alone is not enough to distinguish</p>",
        "id": 130102469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532272744
    },
    {
        "content": "<p>It also wasn't being classified correctly as to an upvar because I expected one region to be external and the other local, whereas both were external in this case.</p>",
        "id": 130102490,
        "sender_full_name": "davidtwco",
        "timestamp": 1532272785
    },
    {
        "content": "<p>hmm so actually it's a somewhat different case</p>",
        "id": 130103486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274198
    },
    {
        "content": "<p>that is, this is not a case of \"data local to the region escaping\"</p>",
        "id": 130103487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274205
    },
    {
        "content": "<p>it's just a case of \"data with wrong lifetime being returned\"</p>",
        "id": 130103489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: borrowed data escapes outside of closure\n --&gt; test1.rs:7:16\n  |\n7 |     foo(|a, b| b)\n  |          -  -  ^ `b` escapes the closure body here\n  |          |  |\n  |          |  `b` is a reference that is only valid in the closure body\n  |          `a` is declared here, outside of the closure body\n</pre></div>",
        "id": 130103532,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274263
    },
    {
        "content": "<p>I've got that, using the same labels as before. Not sure what other tests this would effect though.</p>",
        "id": 130103536,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274287
    },
    {
        "content": "<p>well it seems like this message is misleading to me</p>",
        "id": 130103548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274318
    },
    {
        "content": "<p>I would expect something more like \"closure was supposed to return data with lifetime <code>'1</code> but it is returning data with lifetime <code>'2</code>\"</p>",
        "id": 130103554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274335
    },
    {
        "content": "<p>that is, it's not about the data \"escaping the closure body\"</p>",
        "id": 130103561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274357
    },
    {
        "content": "<p>Yeah, I didn't adjust the messages at all.</p>",
        "id": 130103604,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274366
    },
    {
        "content": "<p>Was just trying to get it to use that branch of the code.</p>",
        "id": 130103613,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274387
    },
    {
        "content": "<p>my point is I don't think it should use that branch :)</p>",
        "id": 130103617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274395
    },
    {
        "content": "<p>this seems more like the first branch to me</p>",
        "id": 130103621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274406
    },
    {
        "content": "<p>or maybe a 3rd branch</p>",
        "id": 130103627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274413
    },
    {
        "content": "<p>i.e., to me, that branch is about a \"local\" lifetime escaping into a \"global\" lifetime</p>",
        "id": 130103635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274432
    },
    {
        "content": "<p>the other branch is about conflicts between external lifetimes</p>",
        "id": 130103639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274441
    },
    {
        "content": "<p>in particular, I don't think the message for this case needs to be so different from</p>",
        "id": 130103645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130103649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274466
    },
    {
        "content": "<p>the message for that case</p>",
        "id": 130103651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274468
    },
    {
        "content": "<p>I was thinking we should ditch the various <code>ConstraintCategory</code> variants I added that are specific to upvars, and then have branches depending on whether it is a <code>(true, false)</code>, <code>(true, true)</code>, <code>(false, true)</code> and <code>(false, false)</code> pair for the <code>(outlived_fr, fr)</code> being local or not.</p>",
        "id": 130103654,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274475
    },
    {
        "content": "<p>yes, that was my original intent</p>",
        "id": 130103702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274489
    },
    {
        "content": "<p>I see.</p>",
        "id": 130103707,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274496
    },
    {
        "content": "<p>That does make sense.</p>",
        "id": 130103710,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274500
    },
    {
        "content": "<p>the upvar assignments achieves a similar effect though</p>",
        "id": 130103712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274501
    },
    {
        "content": "<p>but I think i'd rather do it based on region category ultimately</p>",
        "id": 130103715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274511
    },
    {
        "content": "<p>(do you want to give that a try in the original PR)</p>",
        "id": 130103729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274580
    },
    {
        "content": "<p>?</p>",
        "id": 130103730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274582
    },
    {
        "content": "<p>I'll see what I come up with locally and we can see if the PR has landed by the time I've got anything.</p>",
        "id": 130103813,
        "sender_full_name": "davidtwco",
        "timestamp": 1532274662
    },
    {
        "content": "<p>+1</p>",
        "id": 130103961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532274878
    }
]