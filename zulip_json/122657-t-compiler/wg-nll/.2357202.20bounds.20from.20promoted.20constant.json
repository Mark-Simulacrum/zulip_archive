[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> -- can we schedule a time to chat about <a href=\"https://github.com/rust-lang/rust/pull/57202\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57202\">https://github.com/rust-lang/rust/pull/57202</a>, together with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> perhaps? I'd be available tomorrow for the most part, or we can find a time next week</p>",
        "id": 159622218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551366917
    },
    {
        "content": "<p>I'll probably be available from 19:00 UTC tomorrow</p>",
        "id": 159622423,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551367047
    },
    {
        "content": "<p>So today turned out to be terrible :P</p>",
        "id": 159739538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551466902
    },
    {
        "content": "<p>I mean it's not over yet</p>",
        "id": 159739547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551466910
    },
    {
        "content": "<p>I'm available now if you want to talk. Otherwise I'm available from around this time most weekdays.</p>",
        "id": 159739643,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551466972
    },
    {
        "content": "<p>I was going to suggest before the NLL meeting next week</p>",
        "id": 159739788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467088
    },
    {
        "content": "<p>Probably that doesn't work for <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> but that's .. probably ok</p>",
        "id": 159739800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467100
    },
    {
        "content": "<p>I'd kind of like to focus on finish up my to do list for this week at the moment, if that's ok, and this doesn't seem <em>that</em> urgent</p>",
        "id": 159739826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467134
    },
    {
        "content": "<p>If that works for you, I'll add a calendar event?</p>",
        "id": 159739836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467147
    },
    {
        "content": "<blockquote>\n<p>I was going to suggest before the NLL meeting next week</p>\n</blockquote>\n<p>Sounds good</p>",
        "id": 159739841,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551467159
    },
    {
        "content": "<p>sent you a calendar invite</p>",
        "id": 159739953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467240
    },
    {
        "content": "<p>I debated about adding to the rustc calendar but it seems...not quite to rise to that level :)</p>",
        "id": 159739960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467249
    },
    {
        "content": "<p>thanks!</p>",
        "id": 159739976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551467258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I might be a little late for the meeting tonight, hopefully it won't need the whole hour anyway.</p>",
        "id": 160126218,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551900317
    },
    {
        "content": "<p>OK, let me know when you're around <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 160127000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551900803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm here</p>",
        "id": 160127719,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901329
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> =)</p>",
        "id": 160127725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901341
    },
    {
        "content": "<p>So I'm looking over the PR</p>",
        "id": 160127779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901393
    },
    {
        "content": "<p>I'm trying to make a good summary of what it does, to start</p>",
        "id": 160127789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901404
    },
    {
        "content": "<p>I think the behavior that I would hope to see is something analogous to what we do for closures:</p>",
        "id": 160127802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901416
    },
    {
        "content": "<p>We have some kind of query that we can execute which types the constant and produces a \"constraint set\" that we can incorporate into our result</p>",
        "id": 160127821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901430
    },
    {
        "content": "<p>I'm curious if you considered that and why it didn't work</p>",
        "id": 160127833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901438
    },
    {
        "content": "<p>Re-reading the PR, it looks .. kind of like what it does</p>",
        "id": 160127887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901451
    },
    {
        "content": "<p>I guess that on each reference to a promoted constant</p>",
        "id": 160127982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901536
    },
    {
        "content": "<p>we run the type-check on it <strong>again</strong></p>",
        "id": 160127988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901542
    },
    {
        "content": "<p>I suppose most promoted constants are only referenced once</p>",
        "id": 160127999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901553
    },
    {
        "content": "<p>I considered it. I didn't like it because it felt \"too heavy\".</p>",
        "id": 160128058,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901568
    },
    {
        "content": "<blockquote>\n<p>I suppose most promoted constants are only referenced once</p>\n</blockquote>\n<p>I think so, we definitely don't deduplicate them as much as we could</p>",
        "id": 160128081,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901596
    },
    {
        "content": "<p>Probably that de-duplication would come later</p>",
        "id": 160128117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901636
    },
    {
        "content": "<p>Although you could imagine doing it early</p>",
        "id": 160128122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901639
    },
    {
        "content": "<blockquote>\n<p>I considered it. I didn't like it because it felt \"too heavy\".</p>\n</blockquote>\n<p>interesting. Heavy from a runtime overhead perspective or something like that?</p>",
        "id": 160128130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901651
    },
    {
        "content": "<p>It feels cleaner to me</p>",
        "id": 160128137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901658
    },
    {
        "content": "<p>I guess because I really wanted us to get to the point where</p>",
        "id": 160128144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901667
    },
    {
        "content": "<p>Yes, they're deduplicated in the llvm output.</p>",
        "id": 160128179,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901682
    },
    {
        "content": "<p>we weren't type-checking multiple MIR functions within one context</p>",
        "id": 160128203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901684
    },
    {
        "content": "<p>it feels \"confusing\" to do so, since regions are sets of points, but points from which MIR?</p>",
        "id": 160128228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901723
    },
    {
        "content": "<p>Yes, I essential collapsed the promoted MIR to a point</p>",
        "id": 160128261,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901767
    },
    {
        "content": "<p>I guess that is this line:</p>\n<blockquote>\n<p>constraint.locations = locations;</p>\n</blockquote>",
        "id": 160128284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901797
    },
    {
        "content": "<p>how hard do you think it would be to restructure this into a recursive query?</p>",
        "id": 160128360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901822
    },
    {
        "content": "<p>I wonder if the existing query around closures can .. mostly just work?</p>",
        "id": 160128373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901844
    },
    {
        "content": "<p>in some sense a promoted constant is a lot like a closure</p>",
        "id": 160128386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551901855
    },
    {
        "content": "<blockquote>\n<p>I guess that is this line:</p>\n<blockquote>\n<p>constraint.locations = locations;</p>\n</blockquote>\n</blockquote>\n<p>yes</p>",
        "id": 160128395,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901863
    },
    {
        "content": "<blockquote>\n<p>in some sense a promoted constant is a lot like a closure</p>\n</blockquote>\n<p>Except it promoteds share type annotations. I don't think I could find a case where we need to ensure the types are unified between the promoted and non-promoted MIR though.</p>",
        "id": 160128576,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551901993
    },
    {
        "content": "<p>what do you mean by that?</p>",
        "id": 160128706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902079
    },
    {
        "content": "<p>I noticed that comment</p>",
        "id": 160128721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902093
    },
    {
        "content": "<blockquote>\n<p>I wonder if the existing query around closures can .. mostly just work?</p>\n</blockquote>\n<p>As in changing the query to <code>mir_borrowck(DefId, Option&lt;Promoted&gt;)</code>, making sure that the return type uses external regions. Well, it's possible.</p>",
        "id": 160128737,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902104
    },
    {
        "content": "<p><em>ah</em>, a type annotation is the canonical version of the things users wrote by hand, right?</p>",
        "id": 160128753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902112
    },
    {
        "content": "<p>I was looking at this line and trying to remember what it was</p>",
        "id": 160128802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902147
    },
    {
        "content": "<p><code>user_type_annotations: &amp;'a CanonicalUserTypeAnnotations&lt;'tcx&gt;,</code></p>",
        "id": 160128855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902164
    },
    {
        "content": "<blockquote>\n<p>As in changing the query to <code>mir_borrowck(DefId, Option&lt;Promoted&gt;)</code>, making sure that the return type uses external regions. Well, it's possible.</p>\n</blockquote>\n<p>what is <code>Option&lt;Promoted&gt;</code> here?</p>",
        "id": 160128872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902177
    },
    {
        "content": "<p>The id of the promoted we need to check, or <code>None</code> if we want to check the main MIR</p>",
        "id": 160128921,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902231
    },
    {
        "content": "<p>MIR contains a field <code>pub user_type_annotations: CanonicalUserTypeAnnotations&lt;'tcx&gt;,</code> which is indexed by <code>UserTypeAnnotationIndex</code>.</p>",
        "id": 160129031,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902292
    },
    {
        "content": "<blockquote>\n<p>The id of the promoted we need to check, or <code>None</code> if we want to check the main MIR</p>\n</blockquote>\n<p>oh, right, they don't have def-ids of their own</p>",
        "id": 160129070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902332
    },
    {
        "content": "<blockquote>\n<p>MIR contains a field <code>pub user_type_annotations: CanonicalUserTypeAnnotations&lt;'tcx&gt;,</code> which is indexed by <code>UserTypeAnnotationIndex</code>.</p>\n</blockquote>\n<p>yeah I remember this now</p>",
        "id": 160129075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902341
    },
    {
        "content": "<p>TypeAnnotations in promoted index into the list of their parent.</p>",
        "id": 160129092,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902351
    },
    {
        "content": "<p>i.e. we don't renumber them</p>",
        "id": 160129103,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902366
    },
    {
        "content": "<p>seems like they should really copy that field over from their parent</p>",
        "id": 160129104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902369
    },
    {
        "content": "<p>but..</p>",
        "id": 160129108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902375
    },
    {
        "content": "<p>...well, so,</p>",
        "id": 160129117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902379
    },
    {
        "content": "<p>that seems to imply that type-checking the promoted constants may \"inform\" the user-type annot from parent, right?</p>",
        "id": 160129184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902404
    },
    {
        "content": "<p>i.e., they may share type variables</p>",
        "id": 160129217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902422
    },
    {
        "content": "<p>Yes.</p>",
        "id": 160129237,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902432
    },
    {
        "content": "<p>at least in the present setup, they definitely do</p>",
        "id": 160129239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902433
    },
    {
        "content": "<p>that certainly complicates matters</p>",
        "id": 160129247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902441
    },
    {
        "content": "<p>Well, they also shared region variables right now.</p>",
        "id": 160129276,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902458
    },
    {
        "content": "<p>in what sense?</p>",
        "id": 160129302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902472
    },
    {
        "content": "<p>they get renumbered, no?</p>",
        "id": 160129315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902480
    },
    {
        "content": "<p>they share free regions</p>",
        "id": 160129333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902497
    },
    {
        "content": "<p>In the sense that they're renumbered together.</p>",
        "id": 160129344,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902506
    },
    {
        "content": "<p>but do they share other regions too?</p>",
        "id": 160129348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902508
    },
    {
        "content": "<p>Which I guess could be described in the opposite way.</p>",
        "id": 160129447,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902557
    },
    {
        "content": "<p>:)</p>",
        "id": 160129453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902566
    },
    {
        "content": "<p>I guess what I'm saying is, apart from free regions, they should have disjoint region variables</p>",
        "id": 160129468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902580
    },
    {
        "content": "<p>(unless i'm misunderstanding something)</p>",
        "id": 160129498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902598
    },
    {
        "content": "<p>Yes</p>",
        "id": 160129499,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902600
    },
    {
        "content": "<p>the user type annotation thing is a bit odd</p>",
        "id": 160129524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902621
    },
    {
        "content": "<p>I guess I have to review the details of what we did there</p>",
        "id": 160129599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902658
    },
    {
        "content": "<p>it makes me a bit nervous that the promoted can -- in theory, anyway -- influence the outside type-check by unifying some type variable</p>",
        "id": 160129614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902683
    },
    {
        "content": "<p>otoh, I can't see why they would share type annotations with the surrounding context</p>",
        "id": 160129625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902694
    },
    {
        "content": "<blockquote>\n<p>I don't think I could find a case where we need to ensure the types are unified between the promoted and non-promoted MIR though.</p>\n</blockquote>\n<p>I guess this is what you were talking about here</p>",
        "id": 160129676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902734
    },
    {
        "content": "<p>Yes, so the potential issue is something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// x refernces promoted MIR</span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// y reference different promoted MIR</span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// z references a temporary</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160129796,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902845
    },
    {
        "content": "<p>Not that sharing type annotations is obviously enough here.</p>",
        "id": 160129872,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902894
    },
    {
        "content": "<p>why would <code>x</code> and <code>y</code> reference a different promoted MIR? will we promote same MIR twice?</p>",
        "id": 160129944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902965
    },
    {
        "content": "<p>Yes, we promote for each use</p>",
        "id": 160129965,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551902985
    },
    {
        "content": "<p>(also, seems a bit strange that we promote <em>at all</em> there, but ...)</p>",
        "id": 160129972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551902994
    },
    {
        "content": "<p>an aside: I keep wondering about the role of a HAIR</p>",
        "id": 160130020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903004
    },
    {
        "content": "<p>i.e., I'm not entirely convinced that promotion should operate on the MIR level</p>",
        "id": 160130033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903013
    },
    {
        "content": "<p>but a bit late for that I guess</p>",
        "id": 160130040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903023
    },
    {
        "content": "<p>I guess a side-effect of the above would be that <code>x</code> and <code>y</code> may have <code>'static</code> lifetime but <code>z</code> cannot?</p>",
        "id": 160130054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903045
    },
    {
        "content": "<p>indeed</p>",
        "id": 160130083,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903073
    },
    {
        "content": "<p>/me grumbles</p>",
        "id": 160130096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903081
    },
    {
        "content": "<p>The <code>ref mut</code> thing is arguably a bug.</p>",
        "id": 160130106,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903094
    },
    {
        "content": "<p>what about it specifically?</p>",
        "id": 160130116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903103
    },
    {
        "content": "<p>like, what do you see as the correct behavior here?</p>",
        "id": 160130124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903109
    },
    {
        "content": "<p><code>(ref mut z,)</code> prevents any promotion</p>",
        "id": 160130146,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903123
    },
    {
        "content": "<p>The correct behavior is for them to be the same.</p>",
        "id": 160130200,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903145
    },
    {
        "content": "<p>i.e., if we were doing <code>&amp;mut x.0</code> instead of <code>&amp;mut x</code>, we would not promote <code>x</code> anywhere</p>",
        "id": 160130230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903177
    },
    {
        "content": "<p>I agree that feels like a bug</p>",
        "id": 160130237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903182
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> -- question about promotion here =)</p>",
        "id": 160130249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903189
    },
    {
        "content": "<p>Or at least it feels mildly surprising</p>",
        "id": 160130258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> well even leaving that aside, one possibility might be that .. somehow .. type-checking <code>x</code> could influence type-checking <code>y</code>?</p>",
        "id": 160130445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903341
    },
    {
        "content": "<p>i.e., because they share a type variable through the user-type-annot</p>",
        "id": 160130457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903359
    },
    {
        "content": "<p>which is shared</p>",
        "id": 160130474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903363
    },
    {
        "content": "<p>kind of hard for me to see though</p>",
        "id": 160130522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903378
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, are we giving some of error if type variables from the user-type annot wind up unconstrained?</p>",
        "id": 160130552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903404
    },
    {
        "content": "<p>Anyway, I think my conclusion from this conversation is that I would indeed prefer to try a closure-like approach, but I'm .. fairly convinced that the current one is largely equivalent in practice.</p>",
        "id": 160130589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903438
    },
    {
        "content": "<p>Well, they don't share a type variable actually, since I changed type annotations to do <code>place type &lt;-&gt; inferred renumbered type &lt;-&gt; type annotation</code></p>",
        "id": 160130596,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903445
    },
    {
        "content": "<blockquote>\n<p>Also, <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span>, are we giving some of error if type variables from the user-type annot wind up unconstrained?</p>\n</blockquote>\n<p>I certainly haven't added one.</p>",
        "id": 160130673,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903492
    },
    {
        "content": "<blockquote>\n<p>Well, they don't share a type variable actually, since I changed type annotations to do <code>place type &lt;-&gt; inferred renumbered type &lt;-&gt; type annotation</code></p>\n</blockquote>\n<p>what does <code>&lt;-&gt;</code> represent here?</p>",
        "id": 160130690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903516
    },
    {
        "content": "<p>\"Are used in the same call of <code>eq</code> or <code>sub</code>\"</p>",
        "id": 160130704,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903539
    },
    {
        "content": "<p>Or \"are related directly while type checking\"</p>",
        "id": 160130744,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903579
    },
    {
        "content": "<p>ok, I'm reading into the user-type annotation</p>",
        "id": 160130776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903602
    },
    {
        "content": "<p>I see that we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CanonicalUserTypeAnnotation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">user_ty</span>: <span class=\"nc\">CanonicalUserType</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">inferred_ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160130835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903614
    },
    {
        "content": "<p><code>inferred_ty</code>, I take it, is the type that type-check resulted in?</p>",
        "id": 160130851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903631
    },
    {
        "content": "<p>Yes, although it's obtained somewhat hackily from the expression/pattern that the type annotation is being applied to.</p>",
        "id": 160130900,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903671
    },
    {
        "content": "<p>I think at least.</p>",
        "id": 160130919,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903692
    },
    {
        "content": "<p>Although now I'm not sure why it should be done that way.</p>",
        "id": 160131019,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903732
    },
    {
        "content": "<p>I was looking through the code a bit to see where it comes from</p>",
        "id": 160131131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903828
    },
    {
        "content": "<p>I remember thinking that would be necessary</p>",
        "id": 160131177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903843
    },
    {
        "content": "<p>but I can't entirely remember why anymore :)</p>",
        "id": 160131192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903851
    },
    {
        "content": "<p>so yeah looks like it comes from the <code>expr.ty</code> on the HAIR expression</p>",
        "id": 160131232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903893
    },
    {
        "content": "<p>..which is probably ok</p>",
        "id": 160131238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903900
    },
    {
        "content": "<p>anyway an orthogonal thing</p>",
        "id": 160131244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903903
    },
    {
        "content": "<p>There was a point where I remember having problems with canocicalizing one type and resolving another.</p>",
        "id": 160131276,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551903926
    },
    {
        "content": "<p>right, so the scheme now is that we use the <code>inferred_ty</code> to relate to everything</p>",
        "id": 160131362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903983
    },
    {
        "content": "<p>and then we relate the (instantiated) user-given type to <em>that</em></p>",
        "id": 160131367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551903989
    },
    {
        "content": "<p>I don't know how much that changes things, though, in that the <code>inferred_ty</code> thus represents shared regions between the various promoted constants</p>",
        "id": 160131396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904017
    },
    {
        "content": "<p>but it doesn't sound like a big problem</p>",
        "id": 160131405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904023
    },
    {
        "content": "<p>I think there's no real concern here</p>",
        "id": 160131414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904028
    },
    {
        "content": "<p>I was more worried about having some type variable like <code>?X</code> where one arm leaves it unconstrained but the other equates it to <code>u32</code> and somehow that causes trouble when checking the constant from the first arm, since <code>?X</code> would never wind up as <code>u32</code></p>",
        "id": 160131450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904069
    },
    {
        "content": "<p>I'm trying to think now how this closure-like check might work and whether we could lose region constraints</p>",
        "id": 160131579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904145
    },
    {
        "content": "<p>I think doing the obvious thing and seeing what goes wrong should be fine.</p>",
        "id": 160131694,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551904208
    },
    {
        "content": "<p>I was just reading over the tests</p>",
        "id": 160131885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904358
    },
    {
        "content": "<p>Are you interested in trying that change?</p>",
        "id": 160131889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904366
    },
    {
        "content": "<p>(I see meeting is now)</p>",
        "id": 160131897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904373
    },
    {
        "content": "<p>Yes, but I may take a while to get around to it</p>",
        "id": 160131960,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551904438
    },
    {
        "content": "<p>Should we file an issue about it?</p>",
        "id": 160132086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904550
    },
    {
        "content": "<p>(Probably)</p>",
        "id": 160132089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904553
    },
    {
        "content": "<p>It doesn't seem like high priority</p>",
        "id": 160132134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904563
    },
    {
        "content": "<blockquote>\n<p>Should we file an issue about it?</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 160132146,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1551904569
    },
    {
        "content": "<p>I'd like to at least link to this thread :)</p>",
        "id": 160132147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551904570
    },
    {
        "content": "<p>I was slightly suprised promotion works across match arms</p>",
        "id": 160180874,
        "sender_full_name": "oli",
        "timestamp": 1551949900
    },
    {
        "content": "<p>I could not come up with anything problematic, but <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> worries that this could be a symptom that there might be problematic cases</p>",
        "id": 160180978,
        "sender_full_name": "oli",
        "timestamp": 1551949968
    },
    {
        "content": "<blockquote>\n<p>I could not come up with anything problematic, but <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> worries that this could be a symptom that there might be problematic cases</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  Are you suggesting that the reason you coouldn't come up with something problematic is an indication enough that there might be something problematic ? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 160184283,
        "sender_full_name": "blitzerr",
        "timestamp": 1551953277
    },
    {
        "content": "<p>that sentence took me a bit to parse</p>",
        "id": 160184394,
        "sender_full_name": "oli",
        "timestamp": 1551953367
    },
    {
        "content": "<p>No, I believe there's no way to abuse this (right now)</p>",
        "id": 160184398,
        "sender_full_name": "oli",
        "timestamp": 1551953384
    },
    {
        "content": "<p>I screwed up the previous sentence. <code>this</code> is \"promotion works across match arms\" and not \"I could not come up with anything problematic\"</p>",
        "id": 160184472,
        "sender_full_name": "oli",
        "timestamp": 1551953430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  No worries. I was just being annoying <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 160184587,
        "sender_full_name": "blitzerr",
        "timestamp": 1551953581
    },
    {
        "content": "<blockquote>\n<p>I could not come up with anything problematic, but <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> worries that this could be a symptom that there might be problematic cases</p>\n</blockquote>\n<p>It does worry me mildly, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 160279882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552042020
    },
    {
        "content": "<p>Did you see the point about mixed <code>ref mut</code> vs <code>ref</code> and how that could result in perhaps surprising lifetimes?</p>",
        "id": 160279904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552042053
    },
    {
        "content": "<blockquote>\n<p>Yes, so the potential issue is something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// x refernces promoted MIR</span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// y reference different promoted MIR</span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// z references a temporary</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>in particular here the type of <code>x</code> and <code>y</code> could wind up inferred to <code>&amp;'static Foo</code> while <code>z</code> would be <code>&amp;'x mut Foo</code> -- i.e., it cannot be <code>'static</code></p>",
        "id": 160279962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552042101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> there isn't an issue filed about this discrepancy, is there?</p>",
        "id": 160279969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552042113
    },
    {
        "content": "<p>There's no issue for this.</p>",
        "id": 160283467,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552046453
    },
    {
        "content": "<p>We basically have to treat such a match as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">constant_with_types</span>::<span class=\"o\">&lt;</span><span class=\"n\">Types</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160284992,
        "sender_full_name": "oli",
        "timestamp": 1552048291
    },
    {
        "content": "<p>I agree with the surprising part, I was surprised by it after all. Not sure if there's a discrepancy here that needs addressing.</p>",
        "id": 160285287,
        "sender_full_name": "oli",
        "timestamp": 1552048601
    }
]