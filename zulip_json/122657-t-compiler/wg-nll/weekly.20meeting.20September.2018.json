[
    {
        "content": "<p>another heads up to <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span> that we'll be starting our 30min weekly meeting in about 3 minutes</p>",
        "id": 134187356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537298862
    },
    {
        "content": "<p>hi everyone!!!</p>",
        "id": 134187590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537299121
    },
    {
        "content": "<p>so lets see, as usual, our triage paper is <a href=\"https://paper.dropbox.com/doc/Non-lexical-lifetimes-NLL-Triage--AMicW69dcqk67pkASpFjFKpHAg-Em2cJrvxQMMFWLE7lE5Be#:uid=720601708427570955865879&amp;h2=August-27%2C-2018\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Non-lexical-lifetimes-NLL-Triage--AMicW69dcqk67pkASpFjFKpHAg-Em2cJrvxQMMFWLE7lE5Be#:uid=720601708427570955865879&amp;h2=August-27%2C-2018\">here</a></p>",
        "id": 134187639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299141
    },
    {
        "content": "<p>hello everyone :) <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 134187656,
        "sender_full_name": "lqd",
        "timestamp": 1537299179
    },
    {
        "content": "<p>i had meant to triage all of our unlabelled bugs before this meeting, but I didn't finish.</p>",
        "id": 134187672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299209
    },
    {
        "content": "<p>but a rough skim makes it seem to me like things aren't too bad</p>",
        "id": 134187686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299242
    },
    {
        "content": "<p>I also did not have time. I wound up spending it all doing reviews :)</p>",
        "id": 134187754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299293
    },
    {
        "content": "<p>so having said that, I <em>did</em> nominate some issues for discussion</p>",
        "id": 134187766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299308
    },
    {
        "content": "<p>so lets maybe jump into that first</p>",
        "id": 134187769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> thanks for renaming my PR, it was indeed the old name</p>",
        "id": 134187776,
        "sender_full_name": "lqd",
        "timestamp": 1537299324
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=+is%3Aopen+label%3AA-NLL+label%3AI-nominated\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=+is%3Aopen+label%3AA-NLL+label%3AI-nominated\">nominated issues</a></p>",
        "id": 134187781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299333
    },
    {
        "content": "<p>oldest first: ReStatic ICE with nll and thread_local <a href=\"https://github.com/rust-lang/rust/issues/51269\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51269\">#51269</a></p>",
        "id": 134187789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299353
    },
    {
        "content": "<p>I just nominated this because its been taken off the RC milestone but we haven't actually made a decision on it</p>",
        "id": 134187838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299373
    },
    {
        "content": "<p>yeah</p>",
        "id": 134187859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299409
    },
    {
        "content": "<p>bother</p>",
        "id": 134187861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299413
    },
    {
        "content": "<p>The core issue seems to be that this is a particular example where AST-borrowck had rejected the code, and NLL accepts it, and the problem is that is <code>unsafe</code> code operating on a <code>static mut</code> which essentially means that \"someone\" gets to make up what the rule will be</p>",
        "id": 134187864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299421
    },
    {
        "content": "<p>If we had infinite time I'd say we could engage the Unsafe Code Guidelines working group</p>",
        "id": 134187890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299472
    },
    {
        "content": "<p>right so the question is sort of \"how to treat <code>static mut</code>\" intersected with <code>#[thread_local]</code>, right?</p>",
        "id": 134187893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299473
    },
    {
        "content": "<p>or just punt the question entirely to them</p>",
        "id": 134187898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299478
    },
    {
        "content": "<p>(Yes I believe the Question is how do we treat the marriage of <code>static mut</code> with <code>#[thread_local]</code>)</p>",
        "id": 134187947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299502
    },
    {
        "content": "<p>so, I think that overlapping <code>&amp;mut</code> borrows of a <code>static mut</code> do likely indicate UB</p>",
        "id": 134187948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299505
    },
    {
        "content": "<p>well, it's a bit broader than that really</p>",
        "id": 134187952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299513
    },
    {
        "content": "<p>the conservative answer is that we should do whatever AST-borrowck did</p>",
        "id": 134187955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299517
    },
    {
        "content": "<p>so e.g. the AST borrow checker accepts this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134187988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299564
    },
    {
        "content": "<p>however, under every model of the usnafe code guidelines we've come up with this, this is UB</p>",
        "id": 134187995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299577
    },
    {
        "content": "<p>but... it seems consistent with how we handle <code>*mut</code></p>",
        "id": 134187999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299588
    },
    {
        "content": "<p>to accept it</p>",
        "id": 134188001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299591
    },
    {
        "content": "<p>(one could imagine linting)</p>",
        "id": 134188005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299596
    },
    {
        "content": "<p>yes linting is what I was just wondering about</p>",
        "id": 134188051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299607
    },
    {
        "content": "<p>ah hmm so</p>",
        "id": 134188054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299618
    },
    {
        "content": "<p>the reason that we accept it presently</p>",
        "id": 134188055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299622
    },
    {
        "content": "<p>is that we consider <code>FOO</code> to be an \"unsafe place\"</p>",
        "id": 134188058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299627
    },
    {
        "content": "<p>and as a result we ignore the borrow</p>",
        "id": 134188060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299630
    },
    {
        "content": "<p>you could imagine <em>not</em> ignoring the borrow for unsafe places</p>",
        "id": 134188064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299636
    },
    {
        "content": "<p>but then modifying the errors we report</p>",
        "id": 134188069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299642
    },
    {
        "content": "<p>still, I think I'd rather do that... later :)</p>",
        "id": 134188070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299652
    },
    {
        "content": "<p>I do want to be clear here</p>",
        "id": 134188072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299654
    },
    {
        "content": "<blockquote>\n<p>but then modifying the errors we report</p>\n</blockquote>\n<p>i.e., to make them lints</p>",
        "id": 134188075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is showing examples where AST-borrowck accepts the code</p>",
        "id": 134188083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299667
    },
    {
        "content": "<p>but the actual bug under discussion</p>",
        "id": 134188086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299674
    },
    {
        "content": "<p>presently, the MIR-based borrowck <em>also</em> accepts that code</p>",
        "id": 134188088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299676
    },
    {
        "content": "<p>shows examples where AST_borrowck rejects teh code</p>",
        "id": 134188091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299682
    },
    {
        "content": "<p>right</p>",
        "id": 134188094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299686
    },
    {
        "content": "<p>I am more worried about people relying on those checks</p>",
        "id": 134188097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299695
    },
    {
        "content": "<p>and getting surprised by NLL's behavior</p>",
        "id": 134188101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299700
    },
    {
        "content": "<p>relying on them how?</p>",
        "id": 134188103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299706
    },
    {
        "content": "<p>relying on them to reject their code?</p>",
        "id": 134188106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299714
    },
    {
        "content": "<p>maybe. I don't know that one could build a safe abstraction that breaks as a result of this. maybe with some crazy enough macros.</p>",
        "id": 134188157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299746
    },
    {
        "content": "<p>but indeed it might just catch a bug</p>",
        "id": 134188162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299757
    },
    {
        "content": "<p>so specifically what happens is this:</p>",
        "id": 134188166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299761
    },
    {
        "content": "<p>you can return an <code>&amp;'static mut T</code> to a <code>#[thread_local] static mut</code></p>",
        "id": 134188177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299776
    },
    {
        "content": "<p>normally, <code>#[thread_local]</code> things are not permitted to outlive the current fn</p>",
        "id": 134188187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299790
    },
    {
        "content": "<p>since your thread may exit after it returns</p>",
        "id": 134188189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299794
    },
    {
        "content": "<p>the challenge is that the MIR borrowck enforces this by looking for an in-scope borrow when the fn returns</p>",
        "id": 134188208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299829
    },
    {
        "content": "<p>and if we modify the fn that does that check, it will affect other things too .. I guess we could add some more flags somewhere or other</p>",
        "id": 134188267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299857
    },
    {
        "content": "<p>feels like a pretty corner case though</p>",
        "id": 134188269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299862
    },
    {
        "content": "<p>well</p>",
        "id": 134188273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299868
    },
    {
        "content": "<p>I tend to think <code>static mut</code> should just be deprecated anyway</p>",
        "id": 134188274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299868
    },
    {
        "content": "<p>we don't have to <em>decide</em> right now</p>",
        "id": 134188279,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299874
    },
    {
        "content": "<p>(weren't we talking about that anyway?)</p>",
        "id": 134188280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299877
    },
    {
        "content": "<p>we just need to set a deadline for a decision</p>",
        "id": 134188284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299884
    },
    {
        "content": "<p>and the code implementing that decision</p>",
        "id": 134188289,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299891
    },
    {
        "content": "<p>i.e. I want to put a milestone back on this ticket, or close it, ...</p>",
        "id": 134188299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299904
    },
    {
        "content": "<p>(but really we cannot close it; even if we accept the current behavior, it needs a regression test; thus the E-needstest label)</p>",
        "id": 134188315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does this feel like an RC2 thing to you, or a Release thing?</p>",
        "id": 134188331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299950
    },
    {
        "content": "<p>release, I suppose</p>",
        "id": 134188340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299957
    },
    {
        "content": "<p>And \"release\" here means, if we decide to start rejecting code, we'll need to do some beta backporting?</p>",
        "id": 134188390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537299980
    },
    {
        "content": "<p>I guess we could preserve the existing AST behavior with enough work</p>",
        "id": 134188394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537299983
    },
    {
        "content": "<p>but I'd also be ok with the existing MIR behavior of \"just ignore the dang things\"</p>",
        "id": 134188407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300003
    },
    {
        "content": "<p>yeah I guess.. let's set the deadline to RC2 to avoid that</p>",
        "id": 134188417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300022
    },
    {
        "content": "<p>maybe we can raise the question at the T-lang meeting</p>",
        "id": 134188428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300030
    },
    {
        "content": "<p>of what sorts of rules we ought to impose on <code>static mut</code> etc</p>",
        "id": 134188433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300038
    },
    {
        "content": "<p>hmm. We may need to prepare a presentation more structured than this ticket if we want to take it up to T-lang. :)</p>",
        "id": 134188516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300125
    },
    {
        "content": "<p>yes, definitely</p>",
        "id": 134188536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300144
    },
    {
        "content": "<p>let's move on for now but I think you and I should write up something</p>",
        "id": 134188544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300157
    },
    {
        "content": "<p>and/or I can do it</p>",
        "id": 134188546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300160
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/issues/53639\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53639\">https://github.com/rust-lang/rust/issues/53639</a></p>",
        "id": 134188566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300178
    },
    {
        "content": "<p>okay the other nominated issue: \"NLL + impl Trait: Borrow checker error on else branch\" <a href=\"https://github.com/rust-lang/rust/issues/53528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53528\">#53528</a></p>",
        "id": 134188615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300203
    },
    {
        "content": "<p>so I think I actually want to close it at this point</p>",
        "id": 134188632,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300222
    },
    {
        "content": "<p>but I also just wanted to double check with you all</p>",
        "id": 134188640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300231
    },
    {
        "content": "<p>I skimmed your comments</p>",
        "id": 134188646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300247
    },
    {
        "content": "<p>is this something polonius would handle ?</p>",
        "id": 134188666,
        "sender_full_name": "lqd",
        "timestamp": 1537300272
    },
    {
        "content": "<p>here's perhaps the best example to discuss: <a href=\"https://play.rust-lang.org/?gist=8fd149ec95f133999e084eca5cc27d13&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=8fd149ec95f133999e084eca5cc27d13&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=8fd149ec95f133999e084eca5cc27d13&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 134188671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300279
    },
    {
        "content": "<p>namely, it shows this great hack of actually <em>binding</em> <code>xx @ None =&gt; ...</code></p>",
        "id": 134188686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300305
    },
    {
        "content": "<p>and then doing <code>drop(xx)</code></p>",
        "id": 134188694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300320
    },
    {
        "content": "<p>which I suspect most code reviewers would say \"what is wrong with you, delete all that\"</p>",
        "id": 134188744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300338
    },
    {
        "content": "<p>but in this case, dropping a <code>None</code> gets the code to compile</p>",
        "id": 134188758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300355
    },
    {
        "content": "<p>and I guess I wanted ask: Do we think we'd want to try to make things smarter so that people weren't even tempted to investigate hacks like this</p>",
        "id": 134188770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300383
    },
    {
        "content": "<p>My current take is this:</p>",
        "id": 134188795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300418
    },
    {
        "content": "<p>In the past there have been proposals to unify Enums and Structs in various ways</p>",
        "id": 134188809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300436
    },
    {
        "content": "<p>such that you could actually have <code>None</code> be a type</p>",
        "id": 134188857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300446
    },
    {
        "content": "<p>and <code>None: Option</code> would be a subtype, etc</p>",
        "id": 134188864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300462
    },
    {
        "content": "<p>ok, so, can I just double check something. The error is match we do desugar the <code>if let</code> to something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">get_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">xx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">..</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// foo gets dropped here</span>\n</pre></div>\n\n\n<p>To accept this, we would have to figure out that — on the <code>else</code> path — the type of <code>foo</code> can be \"refined\" to exclude <code>Some</code>? (or, equivalently, to <code>None</code>)</p>",
        "id": 134188886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300501
    },
    {
        "content": "<p>is this correct, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ?</p>",
        "id": 134188900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300512
    },
    {
        "content": "<p>perhaps this should be out of band, but I don't understand why the binding <code>xx @</code> causes  a problem if it's never used. That feels like a thing that NLL would handle</p>",
        "id": 134188913,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537300533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Yes, to solve the bug in full, we'd have to get to that point</p>",
        "id": 134188915,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300536
    },
    {
        "content": "<p>namely, we'd have to actually deal with the case of <code>if let</code> and having knowledge of what that implies for the <code>else</code> branch</p>",
        "id": 134188976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300567
    },
    {
        "content": "<p>So</p>",
        "id": 134188985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300578
    },
    {
        "content": "<p>another way to solve this</p>",
        "id": 134188986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300581
    },
    {
        "content": "<p>I suspect MIR codegen would have to change to emit drops on each branch</p>",
        "id": 134188990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300584
    },
    {
        "content": "<p>instead of at the end</p>",
        "id": 134188995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300587
    },
    {
        "content": "<p>I imagine that drop elaboration knows the <code>.as&lt;Some&gt;</code> case.. was moved? Oh, I think we don't track that</p>",
        "id": 134189009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300611
    },
    {
        "content": "<p>yeah</p>",
        "id": 134189012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300619
    },
    {
        "content": "<p>I think this is WONTFIX, possible future extension</p>",
        "id": 134189018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300625
    },
    {
        "content": "<p>it's an interesting problem though!</p>",
        "id": 134189023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> maybe follow up about your Q after the meeting; in particular, its not the binding of <code>xx</code> that is causing the problem here.</p>",
        "id": 134189028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm inclined to also just say \"this is currently a WONTFIX; maybe for Rust 2027...\"</p>",
        "id": 134189053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300675
    },
    {
        "content": "<p>okay sounds good to me</p>",
        "id": 134189095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300687
    },
    {
        "content": "<p>we should consider diagnostics though</p>",
        "id": 134189099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300692
    },
    {
        "content": "<p>Rust 2021 plz</p>",
        "id": 134189100,
        "sender_full_name": "lqd",
        "timestamp": 1537300695
    },
    {
        "content": "<p>that said, I think that some of the pending PRs</p>",
        "id": 134189103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300698
    },
    {
        "content": "<p>might address this</p>",
        "id": 134189106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300701
    },
    {
        "content": "<p>(but of course other people should chime in if they have thoughts)</p>",
        "id": 134189109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300702
    },
    {
        "content": "<p>e.g., yours, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, that is more detailed</p>",
        "id": 134189112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300708
    },
    {
        "content": "<p>it would be very helpful if we were talking about <code>drop</code> here</p>",
        "id": 134189114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300714
    },
    {
        "content": "<p>at least for experts like us :P</p>",
        "id": 134189118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300719
    },
    {
        "content": "<p>you could even imagine us trying to explain that, on the <code>else</code> path, we still need to drop because no move occurred</p>",
        "id": 134189123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300735
    },
    {
        "content": "<p>right. Another instance of \"lets explain drops of temporary values\"</p>",
        "id": 134189138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300760
    },
    {
        "content": "<p>Is there any concern that impl trait causes it vs non-impl trait?</p>",
        "id": 134189139,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537300760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think that's more about how impl Trait has to allow for a destructor</p>",
        "id": 134189150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300791
    },
    {
        "content": "<p>I have a comment about this somewhere</p>",
        "id": 134189153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300796
    },
    {
        "content": "<p>yes, that's the problem</p>",
        "id": 134189164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300802
    },
    {
        "content": "<p>we don't have a way to say \"this impl Trait will never implement Drop\"</p>",
        "id": 134189209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300809
    },
    {
        "content": "<p>the interesting thing that you maybe <em>should</em> be asking is</p>",
        "id": 134189226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300823
    },
    {
        "content": "<p>gotcha. More cases of diagnostics for the \"maybe\" case</p>",
        "id": 134189229,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537300825
    },
    {
        "content": "<p>doesn't this mean that NLL makes adding <code>Drop</code> semver breaking?</p>",
        "id": 134189232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300832
    },
    {
        "content": "<p>the answer is \"yes\", though it already was</p>",
        "id": 134189236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300840
    },
    {
        "content": "<p>but perhaps more so than before</p>",
        "id": 134189241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300848
    },
    {
        "content": "<p>Oh, I was about to ask that, but you beat me to it <span class=\"emoji emoji-1f607\" title=\"innocent\">:innocent:</span></p>",
        "id": 134189243,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537300850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yeah just look at my comment sequence on <a href=\"https://github.com/rust-lang/rust/issues/53528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53528\">#53528</a></p>",
        "id": 134189244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I had a very gradual awakening to the scope of the problem</p>",
        "id": 134189250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300863
    },
    {
        "content": "<p>Or right, I recall when this was added now.</p>",
        "id": 134189271,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537300895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> we need some way to track these sorts of problems</p>",
        "id": 134189277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300898
    },
    {
        "content": "<p>that is, possible future extensions and interesting scenarios</p>",
        "id": 134189345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300928
    },
    {
        "content": "<p>not sure where to do that though :(</p>",
        "id": 134189347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300932
    },
    {
        "content": "<p>so, it's 4pm here...</p>",
        "id": 134189353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300942
    },
    {
        "content": "<p>rfc repo/issues, of course</p>",
        "id": 134189356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300949
    },
    {
        "content": "<p>we didn't talk about open issues</p>",
        "id": 134189357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300949
    },
    {
        "content": "<p>(ha ha)</p>",
        "id": 134189360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300953
    },
    {
        "content": "<p>sigh</p>",
        "id": 134189367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300961
    },
    {
        "content": "<p>theoretically yes :)</p>",
        "id": 134189369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300964
    },
    {
        "content": "<p>oh okay, lets maybe check on the open issues</p>",
        "id": 134189370,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537300965
    },
    {
        "content": "<p>one thing I think we should follow up on is type annotations</p>",
        "id": 134189374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300977
    },
    {
        "content": "<p>I was supposed to open some subissues I think</p>",
        "id": 134189383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300984
    },
    {
        "content": "<p>but I failed to do it</p>",
        "id": 134189387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537300987
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> made the cogent observation  that <code>#[thread_local]</code> is unstable <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> — so we can actually file this under \"known issues\" with <code>#[thread_local]</code> and move on with our lives, probably</p>",
        "id": 134189490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301113
    },
    {
        "content": "<p>(re: that other issue)</p>",
        "id": 134189495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301121
    },
    {
        "content": "<p>it seems like type annotations is the major thing</p>",
        "id": 134189517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301157
    },
    {
        "content": "<p>okay, lets see, unassigned issues</p>",
        "id": 134189518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301160
    },
    {
        "content": "<p>though <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> found some diagnostic issues from the NLL run that I was supposed to open issues on</p>",
        "id": 134189568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301168
    },
    {
        "content": "<p>right, and the rest of the type annotations work</p>",
        "id": 134189569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301171
    },
    {
        "content": "<p>there are a lot of pending diagnostic-y PRs,</p>",
        "id": 134189571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301173
    },
    {
        "content": "<p>I think want to start giving p=1 to them</p>",
        "id": 134189572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301177
    },
    {
        "content": "<p>because it's hard to tell what is \"in flight\"</p>",
        "id": 134189577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301183
    },
    {
        "content": "<p>mmm</p>",
        "id": 134189583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301188
    },
    {
        "content": "<p>I don't know if that's a good argument for p=1</p>",
        "id": 134189591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301196
    },
    {
        "content": "<p>isn't in flight stuff supposed to have [WIP] on it?</p>",
        "id": 134189601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301210
    },
    {
        "content": "<p>e.g.  <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, and <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> all have such PRs</p>",
        "id": 134189602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301213
    },
    {
        "content": "<p>or maybe I misunderstand what you mean by \"in flight\"</p>",
        "id": 134189605,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301218
    },
    {
        "content": "<p>sorry, what I mean is, it's hard to tell what the fixed problems are</p>",
        "id": 134189610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301223
    },
    {
        "content": "<p>ah like which issues have PR's</p>",
        "id": 134189623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301235
    },
    {
        "content": "<p>and what the diagnostics will look like once those PRs all land</p>",
        "id": 134189624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301236
    },
    {
        "content": "<p>that just haven't landed</p>",
        "id": 134189630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301243
    },
    {
        "content": "<p>well</p>",
        "id": 134189706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301290
    },
    {
        "content": "<p>maybe we need to do a NLL diagnostics rollup PR</p>",
        "id": 134189710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301298
    },
    {
        "content": "<p>and p=1 that? wfm</p>",
        "id": 134189730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301314
    },
    {
        "content": "<p>okay</p>",
        "id": 134189736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301323
    },
    {
        "content": "<p>do we want to try to figure out who's going to follow up with type annotation work?</p>",
        "id": 134189758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301345
    },
    {
        "content": "<p>we could, yes</p>",
        "id": 134189780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301370
    },
    {
        "content": "<p>It might be hard to do a rollup because of merge conflicts. I think all of my PRs in the past few days that are attempting to land or recently landed have needed rebases due to other diagnostic PRs landing.</p>",
        "id": 134189782,
        "sender_full_name": "davidtwco",
        "timestamp": 1537301373
    },
    {
        "content": "<p>a lot of negatives in that sentence :)</p>",
        "id": 134189798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I suspect it will indeed be a rollup that will require some manual effort</p>",
        "id": 134189803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301396
    },
    {
        "content": "<p>which is why one of us will probably need to do it</p>",
        "id": 134189851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301405
    },
    {
        "content": "<p>instead of having one of the usual rollup creators do it</p>",
        "id": 134189871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301419
    },
    {
        "content": "<p>confirm</p>",
        "id": 134189877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301429
    },
    {
        "content": "<p>(that was my expectation)</p>",
        "id": 134189884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301438
    },
    {
        "content": "<p>I'm happy to have a shot at doing the rollup.</p>",
        "id": 134189896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301451
    },
    {
        "content": "<p>which PRs should be included? maybe we can make a list</p>",
        "id": 134189960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301515
    },
    {
        "content": "<p>how about this:</p>",
        "id": 134190009,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301530
    },
    {
        "content": "<p>I'll open a bug</p>",
        "id": 134190012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301533
    },
    {
        "content": "<p>I realize there are more. e.g. <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> has <a href=\"https://github.com/rust-lang/rust/issues/54255\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54255\">#54255</a></p>",
        "id": 134190035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301563
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/rust-lang/rust/issues/54329\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54329\">#54329</a></p>",
        "id": 134190045,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301576
    },
    {
        "content": "<blockquote>\n<p>I'll open a bug</p>\n</blockquote>\n<p>and we can throw links in there?</p>",
        "id": 134190046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301576
    },
    {
        "content": "<p>exactly</p>",
        "id": 134190050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301581
    },
    {
        "content": "<p>so back to \"NLL should identify and respect the lifetime annotations that the user wrote\" <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">#47184</a></p>",
        "id": 134190091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301637
    },
    {
        "content": "<p>no one's assigned to the issue. the bullet list has these items left: \"Complex bindings with no initializer\"; \"Associated constants in expressions?\"; \"Associated constants in patterns?\"</p>",
        "id": 134190158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301689
    },
    {
        "content": "<p>ok so I think I would divide it up into:</p>\n<ul>\n<li>Lifetimes in patterns:</li>\n<li>Associated constants in expressions/patterns</li>\n<li>Casts: x as T</li>\n<li>More complicated let bindings. eg. let (x, y): (u32, u32) = (33, 54);</li>\n</ul>",
        "id": 134190162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you were looking for tasks, maybe I can carve out some of those? <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> had also expressed interest, and maybe <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ...</p>",
        "id": 134190175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301717
    },
    {
        "content": "<p>I think \"casts\" would be a good starter issue</p>",
        "id": 134190183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301748
    },
    {
        "content": "<p>maybe it makes sense to have one person, since they are all kind of related</p>",
        "id": 134190186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301753
    },
    {
        "content": "<p>i was indeed looking for tasks</p>",
        "id": 134190234,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537301781
    },
    {
        "content": "<p>well, are they that related?</p>",
        "id": 134190240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301793
    },
    {
        "content": "<p>in the sense that they all involve 'capturing' a user's type and enforcing it later</p>",
        "id": 134190254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301818
    },
    {
        "content": "<p>I guess I was not sure if patterns end up overlapping much with casts</p>",
        "id": 134190257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301820
    },
    {
        "content": "<p>but not otherwise</p>",
        "id": 134190262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301823
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you were looking for tasks, maybe I can carve out some of those? <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> had also expressed interest, and maybe <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ...</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134190271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537301835
    },
    {
        "content": "<p>it's just that they'll rely on the same helper fns and things</p>",
        "id": 134190273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301839
    },
    {
        "content": "<p>okay. This issue probably is the most pressing thing right now</p>",
        "id": 134190294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301872
    },
    {
        "content": "<p>since I think the last of our known performance issues seem to have been resolved?</p>",
        "id": 134190344,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301889
    },
    {
        "content": "<p>basically. <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> has a great PR helping with memory use</p>",
        "id": 134190362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301908
    },
    {
        "content": "<p>two of them</p>",
        "id": 134190366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301915
    },
    {
        "content": "<p>maybe two, I forget</p>",
        "id": 134190372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301920
    },
    {
        "content": "<p>but yeah</p>",
        "id": 134190373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301922
    },
    {
        "content": "<p>it might be time to rejuvenate polonius then :)</p>",
        "id": 134190381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301928
    },
    {
        "content": "<p>(the first already landed)</p>",
        "id": 134190383,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301931
    },
    {
        "content": "<p>there is something else</p>",
        "id": 134190388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301943
    },
    {
        "content": "<p>that is also relevant</p>",
        "id": 134190393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301944
    },
    {
        "content": "<p>the 2nd main one failed travis just now (3h timeout)</p>",
        "id": 134190394,
        "sender_full_name": "lqd",
        "timestamp": 1537301946
    },
    {
        "content": "<p>oh didn't someone ask above if Polonius would help with that WONTFIX bug</p>",
        "id": 134190400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537301951
    },
    {
        "content": "<p>not sure how to schedule</p>",
        "id": 134190401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301952
    },
    {
        "content": "<blockquote>\n<p>oh didn't someone ask above if Polonius would help with that WONTFIX bug</p>\n</blockquote>\n<p>it won't</p>",
        "id": 134190403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301957
    },
    {
        "content": "<p>at least, not directly</p>",
        "id": 134190411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301970
    },
    {
        "content": "<p>in particular, we'll still generate the facts that say that the region is live and used in the dtor</p>",
        "id": 134190420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537301985
    },
    {
        "content": "<blockquote>\n<p>the 2nd main one failed travis just now (3h timeout)</p>\n</blockquote>\n<p>sounds maybe like a retry</p>",
        "id": 134190482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302009
    },
    {
        "content": "<blockquote>\n<p>there is something else</p>\n</blockquote>\n<p>what I was referring to here:</p>\n<p>right now, we still use the \"lexical region checker\" for things that are not fn bodies</p>",
        "id": 134190489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302027
    },
    {
        "content": "<p>e.g., WF checking</p>",
        "id": 134190493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302029
    },
    {
        "content": "<p>I would like to be able to fully transition to NLL at some point</p>",
        "id": 134190501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302041
    },
    {
        "content": "<p>this will require removing that code</p>",
        "id": 134190504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302046
    },
    {
        "content": "<p>what's WF?</p>",
        "id": 134190507,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537302050
    },
    {
        "content": "<p>sorry, well-formedness checking</p>",
        "id": 134190510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302056
    },
    {
        "content": "<blockquote>\n<p>sounds maybe like a retry</p>\n</blockquote>\n<p>(it's <a href=\"https://github.com/rust-lang/rust/issues/54318\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54318\">#54318</a> for people with bors permissions)</p>",
        "id": 134190527,
        "sender_full_name": "lqd",
        "timestamp": 1537302068
    },
    {
        "content": "<p>e.g., if you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this is the code that checks that <code>T: 'a</code> is required (though now we infer that)</p>",
        "id": 134190531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302076
    },
    {
        "content": "<p>but there are also lots of random bits of code that rely on the old checker</p>",
        "id": 134190541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302094
    },
    {
        "content": "<p>e.g., the stuff that checks impl method signatures against the sig from the traits</p>",
        "id": 134190549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302104
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> thanks)</p>",
        "id": 134190631,
        "sender_full_name": "lqd",
        "timestamp": 1537302175
    },
    {
        "content": "<p>anyway, let's drop that for now</p>",
        "id": 134190636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302182
    },
    {
        "content": "<p>I'll try to file some issues about type annotations</p>",
        "id": 134190644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302187
    },
    {
        "content": "<p>(right now, probably)</p>",
        "id": 134190664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302205
    },
    {
        "content": "<p>wait, is type ascription still a thing?</p>",
        "id": 134190678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302227
    },
    {
        "content": "<p>we probably should add that to the list too</p>",
        "id": 134190681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537302232
    },
    {
        "content": "<p>isn't that <a href=\"https://github.com/rust-lang/rust/issues/47184\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184\">#47184</a>?</p>",
        "id": 134190718,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537302244
    },
    {
        "content": "<p>no wait, i was thinking of an RFC</p>",
        "id": 134190738,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537302264
    },
    {
        "content": "<p>yes, some of the subparts of this issue</p>",
        "id": 134190740,
        "sender_full_name": "lqd",
        "timestamp": 1537302265
    },
    {
        "content": "<p>(ah recent generalized type ascription rfc from centril)</p>",
        "id": 134190751,
        "sender_full_name": "lqd",
        "timestamp": 1537302284
    },
    {
        "content": "<p>yes, the fact that you can have type ascriptions with expressions</p>",
        "id": 134190783,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537302312
    },
    {
        "content": "<p>i'm unsure if that relates to us</p>",
        "id": 134190789,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1537302322
    },
    {
        "content": "<p>is it all-hands on deck with type annotations for this week ?</p>",
        "id": 134190799,
        "sender_full_name": "lqd",
        "timestamp": 1537302335
    },
    {
        "content": "<p>(i'll move to a topic)</p>",
        "id": 134190808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537302352
    }
]