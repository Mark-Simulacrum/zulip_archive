[
    {
        "content": "<p>opening this for discussion</p>",
        "id": 134758182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538066947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> don't remember if you've said something but it's all the needed information on the issue?</p>",
        "id": 134758203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538066979
    },
    {
        "content": "<p>need to check a bit the issues you mentioned, <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> and <a href=\"https://github.com/rust-lang/rust/issues/53258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53258\">#53258</a></p>",
        "id": 134758273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067026
    },
    {
        "content": "<p>I see that the code in AST borrowck fails</p>",
        "id": 134758390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux tmp]$ rustc test.rs\nerror[E0381]: use of possibly uninitialized variable: `s.0`\n --&gt; test.rs:5:23\n  |\n5 |     println!(&quot;{} {}&quot;, s.0, s.1);\n  |                       ^^^ use of possibly uninitialized `s.0`\n\nerror[E0381]: use of possibly uninitialized variable: `s.1`\n --&gt; test.rs:5:28\n  |\n5 |     println!(&quot;{} {}&quot;, s.0, s.1);\n  |                            ^^^ use of possibly uninitialized `s.1`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0381`.\n</pre></div>",
        "id": 134758393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067148
    },
    {
        "content": "<p>and it gives that warning in NLL</p>",
        "id": 134758408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067160
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux tmp]$ rustc test.rs\nwarning: variable does not need to be mutable\n --&gt; test.rs:4:9\n  |\n4 |     let mut s: (i32, i32);\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: #[warn(unused_mut)] on by default\n</pre></div>",
        "id": 134758410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067164
    },
    {
        "content": "<p>you also mention that it would be a good idea to fix <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a></p>",
        "id": 134758450,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067212
    },
    {
        "content": "<p>so what should I do?</p>",
        "id": 134758465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067228
    },
    {
        "content": "<p>is the idea to fix <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a>?</p>",
        "id": 134758478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067242
    },
    {
        "content": "<p>or should we first remove that warning?</p>",
        "id": 134758521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538067250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> let me get back up to speed</p>",
        "id": 134761846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070361
    },
    {
        "content": "<p>ok I see</p>",
        "id": 134761894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070370
    },
    {
        "content": "<p>well</p>",
        "id": 134761895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070370
    },
    {
        "content": "<p>what I meant was \"remove the warning\"</p>",
        "id": 134761898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070377
    },
    {
        "content": "<p>I'm not 100% sure how to do that :)</p>",
        "id": 134761903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538070385
    },
    {
        "content": "<p>but I can get you in the right direction</p>",
        "id": 134763032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-425189383\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-425189383\">left some preliminary notes here</a>, but you'll have to do a bit of digging</p>",
        "id": 134763295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538071624
    },
    {
        "content": "<p>yeah, no worries</p>",
        "id": 134763915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538072211
    },
    {
        "content": "<p>I mainly wanted to know what to do</p>",
        "id": 134763926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538072222
    },
    {
        "content": "<p>but thanks for the tips :)</p>",
        "id": 134763934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538072227
    },
    {
        "content": "<blockquote>\n<p>So we probably need to add something to that set when we see a.b = c. That is a MIR assignment, so it winds up invoking mutate_place:</p>\n</blockquote>",
        "id": 134766470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074477
    },
    {
        "content": "<p>I'm not sure exactly what you meant there</p>",
        "id": 134766484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074496
    },
    {
        "content": "<p>you meant that I need to fall in that part of the code, line 493?</p>",
        "id": 134766505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074513
    },
    {
        "content": "<p>you meant just that mutate_place needs to be called like in 493?</p>",
        "id": 134766523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074538
    },
    {
        "content": "<p>I am just tracing through what happens</p>",
        "id": 134766592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538074583
    },
    {
        "content": "<p>when we borrow check the example</p>",
        "id": 134766595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538074586
    },
    {
        "content": "<p>you meant that <code>StatementKind::Assign</code> ...</p>",
        "id": 134766597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074587
    },
    {
        "content": "<p>no worries I can do it</p>",
        "id": 134766604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074593
    },
    {
        "content": "<p>I didn't trace that far, as you can see :)</p>",
        "id": 134766610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538074600
    },
    {
        "content": "<p>I didn't want to dismiss your message</p>",
        "id": 134766613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074602
    },
    {
        "content": "<p>yeah, don't worry</p>",
        "id": 134766617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074612
    },
    {
        "content": "<p>was trying to understand that just the used_mut bit is already an important tip</p>",
        "id": 134766638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074636
    },
    {
        "content": "<p>I just wasn't sure what was mutate_place for and why did you mentioned it</p>",
        "id": 134766654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074664
    },
    {
        "content": "<p>from what I've seen it seems like a.b = c is not an <code>StatementKind::Assign</code> ?</p>",
        "id": 134766794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538074747
    },
    {
        "content": "<p>it is</p>",
        "id": 134767125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538075060
    },
    {
        "content": "<p>was just trying that :)</p>",
        "id": 134767130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538075074
    },
    {
        "content": "<p>but yeah <code>used_mut</code> was the key bit</p>",
        "id": 134767135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538075080
    },
    {
        "content": "<p>so if it is, weren't you saying that it needs to call mutate_place?</p>",
        "id": 134767232,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538075168
    },
    {
        "content": "<p>if it is <code>Assign</code> that should be called</p>",
        "id": 134767237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538075179
    },
    {
        "content": "<blockquote>\n<p>so if it is, weren't you saying that it needs to call mutate_place?</p>\n</blockquote>\n<p>I'm just saying it already will be called</p>",
        "id": 134767282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538075261
    },
    {
        "content": "<p>at least, I <em>think</em> so</p>",
        "id": 134767294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538075281
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134767296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538075282
    },
    {
        "content": "<p>so, in this case, is calling <a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1721\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1721\">https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1721</a></p>",
        "id": 134769740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538078052
    },
    {
        "content": "<p>the root_place being for <code>s</code> in the example</p>",
        "id": 134769752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538078078
    },
    {
        "content": "<p>the thing is <code>is_local_mutation_allowed</code> is <code>No</code></p>",
        "id": 134769767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538078105
    },
    {
        "content": "<p>I guess it should be <code>Yes</code> for this to work?</p>",
        "id": 134769786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538078123
    },
    {
        "content": "<p>taking a look at what the code does</p>",
        "id": 134769793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538078138
    },
    {
        "content": "<p>oh dear I hate that flag</p>",
        "id": 134771561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080073
    },
    {
        "content": "<p>so the annoying thing here</p>",
        "id": 134771569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080082
    },
    {
        "content": "<p>is that the logic of the code as is is correct</p>",
        "id": 134771609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080087
    },
    {
        "content": "<p>but we are a bit inconsistent in some sense</p>",
        "id": 134771614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080094
    },
    {
        "content": "<blockquote>\n<p>is that the logic of the code as is is correct</p>\n</blockquote>\n<p>that is, the logic of the <code>used_mut</code> code</p>",
        "id": 134771638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080124
    },
    {
        "content": "<p>inconsistent how?</p>",
        "id": 134771669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080169
    },
    {
        "content": "<p>I was guessing that for some reason in this case that flag was set to No when it should be Yes</p>",
        "id": 134771691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080202
    },
    {
        "content": "<p>well, you are not supposed to need <code>mut</code> unless a given path is assigned more than once</p>",
        "id": 134771711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080204
    },
    {
        "content": "<p>but unsure if that's right</p>",
        "id": 134771751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080208
    },
    {
        "content": "<p>yeah, but in this particular case you want to allow mut regardless of that</p>",
        "id": 134771775,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080234
    },
    {
        "content": "<p>hmm</p>",
        "id": 134771829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080311
    },
    {
        "content": "<p>I am looking a bit</p>",
        "id": 134771901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080372
    },
    {
        "content": "<p>I'm actually a bit confused</p>",
        "id": 134771903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080377
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134771906,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080379
    },
    {
        "content": "<p>so if I understood correct from the issue we have two alternatives</p>",
        "id": 134771920,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080399
    },
    {
        "content": "<p>well</p>",
        "id": 134771930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080408
    },
    {
        "content": "<p>or we do the right thing and implement <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">https://github.com/rust-lang/rust/issues/21232</a></p>",
        "id": 134771939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080417
    },
    {
        "content": "<p>what debug statements did you add :)</p>",
        "id": 134771944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080421
    },
    {
        "content": "<p>or we just remove the warning for that mut</p>",
        "id": 134771947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080423
    },
    {
        "content": "<p>it looks <code>check_access_permissions</code></p>",
        "id": 134771959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080438
    },
    {
        "content": "<p>is what modifies the set of \"used mut\" variables</p>",
        "id": 134772010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (invalid-no-need-mut)]$ git diff\ndiff --git a/src/librustc_mir/borrow_check/mod.rs b/src/librustc_mir/borrow_check/mod.rs\nindex 6ecbc5ee72..2bd4b2d69f 100644\n--- a/src/librustc_mir/borrow_check/mod.rs\n+++ b/src/librustc_mir/borrow_check/mod.rs\n@@ -481,6 +481,10 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt; for MirBorrowckCtxt&lt;&#39;cx\n\n         self.check_activations(location, span, flow_state);\n\n+        debug!(\n+            &quot;MirBorrowckCtxt::process_statement: stmt.kind= {:?}&quot;,\n+            stmt.kind\n+        );\n         match stmt.kind {\n             StatementKind::Assign(ref lhs, ref rhs) =&gt; {\n                 self.consume_rvalue(\n@@ -850,6 +854,7 @@ enum InitializationRequiringAction {\n     Assignment,\n }\n\n+#[derive(Debug)]\n struct RootPlace&lt;&#39;d, &#39;tcx: &#39;d&gt; {\n     place: &amp;&#39;d Place&lt;&#39;tcx&gt;,\n     is_local_mutation_allowed: LocalMutationIsAllowed,\n@@ -1716,8 +1721,16 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {\n                 }\n             }\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) =&gt; {\n+                debug!(\n+                    &quot;check_access_permissions: {:?}, {:?}&quot;,\n+                    place, is_local_mutation_allowed\n+                );\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n                     Ok(root_place) =&gt; {\n+                        debug!(\n+                            &quot;check_access_permissions: {:?}&quot;,\n+                            root_place\n+                        );\n                         self.add_used_mut(root_place, flow_state);\n                         return false;\n                     }\n</pre></div>",
        "id": 134772022,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080460
    },
    {
        "content": "<p>ok, what was the output from those? :)</p>",
        "id": 134772043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080482
    },
    {
        "content": "<p>(and on what test?)</p>",
        "id": 134772051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080491
    },
    {
        "content": "<p>the test is the one on the issue</p>",
        "id": 134772054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134772070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080516
    },
    {
        "content": "<p>ok</p>",
        "id": 134772079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::universal_regions: build: global regions = 0..1\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::universal_regions: build: extern regions = 1..1\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::universal_regions: build: local regions  = 1..2\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_mir()\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_mir: mir.arg_count=0\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[1]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[1]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=Const { ty: i32, val: Scalar(Bits { size: 4, bits: 3 }) })\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[2]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[2]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=Const { ty: i32, val: Scalar(Bits { size: 4, bits: 4 }) })\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb0[7])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#2r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=[&amp;str; 3], ty_context=Location(bb0[7]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=[&amp;str; 3])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=[&amp;str; 3]\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb0[8])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#4r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=&amp;[&amp;str], ty_context=Location(bb0[9]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=&amp;[&amp;str])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=&amp;[&amp;str]\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb0[17])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#7r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[17]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb0[19])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#8r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=i32, ty_context=Location(bb0[19]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=&amp;i32, ty_context=Location(bb3[1]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=&amp;i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=&amp;i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=&amp;i32, ty_context=Location(bb3[3]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=&amp;i32)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=&amp;i32\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb3[6])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#11r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}, ty_context=Location(bb3[8]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt})\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=Const { ty: for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}, val: Scalar(Bits { size: 0, bits: 0 }) })\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;, ty_context=Location(bb3[8]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=for&lt;&#39;b&gt; fn(&amp;&#39;b i32, for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;) -&gt; std::fmt::ArgumentV1&lt;&#39;b&gt; {std::fmt::ArgumentV1&lt;&#39;_&gt;::new::&lt;i32&gt;}, ty_context=Location(bb3[9]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=for&lt;&#39;b&gt; fn(&amp;&#39;b i32, for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;) -&gt; std::fmt::ArgumentV1&lt;&#39;b&gt; {std::fmt::ArgumentV1&lt;&#39;_&gt;::new::&lt;i32&gt;})\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=for&lt;&#39;b&gt; fn(&amp;&#39;b i32, for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;) -&gt; std::fmt::ArgumentV1&lt;&#39;b&gt; {std::fmt::ArgumentV1&lt;&#39;_&gt;::new::&lt;i32&gt;}\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=Const { ty: for&lt;&#39;b&gt; fn(&amp;&#39;b i32, for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;) -&gt; std::fmt::ArgumentV1&lt;&#39;b&gt; {std::fmt::ArgumentV1&lt;&#39;_&gt;::new::&lt;i32&gt;}, val: Scalar(Bits { size: 0, bits: 0 }) })\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region(region=ReScope(Node(ItemLocalId(88))), location=bb4[4])\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=ReScope(Node(ItemLocalId(88))))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_region: region=&#39;_#14r\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}, ty_context=Location(bb4[6]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt})\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty: ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: renumber_regions(value=Const { ty: for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; {&lt;i32 as std::fmt::Display&gt;::fmt}, val: Scalar(Bits { size: 0, bits: 0 }) })\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::renumber: visit_ty(ty=for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;, ty_context=Location(bb4[6]))\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check::nll::r\n</pre></div>",
        "id": 134772080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080529
    },
    {
        "content": "<p>maybe make a gist?</p>",
        "id": 134772085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080540
    },
    {
        "content": "<p>I don't think Zulip likes so much text :)</p>",
        "id": 134772094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080549
    },
    {
        "content": "<p><a href=\"https://gist.github.com/spastorino/07a71bb46c425fd3e0d0c3bfc4b8edd0\" target=\"_blank\" title=\"https://gist.github.com/spastorino/07a71bb46c425fd3e0d0c3bfc4b8edd0\">https://gist.github.com/spastorino/07a71bb46c425fd3e0d0c3bfc4b8edd0</a></p>",
        "id": 134772151,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080571
    },
    {
        "content": "<p>I was exactly looking at those <code>add_used_mut</code> calls</p>",
        "id": 134772161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080589
    },
    {
        "content": "<p>my guess anyway was that root_access contains an is_local_mutation_allowed property with value No</p>",
        "id": 134772187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080626
    },
    {
        "content": "<p>and I guess it should be Yes</p>",
        "id": 134772190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080633
    },
    {
        "content": "<p>I don't think it should be YEs</p>",
        "id": 134772204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080650
    },
    {
        "content": "<p>that would allow you to mutate things that are not declared mut</p>",
        "id": 134772214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080657
    },
    {
        "content": "<p>for .. various annoying reasons .. we sometimes want to permit that</p>",
        "id": 134772219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080664
    },
    {
        "content": "<p>e.g., if you are executing the <code>Drop</code> at the end of scope</p>",
        "id": 134772227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080672
    },
    {
        "content": "<p>that is technically mutation</p>",
        "id": 134772229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080675
    },
    {
        "content": "<p>but not in this case</p>",
        "id": 134772273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080687
    },
    {
        "content": "<p>but don't you want to allow mutating <code>s</code>?</p>",
        "id": 134772297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080723
    },
    {
        "content": "<p>so... here is the thing that is confusing me:</p>",
        "id": 134772300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080726
    },
    {
        "content": "<p>if I udnerstand this log output</p>",
        "id": 134772306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080739
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check: check_access_permissions((_1.0: i32), Write(Mutate), No)\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check: check_access_permissions: (_1.0: i32), No\nDEBUG 2018-09-27T19:48:01Z: rustc_mir::borrow_check: check_access_permissions: RootPlace { place: _1, is_local_mutation_allowed: No }\n</pre></div>",
        "id": 134772308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080741
    },
    {
        "content": "<p>we <strong>are</strong> adding <code> RootPlace { place: _1, is_local_mutation_allowed: No }</code> into the <code>used_mut</code> set</p>",
        "id": 134772325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080753
    },
    {
        "content": "<p>so I think that means that somewhere — even though it's in the set — we are issuing the warning anyway</p>",
        "id": 134772336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080768
    },
    {
        "content": "<p>yep</p>",
        "id": 134772349,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080792
    },
    {
        "content": "<p>I guessed it was because of that flag</p>",
        "id": 134772352,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080801
    },
    {
        "content": "<p>that was all my guessing</p>",
        "id": 134772394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080806
    },
    {
        "content": "<p>but I'm not sure</p>",
        "id": 134772398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080809
    },
    {
        "content": "<p>because of <a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1810\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1810\">https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1810</a></p>",
        "id": 134772418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080834
    },
    {
        "content": "<p>sorry, changed the line number</p>",
        "id": 134772439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080871
    },
    {
        "content": "<p><code>if is_local_mutation_allowed != LocalMutationIsAllowed::Yes {</code></p>",
        "id": 134772443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080883
    },
    {
        "content": "<p>ah wait</p>",
        "id": 134772462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080905
    },
    {
        "content": "<p>ok, yes,  that's the code I was confused about</p>",
        "id": 134772471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080914
    },
    {
        "content": "<p>I ... suspect  we can just remove that logic</p>",
        "id": 134772526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080942
    },
    {
        "content": "<p>and just <em>always</em> invoke <code>self.used_muts.insert(..)</code></p>",
        "id": 134772534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080956
    },
    {
        "content": "<p>I was trying to change that and make this code run to see what happens</p>",
        "id": 134772540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080962
    },
    {
        "content": "<p>exactly</p>",
        "id": 134772542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080966
    },
    {
        "content": "<p>that logic used to be needed</p>",
        "id": 134772546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080972
    },
    {
        "content": "<p>and will be needed again if we properly fix <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> :)</p>",
        "id": 134772557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538080988
    },
    {
        "content": "<p>by remove that logic you meant remove the if?</p>",
        "id": 134772558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538080988
    },
    {
        "content": "<p>yeah, I mean replace this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_local_mutation_allowed</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">LocalMutationIsAllowed</span>::<span class=\"n\">Yes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// If the local may be initialized, and it is now currently being</span>\n<span class=\"w\">                    </span><span class=\"c1\">// mutated, then it is justified to be annotated with the `mut`</span>\n<span class=\"w\">                    </span><span class=\"c1\">// keyword, since the mutation may be a possible reassignment.</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ii</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">init_path_map</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ii</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">.</span><span class=\"n\">ever_inits</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">used_mut</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">used_mut</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134772569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081010
    },
    {
        "content": "<p>basically I think the case this thing is looking for — the first initialization of non-mut thing — is handled separately now</p>",
        "id": 134772654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081069
    },
    {
        "content": "<p>ok</p>",
        "id": 134772680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538081098
    },
    {
        "content": "<p>(do you see what I mean?)</p>",
        "id": 134772712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081117
    },
    {
        "content": "<p>yes</p>",
        "id": 134772785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538081186
    },
    {
        "content": "<p>I mean, no idea where is handled now but yes</p>",
        "id": 134772792,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538081201
    },
    {
        "content": "<p>I see</p>",
        "id": 134772793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538081203
    },
    {
        "content": "<p>basically we special case that code out:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"c1\">// Special case: you can assign a immutable local variable</span>\n<span class=\"w\">        </span><span class=\"c1\">// (e.g., `x = ...`) so long as it has never been initialized</span>\n<span class=\"w\">        </span><span class=\"c1\">// before (at this point in the flow).</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Place</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place_span</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Mutability</span>::<span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">[</span><span class=\"n\">local</span><span class=\"p\">].</span><span class=\"n\">mutability</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// check for reassignments to immutable local variables</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_if_reassignment_to_immutable_state</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">place_span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">flow_state</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Otherwise, use the normal access permission rules.</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">access_place</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">place_span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">(</span><span class=\"n\">WriteKind</span>::<span class=\"n\">Mutate</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">LocalMutationIsAllowed</span>::<span class=\"n\">No</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">flow_state</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134773004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081423
    },
    {
        "content": "<p>we never even invoke <code>check_access_permission</code> in that case</p>",
        "id": 134773017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538081439
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134773629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082196
    },
    {
        "content": "<p>makes sense</p>",
        "id": 134773634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082201
    },
    {
        "content": "<p>it works</p>",
        "id": 134773691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/54621\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621\">https://github.com/rust-lang/rust/pull/54621</a></p>",
        "id": 134774032,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082704
    },
    {
        "content": "<p>after that should we continue with <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">https://github.com/rust-lang/rust/issues/21232</a> ?</p>",
        "id": 134774081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082726
    },
    {
        "content": "<p>unsure how hard it is :)</p>",
        "id": 134774086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538082730
    },
    {
        "content": "<p>seems reasonable to continue with</p>",
        "id": 134774299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083006
    },
    {
        "content": "<p>not the highest priority thing <em>ever</em> but it'd be a nice bit of Rust to cleanup</p>",
        "id": 134774302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083016
    },
    {
        "content": "<p>left a few nits</p>",
        "id": 134774327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083058
    },
    {
        "content": "<p>the field was only useful for that?</p>",
        "id": 134774524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538083265
    },
    {
        "content": "<p>I <em>think</em> so</p>",
        "id": 134774684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083471
    },
    {
        "content": "<p>but you can check :)</p>",
        "id": 134774686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083474
    },
    {
        "content": "<p>will do</p>",
        "id": 134774689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538083484
    },
    {
        "content": "<p>need to leave now</p>",
        "id": 134774695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538083492
    },
    {
        "content": "<p>anyway I want to see ci running :)</p>",
        "id": 134774712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538083516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have you seen ci errors?</p>",
        "id": 134823171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538140614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I have not</p>",
        "id": 134828282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538145138
    },
    {
        "content": "<p>though it looks like this is affecting mo..oh</p>",
        "id": 134828314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538145182
    },
    {
        "content": "<p>I guess I was a bit aggressive</p>",
        "id": 134828326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538145188
    },
    {
        "content": "<p>I guess we need some logic like that</p>",
        "id": 134829403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538146005
    },
    {
        "content": "<p>just not <em>that</em> logic :P</p>",
        "id": 134829406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538146011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so do you have some idea what is needed to fix or do you need more tips?</p>",
        "id": 134845408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538162129
    },
    {
        "content": "<p>left a review on the PR with some tips</p>",
        "id": 134845840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538162574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, couldn’t answer before</p>",
        "id": 134851777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538168975
    },
    {
        "content": "<p>I guess I can figure out</p>",
        "id": 134851780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538168983
    },
    {
        "content": "<p>it’s just that I’m on vacations <span class=\"emoji emoji-1f601\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 134851786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538168995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I see what you mean here <a href=\"https://github.com/rust-lang/rust/pull/54621#discussion_r221356961\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621#discussion_r221356961\">https://github.com/rust-lang/rust/pull/54621#discussion_r221356961</a></p>",
        "id": 134854651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538172444
    },
    {
        "content": "<p>need to find out how to go from that place to the other one</p>",
        "id": 134854827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538172578
    },
    {
        "content": "<p>actually in <code>a.0</code> RootPlace is <code>a</code>, right?</p>",
        "id": 134854830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538172589
    },
    {
        "content": "<p>I guess I need to find a <code>Projection</code> or something, I don't remember</p>",
        "id": 134856279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538174255
    },
    {
        "content": "<p>need to find that out</p>",
        "id": 134856280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538174258
    },
    {
        "content": "<p>but need to leave now :)</p>",
        "id": 134856282,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538174266
    },
    {
        "content": "<p>had some spare minutes again</p>",
        "id": 134858783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538178396
    },
    {
        "content": "<p>I was wondering if I need to do it here</p>",
        "id": 134858791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538178427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">RootPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">place</span>: <span class=\"nc\">place</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">is_local_mutation_allowed</span>: <span class=\"nc\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134858792,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538178431
    },
    {
        "content": "<p>match the projection, match the field and insert that into used_mut or something</p>",
        "id": 134858795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538178458
    },
    {
        "content": "<p>was wondering if this <a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835\">https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835</a> wasn't related</p>",
        "id": 134858904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538178642
    },
    {
        "content": "<p>ok raising this topic up again <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 135059869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510130
    },
    {
        "content": "<blockquote>\n<p>was wondering if this <a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835\">https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1828-L1835</a> wasn't related</p>\n</blockquote>\n<p>I don't <em>think</em> that's terribly related. That occurs when you have an assignment in a closure, and it kind of propagates that assignment back out to the parent</p>",
        "id": 135060148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510403
    },
    {
        "content": "<p>if you look at the callees of <code>add_used_mut</code> though, they do have the original <code>place</code> available (<a href=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41/src/librustc_mir/borrow_check/mod.rs#L1709\">example</a>)</p>",
        "id": 135060186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510460
    },
    {
        "content": "<p>I think the idea would be something like this:</p>\n<ul>\n<li>extend <code>add_used_mut</code> to take also a <code>accessed_place: Place&lt;'tcx&gt;</code></li>\n</ul>",
        "id": 135060211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510508
    },
    {
        "content": "<ul>\n<li>if the <code>root_place</code> is a local variable, but the <code>accessed_place</code> is a projection, then add the local variable as a \"used mut\" with a FIXME(<a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a>) note</li>\n</ul>",
        "id": 135060263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510540
    },
    {
        "content": "<ul>\n<li>if the root-place is a local and the accessed-place is also a local, then do the existing logic (check if the local variable was ever initialized, and add as \"used mut\" in that case, but otherwise not)</li>\n</ul>",
        "id": 135060283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538510572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have quickly pushed something to <a href=\"https://github.com/rust-lang/rust/pull/54621\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621\">https://github.com/rust-lang/rust/pull/54621</a></p>",
        "id": 135126028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538593357
    },
    {
        "content": "<p>I'm waiting for local tests but I already see some failures</p>",
        "id": 135126036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538593374
    },
    {
        "content": "<p>anyway, wanted to check if this was more or less what you wanted</p>",
        "id": 135126049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538593386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> looks about right, yes, left a request for a comment</p>",
        "id": 135127754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538595010
    },
    {
        "content": "<p>I saw the failures were related to --keep-stage 1</p>",
        "id": 135127802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538595110
    },
    {
        "content": "<p>will try again</p>",
        "id": 135127803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538595115
    },
    {
        "content": "<p>I still need to address 2 comments :)</p>",
        "id": 135127821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538595125
    },
    {
        "content": "<p>ok</p>",
        "id": 135128254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538595665
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// We need the local be defined as mut until we fix #21232\n// FIXME(#21232)\n</pre></div>",
        "id": 135128988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538596530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does this works?</p>",
        "id": 135128990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538596536
    },
    {
        "content": "<p>or</p>",
        "id": 135129000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538596547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// FIXME(#21232): We need the local be defined as mut until we fix this issue\n</pre></div>",
        "id": 135129068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538596572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'd probably say:</p>\n<hr>\n<p>FIXME(<a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a>): For the time being, you can only have an assignment to a path like <code>a.b.c = x</code> if <code>a</code> is declared as <code>mut</code>, even when <code>a</code> has not been initialized before. So if we see an assignment to such a path, we can always mark the <code>mut</code> on <code>a</code> as being used.</p>",
        "id": 135129629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538597104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://travis-ci.org/rust-lang/rust/jobs/436807954\" target=\"_blank\" title=\"https://travis-ci.org/rust-lang/rust/jobs/436807954\">https://travis-ci.org/rust-lang/rust/jobs/436807954</a></p>",
        "id": 135133068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538599972
    },
    {
        "content": "<p>hmm.</p>",
        "id": 135133232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538600208
    },
    {
        "content": "<p>seems like the test is wrong somehow... oh, I think <em>maybe</em> I know..?</p>",
        "id": 135133250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538600236
    },
    {
        "content": "<p>well, not entirely sure, but I guess I would dump out the projections etc involved</p>",
        "id": 135133258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538600249
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135133350,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538600362
    },
    {
        "content": "<p>as soon as I can compile this :S</p>",
        "id": 135133364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538600380
    },
    {
        "content": "<p>it's failing to compile rustc</p>",
        "id": 135133371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538600389
    },
    {
        "content": "<p>I guess are memory issues</p>",
        "id": 135133373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538600394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back with this</p>",
        "id": 135200758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671019
    },
    {
        "content": "<p>I've built a sample repro example</p>",
        "id": 135200765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671025
    },
    {
        "content": "<p>and I'm seeing that add_used_mut is not even called :S</p>",
        "id": 135200773,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671037
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"> </span><span class=\"c1\">//[lexical]~ ERROR: variable does not need to be mutable</span>\n<span class=\"w\">                                            </span><span class=\"c1\">//[nll]~^ ERROR: variable does not need to be mutable</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135200793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671063
    },
    {
        "content": "<p>investigating</p>",
        "id": 135200842,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671085
    },
    {
        "content": "<p>hmm</p>",
        "id": 135200888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671170
    },
    {
        "content": "<p>that seems right for it not to be called :)</p>",
        "id": 135200895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671175
    },
    {
        "content": "<p>I guess the question then is why/how <code>v</code> gets added tho</p>",
        "id": 135200904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671183
    },
    {
        "content": "<p>added where?</p>",
        "id": 135200988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671241
    },
    {
        "content": "<p>to the set of muts that are used</p>",
        "id": 135200993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671248
    },
    {
        "content": "<p>i.e., the problem is that we are no longer getting the lint, right?</p>",
        "id": 135200995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671254
    },
    {
        "content": "<p>that means we consider the <code>mut</code> on <code>v</code> to be used</p>",
        "id": 135200998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671259
    },
    {
        "content": "<p>yes</p>",
        "id": 135201009,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671272
    },
    {
        "content": "<p>let me investigate a bit more</p>",
        "id": 135201011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671282
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/30101f912b121e5f4185081b616f9b910031fe60/src/librustc_mir/borrow_check/used_muts.rs#L58-L60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/30101f912b121e5f4185081b616f9b910031fe60/src/librustc_mir/borrow_check/used_muts.rs#L58-L60\">https://github.com/rust-lang/rust/blob/30101f912b121e5f4185081b616f9b910031fe60/src/librustc_mir/borrow_check/used_muts.rs#L58-L60</a></p>",
        "id": 135201099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671362
    },
    {
        "content": "<p>probably</p>",
        "id": 135201106,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671374
    },
    {
        "content": "<p>actually, why is it changing used_mut in the place I was modofying the code and also there?</p>",
        "id": 135201294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671610
    },
    {
        "content": "<p>I guess it should happen just in one place, right?</p>",
        "id": 135201304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671622
    },
    {
        "content": "<p>that link doesn't work for me</p>",
        "id": 135201309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671626
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L58-L60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L58-L60\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/used_muts.rs#L58-L60</a></p>",
        "id": 135201325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671646
    },
    {
        "content": "<p>sorry vim took my local commit :)</p>",
        "id": 135201331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671656
    },
    {
        "content": "<p>does look suspicious</p>",
        "id": 135201383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671687
    },
    {
        "content": "<p>that code...does get called</p>",
        "id": 135201392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671706
    },
    {
        "content": "<p>let me remove it and test for this case :)</p>",
        "id": 135201435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671751
    },
    {
        "content": "<p>I was going to say, try removing it and see what happens...</p>",
        "id": 135201446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671777
    },
    {
        "content": "<p>very weird</p>",
        "id": 135201448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538671778
    },
    {
        "content": "<p>yeah first step test this case</p>",
        "id": 135201456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671788
    },
    {
        "content": "<p>second run the whole thing</p>",
        "id": 135201461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671793
    },
    {
        "content": "<p>third hopefully see everything working :D</p>",
        "id": 135201505,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538671803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> removing that doesn't make this return any warning either</p>",
        "id": 135201850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672139
    },
    {
        "content": "<p>:S</p>",
        "id": 135201851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672140
    },
    {
        "content": "<p>seems impossible</p>",
        "id": 135201908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (invalid-no-need-mut)]$ rg used_mut | rg insert | rg mir\nsrc/librustc_mir/borrow_check/mod.rs:                                    self.used_mut.insert(local);\nsrc/librustc_mir/borrow_check/mod.rs:                        self.used_mut.insert(*local);\nsrc/librustc_mir/borrow_check/mod.rs:                                self.used_mut.insert(*local);\n</pre></div>",
        "id": 135201921,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672210
    },
    {
        "content": "<p>two cases are under a debug flag and is not printed</p>",
        "id": 135201926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672221
    },
    {
        "content": "<p>and the other case doesn't have a debug flag but is under <code>Rvalue::Aggregate</code></p>",
        "id": 135201956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672252
    },
    {
        "content": "<p>so shouldn't happen either</p>",
        "id": 135201959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672257
    },
    {
        "content": "<p><span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span></p>",
        "id": 135202053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538672328
    },
    {
        "content": "<p>add some more <code>debug!</code> I guess :)</p>",
        "id": 135202059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538672336
    },
    {
        "content": "<p>checking if there are other ways of inserting</p>",
        "id": 135202070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538672348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    /// This field keeps track of all the local variables that are declared mut and are mutated.\n    /// Used for the warning issued by an unused mutable local variable.\n    used_mut: FxHashSet&lt;Local&gt;,\n</pre></div>",
        "id": 135206333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538676344
    },
    {
        "content": "<p>is it the way you say or the other way around?</p>",
        "id": 135206339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538676352
    },
    {
        "content": "<p>I mean, what's the meaning of used_mut actually?</p>",
        "id": 135206405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538676379
    },
    {
        "content": "<p>having second thoughts about this</p>",
        "id": 135206410,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538676388
    },
    {
        "content": "<p>I believe it means:</p>",
        "id": 135206721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538676706
    },
    {
        "content": "<p>this local variable <em>must</em> be declared <code>mut</code> or the program would not borrow check</p>",
        "id": 135206723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538676714
    },
    {
        "content": "<p>put another way, the <code>mut</code> declaration on this variable was \"used\"</p>",
        "id": 135206773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538676734
    },
    {
        "content": "<p>I understand</p>",
        "id": 135208282,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678211
    },
    {
        "content": "<p>weird</p>",
        "id": 135208283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678213
    },
    {
        "content": "<p>I can't find of any insertion into there</p>",
        "id": 135208298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678225
    },
    {
        "content": "<p>what I can do is just look for where the error messages are being displayed and output the context that is there</p>",
        "id": 135208320,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678252
    },
    {
        "content": "<p>sigh</p>",
        "id": 135208344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538678281
    },
    {
        "content": "<p>makes sense</p>",
        "id": 135208393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538678293
    },
    {
        "content": "<p>at this point I would probably just add <code>debug!</code> all over the dang compiler :)</p>",
        "id": 135208407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538678308
    },
    {
        "content": "<p>hehehe</p>",
        "id": 135208520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678459
    },
    {
        "content": "<p>couldn't be a part of AST borrowck the one adding to this structure?</p>",
        "id": 135208534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538678487
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 135208923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538678911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so... <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I raised this question with the lang team, and there were a few folks in favor of just ruling out this case altogether as an error (at least until <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> is properly fixed):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If we did that, then of course the interaction with the \"unused mut\" lint becomes a moot point... maybe you want to prep a PR to do <em>that</em>, and we can assess the impact? (I wouldn't expect much, given that you get an error if you try to read <code>x.0</code> again.)</p>",
        "id": 135213534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538684029
    },
    {
        "content": "<p>ok</p>",
        "id": 135214209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684688
    },
    {
        "content": "<p>so</p>",
        "id": 135214211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684688
    },
    {
        "content": "<p>you meant that in this example <a href=\"https://github.com/rust-lang/rust/issues/54499\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54499\">https://github.com/rust-lang/rust/issues/54499</a></p>",
        "id": 135214217,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684696
    },
    {
        "content": "<p>the original issue was that the warning was suggesting the wrong thing</p>",
        "id": 135214234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684711
    },
    {
        "content": "<p>you meant to stop what I'm doing and convert the warning in an error?</p>",
        "id": 135214241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684725
    },
    {
        "content": "<p>or did I get it wrong?</p>",
        "id": 135214246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538684737
    },
    {
        "content": "<p>that's what I was suggesting, yes</p>",
        "id": 135214742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538685279
    },
    {
        "content": "<p>that maybe before we invest too much energy into preserving the strange AST behavior</p>",
        "id": 135214750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538685290
    },
    {
        "content": "<p>we should consider just making that example an error</p>",
        "id": 135214762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538685310
    },
    {
        "content": "<p><em>although</em> the fact that the issue got filed</p>",
        "id": 135214765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538685318
    },
    {
        "content": "<p>suggests that <em>somebody</em> is relying on the current behavior...</p>",
        "id": 135214770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538685327
    },
    {
        "content": "<p>actually I didn't tell you because I was doing something else already</p>",
        "id": 135215441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686068
    },
    {
        "content": "<p>but I was getting some logs</p>",
        "id": 135215444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686073
    },
    {
        "content": "<p>there was a problem in the command I was running and I didn't see</p>",
        "id": 135215490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686085
    },
    {
        "content": "<p>but yes there's some output :)</p>",
        "id": 135215496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686092
    },
    {
        "content": "<p>so, tell me if you prefer me to stop and forget about this and make an error or just match AST, which I think we should be close to do</p>",
        "id": 135215522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686115
    },
    {
        "content": "<p>or wait until we see what the reporter replies to <a href=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-427160299\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-427160299\">https://github.com/rust-lang/rust/issues/54499#issuecomment-427160299</a></p>",
        "id": 135215553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686140
    },
    {
        "content": "<p>I'm fine with anything :)</p>",
        "id": 135215561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538686146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> remember to let me know what to do about this :)</p>",
        "id": 135263177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538754843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well, is <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> around?</p>",
        "id": 135263884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755558
    },
    {
        "content": "<p>maybe we can all 3 discuss</p>",
        "id": 135263886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755561
    },
    {
        "content": "<p>or did they leave for the day</p>",
        "id": 135263925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755566
    },
    {
        "content": "<p>/me grumbles about lazy europeans and their 9 to 10 hour days</p>",
        "id": 135263940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755582
    },
    {
        "content": "<p>:P</p>",
        "id": 135264070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538755784
    },
    {
        "content": "<p>OK well I see three options:</p>\n<ul>\n<li>Fix the <code>unused_mut</code> lint</li>\n<li>Make <code>a.b.c = x</code> an error if <code>a</code> is not initialized</li>\n<li>Fix the semantics to work 100%</li>\n</ul>\n<p>I think that option 3 doesn't make sense in the <em>short term</em>; we'd be better off landing one of the first two and then revisiting the semantics at our leisure.</p>\n<p>Option 2 is a \"breaking change\", in the sense that the old AST borrow checker accepted such code. However, it <em>was</em> fairly useless -- even <em>if</em> <code>a</code> is declared <code>mut</code>, you could assign to such a path, but you couldn't read back from it. This is confusing at best. It is unlikely that a significant body of code is relying on this, and we could just call it an NLL bug fix — initially, anyway, you'll just get warnings, since any new errors that result from NLL (but not the AST checker) are always displayed as warnings during the migration period.</p>\n<p>Option 1 is what we had been pursuing, but it seems kind of like an annoying amount of work to reach a \"not particularly consistent\" state.</p>",
        "id": 135264077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755791
    },
    {
        "content": "<p>I am inclined towards Option 2 right now</p>",
        "id": 135264078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755793
    },
    {
        "content": "<p>ok</p>",
        "id": 135264173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538755867
    },
    {
        "content": "<p>let's make that an error</p>",
        "id": 135264180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538755873
    },
    {
        "content": "<p>we can also do a crater run to see what happens, though that's a bit .. tricky</p>",
        "id": 135264209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755919
    },
    {
        "content": "<p>because we'd have to do it with NLL enabled, which means we'll see other errors too</p>",
        "id": 135264250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755928
    },
    {
        "content": "<p>so I am kind of inclined not to bother, personally</p>",
        "id": 135264254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755939
    },
    {
        "content": "<p>esp. given the migration mode</p>",
        "id": 135264257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538755941
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135264291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1538755999
    },
    {
        "content": "<p>Yeah sorry I’m done for the day for now</p>",
        "id": 135264508,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538756236
    },
    {
        "content": "<p>Going to a water park soonish</p>",
        "id": 135264517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538756245
    },
    {
        "content": "<p>Maybe will work more after I get back from waterskiding</p>",
        "id": 135264532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538756271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have you seen <a href=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-427406207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54499#issuecomment-427406207\">https://github.com/rust-lang/rust/issues/54499#issuecomment-427406207</a> ?</p>",
        "id": 135419880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539022650
    },
    {
        "content": "<p>there's no real use case</p>",
        "id": 135422142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025388
    },
    {
        "content": "<p>anyway, I'm going to make this fail</p>",
        "id": 135422146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025398
    },
    {
        "content": "<p>I wonder if we should lay out the code in the way we were doing and handle that case when root_place is local and accessed_place is projection or we want to use the old version of the code?</p>",
        "id": 135422204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025444
    },
    {
        "content": "<p>also what's exactly ever_inits in Flows?</p>",
        "id": 135422309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025629
    },
    {
        "content": "<p>I guess I need to check for uninits?</p>",
        "id": 135422315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025640
    },
    {
        "content": "<p>in order to fail</p>",
        "id": 135422317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539025645
    },
    {
        "content": "<p>hmmm maybe the best thing is to check here if we are in the case we should warn or fail <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L324-L337\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L324-L337\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/mod.rs#L324-L337</a></p>",
        "id": 135422640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539026063
    },
    {
        "content": "<p>hmm I guess at that point I have no idea what was accessed anymore</p>",
        "id": 135422794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539026304
    },
    {
        "content": "<p>investigating, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you have any pointer would be appreciated :)</p>",
        "id": 135422804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539026323
    },
    {
        "content": "<p>I'm thinking about something like ...</p>",
        "id": 135423202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539026888
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">root_place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root_place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">.</span><span class=\"n\">uninits</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">mpi</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"c1\">// report error</span>\n<span class=\"w\">                                    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">add_used_mut</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root_place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135423206,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539026892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> where would this diff go?</p>",
        "id": 135423818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027562
    },
    {
        "content": "<p>where we are calling add_used_mut</p>",
        "id": 135424115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539027853
    },
    {
        "content": "<p>I would move this logic earlier</p>",
        "id": 135424144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027905
    },
    {
        "content": "<p>maybe <a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L489-L504\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L489-L504\">somewhere around here</a></p>",
        "id": 135424217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027968
    },
    {
        "content": "<p>basically in place of <a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1099-L1113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1099-L1113\">this logic</a></p>",
        "id": 135424225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027985
    },
    {
        "content": "<p>hmm</p>",
        "id": 135424236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028001
    },
    {
        "content": "<p>not sure if I what I just said makes sense :)</p>",
        "id": 135424239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028010
    },
    {
        "content": "<p>well, maybe it does</p>",
        "id": 135424258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028028
    },
    {
        "content": "<p>we basically want to say that: if you are assigning to some projection rooted in a local variable <code>x</code></p>",
        "id": 135424263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028039
    },
    {
        "content": "<p>then <code>x</code> must be initialized or else you get an error</p>",
        "id": 135424265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028048
    },
    {
        "content": "<p>though I guess we'll also have to tweak the used-mut set still</p>",
        "id": 135424274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028070
    },
    {
        "content": "<p>will be back in a bit</p>",
        "id": 135424347,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028140
    },
    {
        "content": "<p>needed to close Firefox meanwhile I’m compiling librustc</p>",
        "id": 135424364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028159
    },
    {
        "content": "<p>that part uses massive amounts of memory I think and crashes unless I close things</p>",
        "id": 135424383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028188
    },
    {
        "content": "<p>on the cellphone meanwhile</p>",
        "id": 135424391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028199
    },
    {
        "content": "<p>oh dear :)</p>",
        "id": 135424458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028228
    },
    {
        "content": "<p>well, anyway, I think what I showed earlier is the right place to issue the error</p>",
        "id": 135424463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028242
    },
    {
        "content": "<p>not sure what we would need around the \"used mut\" logic</p>",
        "id": 135424470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028249
    },
    {
        "content": "<p>if any</p>",
        "id": 135424476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028255
    },
    {
        "content": "<p>back</p>",
        "id": 135424659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028522
    },
    {
        "content": "<p>why did you say instead of that logic?</p>",
        "id": 135424666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028535
    },
    {
        "content": "<p>why that would need to be removed?</p>",
        "id": 135424668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028539
    },
    {
        "content": "<p>and also why the used-mut set needs to be tweaked?</p>",
        "id": 135424674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028561
    },
    {
        "content": "<p>I was wrong to say that actually</p>",
        "id": 135424709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028563
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 135424714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028570
    },
    {
        "content": "<p>the existing logic is handling the case <code>a = ...</code></p>",
        "id": 135424715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028572
    },
    {
        "content": "<p>we need to place it there :)</p>",
        "id": 135424716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028576
    },
    {
        "content": "<p>yes</p>",
        "id": 135424717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028577
    },
    {
        "content": "<p>but we are interested in the case of a more complex path</p>",
        "id": 135424718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028579
    },
    {
        "content": "<p>but next to that</p>",
        "id": 135424719,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028580
    },
    {
        "content": "<p>right</p>",
        "id": 135424720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028584
    },
    {
        "content": "<p>it's kind of a \"first check\"</p>",
        "id": 135424724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028592
    },
    {
        "content": "<p>anyway, re: the used mut thing, I'm not sure if it's relevant,</p>",
        "id": 135424726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028602
    },
    {
        "content": "<p>ok</p>",
        "id": 135424728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028604
    },
    {
        "content": "<p>I guess the question is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>if we do nothing, this will get an error, and then we'll <em>also</em> (I think) warn that the <code>mut</code> flag on <code>x</code> is unused</p>",
        "id": 135424746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028632
    },
    {
        "content": "<p>which seems wrong</p>",
        "id": 135424747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028634
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135424756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028651
    },
    {
        "content": "<p>we could probably do just throw the base variable into the set of \"used muts\"</p>",
        "id": 135424757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028652
    },
    {
        "content": "<p>indiscriminantely</p>",
        "id": 135424761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028658
    },
    {
        "content": "<p>just to suppress the lint</p>",
        "id": 135424762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028661
    },
    {
        "content": "<p>let me try all these stuff out</p>",
        "id": 135424806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028685
    },
    {
        "content": "<p>btw: is there a report or something about librustc memory usage or something?</p>",
        "id": 135424812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028701
    },
    {
        "content": "<p>is it a concern? maybe is not a priority</p>",
        "id": 135424819,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028719
    },
    {
        "content": "<p>it gives me a lot of headaches :)</p>",
        "id": 135424825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028728
    },
    {
        "content": "<blockquote>\n<p>btw: is there a report or something about librustc memory usage or something?</p>\n</blockquote>\n<p>like, memory usage when building librustc?</p>",
        "id": 135424849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028762
    },
    {
        "content": "<p>I may need to tweak better my swap or something</p>",
        "id": 135424851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028765
    },
    {
        "content": "<p>I'm not sure if there are any bug reports or not</p>",
        "id": 135424853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028772
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>btw: is there a report or something about librustc memory usage or something?</p>\n</blockquote>\n<p>like, memory usage when building librustc?</p>\n</blockquote>\n<p>yes</p>",
        "id": 135424858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028777
    },
    {
        "content": "<p>might be good to take a look and see if it can be improved</p>",
        "id": 135424861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028781
    },
    {
        "content": "<p>can't be helping bootstrap times</p>",
        "id": 135424868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028787
    },
    {
        "content": "<blockquote>\n<p>can't be helping bootstrap times</p>\n</blockquote>\n<p>unsure what's the meaning of this phrase</p>",
        "id": 135424931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539028814
    },
    {
        "content": "<p>I mean \"it must be making bootstrap slower than it would otherwise be\"</p>",
        "id": 135425180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029161
    },
    {
        "content": "<p>in other words, even if it's not a big blocker — e.g., I have a lot of RAM :P — it still makes things slow</p>",
        "id": 135425231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029176
    },
    {
        "content": "<p>hehe yeah</p>",
        "id": 135425235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029187
    },
    {
        "content": "<p>I need to pass root_place to mutate_place</p>",
        "id": 135425487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029514
    },
    {
        "content": "<p>which doesn't seem to be correct</p>",
        "id": 135425527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029524
    },
    {
        "content": "<p>can I get it from place or something?</p>",
        "id": 135425533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029534
    },
    {
        "content": "<p>I guess I can call the same is_mutable thing</p>",
        "id": 135425636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029656
    },
    {
        "content": "<p>unsure if I have the is_local_mutation_allowed thing neither</p>",
        "id": 135425645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029678
    },
    {
        "content": "<blockquote>\n<p>I need to pass root_place to mutate_place</p>\n</blockquote>\n<p>what is <code>root_place</code>?</p>",
        "id": 135425812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029896
    },
    {
        "content": "<p>what type?</p>",
        "id": 135425817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029921
    },
    {
        "content": "<p>no, what .. value is it?</p>",
        "id": 135425823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029935
    },
    {
        "content": "<p>looking at <a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1099-L1113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1099-L1113\">this fn</a>, I dont' see anything called <code>root_place</code></p>",
        "id": 135425834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029946
    },
    {
        "content": "<p>yeah, I mean, I need it for my logic</p>",
        "id": 135425845,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root_place</span><span class=\"p\">.</span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">.</span><span class=\"n\">uninits</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">mpi</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">delay_span_bug</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">place_span</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"s\">&quot;ERROR&quot;</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135425849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539029985
    },
    {
        "content": "<p>what is <code>root_place</code> there?</p>",
        "id": 135425858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029999
    },
    {
        "content": "<p>so I was guessing, when I have a.b.c</p>",
        "id": 135425908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030005
    },
    {
        "content": "<p>place was the place for c</p>",
        "id": 135425917,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030012
    },
    {
        "content": "<p>and I need also the place for a</p>",
        "id": 135425922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030016
    },
    {
        "content": "<p>I think you just want <code>place_span.0</code></p>",
        "id": 135425923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030018
    },
    {
        "content": "<p>in the new function</p>",
        "id": 135425926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030022
    },
    {
        "content": "<p>I need both</p>",
        "id": 135425936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030035
    },
    {
        "content": "<p>I need to know that I'm in a projection</p>",
        "id": 135425955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030050
    },
    {
        "content": "<p>I may be understanding this wrong</p>",
        "id": 135425965,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030062
    },
    {
        "content": "<p>my thought was</p>",
        "id": 135425970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030065
    },
    {
        "content": "<p>you can invoke <code>place_span.0.local()</code> to get the innermost local variable</p>",
        "id": 135425972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030066
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.Place.html#method.local\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/enum.Place.html#method.local\">local()</a></p>",
        "id": 135425988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030083
    },
    {
        "content": "<p>ahh so place_span would be the root_place here?</p>",
        "id": 135425991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030096
    },
    {
        "content": "<p>like in a.b.c = 1;</p>",
        "id": 135425996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030102
    },
    {
        "content": "<p>place_span would be the place for a ?</p>",
        "id": 135426001,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539030112
    },
    {
        "content": "<p><code>place_span</code> will be the place for <code>a.b.c</code></p>",
        "id": 135426138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030251
    },
    {
        "content": "<p><code>place_span.0</code>, that is</p>",
        "id": 135426140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030255
    },
    {
        "content": "<p><code>local()</code> would return <code>Some(a)</code></p>",
        "id": 135426147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539030271
    },
    {
        "content": "<p>ok</p>",
        "id": 135428004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539032819
    },
    {
        "content": "<p>makes sense</p>",
        "id": 135428011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539032827
    },
    {
        "content": "<p>so place_span.0 will be Projection in this case</p>",
        "id": 135428068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539032902
    },
    {
        "content": "<p>right</p>",
        "id": 135428144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033003
    },
    {
        "content": "<p>how should the error message look like?</p>",
        "id": 135428154,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033027
    },
    {
        "content": "<p>btw</p>",
        "id": 135428186,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>         match root_place {\n             RootPlace {\n                 place: Place::Local(local),\n-                is_local_mutation_allowed,\n+                is_local_mutation_allowed: _,\n             } =&gt; {\n-                if is_local_mutation_allowed != LocalMutationIsAllowed::Yes {\n-                    // If the local may be initialized, and it is now currently being\n-                    // mutated, then it is justified to be annotated with the `mut`\n-                    // keyword, since the mutation may be a possible reassignment.\n-                    let mpi = self.move_data.rev_lookup.find_local(*local);\n-                    let ii = &amp;self.move_data.init_path_map[mpi];\n-                    for &amp;index in ii {\n-                        if flow_state.ever_inits.contains(index) {\n-                            self.used_mut.insert(*local);\n-                            break;\n-                        }\n-                    }\n-                }\n+                self.used_mut.insert(*local);\n             }\n             RootPlace {\n                 place: _,\n</pre></div>",
        "id": 135428193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033086
    },
    {
        "content": "<p>this is what you wanted to do with the used_mut set?</p>",
        "id": 135428201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033109
    },
    {
        "content": "<p>where is this code living?</p>",
        "id": 135428290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033198
    },
    {
        "content": "<p>oh</p>",
        "id": 135428307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033226
    },
    {
        "content": "<p>I see</p>",
        "id": 135428308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033227
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827\">https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827</a></p>",
        "id": 135428361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033259
    },
    {
        "content": "<blockquote>\n<p>how should the error message look like?</p>\n</blockquote>\n<p>probably something like</p>\n<hr>\n<p>cannot assign to <code>a.b.c</code> when <code>a</code> is not initialized</p>\n<p>?</p>",
        "id": 135428363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033260
    },
    {
        "content": "<p>ok</p>",
        "id": 135428368,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033276
    },
    {
        "content": "<p>re: the used-mut code...</p>",
        "id": 135428381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033317
    },
    {
        "content": "<blockquote>\n<p>though I guess we'll also have to tweak the used-mut set still</p>\n</blockquote>\n<p>was talking about this</p>",
        "id": 135428386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033326
    },
    {
        "content": "<p>what was that code looking like before your PR?</p>",
        "id": 135428389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033334
    },
    {
        "content": "<p>anyway I can <a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827\">https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1815-L1827</a></p>",
        "id": 135428396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033354
    },
    {
        "content": "<p>I think it should probably stay that way</p>",
        "id": 135428450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033386
    },
    {
        "content": "<p>but in the code where we are issuing an error</p>",
        "id": 135428459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033404
    },
    {
        "content": "<p>just add to the used mut the thing</p>",
        "id": 135428497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033479
    },
    {
        "content": "<p>right, the idea being — \"always consider the <code>mut</code> on this variable used\" — since we saw an error related to the variable, we know we can't accurately assess whether <code>mut</code> will be imp't once the error is fixed</p>",
        "id": 135428551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033526
    },
    {
        "content": "<p>but in that code you quoted, that code is to handle the non-error case, and I don't think that has changed</p>",
        "id": 135428649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033632
    },
    {
        "content": "<p>(that is, the <code>used_mut</code> adjustments)</p>",
        "id": 135428652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033642
    },
    {
        "content": "<p>make sense?</p>",
        "id": 135428655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033643
    },
    {
        "content": "<p>yep</p>",
        "id": 135428737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033726
    },
    {
        "content": "<p>makes sense</p>",
        "id": 135428738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033729
    },
    {
        "content": "<p>compiling and will run tests to see what happens</p>",
        "id": 135428743,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033740
    },
    {
        "content": "<p>hmmm last thing</p>",
        "id": 135428756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033768
    },
    {
        "content": "<p>how is <code>cannot assign to a.b.c when a is not initialized</code> produced</p>",
        "id": 135428759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033774
    },
    {
        "content": "<p>was doing ...</p>",
        "id": 135428778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033796
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">delay_span_bug</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">place_span</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"s\">&quot;cannot assign to {} when {} is not initialized&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135428793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033824
    },
    {
        "content": "<p>of course place, place is wrong :)</p>",
        "id": 135428795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033836
    },
    {
        "content": "<p>well</p>",
        "id": 135428854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033886
    },
    {
        "content": "<p>delay_span_bug is also not what we need</p>",
        "id": 135428856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033896
    },
    {
        "content": "<p>you can do a </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                            </span><span class=\"n\">struct_span_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E0571</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                             </span><span class=\"s\">&quot;`break` with value from a `{}` loop&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                             </span><span class=\"n\">kind</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">())</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135428869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033910
    },
    {
        "content": "<p>something like that</p>",
        "id": 135428870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033915
    },
    {
        "content": "<p>just to be clear, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> resolving the thing from <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> ? Should I officially assign <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> on that issue?</p>",
        "id": 135428872,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539033918
    },
    {
        "content": "<p>to make a custom error</p>",
        "id": 135428873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033919
    },
    {
        "content": "<p>right now <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is working on making it a \"clean error\"</p>",
        "id": 135428888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033933
    },
    {
        "content": "<p>but I think it might be a logical follow-up to tackle the \"correct semantics\", if they wanted, though <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> had also expressed some interest I think</p>",
        "id": 135428903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033954
    },
    {
        "content": "<p>let me try again. Is <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> doing this: \"we have tentatively decided to attempt, for the short-term, to adopt the semantics that rejects all three cases.\"</p>",
        "id": 135428946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539033965
    },
    {
        "content": "<p>hello</p>",
        "id": 135428953,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539033976
    },
    {
        "content": "<blockquote>\n<p>let me try again. Is <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> doing this: \"we have tentatively decided to attempt, for the short-term, to adopt the semantics that rejects all three cases.\"</p>\n</blockquote>\n<p>confirm</p>",
        "id": 135428957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539033984
    },
    {
        "content": "<p>I could work on that thing also if needed, unsure if there are other priorities</p>",
        "id": 135428958,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539033986
    },
    {
        "content": "<p>okay</p>",
        "id": 135428967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539034003
    },
    {
        "content": "<p>I ask because I had a branch in another directory that I was playing with as a background task, where I was trying to add the check to <code>fn check_if_assigned_path_is_moved</code></p>",
        "id": 135429003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539034072
    },
    {
        "content": "<p>oh, i just said that <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> is a pretty annoying error and it's a real footgun for beginners</p>",
        "id": 135429050,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539034099
    },
    {
        "content": "<p>that said, i don't exactly know what the correct semantics would be for that particular issue</p>",
        "id": 135429054,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539034112
    },
    {
        "content": "<p>since we already had this code there: <a href=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1661\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1661\">https://github.com/rust-lang/rust/blob/423d8109868c1f926f2cfcc3bff980c3daa515fd/src/librustc_mir/borrow_check/mod.rs#L1661</a></p>",
        "id": 135429060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539034129
    },
    {
        "content": "<p>my understanding is that we can sort of keep track of the fields that are initialized after it's been moved out, and if any of them are undefined during a use, throw a compile time error</p>",
        "id": 135429084,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539034190
    },
    {
        "content": "<p>And it seemed \"obvious\" to me that we might add the \"clean error\" by using the same logic regardless of whether it was a type with a dtor or not. Of course, the \"obvious\" thing had totally non-obvious consequences...</p>",
        "id": 135429087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539034198
    },
    {
        "content": "<p>but i'm unsure if it's a sound solution</p>",
        "id": 135429128,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539034206
    },
    {
        "content": "<p>more concretely, i'm not sure if we do anything else special during the construction of an ADT</p>",
        "id": 135429178,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1539034280
    },
    {
        "content": "<p>Anyway, I'm headed to bed now, but <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , if you want to compare notes on your approach versus the one I was trying out, we can try to chat sometime tomorrow.</p>",
        "id": 135429248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539034385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> to everything</p>",
        "id": 135443902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539059651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the stuff we've talked about is not working .local() returns None</p>",
        "id": 135443908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539059679
    },
    {
        "content": "<p>need to find out</p>",
        "id": 135443914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539059683
    },
    {
        "content": "<p>in this case place is a <code>Promoted</code> thing</p>",
        "id": 135444032,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539059890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping</p>",
        "id": 135466156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089147
    },
    {
        "content": "<p>I'm getting a <code>Promoted</code> thing instead of <code>Projection</code></p>",
        "id": 135466172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089162
    },
    {
        "content": "<p>for this example ...</p>",
        "id": 135466240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135466257,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089199
    },
    {
        "content": "<p>not even sure what <code>Promoted</code> is about</p>",
        "id": 135466320,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089249
    },
    {
        "content": "<p>so when I call <code>.local()</code> it returns <code>None</code></p>",
        "id": 135466377,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089286
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1978\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1978\">https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1978</a></p>",
        "id": 135466417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089333
    },
    {
        "content": "<p>First, why <code>s.0 = 3</code> generates a <code>Promoted</code> thing?</p>",
        "id": 135466455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089382
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1867\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1867\">https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1867</a></p>",
        "id": 135466462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089396
    },
    {
        "content": "<p>promoted usually means its some expression that got turned into something that we could evaluate at compile-time and store as static data</p>",
        "id": 135466544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089427
    },
    {
        "content": "<p>I cannot tell from context here whether it is the <code>3</code> that has been promoted, or the whole <code>s</code></p>",
        "id": 135466577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089451
    },
    {
        "content": "<p>yeah that's the <code>3</code> part I guess, what about s.0?</p>",
        "id": 135466585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089452
    },
    {
        "content": "<blockquote>\n<p>I cannot tell from context here whether it is the <code>3</code> that has been promoted, or the whole <code>s</code></p>\n</blockquote>\n<p>ahh ok, that makes sense</p>",
        "id": 135466604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089467
    },
    {
        "content": "<p>well don't take my word for it 100%</p>",
        "id": 135466621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089497
    },
    {
        "content": "<p>but it's <code>s.0</code></p>",
        "id": 135466622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089498
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-10-09T04:59:17Z: rustc_mir::borrow_check: mutate_place: place = (_1.0: i32)\nDEBUG 2018-10-09T04:59:17Z: rustc_mir::borrow_check: mutate_place: place.local() = None\n</pre></div>",
        "id": 135466631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089508
    },
    {
        "content": "<p>printed the <code>Debug</code> version of the <code>Place</code> and it gives (_1.0: i32) which is the <code>s.0</code> part</p>",
        "id": 135466708,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089544
    },
    {
        "content": "<p>hmm. but it doesn't say <code>_1</code> as a local?</p>",
        "id": 135466726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089566
    },
    {
        "content": "<p>unsure I got what you meant?</p>",
        "id": 135466759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089616
    },
    {
        "content": "<p>or I guess that's the point, the promoted thing <em>is</em> <code>(_1.0: i32)</code></p>",
        "id": 135466766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089620
    },
    {
        "content": "<p>yes</p>",
        "id": 135466771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089628
    },
    {
        "content": "<p>I was expecting a <code>Projection</code> and apply <code>.local()</code> to get the innermost <code>Local</code> part</p>",
        "id": 135466819,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089648
    },
    {
        "content": "<p>it seems weird to me</p>",
        "id": 135466827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089656
    },
    {
        "content": "<p>I just wasn't expecting a <code>Promoted</code> to print as <code>_1.0</code></p>",
        "id": 135466836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089671
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1995\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1995\">https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1995</a></p>",
        "id": 135466869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089706
    },
    {
        "content": "<p>right, and look what <code>promoted.0</code> is</p>",
        "id": 135466881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089729
    },
    {
        "content": "<p>since that would explain the <code>_1.0</code></p>",
        "id": 135466885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089735
    },
    {
        "content": "<p><code>promoted.0</code> should be an instance of a <code>struct Promoted</code></p>",
        "id": 135466888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089745
    },
    {
        "content": "<p>ohh</p>",
        "id": 135466945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089770
    },
    {
        "content": "<p>I think I did this yesterday a bit sleepy</p>",
        "id": 135466952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089780
    },
    {
        "content": "<p>but I think those would print as <code>promoted[INDEX]</code></p>",
        "id": 135466953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089782
    },
    {
        "content": "<p>I think it's a <code>Field</code></p>",
        "id": 135466955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089787
    },
    {
        "content": "<p>based on <a href=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L2412\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L2412\">https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L2412</a></p>",
        "id": 135466962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089795
    },
    {
        "content": "<p>well I don't know what it is but I can check out</p>",
        "id": 135466983,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089823
    },
    {
        "content": "<blockquote>\n<p>I think it's a <code>Field</code></p>\n</blockquote>\n<p>so you are now doubting whether its an instance of <code>Place::Promoted</code> ?</p>",
        "id": 135466992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089829
    },
    {
        "content": "<p>yes</p>",
        "id": 135466994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089835
    },
    {
        "content": "<p>okay</p>",
        "id": 135466997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089839
    },
    {
        "content": "<p>the problem is that if <code>Local</code> is <code>None</code> I guessed it was because it wasn't a <code>Local</code> nor a <code>Projection</code></p>",
        "id": 135467028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089868
    },
    {
        "content": "<p>and I jumped quickly to that conclusion based on the <code>Debug</code> prints of it</p>",
        "id": 135467060,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is there an API to print the variant of an enum in Rust?</p>",
        "id": 135467171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089964
    },
    {
        "content": "<p>I mean, some way of introspect</p>",
        "id": 135467183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089981
    },
    {
        "content": "<p>there's a <code>discriminant_value</code> method</p>",
        "id": 135467184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539089982
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135467190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539089990
    },
    {
        "content": "<p>or rather, that's an intrinsic</p>",
        "id": 135467267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry, was afk for a sec, did you resolve your questions?</p>",
        "id": 135467278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090018
    },
    {
        "content": "<p>but you probably want <code>std::mem::discriminant</code></p>",
        "id": 135467282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090020
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\">https://doc.rust-lang.org/std/mem/fn.discriminant.html</a></p>",
        "id": 135467283,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090021
    },
    {
        "content": "<p>fwiw I sort of hate how we implement <code>Debug</code> for most things</p>",
        "id": 135467288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090030
    },
    {
        "content": "<p>though I think also having the <em>full</em> Debug output would be pretty tedious most of the time</p>",
        "id": 135467294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090040
    },
    {
        "content": "<p>Didn't at some point we have some way to select</p>",
        "id": 135467302,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090051
    },
    {
        "content": "<p>verbose vs non-verbose</p>",
        "id": 135467313,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090057
    },
    {
        "content": "<p>we still do</p>",
        "id": 135467315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not yet but I need to find out first what is the variant of this <code>Place</code> that I was expecting to be a <code>Projection</code></p>",
        "id": 135467316,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539090061
    },
    {
        "content": "<p>in the format string?</p>",
        "id": 135467317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090062
    },
    {
        "content": "<p>but it's not uniform</p>",
        "id": 135467319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090062
    },
    {
        "content": "<p>ah, yes, we have that too</p>",
        "id": 135467329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090069
    },
    {
        "content": "<p><code>{:#?}</code></p>",
        "id": 135467331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090072
    },
    {
        "content": "<p>but I don't think our formatters pay any attention</p>",
        "id": 135467333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090076
    },
    {
        "content": "<p>I didn't mean <code>-Z verbose</code>, though that might be useful too</p>",
        "id": 135467334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090079
    },
    {
        "content": "<p>might be nice if they did, actually</p>",
        "id": 135467336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> what is the output string?</p>",
        "id": 135467342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090091
    },
    {
        "content": "<p>ah. We should totally leverage <code>{:#?}</code> in our <code>impl Debug</code> for MIR, or at least for Place...</p>",
        "id": 135467359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090103
    },
    {
        "content": "<p>I absolutely HATE how regions print with <code>{:?}</code> by default</p>",
        "id": 135467370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090120
    },
    {
        "content": "<p>that is part of what made it so !@!$! hard to debug that other problem</p>",
        "id": 135467416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090132
    },
    {
        "content": "<p>I have <code>-Z identify-regions</code></p>",
        "id": 135467432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090151
    },
    {
        "content": "<p>it used to help me with this</p>",
        "id": 135467455,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090160
    },
    {
        "content": "<p>but I dont' know if it continues to work well with NLL-renumbered regions</p>",
        "id": 135467475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090179
    },
    {
        "content": "<p>it might</p>",
        "id": 135467481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090181
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> what is the output string?</p>\n</blockquote>\n<p>DEBUG 2018-10-09T04:59:17Z: rustc_mir::borrow_check: mutate_place: place = (_1.0: i32)</p>",
        "id": 135467513,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539090198
    },
    {
        "content": "<p>that is (I suspect) a field projection, yes</p>",
        "id": 135467602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">ProjectionElem</span>::<span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">write</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;({:?}.{:?}: {:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135467620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090273
    },
    {
        "content": "<p>I think <code>local()</code> isn't as general as <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> thought it was</p>",
        "id": 135467625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090279
    },
    {
        "content": "<p>I think <code>local</code> should be fine</p>",
        "id": 135467635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090294
    },
    {
        "content": "<p>since it doesn't recur</p>",
        "id": 135467637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090298
    },
    {
        "content": "<p>and it only handles Deref projections</p>",
        "id": 135467647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090305
    },
    {
        "content": "<p>wait, or maybe I am wong</p>",
        "id": 135467648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090305
    },
    {
        "content": "<p>I thought it recurred</p>",
        "id": 135467654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090309
    },
    {
        "content": "<p>what on earth</p>",
        "id": 135467666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090319
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1971\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1971\">https://github.com/rust-lang/rust/blob/425a1debb0de638560d277066231eedfa5c5fbd6/src/librustc/mir/mod.rs#L1971</a></p>",
        "id": 135467684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090332
    },
    {
        "content": "<p>what is the point of <em>that</em></p>",
        "id": 135467689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090336
    },
    {
        "content": "<p>Don't ask me</p>",
        "id": 135467691,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090338
    },
    {
        "content": "<p>ok, so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I was wrong to suggest <code>local</code></p>",
        "id": 135467696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090346
    },
    {
        "content": "<p>which apparently does something a bit strange</p>",
        "id": 135467702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090355
    },
    {
        "content": "<p>/me goes to use git blame to find out if in fact @pnkfelix <em>is</em> to blame for this</p>",
        "id": 135467707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090359
    },
    {
        "content": "<p>and not what it's doc string suggests (to me)</p>",
        "id": 135467748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090365
    },
    {
        "content": "<p>I shouldn't be so harsh :) I'm sure it made sense at the time</p>",
        "id": 135467771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090385
    },
    {
        "content": "<p>it's just not what I anticipated</p>",
        "id": 135467780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090391
    },
    {
        "content": "<p>/me wasn't in the habit of checking <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's code for patterns of the form <code>base: Place::Local</code> back at that time. :)</p>",
        "id": 135467788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090404
    },
    {
        "content": "<p>the question is, is it what we actually <em>want</em> for the other callers</p>",
        "id": 135467793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090406
    },
    {
        "content": "<p>looks like it is only used in some debug output</p>",
        "id": 135467812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090436
    },
    {
        "content": "<p>I'm betting that it will be fine to generalize it</p>",
        "id": 135467813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539090436
    },
    {
        "content": "<p>I would expect so</p>",
        "id": 135467815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539090440
    },
    {
        "content": "<p>hey I'm back</p>",
        "id": 135483572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you suggested me to use <code>local()</code> I trusted you that was gonna work regardless I saw it wasn't making the recursion</p>",
        "id": 135483624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104795
    },
    {
        "content": "<p>given that this case was just one level deep</p>",
        "id": 135483627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104803
    },
    {
        "content": "<p>but anyway I saved a question which was ... what's the point for RootPlace then? :)</p>",
        "id": 135483654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104828
    },
    {
        "content": "<p>now I see</p>",
        "id": 135483659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104835
    },
    {
        "content": "<p>what if we properly implement <code>local()</code> and maybe even remove RootPlace?</p>",
        "id": 135483674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104858
    },
    {
        "content": "<p>I guess we may need to be careful about performance but I guess it worth checking how RootPlace is generated and if we can generate something like that with same perf</p>",
        "id": 135483736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104905
    },
    {
        "content": "<p>or maybe just implement <code>local()</code> properly?</p>",
        "id": 135483741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539104915
    },
    {
        "content": "<p>I believe that <code>RootPlace</code> plays a different role</p>",
        "id": 135483959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105156
    },
    {
        "content": "<p>so I dont' think we can just remove it</p>",
        "id": 135483962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105162
    },
    {
        "content": "<p>it indicates the place <em>from which the mutability comes</em></p>",
        "id": 135483971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105169
    },
    {
        "content": "<p>which isn't always the local variable</p>",
        "id": 135483973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105176
    },
    {
        "content": "<p>e.g., if you have a <code>x: &amp;mut Foo</code>, and you have a place <code>(*x).bar</code></p>",
        "id": 135483985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105188
    },
    {
        "content": "<p>then the mutability of that place is not dependent on whether the local variable <code>x</code> is mutable</p>",
        "id": 135483990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105206
    },
    {
        "content": "<p>I see</p>",
        "id": 135483992,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105207
    },
    {
        "content": "<p><em>however</em></p>",
        "id": 135483994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105211
    },
    {
        "content": "<p>the name made me think of a different meaning</p>",
        "id": 135484000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105217
    },
    {
        "content": "<p>for our purposes, we can just look at <code>x</code></p>",
        "id": 135484001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105219
    },
    {
        "content": "<p>because -- in the case above -- <code>x</code> would have to be initialized</p>",
        "id": 135484005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105227
    },
    {
        "content": "<p>or else you would have an error</p>",
        "id": 135484006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105230
    },
    {
        "content": "<p>same as for <code>x.bar = ...</code> (with no deref)</p>",
        "id": 135484011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105235
    },
    {
        "content": "<p>basically, we don't care about derefs, because to make the reference in the first place, the referent must be initialized</p>",
        "id": 135484057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105253
    },
    {
        "content": "<p>yep to derefs :)</p>",
        "id": 135484062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105269
    },
    {
        "content": "<p>so unsure if I follow we need to navigate <code>Projection</code> until we find what?</p>",
        "id": 135484083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105308
    },
    {
        "content": "<p>something that is not a projection :)</p>",
        "id": 135484206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105406
    },
    {
        "content": "<p>my expectation was that <code>local</code> would be something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">base_local</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Local</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">base_local</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Static</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Promoted</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(Note: I would not use <code>_</code> here)</p>",
        "id": 135484236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105460
    },
    {
        "content": "<p>hmm I'm not understanding properly</p>",
        "id": 135484515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105722
    },
    {
        "content": "<p>why just that?</p>",
        "id": 135484522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105726
    },
    {
        "content": "<p>why <code>local()</code> is different?</p>",
        "id": 135484528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105737
    },
    {
        "content": "<p><code>_</code> would be just <code>Static</code> and <code>Promoted</code></p>",
        "id": 135484536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105755
    },
    {
        "content": "<p>why wouldn't it be different?</p>",
        "id": 135484586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105821
    },
    {
        "content": "<p>I'm confused what you mean, I guess</p>",
        "id": 135484594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105835
    },
    {
        "content": "<p>the point of this is to return the \"root local variable\" (if any)</p>",
        "id": 135484598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105841
    },
    {
        "content": "<p>are you asking, why avoid <code>_</code>?</p>",
        "id": 135484639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105845
    },
    {
        "content": "<p>the answer is: in general I disapprove of <code>_</code></p>",
        "id": 135484646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105855
    },
    {
        "content": "<p>I'm asking 3 things</p>",
        "id": 135484649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105858
    },
    {
        "content": "<p>because it is not \"future proof\" when the enum changes</p>",
        "id": 135484652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105865
    },
    {
        "content": "<blockquote>\n<p>the answer is: in general I disapprove of <code>_</code></p>\n</blockquote>\n<p>agree with this, just wanted to point out that it was equivalent to what was going on in the <code>local()</code> case</p>",
        "id": 135484662,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105886
    },
    {
        "content": "<p>equivalent how?</p>",
        "id": 135484668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105894
    },
    {
        "content": "<p>in the function as it is, it only recurses for one specific kind of projection</p>",
        "id": 135484678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105908
    },
    {
        "content": "<p>a deref</p>",
        "id": 135484680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105909
    },
    {
        "content": "<p>because the rest of the 2 variants are <code>Static</code> and <code>Promoted</code></p>",
        "id": 135484683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105913
    },
    {
        "content": "<p>note that statics / promoted paths are also \"root\" paths that have no base path, so you can't recurse there</p>",
        "id": 135484694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105928
    },
    {
        "content": "<p>yes, I'm talking about the other part of the match</p>",
        "id": 135484696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105933
    },
    {
        "content": "<p>I see</p>",
        "id": 135484704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105941
    },
    {
        "content": "<p>I was wondering why do not change <code>local()</code></p>",
        "id": 135484705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105941
    },
    {
        "content": "<p>well</p>",
        "id": 135484709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105949
    },
    {
        "content": "<p>so in general I think the setup of <code>Place</code> is ungreat</p>",
        "id": 135484715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105958
    },
    {
        "content": "<blockquote>\n<p>I disapprove of <code>_</code></p>\n</blockquote>\n<p>... instead preferring <code>..</code>, right?</p>",
        "id": 135484758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539105965
    },
    {
        "content": "<p>but refactoring it has proven slow going (<span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> has been wokring on it)</p>",
        "id": 135484765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539105967
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I disapprove of <code>_</code></p>\n</blockquote>\n<p>... instead preferring <code>..</code>, right?</p>\n</blockquote>\n<p>lol</p>",
        "id": 135484772,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539105980
    },
    {
        "content": "<p>in particular, in this case, I think it'd be nice to have a distinction between \"base\" and \"projection\", where base = (Local | Static | Promoted), and to return a <code>Option&lt;Base&gt;</code></p>",
        "id": 135484785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106010
    },
    {
        "content": "<p>but we don't have such a type right now...</p>",
        "id": 135484791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106025
    },
    {
        "content": "<p>and we are returning <code>None</code> for <code>Static</code> and <code>Promoted</code></p>",
        "id": 135484814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539106063
    },
    {
        "content": "<p>so is not really base</p>",
        "id": 135484818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539106070
    },
    {
        "content": "<p>right, it's just the <em>base local</em></p>",
        "id": 135484880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106103
    },
    {
        "content": "<p>but for our purposes, that suffices</p>",
        "id": 135484890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106117
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135484896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539106126
    },
    {
        "content": "<p>in particular, <code>FOO.bar = ...</code> doesn't have to care whether <code>FOO</code> is initialized</p>",
        "id": 135484900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106131
    },
    {
        "content": "<p>since all statics are always initialized</p>",
        "id": 135484902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106135
    },
    {
        "content": "<p>same for constants</p>",
        "id": 135484903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106137
    },
    {
        "content": "<p>(that will be an error anyway, but for other reasons)</p>",
        "id": 135484905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539106141
    },
    {
        "content": "<p>yes</p>",
        "id": 135484915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539106150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust1 (invalid-no-need-mut)]$ RUST_BACKTRACE=1 rustc +rust-dev test.rs\nerror: internal compiler error: Error constructed but not emitted\n\nthread &#39;main&#39; panicked at &#39;explicit panic&#39;, librustc_errors/diagnostic_builder.rs:340:13\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1: std::sys_common::backtrace::print\n             at libstd/sys_common/backtrace.rs:71\n             at libstd/sys_common/backtrace.rs:59\n   2: std::panicking::default_hook::{{closure}}\n             at libstd/panicking.rs:211\n   3: std::panicking::default_hook\n             at libstd/panicking.rs:227\n   4: rustc::util::common::panic_hook\n             at librustc/util/common.rs:51\n   5: std::panicking::rust_panic_with_hook\n             at libstd/panicking.rs:480\n   6: std::panicking::begin_panic\n             at libstd/panicking.rs:410\n   7: &lt;rustc_errors::diagnostic_builder::DiagnosticBuilder&lt;&#39;a&gt; as core::ops::drop::Drop&gt;::drop\n             at librustc_errors/diagnostic_builder.rs:340\n   8: rustc_mir::borrow_check::MirBorrowckCtxt::mutate_place\n             at ./src/libcore/ptr.rs:194\n             at librustc_mir/borrow_check/mod.rs:1132\n   9: &lt;rustc_mir::borrow_check::MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; as rustc_mir::dataflow::DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt;&gt;::visit_statement_entry\n             at librustc_mir/borrow_check/mod.rs:0\n  10: rustc_mir::dataflow::DataflowResultsConsumer::process_basic_block\n             at librustc_mir/dataflow/mod.rs:328\n  11: rustc_mir::dataflow::DataflowResultsConsumer::analyze_results\n             at librustc_mir/dataflow/mod.rs:318\n  12: rustc_mir::borrow_check::do_mir_borrowck\n             at librustc_mir/borrow_check/mod.rs:278\n  13: rustc::ty::context::tls::set_tlv\n             at librustc_mir/borrow_check/mod.rs:124\n             at ./src/librustc/infer/mod.rs:508\n             at ./src/librustc/ty/context.rs:1676\n             at ./src/librustc/ty/context.rs:2022\n             at ./src/librustc/ty/context.rs:1961\n  14: rustc::ty::context::tls::with_context_opt\n             at ./src/librustc/ty/context.rs:2021\n             at ./src/librustc/ty/context.rs:1675\n             at ./src/librustc/ty/context.rs:2122\n             at ./src/librustc/ty/context.rs:2106\n             at ./src/librustc/ty/context.rs:2097\n  15: rustc::infer::InferCtxtBuilder::enter\n             at ./src/librustc/ty/context.rs:2106\n             at ./src/librustc/ty/context.rs:2117\n             at ./src/librustc/ty/context.rs:1668\n             at ./src/librustc/infer/mod.rs:507\n  16: rustc_mir::borrow_check::mir_borrowck\n             at librustc_mir/borrow_check/mod.rs:122\n  17: rustc::ty::query::__query_compute::mir_borrowck\n             at librustc/ty/query/plumbing.rs:834\n             at librustc/ty/query/plumbing.rs:796\n  18: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors&lt;&#39;tcx&gt; for rustc::ty::query::queries::mir_borrowck&lt;&#39;tcx&gt;&gt;::compute\n             at librustc/ty/query/plumbing.rs:826\n  19: rustc::dep_graph::graph::DepGraph::with_task_impl\n             at librustc/dep_graph/graph.rs:342\n  20: rustc::ty::context::tls::set_tlv\n             at librustc/dep_graph/graph.rs:208\n             at librustc/ty/query/plumbing.rs:550\n             at librustc/ty/query/plumbing.rs:208\n             at librustc/ty/context.rs:2022\n             at librustc/ty/context.rs:1961\n  21: rustc::ty::context::tls::with_context_opt\n             at librustc/ty/context.rs:2021\n             at librustc/ty/query/plumbing.rs:207\n             at librustc/ty/context.rs:2122\n             at librustc/ty/context.rs:2106\n             at librustc/ty/context.rs:2097\n  22: &lt;rustc::ty::query::plumbing::JobOwner&lt;&#39;a, &#39;tcx, Q&gt;&gt;::start\n             at librustc/ty/context.rs:2106\n             at librustc/ty/context.rs:2117\n             at librustc/ty/query/plumbing.rs:197\n  23: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::force_query_with_job\n             at librustc/ty/query/plumbing.rs:543\n  24: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::get_query\n             at librustc/ty/query/plumbing.rs:383\n             at librustc/ty/query/plumbing.rs:629\n             at librustc/ty/query/plumbing.rs:640\n  25: rustc::ty::query::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;tcx, &#39;lcx&gt;&gt;::mir_borrowck\n             at librustc/ty/query/plumbing.rs:888\n             at librustc/ty/query/plumbing.rs:881\n  26: rustc::ty::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::par_body_owners\n             at librustc_driver/driver.rs:1322\n             at ./src/librustc/ty/mod.rs:2576\n             at ./src/libcore/iter/iterator.rs:553\n             at ./src/libcore/slice/mod.rs:2737\n             at ./src/libcore/iter/iterator.rs:553\n             at ./src/librustc/ty/mod.rs:2575\n  27: rustc::util::common::time_ext\n             at librustc_driver/driver.rs:1322\n             at ./src/librustc/util/common.rs:163\n  28: rustc::ty::context::tls::set_tlv\n             at ./src/librustc/util/common.rs:157\n             at librustc_driver/driver.rs:1320\n             at ./src/librustc/ty/context.rs:2054\n             at ./src/librustc/ty/context.rs:2022\n             at ./src/librustc/ty/context.rs:1961\n  29: &lt;std::thread::local::LocalKey&lt;T&gt;&gt;::try_with\n             at ./src/librustc/ty/context.rs:2021\n             at ./src/librustc/ty/context.rs:2053\n             at ./src/librustc/ty/context.rs:2011\n             at ./src/libstd/thread/local.rs:294\n  30: &lt;std::thread::local::LocalKey&lt;T&gt;&gt;::try_with\n             at ./src/libstd/thread/local.rs:248\n             at ./src/librustc/ty/context.rs:2003\n             at ./src/libstd/thread/local.rs:294\n  31: rustc::ty::context::TyCtxt::create_and_enter\n             at ./src/libstd/thread/local.rs:248\n             at ./src/librustc/ty/context.rs:1995\n             at ./src/librustc/ty/context.rs:2033\n             at ./src/librustc/ty/context.rs:1249\n  32: rustc_driver::driver::phase_3_run_analysis_passes\n             at librustc_driver/driver.rs:1259\n  33: rustc_driver::driver::compile_input\n             at librustc_driver/driver.rs:287\n  34: rustc_driver::run_compiler_with_pool\n             at librustc_driver/lib.rs:563\n  35: &lt;scoped_tls::ScopedKey&lt;T&gt;&gt;::set\n             at librustc_driver/lib.rs:485\n             at librustc_driver/driver.rs:76\n             at /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155\n  36: rustc_driver::run_compiler\n             at librustc_driver/driver.rs:75\n             at librustc_driver/lib.rs:484\n  37: &lt;scoped_tls::ScopedKey&lt;T&gt;&gt;::set\n             at librustc_driver/lib.rs:1746\n             at librustc_driver/lib.rs:190\n             at /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155\n  38: &lt;scoped_tls::ScopedKey&lt;T&gt;&gt;::set\n             at ./src/libsyntax/lib.rs:106\n             at /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155\n  39: std::panicking::try::do_call\n             at ./src/libsyntax/lib.rs:105\n             at librustc_driver/lib.rs:189\n             at librustc_driver/lib.rs:1661\n             at ./src/libstd/panic.rs:313\n             at ./src/libstd/panicking.rs:310\n  40: __rust_maybe_catch_panic\n             at libpanic_unwind/lib.rs:102\n  41: std::panicking::try\n             at ./src/libstd/panicking.rs:289\n  42: rustc_driver::in_named_rustc_thread\n             at ./src/libstd/panic.rs:392\n             at librustc_driver/lib.rs:1575\n  43: rustc_driver::monitor\n             at librustc_driver/lib.rs:1586\n             at librustc_driver/lib.rs:1660\n  44: rustc_driver::run\n             at librustc_driver/lib.rs:188\n  45: rustc_driver::main\n             at librustc_driver/lib.rs:1739\n  46: std::rt::lang_start::{{closure}}\n             at ./src/libstd/rt.rs:74\n  47: std::panicking::try::do_call\n             at libstd/rt.rs:59\n             at libstd/panicking.rs:310\n  48: __rust_maybe_catch_panic\n             at libpanic_unwind/lib.rs:102\n  49: std::panicking::try\n             at libstd/panicking.rs:289\n  50: std::rt::lang_start_internal\n             at libstd/panic.rs:392\n             at libstd/rt.rs:58\n  51: main\n  52: __libc_start_main\n  53: _start\nquery stack during panic:\n#0 [mir_borrowck] processing `main`\nend of query stack\nerror: aborting due to previous error\n\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.31.0-dev running on x86_64-unknown-linux-gnu\n</pre></div>",
        "id": 135486495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was expecting the error to be emitted somewhere</p>",
        "id": 135486509,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107683
    },
    {
        "content": "<p>you have to invoke <code>.emit()</code> yourself</p>",
        "id": 135486514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107697
    },
    {
        "content": "<p>only we actually want to invoke <code>.buffer</code> I think</p>",
        "id": 135486523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107704
    },
    {
        "content": "<p>because of the whole migration business</p>",
        "id": 135486534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107716
    },
    {
        "content": "<p>I was just doing ...</p>",
        "id": 135486566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                    struct_span_err!(self.infcx.tcx.sess, place_span.1, E0718,\n                                     &quot;cannot assign to `{:?}` when `{:?}` is not initialized&quot;,\n                                     place, Place::Local(local)\n                    );\n                    return;\n</pre></div>",
        "id": 135486571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107756
    },
    {
        "content": "<p>yeah, that doesn't work</p>",
        "id": 135486581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107762
    },
    {
        "content": "<p>that just constructs a diagnostic</p>",
        "id": 135486621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107765
    },
    {
        "content": "<p>you meant to call buffer after that?</p>",
        "id": 135486624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107767
    },
    {
        "content": "<p>and drops it on the floor</p>",
        "id": 135486626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107768
    },
    {
        "content": "<p>yes</p>",
        "id": 135486627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107769
    },
    {
        "content": "<p>right</p>",
        "id": 135486628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107771
    },
    {
        "content": "<p>ok</p>",
        "id": 135486632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107773
    },
    {
        "content": "<p>makes sense</p>",
        "id": 135486633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107776
    },
    {
        "content": "<p>you can look around for an example</p>",
        "id": 135486639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539107777
    },
    {
        "content": "<p>yep</p>",
        "id": 135486644,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107783
    },
    {
        "content": "<p>I remember now</p>",
        "id": 135486657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107793
    },
    {
        "content": "<p>forgot the way of how this did work</p>",
        "id": 135486667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107800
    },
    {
        "content": "<p>for some minute thought you kept calling this and emit was called at the end</p>",
        "id": 135486689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539107817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in order to get the name from a place I need to go to the hir level?</p>",
        "id": 135488481,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109639
    },
    {
        "content": "<p><code>&amp;self.tcx.hir.name(self.tcx.hir.hir_to_node_id(id)).as_str()</code></p>",
        "id": 135488491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109658
    },
    {
        "content": "<p>something like that?</p>",
        "id": 135488493,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109661
    },
    {
        "content": "<p>I guess I need some kind of id first?</p>",
        "id": 135488502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109679
    },
    {
        "content": "<p>you don't want that</p>",
        "id": 135488549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109697
    },
    {
        "content": "<p>you want a user-printable string from a place?</p>",
        "id": 135488559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109703
    },
    {
        "content": "<p>yeah</p>",
        "id": 135488587,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109727
    },
    {
        "content": "<p>checked impl Place in several places and there's no such a thing or couldn't find that</p>",
        "id": 135488605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109746
    },
    {
        "content": "<p>there is a method <code>describe_place</code></p>",
        "id": 135488612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"c1\">// End-user visible description of `place` if one can be found. If the</span>\n<span class=\"w\">    </span><span class=\"c1\">// place is a temporary for instance, None will be returned.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">describe_place</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">describe_place_with_options</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IncludingDowncast</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135488621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109764
    },
    {
        "content": "<p>it sometimes returns <code>None</code> because some places cannot be described</p>",
        "id": 135488631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109772
    },
    {
        "content": "<p>I don't think that should apply in this case though</p>",
        "id": 135488639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539109777
    },
    {
        "content": "<p>you meant that I should just call unwrap() there?</p>",
        "id": 135488867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539109925
    },
    {
        "content": "<p>usually the best is to have some alternate wording</p>",
        "id": 135488950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110025
    },
    {
        "content": "<p>in this particular case though</p>",
        "id": 135488964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110036
    },
    {
        "content": "<p>I am not sure if we have to describe the place at all</p>",
        "id": 135488970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110039
    },
    {
        "content": "<p>or, at least, if <code>describe_place</code> returns <code>None</code></p>",
        "id": 135489018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110055
    },
    {
        "content": "<p>you could say a message like \"use of uninitialized variable <code>x</code>\"</p>",
        "id": 135489028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110067
    },
    {
        "content": "<p>after all, we always have a local variable here</p>",
        "id": 135489034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110073
    },
    {
        "content": "<p>and we can get its name from <code>mir.local_decls[local].name</code> — and <em>that</em> I think we <em>can</em> unwrap</p>",
        "id": 135489044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110087
    },
    {
        "content": "<p>because the compiler will never generate a use of an uninitialized local</p>",
        "id": 135489053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539110095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0718]: cannot assign to `s.0` when `s` is not initialized\n --&gt; test.rs:5:5\n  |\n5 |     s.0 = 3;\n  |     ^^^^^^^\n\nerror[E0718]: cannot assign to `s.1` when `s` is not initialized\n --&gt; test.rs:6:5\n  |\n6 |     s.1 = 4;\n  |     ^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0718`.\n</pre></div>",
        "id": 135489098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539110153
    },
    {
        "content": "<p>:)</p>",
        "id": 135489101,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539110158
    },
    {
        "content": "<p>gonna tweak it a bit with your last tips and push again</p>",
        "id": 135489152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539110182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> done <a href=\"https://github.com/rust-lang/rust/pull/54621\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621\">https://github.com/rust-lang/rust/pull/54621</a></p>",
        "id": 135490105,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539110985
    },
    {
        "content": "<p>I may end pushing a rustfmt ran or something and would like to see tests running</p>",
        "id": 135490114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539110997
    },
    {
        "content": "<p>but anyway it's more or less finished I think :)</p>",
        "id": 135490459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539111244
    },
    {
        "content": "<p>I've made a lot of local fixes</p>",
        "id": 135491805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539112453
    },
    {
        "content": "<p>pushing a last version</p>",
        "id": 135491806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539112458
    },
    {
        "content": "<p>after compiling process finishes</p>",
        "id": 135491821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539112490
    },
    {
        "content": "<p>looking good</p>",
        "id": 135492022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539112716
    },
    {
        "content": "<p>I left some nits</p>",
        "id": 135492024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539112718
    },
    {
        "content": "<p>mosly just requests for more comments</p>",
        "id": 135492028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539112722
    },
    {
        "content": "<p>I still didn’t push the fixed version but will check your nits</p>",
        "id": 135492750,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539113444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> your comments were address but I've also made some other tweaks</p>",
        "id": 135498615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539118858
    },
    {
        "content": "<p>like changing the two if let's to a match and stuff like that</p>",
        "id": 135498637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539118876
    },
    {
        "content": "<p>now if ci says so it's ready to merge</p>",
        "id": 135498654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539118899
    },
    {
        "content": "<p>actually having second thoughts about this <a href=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1123\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1123\">https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1123</a></p>",
        "id": 135498758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539118990
    },
    {
        "content": "<p>should that wrap everything I guess</p>",
        "id": 135498762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539118998
    },
    {
        "content": "<p>if it's not mutable this error <a href=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132\">https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132</a> doesn't make any sense</p>",
        "id": 135498801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119042
    },
    {
        "content": "<p>and if that's the case why all the tests pass?</p>",
        "id": 135498903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119122
    },
    {
        "content": "<p>is it possible that that local has Mutability other than Mut?</p>",
        "id": 135498927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119148
    },
    {
        "content": "<blockquote>\n<p>if it's not mutable this error <a href=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132\">https://github.com/rust-lang/rust/pull/54621/commits/b8dbca11db58d62dfbf748377277d74669002fe5#diff-5b4d01d26caf43976125ba0f877e78c0R1132</a> doesn't make any sense</p>\n</blockquote>\n<p>why does that error not make sense?</p>",
        "id": 135498932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119156
    },
    {
        "content": "<p>I think it makes sense</p>",
        "id": 135498937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119161
    },
    {
        "content": "<p>but all tests passing is a bit suspicious, maybe we just weren't testing this scenario?</p>",
        "id": 135498984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119173
    },
    {
        "content": "<p>ok, you're right</p>",
        "id": 135499007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119205
    },
    {
        "content": "<p>makes sense</p>",
        "id": 135499010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119208
    },
    {
        "content": "<p>we are talking about this example ...</p>",
        "id": 135499041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135499054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119248
    },
    {
        "content": "<p>right?</p>",
        "id": 135499056,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119252
    },
    {
        "content": "<p>yes</p>",
        "id": 135499065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119265
    },
    {
        "content": "<p>that should also fail</p>",
        "id": 135499070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119272
    },
    {
        "content": "<p>I just added a review to request you add a test like that</p>",
        "id": 135499071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119272
    },
    {
        "content": "<p>right, it should error in the same way for now</p>",
        "id": 135499072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119279
    },
    {
        "content": "<p>let me check what happens</p>",
        "id": 135499073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119282
    },
    {
        "content": "<p>(eventually, we would like to accept both)</p>",
        "id": 135499112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119285
    },
    {
        "content": "<p>(but that's not our immediate goal)</p>",
        "id": 135499118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119289
    },
    {
        "content": "<p>yep</p>",
        "id": 135499173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119363
    },
    {
        "content": "<p>right now</p>",
        "id": 135499180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux tmp]$ rustc test.rs\nerror[E0594]: cannot assign to `s.0`, as `s` is not declared as mutable\n --&gt; test.rs:5:5\n  |\n4 |     let s: (i32, i32);\n  |         - help: consider changing this to be mutable: `mut s`\n5 |     s.0 = 3;\n  |     ^^^^^^^ cannot assign\n\nerror[E0594]: cannot assign to `s.1`, as `s` is not declared as mutable\n --&gt; test.rs:6:5\n  |\n4 |     let s: (i32, i32);\n  |         - help: consider changing this to be mutable: `mut s`\n5 |     s.0 = 3;\n6 |     s.1 = 4;\n  |     ^^^^^^^ cannot assign\n\nerror: aborting due to 2 previous errors\n</pre></div>",
        "id": 135499184,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119370
    },
    {
        "content": "<p>with nightly</p>",
        "id": 135499190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119374
    },
    {
        "content": "<p>I'm compiling my thing again</p>",
        "id": 135499197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119379
    },
    {
        "content": "<p>in our case is going to say something like</p>",
        "id": 135499269,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119418
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cannot assign to `s.0` when `s` is not initialized\n</pre></div>",
        "id": 135499290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119439
    },
    {
        "content": "<p>seems better</p>",
        "id": 135499302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119446
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135499310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119451
    },
    {
        "content": "<p>particularly since we are currently advising people to add <code>mut</code> — but even if they add <code>mut</code>, it's not going to work well</p>",
        "id": 135499318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119460
    },
    {
        "content": "<p>is not initialized but at the same time is not mutable</p>",
        "id": 135499326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119466
    },
    {
        "content": "<p>what about for this second case, something like ...</p>",
        "id": 135499355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cannot assign to `s.0` when `s` is not initialized and not mutable either\n</pre></div>",
        "id": 135499449,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119547
    },
    {
        "content": "<p>or something written better :)</p>",
        "id": 135499456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119553
    },
    {
        "content": "<p>well unsure if it worth</p>",
        "id": 135499461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119558
    },
    {
        "content": "<p>whatever you prefer :)</p>",
        "id": 135499467,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119564
    },
    {
        "content": "<p>I do not like it because</p>",
        "id": 135499513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119624
    },
    {
        "content": "<p>s being mutable should have nothing to do with it</p>",
        "id": 135499520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119630
    },
    {
        "content": "<p>I mean</p>",
        "id": 135499566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119648
    },
    {
        "content": "<p>in particular, just because <code>s</code> is not mutable, doesn't mean you can't assign to it — you just can't assign to it more than once along any control-flow path</p>",
        "id": 135499568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119649
    },
    {
        "content": "<p>e.g.</p>",
        "id": 135499570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn main() {\n    let x: u32;\n\n    x = 22;\n}\n</pre></div>\n\n\n<p>is accepted</p>",
        "id": 135499578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119663
    },
    {
        "content": "<p>what I meant is ... in order for s.0 = something to work</p>",
        "id": 135499584,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119680
    },
    {
        "content": "<p>in current code</p>",
        "id": 135499587,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119684
    },
    {
        "content": "<p>you would need to have s initialized</p>",
        "id": 135499596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119690
    },
    {
        "content": "<p>and s be mutable</p>",
        "id": 135499600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119695
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>seems analogous to me</p>",
        "id": 135499604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119697
    },
    {
        "content": "<p>hmm</p>",
        "id": 135499619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119709
    },
    {
        "content": "<p>that part is true</p>",
        "id": 135499621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119710
    },
    {
        "content": "<p>because that s.0 = something would mean that you're reassinging</p>",
        "id": 135499623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119712
    },
    {
        "content": "<p>right, by definition, since it must be initialized</p>",
        "id": 135499629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119718
    },
    {
        "content": "<p>well, that's true</p>",
        "id": 135499636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119724
    },
    {
        "content": "<p>I guess I don't have a strong opinion about it</p>",
        "id": 135499649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119735
    },
    {
        "content": "<p>maybe we could add a label instead?</p>",
        "id": 135499651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119743
    },
    {
        "content": "<p>I have less strong opinion :P</p>",
        "id": 135499656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119753
    },
    {
        "content": "<p>e.g., underline the variable with a suggestion like \"- will also have to be declared <code>mut</code>\"</p>",
        "id": 135499661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119758
    },
    {
        "content": "<p>seems good</p>",
        "id": 135499708,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539119768
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 135499710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539119770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you want to compare notes, this is how I ended up doing it locally: PR <a href=\"https://github.com/rust-lang/rust/issues/54941\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54941\">#54941</a></p>",
        "id": 135500735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539120831
    },
    {
        "content": "<p>(note that this is <em>just</em> addressing the <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> thing. It doesn't attempt to touch anything about <code>mut</code> tracking.)</p>",
        "id": 135500790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539120864
    },
    {
        "content": "<p>but I thought it might be nice for you to see what tests I ended up having to touch</p>",
        "id": 135500801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539120882
    },
    {
        "content": "<p>I don't actually disagree with the strategy that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has advised, of focusing on the <code>local</code> that underlies the <code>Place</code>. But I didn't take that tack myself.</p>",
        "id": 135500837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539120942
    },
    {
        "content": "<p>The only place where I could imagine the two strategies diverging would <em>perhaps</em> be in how they would handle a (hypothetical) <code>Box&lt;Struct&gt;</code> where the box itself has been allocated somehow <em>without</em> initializing the struct it carries.</p>",
        "id": 135500916,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539120994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not sure I followed</p>",
        "id": 135504682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125449
    },
    {
        "content": "<p>does your PR do the same as mine or address the <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> thing?</p>",
        "id": 135504692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125465
    },
    {
        "content": "<p>My PR was solely focused on the <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a> thing</p>",
        "id": 135504697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125476
    },
    {
        "content": "<p>ok</p>",
        "id": 135504701,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125483
    },
    {
        "content": "<p>but not complete I guess?</p>",
        "id": 135504703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125487
    },
    {
        "content": "<p>Yours is much broader</p>",
        "id": 135504704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125487
    },
    {
        "content": "<p>I only put mine up in case you wanted to e.g. look at the tests</p>",
        "id": 135504710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125499
    },
    {
        "content": "<p>gotcha</p>",
        "id": 135504716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125507
    },
    {
        "content": "<p>I'll write a comment making that clear</p>",
        "id": 135504726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125521
    },
    {
        "content": "<p>I've just pushed my stuff</p>",
        "id": 135504901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125694
    },
    {
        "content": "<p>gonna compare the tests</p>",
        "id": 135504904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f\">https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f</a></p>",
        "id": 135504976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125791
    },
    {
        "content": "<p>if you take a look at that there are some differences I guess</p>",
        "id": 135504982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125800
    },
    {
        "content": "<p>I'm starting to check so unsure yet</p>",
        "id": 135504984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125806
    },
    {
        "content": "<p>so</p>",
        "id": 135505076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125904
    },
    {
        "content": "<p>you have some extra errors injected</p>",
        "id": 135505079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125912
    },
    {
        "content": "<p>that I avoided</p>",
        "id": 135505080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125914
    },
    {
        "content": "<p>yep</p>",
        "id": 135505088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125926
    },
    {
        "content": "<p>we don't want this <a href=\"https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f#diff-27087a37a3701eb55da69c6420fb0fa8R1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f#diff-27087a37a3701eb55da69c6420fb0fa8R1\">https://github.com/rust-lang/rust/pull/54621/commits/56011eb2e3bf8450caaf54fb90050a3e0100398f#diff-27087a37a3701eb55da69c6420fb0fa8R1</a></p>",
        "id": 135505093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125930
    },
    {
        "content": "<p>the moved error is good enough</p>",
        "id": 135505117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539125972
    },
    {
        "content": "<p>if you look at my patch</p>",
        "id": 135505124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125987
    },
    {
        "content": "<p>you can see I deliberately used PrefixSet::Shallow</p>",
        "id": 135505134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539125999
    },
    {
        "content": "<p>That was because I was hitting the same case on borrowck-issue-48962.stderr</p>",
        "id": 135505199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126017
    },
    {
        "content": "<p>until I made that change</p>",
        "id": 135505213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126023
    },
    {
        "content": "<p>Its here on my PR: <a href=\"https://github.com/rust-lang/rust/pull/54941/commits/e28b889108285ae5307e09ccb3fbd27febfcd44d#diff-5b4d01d26caf43976125ba0f877e78c0R1718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54941/commits/e28b889108285ae5307e09ccb3fbd27febfcd44d#diff-5b4d01d26caf43976125ba0f877e78c0R1718\">https://github.com/rust-lang/rust/pull/54941/commits/e28b889108285ae5307e09ccb3fbd27febfcd44d#diff-5b4d01d26caf43976125ba0f877e78c0R1718</a></p>",
        "id": 135505232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126048
    },
    {
        "content": "<blockquote>\n<p>you can see I deliberately used PrefixSet::Shallow</p>\n</blockquote>\n<p>what is that?</p>",
        "id": 135505388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539126217
    },
    {
        "content": "<p>well</p>",
        "id": 135505450,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126255
    },
    {
        "content": "<p>we have a helper for iterating over all the prefixes of a path</p>",
        "id": 135505456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126265
    },
    {
        "content": "<p>i.e., given <code>a.b.c</code>, it gives you  [<code>a.b.c</code>, <code>a.b</code>, <code>a</code>]</p>",
        "id": 135505465,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126290
    },
    {
        "content": "<p>But for some common situations , you don't want to traverse over <em>all</em> the kinds of projections</p>",
        "id": 135505483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126328
    },
    {
        "content": "<p>namely, there are times when you want to stop as soon as you hit a Deref</p>",
        "id": 135505492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126343
    },
    {
        "content": "<p>these are documented in rustc_mir::borrow_check::prefixes</p>",
        "id": 135505551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126385
    },
    {
        "content": "<p>I see</p>",
        "id": 135505569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539126414
    },
    {
        "content": "<p>I'm betting you can adapt the code I used</p>",
        "id": 135505596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126458
    },
    {
        "content": "<p>but plug it into the context</p>",
        "id": 135505598,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126465
    },
    {
        "content": "<p>where you have your change</p>",
        "id": 135505600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126469
    },
    {
        "content": "<p>if you prefer to keep it there</p>",
        "id": 135505602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126475
    },
    {
        "content": "<p>the Only reason I have my code at the spot where I have it</p>",
        "id": 135505648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126489
    },
    {
        "content": "<p>is that it happens to fall near where we handle assignments to fields of structs that implement Drop</p>",
        "id": 135505692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126549
    },
    {
        "content": "<p>and I thought the two code paths would end up being the same</p>",
        "id": 135505699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126560
    },
    {
        "content": "<p>Alas, they didn't end up the same at all.</p>",
        "id": 135505716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126581
    },
    {
        "content": "<p>yeah will try that tomorrow</p>",
        "id": 135505846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539126691
    },
    {
        "content": "<p>thanks for your help</p>",
        "id": 135505850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539126701
    },
    {
        "content": "<p>no problem</p>",
        "id": 135505856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126711
    },
    {
        "content": "<p>I'm just glad</p>",
        "id": 135505858,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126714
    },
    {
        "content": "<p>I'm not the only one</p>",
        "id": 135505861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126718
    },
    {
        "content": "<p>who hit that issue with  borrowck-issue-48962.stderr</p>",
        "id": 135505905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539126730
    },
    {
        "content": "<p>:)</p>",
        "id": 135505924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539126764
    },
    {
        "content": "<p>hmm, ok, so yeah I can see that the simplistic approach I advocated would lead to redundant errors</p>",
        "id": 135541369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178584
    },
    {
        "content": "<p>I can use the prefixes trick that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> used</p>",
        "id": 135541408,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178629
    },
    {
        "content": "<p>or we should just go the full <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> path?</p>",
        "id": 135541412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178637
    },
    {
        "content": "<p>prefixes doesn't .. well, that's ok I guess</p>",
        "id": 135541414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178639
    },
    {
        "content": "<p>but we're not really looking to <em>enumerate</em> the set of prefixes per se</p>",
        "id": 135541423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178652
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 135541452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178682
    },
    {
        "content": "<p>but I guess we can just look for a local in that set</p>",
        "id": 135541475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178682
    },
    {
        "content": "<p>It’s just a trick to limit oneself to the Shallow set</p>",
        "id": 135541506,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539178695
    },
    {
        "content": "<p>right, as opposed to rewriting similar-ish logic</p>",
        "id": 135541513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178704
    },
    {
        "content": "<p>I'm just debating</p>",
        "id": 135541525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178715
    },
    {
        "content": "<p>another way to go about it</p>",
        "id": 135541535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178723
    },
    {
        "content": "<p>so basically there are two cases that would get duplicate errors, I think</p>",
        "id": 135541547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178732
    },
    {
        "content": "<p>derefs of references</p>",
        "id": 135541557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178744
    },
    {
        "content": "<p>but also things with drop, maybe?</p>",
        "id": 135541567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178749
    },
    {
        "content": "<p>I think these kind of correspond to cases that have no <code>MovePathIndex</code>?</p>",
        "id": 135541577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178757
    },
    {
        "content": "<p>I imagine indices also count</p>",
        "id": 135541585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178774
    },
    {
        "content": "<p>e.g., <code>foo[3] = 22</code>, will probably never be allowed if <code>foo</code> is not initialized</p>",
        "id": 135541608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178792
    },
    {
        "content": "<p>so maybe we just want to check if the <code>Place</code> has a <code>MovePathIndex</code>?</p>",
        "id": 135541671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178810
    },
    {
        "content": "<p>and, if so, we then look for its base-local?</p>",
        "id": 135541678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178819
    },
    {
        "content": "<p>/me points to their PR</p>",
        "id": 135541693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539178837
    },
    {
        "content": "<p>sigh, I'll go read it :P</p>",
        "id": 135541703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178848
    },
    {
        "content": "<p>I’m more laughing</p>",
        "id": 135541726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539178881
    },
    {
        "content": "<p>well</p>",
        "id": 135541733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178889
    },
    {
        "content": "<p>Because what you describe overlaps what it does. Except that it doesn’t bother trying to go to the base local</p>",
        "id": 135541750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539178917
    },
    {
        "content": "<p>I guess the question is if we hvae to enumerate prefixes, presumably you have examples why we want to :)</p>",
        "id": 135541752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539178921
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 135541812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178950
    },
    {
        "content": "<p>isn't Felix's PR, enough?</p>",
        "id": 135541825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178958
    },
    {
        "content": "<p>or a variant of it?</p>",
        "id": 135541828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178961
    },
    {
        "content": "<p>I'm ok with just throwing away my PR and using Felix code</p>",
        "id": 135541836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539178976
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 135541863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179010
    },
    {
        "content": "<p>yeah, maybe we should do that?</p>",
        "id": 135541867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179015
    },
    {
        "content": "<p>it seems like they are sort of doing the same thing</p>",
        "id": 135541871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179020
    },
    {
        "content": "<p>I remember that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> said that it was for <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a></p>",
        "id": 135541873,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539179027
    },
    {
        "content": "<p>the place where <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> put their patch also makes sense</p>",
        "id": 135541877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179029
    },
    {
        "content": "<p>maybe more sense</p>",
        "id": 135541882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179035
    },
    {
        "content": "<p>I assume that <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ‘s other changes are worth keeping</p>",
        "id": 135541932,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539179058
    },
    {
        "content": "<p>what are the other changes you're mentioning?</p>",
        "id": 135541959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539179096
    },
    {
        "content": "<p>I think the only thing in <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s PR that's not in yours is the <code>used_mut</code> modification?</p>",
        "id": 135541964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179103
    },
    {
        "content": "<p>Right</p>",
        "id": 135541980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539179127
    },
    {
        "content": "<p>what happens if we have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in your PR, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ?</p>",
        "id": 135542273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179421
    },
    {
        "content": "<p>(do you happen to a build available to test?)</p>",
        "id": 135542277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179429
    },
    {
        "content": "<p>seems like it'd be easy to modify your PR to add the local variable to the set</p>",
        "id": 135542280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539179441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> just wanted to be sure here</p>",
        "id": 135559749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539196543
    },
    {
        "content": "<p>I guess the best thing would be if you continue with your branch and we throw away my PR</p>",
        "id": 135559799,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539196564
    },
    {
        "content": "<p>anyway, let me know if I can help in some way but given you have 99% of the stuff and you've figured most of the stuff I guess it's better if you continue ... ?</p>",
        "id": 135559829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1539196614
    },
    {
        "content": "<p>(Sorry I was afk for a couple of hours; my parents are visiting. I’ll try to answer these Q’s tonight or tomorrow AM at the latest)</p>",
        "id": 135560448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539197200
    },
    {
        "content": "<blockquote>\n<p>what happens if we have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in your PR, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ?</p>\n</blockquote>\n<p>Egad, my PR doesn't handle that!</p>",
        "id": 135596826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539250198
    },
    {
        "content": "<p>Will fix</p>",
        "id": 135596883,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539250231
    },
    {
        "content": "<p>Perhaps we should consider unifying <code>Tuple</code> and <code>Adt</code> ...</p>",
        "id": 135597586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539251177
    },
    {
        "content": "<p>In general, I think we have WAY too many type variants. They should basically <em>all</em> be ADT...</p>",
        "id": 135597787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539251428
    },
    {
        "content": "<p>Ah! <span class=\"emoji emoji-1f628\" title=\"scared\">:scared:</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-26996.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-26996.rs\">https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-26996.rs</a></p>",
        "id": 135598924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539252889
    },
    {
        "content": "<p>I'd say we're in the right for shifting to rejecting this code</p>",
        "id": 135598976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539252951
    },
    {
        "content": "<p>Other similar cases: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-27021.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-27021.rs\">https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-27021.rs</a> and <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-49298.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-49298.rs\">https://github.com/rust-lang/rust/blob/master/src/test/run-pass/issues/issue-49298.rs</a></p>",
        "id": 135599079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539253045
    },
    {
        "content": "<p>I am however also now wondering whether this is simply too risky a change for us to throw in at this late date</p>",
        "id": 135599087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539253062
    },
    {
        "content": "<p>The change being  \"NLL: Reject partial init of uninitialized record (struct or tuple)\" <a href=\"https://github.com/rust-lang/rust/issues/54986\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54986\">#54986</a>  (I've made two distinct issues so we can stop referring ambiguously to <a href=\"https://github.com/rust-lang/rust/issues/21232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/21232\">#21232</a>)</p>",
        "id": 135599143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539253118
    },
    {
        "content": "<p>okay, I found a place where I guess we should map to the base local rather than doing just the nearest prefix like I did</p>",
        "id": 135615530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539271041
    },
    {
        "content": "<p>namely, if you have two levels of struct, like <code>struct R&lt;F&gt; { f: F, ... }</code> and <code>struct S { x: u32, ... }</code>, and you do: <code>let r: R&lt;S&gt;; r.f.x = 10;</code></p>",
        "id": 135615621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539271090
    },
    {
        "content": "<p>I <em>think</em> we want the error to point out that <code>r</code> is uninitialized</p>",
        "id": 135615638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539271105
    },
    {
        "content": "<p>and not just say that <code>r.f</code> is uninitialized.</p>",
        "id": 135615648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539271113
    },
    {
        "content": "<p>(though I should go back and double check how that interacts with moving in and out of parts of the struct. E.g. if <code>r</code> <em>was</em><code> initialized and then we moved *out* of </code>r.f<code>, then we *should* report </code>r.f` as the unintialized thing.</p>",
        "id": 135615728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539271185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in the case of <code>issue-26996</code>, can you read from those fields again later? (e.g., <code>c.0</code>)</p>",
        "id": 135620472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276018
    },
    {
        "content": "<blockquote>\n<p>and not just say that <code>r.f</code> is uninitialized.</p>\n</blockquote>\n<p>agreed</p>",
        "id": 135620479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276042
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in the case of <code>issue-26996</code>, can you read from those fields again later? (e.g., <code>c.0</code>)</p>\n</blockquote>\n<p>I'll find out</p>",
        "id": 135628648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539284589
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in the case of <code>issue-26996</code>, can you read from those fields again later? (e.g., <code>c.0</code>)</p>\n</blockquote>\n<p>I'll find out</p>\n</blockquote>\n<p>Hmm. In AST-borrowck, you get a \"use of moved value <code>c.0</code></p>",
        "id": 135636202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539291860
    },
    {
        "content": "<p>but in NLL, you can read it. <span class=\"emoji emoji-1f628\" title=\"fear\">:fear:</span></p>",
        "id": 135636211,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539291870
    },
    {
        "content": "<p>So, yeah. Lets get this error landed.</p>",
        "id": 135636228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539291892
    },
    {
        "content": "<p>Well, that, or accept that some code is going to be accepted and we're just going to slowly trudge our way towards implementing <a href=\"https://github.com/rust-lang/rust/issues/54987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54987\">#54987</a></p>",
        "id": 135636270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539291946
    },
    {
        "content": "<p>Anyway I've posted updates to my PR at <a href=\"https://github.com/rust-lang/rust/issues/54941\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54941\">#54941</a></p>",
        "id": 135643600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539300975
    },
    {
        "content": "<p>I <em>still</em> haven't incorporated the <code>used_mut</code> stuff that would actually match the topic here...</p>",
        "id": 135643604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539300996
    },
    {
        "content": "<p>(I'll tackle that on Monday)</p>",
        "id": 135643607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301010
    },
    {
        "content": "<p>but in the meantime, it might be a good idea for us to double-check whether we are vaguely okay with the changes to the diagnostics that have resulted from my implementation strategy</p>",
        "id": 135643617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301043
    },
    {
        "content": "<p>namely, when I report the move error, I now pass along <em>two</em> places: the used_place, and a moved_place. (Where moved_place should always be a prefix of used_place, though of course it may be a trivial prefix where the two are actually the same place)</p>",
        "id": 135643670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301107
    },
    {
        "content": "<p>And then the diagnostic distuinguishes in its report when its talking about what was moved vs what was used</p>",
        "id": 135643682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301150
    },
    {
        "content": "<p>(I didn't actually update the diagnostic text very well to reflect this change. But you can see an example of the phenomenon by looking at the places reported for a case like this: <a href=\"https://github.com/rust-lang/rust/commit/8843c083f69864b63f0de7fa317ecffa09951797#diff-5deea307db35b1f117045b9ea609beac\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/8843c083f69864b63f0de7fa317ecffa09951797#diff-5deea307db35b1f117045b9ea609beac\">https://github.com/rust-lang/rust/commit/8843c083f69864b63f0de7fa317ecffa09951797#diff-5deea307db35b1f117045b9ea609beac</a> )</p>",
        "id": 135643762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301313
    },
    {
        "content": "<p>having said that, i'm going to bed.</p>",
        "id": 135643808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539301351
    }
]