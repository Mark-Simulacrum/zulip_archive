[
    {
        "content": "<p>I finished updating the statistics PR to output a CSV file, is <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/21\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/21\">this</a> more what you had in mind <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ? (I would like to add a test before merging, using tempdir/tempfile for example)</p>",
        "id": 154766656,
        "sender_full_name": "lqd",
        "timestamp": 1547076767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> looks about right, yep!</p>",
        "id": 154854044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547139575
    },
    {
        "content": "<p>re: your comment; yeah it will dump the stats as it goes. We talked about maybe keeping the stats in memory and printing the CSV after the computation is done (maybe when the iteration is dropped), and we can switch to this model if you want ? It seems nice but probably more valuable in different cases than this one: say, when the collecting/collating is performance intensive or the stats are more complicated -- whereas here it's just dumping the data and it didn't seem extremely necessary.</p>",
        "id": 154855670,
        "sender_full_name": "lqd",
        "timestamp": 1547140732
    },
    {
        "content": "<p>But at the same time, I'd still like to collect timing stats per variable (the duration the different operators took; if needed, under a feature flag) and this will require the other model, so maybe I should do it now ?</p>",
        "id": 154855686,
        "sender_full_name": "lqd",
        "timestamp": 1547140744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm not sure that collecting \"in memory\" is particularly useful. I think this approach you outlined looks good as a start to me. Timing information might be useful too but that'll be a bit trickier I guess</p>",
        "id": 154864289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148215
    },
    {
        "content": "<p>I'd be game to land the PR as is</p>",
        "id": 154864421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148322
    },
    {
        "content": "<p>alright thanks, do we want to try and add a little test to this ? (I did once add some timing by threading Durations around Relations, that seemed to work ok I guess)</p>",
        "id": 154864451,
        "sender_full_name": "lqd",
        "timestamp": 1547148363
    },
    {
        "content": "<p>(disclaimer, I don't know this code) Aren't these compatible outcomes? Have a </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Stats</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">begin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">log_one</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And implement it 2x:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Stats</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Immediate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">log_one</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Stats</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Rollup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">log_one</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* final compute and print */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154882897,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165519
    },
    {
        "content": "<p>oh yeah, not really incompatible per se, it was mostly a question of whether it was useful to have both or the rollup at all</p>",
        "id": 154900451,
        "sender_full_name": "lqd",
        "timestamp": 1547193174
    }
]