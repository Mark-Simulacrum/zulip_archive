[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is <a href=\"https://github.com/lqd/rust/commit/30592b35b1c35429418b7965c2eabc5b2ae904aa\" target=\"_blank\" title=\"https://github.com/lqd/rust/commit/30592b35b1c35429418b7965c2eabc5b2ae904aa\">this</a> what you had in mind for the <a href=\"https://github.com/rust-lang/rust/issues/53695\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53695\">#53695</a> experiment ? if so, out of the 6693 NLL ui tests my build ran, 7 failed (as it impacts the diagnostics showing where the borrow is used later).</p>",
        "id": 133798056,
        "sender_full_name": "lqd",
        "timestamp": 1536758495
    },
    {
        "content": "<p>yes that looks right</p>",
        "id": 133798127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758547
    },
    {
        "content": "<p>Is there an easy way for you to share the changes to the diagnostics? Maybe <code>--bless</code> and then diff?</p>",
        "id": 133798140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758568
    },
    {
        "content": "<p>of course the thing we are probably more concerned about is run-pass failures</p>",
        "id": 133798171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758604
    },
    {
        "content": "<p>yeah I'll gather this now</p>",
        "id": 133798173,
        "sender_full_name": "lqd",
        "timestamp": 1536758605
    },
    {
        "content": "<p>I got the impression that you'd expect more diagnostics because this would cause things that previously wouldn't error until used to error straight away.</p>",
        "id": 133798176,
        "sender_full_name": "davidtwco",
        "timestamp": 1536758612
    },
    {
        "content": "<p>i.e. places where the injected read causes a previous working test to start failling</p>",
        "id": 133798177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758615
    },
    {
        "content": "<p>I can run the run-pass tests without having to go through the UI tests first I assume ?</p>",
        "id": 133798222,
        "sender_full_name": "lqd",
        "timestamp": 1536758644
    },
    {
        "content": "<p>If you want to do a run that focuses just on run-pass, I think you do <code>--mode=run-pass</code> to compiletest</p>",
        "id": 133798230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758655
    },
    {
        "content": "<p>I'd normally do <code>x.py test src/test/run-pass</code> or with the migrated run-pass tests <code>x.py test src/test/ui --test-args run-pass</code>.</p>",
        "id": 133798251,
        "sender_full_name": "davidtwco",
        "timestamp": 1536758685
    },
    {
        "content": "<p>(I'm actually poking at that code now as part of <a href=\"https://github.com/rust-lang/rust/issues/54047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54047\">#54047</a></p>",
        "id": 133798264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758702
    },
    {
        "content": "<p>ok thank you both, I'll gather more data and report back</p>",
        "id": 133798277,
        "sender_full_name": "lqd",
        "timestamp": 1536758715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> the suggestion from <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is probably good too.</p>",
        "id": 133798291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758754
    },
    {
        "content": "<p>if one just did <code>x.py test run-pass</code>, would that check every path that matches <code>.*run-pass.*</code> ?</p>",
        "id": 133798356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536758795
    },
    {
        "content": "<p>yeah I'll try David's suggestion!</p>",
        "id": 133798374,
        "sender_full_name": "lqd",
        "timestamp": 1536758828
    },
    {
        "content": "<p>If I'm not mistaken, it wouldn't. I think that it matches against <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L751-L756\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L751-L756\">these paths</a> to find the right step registered in bootstrap.</p>",
        "id": 133798486,
        "sender_full_name": "davidtwco",
        "timestamp": 1536758927
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\" target=\"_blank\" title=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\">ui-tests.diff</a></p>",
        "id": 133798621,
        "sender_full_name": "lqd",
        "timestamp": 1536759066
    },
    {
        "content": "<p>then half of the mir-opt tests failed, and I'll try the run-pass now</p>",
        "id": 133798643,
        "sender_full_name": "lqd",
        "timestamp": 1536759099
    },
    {
        "content": "<p>IIRC mir-opt just compares the MIR to make sure it generates what is expected - so adding a new statement would make me expect those to fail.</p>",
        "id": 133798720,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759137
    },
    {
        "content": "<p>yeah same</p>",
        "id": 133798726,
        "sender_full_name": "lqd",
        "timestamp": 1536759144
    },
    {
        "content": "<p>would it be easier if we saw these on Travis ? that is, if I make a PR, would the builds stop at the ui tests failures or could we see the whole picture of the fallout ?</p>",
        "id": 133798773,
        "sender_full_name": "lqd",
        "timestamp": 1536759195
    },
    {
        "content": "<p>It stops after one suite fails.</p>",
        "id": 133798789,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759210
    },
    {
        "content": "<p>alright :)</p>",
        "id": 133798805,
        "sender_full_name": "lqd",
        "timestamp": 1536759229
    },
    {
        "content": "<p>You can run <code>x.py test --no-fail-fast</code> locally and it'll just go through all of the suites.</p>",
        "id": 133798816,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> how do you clear the cache so tests are not ignored when reran btw ?</p>",
        "id": 133798923,
        "sender_full_name": "lqd",
        "timestamp": 1536759329
    },
    {
        "content": "<p>(I want to check the previous --bless didn't impact the run-pass)</p>",
        "id": 133798939,
        "sender_full_name": "lqd",
        "timestamp": 1536759356
    },
    {
        "content": "<p><code>rm -r build/x86_64-unknown-linux-gnu/test</code> (replace that with a similar path for whatever target you're testing against)</p>",
        "id": 133798985,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759367
    },
    {
        "content": "<p>It's something like that.</p>",
        "id": 133798996,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759376
    },
    {
        "content": "<p>I think its <code>build/$TARGET-$HOSTOS/test/</code></p>",
        "id": 133799008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536759390
    },
    {
        "content": "<p>I wrote it once and have CTRL+R'd since.</p>",
        "id": 133799044,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759435
    },
    {
        "content": "<p>(sorry if this question doesn't make sense) do we need to do something so that the run-pass is ran in nll mode ?</p>",
        "id": 133799176,
        "sender_full_name": "lqd",
        "timestamp": 1536759573
    },
    {
        "content": "<p>(if it doesn't make sense and NLL tests are in there as well: there are no failures)</p>",
        "id": 133799256,
        "sender_full_name": "lqd",
        "timestamp": 1536759616
    },
    {
        "content": "<p>UI runs once with the default compare-mode and then again with the NLL compare-mode.</p>",
        "id": 133799273,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759633
    },
    {
        "content": "<p>yeah but the run-pass doesn't, right ?</p>",
        "id": 133799292,
        "sender_full_name": "lqd",
        "timestamp": 1536759652
    },
    {
        "content": "<p>There are some tests that have <code>#![features(nll)]</code> and run on NLL regardless. But then on the compare-mode NLL run, every test is compiled (and run) with that.</p>",
        "id": 133799320,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759682
    },
    {
        "content": "<p>Oh, those in the <code>run-pass</code> suite. No.</p>",
        "id": 133799328,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759689
    },
    {
        "content": "<p>Only those in the <code>run-pass</code> suite that are specifically annotated with NLL will run with NLL.</p>",
        "id": 133799345,
        "sender_full_name": "davidtwco",
        "timestamp": 1536759702
    },
    {
        "content": "<p>right</p>",
        "id": 133799364,
        "sender_full_name": "lqd",
        "timestamp": 1536759717
    },
    {
        "content": "<p>then however many NLL tests there are in the run-pass suite are seemingly unaffected <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 133799468,
        "sender_full_name": "lqd",
        "timestamp": 1536759816
    },
    {
        "content": "<blockquote>\n<p>yeah but the run-pass doesn't, right ?</p>\n</blockquote>\n<p>this is why  I filed and have been attempting to fix <a href=\"https://github.com/rust-lang/rust/issues/53764\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53764\">#53764</a></p>",
        "id": 133799541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536759880
    },
    {
        "content": "<p>sensible :)</p>",
        "id": 133799584,
        "sender_full_name": "lqd",
        "timestamp": 1536759934
    },
    {
        "content": "<p>You might be able to make headway by adding <code>-Z borrowck=mir -Z two-phase-borrows</code> to your <code>RUSTFLAGS</code> environment variable</p>",
        "id": 133799590,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536759950
    },
    {
        "content": "<p>let's try that</p>",
        "id": 133799662,
        "sender_full_name": "lqd",
        "timestamp": 1536759990
    },
    {
        "content": "<p>Or you could just locally test your experiment atop my PR <a href=\"https://github.com/rust-lang/rust/issues/54139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54139\">#54139</a> which migrates 99.9% of the remainder of run-pass to ui</p>",
        "id": 133799672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536760006
    },
    {
        "content": "<p>something tells me changing rustflags is going to rebuild from scratch though</p>",
        "id": 133799718,
        "sender_full_name": "lqd",
        "timestamp": 1536760068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yup :/ maybe it should be one of the other rustflags ?</p>",
        "id": 133800014,
        "sender_full_name": "lqd",
        "timestamp": 1536760323
    },
    {
        "content": "<p>are you using <code>x.py</code>, or are you running <code>compiletest</code> directly?</p>",
        "id": 133800072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536760354
    },
    {
        "content": "<p>x.py</p>",
        "id": 133800113,
        "sender_full_name": "lqd",
        "timestamp": 1536760405
    },
    {
        "content": "<p>david's line to be precise</p>",
        "id": 133800120,
        "sender_full_name": "lqd",
        "timestamp": 1536760415
    },
    {
        "content": "<p>what I would do is pass <code>--verbose</code> to <code>x.py test</code> to see how its invoking <code>compiletest</code> to do the <code>run-pass</code> test suite, and then run <code>compiletest</code> directly with <code>RUST_FLAGS</code></p>",
        "id": 133800121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536760415
    },
    {
        "content": "<p>that should (I hope) avoid the rebuild issue</p>",
        "id": 133800129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536760428
    },
    {
        "content": "<p>though if its already rebuilding, this advice is coming too late?</p>",
        "id": 133800139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536760440
    },
    {
        "content": "<p>yeah I'll try that as soon as it's done rebuilding :)</p>",
        "id": 133800190,
        "sender_full_name": "lqd",
        "timestamp": 1536760461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I added nll flags wherever I could, the env var, in compiletest's host-rustcflags and target-rustcflags: <a href=\"https://gist.githubusercontent.com/lqd/e7c3affd2fb9eb114ffd7a6eeaf684aa/raw/2dc03214aa42ef78c9ebc7fdb817ea881d84e907/nll-run-pass.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/lqd/e7c3affd2fb9eb114ffd7a6eeaf684aa/raw/2dc03214aa42ef78c9ebc7fdb817ea881d84e907/nll-run-pass.txt\">results</a></p>",
        "id": 133802812,
        "sender_full_name": "lqd",
        "timestamp": 1536762942
    },
    {
        "content": "<p>okay that's good. And you already shared the <code>ui/</code> results (because it looks like your build host is one where the PRs to move a lot of <code>run-pass</code> to <code>ui/</code> have landed)</p>",
        "id": 133802917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763024
    },
    {
        "content": "<p>yes?</p>",
        "id": 133802924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763028
    },
    {
        "content": "<p>/me goes to look at the <a href=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\" target=\"_blank\" title=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\">diff</a> (of ui results)</p>",
        "id": 133802947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763058
    },
    {
        "content": "<p>yes, it's this morning's master</p>",
        "id": 133803035,
        "sender_full_name": "lqd",
        "timestamp": 1536763125
    },
    {
        "content": "<p>ugh these diagnostic changes look like they will hurt us</p>",
        "id": 133803062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763165
    },
    {
        "content": "<p>we should figure out a way to ignore this fake read in terms of how we report the diagnostics</p>",
        "id": 133803076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763183
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 133803082,
        "sender_full_name": "lqd",
        "timestamp": 1536763193
    },
    {
        "content": "<p>but still, its a pretty small number of diagnostic regressions</p>",
        "id": 133803223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763318
    },
    {
        "content": "<p>my intuition is that we should consider landing this</p>",
        "id": 133803268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763329
    },
    {
        "content": "<p>did this come up before ? either during the recent \"making plans\" (I don't think it did) or when you discussed this fix with <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> a couple weeks back IIRC ?</p>",
        "id": 133803270,
        "sender_full_name": "lqd",
        "timestamp": 1536763331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 133803272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763333
    },
    {
        "content": "<blockquote>\n<p>did this come up before ? either during the recent \"making plans\" (I don't think it did) or when you discussed this fix with <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> a couple weeks back IIRC ?</p>\n</blockquote>\n<p>\"this\" being the changes to diagnostics that result from ReadForMatch? or are you referring to something else?</p>",
        "id": 133803303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763382
    },
    {
        "content": "<p>yeah, it looks like only this diagnostics suffers, that's good, the fallout is small and can be fixed :)</p>",
        "id": 133803329,
        "sender_full_name": "lqd",
        "timestamp": 1536763407
    },
    {
        "content": "<p>yes, \"this\" being this diagnostics regression</p>",
        "id": 133803359,
        "sender_full_name": "lqd",
        "timestamp": 1536763428
    },
    {
        "content": "<p>I don't remember it coming up when we talked about \"what could possibly go wrong if we add a fake read\" then</p>",
        "id": 133803419,
        "sender_full_name": "lqd",
        "timestamp": 1536763466
    },
    {
        "content": "<p>(esp, how we'd fix it, if it did come up)</p>",
        "id": 133803445,
        "sender_full_name": "lqd",
        "timestamp": 1536763499
    },
    {
        "content": "<p>its possible I'm wrong and this diagnostic will be an \"improvement\"</p>",
        "id": 133803677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763718
    },
    {
        "content": "<p>or at least bring us closer to what AST-borrowck reported in such cases</p>",
        "id": 133803681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536763729
    },
    {
        "content": "<blockquote>\n<p>its possible I'm wrong and this diagnostic will be an \"improvement\"</p>\n</blockquote>\n<p>surely not this <em>modified</em> diagnostic ?</p>",
        "id": 133807937,
        "sender_full_name": "lqd",
        "timestamp": 1536767565
    },
    {
        "content": "<p>It could be if the original diagnostic was misleading.</p>",
        "id": 133807966,
        "sender_full_name": "davidtwco",
        "timestamp": 1536767619
    },
    {
        "content": "<p>(because we weren't doing a fake read earlier)</p>",
        "id": 133807977,
        "sender_full_name": "davidtwco",
        "timestamp": 1536767637
    },
    {
        "content": "<p>yeah but this diagnostic only shows up when there is a real read, and shows where that read happens (which ofc in this case is changed by the fake read)</p>",
        "id": 133808084,
        "sender_full_name": "lqd",
        "timestamp": 1536767738
    },
    {
        "content": "<p>but yeah at least it's an interesting thought</p>",
        "id": 133808163,
        "sender_full_name": "lqd",
        "timestamp": 1536767780
    },
    {
        "content": "<p>and we can probably have both the compile error in this case, and the correct diagnostic in all other cases</p>",
        "id": 133808187,
        "sender_full_name": "lqd",
        "timestamp": 1536767815
    },
    {
        "content": "<p>interesting</p>",
        "id": 133809412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536768893
    },
    {
        "content": "<p>I think fixing the diagnostics shouldn't be too hard</p>",
        "id": 133809414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536768897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would I need add the fake <code>ReadForMatch </code> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L308\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/matches/mod.rs#L308\">around here</a> as well ? (this is new from your ascription support PR)</p>",
        "id": 133812783,
        "sender_full_name": "lqd",
        "timestamp": 1536772255
    },
    {
        "content": "<p>yep</p>",
        "id": 133812792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536772267
    },
    {
        "content": "<p>will do</p>",
        "id": 133812801,
        "sender_full_name": "lqd",
        "timestamp": 1536772286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if we wanted to keep these fake reads, how do you think we should fix the diagnostic regression they produce ?</p>",
        "id": 133883015,
        "sender_full_name": "lqd",
        "timestamp": 1536844199
    },
    {
        "content": "<p>I'm not sure we should worry about \"fixing\" it...</p>",
        "id": 133883133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536844282
    },
    {
        "content": "<p>the scenario where this arises is pretty limited</p>",
        "id": 133883143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536844294
    },
    {
        "content": "<p>and in some ways the new diagnostic just points out the core of the problem: if you want to store something in a local, it should not have dangling references to temporaries from the stack that was formed during evaluation of its initializer expression.</p>",
        "id": 133883210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536844341
    },
    {
        "content": "<p>do you think we should then bless the 6-7 tests diffs ?</p>",
        "id": 133883217,
        "sender_full_name": "lqd",
        "timestamp": 1536844350
    },
    {
        "content": "<p>yeah I'm now on the side of blessing them, I think</p>",
        "id": 133883227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536844361
    },
    {
        "content": "<p>interesting</p>",
        "id": 133883236,
        "sender_full_name": "lqd",
        "timestamp": 1536844370
    },
    {
        "content": "<p>might be good to double check with other members of <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span></p>",
        "id": 133883244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536844381
    },
    {
        "content": "<p>agreed</p>",
        "id": 133883250,
        "sender_full_name": "lqd",
        "timestamp": 1536844388
    },
    {
        "content": "<p>for convenience, the diagnostic differences are <a href=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\" target=\"_blank\" title=\"https://gist.github.com/lqd/2d9b8d72de483de8d0a877f08d113f4d\">here</a></p>",
        "id": 133883384,
        "sender_full_name": "lqd",
        "timestamp": 1536844540
    },
    {
        "content": "<p>hmm, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, I'd probably be ok with blessing them, but I think it <em>may</em> be fairly easy to improve them</p>",
        "id": 133886396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847286
    },
    {
        "content": "<p>(where is the PR?)</p>",
        "id": 133886443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847319
    },
    {
        "content": "<p>oh, there isn't one?</p>",
        "id": 133886490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536847331
    },
    {
        "content": "<p>not yet, as I thought we'd fix the regressions first ?</p>",
        "id": 133886506,
        "sender_full_name": "lqd",
        "timestamp": 1536847348
    },
    {
        "content": "<p>the <em>diagnostics</em> regressions that is</p>",
        "id": 133886517,
        "sender_full_name": "lqd",
        "timestamp": 1536847367
    },
    {
        "content": "<p>but if everyone wants to bless these diffs I can make a PR soon</p>",
        "id": 133886662,
        "sender_full_name": "lqd",
        "timestamp": 1536847484
    },
    {
        "content": "<p>I always prefer to have a PR</p>",
        "id": 133887879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848412
    },
    {
        "content": "<p>feel free to mark it as <code>[WIP]</code></p>",
        "id": 133887884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848417
    },
    {
        "content": "<p>but it makes the workflow easier</p>",
        "id": 133887889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848421
    },
    {
        "content": "<blockquote>\n<p>feel free to mark it as <code>[WIP]</code></p>\n</blockquote>\n<p>(in that case, bors won't land it)</p>",
        "id": 133887908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848433
    },
    {
        "content": "<p>by this I mean: even if we <em>don't</em> bless the regressions, I'd prefer to have a PR</p>",
        "id": 133887916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848446
    },
    {
        "content": "<p>so I can see the diffs, make comments, etc</p>",
        "id": 133887927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848450
    },
    {
        "content": "<p>actually my preferred workflow is this:</p>\n<p>Always run the tests with <code>--bless</code>, so we can easily see the diffs</p>",
        "id": 133887942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848463
    },
    {
        "content": "<p>then we can separately decide whether to land it in that state or not :)</p>",
        "id": 133887965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536848481
    },
    {
        "content": "<p>:) ok I'll push the type ascription commit + the blessed tests to my branch and make a PR then</p>",
        "id": 133888218,
        "sender_full_name": "lqd",
        "timestamp": 1536848645
    },
    {
        "content": "<p>cool :)</p>",
        "id": 133889525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536849705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> we mentioned the mir-opt suite yesterday, do you know how to update them ? --bless doesn't seem to do so</p>",
        "id": 133890107,
        "sender_full_name": "lqd",
        "timestamp": 1536850198
    },
    {
        "content": "<p>I think I've had to do it once. I think I just wrote an extra line until it passed.</p>",
        "id": 133890227,
        "sender_full_name": "davidtwco",
        "timestamp": 1536850280
    },
    {
        "content": "<p>oh</p>",
        "id": 133890370,
        "sender_full_name": "lqd",
        "timestamp": 1536850417
    },
    {
        "content": "<p>alright thank you</p>",
        "id": 133890375,
        "sender_full_name": "lqd",
        "timestamp": 1536850422
    },
    {
        "content": "<p>since they all fail now I was wondering if there was an expected way to fix those, or at least not deal with them until we have to, when the PR is finished</p>",
        "id": 133890500,
        "sender_full_name": "lqd",
        "timestamp": 1536850521
    },
    {
        "content": "<p>I guess it'll just fail on Travis, but at least I'd have wanted to see if these were the only ones failing now, I don't know how close to the end of the tests these are run by x.py test</p>",
        "id": 133890650,
        "sender_full_name": "lqd",
        "timestamp": 1536850598
    },
    {
        "content": "<blockquote>\n<p>since they all fail now I was wondering if there was an expected way to fix those, or at least not deal with them until we have to, when the PR is finished</p>\n</blockquote>\n<p>you have to edit them by hand to make the \"expected\" match the actual</p>",
        "id": 133891063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850971
    },
    {
        "content": "<p>plausibly we should remove them</p>",
        "id": 133891068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850979
    },
    {
        "content": "<p>they are annoying</p>",
        "id": 133891070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850980
    },
    {
        "content": "<p>and/or port them to ui tests</p>",
        "id": 133891081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850987
    },
    {
        "content": "<p>they were good when we were just bootstrapping but we have better a test suite  now</p>",
        "id": 133891085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850998
    },
    {
        "content": "<p>(I mean the NLL ones specifically)</p>",
        "id": 133891086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536851003
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/54188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54188\">https://github.com/rust-lang/rust/pull/54188</a> for discussion, so it's very WIP, but here goes nothing</p>",
        "id": 133892903,
        "sender_full_name": "lqd",
        "timestamp": 1536852192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I left a comment.  I think that if we <em>want</em> to identify this case and give a custom error, it would be relatively easy to do so.</p>",
        "id": 133958924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937637
    },
    {
        "content": "<p>I think the current error is not <em>that</em> bad</p>",
        "id": 133958930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937643
    },
    {
        "content": "<p>so maybe it's fine as is</p>",
        "id": 133958962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what would ideally want ?</p>",
        "id": 133958976,
        "sender_full_name": "lqd",
        "timestamp": 1536937682
    },
    {
        "content": "<p>I left a suggestion in the issue but that's I think a key question :)</p>",
        "id": 133959021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937691
    },
    {
        "content": "<p>I can do what is suggested in the issue</p>",
        "id": 133959046,
        "sender_full_name": "lqd",
        "timestamp": 1536937712
    },
    {
        "content": "<p>actually</p>",
        "id": 133959066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937729
    },
    {
        "content": "<p>maybe just this?</p>",
        "id": 133959068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937732
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0597]: `pointer` does not live long enough\n  --&gt; $DIR/wf-method-late-bound-regions.rs:30:18\n   |\nLL |     let dangling = {\n   |         -------- borrow later stored here\nLL |         let pointer = Box::new(42);\nLL |         f2.xmute(&amp;pointer)\n   |                  ^^^^^^^^ borrowed value does not live long enough\nLL |     };\n   | - `pointer` dropped here while still borrowed\n</pre></div>",
        "id": 133959076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937737
    },
    {
        "content": "<p>that is, \"borrow later stored here\" and not \"borrow later used here\"?</p>",
        "id": 133959091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937747
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 133959122,
        "sender_full_name": "lqd",
        "timestamp": 1536937778
    },
    {
        "content": "<p>next PL I invent, the destination of an imperative update is going to be on the RHS.</p>",
        "id": 133959229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536937837
    },
    {
        "content": "<p>(and its going to use <code>=:</code> as the operator!)</p>",
        "id": 133959248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536937856
    },
    {
        "content": "<p>with the <code>FakeReadCause</code> the message in the 0597 error can be adjusted easily I think ?</p>",
        "id": 133959263,
        "sender_full_name": "lqd",
        "timestamp": 1536937866
    },
    {
        "content": "<p>sounds straightforward</p>",
        "id": 133959390,
        "sender_full_name": "lqd",
        "timestamp": 1536937942
    },
    {
        "content": "<p>seems fairly easy</p>",
        "id": 133959444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536937987
    },
    {
        "content": "<p>yeah, ok I'll do that</p>",
        "id": 133959496,
        "sender_full_name": "lqd",
        "timestamp": 1536938030
    },
    {
        "content": "<p>I was wondering what kind of comment would be need at the point where we inject the fake read ?</p>",
        "id": 133959552,
        "sender_full_name": "lqd",
        "timestamp": 1536938045
    },
    {
        "content": "<p>what I have was tailored to the original experiment: \"let's see what this breaks\"</p>",
        "id": 133959573,
        "sender_full_name": "lqd",
        "timestamp": 1536938063
    },
    {
        "content": "<p>that is <a href=\"https://github.com/rust-lang/rust/pull/54188/files#diff-ef9c98f22bf95e3bda12c849d5550cedR268\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54188/files#diff-ef9c98f22bf95e3bda12c849d5550cedR268\">starting here</a></p>",
        "id": 133959636,
        "sender_full_name": "lqd",
        "timestamp": 1536938111
    },
    {
        "content": "<p>yeah, I think something like</p>",
        "id": 133960149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536938454
    },
    {
        "content": "<p>Officially, the semantics of</p>\n<div class=\"codehilite\"><pre><span></span>let pattern = &lt;expr&gt;;\n</pre></div>\n\n\n<p>is that <code>&lt;expr&gt;</code> is evaluated into a temporary and then this temporary is matched into the pattern.<br>\nHowever, if we see the simple pattern <code>let var = &lt;expr&gt;</code>, we optimize this to evaluate <code>&lt;expr&gt;</code> directly<br>\ninto the variable <code>var</code>. This is mostly unobservable, but in some cases it can affect the borrow checker,<br>\nas in <a href=\"https://github.com/rust-lang/rust/issues/53695\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53695\">#53695</a>. Therefore, we insert a \"fake read\" here to ensure that we get appropriate errors.</p>",
        "id": 133960329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536938560
    },
    {
        "content": "<p>we could put more detail, but perhaps that suffices</p>",
        "id": 133960334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536938569
    },
    {
        "content": "<p>nice</p>",
        "id": 133960534,
        "sender_full_name": "lqd",
        "timestamp": 1536938758
    },
    {
        "content": "<p>thanks niko</p>",
        "id": 133960592,
        "sender_full_name": "lqd",
        "timestamp": 1536938783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in refactoring <code>ReadForMatch</code> into <code>FakeRead</code> do I also need to rename the <code>-Z nll_dont_emit_read_for_match</code> flag ?</p>",
        "id": 133965534,
        "sender_full_name": "lqd",
        "timestamp": 1536944181
    },
    {
        "content": "<p>(I assume this user-facing flag can stay the same, only needing renaming its documentation to update the kind of statement to its new name)</p>",
        "id": 133965967,
        "sender_full_name": "lqd",
        "timestamp": 1536944692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I would not change the <code>-Z</code> flag</p>",
        "id": 133969012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536947951
    },
    {
        "content": "<p>haha Matthew's PR just landed as I was finishing this</p>",
        "id": 133973230,
        "sender_full_name": "lqd",
        "timestamp": 1536952261
    },
    {
        "content": "<p>which?</p>",
        "id": 133973940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953022
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54088\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54088\">#54088</a></p>",
        "id": 133973985,
        "sender_full_name": "lqd",
        "timestamp": 1536953044
    },
    {
        "content": "<p>just a tiny conflict no biggie :)</p>",
        "id": 133973997,
        "sender_full_name": "lqd",
        "timestamp": 1536953066
    },
    {
        "content": "<p>I'll rebase and push shortly</p>",
        "id": 133974008,
        "sender_full_name": "lqd",
        "timestamp": 1536953084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I left a few nits on the PR</p>",
        "id": 133974268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953467
    },
    {
        "content": "<p>just about where to put the comments</p>",
        "id": 133974271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've updated <a href=\"https://github.com/rust-lang/rust/issues/54188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54188\">#54188</a> to add the \"borrow later stored here\" message</p>",
        "id": 133974272,
        "sender_full_name": "lqd",
        "timestamp": 1536953471
    },
    {
        "content": "<p>looks great! <span class=\"emoji emoji-1f4af\" title=\"100\">:100:</span></p>",
        "id": 133974273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953473
    },
    {
        "content": "<p>dang you're fast</p>",
        "id": 133974277,
        "sender_full_name": "lqd",
        "timestamp": 1536953482
    },
    {
        "content": "<p>thanks for the comments, they're spot on</p>",
        "id": 133974348,
        "sender_full_name": "lqd",
        "timestamp": 1536953573
    },
    {
        "content": "<p>there is a <a href=\"https://github.com/rust-lang/rust/blob/7dc76cedc7269f02648aa4ffae5e4b360fa86d40/src/librustc_mir/build/matches/mod.rs#L148-L154\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7dc76cedc7269f02648aa4ffae5e4b360fa86d40/src/librustc_mir/build/matches/mod.rs#L148-L154\">decent comment</a> at the fake read match insertion point, do you want me to move it to FakeReadCause::ForMatch ?</p>",
        "id": 133974474,
        "sender_full_name": "lqd",
        "timestamp": 1536953754
    },
    {
        "content": "<p>I would move it in the same way</p>",
        "id": 133974558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953853
    },
    {
        "content": "<p>(tests will still fail as I still haven't updated the mir-opt suite yet, which I will try to do tomorrow as I'm 2h late for dinner ;)</p>",
        "id": 133974847,
        "sender_full_name": "lqd",
        "timestamp": 1536954187
    },
    {
        "content": "<p>(and probably why it should still stay as a WIP PR ?)</p>",
        "id": 133975214,
        "sender_full_name": "lqd",
        "timestamp": 1536954646
    },
    {
        "content": "<p>(comments moved, helper function hopefully acceptable -- I'll update the tests tomorrow though I really gotta go)</p>",
        "id": 133977144,
        "sender_full_name": "lqd",
        "timestamp": 1536956973
    },
    {
        "content": "<p>I'm unsure about <a href=\"https://github.com/rust-lang/rust/pull/54188/files#diff-0f6e0a8f7d78f19e578a987acec63115R219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54188/files#diff-0f6e0a8f7d78f19e578a987acec63115R219\">this change</a>: without checking the fake read cause, the fake reads for lets would show up in this <code>min_const_fn</code> check for a match (that matches were detected in const fn because of their fake reads was surprising but ok). Maybe these tests are run after <code>mir-opt</code>so we'll see how they go</p>",
        "id": 133985256,
        "sender_full_name": "lqd",
        "timestamp": 1536966980
    },
    {
        "content": "<p>hmm, that might want to just check for <code>FakeReadCause::ForMatch</code>...but all in all that feels a bit hokey in any case</p>",
        "id": 133988208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536971541
    },
    {
        "content": "<p>it's ok though <code>min_const_fn</code> is a bit of a hack</p>",
        "id": 133988213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536971554
    },
    {
        "content": "<p>(temporary hack)</p>",
        "id": 133988215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536971559
    },
    {
        "content": "<p>I am not sure whether <code>let x</code> was meant to be included (cc <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>?)</p>",
        "id": 133988221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536971572
    },
    {
        "content": "<p>I <em>think</em> min_const_fn was so minimal that <code>let x </code> is not included. Either way, it would make more sense to look for FakeReadCause::ForMatch so I'll do this in the mornng</p>",
        "id": 133991064,
        "sender_full_name": "lqd",
        "timestamp": 1536976664
    },
    {
        "content": "<p>Yes, <code>let</code> bindigs are forbidden. But even if you remove the fake read, you should still get a min const fn error for the switch terminator</p>",
        "id": 133998097,
        "sender_full_name": "oli",
        "timestamp": 1536990161
    },
    {
        "content": "<p>hmm the CI seems to have passed so maybe everything works</p>",
        "id": 134000777,
        "sender_full_name": "lqd",
        "timestamp": 1536996246
    },
    {
        "content": "<p>(most likely it doesn't run all the the tests that bors does, as I think ui-fulldeps fails rn — maybe not, I'm confused. It seems to have been run in Travis, while some fail locally, for reasons of help messages disappearing when proc macros panic <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span>  )</p>",
        "id": 134001099,
        "sender_full_name": "lqd",
        "timestamp": 1536996979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <a href=\"https://play.rust-lang.org/?gist=a8a4e69c7b7175a07dc0005509a00119&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=a8a4e69c7b7175a07dc0005509a00119&amp;version=nightly&amp;mode=debug&amp;edition=2015\">it seems you are correct</a>, but I would guess that this must be being enforced in some other way.</p>",
        "id": 134005869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006388
    },
    {
        "content": "<p>yeah through mir assignments IIRC</p>",
        "id": 134005890,
        "sender_full_name": "lqd",
        "timestamp": 1537006431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  in any case I'll defer to your judgment on how to proceed :) (in the meantime I'll take care of the crater run results)</p>",
        "id": 134005956,
        "sender_full_name": "lqd",
        "timestamp": 1537006482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> in that case it seems fine to leave it the way you had it.</p>",
        "id": 134006092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006661
    },
    {
        "content": "<p>I .. presume we have tests of all this stuff</p>",
        "id": 134006098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006672
    },
    {
        "content": "<p>can't remember</p>",
        "id": 134006102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006681
    },
    {
        "content": "<p>but dear me I would hope so</p>",
        "id": 134006142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006687
    },
    {
        "content": "<p>by \"this stuff\" I mean the things that are excluded by <code>min_const_fn</code></p>",
        "id": 134006148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006701
    },
    {
        "content": "<p>I remember oli and centril going back and forth on tests about this, for a while</p>",
        "id": 134006153,
        "sender_full_name": "lqd",
        "timestamp": 1537006704
    },
    {
        "content": "<p>in that case, it seems like if we want to grow, we can update the tests, and we'll find this case readily enough</p>",
        "id": 134006162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006715
    },
    {
        "content": "<p>yes, I remember that</p>",
        "id": 134006166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006723
    },
    {
        "content": "<p>and they wanted to be very conservative, and strongly validate it, so I presume we do as well</p>",
        "id": 134006167,
        "sender_full_name": "lqd",
        "timestamp": 1537006727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there anything more I can do for <a href=\"https://github.com/rust-lang/rust/issues/54188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54188\">#54188</a> ?</p>",
        "id": 134108332,
        "sender_full_name": "lqd",
        "timestamp": 1537198655
    },
    {
        "content": "<p>r+</p>",
        "id": 134108423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537198735
    },
    {
        "content": "<p>looks good to me!</p>",
        "id": 134108427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537198739
    },
    {
        "content": "<p>yay :)</p>",
        "id": 134108460,
        "sender_full_name": "lqd",
        "timestamp": 1537198791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw I've rebased <a href=\"https://github.com/rust-lang/rust/issues/54188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54188\">#54188</a></p>",
        "id": 134172287,
        "sender_full_name": "lqd",
        "timestamp": 1537283533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> thanks :)</p>",
        "id": 134173563,
        "sender_full_name": "lqd",
        "timestamp": 1537284853
    },
    {
        "content": "<p>hum, I'm not sure I understand why this linker error pops up in <a href=\"https://github.com/rust-lang/rust/pull/54188#issuecomment-422986265\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54188#issuecomment-422986265\">#54188</a> ? should I look into it in more detail <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 134294061,
        "sender_full_name": "lqd",
        "timestamp": 1537431445
    },
    {
        "content": "<p>It might be spurious; we've been having some linker issues connected to codegen-units and/or incremental compilation</p>",
        "id": 134298046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537436357
    },
    {
        "content": "<p>Also, just in case you didn't notice, this has the <code>// run-rustfix</code> attribute; so the thing being compiled when linker fails is the <code>extern-const.fixed</code></p>",
        "id": 134298131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537436456
    },
    {
        "content": "<p>(which has replaced the <code>const C: u8</code> with a <code>static C: u8;</code>.) I don't see how that could be related to your PR, unless somehow you've affected codegen for statics as well as <code>let</code>-bound variables...?</p>",
        "id": 134298151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537436521
    },
    {
        "content": "<p>I'm confused about why the codegen would only be affected after running rustfix, what does it do to statics that regular compilation and linking don't, and are thus unaffected ?</p>",
        "id": 134298687,
        "sender_full_name": "lqd",
        "timestamp": 1537437354
    },
    {
        "content": "<p>but it may very well be such a case</p>",
        "id": 134298735,
        "sender_full_name": "lqd",
        "timestamp": 1537437387
    },
    {
        "content": "<p>locally I did just have an error for the ui/duplicate/dupe-symbols-7.rs case (ui tests in compare mode) and passes successfully if I run tests again</p>",
        "id": 134298908,
        "sender_full_name": "lqd",
        "timestamp": 1537437615
    },
    {
        "content": "<p>I'll try to reproduce these rustfix cases at lunch break</p>",
        "id": 134298962,
        "sender_full_name": "lqd",
        "timestamp": 1537437715
    },
    {
        "content": "<p>(to be clearer, I would be less confused if we had zero other tests similar <code>static C: u8</code> which would also fail, before getting to the rustfixed tests :)</p>",
        "id": 134299274,
        "sender_full_name": "lqd",
        "timestamp": 1537438175
    },
    {
        "content": "<p>part of the problem is that when we get failures connected to codegen-units, they are often connected to how the code was partitioned into those units, which can mean that similar looking code can have wildly different probabilty of causing a link-time failure...</p>",
        "id": 134299951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537438997
    },
    {
        "content": "<p>yeah :/ anyway I'm just rerunning everything locally again, and then I'll focus on these specific tests</p>",
        "id": 134300102,
        "sender_full_name": "lqd",
        "timestamp": 1537439203
    },
    {
        "content": "<p>Also, I somehow was unaware of codegen-units being set to N (where N &gt; 1) by default in all modes. Which happened in PR <a href=\"https://github.com/rust-lang/rust/issues/46910\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46910\">#46910</a> (landed December 25 2017...)</p>",
        "id": 134300106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439212
    },
    {
        "content": "<p>It was probably a good thing in terms of finding codegen-units related bugs, compared to our prior mode of only turning codegen-units on for non-optimizing mode, while our test suite was running with optimization on by default...</p>",
        "id": 134300124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439271
    },
    {
        "content": "<p>But the compiler team needs to make sure to be proactive about identifying such bugs and then fixing them...</p>",
        "id": 134300170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439312
    },
    {
        "content": "<p>I'm going to cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> on your PR in the meantime, as they might have insight that I lack about how to address this</p>",
        "id": 134300184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439367
    },
    {
        "content": "<p>mixing this with \"interesting\" cases of incremental, multithreading llvm codegen, the various LTOs configurations, etc :)</p>",
        "id": 134300188,
        "sender_full_name": "lqd",
        "timestamp": 1537439388
    },
    {
        "content": "<p>in fact, I will also nominate the PR since it would be nice to discuss this during the compiler team meeting later today</p>",
        "id": 134300247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439425
    },
    {
        "content": "<p>didn't you also discuss this in the <a href=\"https://github.com/rust-lang/rust/issues/53695#issuecomment-421126482\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53695#issuecomment-421126482\">lang meeting</a> last week ?</p>",
        "id": 134300251,
        "sender_full_name": "lqd",
        "timestamp": 1537439452
    },
    {
        "content": "<p>it would be good in any case, since it's a bit low-key but has possibly impact over lots of things</p>",
        "id": 134300269,
        "sender_full_name": "lqd",
        "timestamp": 1537439505
    },
    {
        "content": "<p>We didn't discuss codegen-unit linker issues in lang meeting</p>",
        "id": 134300311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439529
    },
    {
        "content": "<p>oh understood</p>",
        "id": 134300315,
        "sender_full_name": "lqd",
        "timestamp": 1537439545
    },
    {
        "content": "<p>That is, the lang meeting was about the change to the language semantics, but I just want to talk with compiler team about the test failure you encoutered.</p>",
        "id": 134300319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537439565
    },
    {
        "content": "<p>hopefully I'll discover more about whether this is spurious or reproducible today before the meeting</p>",
        "id": 134300339,
        "sender_full_name": "lqd",
        "timestamp": 1537439609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you know how to run the rustfix test suite ? it is not <code>x.py test src/test/rustfix</code> apparently</p>",
        "id": 134300921,
        "sender_full_name": "lqd",
        "timestamp": 1537440463
    },
    {
        "content": "<p>I think you just run the <code>ui</code> tests</p>",
        "id": 134300966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440489
    },
    {
        "content": "<p>the <code>// run-rustfix</code> attribute is what is causing that <code>rustfix</code> to be run</p>",
        "id": 134300970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440506
    },
    {
        "content": "<p>but you may also be able to just cut-and-paste the <code>rustc</code> invocation that the log includes</p>",
        "id": 134300979,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440520
    },
    {
        "content": "<p>because the output from <code>rustfix</code> is actually checked into the repository</p>",
        "id": 134301007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440572
    },
    {
        "content": "<p>(part of <code>// run-rustfix</code> is comparing the output that rustfix to the checked in file)</p>",
        "id": 134301019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440595
    },
    {
        "content": "<p>So you may be able to just run this:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;/checkout/src/test/ui/extern/extern-const.fixed&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/extern/extern-const/a&quot; &quot;-Crpath&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-Z&quot; &quot;continue-parse-after-error&quot; &quot;-L&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/extern/extern-const/auxiliary&quot;\n</pre></div>\n\n\n<p>(adapted accordingly to your local machine)</p>",
        "id": 134301084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440619
    },
    {
        "content": "<p>it's run as part of the existing ui tests ?</p>",
        "id": 134301085,
        "sender_full_name": "lqd",
        "timestamp": 1537440619
    },
    {
        "content": "<p>yes i think so</p>",
        "id": 134301092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440627
    },
    {
        "content": "<p>if so, then no it's not reproducible over here :/</p>",
        "id": 134301099,
        "sender_full_name": "lqd",
        "timestamp": 1537440636
    },
    {
        "content": "<p>Yeah I'm not totally surprised to hear that</p>",
        "id": 134301104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440645
    },
    {
        "content": "<p>I don't know how deterministic our codegen-units partitioning is</p>",
        "id": 134301125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440669
    },
    {
        "content": "<p>apart from the spurious error I mentioned earlier, which went away when rerunning tests, they seem to pass</p>",
        "id": 134301127,
        "sender_full_name": "lqd",
        "timestamp": 1537440673
    },
    {
        "content": "<p>you <em>could</em> try manually pumping up the codegen units for that one test</p>",
        "id": 134301138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440683
    },
    {
        "content": "<p>(this is why I want to discuss this among the compiler team; to get feedback about whether pumping up the #codegen-units is a decent strategy to increase likelihood of such problems...)</p>",
        "id": 134301217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440739
    },
    {
        "content": "<p>agreed, this seems worthwhile to discuss :)</p>",
        "id": 134301234,
        "sender_full_name": "lqd",
        "timestamp": 1537440769
    },
    {
        "content": "<p>I've seen github comments with <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> advising others to pump up to 99 (or even 999?) codegen-units to try to replicate bugs...</p>",
        "id": 134301235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440769
    },
    {
        "content": "<p>The other Q I have is whether a retry might just work</p>",
        "id": 134301257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440793
    },
    {
        "content": "<p>or if the codegen-unit partitioning is sufficiently deterministic that we do not expect retry's to fix the problem.</p>",
        "id": 134301267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440811
    },
    {
        "content": "<p>I guess it'll be another interesting question for the meeting</p>",
        "id": 134301364,
        "sender_full_name": "lqd",
        "timestamp": 1537440894
    },
    {
        "content": "<p>even though y'all might have talked about it in the \"spurious ui tests failures\" topic in #t-compiler</p>",
        "id": 134301393,
        "sender_full_name": "lqd",
        "timestamp": 1537440935
    },
    {
        "content": "<p>Yeah I'm taking notes on them as I think of them (in the github issue)</p>",
        "id": 134301397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440941
    },
    {
        "content": "<p>well I feel like that topic is perhaps broader</p>",
        "id": 134301405,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440951
    },
    {
        "content": "<p>(but I could be wrong)</p>",
        "id": 134301407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537440958
    },
    {
        "content": "<p>running the command manually does fail reliably!</p>",
        "id": 134301533,
        "sender_full_name": "lqd",
        "timestamp": 1537441073
    },
    {
        "content": "<p>oh you've reproduced locally then?</p>",
        "id": 134301587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441093
    },
    {
        "content": "<p>that is a good sign</p>",
        "id": 134301588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441096
    },
    {
        "content": "<p>it might be using already built things though</p>",
        "id": 134301623,
        "sender_full_name": "lqd",
        "timestamp": 1537441149
    },
    {
        "content": "<p>but yeah, maybe a good sign</p>",
        "id": 134301627,
        "sender_full_name": "lqd",
        "timestamp": 1537441157
    },
    {
        "content": "<p>Yes; I had thought from what you said above that you were not seeing the linker failure locally under any scenario</p>",
        "id": 134301638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441174
    },
    {
        "content": "<p>I do not see the error running the ui tests</p>",
        "id": 134301649,
        "sender_full_name": "lqd",
        "timestamp": 1537441201
    },
    {
        "content": "<p>as you said, I tried adapting the command failing on CI to my build, and this fails</p>",
        "id": 134301715,
        "sender_full_name": "lqd",
        "timestamp": 1537441235
    },
    {
        "content": "<p>This is how <code>compiletest</code> is being invoked: </p>\n<div class=\"codehilite\"><pre><span></span>&quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest&quot; &quot;--compile-lib-path&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib&quot; &quot;--run-lib-path&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;--rustc-path&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;--src-base&quot; &quot;/checkout/src/test/ui&quot; &quot;--build-base&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui&quot; &quot;--stage-id&quot; &quot;stage2-x86_64-unknown-linux-gnu&quot; &quot;--mode&quot; &quot;ui&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;--host&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;--llvm-filecheck&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck&quot; &quot;--host-rustcflags&quot; &quot;-Crpath -Zunstable-options &quot; &quot;--target-rustcflags&quot; &quot;-Crpath -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;--docck-python&quot; &quot;/usr/bin/python2.7&quot; &quot;--lldb-python&quot; &quot;/usr/bin/python2.7&quot; &quot;--gdb&quot; &quot;/usr/bin/gdb&quot; &quot;--llvm-version&quot; &quot;8.0.0svn\\n&quot; &quot;--cc&quot; &quot;&quot; &quot;--cxx&quot; &quot;&quot; &quot;--cflags&quot; &quot;&quot; &quot;--llvm-components&quot; &quot;&quot; &quot;--llvm-cxxflags&quot; &quot;&quot; &quot;--adb-path&quot; &quot;adb&quot; &quot;--adb-test-dir&quot; &quot;/data/tmp/work&quot; &quot;--android-cross-path&quot; &quot;&quot; &quot;--color&quot; &quot;always&quot;\n</pre></div>\n\n\n<p>so you could try adapting that locally</p>",
        "id": 134301725,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441252
    },
    {
        "content": "<p>(you'd want to make sure you delete the stamp file, if any, for the test that is failing first)</p>",
        "id": 134301744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441281
    },
    {
        "content": "<p><del>it looks like the <code>x.py</code> command being run is <code>x.py check</code></del> (which ... I am not familiar with; I only use <code>x.py build</code> and <code>x.py test</code> ...)</p>",
        "id": 134301793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441325
    },
    {
        "content": "<p>And that is confusing to me, because I would have thought that <code>x.py check</code>'s running of <code>cargo check</code> would not link code ... but maybe I misunderstand the scope of <code>cargo check</code></p>",
        "id": 134301913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441475
    },
    {
        "content": "<p>oh no I'm totally wrong</p>",
        "id": 134301950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> you and me rn <a href=\"https://i.imgur.com/UaLpJOK.png\" target=\"_blank\" title=\"https://i.imgur.com/UaLpJOK.png\">https://i.imgur.com/UaLpJOK.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/UaLpJOK.png\" target=\"_blank\" title=\"https://i.imgur.com/UaLpJOK.png\"><img src=\"https://i.imgur.com/UaLpJOK.png\"></a></div>",
        "id": 134301958,
        "sender_full_name": "lqd",
        "timestamp": 1537441555
    },
    {
        "content": "<p>it is using <code>x.py test</code>; its the <em>Makefile</em> target that is named <code>check</code></p>",
        "id": 134301960,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537441557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I remove the built tests, run ./x.py test for that test, it passes, run the command which failed on CI, it fails, <a href=\"https://gist.github.com/lqd/f204d50a61b8753e3a9c2238b4d9d039\" target=\"_blank\" title=\"https://gist.github.com/lqd/f204d50a61b8753e3a9c2238b4d9d039\">log</a></p>",
        "id": 134302689,
        "sender_full_name": "lqd",
        "timestamp": 1537442398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> okay. Out of curiosity, did you try running the <code>compiletest</code> invocation I posted?</p>",
        "id": 134302746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442430
    },
    {
        "content": "<p>(admittedly it would probably be a pain to adapt to your local system)</p>",
        "id": 134302751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442441
    },
    {
        "content": "<p>anyway, the fact that you can replicate the failure via the command should serve well enough to track this down</p>",
        "id": 134302763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442461
    },
    {
        "content": "<p>is that what is output at the end of a x.py test failure ?</p>",
        "id": 134302764,
        "sender_full_name": "lqd",
        "timestamp": 1537442463
    },
    {
        "content": "<p>Yes it is part of that output I believe</p>",
        "id": 134302770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442477
    },
    {
        "content": "<p>I was just cut-and-pasting it out of the raw Travis log</p>",
        "id": 134302777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442492
    },
    {
        "content": "<p>I did, but I'll retry if you want; do you want me to try after removing the built tests or not ?</p>",
        "id": 134302780,
        "sender_full_name": "lqd",
        "timestamp": 1537442505
    },
    {
        "content": "<p>You will need to remove the stamp files</p>",
        "id": 134302784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442514
    },
    {
        "content": "<p>I don't know if you need to remove the built object code</p>",
        "id": 134302811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442522
    },
    {
        "content": "<p>Sorry</p>",
        "id": 134302823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442525
    },
    {
        "content": "<p>And its not a big deal</p>",
        "id": 134302827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442531
    },
    {
        "content": "<p>Oh sorry, if you already tried <code>compiletest</code> then maybe  don't bother</p>",
        "id": 134302830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442546
    },
    {
        "content": "<p>I was just curious</p>",
        "id": 134302833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442551
    },
    {
        "content": "<p>it looked like what ./x.py test does naturally</p>",
        "id": 134302840,
        "sender_full_name": "lqd",
        "timestamp": 1537442567
    },
    {
        "content": "<p>sure</p>",
        "id": 134302841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442571
    },
    {
        "content": "<p>just trying to gather data</p>",
        "id": 134302849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442580
    },
    {
        "content": "<p>which ignored this test, as it didn't fail</p>",
        "id": 134302853,
        "sender_full_name": "lqd",
        "timestamp": 1537442584
    },
    {
        "content": "<p>sure</p>",
        "id": 134302855,
        "sender_full_name": "lqd",
        "timestamp": 1537442585
    },
    {
        "content": "<p>since you <em>do</em> see the problem when you run the command ...</p>",
        "id": 134302865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442600
    },
    {
        "content": "<p>wait, you say it ignored this test</p>",
        "id": 134302867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442605
    },
    {
        "content": "<p>yeah it's mind boggling</p>",
        "id": 134302868,
        "sender_full_name": "lqd",
        "timestamp": 1537442608
    },
    {
        "content": "<p>as in, it wasn't tested at all? That makes it sound like you <em>do</em> have stamp files lying around?</p>",
        "id": 134302875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442629
    },
    {
        "content": "<p>You could try running <code>touch</code> on the input <code>.rs</code> file for this test</p>",
        "id": 134302927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442666
    },
    {
        "content": "<p>if you don't want to bother with trying to track down the stamp files</p>",
        "id": 134302933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442674
    },
    {
        "content": "<p>I'm nuking the whole tests to try the compiletest command again</p>",
        "id": 134302955,
        "sender_full_name": "lqd",
        "timestamp": 1537442711
    },
    {
        "content": "<p>it'll take a while, and I won't know if this specific test was ignored or not</p>",
        "id": 134302964,
        "sender_full_name": "lqd",
        "timestamp": 1537442737
    },
    {
        "content": "<p>but I do consistently get similar linker errors, but not on that test, and rerunning makes these errors go away</p>",
        "id": 134303009,
        "sender_full_name": "lqd",
        "timestamp": 1537442772
    },
    {
        "content": "<p>yeah, that's a problem with the current output</p>",
        "id": 134303011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442777
    },
    {
        "content": "<p>we used to print out every test name as we ran</p>",
        "id": 134303013,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442784
    },
    {
        "content": "<p>obviously the newer output is nicer for the common case when you don't care about the test names as you run</p>",
        "id": 134303017,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442799
    },
    {
        "content": "<p>CI does that so maybe we can still have this info ?</p>",
        "id": 134303021,
        "sender_full_name": "lqd",
        "timestamp": 1537442805
    },
    {
        "content": "<p>but I would like to know if there's a way to get back the prior behavior...</p>",
        "id": 134303023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442810
    },
    {
        "content": "<p>hmm good point</p>",
        "id": 134303025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442818
    },
    {
        "content": "<p>Bet you its this <code>[00:01:44] configure: rust.verbose-tests   := True</code></p>",
        "id": 134303138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537442995
    },
    {
        "content": "<p>oh</p>",
        "id": 134303198,
        "sender_full_name": "lqd",
        "timestamp": 1537443016
    },
    {
        "content": "<p>I'll try to flip this switch in config.toml</p>",
        "id": 134303223,
        "sender_full_name": "lqd",
        "timestamp": 1537443069
    },
    {
        "content": "<p>(flipping the switch works, rerunning the ui tests and then the compiletest command directly)</p>",
        "id": 134303503,
        "sender_full_name": "lqd",
        "timestamp": 1537443416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> update: 1) rerunning x.py test to build the tests correctly with the verbose-tests option and to get the compiletest command in case of failure: I made sure the test failing the PR ran (<code>test [ui] ui/extern/extern-const.rs ... ok</code>)  2) I also later had an <a href=\"https://gist.github.com/lqd/4b9bed44ce52c6eb7329f2017ccec7c6\" target=\"_blank\" title=\"https://gist.github.com/lqd/4b9bed44ce52c6eb7329f2017ccec7c6\">ICE</a>  3) the ICE disappeared when rerunning the compiletest command, <code>test [ui] ui/run-pass/rfcs/rfc-2126-extern-absolute-paths/test.rs ... ok</code> 4) then I removed the tests and reran the compiletest command and the ui suite passed (including <code>test [ui] ui/extern/extern-const.rs ... ok</code>)</p>",
        "id": 134304683,
        "sender_full_name": "lqd",
        "timestamp": 1537444821
    },
    {
        "content": "<p>6) I reran our previous command failing CI, which I can only hope would be valid after compiling and running the ui tests (that is, not missing various .a files or whatever it needs), and it failed with the undefined reference to C</p>",
        "id": 134304809,
        "sender_full_name": "lqd",
        "timestamp": 1537444962
    },
    {
        "content": "<p>I don't know what is going anymore :)</p>",
        "id": 134304949,
        "sender_full_name": "lqd",
        "timestamp": 1537445087
    },
    {
        "content": "<p>the command uses -L ./build/x86_64-unknown-linux-gnu/test/ui/extern/extern-const/auxiliary which doesn't exist in my build</p>",
        "id": 134305071,
        "sender_full_name": "lqd",
        "timestamp": 1537445220
    },
    {
        "content": "<p>maybe it's at a different place here, I'll try and look for that</p>",
        "id": 134305163,
        "sender_full_name": "lqd",
        "timestamp": 1537445311
    },
    {
        "content": "<p>Well don't look <em>too</em> hard</p>",
        "id": 134305476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537445726
    },
    {
        "content": "<p>I think compiletest unconditionally adds that <code>-L</code> options</p>",
        "id": 134305487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537445739
    },
    {
        "content": "<p>to increase the linker's search paths</p>",
        "id": 134305490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537445748
    },
    {
        "content": "<p>but my understanding is that <code>-L &lt;dir&gt;</code> has no effect if <code>&lt;dir&gt;</code> does not exist...</p>",
        "id": 134305537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537445772
    },
    {
        "content": "<p>yeah I feel like this test might not need the auxiliary folder some other tests need</p>",
        "id": 134305570,
        "sender_full_name": "lqd",
        "timestamp": 1537445837
    },
    {
        "content": "<p>also the CI has an './obj' dir that we don't, locally it seems everything is in './build'</p>",
        "id": 134305637,
        "sender_full_name": "lqd",
        "timestamp": 1537445914
    },
    {
        "content": "<p>or maybe obj has noting to do with .o and .a and it's just the rust checkout</p>",
        "id": 134305707,
        "sender_full_name": "lqd",
        "timestamp": 1537446003
    },
    {
        "content": "<p>my guess is that they go into <code>/checkout/obj</code> before they run any <code>x.py</code> command</p>",
        "id": 134305727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446026
    },
    {
        "content": "<p>or at least, that matches my own work flow</p>",
        "id": 134305733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446032
    },
    {
        "content": "<p>oh ok, not my own but maybe I should lol</p>",
        "id": 134305747,
        "sender_full_name": "lqd",
        "timestamp": 1537446065
    },
    {
        "content": "<p>(i.e., I don't run <code>x.py</code> at the root directory of the <code>rust.git</code> checkout. I keep it isolated.)</p>",
        "id": 134305750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446069
    },
    {
        "content": "<p>but I'm not the normal case here; I think most people do it like you describe</p>",
        "id": 134305754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446082
    },
    {
        "content": "<p>(I believe that's <em>why</em> <del>they</del> \"we\" started generating output into a <code>build</code> subdirectory rather than the current working directory)</p>",
        "id": 134305762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446100
    },
    {
        "content": "<p>yeah it seems you're right, they have checkout/src and checkout/obj/build</p>",
        "id": 134305764,
        "sender_full_name": "lqd",
        "timestamp": 1537446108
    },
    {
        "content": "<p>the maybe I didn't adapt the command to my local build correctly, I just changed every /obj/build into ./build</p>",
        "id": 134305920,
        "sender_full_name": "lqd",
        "timestamp": 1537446260
    },
    {
        "content": "<p>that sounds like it should work, as long as you did it across the board</p>",
        "id": 134305931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446284
    },
    {
        "content": "<p>So based on the conversation so far, I take it we have two questions:</p>",
        "id": 134305943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446310
    },
    {
        "content": "<p>1. Why is the <code>rustc</code> invocation on the .checked file causing a linker failure. This is the thing you were able to replicate locally</p>",
        "id": 134305955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446338
    },
    {
        "content": "<p>2. Why aren't you seeing the linker failure when you run <code>x.py test</code> locally, even though you were able to replicate 1. I.e. how can it be that your test run isn't hitting the same steps that Travis does?</p>",
        "id": 134306008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446378
    },
    {
        "content": "<p>Okay. And right now you are focusing on question 2</p>",
        "id": 134306010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446402
    },
    {
        "content": "<p>Which is fine as long as you care about the question.</p>",
        "id": 134306014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446417
    },
    {
        "content": "<p>(the other random linking and ICE errors unrelated to this test also disappear when rerunning ./x.py test)</p>",
        "id": 134306026,
        "sender_full_name": "lqd",
        "timestamp": 1537446437
    },
    {
        "content": "<p>(It is certainly a good question, since it might be a symptom of something wrong with your testing work flow)</p>",
        "id": 134306028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446438
    },
    {
        "content": "<p>Right, we definitely have a number of linking and ICEs that disappear mysteriously on re-run</p>",
        "id": 134306040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm really confused about this test</p>",
        "id": 134306210,
        "sender_full_name": "lqd",
        "timestamp": 1537446668
    },
    {
        "content": "<p>(I'm focusing on question 1 now)</p>",
        "id": 134306219,
        "sender_full_name": "lqd",
        "timestamp": 1537446681
    },
    {
        "content": "<p>this is an extern static, what is rustc trying to do, building an .o/dylib/etc  that doesn't care about the undefined reference ?</p>",
        "id": 134306276,
        "sender_full_name": "lqd",
        "timestamp": 1537446737
    },
    {
        "content": "<p>anything else, building an executable for this main for instance, will fail linking IIUC</p>",
        "id": 134306291,
        "sender_full_name": "lqd",
        "timestamp": 1537446790
    },
    {
        "content": "<p>well, the original code had an <code>extern const</code>... and <code>rustfix</code> updates that to an <code>extern static</code>, because <code>extern const</code> is deprecated...</p>",
        "id": 134306292,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446794
    },
    {
        "content": "<p>(I infer)</p>",
        "id": 134306299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446827
    },
    {
        "content": "<p>I would <em>hope</em> that as part of these, we also supply a file that fills in that static. Unless the linkage for that <code>extern static</code> variable is weak...? But rustfix doesn't annotate it as such</p>",
        "id": 134306303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446841
    },
    {
        "content": "<p>Anyway I would track down when that test itself was added</p>",
        "id": 134306347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446853
    },
    {
        "content": "<p>the .fixed file, that is</p>",
        "id": 134306349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537446859
    },
    {
        "content": "<p>ok I'll do that</p>",
        "id": 134306351,
        "sender_full_name": "lqd",
        "timestamp": 1537446871
    },
    {
        "content": "<p>it probably was one of the compile-fail tests which were merged into ui</p>",
        "id": 134306380,
        "sender_full_name": "lqd",
        "timestamp": 1537446949
    },
    {
        "content": "<p>yeah. I'm backtracking from the parent of that PR</p>",
        "id": 134306528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447116
    },
    {
        "content": "<p>hmm weird, I don't see an <code>extern/</code> nor an <code>extern-const.rs</code> yet in the parent tree</p>",
        "id": 134306550,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447189
    },
    {
        "content": "<p>it's a couple commits before yeah</p>",
        "id": 134306556,
        "sender_full_name": "lqd",
        "timestamp": 1537447201
    },
    {
        "content": "<p>that is, a couple commits up there are extern tests</p>",
        "id": 134306610,
        "sender_full_name": "lqd",
        "timestamp": 1537447224
    },
    {
        "content": "<p>oh wait, maybe <code>git blame</code> is the answer here</p>",
        "id": 134306619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447239
    },
    {
        "content": "<p>I can't find the one I'm looking for or the extern folder, so there's some reorg there</p>",
        "id": 134306622,
        "sender_full_name": "lqd",
        "timestamp": 1537447248
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/98a04291e4db92ae86d7e3a20b5763cb926ebfbf\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/98a04291e4db92ae86d7e3a20b5763cb926ebfbf\">https://github.com/rust-lang/rust/commit/98a04291e4db92ae86d7e3a20b5763cb926ebfbf</a></p>",
        "id": 134306625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447252
    },
    {
        "content": "<p>yay</p>",
        "id": 134306700,
        "sender_full_name": "lqd",
        "timestamp": 1537447323
    },
    {
        "content": "<p>which is part of <a href=\"https://github.com/rust-lang/rust/issues/50724\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50724\">#50724</a></p>",
        "id": 134306705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447329
    },
    {
        "content": "<p>but so weird, how did this ever pass <code>rustc</code> being run on the <code>.fixed</code> code? Is it legal to do this without providing a object file that defines the static?</p>",
        "id": 134306720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447362
    },
    {
        "content": "<p>for a lib/.a maybe, for an executable I would assume not</p>",
        "id": 134306781,
        "sender_full_name": "lqd",
        "timestamp": 1537447453
    },
    {
        "content": "<p>and if this was part of a compile-fail that would make sense</p>",
        "id": 134306784,
        "sender_full_name": "lqd",
        "timestamp": 1537447466
    },
    {
        "content": "<p>you know what I advise, right now?</p>",
        "id": 134306821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447540
    },
    {
        "content": "<p>but I'm not even sure of that anymore (if it was a compile-fail or not) (also rustfix is not supposed to work flawlessly on code with compile errors (I guess those are linking errors rather than compiling/parsing so it still works nicely :)</p>",
        "id": 134306823,
        "sender_full_name": "lqd",
        "timestamp": 1537447540
    },
    {
        "content": "<p>move this test back to <code>compile-fail</code></p>",
        "id": 134306824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447546
    },
    {
        "content": "<p>tag it with the issue that's about reviewing the port of those tests</p>",
        "id": 134306870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447566
    },
    {
        "content": "<p>(as well as any other relevant issue numbers, to save people the trouble of digging through the git history the way that we have.)</p>",
        "id": 134306881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447605
    },
    {
        "content": "<p>and then we'll retry landing your PR</p>",
        "id": 134306892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447631
    },
    {
        "content": "<p>ok I'll try that after work, thanks Felix</p>",
        "id": 134306908,
        "sender_full_name": "lqd",
        "timestamp": 1537447659
    },
    {
        "content": "<p>In other words, this rat hole is fun and all, but lets try to make resolving it orthogonal to landing the work that resolves <a href=\"https://github.com/rust-lang/rust/issues/53695\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53695\">#53695</a> <span class=\"emoji emoji-1f400\" title=\"rat\">:rat:</span> <span class=\"emoji emoji-1f573\" title=\"hole\">:hole:</span></p>",
        "id": 134306909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447660
    },
    {
        "content": "<p>:)</p>",
        "id": 134306962,
        "sender_full_name": "lqd",
        "timestamp": 1537447689
    },
    {
        "content": "<p>oh wait</p>",
        "id": 134307012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447801
    },
    {
        "content": "<p>shoot, it predates the <code>compile-fail</code> to <code>ui</code> migration</p>",
        "id": 134307058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447813
    },
    {
        "content": "<p>whatever's happening here, its not an artifact of that</p>",
        "id": 134307069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537447832
    },
    {
        "content": "<p>are we trying to successfully compile a rustfixed file where the original is bound to fail compiling ?</p>",
        "id": 134307174,
        "sender_full_name": "lqd",
        "timestamp": 1537447961
    },
    {
        "content": "<p>or am I just missing an auxiliary folder lol</p>",
        "id": 134307183,
        "sender_full_name": "lqd",
        "timestamp": 1537447985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you happen to have a <code>build/x86_64-unknown-linux-gnu/test/ui/extern/extern-const/auxiliary</code> folder  in any recent build ?</p>",
        "id": 134307380,
        "sender_full_name": "lqd",
        "timestamp": 1537448189
    },
    {
        "content": "<p>also you probably have more important stuff to do...</p>",
        "id": 134307519,
        "sender_full_name": "lqd",
        "timestamp": 1537448392
    },
    {
        "content": "<p>I don't have that directory</p>",
        "id": 134307826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537448705
    },
    {
        "content": "<p>and that's on a successful test run</p>",
        "id": 134307837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537448712
    },
    {
        "content": "<p>what the heck is going on</p>",
        "id": 134307841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537448715
    },
    {
        "content": "<p>(i'm considering my effort here to be part of prep for the compiler meeting in an hour)</p>",
        "id": 134307922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537448772
    },
    {
        "content": "<p>so it's indeed probably automatically adding the -L like you said earlier</p>",
        "id": 134307974,
        "sender_full_name": "lqd",
        "timestamp": 1537448850
    },
    {
        "content": "<p>hmm I think I might even have the object code that the successful compile generates</p>",
        "id": 134307991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537448874
    },
    {
        "content": "<p>well that's interestin... in the playpen the .fixed code fails to compile (link failure), but on my linux machine it succeeds...</p>",
        "id": 134308281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449215
    },
    {
        "content": "<p>it will depend if you make it Run or just Build</p>",
        "id": 134308288,
        "sender_full_name": "lqd",
        "timestamp": 1537449240
    },
    {
        "content": "<p>oh so we must default to some sort of dynamic linkage then?</p>",
        "id": 134308335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449266
    },
    {
        "content": "<p>I think so yeah</p>",
        "id": 134308344,
        "sender_full_name": "lqd",
        "timestamp": 1537449280
    },
    {
        "content": "<p>or the Build command only bulids to a .rlib, not to a binary? Hmm...</p>",
        "id": 134308350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449290
    },
    {
        "content": "<p>dynamic linking for this specific test I think</p>",
        "id": 134308433,
        "sender_full_name": "lqd",
        "timestamp": 1537449362
    },
    {
        "content": "<p>even show assembly doesn't work</p>",
        "id": 134308460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449366
    },
    {
        "content": "<p>that is, if you cargo build it in a regular project it will fail to build (fail to link to be precise, with the same error)</p>",
        "id": 134308471,
        "sender_full_name": "lqd",
        "timestamp": 1537449378
    },
    {
        "content": "<p>so <code>rustc</code> on the file will succeed, but <code>cargo build</code> will fail?</p>",
        "id": 134308503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449408
    },
    {
        "content": "<p>rustc with the flags that compile-test passes you mean ?</p>",
        "id": 134308530,
        "sender_full_name": "lqd",
        "timestamp": 1537449438
    },
    {
        "content": "<p>it does for both cases I tihnk</p>",
        "id": 134308549,
        "sender_full_name": "lqd",
        "timestamp": 1537449462
    },
    {
        "content": "<p>rustc will work, cargo build won't</p>",
        "id": 134308556,
        "sender_full_name": "lqd",
        "timestamp": 1537449470
    },
    {
        "content": "<p>my goodness</p>",
        "id": 134308635,
        "sender_full_name": "lqd",
        "timestamp": 1537449532
    },
    {
        "content": "<p>Okay, something new:</p>",
        "id": 134308715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449609
    },
    {
        "content": "<p>inserting a real <em>use</em> of <code>_x</code> will force the failure</p>",
        "id": 134308726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you know if we can get the command compiletest executes for a specific test ? just like it shows when the test fails, but I'd like to compare the one it runs on the \"unfixed code\" vs the fixed which fails</p>",
        "id": 134308728,
        "sender_full_name": "lqd",
        "timestamp": 1537449623
    },
    {
        "content": "<p>OHO</p>",
        "id": 134308732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449625
    },
    {
        "content": "<p>OH OH OH</p>",
        "id": 134308737,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449627
    },
    {
        "content": "<p>you're inserting a FakeRead</p>",
        "id": 134308743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449631
    },
    {
        "content": "<p>OH</p>",
        "id": 134308748,
        "sender_full_name": "lqd",
        "timestamp": 1537449637
    },
    {
        "content": "<p>I wonder if that actually <em>is</em> affecting codegen for this test</p>",
        "id": 134308751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449640
    },
    {
        "content": "<p>okay</p>",
        "id": 134308765,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449650
    },
    {
        "content": "<p>new plan</p>",
        "id": 134308767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449651
    },
    {
        "content": "<p>add <code>// skip-trans</code> to this test</p>",
        "id": 134308773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449658
    },
    {
        "content": "<p>or wait</p>",
        "id": 134308786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449664
    },
    {
        "content": "<p>I dont' know if that's supported in <code>ui/</code> on master</p>",
        "id": 134308790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449669
    },
    {
        "content": "<p>one of my PR adds support for it</p>",
        "id": 134308795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449677
    },
    {
        "content": "<p>darn</p>",
        "id": 134308797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449679
    },
    {
        "content": "<p>anyway, yeah, I totally bet that LLVM is optimizing away the use</p>",
        "id": 134308821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449716
    },
    {
        "content": "<p>or something</p>",
        "id": 134308824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449719
    },
    {
        "content": "<p>and your PR is forcing it to show up</p>",
        "id": 134308866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449726
    },
    {
        "content": "<p>these FakeReads don't seem to be removed by a MIR pass before codegen ? I think niko and matthew were having such a conversation about this recently</p>",
        "id": 134308884,
        "sender_full_name": "lqd",
        "timestamp": 1537449743
    },
    {
        "content": "<p>but this test as written seems kind of bogus to me</p>",
        "id": 134308888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449747
    },
    {
        "content": "<p>or at least</p>",
        "id": 134308896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449755
    },
    {
        "content": "<p>I don't know if we should be guaranteeing that the compiler will actually compile the <code>extern-const.fixed</code> variant.</p>",
        "id": 134308917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449776
    },
    {
        "content": "<p>I'll file a new bug regarding <em>that</em> question.</p>",
        "id": 134308946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537449813
    },
    {
        "content": "<blockquote>\n<p>I don't know how deterministic our codegen-units partitioning is</p>\n</blockquote>\n<p>afaik it is quite deterministic</p>",
        "id": 134309641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450453
    },
    {
        "content": "<p>what is the current status here?</p>",
        "id": 134309661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537450481
    },
    {
        "content": "<p>new data, <code>cargo build --release</code> builds successfully, while <code>cargo build</code> does not</p>",
        "id": 134309690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537450546
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/54388\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54388\">#54388</a></p>",
        "id": 134309749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537450602
    },
    {
        "content": "<p>The current status I <em>think</em> is that this PR is exposing a bug elsewhere</p>",
        "id": 134309758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537450617
    },
    {
        "content": "<p>I see</p>",
        "id": 134310350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537451283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I posted my new plan of attack for your PR as a <a href=\"https://github.com/rust-lang/rust/pull/54188#issuecomment-423295274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54188#issuecomment-423295274\">comment</a></p>",
        "id": 134329495,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537469902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> merci felix :) sounds like an interesting thing to try at the very least, maybe it'll blow up elsewhere in other debug tests</p>",
        "id": 134329703,
        "sender_full_name": "lqd",
        "timestamp": 1537470111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> though if LLVM is involved, I was worried it'd mean that FakeReads now, and ReadForMatch before, really do impact codegen, while I was assuming they would not</p>",
        "id": 134329954,
        "sender_full_name": "lqd",
        "timestamp": 1537470315
    },
    {
        "content": "<p>well since you can replicate locally, we could see if the LLVM IR is being changed</p>",
        "id": 134330073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537470392
    },
    {
        "content": "<p>on this test case</p>",
        "id": 134330081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537470401
    },
    {
        "content": "<p>but only if you're really really curious...</p>",
        "id": 134330087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537470406
    },
    {
        "content": "<p>I can check the IR tomorrow, and do your suggestion tonight</p>",
        "id": 134330131,
        "sender_full_name": "lqd",
        "timestamp": 1537470449
    },
    {
        "content": "<p>or maybe should I try the suggestion only after checking the IR ?</p>",
        "id": 134330232,
        "sender_full_name": "lqd",
        "timestamp": 1537470535
    },
    {
        "content": "<p>I assume the \"CI before r+\" didn't run this test ?</p>",
        "id": 134330871,
        "sender_full_name": "lqd",
        "timestamp": 1537471097
    },
    {
        "content": "<blockquote>\n<p>I assume the \"CI before r+\" didn't run this test ?</p>\n</blockquote>\n<p>I don't understand what you're asking here. Or rather, my guess is that it <em>did</em> run the test, but the behavior we are seeing is non-deterministic (at least for builds w/o <code>-g</code>)</p>",
        "id": 134335119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537475506
    },
    {
        "content": "<p>because I think that codegen-units are affecting LLVM's ability to optimize away the references to the symbol that is later causing the link-time failure.</p>",
        "id": 134335178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537475541
    },
    {
        "content": "<p>I mean it seemed the test code was deterministic when we tried it manually both with a debug and release builds, but non-deterministic inside x.py and CI</p>",
        "id": 134336444,
        "sender_full_name": "lqd",
        "timestamp": 1537476835
    },
    {
        "content": "<p>well, one thing I've been wondering about that: Do you have your own settings in a config.toml file?</p>",
        "id": 134336925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477311
    },
    {
        "content": "<p>or do you not use one?</p>",
        "id": 134336933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477319
    },
    {
        "content": "<p>I do use one</p>",
        "id": 134336991,
        "sender_full_name": "lqd",
        "timestamp": 1537477343
    },
    {
        "content": "<p>can you gist it for me?</p>",
        "id": 134337001,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477353
    },
    {
        "content": "<p>I'm not on the same computer as before, but can reproduce the \"fails on debug, succeeds on release\"</p>",
        "id": 134337035,
        "sender_full_name": "lqd",
        "timestamp": 1537477397
    },
    {
        "content": "<p>yeah I will gist it</p>",
        "id": 134337038,
        "sender_full_name": "lqd",
        "timestamp": 1537477402
    },
    {
        "content": "<p>(basically I'm musing if we should be changing more of those settings to try to get ourselves in a closer state to what the CI runs before we run <code>x.py</code> ourselves. Because there is <em>some</em> reason it generates that command line that you were able to use to reproduce the problem locally...)</p>",
        "id": 134337047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477413
    },
    {
        "content": "<p>the \"fails on debug\" is almost certainly due to the embedded debug-info in the object file causing the linker to say \"HEY! Where's that symbol!?!\"</p>",
        "id": 134337108,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477456
    },
    {
        "content": "<p>(but its also possible that its not optimizing away the read in that scenario)</p>",
        "id": 134337125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477489
    },
    {
        "content": "<p>(these are all reasons why it might be interesting to look at the LLVM IR)</p>",
        "id": 134337138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477507
    },
    {
        "content": "<p>it's very <a href=\"https://gist.github.com/lqd/b1eea526df3bc5650255c55e79d65ace\" target=\"_blank\" title=\"https://gist.github.com/lqd/b1eea526df3bc5650255c55e79d65ace\">vanilla</a> IIRC, oh maybe you're thinking of enabling llvm assertions ?</p>",
        "id": 134337204,
        "sender_full_name": "lqd",
        "timestamp": 1537477566
    },
    {
        "content": "<p>no, I know from experience that we are nowhere near LLVM assertion clean, unfortunately.</p>",
        "id": 134337216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477589
    },
    {
        "content": "<p>heh</p>",
        "id": 134337218,
        "sender_full_name": "lqd",
        "timestamp": 1537477600
    },
    {
        "content": "<p>you're right, this <em>is</em> very vanilla</p>",
        "id": 134337221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477604
    },
    {
        "content": "<p>There's this: <code>debuginfo-lines = true</code></p>",
        "id": 134337249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477645
    },
    {
        "content": "<p>hmm</p>",
        "id": 134337259,
        "sender_full_name": "lqd",
        "timestamp": 1537477669
    },
    {
        "content": "<p>i dunno if that's just affecting the rustc build itself, or if it affects the build products during testing</p>",
        "id": 134337261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477673
    },
    {
        "content": "<p>(one would think <code>#debuginfo-tests = true</code> would be the thing that controls the latter...)</p>",
        "id": 134337310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477692
    },
    {
        "content": "<p>but yeah, I don't see any smoking guns here</p>",
        "id": 134337406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477808
    },
    {
        "content": "<p>one would hope <code>use-jemalloc = false</code> would not affect e.g. codegen-unit partitioning...</p>",
        "id": 134337430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477848
    },
    {
        "content": "<p>(Do you have jemalloc turned off so that you can use other tools that need the system allocator? just curious)</p>",
        "id": 134337456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477896
    },
    {
        "content": "<p>I do have it turned off so I can profile yeah (I have never tried running valgrind and others without it being turned off but maybe it would work)</p>",
        "id": 134337525,
        "sender_full_name": "lqd",
        "timestamp": 1537477947
    },
    {
        "content": "<p>anyway I'd say you should just kill the <code>// run-rustfix</code> line in that test and then ask someone to re-r+ the PR</p>",
        "id": 134337552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537477985
    },
    {
        "content": "<p>but if you won't have time to do that tonight, that's fine. Just let me know and that way I'll see about putting up a PR to fix the test.</p>",
        "id": 134337572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478026
    },
    {
        "content": "<p>yeah I was testing this, and seemed to work (it also needs the .fixed deleted otherwise it panics)</p>",
        "id": 134337574,
        "sender_full_name": "lqd",
        "timestamp": 1537478029
    },
    {
        "content": "<p>oh of course</p>",
        "id": 134337579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478037
    },
    {
        "content": "<p>I was trying to get you the ir but with the command from earlier I can't find it whenI --emit=llvm-ir :/</p>",
        "id": 134337625,
        "sender_full_name": "lqd",
        "timestamp": 1537478054
    },
    {
        "content": "<p>it ends up in the <code>--output-dir</code> in the command I think</p>",
        "id": 134337632,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478070
    },
    {
        "content": "<p>or did the command use <code>-o</code> ?</p>",
        "id": 134337636,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478085
    },
    {
        "content": "<p>it did yeah, I should be looking for $test-name.ll right ?</p>",
        "id": 134337647,
        "sender_full_name": "lqd",
        "timestamp": 1537478107
    },
    {
        "content": "<p>if it uses <code>-o</code> then I think you end up overwriting the executable with the LLVM IR.</p>",
        "id": 134337651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478110
    },
    {
        "content": "<p>its the best</p>",
        "id": 134337657,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478120
    },
    {
        "content": "<p>oh ok lol</p>",
        "id": 134337661,
        "sender_full_name": "lqd",
        "timestamp": 1537478124
    },
    {
        "content": "<p>lol it did</p>",
        "id": 134337683,
        "sender_full_name": "lqd",
        "timestamp": 1537478152
    },
    {
        "content": "<p>aptly named ./build/x86_64-apple-darwin/test/ui/extern/extern-const/a, let me gist that to you</p>",
        "id": 134337727,
        "sender_full_name": "lqd",
        "timestamp": 1537478169
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/c2bc1eb891b59c6258fdcfd4961bed7b\" target=\"_blank\" title=\"https://gist.github.com/lqd/c2bc1eb891b59c6258fdcfd4961bed7b\">here it is</a></p>",
        "id": 134337774,
        "sender_full_name": "lqd",
        "timestamp": 1537478230
    },
    {
        "content": "<p>ok I've updated <a href=\"https://github.com/rust-lang/rust/issues/54188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54188\">#54188</a> to disable rustfix on <code>extern-const.rs</code> as you proposed, let's see how it fares on CI <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  (but tomorrow, for our TZ :)</p>",
        "id": 134338153,
        "sender_full_name": "lqd",
        "timestamp": 1537478724
    },
    {
        "content": "<p>right, so I think this is where we have the read from the undefined static <code>C</code>: <a href=\"https://gist.github.com/lqd/c2bc1eb891b59c6258fdcfd4961bed7b#file-extern-const-ll-L135\" target=\"_blank\" title=\"https://gist.github.com/lqd/c2bc1eb891b59c6258fdcfd4961bed7b#file-extern-const-ll-L135\">https://gist.github.com/lqd/c2bc1eb891b59c6258fdcfd4961bed7b#file-extern-const-ll-L135</a></p>",
        "id": 134338331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478909
    },
    {
        "content": "<p>and I assume that on a <code>rustc</code> build without your PR, we don't see that <code>%0 = load i8, i8* @C, align 1</code></p>",
        "id": 134338343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537478944
    },
    {
        "content": "<p>I might have messed up the thing that removes FakeReads from reaching codegen</p>",
        "id": 134338436,
        "sender_full_name": "lqd",
        "timestamp": 1537479071
    },
    {
        "content": "<p>that's a decent theory. It would be good to check it.</p>",
        "id": 134338451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479104
    },
    {
        "content": "<p>or we don't have such a thing and FakeReads were RealReads all along m night shyamalan plot twist</p>",
        "id": 134338457,
        "sender_full_name": "lqd",
        "timestamp": 1537479118
    },
    {
        "content": "<p>oh</p>",
        "id": 134338530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479177
    },
    {
        "content": "<p>plot twist indeed</p>",
        "id": 134338535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479181
    },
    {
        "content": "<p>--emit llvm-ir on my rustc <em>does</em> have <code>%0 = load i8, i8* @C, align 1</code></p>",
        "id": 134338546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479196
    },
    {
        "content": "<p>we've been plot twisted!</p>",
        "id": 134338560,
        "sender_full_name": "lqd",
        "timestamp": 1537479211
    },
    {
        "content": "<p>(at least, it does at <code>-C opt-level=0</code> ... looking at other scenarios now...)</p>",
        "id": 134338576,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> thanks for helping out btw, doing this alone would have been way harder (probably impossible)</p>",
        "id": 134338655,
        "sender_full_name": "lqd",
        "timestamp": 1537479287
    },
    {
        "content": "<p>might LTO be getting rid of it, hmm ...</p>",
        "id": 134338662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479294
    },
    {
        "content": "<p>It still links even when I disable ThinLTO  and am at <code>-C opt-level=0</code>.</p>",
        "id": 134338786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537479436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you remember where should I look for something (like a MIR pass) eliminating ReadForMatch before codegen ? (IIRC you created ReadForMatch so I'll check with you :)</p>",
        "id": 134339568,
        "sender_full_name": "lqd",
        "timestamp": 1537480097
    },
    {
        "content": "<p>ReadForMatch reaches codegen (but the PR I have open for matches will need to add a pass to remove them, for other reasons).</p>",
        "id": 134341458,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537482053
    },
    {
        "content": "<p>yeah I seemed to remember your &amp; niko's conversation about that</p>",
        "id": 134341578,
        "sender_full_name": "lqd",
        "timestamp": 1537482187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> thanks for nudging bors</p>",
        "id": 134372124,
        "sender_full_name": "lqd",
        "timestamp": 1537529644
    }
]