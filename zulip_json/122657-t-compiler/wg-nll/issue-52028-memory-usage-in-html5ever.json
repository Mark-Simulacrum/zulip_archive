[
    {
        "content": "<p>So I had <a href=\"https://github.com/rust-lang/rust/issues/52028#issuecomment-402509289\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52028#issuecomment-402509289\">this idea for optimizing html5ever</a></p>",
        "id": 129153825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530813969
    },
    {
        "content": "<p>it basically just eliminates a big intermediate vector</p>",
        "id": 129153849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814001
    },
    {
        "content": "<p>it would have to I think build on my branch though.. probably ..</p>",
        "id": 129153865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814014
    },
    {
        "content": "<p>maybe not</p>",
        "id": 129153868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814016
    },
    {
        "content": "<p>I'll have a look at doing that then. Which branch would you recommend working from?</p>",
        "id": 129153905,
        "sender_full_name": "davidtwco",
        "timestamp": 1530814060
    },
    {
        "content": "<p>let me re-read my idae :)</p>",
        "id": 129153980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814125
    },
    {
        "content": "<p>ok so I would probably start from my PR</p>",
        "id": 129154265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814414
    },
    {
        "content": "<p>just because</p>",
        "id": 129154268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814419
    },
    {
        "content": "<p>I dont' think there's anything in there that you <em>need</em></p>",
        "id": 129154274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814423
    },
    {
        "content": "<p>this PR I mean <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a></p>",
        "id": 129154286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814436
    },
    {
        "content": "<p>but it seems like that will land</p>",
        "id": 129154330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814443
    },
    {
        "content": "<p>and you'd probably get merge conflicts otherwise</p>",
        "id": 129154339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530814449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> let me know how it goes; in the meantime, I'm going to open up an issue about the region error stuff and try to leave some notes</p>",
        "id": 129155757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530815684
    },
    {
        "content": "<p>Sounds good, just building your branch to get started.</p>",
        "id": 129155799,
        "sender_full_name": "davidtwco",
        "timestamp": 1530815725
    },
    {
        "content": "<blockquote>\n<p>That's a single 12 GiB allocation happening</p>\n</blockquote>\n<p>LOL</p>",
        "id": 129174054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1530837296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So I'm looking at this issue - what do you envision we replace <code>Vec&lt;(ty::Region&lt;'tcx&gt;, Location)&gt;</code> with? I've been trying with <code>SparseBitMatrix&lt;RegionVid, LocationIndex&gt;</code> but there's some places where the <code>Vec</code> was iterated over and I'm not sure how to use the <code>SparseBitMatrix</code> in that context?</p>",
        "id": 129216713,
        "sender_full_name": "davidtwco",
        "timestamp": 1530901083
    },
    {
        "content": "<p>Tried a handful of things and never got much of anywhere.</p>",
        "id": 129216723,
        "sender_full_name": "davidtwco",
        "timestamp": 1530901093
    },
    {
        "content": "<p>I envisioned using <code>RegionValues</code> I think</p>",
        "id": 129217358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530901976
    },
    {
        "content": "<p>right now though, constructing a <code>RegionValues</code> requires knowing the total number of region variables</p>",
        "id": 129217367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530901993
    },
    {
        "content": "<p>I'm not sure exactly how I would alter the API; I debated around a few things</p>",
        "id": 129217490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530902147
    },
    {
        "content": "<p>I think I'd probably make it so that it doesn't know the number of variables and just instantiates them on demand</p>",
        "id": 129217541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530902166
    },
    {
        "content": "<blockquote>\n<p>This implies to me that -- to start -- we could refactor so that type check generates the initial liveness results (storing in a sparse bit set per variable) directly. This would effectively replace the liveness_set vector that we have today. We would then hand that off to the region inference context</p>\n</blockquote>\n<p>I read this and went and looked for sparse bit sets.</p>",
        "id": 129217551,
        "sender_full_name": "davidtwco",
        "timestamp": 1530902191
    },
    {
        "content": "<p>I think I've got it to check now with a <code>SparseBitMatrix</code> but I've no idea if it is correct or better in any way.</p>",
        "id": 129218250,
        "sender_full_name": "davidtwco",
        "timestamp": 1530903084
    },
    {
        "content": "<p>(or what you wanted at all)</p>",
        "id": 129218254,
        "sender_full_name": "davidtwco",
        "timestamp": 1530903093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> you're on the right track</p>",
        "id": 129219295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904424
    },
    {
        "content": "<p>I forgot that it used a <code>SparseBitMatrix</code> though</p>",
        "id": 129219297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904430
    },
    {
        "content": "<p>we'd have to modify that type to grow dynamically too</p>",
        "id": 129219300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904440
    },
    {
        "content": "<p>if we want this behavior</p>",
        "id": 129219342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904450
    },
    {
        "content": "<p>which...seems ok?</p>",
        "id": 129219343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904454
    },
    {
        "content": "<p>is all of this making any sense? :)</p>",
        "id": 129219346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904464
    },
    {
        "content": "<p>It didn't use a <code>SparseBitMatrix</code> before, I introduced one here because that's what I figured you meant.</p>",
        "id": 129219349,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904468
    },
    {
        "content": "<p>I had no idea it wouldn't grow dynamically - this'll probably fail in that case.</p>",
        "id": 129219351,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904486
    },
    {
        "content": "<p>sorry, I meant that <code>RegionValues</code> uses one</p>",
        "id": 129219397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904554
    },
    {
        "content": "<p>are you familiar with the <code>RegionValues</code> type?</p>",
        "id": 129219401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904561
    },
    {
        "content": "<p>(is that even the right name...)</p>",
        "id": 129219439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904565
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/values/struct.RegionValues.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/values/struct.RegionValues.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/values/struct.RegionValues.html</a></p>",
        "id": 129219445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904572
    },
    {
        "content": "<p>Don't recall using it, I'm not using that just now.</p>",
        "id": 129219452,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904583
    },
    {
        "content": "<p>this is the type we ultimately use to store the liveness results in the region inference context</p>",
        "id": 129219456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904591
    },
    {
        "content": "<p>this might be a place where it's useful to step back and talk about the regon inferene cx is setup</p>",
        "id": 129219479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904639
    },
    {
        "content": "<p>if you wanted, we could do a quick \"guided tour\"</p>",
        "id": 129219482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904643
    },
    {
        "content": "<p>(and I could tape it)</p>",
        "id": 129219485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904646
    },
    {
        "content": "<p>but it'd have to be ... kind of <em>now</em></p>",
        "id": 129219490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904652
    },
    {
        "content": "<p>anyway, this <a href=\"https://github.com/rust-lang/rust/blob/062a416dd4f12cf99b37d078a3da8dd81a1c008e/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L50-L54\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/062a416dd4f12cf99b37d078a3da8dd81a1c008e/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L50-L54\">the field of the inference context where the liveness values are stored</a></p>",
        "id": 129219497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904672
    },
    {
        "content": "<p>what we do right now is to <em>first</em> build up the liveness values into this big array, and then transfer them into there</p>",
        "id": 129219551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904711
    },
    {
        "content": "<p>I can probably do that.</p>",
        "id": 129219554,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904721
    },
    {
        "content": "<p>and what I am proposing is kind of building up that field during typeck</p>",
        "id": 129219555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904721
    },
    {
        "content": "<p>Here's what I changed: <a href=\"https://gist.github.com/davidtwco/f6fece99fb433a7506633dbdb321b4ab\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/f6fece99fb433a7506633dbdb321b4ab\">https://gist.github.com/davidtwco/f6fece99fb433a7506633dbdb321b4ab</a></p>",
        "id": 129219634,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904841
    },
    {
        "content": "<p>Pretty certain it's the wrong direction.</p>",
        "id": 129219640,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904857
    },
    {
        "content": "<p>yeah .. right direction maybe but I think we can do it .. I hope .. more easily?</p>",
        "id": 129219673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904903
    },
    {
        "content": "<p>That would be nice.</p>",
        "id": 129219679,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904913
    },
    {
        "content": "<p>I am pondering a bit what I think the right steps are</p>",
        "id": 129219684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904917
    },
    {
        "content": "<p>Sure thing.</p>",
        "id": 129219727,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904927
    },
    {
        "content": "<p>but yeah if you wanted I can kind of give you a quick overview of the total \"information flow\" here</p>",
        "id": 129219748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530904968
    },
    {
        "content": "<p>That'd be helpful I reckon.</p>",
        "id": 129219755,
        "sender_full_name": "davidtwco",
        "timestamp": 1530904985
    },
    {
        "content": "<p>you want to do that now?</p>",
        "id": 129219773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905013
    },
    {
        "content": "<p>/me tries to decide if he has time</p>",
        "id": 129219786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905018
    },
    {
        "content": "<p>I'm leaving for a vacation tomorrow so got a few things to get done :)</p>",
        "id": 129219798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905027
    },
    {
        "content": "<p>If you've got time, I'm around now.</p>",
        "id": 129219799,
        "sender_full_name": "davidtwco",
        "timestamp": 1530905027
    },
    {
        "content": "<p>But it's not super important so don't bother if you've not.</p>",
        "id": 129219870,
        "sender_full_name": "davidtwco",
        "timestamp": 1530905053
    },
    {
        "content": "<p>let me ask you a different question</p>",
        "id": 129219907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905087
    },
    {
        "content": "<p>we could also discuss some the idea of how to improve the region errors</p>",
        "id": 129219942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905120
    },
    {
        "content": "<p>specifically this:</p>\n<ul>\n<li>code to find and highlight the precise part of the type where a region appears<br>\ni.e., to say something like \"let’s call the lifetime of this reference '1\"<br>\nseems like no matter what we’re going to want this</li>\n</ul>",
        "id": 129219975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905138
    },
    {
        "content": "<p>Whichever you'd prefer I work on, I've not got a particular preference.</p>",
        "id": 129219978,
        "sender_full_name": "davidtwco",
        "timestamp": 1530905143
    },
    {
        "content": "<p>I have been meaning to write things up about it but haven't gotten to it</p>",
        "id": 129219990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905159
    },
    {
        "content": "<p>hmm</p>",
        "id": 129219991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905160
    },
    {
        "content": "<p>ok let's do something quickly</p>",
        "id": 129220066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905246
    },
    {
        "content": "<p>let's talk about this issue since I think it's a bit more obvious</p>",
        "id": 129220072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905253
    },
    {
        "content": "<p>and anyway my PR didn't land yet :)</p>",
        "id": 129220074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905260
    },
    {
        "content": "<p>I'll try to write something up about <em>that</em> over the weekend</p>",
        "id": 129220075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905265
    },
    {
        "content": "<p><a href=\"https://appear.in/i-heart-rust\" target=\"_blank\" title=\"https://appear.in/i-heart-rust\">https://appear.in/i-heart-rust</a></p>",
        "id": 129220118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530905284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> will be live at <a href=\"https://youtu.be/DqojDh9kFdI\" target=\"_blank\" title=\"https://youtu.be/DqojDh9kFdI\">https://youtu.be/DqojDh9kFdI</a> once processing is complete; it's also in <a href=\"https://www.youtube.com/playlist?list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PLCQVvhKUrTN9VfaQx2AyOSAstwENaGkYA\">the playlist</a></p>",
        "id": 129221559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530907282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I create <code>let elements = &amp;Rc::new(RegionValueElements::new(mir, universal_regions.len()));</code> and pass it into <code>type_check::type_check</code> which passes it into <code>type_check::type_check_internal</code> which makes the <code>RegionValues</code>. What should I do with <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1648-L1649\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1648-L1649\">these lines</a> where I don't have a <code>universal_regions</code>?</p>",
        "id": 129269930,
        "sender_full_name": "davidtwco",
        "timestamp": 1530992723
    },
    {
        "content": "<p>I can't find a nice way do it without everything ending up wrapped in <code>Option</code>.</p>",
        "id": 129269933,
        "sender_full_name": "davidtwco",
        "timestamp": 1530992736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> you may want to add it to the <code>BorrowCheckContext</code></p>",
        "id": 129270545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530993924
    },
    {
        "content": "<p>I added that at some point precisely because everything was getting wrapped up in options</p>",
        "id": 129270551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530993940
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L119-L123\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L119-L123\">this section</a></p>",
        "id": 129270598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530993972
    },
    {
        "content": "<p>Oh yeah, that would work, I'd considered that at some point but for some reason thought otherwise.</p>",
        "id": 129270600,
        "sender_full_name": "davidtwco",
        "timestamp": 1530993980
    },
    {
        "content": "<p>Ah, so I think why I got tripped up with that was that it made it difficult to instantiate the <code>MirTypeckRegionConstraints</code> in <code>TypeChecker::new()</code> since it now takes a <code>RegionValues</code> - which I'm instantiating there and that requires a <code>elements</code>.</p>",
        "id": 129270730,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994218
    },
    {
        "content": "<p>And wrapping that in <code>Option</code> is a pain as that's the return value of <code>type_check::type_check</code>.</p>",
        "id": 129270735,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994238
    },
    {
        "content": "<p>Ah, I see. Still, those <em>are</em> only used in the borrow check mode.</p>",
        "id": 129270838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994464
    },
    {
        "content": "<p>I wonder if we should jus move those into the <code>BorrowCheckContext</code></p>",
        "id": 129270842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994483
    },
    {
        "content": "<p>e.g., with an <code>&amp;mut</code></p>",
        "id": 129270843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994490
    },
    {
        "content": "<p>I've contemplated doing so before</p>",
        "id": 129270845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994497
    },
    {
        "content": "<p>the whole setup feels a bit wonky, like it could be realigned, but I am not entirely sure how :)</p>",
        "id": 129270853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994511
    },
    {
        "content": "<p>What's the type check mir pass used for?</p>",
        "id": 129270899,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994571
    },
    {
        "content": "<p>it's a sanity check</p>",
        "id": 129270900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994592
    },
    {
        "content": "<p>it checks that we generate well-formed MIR</p>",
        "id": 129270901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994599
    },
    {
        "content": "<p>but it doesn't consider regions etc</p>",
        "id": 129270902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994605
    },
    {
        "content": "<p>it's gonna go away once NLL lands</p>",
        "id": 129270912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994649
    },
    {
        "content": "<p>since NLL does the same thing</p>",
        "id": 129270914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994651
    },
    {
        "content": "<p>and then some</p>",
        "id": 129270915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994655
    },
    {
        "content": "<p>I suppose we could have it create the <code>RegionValueElements</code> etc but ...</p>",
        "id": 129270919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994675
    },
    {
        "content": "<p>or alternatively you could imagine removing it, and instead just having the MIR-based borrow check <em>always</em> run, but stop early if not enabled</p>",
        "id": 129270958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994702
    },
    {
        "content": "<p>that'd probably be the way to go</p>",
        "id": 129270959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994708
    },
    {
        "content": "<p>Even if I put the elements as close as possible to where it is used, at that point the universal regions is in an <code>Option</code> and I've got the same issue.</p>",
        "id": 129270961,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994720
    },
    {
        "content": "<p>I'm reluctant to remove it altogher both because it's useful <em>and</em> because it would make NLL performance look worse <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 129270963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994727
    },
    {
        "content": "<p>I don't think I quite understand</p>",
        "id": 129270972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994763
    },
    {
        "content": "<p>can you send me your diff? :)</p>",
        "id": 129270974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994772
    },
    {
        "content": "<p>(or, better, the commit)</p>",
        "id": 129270978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994777
    },
    {
        "content": "<p>and maybe the compiler error</p>",
        "id": 129270979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530994781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0425]: cannot find value `elements` in this scope\n   --&gt; librustc_mir/borrow_check/nll/type_check/mod.rs:737:57\n    |\n737 |                 liveness_constraints: RegionValues::new(elements),\n    |                                                         ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --&gt; librustc_mir/borrow_check/nll/constraint_generation.rs:43:56\n   |\n43 |     cg.add_region_liveness_constraints_from_type_check(liveness_set_from_typeck);\n   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found struct `borrow_check::nll::region_infer::values::RegionValues`\n   |\n   = note: expected type `&amp;[(&amp;rustc::ty::RegionKind, rustc::mir::Location)]`\n              found type `&amp;borrow_check::nll::region_infer::values::RegionValues&lt;rustc::ty::RegionVid&gt;`\n\nerror: aborting due to 2 previous errors\n</pre></div>\n\n\n<p>Here's a branch with a WIP commit: <a href=\"https://github.com/davidtwco/rust/tree/issue-52028\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-52028\">https://github.com/davidtwco/rust/tree/issue-52028</a></p>",
        "id": 129271034,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994881
    },
    {
        "content": "<p>What I was suggesting though was that if I move where I create <code>elements</code> such that it's created inside the <code>type_check</code> module and returned alongside the <code>RegionValues</code> (which could work..) then at the point where I'd create <code>elements</code>, the number of universal regions is within the <code>Option&lt;BorrowCheckContext&gt;</code> and therefore the issue just manifests itself slightly differently.</p>",
        "id": 129271083,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994973
    },
    {
        "content": "<p>The second error there can be ignored, I've just not around to dealing with that part of the code.</p>",
        "id": 129271086,
        "sender_full_name": "davidtwco",
        "timestamp": 1530994985
    },
    {
        "content": "<p>I think you should move the creation into the <code>BorrowCheckContext</code> struct</p>",
        "id": 129271089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995001
    },
    {
        "content": "<p>and not have a return value</p>",
        "id": 129271096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995012
    },
    {
        "content": "<p>so e.g. <code>BorrowCheckContext</code> could have a <code>&amp;mut MirTypeckRegionConstraints&lt;'tcx&gt;</code></p>",
        "id": 129271102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995029
    },
    {
        "content": "<p>I see.</p>",
        "id": 129271103,
        "sender_full_name": "davidtwco",
        "timestamp": 1530995037
    },
    {
        "content": "<p>there are two places that we write to <code>constraints</code></p>",
        "id": 129271104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995041
    },
    {
        "content": "<p>Yeah, alright, I'll give that a go.</p>",
        "id": 129271141,
        "sender_full_name": "davidtwco",
        "timestamp": 1530995044
    },
    {
        "content": "<p>one of them already checked that <code>BorrowCheckConstraints</code> is <code>Some</code></p>",
        "id": 129271144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995049
    },
    {
        "content": "<p>the other one <em>could have done</em> :)</p>",
        "id": 129271145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995056
    },
    {
        "content": "<p>basically the same as the <code>&amp;mut AllFacts</code> that's already in there</p>",
        "id": 129271146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530995074
    },
    {
        "content": "<p>That worked, thanks.</p>",
        "id": 129271491,
        "sender_full_name": "davidtwco",
        "timestamp": 1530995813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Submitted <a href=\"https://github.com/rust-lang/rust/pull/52190\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52190\">https://github.com/rust-lang/rust/pull/52190</a> for this. Not passing the tests yet, but the bulk of it is there.</p>",
        "id": 129373994,
        "sender_full_name": "davidtwco",
        "timestamp": 1531170519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> awesome :D</p>",
        "id": 129374105,
        "sender_full_name": "lqd",
        "timestamp": 1531170694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> nice! (I'm still on vacation, trying to catch up a <em>bit</em> though -- beginning with rebasing <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a>)</p>",
        "id": 129516878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531371951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rebased</p>",
        "id": 129554651,
        "sender_full_name": "davidtwco",
        "timestamp": 1531421010
    },
    {
        "content": "<p>(tiny typo during the rebase if you haven't seen it yet)</p>",
        "id": 129557909,
        "sender_full_name": "lqd",
        "timestamp": 1531424070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> oops, thanks, completely forgot to do a check on it before pushing.</p>",
        "id": 129558495,
        "sender_full_name": "davidtwco",
        "timestamp": 1531424816
    },
    {
        "content": "<p>:)</p>",
        "id": 129558572,
        "sender_full_name": "lqd",
        "timestamp": 1531424884
    },
    {
        "content": "<p>Alright, fixed.</p>",
        "id": 129558801,
        "sender_full_name": "davidtwco",
        "timestamp": 1531425129
    },
    {
        "content": "<p>It occurs to me looking at this that I misread your initial message and it wasn't instruction to rebase over that PR again (though it was required so it didn't hurt to do).</p>",
        "id": 129590532,
        "sender_full_name": "davidtwco",
        "timestamp": 1531473896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so it seems like <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a> has landed; you may want to rebase atop master now</p>",
        "id": 129610456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531498670
    },
    {
        "content": "<p>Rebased ontop of master now.</p>",
        "id": 129613928,
        "sender_full_name": "davidtwco",
        "timestamp": 1531501922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> left a <a href=\"https://github.com/rust-lang/rust/pull/52190#pullrequestreview-137228629\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52190#pullrequestreview-137228629\">first round of review</a>, just looking at the changes to make <code>SparseBitMatrix</code> lazy</p>",
        "id": 129646825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531543877
    },
    {
        "content": "<p>ok, left a second round of feedback on the rest</p>",
        "id": 129647096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531544494
    },
    {
        "content": "<p>Put a PR in that should have resolved those issues. I've not had much time to look into the failure that's happening just now. Will try to get to that tonight.</p>",
        "id": 129744400,
        "sender_full_name": "davidtwco",
        "timestamp": 1531740942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> to clarify, you mean the same PR, right?</p>",
        "id": 129744622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531741308
    },
    {
        "content": "<p>Ah, yeah, I meant to say commit.</p>",
        "id": 129745285,
        "sender_full_name": "davidtwco",
        "timestamp": 1531742311
    },
    {
        "content": "<p>Too late to edit now.</p>",
        "id": 129745293,
        "sender_full_name": "davidtwco",
        "timestamp": 1531742323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> did you ever figure out what those travis errors are about? Do you want me to take a look? It might just be \"things happening in a slightly different order\"</p>",
        "id": 129745611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531742712
    },
    {
        "content": "<p>I haven't had a chance to properly dig in.</p>",
        "id": 129746607,
        "sender_full_name": "davidtwco",
        "timestamp": 1531744135
    },
    {
        "content": "<p>Its the visited vec in some of the SCC functions.</p>",
        "id": 129746612,
        "sender_full_name": "davidtwco",
        "timestamp": 1531744146
    },
    {
        "content": "<p>If you have time and want to take a look I don't mind.</p>",
        "id": 129746623,
        "sender_full_name": "davidtwco",
        "timestamp": 1531744159
    },
    {
        "content": "<p>I'll clone it</p>",
        "id": 129746987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531744653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so far most of the errors I see are ICEs relating to the lazy bit set code. I'm fixing those bit by bit. This mess of bitsets is SUCH a candidate for being pulled out to an external crate where it can be properly vetted and tested...</p>",
        "id": 129755629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531753730
    },
    {
        "content": "<p>By lazy bit set do you mean the type underpinning the <code>SparseBitMatrix</code> or the changes to the <code>SparseBitMatrix</code>?</p>",
        "id": 129755921,
        "sender_full_name": "davidtwco",
        "timestamp": 1531753966
    },
    {
        "content": "<p>the changes that make it grow automatically, I mean</p>",
        "id": 129756397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531754385
    },
    {
        "content": "<p>I'm now past the obvious ICEs</p>",
        "id": 129756467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531754418
    },
    {
        "content": "<p>will push those</p>",
        "id": 129756470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531754421
    },
    {
        "content": "<p>now getting new errors ;)</p>",
        "id": 129756472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531754423
    },
    {
        "content": "<p>The only ICE I was seeing (at least with the test I was looking at) was the <code>visited</code> vector being empty when it wasn't supposed to be in the SCC code. Given that I didn't get a chance to work that out, I wasn't aware that the bit matrix changes had any issues. Though, perhaps I just had to find time to dig deeper.</p>",
        "id": 129756629,
        "sender_full_name": "davidtwco",
        "timestamp": 1531754543
    },
    {
        "content": "<p>pushed a commit or two</p>",
        "id": 129756773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531754694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I'm investigating the remaining ICEs</p>",
        "id": 129757216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531755058
    },
    {
        "content": "<p>PS we should talk about further region error reporting work too ... :)</p>",
        "id": 129757227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531755068
    },
    {
        "content": "<p>ah, I see the problem</p>",
        "id": 129757906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531755698
    },
    {
        "content": "<p>I didn't read the <code>resize_with</code> rustdocs closely enough :)</p>",
        "id": 129757911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531755709
    },
    {
        "content": "<p>it will sometimes truncate!</p>",
        "id": 129757913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531755714
    },
    {
        "content": "<p>Ah. I'm not sure if I checked the ICE last night after it finished building successfully because it was late.</p>",
        "id": 129758522,
        "sender_full_name": "davidtwco",
        "timestamp": 1531756217
    },
    {
        "content": "<p>So the ICE may have changed.</p>",
        "id": 129758527,
        "sender_full_name": "davidtwco",
        "timestamp": 1531756224
    },
    {
        "content": "<p>I think it all works now</p>",
        "id": 129758731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531756414
    },
    {
        "content": "<p>Great!</p>",
        "id": 129759363,
        "sender_full_name": "davidtwco",
        "timestamp": 1531756897
    },
    {
        "content": "<p>at least src/test/ui passes :)</p>",
        "id": 129759434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531756954
    },
    {
        "content": "<p>Apologies for not being able to wrap up those last few issues. Did we see much of an impact from the change with the memory usage?</p>",
        "id": 129799307,
        "sender_full_name": "davidtwco",
        "timestamp": 1531813314
    },
    {
        "content": "<p>for sure</p>",
        "id": 129801067,
        "sender_full_name": "lqd",
        "timestamp": 1531816210
    },
    {
        "content": "<p>(and not only memory apparently)</p>",
        "id": 129801172,
        "sender_full_name": "lqd",
        "timestamp": 1531816369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> does it say the memory diff on perf.rust-lang?</p>",
        "id": 129801905,
        "sender_full_name": "davidtwco",
        "timestamp": 1531817560
    },
    {
        "content": "<p>yes let me get you a link</p>",
        "id": 129801913,
        "sender_full_name": "lqd",
        "timestamp": 1531817580
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=3d5753fda1ee8f729da1061e931e13b043f479a5&amp;end=c1ea2d1eb1304c9d8de16b74ae863a8e1e58cd2f&amp;stat=max-rss\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=3d5753fda1ee8f729da1061e931e13b043f479a5&amp;end=c1ea2d1eb1304c9d8de16b74ae863a8e1e58cd2f&amp;stat=max-rss\">https://perf.rust-lang.org/compare.html?start=3d5753fda1ee8f729da1061e931e13b043f479a5&amp;end=c1ea2d1eb1304c9d8de16b74ae863a8e1e58cd2f&amp;stat=max-rss</a></p>",
        "id": 129801930,
        "sender_full_name": "lqd",
        "timestamp": 1531817614
    },
    {
        "content": "<p>at the bottom left there is a selector for which perf stat you want to show</p>",
        "id": 129801938,
        "sender_full_name": "lqd",
        "timestamp": 1531817641
    },
    {
        "content": "<p>Ah, thanks. Wasn't sure which one was memory usage.</p>",
        "id": 129802584,
        "sender_full_name": "davidtwco",
        "timestamp": 1531818490
    },
    {
        "content": "<p>Hopefully someone can have bors try again with that PR soon.</p>",
        "id": 129802591,
        "sender_full_name": "davidtwco",
        "timestamp": 1531818511
    },
    {
        "content": "<p>yeah it's a known travis issue at 6-7AM :) I've had it before; we can ping someone on the infra team if they're available (they might be sleeping :)</p>",
        "id": 129802897,
        "sender_full_name": "lqd",
        "timestamp": 1531818861
    },
    {
        "content": "<p>(alrighty, it's been retried)</p>",
        "id": 129803667,
        "sender_full_name": "lqd",
        "timestamp": 1531820145
    },
    {
        "content": "<p>still, the perf is atrocious :( I had hoped reducing the peak memory usage would do it, but apparently not. I expect though that the <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">#52034</a> change that <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> is working on <em>may</em> have a big effect</p>",
        "id": 129806722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531825387
    },
    {
        "content": "<p>also, 2GB is still ungreat.</p>",
        "id": 129806727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531825419
    },
    {
        "content": "<p>I wonder if there is much we can do to improve further</p>",
        "id": 129806731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531825433
    },
    {
        "content": "<p>seems almost certainly yes, would have to do a more compressed representation though</p>",
        "id": 129806769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531825446
    },
    {
        "content": "<p>perhaps something that takes advantage of repeated substructure, like a BDD</p>",
        "id": 129807103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826043
    },
    {
        "content": "<p>did we ever profile html5ever ?</p>",
        "id": 129807398,
        "sender_full_name": "lqd",
        "timestamp": 1531826514
    },
    {
        "content": "<p>I was just getting started on that</p>",
        "id": 129807450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826543
    },
    {
        "content": "<p>I'm going to build w/ <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span>'s branch</p>",
        "id": 129807452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826550
    },
    {
        "content": "<p>I don't remember us doing so</p>",
        "id": 129807453,
        "sender_full_name": "lqd",
        "timestamp": 1531826552
    },
    {
        "content": "<p>yeah</p>",
        "id": 129807455,
        "sender_full_name": "lqd",
        "timestamp": 1531826556
    },
    {
        "content": "<p>esp because of the OOMs I mean</p>",
        "id": 129807458,
        "sender_full_name": "lqd",
        "timestamp": 1531826562
    },
    {
        "content": "<p>hopefully it's liveness so that 52034 fixes it</p>",
        "id": 129807463,
        "sender_full_name": "lqd",
        "timestamp": 1531826579
    },
    {
        "content": "<p>started builds</p>",
        "id": 129807605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826779
    },
    {
        "content": "<p>well I expect liveness is a big part of it and that <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">#52034</a> will <em>help</em></p>",
        "id": 129807609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826791
    },
    {
        "content": "<p>let me review what njn wrote...</p>",
        "id": 129807613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826799
    },
    {
        "content": "<p>ah, yes, <code>precompute_borrows_out_of_scope</code>, our old friend</p>",
        "id": 129807624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> html5ever perf profile is kind of interesting:</p>\n<div class=\"codehilite\"><pre><span></span>athena. perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-max-depth 3 --tree-min-percent 5 --relative\nMatcher    : {do_mir_borrowck}\nMatches    : 5379\nNot Matches: 739\nPercentage : 100%\n\nTree\n| matched `{do_mir_borrowck}` (100% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (51% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check (47% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (47% total, 0% self) [...]\n: | rustc_mir::dataflow::impls::borrows::Borrows::new (31% total, 3% self)\n: : | &lt;std::collections::hash::map::HashMap&lt;K, V, S&gt;&gt;::insert (14% total, 7% self)\n: : : | &lt;std::collections::hash::map::HashMap&lt;K, V, S&gt;&gt;::try_resize (6% total, 4% self) [...]\n: : | &lt;rustc_mir::borrow_check::nll::region_infer::values::RegionValues&lt;N&gt;&gt;::contains (12% total, 12% self)\n: | &lt;rustc_mir::borrow_check::MirBorrowckCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; as rustc_mir::dataflow::DataflowResultsConsumer&lt;&#39;cx, &#39;tcx&gt;&gt;::visit_statement_entry (15% total, 0% self)\n: : | rustc_mir::borrow_check::MirBorrowckCtxt::consume_operand (5% total, 0% self)\n: : : | rustc_mir::borrow_check::MirBorrowckCtxt::access_place (5% total, 0% self) [...]\n: : | rustc_mir::borrow_check::MirBorrowckCtxt::mutate_place (5% total, 0% self)\n: : : | rustc_mir::borrow_check::MirBorrowckCtxt::access_place (5% total, 0% self) [...]\n</pre></div>",
        "id": 129816506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838572
    },
    {
        "content": "<p>RegionValues::contains <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
        "id": 129816529,
        "sender_full_name": "lqd",
        "timestamp": 1531838620
    },
    {
        "content": "<p>this <em>may</em> mean that <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span>'s work on <a href=\"https://github.com/rust-lang/rust/issues/52034\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52034\">#52034</a> will be huge -- depends on how much of the <code>liveness::generate</code> is from variables that contain regions</p>",
        "id": 129816531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838629
    },
    {
        "content": "<p>well, that is I think from the code that figures out the \"lifetime\" of each borrow</p>",
        "id": 129816541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838642
    },
    {
        "content": "<p>it does a DFS from the start of the borrow</p>",
        "id": 129816590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838651
    },
    {
        "content": "<p>and watches out for exits from the region</p>",
        "id": 129816591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838655
    },
    {
        "content": "<p>there is definitely something kind of \"ugh\" there</p>",
        "id": 129816602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838682
    },
    {
        "content": "<p>because we then later do a dataflow</p>",
        "id": 129816606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838687
    },
    {
        "content": "<p>which essentially duplicates that work</p>",
        "id": 129816609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838691
    },
    {
        "content": "<p>but I'm not sure how to do better than the DFS per borrow yet</p>",
        "id": 129816616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838699
    },
    {
        "content": "<p>we could remove the dataflow later on, though it doesn't seem to be particularly high on any profile</p>",
        "id": 129816629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838716
    },
    {
        "content": "<p>just silly</p>",
        "id": 129816633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838719
    },
    {
        "content": "<p>do we have a way of guesstimating how many of these liveness requests are actually from variables with regions ?</p>",
        "id": 129816640,
        "sender_full_name": "lqd",
        "timestamp": 1531838727
    },
    {
        "content": "<p>the DFS itself could be coded more efficiently I imagine</p>",
        "id": 129816643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838731
    },
    {
        "content": "<p>hard to tell; I can check the mir-dump debug info I suppose</p>",
        "id": 129816652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838748
    },
    {
        "content": "<p>it's gonna be huge</p>",
        "id": 129816699,
        "sender_full_name": "lqd",
        "timestamp": 1531838766
    },
    {
        "content": "<p>indeed</p>",
        "id": 129816711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838777
    },
    {
        "content": "<p>running that now</p>",
        "id": 129816714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838782
    },
    {
        "content": "<p>there must be some huge fn</p>",
        "id": 129816718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838786
    },
    {
        "content": "<p>I suspect that a lot of those variables contain regions</p>",
        "id": 129816722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838792
    },
    {
        "content": "<p>because we seem to have a lot of loans to trace out :)</p>",
        "id": 129816728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838799
    },
    {
        "content": "<p>now I'm intrigued what the offending code looks like in html5ever :D</p>",
        "id": 129816749,
        "sender_full_name": "lqd",
        "timestamp": 1531838844
    },
    {
        "content": "<p>heh indeed</p>",
        "id": 129816844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531838927
    },
    {
        "content": "<p>well, I see 38% of total execution time spent traversing types, looking for regions that are live</p>",
        "id": 129816940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839058
    },
    {
        "content": "<p>you already added the \"quick check\" that skips that if there are no live regions</p>",
        "id": 129816952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839070
    },
    {
        "content": "<p>hmm</p>",
        "id": 129816966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839097
    },
    {
        "content": "<p>I wonder if it would be faster to \"invert\" the liveness code</p>",
        "id": 129817014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839126
    },
    {
        "content": "<p>I am trying to remember :) I seem to recall this being true in a previous compiler I worked on</p>",
        "id": 129817027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839147
    },
    {
        "content": "<p>that is, traditional liveness figures out the liveness of all variables at each point</p>",
        "id": 129817031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839155
    },
    {
        "content": "<p>but another way to do it is to look for any given variable and find the points where it is live</p>",
        "id": 129817039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839164
    },
    {
        "content": "<p>we are more interested in <em>that</em> in the end</p>",
        "id": 129817042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839169
    },
    {
        "content": "<p>i.e., you could imagine creating a <code>SparseBitSet</code> for each variable that has regions in its type</p>",
        "id": 129817054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839184
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 129817059,
        "sender_full_name": "lqd",
        "timestamp": 1531839192
    },
    {
        "content": "<p>iterating over all uses of the variable and walking backwards from each one</p>",
        "id": 129817060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839195
    },
    {
        "content": "<p>annoyingly, we don't have a ready index for that</p>",
        "id": 129817067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839203
    },
    {
        "content": "<p>but I suppose we could build one in a single O(n) walk</p>",
        "id": 129817073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839208
    },
    {
        "content": "<p>the advantage would be:</p>",
        "id": 129817093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839237
    },
    {
        "content": "<p>we get a bitset for each variable</p>",
        "id": 129817102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839242
    },
    {
        "content": "<p>then we iterate the regions within the variable ONCE</p>",
        "id": 129817140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839247
    },
    {
        "content": "<p>and or the entire bitset into them</p>",
        "id": 129817143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839250
    },
    {
        "content": "<p>instead of what we do now, which is to iterate the regions in the variable at each point and add a single bit</p>",
        "id": 129817156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839260
    },
    {
        "content": "<p>in other words, there is a sort of impedance mismatch right now with the current setup</p>",
        "id": 129817184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839304
    },
    {
        "content": "<p>this may also simplify the \"Drop live\" vs \"Use live\" distinction</p>",
        "id": 129817196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839324
    },
    {
        "content": "<p>that is, we would basically walk backwards from drops -- if we encounter a USE, that converts into a USE LIVE, but it's all still part of a single visit</p>",
        "id": 129817206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839342
    },
    {
        "content": "<p>right now we actually compute liveness TWICE I think</p>",
        "id": 129817216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839352
    },
    {
        "content": "<p>yeah, this seems like a win</p>",
        "id": 129817233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839362
    },
    {
        "content": "<p>or at least worth a try</p>",
        "id": 129817261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839366
    },
    {
        "content": "<p>sounds worth a try indeed!</p>",
        "id": 129817304,
        "sender_full_name": "lqd",
        "timestamp": 1531839444
    },
    {
        "content": "<p>sort of sad to have two bits of liveness code but ... c'est la vie</p>",
        "id": 129817371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839501
    },
    {
        "content": "<p>I do wonder if the behavior with html5ever is a rare incident or if it's a pattern we already encounter at a smaller scale, maybe hidden in the perf overhead we're seeing elsewhere</p>",
        "id": 129817595,
        "sender_full_name": "lqd",
        "timestamp": 1531839765
    },
    {
        "content": "<p>yeah</p>",
        "id": 129817709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839945
    },
    {
        "content": "<p>hard to know</p>",
        "id": 129817712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839947
    },
    {
        "content": "<p>it is certainly also true for tuple-stress</p>",
        "id": 129817718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839956
    },
    {
        "content": "<p>but that case has an easy fix (ignore non-region variables)</p>",
        "id": 129817763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531839967
    },
    {
        "content": "<p>yeah. maybe I'll look at this crate a bit later as well (I remember it needs bigger stack sizes to build because of heavy macro/syn/quote usage :)</p>",
        "id": 129817850,
        "sender_full_name": "lqd",
        "timestamp": 1531840085
    },
    {
        "content": "<p>(hehe the current version of html5ever cargo checks just fine in 2s, 30x faster than this 2y old version)</p>",
        "id": 129819702,
        "sender_full_name": "lqd",
        "timestamp": 1531842451
    },
    {
        "content": "<p>the non-NLL version cargo checks in 1.8 seconds :)</p>",
        "id": 129819941,
        "sender_full_name": "simulacrum",
        "timestamp": 1531842745
    },
    {
        "content": "<p>opened up <a href=\"https://github.com/rust-lang/rust/issues/52460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52460\">https://github.com/rust-lang/rust/issues/52460</a></p>",
        "id": 129819975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531842809
    },
    {
        "content": "<p>still, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, that is very interesting</p>",
        "id": 129819978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531842814
    },
    {
        "content": "<p>in particular, when we talk about our NLL performance targets</p>",
        "id": 129819981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531842821
    },
    {
        "content": "<p>we really want to check current crates :)</p>",
        "id": 129819984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531842825
    },
    {
        "content": "<p>Generally speaking though optimizing NLL for the pain points (e.g. this html5ever) may bring wins to the other crates which is why I think it's worth it</p>",
        "id": 129820075,
        "sender_full_name": "simulacrum",
        "timestamp": 1531842945
    },
    {
        "content": "<p>yeah, on the one hand we're lucky that the old version showcases a pathological case in rustc, and on the other, lucky that people will, <em>hopefully</em>, have a better experience than one might think just looking at the nll perf dashboard :)</p>",
        "id": 129820133,
        "sender_full_name": "lqd",
        "timestamp": 1531843007
    },
    {
        "content": "<p>oh for sure <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 129820151,
        "sender_full_name": "lqd",
        "timestamp": 1531843029
    },
    {
        "content": "<p>I'm sure there are new crates that have the same pathological behavior too</p>",
        "id": 129820214,
        "sender_full_name": "simulacrum",
        "timestamp": 1531843083
    },
    {
        "content": "<p>maybe some of the ones which OOMed during the crater run</p>",
        "id": 129820517,
        "sender_full_name": "lqd",
        "timestamp": 1531843470
    }
]