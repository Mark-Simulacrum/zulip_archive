[
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was asking me some questions about liveness and I'm moving it here</p>",
        "id": 128844194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298449
    },
    {
        "content": "<p>so we compute currently two sets of liveness bits</p>",
        "id": 128844195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298455
    },
    {
        "content": "<p>there is definitely <em>some</em> overlap here</p>",
        "id": 128844197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298458
    },
    {
        "content": "<p>the first set is \"regular use live\" — this implies that a variable will be used later on in a \"regular\" way. e.g., <code>foo(x)</code> makes <code>x</code> live for stuff that came before it</p>",
        "id": 128844205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298479
    },
    {
        "content": "<p>the second set is \"drop live\" — this implies that a variable will be <em>dropped</em> later on ... these are implicit actions generated by the compiler. So e.g. with <code>{ let x = vec![...]; ... }</code> the <code>x</code> will be \"drop live\" during the <code>...</code> because at the end of the block we are going to drop it</p>",
        "id": 128844222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298517
    },
    {
        "content": "<p>(note that <code>mem::drop(x)</code> is just a regular function call, despite its name)</p>",
        "id": 128844228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298526
    },
    {
        "content": "<p>there is overlap between these two sets because most things that will be used later may also be dropped — but not <em>all</em> things</p>",
        "id": 128844241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298552
    },
    {
        "content": "<p>notably integers or things that do not implement <code>Drop</code></p>",
        "id": 128844245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298560
    },
    {
        "content": "<p>will not have a <code>Drop</code> opcode</p>",
        "id": 128844283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298563
    },
    {
        "content": "<p>so actually they are just kind of two distinct, but sometimes overlapping, sets</p>",
        "id": 128844293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298582
    },
    {
        "content": "<p>yeah makes sense</p>",
        "id": 128844314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298612
    },
    {
        "content": "<p>I think I was confused because you mentioned one thing being a subset of the other one</p>",
        "id": 128844328,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298629
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you mentioned sparse sets</p>",
        "id": 128844331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298632
    },
    {
        "content": "<p>I may have read it wrong :)</p>",
        "id": 128844335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298635
    },
    {
        "content": "<p>using them may well make sense</p>",
        "id": 128844336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298636
    },
    {
        "content": "<blockquote>\n<p>I may have read it wrong :)</p>\n</blockquote>\n<p>no, I did say that, but I was mistaken</p>",
        "id": 128844341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298643
    },
    {
        "content": "<p>ok</p>",
        "id": 128844344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298649
    },
    {
        "content": "<p>the other optoin — instead of sparse sets — is to go \"all in\" with dense sets</p>",
        "id": 128844348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298654
    },
    {
        "content": "<p>this is what the other dataflow does</p>",
        "id": 128844349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298657
    },
    {
        "content": "<p>yeah, your explanation matches my understanding then :)</p>",
        "id": 128844350,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298660
    },
    {
        "content": "<p>e.g. if you have N variables and M blocks</p>",
        "id": 128844355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298665
    },
    {
        "content": "<p>we currently allocate M dense sets of N bits each</p>",
        "id": 128844361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298674
    },
    {
        "content": "<p>we <em>could</em> allocate 1 dense set of M*N bits</p>",
        "id": 128844366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298680
    },
    {
        "content": "<p>and then just operate on subsets of that</p>",
        "id": 128844406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298685
    },
    {
        "content": "<p>this is what the main dataflow does, for locality or whatever else</p>",
        "id": 128844407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298692
    },
    {
        "content": "<p>it is unclear which is better :)</p>",
        "id": 128844409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298695
    },
    {
        "content": "<p>sparse sets may well be better</p>",
        "id": 128844411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298699
    },
    {
        "content": "<p>if you do that it could make sense to merge drops and uses</p>",
        "id": 128844419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298710
    },
    {
        "content": "<p>I was hoping off on suggesting much experimentation here because it's not <em>that</em> big a percentage of our overall time</p>",
        "id": 128844428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298722
    },
    {
        "content": "<p>I mean, you need more than one bit</p>",
        "id": 128844431,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298722
    },
    {
        "content": "<p>but it's easy enough to experiment with a sparse set really</p>",
        "id": 128844435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298729
    },
    {
        "content": "<p>we have the code after all (hey, you wrote it=)</p>",
        "id": 128844444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298739
    },
    {
        "content": "<p>yes, I've copied it but yeah :P</p>",
        "id": 128844457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298759
    },
    {
        "content": "<p>:)</p>",
        "id": 128844467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298780
    },
    {
        "content": "<blockquote>\n<p>if you do that it could make sense to merge drops and uses</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does this makes sense?</p>",
        "id": 128844472,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298798
    },
    {
        "content": "<p>uh</p>",
        "id": 128844531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298813
    },
    {
        "content": "<p>I mean in the dense case and using more than one bit</p>",
        "id": 128844532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298815
    },
    {
        "content": "<p>i.e., really we would be allocating 2 sets of M*N</p>",
        "id": 128844546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298827
    },
    {
        "content": "<p>but it could be 1 of 2 x M x N instead?</p>",
        "id": 128844556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298833
    },
    {
        "content": "<p>well I guess it uses less memory :)</p>",
        "id": 128844566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298849
    },
    {
        "content": "<p>yeah, that could make sense, idk</p>",
        "id": 128844577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298857
    },
    {
        "content": "<p>it may not make that much difference</p>",
        "id": 128844588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298870
    },
    {
        "content": "<p>to do 2 big alloc vs 1 big one :)</p>",
        "id": 128844593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298875
    },
    {
        "content": "<p>it's not entirely clear that doing less alloc is really a win here anyway, would have to measure</p>",
        "id": 128844607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530298900
    },
    {
        "content": "<p>yeah, but how much of those big allocs are done?</p>",
        "id": 128844678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298964
    },
    {
        "content": "<p>isn't one per fn?</p>",
        "id": 128844679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530298969
    },
    {
        "content": "<blockquote>\n<p>it's not entirely clear that doing less alloc is really a win here anyway, would have to measure</p>\n</blockquote>\n<p>anyway, agree, it should always be measured</p>",
        "id": 128844698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530299002
    },
    {
        "content": "<p>anyway, if it's 2% of the thing it may not worth spending a lot of time now</p>",
        "id": 128844712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530299021
    },
    {
        "content": "<p>cool</p>",
        "id": 128844769,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530299053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I'm gonna focus on <a href=\"https://github.com/rust-lang/rust/issues/51818\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51818\">https://github.com/rust-lang/rust/issues/51818</a>, then will ping you to see if worth to do the sparse bit set stuff and the rest I guess can wait</p>",
        "id": 128844805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1530299109
    }
]