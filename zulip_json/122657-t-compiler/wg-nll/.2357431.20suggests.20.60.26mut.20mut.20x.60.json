[
    {
        "content": "<p>This looks like an \"easy fix\" potentially -- I was chatting with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> about maybe picking it up</p>",
        "id": 154864813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148635
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154864941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547148740
    },
    {
        "content": "<p>I haven't really looked at all here, I admit</p>",
        "id": 154865069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148845
    },
    {
        "content": "<p>I guess first thing would be to find where that suggestion is being generated</p>",
        "id": 154865079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547148855
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 154865168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547148946
    },
    {
        "content": "<p>going to check this tomorrow</p>",
        "id": 154865171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547148952
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">term</span><span class=\"p\">.</span><span class=\"n\">mutate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154936532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what are the new semantics exactly of matching on something that's <code>&amp;Option</code> and having the arms being <code>Option</code>s?</p>",
        "id": 154936575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231882
    },
    {
        "content": "<p>does something other than that happens?</p>",
        "id": 154936616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231917
    },
    {
        "content": "<p>I mean, inside the arms after the <code>=&gt;</code> do I have something special?</p>",
        "id": 154936631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231936
    },
    {
        "content": "<p>is the behavior written somewhere? :)</p>",
        "id": 154936646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231947
    },
    {
        "content": "<p>I guess there's an RFC, going to look for it</p>",
        "id": 154936649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547231955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>how much of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\">https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md</a> is implemented on 2018?</p>",
        "id": 154939524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547234168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway, besides from the question I've asked ...</p>",
        "id": 154943304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237335
    },
    {
        "content": "<p>I think we should just remove <code>help: consider changing this to be a mutable reference: &amp;mut mut term</code> entirely in this case</p>",
        "id": 154943340,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237371
    },
    {
        "content": "<p>I guess the code is checking the local but is not considering that there's <code>&amp;mut</code> before the local already</p>",
        "id": 154943363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237400
    },
    {
        "content": "<p>I wonder how in the code can I check if there's a &amp;mut before the local</p>",
        "id": 154943429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237429
    },
    {
        "content": "<blockquote>\n<p>how much of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\">https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md</a> is implemented on 2018?</p>\n</blockquote>\n<p>all of it</p>",
        "id": 154943840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237769
    },
    {
        "content": "<p>also in 2015 I think</p>",
        "id": 154943843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237773
    },
    {
        "content": "<p>so basically there is an implicit <code>ref</code> added to the bindings</p>",
        "id": 154943854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547237792
    },
    {
        "content": "<p>oh ok, I read that differently given that the issue associated <a href=\"https://github.com/rust-lang/rust/issues/42640\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42640\">https://github.com/rust-lang/rust/issues/42640</a> is open</p>",
        "id": 154944021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547237977
    },
    {
        "content": "<blockquote>\n<p>I think we should just remove help: consider changing this to be a mutable reference: &amp;mut mut term entirely in this case<br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we need to do this, right?</p>\n</blockquote>",
        "id": 154944130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238055
    },
    {
        "content": "<p>also ...</p>",
        "id": 154944144,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238067
    },
    {
        "content": "<blockquote>\n<p>I guess the code is checking the local but is not considering that there's &amp;mut before the local already<br>\nI wonder how in the code can I check if there's a &amp;mut before the local</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 154944164,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547238098
    },
    {
        "content": "<blockquote>\n<p>oh ok, I read that differently given that the issue associated <a href=\"https://github.com/rust-lang/rust/issues/42640\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42640\">https://github.com/rust-lang/rust/issues/42640</a> is open</p>\n</blockquote>\n<p>that...should probably be closed</p>",
        "id": 154948352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547241982
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, looking more closely, I think the \"span\" we are using here is a bit odd</p>",
        "id": 154948417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242064
    },
    {
        "content": "<p>I think I've figured this out</p>",
        "id": 154948495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547242100
    },
    {
        "content": "<p>anyway, what do you refer by \"span\" is a bit odd?</p>",
        "id": 154948512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547242114
    },
    {
        "content": "<p>I guess what we really <strong>want</strong> to be saying is</p>\n<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow `*term` as mutable, as it is behind a `&amp;` reference\n  --&gt; src/main.rs:12:5\n   |\n8  |        let term = match &amp;term {\n   |                         ----- help: consider changing this to be a mutable reference: `&amp;mut term`\n...\n12 |     term.mutate();\n   |     ^^^^ `term` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n</pre></div>",
        "id": 154948547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242158
    },
    {
        "content": "<p>note that this is a totally different spot we are underlining</p>",
        "id": 154948561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242165
    },
    {
        "content": "<p>however I don't know that we have the logic in place to track that sort of thing back</p>",
        "id": 154948578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242181
    },
    {
        "content": "<p>in any case the code seems to be getting confused, and probably that \"help\" should just not be printing</p>",
        "id": 154948657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242212
    },
    {
        "content": "<p>as we are not smart enough to track it back to the <code>&amp;term</code> we really want</p>",
        "id": 154948663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242222
    },
    {
        "content": "<p>I am guessing that somehow the problem has to do with the MIR desugaring</p>",
        "id": 154948681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242250
    },
    {
        "content": "<p>i.e., the error message maybe sort of makes sense if you look at the desugaring somehow</p>",
        "id": 154948712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242274
    },
    {
        "content": "<blockquote>\n<p>I think I've figured this out</p>\n</blockquote>\n<p>oh?</p>",
        "id": 154948721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242283
    },
    {
        "content": "<blockquote>\n<p>however I don't know that we have the logic in place to track that sort of thing back</p>\n</blockquote>\n<p>I don't want to confuse you: I don't expect us to correctly underline line 8. That would be the <em>ideal</em> thing, but I don't know that the MIR contains enough info for us to be that smart right now.</p>",
        "id": 154948743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547242313
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>however I don't know that we have the logic in place to track that sort of thing back</p>\n</blockquote>\n<p>I don't want to confuse you: I don't expect us to correctly underline line 8. That would be the <em>ideal</em> thing, but I don't know that the MIR contains enough info for us to be that smart right now.</p>\n</blockquote>\n<p>don't worry, I guess we can go step by step, first I'd just remove that note</p>",
        "id": 154949673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547243151
    },
    {
        "content": "<p>I was wondering if I could just check if the thing is a reference and you are mutably borrowing and in that case avoid doing it</p>",
        "id": 154949785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547243252
    },
    {
        "content": "<p>but yeah, I should take a look at the mir to see what's going on</p>",
        "id": 154949858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547243312
    },
    {
        "content": "<p>by mir desugaring you meant, to see the mir dump and see the statements generated?</p>",
        "id": 154949865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547243332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> specifically I was checking if I could add some logic here <a href=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L392\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L392\">https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L392</a> and figure that you're mutably borrowing a reference</p>",
        "id": 154950100,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547243554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok -- is that the path the code goes down, in this example?</p>",
        "id": 154950841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547244256
    },
    {
        "content": "<p>unsure, I need to properly check</p>",
        "id": 154952904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547246156
    },
    {
        "content": "<p>but according to the error message it should go through that match</p>",
        "id": 154953644,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547246982
    },
    {
        "content": "<p>don’t remember now if it definitely goes through that arm or may be a different one</p>",
        "id": 154953704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547247017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it executes this branch <a href=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\">https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380</a> and in particular <code>binding_mode</code> is <code>ty::BindingMode::BindByValue(hir::Mutability::MutImmutable)</code></p>",
        "id": 154982740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547296923
    },
    {
        "content": "<p>and I figured that I have no idea what that is</p>",
        "id": 154982758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547296942
    },
    {
        "content": "<p>unsure why <code>ByValue</code> and why <code>MutImmutable</code>, I'd have said that is <code>ByReference</code> and <code>MutMutable</code>, hehehe</p>",
        "id": 154982760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547296979
    },
    {
        "content": "<p>it's probably talking about a different thing that the one I'm assuming</p>",
        "id": 154982768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547296992
    },
    {
        "content": "<p>I'm assuming <code>&amp;mut term</code></p>",
        "id": 154982773,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547297009
    },
    {
        "content": "<p>The binding mode is referring to the <code>term</code> in <code>Some(term)</code></p>",
        "id": 154982935,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547297301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yeah, that was the other possibility but still that should be of type <code>&amp;X</code> so I'd assume we get a <code>ty::BindingMode::BindByReference(hir::Mutability::MutImmutable</code> instead of <code>BindByValue</code></p>",
        "id": 154983572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547298639
    },
    {
        "content": "<p>and I also wonder how to get the <code>&amp;mut</code> info</p>",
        "id": 154983576,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547298652
    },
    {
        "content": "<p>Actually, I'm wrong, it's the <code>term</code> in the second <code>let term = </code>. (having the same name for all of the variables isn't great...)</p>",
        "id": 154985902,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547303128
    },
    {
        "content": "<p>agreed that confuses a lot :P</p>",
        "id": 154998612,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325127
    },
    {
        "content": "<p>but, I think it's ...</p>",
        "id": 154998613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Some(term) =&gt; &amp;mut term,\n   |          --------- help: consider changing this to be a mutable reference: &amp;mut mut term\n</pre></div>",
        "id": 154998621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325161
    },
    {
        "content": "<p>it's the term that's comes from that arm</p>",
        "id": 154998636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325200
    },
    {
        "content": "<p><code>Some(term)</code></p>",
        "id": 154998638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325206
    },
    {
        "content": "<p>and given match ergonomics, I believe that's a <code>&amp;</code> + the supposed type</p>",
        "id": 154998648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325232
    },
    {
        "content": "<p>which is <code>X</code></p>",
        "id": 154998695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325267
    },
    {
        "content": "<p>that's why I believe that should be a <code>&amp;X</code></p>",
        "id": 154998699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ^^^</p>",
        "id": 154998700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547325288
    },
    {
        "content": "<p>It might be better to look at a case without a match. This results in the same diagnostics issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ref_term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">X</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ref_term</span><span class=\"p\">.</span><span class=\"n\">mutate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154999307,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547326431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> back with this</p>",
        "id": 155105771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491332
    },
    {
        "content": "<p>yes, your example is simpler</p>",
        "id": 155105779,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491338
    },
    {
        "content": "<p>checking it now</p>",
        "id": 155105782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491340
    },
    {
        "content": "<p>I think what I've said is still valid though</p>",
        "id": 155105801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491363
    },
    {
        "content": "<p>so ...</p>",
        "id": 155106094,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491584
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ref_term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">X</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ref_term</span><span class=\"p\">.</span><span class=\"n\">mutate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155106100,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491594
    },
    {
        "content": "<p>the error is ...</p>",
        "id": 155106102,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0596]: cannot borrow `*ref_term` as mutable, as it is behind a `&amp;` reference\n  --&gt; src/test/ui/nll/issue-57431.rs:15:5\n   |\n11 |         &amp;mut term\n   |         --------- help: consider changing this to be a mutable reference: `&amp;mut mut term`\n...\n15 |     ref_term.mutate();\n   |     ^^^^^^^^ `ref_term` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0596`.\n</pre></div>",
        "id": 155106112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491607
    },
    {
        "content": "<p>so here <a href=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\">https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380</a> <code>local_decl.is_user_variable.as_ref()</code> is returning a thing which it's<code>binding_mode</code> is <code>ty::BindingMode::BindByValue(hir::Mutability::MutImmutable)</code></p>",
        "id": 155106216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491690
    },
    {
        "content": "<p>so I guess that's just talking about <code>term</code> and not <code>&amp;mut term</code></p>",
        "id": 155106463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491825
    },
    {
        "content": "<p>I wonder if I can get somehow that <code>&amp;mut</code> applied to <code>term</code>?</p>",
        "id": 155106501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547491857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thought on this?</p>",
        "id": 155111457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::mutability_errors: report_mutability_error(access_place=(*_2), span=src/test/ui/nll/issue-57431.rs:15:5: 15:13, the_place_err=(*_2), error_access=MutableBorrow, location=bb4[2],)\nDEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::mutability_errors: report_mutability_error: access_place_desc=Some(&quot;*ref_term&quot;)\nDEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::mutability_errors: report_mutability_error: item_msg=&quot;`*ref_term`&quot;, reason=&quot;, as it is behind a `&amp;` reference&quot;\nDEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::error_reporting: borrow_spans: use_span=src/test/ui/nll/issue-57431.rs:15:5: 15:13 location=bb4[2]\nDEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::mutability_errors: report_mutability_error: act=&quot;borrow as mutable&quot;, acted_on=&quot;borrowed as mutable&quot;\nDEBUG 2019-01-14T19:43:40Z: rustc_mir::borrow_check::mutability_errors: report_mutability_error:local=_2, local_decl=LocalDecl { mutability: Not, is_user_variable: Some(Set(Var(VarBindingForm { binding_mode: BindByValue(MutImmutable), opt_ty_info: None, opt_match_place: Some((None, src/test/ui/nll/issue-57431.rs:10:20: 14:6)), pat_span: src/test/ui/nll/issue-57431.rs:10:9: 10:17 }))), internal: false, is_block_tail: None, ty: &amp;&#39;_#6r X, user_ty: UserTypeProjections { contents: [] }, name: Some(ref_term), source_info: SourceInfo { span: src/test/ui/nll/issue-57431.rs:10:9: 10:17, scope: scope[4] }, visibility_scope: scope[3] },)\n</pre></div>",
        "id": 155111466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495688
    },
    {
        "content": "<p>this is the logs I'm getting</p>",
        "id": 155111468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495693
    },
    {
        "content": "<p>unsure for instance why <code>access_place</code> is <code>Some(\"*ref_term\")</code></p>",
        "id": 155111490,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495724
    },
    {
        "content": "<p>I see that the local this is referring to is <code>_2</code></p>",
        "id": 155111723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495914
    },
    {
        "content": "<p>from mir output that is ...</p>",
        "id": 155111728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        StorageLive(_3);                 // bb2[0]: scope 1 at src/test/ui/nll/issue-57431.rs:11:9: 11:18\n        _3 = &amp;&#39;_#2r mut _1;              // bb2[1]: scope 1 at src/test/ui/nll/issue-57431.rs:11:9: 11:18\n        _2 = &amp;&#39;_#3r (*_3);               // bb2[2]: scope 1 at src/test/ui/nll/issue-57431.rs:11:9: 11:18\n        StorageDead(_3);                 // bb2[3]: scope 1 at src/test/ui/nll/issue-57431.rs:12:5: 12:6\n</pre></div>",
        "id": 155111771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495955
    },
    {
        "content": "<p>line 11 is ...</p>",
        "id": 155111776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495963
    },
    {
        "content": "<p><code>&amp;mut term</code></p>",
        "id": 155111796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547495982
    },
    {
        "content": "<p>from there I guess <code>_3</code> is <code>&amp;mut term</code> and <code>_1</code> is <code>term</code></p>",
        "id": 155111907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547496045
    },
    {
        "content": "<p><code>_2</code> is <code>&amp;*(&amp;mut term)</code>?</p>",
        "id": 155111929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547496063
    },
    {
        "content": "<p>if so ... why?</p>",
        "id": 155111939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547496067
    },
    {
        "content": "<p>The <code>else</code> branch has type <code>&amp;X</code>, so <code>&amp;mut term</code> is being coerced to match</p>",
        "id": 155112035,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547496125
    },
    {
        "content": "<p>you're right :)</p>",
        "id": 155112145,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547496217
    },
    {
        "content": "<p>so then why is <code>_2</code> which is <code>&amp;*(&amp;mut term)</code> a <code>ty::BindingMode::BindByValue</code> and <code>hir::Mutability::MutImmutable</code> thing?</p>",
        "id": 155112314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547496350
    },
    {
        "content": "<p>It's declared <code>let ref_temp</code>, which is immutable since there's no <code>mut</code> and by value because there's no <code>ref</code></p>",
        "id": 155112735,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547496699
    },
    {
        "content": "<p>ahh so my understanding about what's BindByValue and what's MutImmutable is completely different from the one it has</p>",
        "id": 155141811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547522055
    },
    {
        "content": "<p>you mean that that's solely based on the presence of a <code>mut</code> in the binding and a <code>ref</code>?</p>",
        "id": 155141815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547522073
    },
    {
        "content": "<p>OK, that second example is interesting</p>",
        "id": 155206559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588150
    },
    {
        "content": "<p>Hmm</p>",
        "id": 155206562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588156
    },
    {
        "content": "<p>so the problem here is that the <code>&amp;</code> we see in the source is one that was autogenerated from a coercion</p>",
        "id": 155206629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588182
    },
    {
        "content": "<p>it feels like something we could track</p>",
        "id": 155206635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588190
    },
    {
        "content": "<p>in which case we could say \"if the borrow in question comes from a coercion, don't print this suggestion\" or something</p>",
        "id": 155206650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588205
    },
    {
        "content": "<p>ahh you're right</p>",
        "id": 155208352,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547589701
    },
    {
        "content": "<p>any pointer or idea on where that could be tracked ... :)</p>",
        "id": 155208797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547590135
    },
    {
        "content": "<p>going to check out tomorrow</p>",
        "id": 155208826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547590174
    },
    {
        "content": "<blockquote>\n<p>so the problem here is that the <code>&amp;</code> we see in the source is one that was autogenerated from a coercion</p>\n</blockquote>\n<p>ok, so this makes sense but I wonder if my approach was correct</p>",
        "id": 155338261,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734925
    },
    {
        "content": "<p>so ...</p>",
        "id": 155338262,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734926
    },
    {
        "content": "<p>I could track those autogenerated <code>&amp;</code> from a coercion, need to investigate exactly where</p>",
        "id": 155338306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734977
    },
    {
        "content": "<p>the question is ...</p>",
        "id": 155338310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734980
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380\">https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src/librustc_mir/borrow_check/mutability_errors.rs#L380</a></p>",
        "id": 155338311,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547734981
    },
    {
        "content": "<p>there I was checking for a <code>BindByValue</code> binding so no occurrence of the borrow</p>",
        "id": 155338400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547735041
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> said that's related with <code>ref</code> or <code>mut</code> in a binding so that's not what I should look for</p>",
        "id": 155338458,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547735061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  the question is how can I figure out there if the binding is related  to a borrow or a mutable borrow?</p>",
        "id": 155338532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547735155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back to this, I figured that just by adding some kind of information that says if the ref is autogenerated or not is enough</p>",
        "id": 155361046,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547752657
    },
    {
        "content": "<p>my previous question was wrong :)</p>",
        "id": 155361059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547752663
    },
    {
        "content": "<p>I wonder where could I track this ... any idea on where to look?</p>",
        "id": 155361135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547752700
    },
    {
        "content": "<p>I guess we want <code>Projection</code> to have an autogenerated boolean?</p>",
        "id": 155361165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1547752736
    },
    {
        "content": "<p>this is not about the <em>projection</em></p>",
        "id": 156323778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763035
    },
    {
        "content": "<p>at least I don't think so</p>",
        "id": 156323785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763041
    },
    {
        "content": "<p>it's about the actual <strong>borrow</strong>, I think?</p>",
        "id": 156323796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763048
    },
    {
        "content": "<p>that is, there is some statement like <code>X = &amp;Y.Z</code>, and I think it is this <em>statement</em> that might carry a flag about it being synthetic</p>",
        "id": 156323970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763232
    },
    {
        "content": "<p>I think if we wanted to trace this, we would extend the MIR and HAIR with such a flag -- <strong>maybe</strong> in the source-info somewhere? -- and then we would modify the HAIR so that when we are generating \"auto-generated\" refs, we set this flag, and same for HAIR-&gt;MIR lowering</p>",
        "id": 156324046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763293
    },
    {
        "content": "<p>as an example, here is a point in creating the HAIR where we know that the borrow is synthetic:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139\">https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139</a></p>",
        "id": 156324693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763845
    },
    {
        "content": "<blockquote>\n<p>that is, there is some statement like <code>X = &amp;Y.Z</code>, and I think it is this <em>statement</em> that might carry a flag about it being synthetic</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the meaning of being synthetic to start with? :)</p>",
        "id": 156548241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089641
    },
    {
        "content": "<p>I guess I understand given the context but just in case clarification won't hurt</p>",
        "id": 156548320,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089712
    },
    {
        "content": "<blockquote>\n<p>as an example, here is a point in creating the HAIR where we know that the borrow is synthetic:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139\">https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/librustc_mir/hair/cx/expr.rs#L134-L139</a></p>\n</blockquote>\n<p>I guess we may add a flag to <code>ExprKind::Borrow</code> to handle the \"auto-generated\" fact?</p>",
        "id": 156548336,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548089753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> </p>\n<blockquote>\n<p>what's the meaning of being synthetic to start with? :)</p>\n</blockquote>\n<p>by synthetic, I meant \"does not corespond to a <code>&amp;</code> that the user typed\"</p>\n<blockquote>\n<p>I guess we may add a flag to ExprKind::Borrow to handle the \"auto-generated\" fact?</p>\n</blockquote>\n<p>yeah basically</p>",
        "id": 156636450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548188789
    }
]