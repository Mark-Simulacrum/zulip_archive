[
    {
        "content": "<p>Hi, I'm trying to fix <a href=\"https://github.com/rust-lang/rust/issues/51351\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51351\">https://github.com/rust-lang/rust/issues/51351</a>, and would like to discuss it with some one, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  left comments, but looks like he is not around.</p>",
        "id": 129591338,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531475275
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> welcome here.  Niko is on vacation these days so he isn't online for long periods. Dont' worry, he will reply you here when he is online.</p>",
        "id": 129591572,
        "sender_full_name": "DPC",
        "timestamp": 1531475660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> I'm around a bit -- feel free to leave questions, and/or open a [WIP] PR</p>",
        "id": 129611037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531499399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I added comments to my fix <a href=\"https://github.com/mikhail-m1/rust/commit/f391ec585622673bddd5d0d30a0831910c7844dc\" target=\"_blank\" title=\"https://github.com/mikhail-m1/rust/commit/f391ec585622673bddd5d0d30a0831910c7844dc\">https://github.com/mikhail-m1/rust/commit/f391ec585622673bddd5d0d30a0831910c7844dc</a> , It will be great if you share your thoughts</p>",
        "id": 129759245,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531756788
    },
    {
        "content": "<p>it's to ugly to create PR...</p>",
        "id": 129759309,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531756825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ok I sort of forget the context but will take a look!</p>",
        "id": 129759455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531756995
    },
    {
        "content": "<p>ah yes, <em>that</em> problem.</p>",
        "id": 129759459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531757005
    },
    {
        "content": "<p>/me shudders</p>",
        "id": 129759462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531757013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ok so I read the diffs, now I have to refresh my memory from the issue itself :)</p>",
        "id": 129762033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531759688
    },
    {
        "content": "<p>ok right so this is the \"simple case\" of the problem I think...</p>",
        "id": 129762085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531759777
    },
    {
        "content": "<p>I don't understand why for <code>fn with_signature&lt;'a, T, F&gt;(cell: Cell&lt;&amp;'a ()&gt;, t: T, op: F)</code> <code>rustc::middle::resolve_lifetime: insert_late_bound_lifetimes: lifetime T#0 with id NodeId(17) is late-bound</code> and same for F, but T and F are not lifetimes</p>",
        "id": 129776006,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531775341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> so, <em>that</em> example is the more complex one I think</p>",
        "id": 129791258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798274
    },
    {
        "content": "<p>that is, there are two cases</p>",
        "id": 129791263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798286
    },
    {
        "content": "<p>the simplest case is the one that people reduced the ICE to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Here, <code>'a</code> is not used <strong>anywhere</strong> in the signature.</p>",
        "id": 129791272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798318
    },
    {
        "content": "<p>This is the one I was targeting initially.</p>",
        "id": 129791314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798325
    },
    {
        "content": "<p>Sorry I didn't get back to you last night, ran out of time.</p>",
        "id": 129791323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798344
    },
    {
        "content": "<p>but I think it's probably worth talking through the closure case</p>",
        "id": 129791556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798699
    },
    {
        "content": "<p>that said, I can't really do that right now, I'll be back in ~7 hours or something :)</p>",
        "id": 129791574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531798740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  yes, my changes don't fix next ICE, trying find why   </p>\n<div class=\"codehilite\"><pre><span></span>fn produce&lt;&#39;a&gt;() {\n    move || { let x: &amp;&#39;a () = &amp;(); };\n}\n</pre></div>",
        "id": 129801823,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531817402
    },
    {
        "content": "<p>I've verified my assumption, for the closure  <code>tcx.is_late_bound_map</code> returns None, we need to find another way to get late bound regions</p>",
        "id": 129805568,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1531823293
    },
    {
        "content": "<p>yeah... I think I know why they don't fix it :) but I have to think about <em>how</em> to best fix it</p>",
        "id": 129807482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1531826639
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  i found a way to fix the closure case by get up by calling hir.get_parent_node(..), and add late_bound regions for parent too, <br>\nbut your comment about add it to <code>ClosureRegionRequirements</code> looks better, but I need more details to start and an example for tests propagation to parent</p>",
        "id": 129935066,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532010564
    },
    {
        "content": "<p>argh I forgot to get back to you on this, yes. Just added it to my to-do list for today to write up something</p>",
        "id": 129935211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532010660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> how much have you looked at the <code>ClosureRegionRequirements</code> code? i.e., you get the basic idea of it?</p>",
        "id": 129945941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532022743
    },
    {
        "content": "<p>I left some notes <a href=\"https://github.com/rust-lang/rust/issues/52113#issuecomment-406417018\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52113#issuecomment-406417018\">in a github comment</a> <span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> -- not sure if they are helpful or not -- let me know and I will try to elaborate. =) At least I worked through what I think should happen in my own head, though, and I think it should all work out.</p>",
        "id": 129957489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532035019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  thanks for helpful comment, just two questions:<br>\n1. What should i do with 51351? I can create PR from <a href=\"https://github.com/mikhail-m1/rust/commit/f391ec585622673bddd5d0d30a0831910c7844dc\" target=\"_blank\" title=\"https://github.com/mikhail-m1/rust/commit/f391ec585622673bddd5d0d30a0831910c7844dc\">commit</a> but it doesn't look right:</p>\n<ul>\n<li>add generic types as regions (because middle treat them  as late_region)  </li>\n<li>create <code>region, FreeRegion, BrRegion</code>.</li>\n<li>Is order of how function processed is determinate? Are closures processed first?</li>\n</ul>",
        "id": 129984715,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532076591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> you can create a 'WIP' PR (put [WIP] in the title of the PR so people know you are working on it). Becomes easy for people to review it.</p>",
        "id": 129988000,
        "sender_full_name": "DPC",
        "timestamp": 1532081904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> first off, <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> is right that a <code>[WIP]</code> PR is often very helpful. </p>\n<p>To answer your questions:</p>\n<blockquote>\n<p>Is order of how function processed is determinate? Are closures processed first?</p>\n</blockquote>\n<p>Sort of — closures will always <strong>finish</strong> being processed first, at least. This is because the closure's creator will invoke the <code>mir_borrowck</code> query on each closure that appears within its function body in order to get the <code>ClosureRegionRequirements</code>.</p>\n<blockquote>\n<p>create region, FreeRegion, BrRegion</p>\n</blockquote>\n<p>I don't quite understand what you mean by this -- oh, you mean create one of those for each late-bound-region on the fn -- this sounds roughly right, yes. One thing to be careful of though is that we <strong>already</strong> have late-bound regions for things that appear in the fn arguments etc. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in that case, <code>'a</code> is a LBR, but we will have created a corresponding universal region for it already. So I guess we want to check the table for that to see if there is already an entry.</p>\n<blockquote>\n<p>What should i do with 51351?</p>\n</blockquote>\n<p>I think a <code>[WIP]</code> PR is a good idea --  it seems like addressing the case of <code>fn foo&lt;'a&gt;() { let x: &amp;'a u32 = ...; }</code> is a good starting point in any case for the more complex problem, since it too requires enumerating the late-bound regions. Though there are <em>some</em> differences (e.g., in the closure case, we won't have entries for <em>any</em> late-bound regions from the enclosing fn's signature, I don't think).</p>",
        "id": 130038064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532146043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> left <a href=\"https://github.com/rust-lang/rust/pull/52620#pullrequestreview-139509051\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52620#pullrequestreview-139509051\">some comments on your PR</a> -- looks basically good, but I did have one concern about how we check for duplicates</p>",
        "id": 130153301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532357876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks,   I will try to update it today, just two questions:<br>\n1. do I need  to add more tests like <code>vector.push(an_reference)</code> from an closure?<br>\n2. I don't see anything else to do  for <a href=\"https://github.com/rust-lang/rust/issues/52113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52113\">https://github.com/rust-lang/rust/issues/52113</a> , did I missed something?</p>",
        "id": 130154248,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532358748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> I don't know what the <code>vector.push(an_reference)</code> is referring to...</p>",
        "id": 130154854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359259
    },
    {
        "content": "<p>I think that there is more to do for <a href=\"https://github.com/rust-lang/rust/issues/52113\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52113\">#52113</a>, let me see... maybe I'll try to check out your branch and test it...</p>",
        "id": 130154882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359282
    },
    {
        "content": "<p>I imagine though that something like this might pass or fail incorrectly...</p>",
        "id": 130154907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359305
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![allow(warnings)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">produce</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or maybe not that... I'm basically nervous about constraints getting created between the <code>'a</code> that results from instantiate the LBR of the parent and the <code>'a</code> that appears in the upvars.</p>",
        "id": 130155218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359604
    },
    {
        "content": "<p>that said, it would also be interesting to see if I can concoct a test that fails with your branch as is</p>",
        "id": 130155226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359618
    },
    {
        "content": "<p>I'm not sure if it's possible -- basically we'd want to engineer some kind of false conflict between the LBR in a closure's parameters and the LBR from the enclosing fn --</p>",
        "id": 130155251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359642
    },
    {
        "content": "<p>given that, currently, I think the LBR in a closure sig are always anonymous</p>",
        "id": 130155263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359655
    },
    {
        "content": "<p>that may not be possible (today)</p>",
        "id": 130155265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532359659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I mean </p>\n<div class=\"codehilite\"><pre><span></span>fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a u32, mut y: Vec&lt;&amp;&#39;b u32&gt;) {\n  let closure = move || y.push(x);\n }\n</pre></div>\n\n\n<p>for <code>'a:'b</code> and <code>'b:'a</code></p>",
        "id": 130156638,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532361313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  your sample</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![allow(warnings)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">produce</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Bazinga</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or maybe not that... I'm basically nervous about constraints getting created between the <code>'a</code> that results from instantiate the LBR of the parent and the <code>'a</code> that appears in the upvars.</p>\n</blockquote>\n<p>after change to <code>data: &amp;'a mut Vec&lt;&amp;'a u32&gt;</code> gives</p>\n<div class=\"codehilite\"><pre><span></span>15 | fn produce&lt;&#39;a&gt;(data: &amp;&#39;a mut Vec&lt;&amp;&#39;a u32&gt;, value: &amp;&#39;a u32) -&gt; impl Bazinga + &#39;a {\n   |                ---- lifetime `&#39;1` appears in the type of `data`\n...\n18 |         data.push(value);\n   |         ^^^^^^^^^^^^^^^^ argument requires that `&#39;a` must outlive `&#39;1`\n</pre></div>\n\n\n<p>and a sample from <a href=\"https://github.com/rust-lang/rust/issues/52113#issue-338985041\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52113#issue-338985041\">https://github.com/rust-lang/rust/issues/52113#issue-338985041</a> gives</p>\n<div class=\"codehilite\"><pre><span></span>8 |     let x = move || {\n  |         ^ free region requires that `&#39;a` must outlive `&#39;static`\n</pre></div>\n\n\n<p>without nll both compile.  I'm trying to understand why...</p>",
        "id": 130204046,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532429643
    },
    {
        "content": "<p>ok — I suspect I know why but I'll have to try it out</p>",
        "id": 130206403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433238
    },
    {
        "content": "<p>I think my build of your branch is done</p>",
        "id": 130206405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433241
    },
    {
        "content": "<p>oh, ok, so</p>",
        "id": 130206519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433371
    },
    {
        "content": "<p>the <em>first</em> problem is this:</p>",
        "id": 130206520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433378
    },
    {
        "content": "<p>the late-bound lifetimes from the base fn are being (I believe) created at the wrong point</p>",
        "id": 130206526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433392
    },
    {
        "content": "<p>in particular, they are considered late-bound <em>on the closure itself</em></p>",
        "id": 130206529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433401
    },
    {
        "content": "<p>which is incorrect</p>",
        "id": 130206530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433403
    },
    {
        "content": "<p>this is what causes us to product the first error:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; /Users/nmatsakis/tmp/m1.rs:11:9\n   |\n8  | fn produce&lt;&#39;a&gt;(data: &amp;mut Vec&lt;&amp;&#39;a u32&gt;, value: &amp;&#39;a u32) -&gt; impl Bazinga + &#39;a {\n   |                ---- lifetime `&#39;1` appears in the type of `data`\n...\n11 |         data.push(value);\n   |         ^^^^^^^^^^^^^^^^ argument requires that `&#39;a` must outlive `&#39;1`\n</pre></div>",
        "id": 130206539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433420
    },
    {
        "content": "<p>in this case, the <code>'a</code> is considered a \"local\" region to the closure, and hence not one where we are able to propagate a \"closure requirement\" back to the caller</p>",
        "id": 130206551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433453
    },
    {
        "content": "<p>to fix this, we have to create those LBR from the base-def-id at a different point</p>",
        "id": 130206556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433471
    },
    {
        "content": "<p>in particular, before <a href=\"https://github.com/rust-lang/rust/blob/a2af8667b1a5166137510aeb2aaad9945f81db6d/src/librustc_mir/borrow_check/nll/universal_regions.rs#L486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a2af8667b1a5166137510aeb2aaad9945f81db6d/src/librustc_mir/borrow_check/nll/universal_regions.rs#L486\">this line executes</a></p>",
        "id": 130206610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532433504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> ping</p>",
        "id": 130267750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515282
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , I didn't have time to rewrite it because I need to change way how regions from inputs_output filtered out</p>",
        "id": 130267886,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532515528
    },
    {
        "content": "<p>ok :)</p>",
        "id": 130267889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515543
    },
    {
        "content": "<p>just checking in</p>",
        "id": 130267894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515552
    },
    {
        "content": "<p>hope I will do it today</p>",
        "id": 130267896,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532515557
    },
    {
        "content": "<p>let me know if I can help</p>",
        "id": 130274618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532524604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>   I'm stuck with update <code>closure_mapping</code>, cannot find a way how to add later bound regions to <code>region_mapping</code></p>",
        "id": 130300408,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532550548
    },
    {
        "content": "<p>because now only regions from <code>closure_ty</code> are added, and assert fails</p>",
        "id": 130300520,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532550642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> you are trying to do the change I suggested, specifically? (That is, the reordering sort of?)</p>",
        "id": 130300527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550656
    },
    {
        "content": "<p>can I see the diff?</p>",
        "id": 130300530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550660
    },
    {
        "content": "<p>diff is almost the same, yes i made your suggestion, but after that assert inside <code>fn closure_mapping</code> starts failing</p>",
        "id": 130300650,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532550794
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        assert_eq!(\n            region_mapping.len(),\n            expected_num_vars,\n            &quot;index vec had unexpected number of variables&quot;);\n</pre></div>",
        "id": 130300730,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532550876
    },
    {
        "content": "<p>would still be helpful to see the diff</p>",
        "id": 130300737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550886
    },
    {
        "content": "<p>I don't remember the details :)</p>",
        "id": 130300741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550889
    },
    {
        "content": "<p>that is, exactly wht change you made :)</p>",
        "id": 130300745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550894
    },
    {
        "content": "<p>just a sec</p>",
        "id": 130300748,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532550901
    },
    {
        "content": "<p>i've updater PR <a href=\"https://github.com/rust-lang/rust/pull/52620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52620\">https://github.com/rust-lang/rust/pull/52620</a></p>",
        "id": 130300964,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532551156
    },
    {
        "content": "<blockquote>\n<p>diff is almost the same, yes i made your suggestion, but after that assert inside <code>fn closure_mapping</code> starts failing</p>\n</blockquote>\n<p>yes, so, this doesn't surprise me :) in fact, this is good</p>",
        "id": 130301265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551530
    },
    {
        "content": "<p>I left one comment but I don't think it'll fix your problem per se</p>",
        "id": 130301269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551545
    },
    {
        "content": "<p>but the reason that the assertion is failing -- I think -- is precisely because we're not handling the closure case correctly</p>",
        "id": 130301316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551566
    },
    {
        "content": "<p>that is, we need to upgrade the code around the <code>ClosureRegionRequirements</code></p>",
        "id": 130301331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551600
    },
    {
        "content": "<p>right now it works <em>kind of</em> implicitly</p>",
        "id": 130301335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551610
    },
    {
        "content": "<p>that is</p>",
        "id": 130301336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551613
    },
    {
        "content": "<p>there is a closure \"defining type\"</p>",
        "id": 130301343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551621
    },
    {
        "content": "<p>as i understand, after analysis, <code>apply_requirements</code> calls <code>closure_mapping</code> for get all external regions for <code>ClosureRegionRequirements</code>, and I need find a way how to add late bound regions, because now only regions from <code>closure_ty</code> are added</p>",
        "id": 130301354,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532551635
    },
    {
        "content": "<p>and we basically number the regions as they appear in there, and reference those numbers</p>",
        "id": 130301355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551637
    },
    {
        "content": "<p>right, it needs to sort of \"mirror\" that set so it knows how to map them</p>",
        "id": 130301370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551666
    },
    {
        "content": "<p>so annoying</p>",
        "id": 130301467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551752
    },
    {
        "content": "<p>I cannot find a function to get <code>Region</code> by <code>RegionVid</code></p>",
        "id": 130301486,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532551789
    },
    {
        "content": "<p>that's not really a thing</p>",
        "id": 130301491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551795
    },
    {
        "content": "<p>I'm not quite sure what you mean :)</p>",
        "id": 130301542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551811
    },
    {
        "content": "<p>you can do <code>tcx.mk_region(ty::ReVar(v2))</code></p>",
        "id": 130301549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551841
    },
    {
        "content": "<p>to create a <code>Region&lt;'tcx&gt;</code> for a given region vid-- maybe that's what you mean?</p>",
        "id": 130301558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551855
    },
    {
        "content": "<p>so one thing we could do maybe</p>",
        "id": 130301579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551892
    },
    {
        "content": "<p>After adding late_bound regions I have <code>RegionVid</code> for them, and I think I need get back <code>Region</code>s and add them to vector</p>",
        "id": 130301586,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532551906
    },
    {
        "content": "<p>is to have the <code>ClosureRegionRequirements</code> also include the list of late-bound regions from the parent fn that were instantiated</p>",
        "id": 130301587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551907
    },
    {
        "content": "<blockquote>\n<p>After adding late_bound regions I have <code>RegionVid</code> for them, and I think I need get back <code>Region</code>s and add them to vector</p>\n</blockquote>\n<p>do you mean you want to get back the \"named\" regions? i.e., with the names from the signature?</p>",
        "id": 130301642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551943
    },
    {
        "content": "<p>if the CRR contained this list, then I guess that the <code>apply_requirements</code> code could -- when constructing this map -- basically go over each of those regions and look it up in the <code>indices</code> vector to find the corresponding <code>RegionVid</code> in the creator</p>",
        "id": 130301656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551981
    },
    {
        "content": "<p>yes, but it's just idea</p>",
        "id": 130301667,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532551991
    },
    {
        "content": "<p>yeah I think that's the thing to do</p>",
        "id": 130301672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551999
    },
    {
        "content": "<p>ok, so you can get back the original <code>Region</code>... well, the indices map goes the wrong way</p>",
        "id": 130301679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552011
    },
    {
        "content": "<p>we build up a reverse vector in the <code>RegionInferenceContext</code></p>",
        "id": 130301684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552020
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L274-L282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fefe81605d6111faa8dbb3635ab2c51d59de740a/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L274-L282\">right here</a></p>",
        "id": 130301738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552054
    },
    {
        "content": "<p>but maybe we just want to create a <code>Vec&lt;Region&gt;</code> containing all the LBR from the closure parent</p>",
        "id": 130301770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552093
    },
    {
        "content": "<p>in the <code>UniversalRegions</code></p>",
        "id": 130301775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552098
    },
    {
        "content": "<p>and then when creating the <code>ClosureRegionRequirements</code>, we would embed that vector</p>",
        "id": 130301805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552137
    },
    {
        "content": "<p>something like that?</p>",
        "id": 130301813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552147
    },
    {
        "content": "<p>(we could create the vector in the <code>replace_late_bound_regions_with_nll_infer_vars</code> that you added, I mean)</p>",
        "id": 130301884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532552194
    },
    {
        "content": "<p>yes It should help</p>",
        "id": 130301889,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532552207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> I'm looking over the list and this is one of the only major issues without a PR; were you able to make any progress? can I help in some way?</p>",
        "id": 130352056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532618921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sorry, I didn't received a notification about your message. I tried to pass a vector with regions from <code>replace_late_bound_regions_with_nll_infer_vars</code>to <code>apply_requirements</code> I didn't find a way,  because <code>UniveralRegions</code> from closure analysis is already destroyed and I have only <code>ClosureRegionRequirements&lt;'gcx&gt;</code> maybe I should try just to get regions again by <code>tcx.is_late_bound_map</code> and recreate <code>ty::Region</code>s.  In any case I hope I will have enough time during  weekend to fix it.</p>",
        "id": 130397843,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532682045
    },
    {
        "content": "<p>It works! I need to cleanup my code, I will update the PR today or tomorrow.</p>",
        "id": 130403440,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1532690189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> nice!</p>",
        "id": 130449999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532751439
    }
]