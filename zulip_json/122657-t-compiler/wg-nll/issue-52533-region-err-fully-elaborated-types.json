[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> figured I'd spin off a new topic for <a href=\"https://github.com/rust-lang/rust/issues/52533\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52533\">#52533</a> since the other PR got merged yesterday.</p>",
        "id": 130138720,
        "sender_full_name": "davidtwco",
        "timestamp": 1532338460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Currently have it outputting the following, will open a WIP PR once I've run tests and see what else it affects:</p>\n<div class=\"codehilite\"><pre><span></span>warning: not reporting region error due to nll\n  --&gt; src/test/ui/issue-52533.rs:15:16\n   |\n15 |     foo(|a, b| b)\n   |                ^\n\nwarning: unused variable: `a`\n  --&gt; src/test/ui/issue-52533.rs:15:10\n   |\n15 |     foo(|a, b| b)\n   |          ^ help: consider using `_a` instead\n   |\n   = note: #[warn(unused_variables)] on by default\n\nerror: unsatisfied lifetime constraints\n  --&gt; src/test/ui/issue-52533.rs:15:16\n   |\n15 |     foo(|a, b| b)\n   |           -  - ^ closure was supposed to return data with lifetime `&#39;1` but it is returning data with lifetime `&#39;2`\n   |           |  |\n   |           |  has type `&amp;&#39;1 u32`\n   |           has type `&amp;&#39;2 u32`\n\nerror: aborting due to previous error\n</pre></div>\n\n\n<p>I have no idea why the span is off-by-one.</p>",
        "id": 130141982,
        "sender_full_name": "davidtwco",
        "timestamp": 1532343771
    },
    {
        "content": "<p>Fixed the span issue but found that this solution fails on some more complex cases, will keep at it.</p>",
        "id": 130143514,
        "sender_full_name": "davidtwco",
        "timestamp": 1532346206
    },
    {
        "content": "<p>looks nice</p>",
        "id": 130149614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354050
    },
    {
        "content": "<p>The approach I was taking probably won't work.</p>",
        "id": 130149625,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354075
    },
    {
        "content": "<p>How did you intend for those elaborated types to be constructed?</p>",
        "id": 130149630,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354091
    },
    {
        "content": "<p>The approach I used above called <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/infer/struct.InferCtxt.html?search=#method.extract_type_name\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/infer/struct.InferCtxt.html?search=#method.extract_type_name\">extract_type_name</a> and then looked through the string for <code>&amp;</code> and added our synthesized region names. That doesn't work when <code>extract_type_name</code> has <code>'_#2r</code> types of regions in it. I could work around that with some string manipulation but that seems like a poor solution. </p>\n<p>Haven't worked out how to do it properly yet.</p>",
        "id": 130149745,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354225
    },
    {
        "content": "<p>I wasn't sure what I wanted to do</p>",
        "id": 130149841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354347
    },
    {
        "content": "<p>one thing I was considering</p>",
        "id": 130149844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354349
    },
    {
        "content": "<p>is extracting the <code>ppaux</code> code</p>",
        "id": 130149847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354355
    },
    {
        "content": "<p>which is currently a total mess</p>",
        "id": 130149850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354358
    },
    {
        "content": "<p>and, in this version, allow it to be characterized by some helper fns</p>",
        "id": 130149858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354373
    },
    {
        "content": "<p>for example \"how do I print this region\"</p>",
        "id": 130149861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354377
    },
    {
        "content": "<p>I had been looking at that, wasn't sure if that was worth doing.</p>",
        "id": 130149866,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354390
    },
    {
        "content": "<p>one problem with my idea is that it will be very tempting to try and cleanup the code</p>",
        "id": 130149916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354407
    },
    {
        "content": "<p>and that is a rat hole that never seems to work ;)</p>",
        "id": 130149925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354413
    },
    {
        "content": "<p>otoh hacking in \"yet another random helper thing\" might .. be one too many</p>",
        "id": 130149932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354429
    },
    {
        "content": "<p>but basically there are two approaches I guess:</p>",
        "id": 130149947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354455
    },
    {
        "content": "<p>we can generate a type that includes regions</p>",
        "id": 130149956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354465
    },
    {
        "content": "<p>(I'd probably put <code>'1</code> and <code>'2</code> and <code>'_</code> for evrything else)</p>",
        "id": 130149976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354475
    },
    {
        "content": "<p>or we can customize the pretty-printing code</p>",
        "id": 130149978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354479
    },
    {
        "content": "<p>I'm torn on it, but the disadvantage I see of synthesizing an actual type</p>",
        "id": 130149987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354492
    },
    {
        "content": "<p>is that it \"pollutes\" our type system representation</p>",
        "id": 130149992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354503
    },
    {
        "content": "<p>it maybe that all we need is a \"region callback\"?</p>",
        "id": 130150000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354511
    },
    {
        "content": "<p>Some way of providing the functions that it uses to generate a new region name for use.</p>",
        "id": 130150054,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354537
    },
    {
        "content": "<p>(for the pp code, we traditioanlly use thread-local data to configure it)</p>",
        "id": 130150061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532354548
    },
    {
        "content": "<p>So, I have a slightly yucky, albeit not that long, version that will manipulate the string with <code>&amp;'_#2r</code> type references and replace them with our own.</p>",
        "id": 130150418,
        "sender_full_name": "davidtwco",
        "timestamp": 1532354976
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/52648\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52648\">#52648</a> with what I've got.</p>",
        "id": 130152185,
        "sender_full_name": "davidtwco",
        "timestamp": 1532356777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can fix that incorrect closure/function labelling in this PR if you'd like (since it is yet to be reviewed and may need work if we don't like the current approach). I'm not sure how to detect whether or not a external region comes from a function or a closure arguments though?</p>",
        "id": 130213230,
        "sender_full_name": "davidtwco",
        "timestamp": 1532441231
    },
    {
        "content": "<p>say a bit more? why does it matter if it comes from the arguments per se?</p>",
        "id": 130213341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441376
    },
    {
        "content": "<p>It doesn't need to be arguments, I guess. But the case we're seeing in <code>dyn-trait.rs</code> mentions closures incorrectly. That branch is triggered when the <code>outlived_fr</code> is external (from what I remember) - so it seems like <code>outlived_fr</code> can be external in the case of a captured upvar (what that branch was implemented for) or in the case of a argument from a function (since it is also triggering for <code>dyn-trait.rs</code>).</p>",
        "id": 130213563,
        "sender_full_name": "davidtwco",
        "timestamp": 1532441561
    },
    {
        "content": "<p>I think that to decide whether to talk about \"closure\" vs \"fn\" we have to check the <code>mir_def_id</code></p>",
        "id": 130213670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441648
    },
    {
        "content": "<p>i.e., the same scenario can occur in either case</p>",
        "id": 130213678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441653
    },
    {
        "content": "<p>in one case, it cannot escape the \"closure body\"</p>",
        "id": 130213686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441662
    },
    {
        "content": "<p>in one case, it cannot escape the \"fn body\"</p>",
        "id": 130213689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441666
    },
    {
        "content": "<p>Right, I wasn't sure how I'd find out which of  \"closure\" or \"fn\"  to refer to it as.</p>",
        "id": 130213702,
        "sender_full_name": "davidtwco",
        "timestamp": 1532441674
    },
    {
        "content": "<p>there is a fn called <code>tcx.is_closure</code> that takes a def-id</p>",
        "id": 130213727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532441709
    },
    {
        "content": "<p>I already renamed that function from <code>report_closure_error</code> to <code>report_escaping_data</code> in the PR.</p>",
        "id": 130213730,
        "sender_full_name": "davidtwco",
        "timestamp": 1532441711
    },
    {
        "content": "<p>Sounds good, I'll quickly make that change.</p>",
        "id": 130213741,
        "sender_full_name": "davidtwco",
        "timestamp": 1532441723
    },
    {
        "content": "<p>Fixed, PR now has: </p>\n<div class=\"codehilite\"><pre><span></span>warning: not reporting region error due to nll\n  --&gt; $DIR/dyn-trait.rs:32:16\n   |\nLL |     static_val(x); //~ ERROR cannot infer\n   |                ^\n\nerror: borrowed data escapes outside of function\n  --&gt; $DIR/dyn-trait.rs:32:5\n   |\nLL | fn with_dyn_debug_static&lt;&#39;a&gt;(x: Box&lt;dyn Debug + &#39;a&gt;) {\n   |                              - `x` is a reference that is only valid in the function body\nLL |     static_val(x); //~ ERROR cannot infer\n   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 130214228,
        "sender_full_name": "davidtwco",
        "timestamp": 1532442226
    },
    {
        "content": "<p>nice</p>",
        "id": 130214283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532442262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you clarify 'grody'?</p>",
        "id": 130236258,
        "sender_full_name": "davidtwco",
        "timestamp": 1532465165
    },
    {
        "content": "<p>\"hacky\" I guess</p>",
        "id": 130236269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465177
    },
    {
        "content": "<p>I'm still torn though on the best way</p>",
        "id": 130236271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465184
    },
    {
        "content": "<p>tbh I didn't fully understand what you wrote</p>",
        "id": 130236273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465188
    },
    {
        "content": "<p>I guess it relied on <code>to_string</code> inserting <code>'_#3r</code> regions with the actual region numbers?</p>",
        "id": 130236287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465210
    },
    {
        "content": "<p>or did I misunderstand what I was reading</p>",
        "id": 130236291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465216
    },
    {
        "content": "<p>I think I still favor some kind of hacked up variant on pretty-printing that knows about this desire to control how regions are printed out</p>",
        "id": 130236311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465231
    },
    {
        "content": "<p>No, you're right, it looks for the <code>'_#</code> and removes that, leaving the <code>&amp;</code> that it looks for.</p>",
        "id": 130236428,
        "sender_full_name": "davidtwco",
        "timestamp": 1532465345
    },
    {
        "content": "<p>Just wasn't familiar with the word.</p>",
        "id": 130236432,
        "sender_full_name": "davidtwco",
        "timestamp": 1532465349
    },
    {
        "content": "<p>another option we <em>could</em> do is to add a new kind of region variant</p>",
        "id": 130236529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465409
    },
    {
        "content": "<p>but that seems like it will have pretty broad impact</p>",
        "id": 130236544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465423
    },
    {
        "content": "<p>hmm an interesting thing is that all the regions in this case are going to be <code>ReVar</code></p>",
        "id": 130236572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465449
    },
    {
        "content": "<p>well I guess that doesn't help so much</p>",
        "id": 130236573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465454
    },
    {
        "content": "<p>but I was imaginging you could have some kind of callback for how to print <code>ReVar</code></p>",
        "id": 130236589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465465
    },
    {
        "content": "<p>It seems like some enhancements to the pretty printer seem to be the preferred approach.</p>",
        "id": 130236631,
        "sender_full_name": "davidtwco",
        "timestamp": 1532465494
    },
    {
        "content": "<p>but I guess that's no different than having a callback for all regions</p>",
        "id": 130236636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465501
    },
    {
        "content": "<p>I think that is my preferred approach so far, what do you think?</p>",
        "id": 130236642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465511
    },
    {
        "content": "<p>somehow controlling the string as it is created seems nicer than trying to match on it afterwards</p>",
        "id": 130236658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532465522
    },
    {
        "content": "<p>Yeah, that seems worth a shot.</p>",
        "id": 130236699,
        "sender_full_name": "davidtwco",
        "timestamp": 1532465531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so I'm looking at the categorization code</p>",
        "id": 130267957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515653
    },
    {
        "content": "<p>I've changed in my PR some more logic to use it</p>",
        "id": 130267962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515670
    },
    {
        "content": "<p>it is producing this diff, which seems suboptimal</p>",
        "id": 130267964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515677
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">---- [ui (nll)] ui/lifetime-errors/ex2c-push-inference-variable.rs stdout ----</span>\n<span class=\"gh\">diff of stderr:</span>\n\n5          |             ^^^\n6\n7       error[E0623]: lifetime mismatch\n<span class=\"gd\">-         --&gt; $DIR/ex2c-push-inference-variable.rs:17:5</span>\n<span class=\"gi\">+         --&gt; $DIR/ex2c-push-inference-variable.rs:16:13</span>\n9          |\n10      LL | fn foo&lt;&#39;a, &#39;b, &#39;c&gt;(x: &amp;&#39;a mut Vec&lt;Ref&lt;&#39;b, i32&gt;&gt;, y: Ref&lt;&#39;c, i32&gt;) {\n11         |                                   ------------      ------------ these two types are declared with different lifetimes...\n\n12      LL |     let z = Ref { data: y.data };\n<span class=\"gd\">-       LL |     x.push(z); //~ ERROR lifetime mismatch</span>\n<span class=\"gd\">-          |     ^^^^^^^^^ ...but data from `y` flows into `x` here</span>\n<span class=\"gi\">+          |             ^^^^^^^^^^^^^^^^^^^^ ...but data from `y` flows into `x` here</span>\n15\n16      error: aborting due to previous error\n</pre></div>",
        "id": 130267965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515679
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 130268008,
        "sender_full_name": "davidtwco",
        "timestamp": 1532515700
    },
    {
        "content": "<p>I think this is because we have an assignment (from the aggregate)</p>",
        "id": 130268012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515720
    },
    {
        "content": "<p>and that is ranked higher than the call etc</p>",
        "id": 130268015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515723
    },
    {
        "content": "<p>I guess that's just adding a more specific category or changing the order?</p>",
        "id": 130268017,
        "sender_full_name": "davidtwco",
        "timestamp": 1532515727
    },
    {
        "content": "<p>I'm trying to think: I think that in general assignments from aggregates are unlikely to be good candidates</p>",
        "id": 130268023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515740
    },
    {
        "content": "<p>since they <em>tend</em> to \"propagate\" regions rather than constrain them</p>",
        "id": 130268029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515750
    },
    {
        "content": "<p>(there are exceptions of course)</p>",
        "id": 130268031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515756
    },
    {
        "content": "<p>I guess I could add a new category to detect this sort of case</p>",
        "id": 130268042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515794
    },
    {
        "content": "<p>I believe I added that because it was enough to make one of the previous tests in a PR work.</p>",
        "id": 130268043,
        "sender_full_name": "davidtwco",
        "timestamp": 1532515796
    },
    {
        "content": "<p>right</p>",
        "id": 130268045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515801
    },
    {
        "content": "<p>I think that was needed because the closure escape messages</p>",
        "id": 130268090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515814
    },
    {
        "content": "<p>were not triggering because they are tied to the category</p>",
        "id": 130268091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515820
    },
    {
        "content": "<p>I do wonder about that though</p>",
        "id": 130268092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515826
    },
    {
        "content": "<p>e.g., does the category really matter?</p>",
        "id": 130268093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515832
    },
    {
        "content": "<p>I guess it depends on the phrasing of the message</p>",
        "id": 130268096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515844
    },
    {
        "content": "<p>I guess that's the pain point with categories. We can re-order them, but that could have lots of consequences to tests, or add more specific ones, but then it just becomes a mechanism for special casing things.</p>",
        "id": 130268098,
        "sender_full_name": "davidtwco",
        "timestamp": 1532515847
    },
    {
        "content": "<p>it seems to me that this is somewhat inevitable</p>",
        "id": 130268115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515909
    },
    {
        "content": "<p>I've been messing with the pretty printing, it's something.</p>",
        "id": 130268155,
        "sender_full_name": "davidtwco",
        "timestamp": 1532515924
    },
    {
        "content": "<p>I mean ultimately we're dealing in heuristics, so yeah... it's gonna be fine-tunning and relying on having a decent set of tests</p>",
        "id": 130268156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515926
    },
    {
        "content": "<p>which we... may or may not have :)</p>",
        "id": 130268159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532515930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ok I'm studying this a bit more, I may have an idea for an alternative to sorting the constraints :)</p>",
        "id": 130268717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532516946
    },
    {
        "content": "<p>Oh?</p>",
        "id": 130268725,
        "sender_full_name": "davidtwco",
        "timestamp": 1532516997
    },
    {
        "content": "<p>grr, idk, it's tricky. It feels like what we want to do somehow is to classify not so much as \"boring or interesting\" but to try and classify the <em>role</em> that each constriant plays along the path. That is, some constraints serve to \"forward\" one side or the other along. But somewhere in the middle comes at least one constraint that serves to put the one side in tension with the other. How to distinguish that, I'm still not entirely sure. One thing I was looking at is whether it might be interesting to look at locations with multiple constraints associated with them. e.g., looking at the example I gave above, the path is</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-07-25T11:12:01Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: best_blame_constraint: path=[\n    &quot;ConstraintIndex(27): (\\&#39;_#3r: \\&#39;_#14r) due to All&quot;,\n    &quot;ConstraintIndex(1): (\\&#39;_#14r: \\&#39;_#7r) due to Boring(bb0[5])&quot;,\n    &quot;ConstraintIndex(9): (\\&#39;_#7r: \\&#39;_#6r) due to Boring(bb0[5])&quot;,\n    &quot;ConstraintIndex(8): (\\&#39;_#6r: \\&#39;_#18r) due to Boring(bb0[5])&quot;,\n    &quot;ConstraintIndex(11): (\\&#39;_#18r: \\&#39;_#8r) due to Boring(bb0[6])&quot;,\n    &quot;ConstraintIndex(10): (\\&#39;_#8r: \\&#39;_#17r) due to Interesting(bb0[6])&quot;,\n    &quot;ConstraintIndex(16): (\\&#39;_#17r: \\&#39;_#21r) due to Boring(bb0[11])&quot;,\n    &quot;ConstraintIndex(21): (\\&#39;_#21r: \\&#39;_#10r) due to Interesting(bb0[12])&quot;,\n    &quot;ConstraintIndex(19): (\\&#39;_#10r: \\&#39;_#20r) due to Interesting(bb0[12])&quot;,\n    &quot;ConstraintIndex(13): (\\&#39;_#20r: \\&#39;_#16r) due to Boring(bb0[9])&quot;,\n    &quot;ConstraintIndex(5): (\\&#39;_#16r: \\&#39;_#13r) due to Interesting(bb0[2])&quot;,\n    &quot;ConstraintIndex(24): (\\&#39;_#13r: \\&#39;_#2r) due to All&quot;\n]\n</pre></div>\n\n\n<p>where <code>bb0[12]</code> is the thing I want us to select.</p>",
        "id": 130269009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517484
    },
    {
        "content": "<p>but of course other things appear more than once (eg., <code>bb0[5]</code>, albeit in a \"boring\" capacity)</p>",
        "id": 130269016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517506
    },
    {
        "content": "<p>in this particular case, the region <code>#20</code> acts as this sort of 'intermediary'</p>",
        "id": 130269027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517560
    },
    {
        "content": "<p>it is equated with <code>#10</code> and <code>#13</code></p>",
        "id": 130269071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517605
    },
    {
        "content": "<p>I'm trying to think how we can distinguish these \"carriers\" actions from the others...</p>",
        "id": 130269085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517664
    },
    {
        "content": "<p>idk.</p>",
        "id": 130269088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517687
    },
    {
        "content": "<p>I'm not sure. I kind of follow what you're suggesting.</p>",
        "id": 130269144,
        "sender_full_name": "davidtwco",
        "timestamp": 1532517750
    },
    {
        "content": "<p>what I was getting at with the 'multiple constraints' at one location is this</p>",
        "id": 130269226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517883
    },
    {
        "content": "<p>if you look at the MIR, you have things like</p>\n<div class=\"codehilite\"><pre><span></span>_1 = _4\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>_1 = &amp;mut _4\n</pre></div>\n\n\n<p>which basically \"propagate\" regions from <code>_4</code> into <code>_1</code></p>",
        "id": 130269240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517908
    },
    {
        "content": "<p>the call in constrast is </p>\n<div class=\"codehilite\"><pre><span></span>_0 = call Vec::push(_1, _2)\n</pre></div>\n\n\n<p>which, in this case, takes the vector <code>_1</code> type and relates it to the element type <code>_2</code></p>",
        "id": 130269251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517942
    },
    {
        "content": "<p>so another way to look at is \"where did the regions come from\"</p>",
        "id": 130269255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517954
    },
    {
        "content": "<p>ah, hmm, interesting. So for example in this case we have an edge from <code>_10</code> to <code>_20</code> -- where <code>_10</code> appears in one of the call arguments</p>",
        "id": 130269295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517975
    },
    {
        "content": "<p>and another edge from <code>_20</code> to <code>_16</code>, which appears in another argument</p>",
        "id": 130269300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517987
    },
    {
        "content": "<p><em>that</em> seems like the interesting bit</p>",
        "id": 130269303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532517995
    },
    {
        "content": "<p>the <code>_20</code> itself appears in the type arguments of <code>Vec::push</code></p>",
        "id": 130269306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532518011
    },
    {
        "content": "<p>e.g., the fully elaborated thing is like <code>Vec::push::&lt;&amp;'_20r u32&gt;(_1, _2)</code></p>",
        "id": 130269310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532518023
    },
    {
        "content": "<p>so it feels like if we can look for locations where there is a path from one operand to another</p>",
        "id": 130269324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532518052
    },
    {
        "content": "<p><em>that</em> is an interesting spot</p>",
        "id": 130269328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532518057
    },
    {
        "content": "<p>I'll give it a try</p>",
        "id": 130269679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532518586
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I went a different direction but it works well for my test case</p>",
        "id": 130275269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525366
    },
    {
        "content": "<p>now I have to see how much it messes up other stuff :P</p>",
        "id": 130275273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525370
    },
    {
        "content": "<p>here is the code I added, which explains the reasoning:</p>\n<div class=\"codehilite\"><pre><span></span>        // To find the best span to cite, we first try to look for the\n        // final constraint that is interesting and where the `sup` is\n        // not unified with the ultimate target region. The reason\n        // for this is that we have a chain of constraints that lead\n        // from the source to the target region, something like:\n        //\n        //    &#39;0: &#39;1 (&#39;0 is the source)\n        //    &#39;1: &#39;2\n        //    &#39;2: &#39;3\n        //    &#39;3: &#39;4\n        //    &#39;4: &#39;5\n        //    &#39;5: &#39;6 (&#39;6 is the target)\n        //\n        // Some of those regions are unified with `&#39;6` (in the same\n        // SCC).  We want to screen those out. After that point, the\n        // &quot;closest&quot; constraint we have to the end is going to be the\n        // most likely to be the point where the value escapes -- but\n        // we still want to screen for an &quot;interesting&quot; point to\n        // highlight (e.g., a call site or something).\n        let target_scc = self.constraint_sccs.scc(target_region);\n        let best_choice = (0..path.len()).rev().find(|&amp;i| {\n            let constraint = &amp;self.constraints[path[i]];\n\n            let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n            if constraint_sup_scc == target_scc {\n                return false;\n            }\n\n            match categorized_path[i].0 {\n                ConstraintCategory::Boring =&gt; false,\n                _ =&gt; true,\n            }\n        });\n</pre></div>",
        "id": 130275288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525394
    },
    {
        "content": "<p>so far it seems strictly better</p>",
        "id": 130275430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525532
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span> error: unsatisfied lifetime constraints\n<span class=\"gd\">-  --&gt; $DIR/propagate-approximated-fail-no-postdom.rs:55:21</span>\n<span class=\"gi\">+  --&gt; $DIR/propagate-approximated-fail-no-postdom.rs:57:13</span>\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |          ----------              ---------- lifetime `&#39;2` appears in this argument\n    |          |\n    |          lifetime `&#39;1` appears in this argument\n<span class=\"gd\">-LL |             // Only works if &#39;x: &#39;y:</span>\n<span class=\"gd\">-LL |             let p = x.get(); //~ ERROR</span>\n<span class=\"gd\">-   |                     ^^^^^^^ argument requires that `&#39;1` must outlive `&#39;2`</span>\n<span class=\"gi\">+...</span>\n<span class=\"gi\">+LL |             demand_y(x, y, p) //~ ERROR</span>\n<span class=\"gi\">+   |             ^^^^^^^^^^^^^^^^^ argument requires that `&#39;1` must outlive `&#39;2`</span>\n</pre></div>",
        "id": 130275450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525598
    },
    {
        "content": "<p>definitely seems better to highlight the call to <code>demand_y</code> and not the call to <code>x.get()</code></p>",
        "id": 130275463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525626
    },
    {
        "content": "<p>another example</p>\n<div class=\"codehilite\"><pre><span></span> error[E0621]: explicit lifetime required in the type of `y`\n<span class=\"gd\">-  --&gt; $DIR/issue-40288-2.rs:16:31</span>\n<span class=\"gi\">+  --&gt; $DIR/issue-40288-2.rs:17:9</span>\n    |\n LL | fn lifetime_transmute_slice&lt;&#39;a, T: ?Sized&gt;(x: &amp;&#39;a T, y: &amp;T) -&gt; &amp;&#39;a T {\n    |                                                      - consider changing the type of `y` to `&amp;&#39;a T`\n ...\n<span class=\"gd\">-LL |         let slice: &amp;mut [_] = &amp;mut out;</span>\n<span class=\"gd\">-   |                               ^^^^^^^^ lifetime `&#39;a` required</span>\n<span class=\"gi\">+LL |         slice[0] = y;</span>\n<span class=\"gi\">+   |         ^^^^^^^^^^^^ lifetime `&#39;a` required</span>\n</pre></div>",
        "id": 130275510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525663
    },
    {
        "content": "<p>heehee, this is an extreme one</p>\n<div class=\"codehilite\"><pre><span></span> error[E0623]: lifetime mismatch\n<span class=\"gd\">-  --&gt; $DIR/ex3-both-anon-regions-3.rs:11:33</span>\n<span class=\"gi\">+  --&gt; $DIR/ex3-both-anon-regions-3.rs:12:5</span>\n    |\n LL | fn foo(z: &amp;mut Vec&lt;(&amp;u8,&amp;u8)&gt;, (x, y): (&amp;u8, &amp;u8)) {\n<span class=\"gd\">-   |                     ---         ^       --- these two types are declared with different lifetimes...</span>\n<span class=\"gd\">-   |                                 |</span>\n<span class=\"gd\">-   |                                 ...but data flows into `z` here</span>\n<span class=\"gi\">+   |                     ---                 --- these two types are declared with different lifetimes...</span>\n<span class=\"gi\">+LL |     z.push((x,y)); //~ ERROR lifetime mismatch</span>\n<span class=\"gi\">+   |     ^^^^^^^^^^^^^ ...but data flows into `z` here</span>\n</pre></div>",
        "id": 130275535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525701
    },
    {
        "content": "<p>ok, enough, this seems good.</p>",
        "id": 130275542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525706
    },
    {
        "content": "<p>also, that last message would benefit from the \"give names to things\" treatment I think</p>",
        "id": 130275553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525726
    },
    {
        "content": "<p>but that's the old <code>NiceRegionError</code> code</p>",
        "id": 130275557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525750
    },
    {
        "content": "<p>ought to be fwd-ported</p>",
        "id": 130275560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525753
    },
    {
        "content": "<p>or maybe the new errors are even getting just better</p>",
        "id": 130275564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532525757
    },
    {
        "content": "<p>I assume then by \"give names to things\" you don't mean the \"has type\" label from this PR?</p>",
        "id": 130275699,
        "sender_full_name": "davidtwco",
        "timestamp": 1532525898
    },
    {
        "content": "<p>no I mean the existing logic, in this case</p>",
        "id": 130275821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526068
    },
    {
        "content": "<p>e.g.,</p>",
        "id": 130275825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> error[E0623]: lifetime mismatch\n+  --&gt; $DIR/ex3-both-anon-regions-3.rs:12:5\n    |\n LL | fn foo(z: &amp;mut Vec&lt;(&amp;u8,&amp;u8)&gt;, (x, y): (&amp;u8, &amp;u8)) {\n+   |                     ---                 --- let&#39;s call the lifetimes of these references `&#39;1` and `&#39;2`, respectively\n+LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^^^^^ data with lifetime `&#39;2` flows into `&#39;1` here\n</pre></div>",
        "id": 130275843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526118
    },
    {
        "content": "<p>something like that, idk</p>",
        "id": 130275869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526123
    },
    {
        "content": "<p>in any case \"data flows into\" is not very good</p>",
        "id": 130275887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526140
    },
    {
        "content": "<p>also, I do think we want to kind of consolidate our terminology. e.g., this talks about \"data flowing\"</p>",
        "id": 130275894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526165
    },
    {
        "content": "<p>but I think other errors have other terms</p>",
        "id": 130275898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526170
    },
    {
        "content": "<p>we're too diverse</p>",
        "id": 130275899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526172
    },
    {
        "content": "<p>anyway if you're curious <a href=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c\">here is the commit, including the affected tests</a></p>",
        "id": 130275914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526200
    },
    {
        "content": "<p>That's good.</p>",
        "id": 130275960,
        "sender_full_name": "davidtwco",
        "timestamp": 1532526246
    },
    {
        "content": "<p>this is an interesting one: <a href=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-6ae66f5f7de7aa4de7eb84da3a8cad33\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-6ae66f5f7de7aa4de7eb84da3a8cad33\">https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-6ae66f5f7de7aa4de7eb84da3a8cad33</a></p>",
        "id": 130275963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526251
    },
    {
        "content": "<p>your new \"data escapes\" error triggers now</p>",
        "id": 130275968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526259
    },
    {
        "content": "<p>whereas it didn't before</p>",
        "id": 130275971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526261
    },
    {
        "content": "<p>oh hmm <a href=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-718caa2ac9a63a2e0197ac83499c18e0\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-718caa2ac9a63a2e0197ac83499c18e0\">https://github.com/rust-lang/rust/pull/52488/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c#diff-718caa2ac9a63a2e0197ac83499c18e0</a> is the one sort of regression I guess</p>",
        "id": 130275994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526288
    },
    {
        "content": "<p>the problem seems to be the span of the <code>return</code> as much as anything</p>",
        "id": 130276010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526314
    },
    {
        "content": "<p>but I guess more to the point the \"return\" is considered a kind of interesting statement but <em>really</em> the <em>cast</em> would be more interesting</p>",
        "id": 130276031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526354
    },
    {
        "content": "<p>i.e., the thing that produced the value being returned</p>",
        "id": 130276036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526361
    },
    {
        "content": "<p>I'm struggling with this pretty printer work. I've got a way to generalize it such that I'll eventually be able to create a <code>RegionInferencePrinterContext</code> that overrides the correct functions. But trying to generalize it piece by piece is a struggle.</p>",
        "id": 130276104,
        "sender_full_name": "davidtwco",
        "timestamp": 1532526401
    },
    {
        "content": "<p>:/</p>",
        "id": 130276122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526442
    },
    {
        "content": "<p>it <em>could</em> be the wrong path</p>",
        "id": 130276126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526446
    },
    {
        "content": "<p>although I suspect it's \"just\" that the code is a terrible mess</p>",
        "id": 130276129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526460
    },
    {
        "content": "<p>i.e., if the pretty printer were nicer, it would work</p>",
        "id": 130276130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526468
    },
    {
        "content": "<p>but of course we have to work with the code we have :)</p>",
        "id": 130276135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526472
    },
    {
        "content": "<p>how exactly are you trying to introduce this context?</p>",
        "id": 130276187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532526494
    },
    {
        "content": "<p>I've made a trait that is a <code>PrintContext</code>, then going to make a <code>DebugPrintContext</code>, <code>DisplayPrintContext</code> to handle the current cases. The existing <code>print_debug</code> function would just create a <code>DebugPrintContext</code> and then do the printing with that.</p>\n<p>Printing would be handled by implementing <code>PrintWithContext&lt;DebugPrintContext&gt;</code> (with the appropriate context) - so you'd have a implementation of <code>print_with_context(..)</code> for every context. That lets us introduce new contexts that handle how individual types are printed. I was then going to use specialization to fallback to a <code>Print</code> trait that prints without the need for a context.</p>\n<p>I think it would work relatively alright, such that we could create a <code>RegionInferPrintContext</code> that overrides just one of the functions that the trait requires which will control the region naming. For <code>RegionInferPrintContext</code> specifically, the default impl would fallback to <code>DisplayPrintContext</code> rather than <code>Print</code>.</p>\n<p>I don't know if this is a decent approach or not.</p>",
        "id": 130276481,
        "sender_full_name": "davidtwco",
        "timestamp": 1532526878
    },
    {
        "content": "<p>Since it's all set up in repos, I'm just trying to change the underlying traits it impls without needing to change the actual printing code.</p>",
        "id": 130276498,
        "sender_full_name": "davidtwco",
        "timestamp": 1532526913
    },
    {
        "content": "<p>Which is mostly working, but I'm left with a couple unsatisfied trait bounds that I haven't quite worked out.</p>",
        "id": 130276517,
        "sender_full_name": "davidtwco",
        "timestamp": 1532526936
    },
    {
        "content": "<p>(at this point I've not split the existing context into two, because I wanted to just get it using the <code>PrintWithContext</code> types first with one giant debug + display context that was there before).</p>",
        "id": 130276595,
        "sender_full_name": "davidtwco",
        "timestamp": 1532527019
    },
    {
        "content": "<p>(after changing to two contexts, I will need to modify the print code slightly but that shouldn't be too bad).</p>",
        "id": 130276615,
        "sender_full_name": "davidtwco",
        "timestamp": 1532527046
    },
    {
        "content": "<p>sounds sort of neat</p>",
        "id": 130277297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527807
    },
    {
        "content": "<p>my usual complaint about that code has been that I want <code>{:?}</code> and <code>-Zverbose</code> to be equivalent</p>",
        "id": 130277314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527835
    },
    {
        "content": "<p>which is totally unrelated ;)</p>",
        "id": 130277317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527840
    },
    {
        "content": "<p>if you want some help with the bounds feel free to push commit etc</p>",
        "id": 130277330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527861
    },
    {
        "content": "<p>meanwhile i'm debating what to do about dyn-trait-underscore. I wonder if we should ignore <code>Return</code> -- but that seems problematic</p>",
        "id": 130277352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527894
    },
    {
        "content": "<p>the problem in this case is that there are <em>two</em> casts, one after the other esssentially</p>",
        "id": 130277360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527909
    },
    {
        "content": "<p>anyway I guess we can land as is and improve</p>",
        "id": 130277421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532527938
    },
    {
        "content": "<p>That's probably a decent idea.</p>",
        "id": 130277528,
        "sender_full_name": "davidtwco",
        "timestamp": 1532528049
    },
    {
        "content": "<p>I was also considering ignoring things with multi-line spans</p>",
        "id": 130277579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532528148
    },
    {
        "content": "<p>total hack though :)</p>",
        "id": 130277581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532528151
    },
    {
        "content": "<p>I think I've gotten past that bounds issue.</p>",
        "id": 130277680,
        "sender_full_name": "davidtwco",
        "timestamp": 1532528264
    },
    {
        "content": "<p>One step closer.</p>",
        "id": 130277683,
        "sender_full_name": "davidtwco",
        "timestamp": 1532528271
    },
    {
        "content": "<p>It's way too warm here.</p>",
        "id": 130277688,
        "sender_full_name": "davidtwco",
        "timestamp": 1532528280
    },
    {
        "content": "<p>heh, we're sitting by the harbor now, nice breeze...</p>",
        "id": 130277971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532528545
    },
    {
        "content": "<p>just come to an Island :P</p>",
        "id": 130277974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532528548
    },
    {
        "content": "<p>This pretty printer definitely needs tidied up, but I don't know it's the effort is worth it to remove that ugly string manipulation. There's _so_ much here. </p>\n<p>I've got it separated out into two contexts - debug and display - that have the same code in them but that can now be changed per-context. I can remove all the display-specific code from the debug context, etc. Both impls are still constructed together through the macros though, so I can't start separating things out into easier to grok modules.</p>",
        "id": 130283520,
        "sender_full_name": "davidtwco",
        "timestamp": 1532533808
    },
    {
        "content": "<p>I think I had envisioned something far hackier</p>",
        "id": 130285501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535438
    },
    {
        "content": "<p>I took a break for a bit and ran the tests instead of just doing check.</p>",
        "id": 130285516,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535465
    },
    {
        "content": "<p>Regressed in tons with this attempted refactor.</p>",
        "id": 130285525,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535472
    },
    {
        "content": "<p>e.g.,</p>\n<div class=\"codehilite\"><pre><span></span>scoped_thread_local! {\n    REGION_CALLBACK: ....\n}\n</pre></div>",
        "id": 130285528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535477
    },
    {
        "content": "<p>and then in the Display impl for <code>Region</code></p>",
        "id": 130285575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535487
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\"><pre><span></span>REGION_CALLBACK.with(|c| if let Some(c) = c {\n    c(..)\n} else {\n    // existing code\n})\n</pre></div>",
        "id": 130285603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535523
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L517-L523\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L517-L523\">this is where the regions are numbered now</a>.</p>",
        "id": 130285612,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535529
    },
    {
        "content": "<p>ah, yes, that's where it does the regions like <code>for&lt;'r&gt; fn(&amp;'r u32)</code></p>",
        "id": 130285639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535563
    },
    {
        "content": "<p>that...could probably just stay the same I guess?</p>",
        "id": 130285642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535572
    },
    {
        "content": "<p>Hmm... I'll need to take a fresh look at this.</p>",
        "id": 130285675,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535598
    },
    {
        "content": "<p>I was imagining invoking the hook here <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L733-L738\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L733-L738\">https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L733-L738</a></p>",
        "id": 130285678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535600
    },
    {
        "content": "<p>it sounds to me like you may have reached the point where it makes sense to stop and consider</p>",
        "id": 130285742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535623
    },
    {
        "content": "<p>hard to say; as you say, it's clear that this code could be nicer</p>",
        "id": 130285759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535635
    },
    {
        "content": "<p>but it does feel like a tar pit</p>",
        "id": 130285764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532535640
    },
    {
        "content": "<p>I'm not sure. I've pushed my attempted refactor to another branch so it's not completely lost but I don't think that's the way to go.</p>",
        "id": 130285941,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535818
    },
    {
        "content": "<p>I'll give something like you suggested a shot.</p>",
        "id": 130286023,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535874
    },
    {
        "content": "<p>Though, not exactly sure how to do that with <code>scoped_thread_local!</code>.</p>",
        "id": 130286140,
        "sender_full_name": "davidtwco",
        "timestamp": 1532535980
    },
    {
        "content": "<p>oh, that's something we use in rustc, I kind of forget how it works though</p>",
        "id": 130286727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536521
    },
    {
        "content": "<p>it lets you set a value just for a time</p>",
        "id": 130286731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536526
    },
    {
        "content": "<p>you can just do it with <code>thread_local</code> too</p>",
        "id": 130286813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536623
    },
    {
        "content": "<p>we could even sort of hardcode the behavior</p>",
        "id": 130286828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536634
    },
    {
        "content": "<p>e.g., <code>thread_local! { static highlight_region: Cell&lt;Option&lt;ty::RegionVid&gt;&gt; = ... }</code></p>",
        "id": 130286842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536659
    },
    {
        "content": "<p>and then just open code what we want</p>",
        "id": 130286848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536667
    },
    {
        "content": "<p>into the ppaux code</p>",
        "id": 130286851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536671
    },
    {
        "content": "<p>(if that is set to <code>Some</code>, then we would print <code>'_</code> for all regions except the highlight-region)</p>",
        "id": 130286896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532536683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Alright, let me clarify this:</p>\n<p>I should put a <code>scoped_thread_local!(..)</code> in the <code>ppaux</code> module that has the <code>RegionVid</code> of the region we wish to highlight. In order for that function to generate the region name, it'll also need the <code>counter: &amp;mut usize</code>.</p>\n<p>In the new function from this PR, I can call <code>highlight_region.set(&amp;(region, counter), || { ... })</code> and in the closure, call the function that will create the pretty printed type. Then, I store that string outside of the closure so that I can return it for the rest of the error handling.</p>\n<p>In the <code>ppaux</code> module, at the start of the <code>define_print!</code> for <code>RegionKind</code>, I can use <code>highlight_region.with(|(region, counter)| ..)</code> to compute the new region name in place of the existing logic, and get that outside of the closure to return that from there. To do this, I'll need to check if the <code>RegionKind</code> we're pretty printing is the <code>RegionVid</code> in our scoped thread local variable, somehow.</p>\n<p>Is that roughly it?</p>",
        "id": 130288002,
        "sender_full_name": "davidtwco",
        "timestamp": 1532537886
    },
    {
        "content": "<p>Going to take a break, will likely return to this in a few hours.</p>",
        "id": 130288316,
        "sender_full_name": "davidtwco",
        "timestamp": 1532538258
    },
    {
        "content": "<p>I'd probably just use a regular <code>thread_local</code> in this case</p>",
        "id": 130289121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539039
    },
    {
        "content": "<p>something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">thread_local</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">HIGHLIGHT_REGION</span>: <span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">RegionVid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130289131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539061
    },
    {
        "content": "<p>then I would add a helper like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">with_highlight_region</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nc\">RegionVid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">counter</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">HIGHLIGHT_REGION</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">hr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">hr</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hr</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hr</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130289207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539133
    },
    {
        "content": "<p>and at the start of the fn you can do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">get_highlight_region</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">RegionVid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">HIGHLIGHT_REGION</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">hr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">hr</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130289246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532539175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Alright, got that working. Pushed a commit with it. Interestingly, that didn't work for one or two tests with regressed to what we had pre-this PR.</p>",
        "id": 130334735,
        "sender_full_name": "davidtwco",
        "timestamp": 1532601110
    },
    {
        "content": "<p>Yeah, it seems like in a handful of cases, the <code>fmt</code> function that I had to change to use <code>HIGHLIGHT_REGION</code> doesn't get called.</p>",
        "id": 130335278,
        "sender_full_name": "davidtwco",
        "timestamp": 1532601913
    },
    {
        "content": "<p>huh</p>",
        "id": 130337982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605485
    },
    {
        "content": "<p>that's pushed <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> to the PR?</p>",
        "id": 130337985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605492
    },
    {
        "content": "<p>It is.</p>",
        "id": 130338012,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605538
    },
    {
        "content": "<p>The top two diffs for tests in this commit: <a href=\"https://github.com/rust-lang/rust/pull/52648/commits/70ed4e2c9789c1f8d81549ab4e68b03fcae24578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52648/commits/70ed4e2c9789c1f8d81549ab4e68b03fcae24578\">https://github.com/rust-lang/rust/pull/52648/commits/70ed4e2c9789c1f8d81549ab4e68b03fcae24578</a></p>",
        "id": 130338074,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605604
    },
    {
        "content": "<p>I believe it happens on types where by default (without any of the variations on this PR) it would just print <code>&amp;i32</code> rather than <code>&amp;'_#3r i32</code> or something like that.</p>",
        "id": 130338104,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605665
    },
    {
        "content": "<p>I'm not sure what case causes that.</p>",
        "id": 130338108,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605675
    },
    {
        "content": "<p>I see, yes, I think if the highlight region is set we will want to suppress or alter some of that logic</p>",
        "id": 130338195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605769
    },
    {
        "content": "<p>let me see..</p>",
        "id": 130338198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605772
    },
    {
        "content": "<p>weird it <em>seems</em> to always print the region <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L1022-L1030\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/ppaux.rs#L1022-L1030\">here</a></p>",
        "id": 130338250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605839
    },
    {
        "content": "<p>Yeah, I found that.</p>",
        "id": 130338252,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> in those examples, the variable's type is <code>&amp;u32</code>?</p>",
        "id": 130338253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532605851
    },
    {
        "content": "<p>Yes, I said <code>i32</code> as an example.</p>",
        "id": 130338267,
        "sender_full_name": "davidtwco",
        "timestamp": 1532605885
    },
    {
        "content": "<p>can you print out what string they <em>do</em> get?</p>",
        "id": 130338346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532606003
    },
    {
        "content": "<p>it might be nice to also print the <code>{:?}</code> output</p>",
        "id": 130338352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532606014
    },
    {
        "content": "<p>IIRC it is just <code>&amp;u32</code> without any lifetimes/region at all.</p>",
        "id": 130338386,
        "sender_full_name": "davidtwco",
        "timestamp": 1532606042
    },
    {
        "content": "<p>can you try with <code>-Zverbose</code>?</p>",
        "id": 130338503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532606211
    },
    {
        "content": "<p>Let me check, just building after addressing some of the comments on the MR.</p>",
        "id": 130338875,
        "sender_full_name": "davidtwco",
        "timestamp": 1532606711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Works as before with <code>-Z verbose</code>.</p>",
        "id": 130339362,
        "sender_full_name": "davidtwco",
        "timestamp": 1532607408
    },
    {
        "content": "<p>ok so the region <em>is</em> there</p>",
        "id": 130339369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607425
    },
    {
        "content": "<p>(Also, is there a reason I can't see ppaux logging with <code>RUST_LOG=rustc::util</code>?)</p>",
        "id": 130339375,
        "sender_full_name": "davidtwco",
        "timestamp": 1532607440
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 130339378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607447
    },
    {
        "content": "<p>oh wait</p>",
        "id": 130339382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607471
    },
    {
        "content": "<p>you need to customize <a href=\"https://github.com/davidtwco/rust/blob/70ed4e2c9789c1f8d81549ab4e68b03fcae24578/src/librustc/util/ppaux.rs#L740-L741\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/blob/70ed4e2c9789c1f8d81549ab4e68b03fcae24578/src/librustc/util/ppaux.rs#L740-L741\">this code here</a></p>",
        "id": 130339424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607505
    },
    {
        "content": "<p>If I have that in the <code>RUST_LOG</code> and <code>-Z verbose</code> then I get a core dump.</p>",
        "id": 130339425,
        "sender_full_name": "davidtwco",
        "timestamp": 1532607511
    },
    {
        "content": "<p>I'm sort of surprised it ever works :)</p>",
        "id": 130339427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607522
    },
    {
        "content": "<p>this line in particular looks problematic: <a href=\"https://github.com/davidtwco/rust/blob/70ed4e2c9789c1f8d81549ab4e68b03fcae24578/src/librustc/util/ppaux.rs#L782\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/blob/70ed4e2c9789c1f8d81549ab4e68b03fcae24578/src/librustc/util/ppaux.rs#L782\">https://github.com/davidtwco/rust/blob/70ed4e2c9789c1f8d81549ab4e68b03fcae24578/src/librustc/util/ppaux.rs#L782</a></p>",
        "id": 130339428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607527
    },
    {
        "content": "<p>Giving it a go now having changed the <code>is_verbose</code> check.</p>",
        "id": 130339503,
        "sender_full_name": "davidtwco",
        "timestamp": 1532607638
    },
    {
        "content": "<p>ok</p>",
        "id": 130339743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532607951
    },
    {
        "content": "<p>Doing <code>if is_verbose &amp;&amp; get_highlight_region().is_none()</code> makes it stop doing <code>has_type</code> when <code>-Z verbose</code> - now it never does it.</p>",
        "id": 130339900,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608153
    },
    {
        "content": "<p>I guess it should be <code>if is_verbose || get_highlight_region().is_some()</code></p>",
        "id": 130339929,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608202
    },
    {
        "content": "<p>that would what I expect, yes :)</p>",
        "id": 130339980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532608223
    },
    {
        "content": "<p>I blame the heat.</p>",
        "id": 130339984,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608229
    },
    {
        "content": "<p>It's very warm.</p>",
        "id": 130339986,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608232
    },
    {
        "content": "<p>Thinking is hard when warm.</p>",
        "id": 130339989,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608238
    },
    {
        "content": "<p>xD</p>",
        "id": 130340000,
        "sender_full_name": "DPC",
        "timestamp": 1532608265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> updated that PR, third time lucky.</p>",
        "id": 130340382,
        "sender_full_name": "davidtwco",
        "timestamp": 1532608734
    },
    {
        "content": "<p>left one more nit :) but the results are looking good</p>",
        "id": 130340603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532608972
    },
    {
        "content": "<p>I definitely think I like this better than the text manipulation</p>",
        "id": 130340606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532608977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Not sure I follow what your nit is asking for, particularly the second comment.</p>",
        "id": 130341485,
        "sender_full_name": "davidtwco",
        "timestamp": 1532609895
    },
    {
        "content": "<p>My goal would be that we print (e.g.) <code>&amp;Foo&lt;'_, '1&gt;</code></p>",
        "id": 130341499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609917
    },
    {
        "content": "<p>I think that this PR will print...something different now, maybe <code>&amp;Foo&lt;'1&gt;</code></p>",
        "id": 130341509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609930
    },
    {
        "content": "<p>(we should add a test for this, I can help with that if you want)</p>",
        "id": 130341517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609936
    },
    {
        "content": "<p>what I was suggesting is that — in highlight mode — <code>RegionVid</code> would return either <code>'1</code> or <code>'_</code></p>",
        "id": 130341536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609958
    },
    {
        "content": "<p>Ah, you want <code>'_</code> in the type parameters but <code> </code> elsewhere?</p>",
        "id": 130341555,
        "sender_full_name": "davidtwco",
        "timestamp": 1532609976
    },
    {
        "content": "<p>then, in the TyRef ppaux code, we would look and see if the pretty-printed version of our region is <code>\"'_\"</code> and — if so — not print it</p>",
        "id": 130341560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609979
    },
    {
        "content": "<p>right now we look for <code>\"\"</code></p>",
        "id": 130341563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609984
    },
    {
        "content": "<p>but <code>&amp;u32</code> and <code>&amp;'_ u32</code> should always be equivalent</p>",
        "id": 130341575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532609999
    },
    {
        "content": "<blockquote>\n<p>Ah, you want <code>'_</code> in the type parameters but <code> </code> elsewhere?</p>\n</blockquote>\n<p>right :)</p>",
        "id": 130341622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610006
    },
    {
        "content": "<p>Alright, that all makes sense.</p>",
        "id": 130341664,
        "sender_full_name": "davidtwco",
        "timestamp": 1532610053
    },
    {
        "content": "<p>if you have a build handy, maybe try this test?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(warnings)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">gimme</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gimme</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130341855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610238
    },
    {
        "content": "<p>I think that would show the types in question</p>",
        "id": 130341894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610244
    },
    {
        "content": "<p>also, instead of \"free region requires that <code>'1</code> must outlive <code>'2</code>\", maybe we should just say \"here, <code>'1</code> must outlive <code>'2</code>\"</p>",
        "id": 130341914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610288
    },
    {
        "content": "<p>or just \"requires <code>'1</code> to outlive <code>'2</code>\"</p>",
        "id": 130341928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610303
    },
    {
        "content": "<p>something like that</p>",
        "id": 130341932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532610306
    },
    {
        "content": "<p>Alright, pushed changes that make that case work fine and remove the \"free region\" part of messages.</p>",
        "id": 130344487,
        "sender_full_name": "davidtwco",
        "timestamp": 1532612599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 130344512,
        "sender_full_name": "davidtwco",
        "timestamp": 1532612626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> <span class=\"emoji emoji-1f3c2\" title=\"snowboarder\">:snowboarder:</span> nice!</p>",
        "id": 130344595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532612703
    },
    {
        "content": "<p>looks great</p>",
        "id": 130344769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532612858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/52708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52708\">https://github.com/rust-lang/rust/issues/52708</a> this issue seems to only involve some clean-up and matches my level, may I take care of it?</p>",
        "id": 130344874,
        "sender_full_name": "csmoe",
        "timestamp": 1532612973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> certainly, leave a comment</p>",
        "id": 130344954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532613041
    },
    {
        "content": "<p>Fixed the tidy error.</p>",
        "id": 130345916,
        "sender_full_name": "davidtwco",
        "timestamp": 1532614098
    },
    {
        "content": "<p>Tests passed.</p>",
        "id": 130355164,
        "sender_full_name": "davidtwco",
        "timestamp": 1532621736
    },
    {
        "content": "<p>Rebased this, needs another r+ after tests pass.</p>",
        "id": 130403425,
        "sender_full_name": "davidtwco",
        "timestamp": 1532690163
    }
]