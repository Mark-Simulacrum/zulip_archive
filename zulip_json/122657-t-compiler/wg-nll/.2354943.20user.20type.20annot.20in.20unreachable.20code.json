[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'd be interested in digging into this issue a little, particularly the first proposed solution by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you don't mind me taking it off your plate <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 147335722,
        "sender_full_name": "davidtwco",
        "timestamp": 1541717422
    },
    {
        "content": "<p>please do!</p>",
        "id": 147335736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541717440
    },
    {
        "content": "<p>Just an update on where I'm at with this: yesterday made the refactoring that moved user type ascriptions into an <code>IndexVec</code> on the <code>Mir</code> - got that all compiling but hitting an ICE that I've not had bunch time to look into.  Going to keep digging on this tonight.</p>",
        "id": 147531475,
        "sender_full_name": "davidtwco",
        "timestamp": 1542036011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think that approach is still the one I expect to work</p>",
        "id": 147540765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542045262
    },
    {
        "content": "<p>:)</p>",
        "id": 147540766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542045264
    },
    {
        "content": "<p>I expect it will. Fairly sure the ICE is a mistake Iâ€™ve made.</p>",
        "id": 147540784,
        "sender_full_name": "davidtwco",
        "timestamp": 1542045293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Would you be able to clarify the second half of your proposed fix? I'm not super clear on how I'd go about doing that. </p>\n<p>So far I've moved the information that was previously in <code>StatementKind::AscribeUserTy</code> into the <code>IndexVec</code> in the <code>Mir</code> (I also added a <code>Span</code> as suggested) and then changed that statement kind to just keep an index. </p>\n<p>That compiles but was ICE'ing somewhere in the serialization code from derives - so I tried a full rebuild and now it struggles to compile <code>rustc</code> in stage 1 (it can do everything before that) with a <code>error: internal compiler error: librustc_mir/borrow_check/nll/universal_regions.rs:754: cannot convert `ReScope(Remainder { block: ItemLocalId(2120), first_statement_index: 0})` to a region vid</code>.</p>\n<p>Figured I might just need to continue on with the implementation and it might be a symptom of that. I assumed doing the refactoring into an <code>IndexVec</code> might be doable in isolation.</p>",
        "id": 147626709,
        "sender_full_name": "davidtwco",
        "timestamp": 1542144510
    },
    {
        "content": "<p>(as far as I can tell, the only change that seems like it'd have an impact in that refactoring is that the <code>visit_place</code> call that normally came from visiting <code>StatementKind::AscribeUserTy</code> doesn't happen because the <code>Place&lt;'tcx&gt;</code> is now stored in the <code>IndexVec</code> and so when the visitor gets to that <code>StatementKind</code> it doesn't have that to call <code>visit_place</code> with. Similarly, when visiting the items in the <code>IndexVec</code> (much like how the visiting locals happens), I don't have the <code>Location</code> - so I can't <code>visit_place</code> then either)</p>",
        "id": 147627094,
        "sender_full_name": "davidtwco",
        "timestamp": 1542144851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> it feels like that refactoring should be do-able in isolation</p>",
        "id": 147628403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146148
    },
    {
        "content": "<p>maybe worth opening a [WIP] PR..</p>",
        "id": 147628406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146156
    },
    {
        "content": "<p>Sure thing.</p>",
        "id": 147628446,
        "sender_full_name": "davidtwco",
        "timestamp": 1542146168
    },
    {
        "content": "<p>I don't remember what the second half of my instructions were</p>",
        "id": 147628451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146180
    },
    {
        "content": "<p>so i'll have to check</p>",
        "id": 147628452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146182
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54943#issuecomment-430633005\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943#issuecomment-430633005\">link to comment</a></p>",
        "id": 147628462,
        "sender_full_name": "davidtwco",
        "timestamp": 1542146197
    },
    {
        "content": "<p>oh, right</p>",
        "id": 147628464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146207
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a></p>",
        "id": 147628689,
        "sender_full_name": "davidtwco",
        "timestamp": 1542146403
    },
    {
        "content": "<p>Debugging an issue that happens compiling compiler crates is incredibly painful.</p>",
        "id": 147630268,
        "sender_full_name": "davidtwco",
        "timestamp": 1542148179
    },
    {
        "content": "<p>Only 17G of logs..</p>",
        "id": 147630571,
        "sender_full_name": "davidtwco",
        "timestamp": 1542148530
    },
    {
        "content": "<p>There's so much here I don't even know where I'd start. Seeing mentions of <code>bb738</code> and higher..</p>",
        "id": 147631039,
        "sender_full_name": "davidtwco",
        "timestamp": 1542149026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I have some advice :)</p>",
        "id": 147670108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205080
    },
    {
        "content": "<p>which crate is failing, first of all?</p>",
        "id": 147670149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205087
    },
    {
        "content": "<p><code>rustc</code></p>",
        "id": 147670151,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205092
    },
    {
        "content": "<p>ok, that's good</p>",
        "id": 147670156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205106
    },
    {
        "content": "<p>that means libstd is available</p>",
        "id": 147670158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205109
    },
    {
        "content": "<p>so, obviosuly, trying to narrow down to a smaller example is the best thing</p>",
        "id": 147670165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205120
    },
    {
        "content": "<p>in a pinch, I sometimes resort to this</p>\n<div class=\"codehilite\"><pre><span></span>RUST_LOG=rustc::foo rustc 2&gt;&amp;1 | tail -100000 &gt; killme\n</pre></div>\n\n\n<p>i.e., keep only the last 100,000 lines of log</p>",
        "id": 147670182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205147
    },
    {
        "content": "<p>that's usually enough to capture the problem, without having an 17GB file</p>",
        "id": 147670185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205158
    },
    {
        "content": "<p>I'll definitely tail it like that if I need to do this again.</p>",
        "id": 147670209,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205182
    },
    {
        "content": "<p>you might also consider checking the run-pass tests</p>",
        "id": 147670210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205183
    },
    {
        "content": "<p>But I've got the 17G file now.</p>",
        "id": 147670219,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205189
    },
    {
        "content": "<p>well, I personally find tools die on that :)</p>",
        "id": 147670229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205199
    },
    {
        "content": "<p>but yes you could just tail the file :)</p>",
        "id": 147670265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205202
    },
    {
        "content": "<p>Fair, <code>less</code> seemed to be able to handle it.</p>",
        "id": 147670300,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205214
    },
    {
        "content": "<p>I also tend to do a lot of \"grep\"</p>",
        "id": 147670301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205214
    },
    {
        "content": "<p>so having a smaller file helps there</p>",
        "id": 147670307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205221
    },
    {
        "content": "<p>anyway, yes, less is one of those tools that scales pretty well</p>",
        "id": 147670314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205229
    },
    {
        "content": "<p>is it ICEing?</p>",
        "id": 147670327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205249
    },
    {
        "content": "<p>It is.</p>",
        "id": 147670373,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205294
    },
    {
        "content": "<p>OK</p>",
        "id": 147670599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542205500
    },
    {
        "content": "<p><a href=\"https://gist.githubusercontent.com/davidtwco/b0ee3419cd55d57cc09fd6662c5ecb66/raw/e33ab48a347ac64b44b0bc62edfe2567b0f33286/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/davidtwco/b0ee3419cd55d57cc09fd6662c5ecb66/raw/e33ab48a347ac64b44b0bc62edfe2567b0f33286/gistfile1.txt\">Here's the last 10k lines</a>. ICE is at the very bottom.</p>",
        "id": 147670645,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205553
    },
    {
        "content": "<p>It doesn't have the MIR build where the <code>add_user_ty_ascription</code> call (new function, adds to the new <code>IndexVec</code>) happens in that, but I've triple checked that those add the same things into the <code>IndexVec</code> that were previously added into the statements (just by looking at the code).</p>",
        "id": 147670730,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205607
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/a9fad44260a6758d1f5a1be7c18bfeac\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/a9fad44260a6758d1f5a1be7c18bfeac\">Here's the gist with the add_user_ty_ascription</a> - the one being asserted is added at the very bottom.</p>",
        "id": 147670872,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205719
    },
    {
        "content": "<p>Didn't make much progress digging into this last night and haven't had a chance to look into it much today.</p>",
        "id": 147671157,
        "sender_full_name": "davidtwco",
        "timestamp": 1542205946
    },
    {
        "content": "<p><code>run-pass</code> tests are a good tip, very helpful for making the issue more manageable. Sadly, every <code>run-pass</code> failure I'm seeing is completely unrelated.</p>",
        "id": 147672049,
        "sender_full_name": "davidtwco",
        "timestamp": 1542206752
    },
    {
        "content": "<blockquote>\n<p>tend to do a lot of \"grep\"</p>\n</blockquote>\n<p>Clearly you mean <code>rg</code> ;-)</p>",
        "id": 147676207,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542208829
    },
    {
        "content": "<p>Attempted to add in a <code>visit_place</code> that was lost in the visitor with the refactor - ended up causing an ICE earlier in stage1 at a seemingly more unrelated place.</p>",
        "id": 147677157,
        "sender_full_name": "davidtwco",
        "timestamp": 1542209473
    },
    {
        "content": "<blockquote>\n<p>(as far as I can tell, the only change that seems like it'd have an impact in that refactoring is that the <code>visit_place</code> call that normally came from visiting <code>StatementKind::AscribeUserTy</code> doesn't happen because the <code>Place&lt;'tcx&gt;</code> is now stored in the <code>IndexVec</code> and so when the visitor gets to that <code>StatementKind</code> it doesn't have that to call <code>visit_place</code> with. Similarly, when visiting the items in the <code>IndexVec</code> (much like how the visiting locals happens), I don't have the <code>Location</code> - so I can't <code>visit_place</code> then either)</p>\n</blockquote>\n<p>(context for the missing <code>visit_place</code>)</p>",
        "id": 147677177,
        "sender_full_name": "davidtwco",
        "timestamp": 1542209490
    },
    {
        "content": "<p>[Quotingâ€¦]<br>\n sadly this is often the case :( </p>\n<p>does mean we should try to make a reduced test case :)</p>",
        "id": 147677673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209895
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L416-L418\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L416-L418\">This line</a> seems to be the one causing the type annotation error.</p>",
        "id": 147678833,
        "sender_full_name": "davidtwco",
        "timestamp": 1542210808
    },
    {
        "content": "<p>I'm not sure what case that falls under.</p>",
        "id": 147678841,
        "sender_full_name": "davidtwco",
        "timestamp": 1542210818
    },
    {
        "content": "<p>According to the spans that are saved at the MIR build; types look like the ones being mentioned too.</p>",
        "id": 147678933,
        "sender_full_name": "davidtwco",
        "timestamp": 1542210869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> took a quick look at the PR, first of all, and <a href=\"https://github.com/rust-lang/rust/pull/55937#pullrequestreview-174969318\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55937#pullrequestreview-174969318\">left some comments</a> -- more questions than answers, I'm afraid</p>",
        "id": 147683635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214821
    },
    {
        "content": "<p>Well, actually</p>",
        "id": 147683663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214858
    },
    {
        "content": "<p>I suspect your ICE is indeed caused by the change to the visitor</p>",
        "id": 147683671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214865
    },
    {
        "content": "<p>In particular, not visiting the <code>Place</code> means we will no longer \"renumber\" the regions within</p>",
        "id": 147683686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542214885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for taking a look. The main issue I found with calling visit_place is that it requires a <code>Location</code> which I donâ€™t have at that point in the visitor any more.</p>",
        "id": 147684595,
        "sender_full_name": "davidtwco",
        "timestamp": 1542215837
    },
    {
        "content": "<p>I tried to put a location into <code>UserTypeAscriptionData</code> but that didnâ€™t quite work. Got it compiling but it would ICE earlier for a stranger reason that I didnâ€™t look too much into.</p>",
        "id": 147684662,
        "sender_full_name": "davidtwco",
        "timestamp": 1542215904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yeah, I figured this was part of it; well, this is partly why I suggested not pulling out so many fields</p>",
        "id": 147684698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215962
    },
    {
        "content": "<p>but rather just the \"core type\"</p>",
        "id": 147684705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215968
    },
    {
        "content": "<p>however, we could also make a \"PlaceContext\" that doesn't have a location I think</p>",
        "id": 147684710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215976
    },
    {
        "content": "<p><code>PlaceContext</code> doesnâ€™t take a location, itâ€™s just a parameter to the <code>visit_place</code> function.</p>",
        "id": 147684787,
        "sender_full_name": "davidtwco",
        "timestamp": 1542216072
    },
    {
        "content": "<p>Iâ€™m unclear on how this refactoring (and what little I understand of the remaining steps for the larger change) would help with the unreachable code issue though. Since surely the statements that keep indices into our <code>IndexVec</code> will be removed as unreachable in the same way they are now?</p>",
        "id": 147684881,
        "sender_full_name": "davidtwco",
        "timestamp": 1542216158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Apologies for another ping regarding this issue, would liked to have made more progress by now. Took another attempt at this and still not getting very far. So far, I've tried:</p>\n<ul>\n<li>(monday) Naive first attempt at refactor into <code>IndexVec</code> w/out visiting place - ICE due to renumbering being skipped.</li>\n<li>(wednesday) Refactor into <code>IndexVec</code>, storing a <code>Location</code> into the vec too so that I can <code>visit_place</code> - caused some strange ICE, think it was related to the ugly way I had to create a <code>Location</code> that anticipated the location of the statement that was about to be inserted.</li>\n<li>(today) Refactor into <code>IndexVec</code>, removing the statement entirely, iterating over the vec after normal type check visitor. Still can't visit the place to renumber, so manually call the renumbering code on the <code>Ty&lt;'tcx&gt;</code> inside the <code>Place&lt;'tcx&gt;</code> - feels close but can't easily get a mutable reference to the <code>Ty&lt;'tcx&gt;</code> like you get from the visitor, so still ICEs due to renumbering even though I'm calling the renumbering code.</li>\n</ul>\n<p>I've not yet tried moving the place back into the statement so that it can be visited when the statement is visited - that'd solve the renumbering issue, but I'm unsure how it would solve the issue of user type annotations not being checked in dead code since those statements with less in them could still be removed.</p>",
        "id": 147772755,
        "sender_full_name": "davidtwco",
        "timestamp": 1542315407
    },
    {
        "content": "<p>You don't need the place to check for WF</p>",
        "id": 147777692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319917
    },
    {
        "content": "<p>I think you would ideally move <em>more</em> than just the place back into the statement</p>",
        "id": 147777738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319929
    },
    {
        "content": "<p>you would also move the \"projections\" part</p>",
        "id": 147777745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319938
    },
    {
        "content": "<p>that said, I don't know why you need a location to visit a place, let me double check the visitor</p>",
        "id": 147777758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319961
    },
    {
        "content": "<p>oh, I see, because <code>visit_place</code> wants you to give one :)</p>",
        "id": 147777775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542319982
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 147777794,
        "sender_full_name": "davidtwco",
        "timestamp": 1542319999
    },
    {
        "content": "<p>we could alter the visitor</p>",
        "id": 147777806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320011
    },
    {
        "content": "<p>but I feel like we should avoid that for now</p>",
        "id": 147777820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320021
    },
    {
        "content": "<p>let me try and explain what I meant by \"move the projections part\" better</p>",
        "id": 147777832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320030
    },
    {
        "content": "<p>Don't we need to get a <code>Place</code> when we do the wf check <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1297\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1297\">here</a>?</p>",
        "id": 147777880,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320044
    },
    {
        "content": "<p>Or is that the wrong check?</p>",
        "id": 147777890,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320057
    },
    {
        "content": "<p>so we have this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">UserTypeProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">UserTypeAnnotation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147777909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320086
    },
    {
        "content": "<p>I was intending only to move the <code>base</code> field here into the array</p>",
        "id": 147777914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320097
    },
    {
        "content": "<p>and leave the rest as is</p>",
        "id": 147777919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320100
    },
    {
        "content": "<p>i.e., that structure would become</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">UserTypeProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">UserTypeAnnotationIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectionElem</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147777929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320111
    },
    {
        "content": "<blockquote>\n<p>Don't we need to get a <code>Place</code> when we do the wf check <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1297\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1297\">here</a>?</p>\n</blockquote>\n<p>that is not the wf check</p>",
        "id": 147777940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320129
    },
    {
        "content": "<p>that is relating the type of the place to the user-given type</p>",
        "id": 147777948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320137
    },
    {
        "content": "<p>that stuff would stay the same</p>",
        "id": 147777951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320140
    },
    {
        "content": "<p>or, well, not the <em>same</em></p>",
        "id": 147777957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320152
    },
    {
        "content": "<p>but it would still occur at that time</p>",
        "id": 147777960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320157
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1017-L1018\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1017-L1018\">this part</a> we would probably do earlier, ahead of time, just by iterating over the <code>IndexVec</code> and creating a new <code>instantiated_types: IndexVec&lt;UserTypeAnnotationIndex, Ty&lt;'tcx&gt;&gt;</code></p>",
        "id": 147778019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320201
    },
    {
        "content": "<p>Ah, I thought the issue was that that code wasn't being called because the <code>AscribeUserType</code> statements were being removed, so the intent was to stop the data required for that being kept in a statement. <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 147778037,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320214
    },
    {
        "content": "<p>at the end, we would also go over all the things in that vec, and try to prove them well-formed</p>",
        "id": 147778056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320235
    },
    {
        "content": "<p>using <code>Locations::All</code> I guess</p>",
        "id": 147778062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320243
    },
    {
        "content": "<p>but the <code>relate_type_and_user_type</code> code would stay mostly the same,</p>",
        "id": 147778076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320256
    },
    {
        "content": "<p>except that it reads the instantiated type from the vector</p>",
        "id": 147778082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320261
    },
    {
        "content": "<p>instead of doing that work itself</p>",
        "id": 147778088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320265
    },
    {
        "content": "<p>I guess we would also want to <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1026\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1026\">normalize</a> the instantiated type</p>",
        "id": 147778148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320286
    },
    {
        "content": "<p>So where is the wf check now?</p>",
        "id": 147778152,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320291
    },
    {
        "content": "<p>hmm</p>",
        "id": 147778224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320380
    },
    {
        "content": "<p>I think it depends</p>",
        "id": 147778238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320386
    },
    {
        "content": "<p>:)</p>",
        "id": 147778242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320391
    },
    {
        "content": "<p>there are the two branches</p>",
        "id": 147778258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320400
    },
    {
        "content": "<p>on the <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1060\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1060\">*other* branch</a>, we wind up <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_traits/type_op.rs#L195\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_traits/type_op.rs#L195\">here</a></p>",
        "id": 147778303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320406
    },
    {
        "content": "<p>I'm trying to decide if that has to change :P</p>",
        "id": 147778346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320440
    },
    {
        "content": "<p>I think that path comes up when you do stuff like</p>",
        "id": 147778354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320448
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// no error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147778385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320480
    },
    {
        "content": "<p>(I confess that some part of me is back to wanting to say \"screw it, this is fine as is\")</p>",
        "id": 147778395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320496
    },
    {
        "content": "<blockquote>\n<p>I think that path comes up when you do stuff like</p>\n</blockquote>\n<p>i.e,. the user didn't write a full type, but rather supplied explicit arguments to something</p>",
        "id": 147778447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320523
    },
    {
        "content": "<p>if the user wrote a full type, I don't think we explicitly prove well-formedness today</p>",
        "id": 147778466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320536
    },
    {
        "content": "<p>instead, we relate it to the type of the place, which we expect to be WF</p>",
        "id": 147778472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320544
    },
    {
        "content": "<p>i.e., in <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1016\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1016\">this branch</a></p>",
        "id": 147778492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320565
    },
    {
        "content": "<p>vs <a href=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1060\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1060\">this branch</a>, which is covering the \"explicit substitution\" case</p>",
        "id": 147778524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320599
    },
    {
        "content": "<p>/me wishes there were more comments, blames self</p>",
        "id": 147778534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320609
    },
    {
        "content": "<p>I appreciate your patience with this issue, I've been going the completely wrong direction with it all week.</p>",
        "id": 147778549,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320623
    },
    {
        "content": "<p>well I appreciate <em>your</em> patience</p>",
        "id": 147778602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320645
    },
    {
        "content": "<p>:)</p>",
        "id": 147778604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320647
    },
    {
        "content": "<p>sorry i've been scattered this week, took me a while to catch up, now trying to track down some regressions :/</p>",
        "id": 147778617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542320665
    },
    {
        "content": "<p>No worries. Now I've got some idea what is actually happening here I should be able to work something together tomorrow.</p>",
        "id": 147778686,
        "sender_full_name": "davidtwco",
        "timestamp": 1542320737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>sorry i've been scattered this week, took me a while to catch up, now trying to track down some regressions <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>Is there a list of these regressions somewhere ?</p>",
        "id": 147783963,
        "sender_full_name": "blitzerr",
        "timestamp": 1542326621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed a new commit that is way closer to what we want. I had to change more than I thought to be able to check for well-formed-ness (presuming that I did that correctly, of course) but it should be doing that. For some reason, on a bunch of tests (probably the majority) we're seeing errors from <code>libserialize</code>. There are tests that have type annotations that work, so I don't really know what's going on. The test case that we're looking to fix for this issue fails with that ICE so I don't know if this actually fixes the issue yet.</p>",
        "id": 147835045,
        "sender_full_name": "davidtwco",
        "timestamp": 1542392163
    },
    {
        "content": "<p>I can change the way I did some of the things if you're not happy with them, it was a bit more invasive that I'd have expected.</p>",
        "id": 147835092,
        "sender_full_name": "davidtwco",
        "timestamp": 1542392198
    },
    {
        "content": "<p>And I might have missed a simpler way.</p>",
        "id": 147835100,
        "sender_full_name": "davidtwco",
        "timestamp": 1542392203
    },
    {
        "content": "<p>It occurs to me that I might have misinterpreted what you meant yesterday and should just invoke the same query again with the already-instantiated type instead of this new one that I've made.</p>",
        "id": 147835600,
        "sender_full_name": "davidtwco",
        "timestamp": 1542392716
    },
    {
        "content": "<p>Either way, I suspect that will not fix the serialize errors I'm seeing.</p>",
        "id": 147835611,
        "sender_full_name": "davidtwco",
        "timestamp": 1542392731
    },
    {
        "content": "<p>Hadn't tried a stage0 build so hadn't noticed the error on Travis. Will need to think about how to tackle that - the way I'd worked around that to be able to continue was quite hacky.</p>",
        "id": 147836573,
        "sender_full_name": "davidtwco",
        "timestamp": 1542393662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> these changes are reflected in the PR? I'm thinking we should remove this from the milestone for two reasons (you may have seen me comment on discord):</p>\n<ul>\n<li>Bug is obscure</li>\n<li>Too big of a change to want to backport</li>\n</ul>",
        "id": 147839377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542396197
    },
    {
        "content": "<p>doesn't seem worth the risk</p>",
        "id": 147839387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542396202
    },
    {
        "content": "<p>(not to say we shoudln't keep working on it, just lowers the priority level somewhat)</p>",
        "id": 147839401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542396215
    },
    {
        "content": "<p>(done)</p>",
        "id": 147839487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542396281
    },
    {
        "content": "<p>Iâ€™ve got something compiling for the issue on Travis. Donâ€™t know if it works yet because Iâ€™m walking home.</p>",
        "id": 147839491,
        "sender_full_name": "davidtwco",
        "timestamp": 1542396283
    },
    {
        "content": "<p>Thatâ€™s fine, makes sense.</p>",
        "id": 147839497,
        "sender_full_name": "davidtwco",
        "timestamp": 1542396289
    },
    {
        "content": "<p>Pushed another change. Stripped it back a bit, the way I was doing the wf check wasn't right at all. This just has the refactor, but even that isn't quite right - it causes two ICEs, but it's nearly there.</p>",
        "id": 147849081,
        "sender_full_name": "davidtwco",
        "timestamp": 1542405487
    },
    {
        "content": "<p>I had it sort-of working for the <code>UserTypeAnnotation::TypeOf</code> variant, but not the other variant.</p>",
        "id": 147849317,
        "sender_full_name": "davidtwco",
        "timestamp": 1542405756
    },
    {
        "content": "<p>And the other variant happened to be what was generated for the test case from the issue.</p>",
        "id": 147849331,
        "sender_full_name": "davidtwco",
        "timestamp": 1542405780
    },
    {
        "content": "<p>Pushed another change, still only the refactor, but no error. It's not ideal because there's two <code>IndexVecs</code> now in the <code>TypeChecker</code>.</p>",
        "id": 147851380,
        "sender_full_name": "davidtwco",
        "timestamp": 1542408110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> reviewing now sorry for the delay</p>",
        "id": 148060435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741320
    },
    {
        "content": "<p>looks like the mir-opt tests need updating though</p>",
        "id": 148060438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741326
    },
    {
        "content": "<p>I've not made any changes since Friday, was hoping to get to it tonight.</p>",
        "id": 148060465,
        "sender_full_name": "davidtwco",
        "timestamp": 1542741360
    },
    {
        "content": "<p>I'm not all that happy with the way it is looking. I dislike that I'm using two maps for each variant of <code>UserTypeAnnotation</code> (since I need the substs from the <code>UserTypeAnnotation::TypeOf</code> variant - I found that if I still use the <code>instantiated_types</code> map for that branch then it ICEs, I had to construct and normalize the type where it currently happens).</p>",
        "id": 148060558,
        "sender_full_name": "davidtwco",
        "timestamp": 1542741465
    },
    {
        "content": "<p>w/r/t checking the well-formedness: Is that only the <code>UserTypeAnnotation::TypeOf</code> branch? If it is, that doesn't cover the case mentioned in the issue since it is the other variant. I had a working branch where the <code>user_self_ty</code> well-formedness check was moved and happening outside of the existing path as we want but it didn't cover the test case. I've not worked out what check I need to do for the other variant in <code>UserTypeAnnotation</code>.</p>",
        "id": 148060700,
        "sender_full_name": "davidtwco",
        "timestamp": 1542741577
    },
    {
        "content": "<p>My memory might be a bit hazy on the details of above since I haven't looked at it for a few days.</p>",
        "id": 148060764,
        "sender_full_name": "davidtwco",
        "timestamp": 1542741604
    },
    {
        "content": "<p>heh I thought it was nice :)</p>",
        "id": 148061030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741844
    },
    {
        "content": "<p>maybe I overlooked something</p>",
        "id": 148061034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741847
    },
    {
        "content": "<p>I actually realize now I didn't look to see if you enforce the WF rules</p>",
        "id": 148061044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741854
    },
    {
        "content": "<p>anyway I guess the WF rules apply to both branches; we just need to do keep the def-id and apply the substitution to the <code>type_of(...)</code></p>",
        "id": 148061077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741893
    },
    {
        "content": "<p>I'm not doing that yet. I had it in for the <code>UserTypeAnnotation::TypeOf</code> case but it wasn't great IMO.</p>",
        "id": 148061094,
        "sender_full_name": "davidtwco",
        "timestamp": 1542741908
    },
    {
        "content": "<p>re: the <code>UserTypeAnnotation</code></p>",
        "id": 148061102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741924
    },
    {
        "content": "<p>right now it has this form</p>",
        "id": 148061105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">UserTypeAnnotation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">CanonicalTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// The canonical type is the result of `type_of(def_id)` with the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// given substitutions applied.</span>\n<span class=\"w\">    </span><span class=\"n\">TypeOf</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CanonicalUserSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148061112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741934
    },
    {
        "content": "<p>but maybe we should change it to</p>",
        "id": 148061116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">UserTypeAnnotation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// The canonical type is the result of `type_of(def_id)` with the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// given substitutions applied.</span>\n<span class=\"w\">    </span><span class=\"n\">TypeOf</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UserSubsts</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and move the <code>Canonical</code> out, so we store a <code>Canonical&lt;UserTypeAnnotation&lt;'tcx&gt;&gt;</code></p>",
        "id": 148061176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741967
    },
    {
        "content": "<p>then you could have <code>instantiated_user_types: IndexVec&lt;UserTypeAnnotationIndex, UserTypeAnnotation&lt;'tcx&gt;&gt;</code></p>",
        "id": 148061202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741982
    },
    {
        "content": "<p>(in the type checker)</p>",
        "id": 148061221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542741995
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 148061233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542742006
    },
    {
        "content": "<p>Am I right that it is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_traits/type_op.rs#L184-L196\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_traits/type_op.rs#L184-L196\">this part</a> of the well-formedness check that we want to extract out to happen w/out the statement?</p>",
        "id": 148061251,
        "sender_full_name": "davidtwco",
        "timestamp": 1542742025
    },
    {
        "content": "<p>Yeah, I could try doing that.</p>",
        "id": 148061257,
        "sender_full_name": "davidtwco",
        "timestamp": 1542742032
    },
    {
        "content": "<p>(that link is only for the <code>UserTypeAnnotation::TypeOf</code> case)</p>",
        "id": 148061273,
        "sender_full_name": "davidtwco",
        "timestamp": 1542742053
    },
    {
        "content": "<p>yes, that looks like the right part</p>",
        "id": 148061296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542742078
    },
    {
        "content": "<p>That's what you had linked before, wasn't sure if it was just that.</p>",
        "id": 148061343,
        "sender_full_name": "davidtwco",
        "timestamp": 1542742093
    },
    {
        "content": "<p>I'd been experimenting with just that part so that's fine.</p>",
        "id": 148061364,
        "sender_full_name": "davidtwco",
        "timestamp": 1542742120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm trying out that change you suggested yesterday to change <code>UserTypeAnnotation&lt;'tcx&gt;</code> with canonicalized types in it to <code>Canonical&lt;'tcx, UserTypeAnnotation&lt;'tcx&gt;&gt;</code> with the normal types in it. I've got that compiling and running, but I get a few ICEs that I'm not quite sure about. It definitely makes some of the code changes to type check related to this issue easier.</p>\n<p>To do that, I'm needing to modify where the <code>Ty&lt;'tcx&gt;</code> and <code>UserSubsts&lt;'tcx&gt;</code> were initially being canonicalized in <code>librustc_typeck</code>. Instead of canonicalizing a <code>UserSubsts&lt;'tcx&gt;</code> and storing that so that it can later be put into a <code>UserTypeAnnotation&lt;'tcx&gt;</code>, I'm now making a <code>UserTypeAnnotation&lt;'tcx&gt;</code> at that point and canonicalizing that so it can later be used when building the <code>Mir</code>. I'm not thrilled that I'm needing to use that <code>rustc::mir</code> type in <code>rustc_typeck</code> because I figured we'd want to keep a separation there, but I don't know how else to get around that.</p>\n<p>Anyway, this is mostly working - I've got it compiling with around 100 or so tests failing due to an ICE. I get this logging on a build without the change applied:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-11-21T00:36:33Z: rustc_typeck::check: write_user_substs_from_substs(HirId { owner: DefIndex(0:15), local_id: ItemLocalId(12) }, [_]) in fcx 0x7fff8ef5e150\nDEBUG 2018-11-21T00:36:33Z: rustc_typeck::check: instantiate_value_path: user_substs = Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [^0], user_self_ty: None } }\nDEBUG 2018-11-21T00:36:33Z: rustc_typeck::check: write_user_substs(HirId { owner: DefIndex(0:15), local_id: ItemLocalId(12) }, Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [^0], user_self_ty: None } }) in fcx 0x7fff8ef5e150\nDEBUG 2018-11-21T00:36:33Z: rustc_typeck::check: write_user_substs: skipping identity substs\n</pre></div>\n\n\n<p>So that logging is with a <code>UserSubsts&lt;'tcx&gt;</code> being canonicalized. When I canonicalize the whole <code>UserTypeAnnotation&lt;'tcx&gt;</code>, I get this logging:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-11-21T00:54:55Z: rustc_typeck::check: write_user_type_annotation_from_substs: hir_id=HirId { owner: DefIndex(0:15), local_id: ItemLocalId(12) } def_id=DefId(2/1:13146 ~ core[420c]::option[0]::Option[0]::Some[0]) substs=[_] user_self_ty=None in fcx 0x7ffda113afe0\nDEBUG 2018-11-21T00:54:55Z: rustc_typeck::check: write_user_type_annotation_from_substs: canonicalized=Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }], value: TypeOf(DefId(2/1:13146 ~ core[420c]::option[0]::Option[0]::Some[0]), UserSubsts { substs: [?0], user_self_ty: None }) }\nDEBUG 2018-11-21T00:54:55Z: rustc_typeck::check: write_user_type_annotation: hir_id=HirId { owner: DefIndex(0:15), local_id: ItemLocalId(12) } canonical_user_type_annotation=Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }], value: TypeOf(DefId(2/1:13146 ~ core[420c]::option[0]::Option[0]::Some[0]), UserSubsts { substs: [?0], user_self_ty: None }) } tag=0x7ffda113afe0\n</pre></div>\n\n\n<p>I'm going on the perhaps naive assumption that I can just take the types that were being canoncalized, add them as fields to a type and canonicalize that and it works the same. Either way, the <code>is_identity</code> function is now returning <code>true</code> (due to the change from <code>^0</code> to <code>?0</code> - though I don't know what these represent) and that annotation isn't being skipped as it should be.</p>",
        "id": 148132546,
        "sender_full_name": "davidtwco",
        "timestamp": 1542828786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> </p>\n<blockquote>\n<p>I'm not thrilled that I'm needing to use that rustc::mir type in rustc_typeck because I figured we'd want to keep a separation there, but I don't know how else to get around that.</p>\n</blockquote>\n<p>That type is not particularly tied to MIR. It would be OK, I think, to move it so it lives alongside <code>TypeckTables</code></p>",
        "id": 148133714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542830167
    },
    {
        "content": "<p>what's the ICE you are getting exactly?</p>",
        "id": 148133731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542830206
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L73\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L73\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L73</a></p>",
        "id": 148133977,
        "sender_full_name": "davidtwco",
        "timestamp": 1542830440
    },
    {
        "content": "<p>It comes from that line.</p>",
        "id": 148133981,
        "sender_full_name": "davidtwco",
        "timestamp": 1542830445
    },
    {
        "content": "<p>Due to the type youâ€™re seeing in the logs.</p>",
        "id": 148133987,
        "sender_full_name": "davidtwco",
        "timestamp": 1542830461
    },
    {
        "content": "<p>(on phone just now so have limited typing ability)</p>",
        "id": 148134011,
        "sender_full_name": "davidtwco",
        "timestamp": 1542830483
    },
    {
        "content": "<p>Oops. Not that line, this one: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L149\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L149\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/tcx.rs#L149</a></p>",
        "id": 148134900,
        "sender_full_name": "davidtwco",
        "timestamp": 1542831506
    },
    {
        "content": "<blockquote>\n<p>That type is not particularly tied to MIR. It would be OK, I think, to move it so it lives alongside <code>TypeckTables</code></p>\n</blockquote>\n<p>I've changed this, much better now.</p>",
        "id": 148141985,
        "sender_full_name": "davidtwco",
        "timestamp": 1542840546
    },
    {
        "content": "<p>Also managed to fix that above ICE.</p>",
        "id": 148142388,
        "sender_full_name": "davidtwco",
        "timestamp": 1542841155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Alright, I've finally got something that's compiling and passing tests here. I'm not seeing a massive effect to the tests (including the test case from the linked issue), but I think this does what it is supposed to. PR is updated.</p>",
        "id": 148192115,
        "sender_full_name": "davidtwco",
        "timestamp": 1542915482
    },
    {
        "content": "<p>Still need to rebase, but doing that now.</p>",
        "id": 148192338,
        "sender_full_name": "davidtwco",
        "timestamp": 1542915897
    },
    {
        "content": "<p>Huh, didn't notice that failure locally. Will take a look tomorrow.</p>",
        "id": 148200866,
        "sender_full_name": "davidtwco",
        "timestamp": 1542932986
    },
    {
        "content": "<p>Should have fixed those - was seeing some odd ICE in <code>run-pass</code> locally but wasn't sure if it was just my machine so pushed what I have.</p>",
        "id": 148222001,
        "sender_full_name": "davidtwco",
        "timestamp": 1542970264
    },
    {
        "content": "<p>Looks like it wasn't just local <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 148225740,
        "sender_full_name": "davidtwco",
        "timestamp": 1542975504
    },
    {
        "content": "<p>Made a decent amount of progress on this PR over the weekend. Added fixes for two other type annotation issues. Still dealing with one (and hopefully the last) ICE in it that affects three run-pass tests. I know which line is causing it, but removing that removes a error that it introduced on another test case that seemed correct - not looked into it that much yet.</p>",
        "id": 148367612,
        "sender_full_name": "davidtwco",
        "timestamp": 1543240024
    },
    {
        "content": "<p>Struggling to work out what is expected for this sort of case, got <a href=\"https://gist.githubusercontent.com/davidtwco/4f7dcb7f80cc47b97b49b32470e66b02/raw/501f906f8474c7b6c2c6d6711e9d00d9fb43213b/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/davidtwco/4f7dcb7f80cc47b97b49b32470e66b02/raw/501f906f8474c7b6c2c6d6711e9d00d9fb43213b/gistfile1.txt\">the log output and backtrace here</a>.</p>",
        "id": 148377935,
        "sender_full_name": "davidtwco",
        "timestamp": 1543249025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> hey so I'm looking at the PR now</p>",
        "id": 148394763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543263110
    },
    {
        "content": "<p>much bigger PR than I anticipated :)</p>",
        "id": 148395226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543263494
    },
    {
        "content": "<p>Yeah, it got big.</p>",
        "id": 148396761,
        "sender_full_name": "davidtwco",
        "timestamp": 1543264910
    },
    {
        "content": "<p>Mostly the refactor.</p>",
        "id": 148396818,
        "sender_full_name": "davidtwco",
        "timestamp": 1543264939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Iâ€™d appreciate if you could take a look at this if you have time, itâ€™s not a priority though. Iâ€™ve been finding this ICE relatively impenetrable - not been able to narrow down the root cause of it.</p>",
        "id": 148746359,
        "sender_full_name": "davidtwco",
        "timestamp": 1543441572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I've now fixed that ICE - I experimented with a bunch of solutions but in the end I had to move some of the well-formedness checking back to only reachable code. That's not ideal but it's the best I could get. That said, the well-formedness check that had to be moved was one that I don't think we were doing at all before, so it's still an improvement.</p>\n<p>(I spent like three hours on an alternate solution that worked for the tests that were failing, was very pleased when I finally got something that worked, until I made that test's code unreachable and my solution didn't work for it)</p>",
        "id": 151203620,
        "sender_full_name": "davidtwco",
        "timestamp": 1544321669
    },
    {
        "content": "<p>It passes tests locally but it's 2am and I need sleep, so there might be something Travis catches that I didn't see.</p>",
        "id": 151203621,
        "sender_full_name": "davidtwco",
        "timestamp": 1544321691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> can you say a bit more about the ICE?</p>",
        "id": 151477984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544559784
    },
    {
        "content": "<p>It seems like it came from unresolved type variables?</p>",
        "id": 151478006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544559807
    },
    {
        "content": "<p>Yeah, it might be visible in the hidden Travis error GitHub comments <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 151478185,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560026
    },
    {
        "content": "<p>I feel like I thought that wouldn't happen but now I'm not sure why I thought that</p>",
        "id": 151478195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560050
    },
    {
        "content": "<p>I'm trying to find the test</p>",
        "id": 151478198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560055
    },
    {
        "content": "<p>comment says <code>issue-54943-1.rs</code></p>",
        "id": 151478201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560069
    },
    {
        "content": "<p>oh</p>",
        "id": 151478257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560102
    },
    {
        "content": "<p>that is something added in your PR :)</p>",
        "id": 151478258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560105
    },
    {
        "content": "<p>no wonder I can't find it</p>",
        "id": 151478260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560108
    },
    {
        "content": "<p>Yeah, there were three dropck run-pass tests.</p>",
        "id": 151478263,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560117
    },
    {
        "content": "<p>I made them smaller into <code>issue-54943-1.rs</code> and <code>issue-54943-2.rs</code>.</p>",
        "id": 151478268,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560134
    },
    {
        "content": "<p>I had a fix that solved the issue unless the same code was unreachable.</p>",
        "id": 151478281,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560149
    },
    {
        "content": "<p>Hence the two tests.</p>",
        "id": 151478285,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560151
    },
    {
        "content": "<p>I can see why the ICE is occurring</p>",
        "id": 151478295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560170
    },
    {
        "content": "<p>I'm not sure why I thought this wouldn't happen</p>",
        "id": 151478299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560179
    },
    {
        "content": "<p>it seems obvious that it would</p>",
        "id": 151478304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560185
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;auto&quot;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">&quot;this&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would cause the issue, but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,)</span>: <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">&quot;this&quot;</span><span class=\"p\">),);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>wouldn't - comparing both logs I worked it out to be a certain map that didn't contain something - I'm slightly fuzzy on exactly what map.</p>",
        "id": 151478435,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560302
    },
    {
        "content": "<p>I'm not convinced the other case is immune from this problem</p>",
        "id": 151478527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560395
    },
    {
        "content": "<p>it seems like we would maybe need to remember the type we inferred to solve it</p>",
        "id": 151478531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560406
    },
    {
        "content": "<p>The difference was <a href=\"https://github.com/rust-lang/rust/blob/8375ab4ff43474c73e3572c2b226560f8cc8e695/src/librustc/infer/canonical/canonicalizer.rs#L343\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8375ab4ff43474c73e3572c2b226560f8cc8e695/src/librustc/infer/canonical/canonicalizer.rs#L343\">this line</a>.</p>",
        "id": 151478620,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560474
    },
    {
        "content": "<p>In the successful case it took the <code>Ok(..)</code> branch.</p>",
        "id": 151478638,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560492
    },
    {
        "content": "<p>I wasn't able to track it down further.</p>",
        "id": 151478645,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560502
    },
    {
        "content": "<p>I eventually tried applying the projections into the type annotation and saving those into the <code>TypeChecker</code> map that I had (requiring a whole bunch of refactoring so that we stored the <code>UserTypeProjection</code> in the MIR, not the <code>UserTypeAnnotation</code> - that meant that projections didn't need to be applied in the code that gets run for the <code>AscribeUserType</code> statement and it fixed the issue unless the code was unreachable.</p>",
        "id": 151478771,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560646
    },
    {
        "content": "<p>I guess what I have to do is to checkout and build your branch</p>",
        "id": 151478776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560655
    },
    {
        "content": "<p>it's gotten large enough I can't really peruse it effectively on GH :)</p>",
        "id": 151478781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560663
    },
    {
        "content": "<p>I find it isn't too awful if you go commit-by-commit, but all at once it's hard for me to work out.</p>",
        "id": 151478830,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560683
    },
    {
        "content": "<p>I deliberately didn't include the fix to the ICE in the commit that introduced it like I normally would have, instead just adding it on so that it could be popped off and the ICE could be observed again.</p>",
        "id": 151478857,
        "sender_full_name": "davidtwco",
        "timestamp": 1544560737
    },
    {
        "content": "<blockquote>\n<p>I eventually tried applying the projections into the type annotation and saving those into the <code>TypeChecker</code> map that I had (requiring a whole bunch of refactoring so that we stored the <code>UserTypeProjection</code> in the MIR, not the <code>UserTypeAnnotation</code> - that meant that projections didn't need to be applied in the code that gets run for the <code>AscribeUserType</code> statement and it fixed the issue unless the code was unreachable.</p>\n</blockquote>\n<p>Remembered this morning that I saved <a href=\"https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53\">the diff</a> of this change. Don't think there's anything useful in there, but it took a while so I kept it around just in case.</p>",
        "id": 151522061,
        "sender_full_name": "davidtwco",
        "timestamp": 1544618774
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I spent some time reading into the ICE etc</p>",
        "id": 151542379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637125
    },
    {
        "content": "<p>and in general playing with the branch</p>",
        "id": 151542385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637132
    },
    {
        "content": "<p>I was particularly interested in this example:</p>",
        "id": 151542386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637137
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;auto&quot;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">&quot;this&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151542393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637150
    },
    {
        "content": "<p>which is <code>issue-54943-1.rs</code></p>",
        "id": 151542395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637155
    },
    {
        "content": "<p>I think the problem in <strong>this specific case</strong> is that we are creating too many <code>CanonicalUserTypeAnnotation</code> entries</p>",
        "id": 151542408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637174
    },
    {
        "content": "<p>in particular, we wind up with kind of two distinct copies of the <code>(String, A&lt;_&gt;)</code> annotation, one used when projecting out <code>String</code>, and one used when projecting out the <code>A&lt;_&gt;</code></p>",
        "id": 151542435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637206
    },
    {
        "content": "<p>the result is that -- when we instantiate -- we have distinct type variables for those two cases, and the <code>A&lt;_&gt;</code> type variable winds up unconstrained</p>",
        "id": 151542454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637225
    },
    {
        "content": "<p>I feel like there should be only be one index in this case, used with two distinct projections,</p>",
        "id": 151542467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637238
    },
    {
        "content": "<p>but it's not entirely obvious how to modify the source code to make that happen.</p>",
        "id": 151542520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637251
    },
    {
        "content": "<p><em>But also</em>, I'm a bit worried about a separate problem.</p>",
        "id": 151542529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637263
    },
    {
        "content": "<p>which has to do with <code>issue-54943-2.rs</code> -- in that case, I imagine that the type variable would simply never be constrained</p>",
        "id": 151542580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637310
    },
    {
        "content": "<p>(that is, the <code>_</code> in <code>A&lt;_&gt;</code>)</p>",
        "id": 151542588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637323
    },
    {
        "content": "<p>because those constraints arise from type-checking the <code>let</code>, and that code is dead... unless, perhaps we would still see it because we've not stripped dead code?</p>",
        "id": 151542604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637347
    },
    {
        "content": "<p>(I can't recall)</p>",
        "id": 151542612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637352
    },
    {
        "content": "<p>(nope, we definitely strip dead code)</p>",
        "id": 151542726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637455
    },
    {
        "content": "<p>anyway, so that seems like a bit of a difficult challenge that for some reason I had not anticipated. I'm not sure what I expected us to do here, maybe retain some information (which we could do) from typeck that tells us what type (modulo regions) we inferred those variables to?</p>",
        "id": 151543255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637854
    },
    {
        "content": "<p>i'll stop here for now :)</p>",
        "id": 151543261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544637860
    },
    {
        "content": "<p>That explains what I observed happening when experimenting with those tests.</p>",
        "id": 151551897,
        "sender_full_name": "davidtwco",
        "timestamp": 1544638655
    },
    {
        "content": "<p>In particular with the attempt I mentioned yesterday (and linked to a gist of earlier) where by applying the projections to the <code>(String, A&lt;_&gt;)</code> before checking well-formedness fixed the issue - but only when the source of the type annotation wasnâ€™t dead code.</p>",
        "id": 151552154,
        "sender_full_name": "davidtwco",
        "timestamp": 1544638881
    },
    {
        "content": "<p>Iâ€™m not sure how youâ€™d work around the issue because, as I understand it, the <code>(String, A&lt;_&gt;)</code> annotationâ€™s well-formedness check depends on the inference variable for the <code>_</code> having been related to the <code>&amp;str</code> type when the associated <code>AscribeUserType</code> or local decl processing happened previously? I havenâ€™t been able to work out a way to do that when it is in dead code.</p>",
        "id": 151552449,
        "sender_full_name": "davidtwco",
        "timestamp": 1544639144
    },
    {
        "content": "<p>(Thatâ€™s the half-baked understanding I was left with having dug into the compiler as far as that canonicalizer code and the <code>ty_probe</code> function I linked yesterday)</p>",
        "id": 151552560,
        "sender_full_name": "davidtwco",
        "timestamp": 1544639204
    },
    {
        "content": "<p>Yes. I'm sort of leaning towards \"won't fix\" here, tbqh, but I'm torn about it still. I think the best fix would have to involve preserving -- for each user type -- not only the user-given type (as now) but also the \"fully inferred\" variant of it, so that we can unify those. Right now, that fully inferred (modulo regions) type comes from the type-check, but that doesn't apply to dead code, hence the problem.</p>",
        "id": 151560125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544645621
    },
    {
        "content": "<blockquote>\n<p>the result is that -- when we instantiate -- we have distinct type variables for those two cases, and the <code>A&lt;_&gt;</code> type variable winds up unconstrained</p>\n</blockquote>\n<p>Fixing this might be another path that could help with <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 151560678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646094
    },
    {
        "content": "<p>interesting</p>",
        "id": 151560691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646109
    },
    {
        "content": "<p>or at least, it roughly matches up with one of my theories when I was reviewing the RUST_LOG output</p>",
        "id": 151560753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646141
    },
    {
        "content": "<p>trying to make sense of what was happening</p>",
        "id": 151560761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646149
    },
    {
        "content": "<p>in that it seemed like we might be creating two separate sets of fresh type inference variables</p>",
        "id": 151560776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646163
    },
    {
        "content": "<p>for two separate projections out of the <em>same</em> type annotation</p>",
        "id": 151560782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646175
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 151560790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646179
    },
    {
        "content": "<p>it does feel like there should be a \"connection\"</p>",
        "id": 151560798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646186
    },
    {
        "content": "<p>looking at the code, it felt like it wouldn't be <em>entirely</em> trivial to create that; mostly, we have to somehow carry the identify forward</p>",
        "id": 151560812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646209
    },
    {
        "content": "<p>but ohI think we should focus on the meeting now. :)</p>",
        "id": 151560817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646219
    },
    {
        "content": "<p>in a few minutes I guess</p>",
        "id": 151560824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544646228
    },
    {
        "content": "<p>or at least in 7 minutes, yeah</p>",
        "id": 151560827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646234
    },
    {
        "content": "<p>my phone alarm went off so I thought I was already late. :)</p>",
        "id": 151560859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1544646243
    },
    {
        "content": "<p>btw I think this exact question is <a href=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/matches/mod.rs#L315-L326\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/dd8fc7dc06dea00afbd365468cf4804f68a3531c/src/librustc_mir/build/matches/mod.rs#L315-L326\">the reason I used <code>Invariant</code> here</a></p>",
        "id": 151561741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544647049
    },
    {
        "content": "<p>So how do we want to fix the issue here? We could consider it a follow up and land this PR with the well-formedness check of the <code>UserTypeAnnotation::Ty(..)</code> only happening in reachable code and the other case happening in both.</p>",
        "id": 151736055,
        "sender_full_name": "davidtwco",
        "timestamp": 1544737896
    },
    {
        "content": "<p>A good question</p>",
        "id": 151736872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544738715
    },
    {
        "content": "<p>I'm not super sure</p>",
        "id": 151736873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544738716
    },
    {
        "content": "<p>obviously we need to land the PR, it's got a lot of great stuff in it</p>",
        "id": 151736885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544738730
    },
    {
        "content": "<p>we could move everything over to reachable code for now, to at least get consistency</p>",
        "id": 151736898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544738744
    },
    {
        "content": "<p>I don't know that it being consistent is better than it covering more cases. IIRC it still takes the same code path to check well-formedness, the call site for each case is just different.</p>",
        "id": 151736974,
        "sender_full_name": "davidtwco",
        "timestamp": 1544738806
    },
    {
        "content": "<p>Previously we only checked the <code>UserTypeAnnotation::TypeOf</code> case and the whole issue in the first place was supporting unreachable code for that.</p>",
        "id": 151736990,
        "sender_full_name": "davidtwco",
        "timestamp": 1544738834
    },
    {
        "content": "<p>I don't really see how the two cases are different per se, but perhaps you are right. It seems better to report more errors. I guess I just remain sort of ambivalent about whether we should report \"lifetime errors\" in dead code.</p>",
        "id": 151737787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544739627
    },
    {
        "content": "<p>I would like to land this PR (<a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a>) as is. I agree it has lots of great stuff in it, and I would like to have it already landed before I land anything for <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 152108146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545140258
    },
    {
        "content": "<p>I think it's in a state where it could land with a follow-up to fix the underlying cause of the ICE that the last commit fixed.</p>",
        "id": 152108358,
        "sender_full_name": "davidtwco",
        "timestamp": 1545140410
    },
    {
        "content": "<p>I agree with that assessment. The only reason why I haven't r+'ed already is that I'll be meeting with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in about 20 minutes anyway, so I figure I'll give them a chance to weigh in if he so chooses.</p>",
        "id": 152108388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545140458
    },
    {
        "content": "<p>I told <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that I'd like to take one more look. I'm doing so now.</p>",
        "id": 152124669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545154719
    },
    {
        "content": "<p>Just pushed a rebase for the conflict that happened.</p>",
        "id": 152124702,
        "sender_full_name": "davidtwco",
        "timestamp": 1545154763
    },
    {
        "content": "<p>ok, so, I think I figured out why I was not seeing the errors I expected, but I also don't think that this PR is quite fixing the bug it claims to fix</p>",
        "id": 152125461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155675
    },
    {
        "content": "<p>though it does fix some other bugs</p>",
        "id": 152125463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155681
    },
    {
        "content": "<p>in particular, the test <code>issue-54943.rs</code> does not include <code>#![feature(nll)]</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR the type `&amp;&#39;a u32` does not fulfill the required lifetime [E0477]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152125482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155707
    },
    {
        "content": "<p>if you run with <code>-Zborrowck=mir</code>, the test compiles</p>",
        "id": 152125489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155714
    },
    {
        "content": "<p>well, almost:</p>\n<div class=\"codehilite\"><pre><span></span>warning: unreachable statement\n  --&gt; issue-54943.rs:16:5\n   |\n16 |     let x = foo::&lt;&amp;&#39;a u32&gt;();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unreachable_code)] on by default\n\nerror[E0131]: `main` function is not allowed to have generic parameters\n  --&gt; issue-54943.rs:13:8\n   |\n13 | fn main&lt;&#39;a&gt;() {\n   |        ^^^^ `main` cannot have generic parameters\n</pre></div>",
        "id": 152125498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155737
    },
    {
        "content": "<p>(if I rename <code>main</code> to <code>bar</code>, that error goes away)</p>",
        "id": 152125546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155766
    },
    {
        "content": "<p>anyway I think I know why that is happening</p>",
        "id": 152125551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155776
    },
    {
        "content": "<p>the code is creating the <code>TyFnDef</code> for <code>foo::&lt;&amp;'a u32&gt;</code> and is proving the predicate <code>WF(foo::&lt;&amp;'a u32&gt;)</code>, but the code that computes the WF conditions for such a type is rather flawed</p>",
        "id": 152125576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155832
    },
    {
        "content": "<p>and in fact proving that predicate is a no-op</p>",
        "id": 152125583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155838
    },
    {
        "content": "<blockquote>\n<p>if you run with <code>-Zborrowck=mir</code>, the test compiles</p>\n</blockquote>\n<p>(the error you are seeing comes from the older, lexical check)</p>",
        "id": 152125589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155852
    },
    {
        "content": "<p>this explains why e.g. this test (which I created as <code>issue-54943-3.rs</code>)  compiles with no error:</p>\n<div class=\"codehilite\"><pre><span></span>use std::fmt::Debug;\n\nfn foo&lt;T: &#39;static + Debug&gt;(_: T) { }\n\nfn bar&lt;&#39;a&gt;() {\n    return;\n\n    let _x = foo::&lt;Vec&lt;_&gt;&gt;(Vec::&lt;&amp;&#39;a u32&gt;::new());\n    //~^ ERROR the type `&amp;&#39;a u32` does not fulfill the required lifetime [E0477]\n}\n</pre></div>\n\n\n<p>...and also no ICE.</p>",
        "id": 152125683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155937
    },
    {
        "content": "<p>I expected that test to ICE because the <code>_</code> in <code>Vec&lt;_&gt;</code> would be unconstrained, and we would never be able to prove that <code>Vec&lt;_&gt;: Debug</code></p>",
        "id": 152125843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156076
    },
    {
        "content": "<p>(but it turns out we don't even try)</p>",
        "id": 152125850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156087
    },
    {
        "content": "<p>(I'm trying to decide what I think we ought to do, in any case)</p>",
        "id": 152125912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156125
    },
    {
        "content": "<p>I would definitely like to land this PR or most of it, it seems to be in a good direction</p>",
        "id": 152125931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156147
    },
    {
        "content": "<p>If we don't try it might be the <code>UserTypeAnnotation::Ty(..)</code> case.</p>",
        "id": 152125935,
        "sender_full_name": "davidtwco",
        "timestamp": 1545156149
    },
    {
        "content": "<p>no</p>",
        "id": 152126072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156303
    },
    {
        "content": "<p>the problem is <a href=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc/ty/wf.rs#L362-L365\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc/ty/wf.rs#L362-L365\">this code here</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">FnPtr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// let the loop iterate into the argument/return</span>\n<span class=\"w\">                    </span><span class=\"c1\">// types appearing in the fn signature</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152126106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156348
    },
    {
        "content": "<p>that is supposed to be returning the conditions for the type to be WF</p>",
        "id": 152126109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156358
    },
    {
        "content": "<p>for <code>FnPtr</code>, it is correct, but for <code>FnDef</code>, I think it is wrong</p>",
        "id": 152126162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156374
    },
    {
        "content": "<p>it should probably be treated <a href=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc/ty/wf.rs#L296-L300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc/ty/wf.rs#L296-L300\">the same as <code>TyAdt</code></a></p>",
        "id": 152126181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156396
    },
    {
        "content": "<p>the result is that when we do this:</p>",
        "id": 152126198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prove_predicate</span><span class=\"p\">(</span><span class=\"n\">Predicate</span>::<span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in <code>librustc_traits/type_op.rs</code> (in the PR branch)</p>",
        "id": 152126217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156443
    },
    {
        "content": "<p>it winds up being basically a no-op</p>",
        "id": 152126224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156449
    },
    {
        "content": "<p>hmm although</p>",
        "id": 152126236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156470
    },
    {
        "content": "<p>let me double check a few things ;)</p>",
        "id": 152126290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156502
    },
    {
        "content": "<p>I still think that code is wrong but there is something I don't quite yet understand</p>",
        "id": 152126298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545156513
    },
    {
        "content": "<p>Oh, hm, interesting. The type-op code never actually checks whether the type-ops result in a \"certainty: Proven\" result, which I believe is the expected thing. So actually we <em>do</em> create the conditions I thought would lead to an ICE, but I guess we're not checking the result that I thought we were.</p>",
        "id": 152126837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545157039
    },
    {
        "content": "<p>to clarify: in my example above that I expected to ICE, what happens is that we go to prove <code>WF(foo::&lt;Vec&lt;_&gt;&gt;</code> or whatever -- this requires us to prove <code>WF(Vec&lt;_&gt;)</code>, which we fail to do, and so we give back an ambiguous result</p>",
        "id": 152126871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545157078
    },
    {
        "content": "<p>I .. think that should probably be an ICE, we're not supposed to have unresolved type variables like that in the region queries</p>",
        "id": 152126927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545157099
    },
    {
        "content": "<p>I'm not entirely sure why the other examples do result in ICEs now, I have to go back and re-check <em>that</em></p>",
        "id": 152126936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545157117
    },
    {
        "content": "<p>(I'm a bit afraid to add in the asseritons I think we should have...)</p>",
        "id": 152127016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545157205
    },
    {
        "content": "<p>Changing the <code>ty::FnDef</code> case that you mentioned previously makes <code>issue-54943.rs</code> fail.</p>",
        "id": 152127269,
        "sender_full_name": "davidtwco",
        "timestamp": 1545157394
    },
    {
        "content": "<p>(that is, fail to compile, as expected, not fail to do what we want)</p>",
        "id": 152127281,
        "sender_full_name": "davidtwco",
        "timestamp": 1545157412
    },
    {
        "content": "<p>It also makes the <code>issue-54943-3.rs</code> you mention above ICE.</p>",
        "id": 152127370,
        "sender_full_name": "davidtwco",
        "timestamp": 1545157465
    },
    {
        "content": "<p><code>unresolved inference variable in outlives: _#0t</code> as before</p>",
        "id": 152127398,
        "sender_full_name": "davidtwco",
        "timestamp": 1545157504
    },
    {
        "content": "<p>ah ok yes that is what I expect</p>",
        "id": 152128064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158028
    },
    {
        "content": "<p>you altered <a href=\"http://wf.rs\" target=\"_blank\" title=\"http://wf.rs\">wf.rs</a>?</p>",
        "id": 152128068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158032
    },
    {
        "content": "<p>does it affect any other tests?</p>",
        "id": 152128073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158037
    },
    {
        "content": "<p>None of the <code>issue-54943-*</code> tests, let me run the rest.</p>",
        "id": 152128124,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158050
    },
    {
        "content": "<p>I meant the whole test suite , yeah</p>",
        "id": 152128136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158061
    },
    {
        "content": "<p>Two new errors on these tests w/out compare mode NLL:</p>\n<div class=\"codehilite\"><pre><span></span>    [ui] ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.rs\n    [ui] ui/nll/ty-outlives/projection-where-clause-none.rs\n</pre></div>",
        "id": 152128279,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158177
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>---- [ui] ui/nll/ty-outlives/projection-where-clause-none.rs stdout ----\ndiff of stderr:\n\n+       error[E0309]: the associated type `&lt;T as MyTrait&lt;&#39;a&gt;&gt;::Output` may not live long enough\n+         --&gt; $DIR/projection-where-clause-none.rs:16:5\n+          |\n+       LL |     bar::&lt;T::Output&gt;() //~ ERROR the parameter type `T` may not live long enough\n+          |     ^^^^^^^^^^^^^^^^\n+          |\n+          = help: consider adding an explicit lifetime bound `&lt;T as MyTrait&lt;&#39;a&gt;&gt;::Output: &#39;a`...\n+\n1       error[E0309]: the parameter type `T` may not live long enough\n2         --&gt; $DIR/projection-where-clause-none.rs:16:5\n3          |\n\n6          |\n7          = help: consider adding an explicit lifetime bound `T: &#39;a`...\n8\n-       error: aborting due to previous error\n+       error: aborting due to 2 previous errors\n10\n11      For more information about this error, try `rustc --explain E0309`.\n12\n</pre></div>",
        "id": 152128304,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158193
    },
    {
        "content": "<p>Same w/ compare-mode NLL.</p>",
        "id": 152128321,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158213
    },
    {
        "content": "<p>ok so we get some double errors</p>",
        "id": 152128436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158297
    },
    {
        "content": "<p>but not <em>new</em> errors</p>",
        "id": 152128446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158302
    },
    {
        "content": "<p>that's not surprising, I think we have some code that is basically doing repeating same checks twice now</p>",
        "id": 152128456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158313
    },
    {
        "content": "<p>Didn't affect any run-pass tests.</p>",
        "id": 152128692,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158524
    },
    {
        "content": "<p>specifically I think that <a href=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc_traits/type_op.rs#L198-L209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/cb84844e83ee88684ef89cc02221a26abbf92530/src/librustc_traits/type_op.rs#L198-L209\">these checks</a> are kind of duplicated by the WF check now</p>",
        "id": 152128781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158628
    },
    {
        "content": "<p>but I'm not 100% sure</p>",
        "id": 152128784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545158631
    },
    {
        "content": "<p>Any thoughts on the ICEs?</p>",
        "id": 152128865,
        "sender_full_name": "davidtwco",
        "timestamp": 1545158685
    },
    {
        "content": "<p>sorry, I was on a call</p>",
        "id": 152131645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161172
    },
    {
        "content": "<p>well, my thoughts are that we should (for now) try to move towards checking only reachable constraints</p>",
        "id": 152131662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161188
    },
    {
        "content": "<p>but I think that the \"right fix\" is probably to have typeck produce a (region-erased) \"instantiated version\" of those annotations</p>",
        "id": 152131679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161209
    },
    {
        "content": "<p>i.e., the user-type-annotations which are -- right now -- canonicalized, would also have to have the \"inferred\" form</p>",
        "id": 152131704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161242
    },
    {
        "content": "<p>So should I remove the query for well formed type annotations and just move what it does back into the original query?</p>",
        "id": 152131707,
        "sender_full_name": "davidtwco",
        "timestamp": 1545161248
    },
    {
        "content": "<p>probably for now yes</p>",
        "id": 152131712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161256
    },
    {
        "content": "<p>(hmm)</p>",
        "id": 152131721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161264
    },
    {
        "content": "<p>I am trying to decide what the ultimate architeture would be</p>",
        "id": 152131726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161272
    },
    {
        "content": "<p>why exactly did we make a query in the first place?</p>",
        "id": 152131786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545161299
    },
    {
        "content": "<p>I needed access to a certain kind of context and I felt it'd be easier to get that the same way the existing query did.</p>",
        "id": 152131809,
        "sender_full_name": "davidtwco",
        "timestamp": 1545161339
    },
    {
        "content": "<p>Well, I could just copy the existing well-formedness check for one of the cases but I needed the helper functions it had, so it had to be a query to get those.</p>",
        "id": 152131828,
        "sender_full_name": "davidtwco",
        "timestamp": 1545161367
    },
    {
        "content": "<p>Made it a tad easier.</p>",
        "id": 152131830,
        "sender_full_name": "davidtwco",
        "timestamp": 1545161370
    },
    {
        "content": "<p>I've now got a build that has the refactoring, other two fixes but doesn't actually perform well-formedness checks on unreachable code.</p>",
        "id": 152135204,
        "sender_full_name": "davidtwco",
        "timestamp": 1545164610
    },
    {
        "content": "<p>Only boring old reachable code.</p>",
        "id": 152135209,
        "sender_full_name": "davidtwco",
        "timestamp": 1545164617
    },
    {
        "content": "<p>If that's the route we want to take then I can push it and stop the PR from closing <a href=\"https://github.com/rust-lang/rust/issues/54943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54943\">#54943</a>.</p>",
        "id": 152135245,
        "sender_full_name": "davidtwco",
        "timestamp": 1545164642
    },
    {
        "content": "<p>seems like a solid step forward</p>",
        "id": 152135438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545164821
    },
    {
        "content": "<p>and we can then discuss the next step for unreachable code</p>",
        "id": 152135447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545164829
    },
    {
        "content": "<p>Alright, PR updated.</p>",
        "id": 152135681,
        "sender_full_name": "davidtwco",
        "timestamp": 1545165026
    },
    {
        "content": "<p>Donâ€™t worry if you donâ€™t, but do you think youâ€™ll have time to jot down some ideas for fixing the unreachable type annotations before the holidays <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>? Iâ€™d like to be able to get a start on that during mine.</p>",
        "id": 152142184,
        "sender_full_name": "davidtwco",
        "timestamp": 1545170684
    },
    {
        "content": "<p>Responded to the review comments.</p>",
        "id": 152142563,
        "sender_full_name": "davidtwco",
        "timestamp": 1545171063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> will try to do so asap</p>",
        "id": 152142672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171161
    },
    {
        "content": "<p>I expect I can do that before the holidays, yes</p>",
        "id": 152142676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171169
    },
    {
        "content": "<p>Thanks, I appreciate it.</p>",
        "id": 152142679,
        "sender_full_name": "davidtwco",
        "timestamp": 1545171172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> re: the ignored tests, as a rule, I think ignored tests should never be committed</p>",
        "id": 152143278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171828
    },
    {
        "content": "<p>basically because it's very easy to forget that they are ignored</p>",
        "id": 152143284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171837
    },
    {
        "content": "<p>whereas if you edit the annotations to document the current behavior</p>",
        "id": 152143342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171877
    },
    {
        "content": "<p>then when you fix it, you see that (as test failures :)</p>",
        "id": 152143346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545171883
    },
    {
        "content": "<p>Thatâ€™s fair. In this case I think since weâ€™ll be following up pretty quickly itâ€™s probably fine? If you want I can quickly change them though.</p>",
        "id": 152143855,
        "sender_full_name": "davidtwco",
        "timestamp": 1545172386
    },
    {
        "content": "<p>I'd prefer not to ignore them personally</p>",
        "id": 152143933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172452
    },
    {
        "content": "<p>(but I agree not that big a deal)</p>",
        "id": 152143938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172459
    },
    {
        "content": "<p>so if it's annoying for you to remove that maybe i'll just r+ :)</p>",
        "id": 152143948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172484
    },
    {
        "content": "<p>Give me a second and Iâ€™ll change them.</p>",
        "id": 152143990,
        "sender_full_name": "davidtwco",
        "timestamp": 1545172560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed them.</p>",
        "id": 152144256,
        "sender_full_name": "davidtwco",
        "timestamp": 1545172836
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you still around to answer Q's about this PR (<a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a>)?</p>",
        "id": 152185541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229438
    },
    {
        "content": "<p>Yeah, I'm around.</p>",
        "id": 152185594,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229450
    },
    {
        "content": "<p>so I've been playing with a checkout of it locally</p>",
        "id": 152185602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229462
    },
    {
        "content": "<p>to see whether it helps me make a solution to <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 152185629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229477
    },
    {
        "content": "<p>and I noticed someting</p>",
        "id": 152185631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229480
    },
    {
        "content": "<p>the way you modified the <code>fn user_ty</code> on e.g. <code>PatternTypeProjections</code></p>",
        "id": 152185658,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229515
    },
    {
        "content": "<p>takes a <code>annotations: &amp;mut CanonicalUserTypeAnnotations&lt;'tcx&gt;</code></p>",
        "id": 152185681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229547
    },
    {
        "content": "<p>and then the <code>user_ty</code> in <code>PatternTypeProjection</code> (singular) pushes annotations on to it</p>",
        "id": 152185737,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229588
    },
    {
        "content": "<p>while the <code>user_ty</code> on <code>PatternTypeProjections</code> (plural) does a map over the <code>.contents</code> and calls <code>user_ty</code> on each</p>",
        "id": 152185762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229624
    },
    {
        "content": "<p>this ends up meaning that we get distinct entries in the <code>annotations</code> for each projection</p>",
        "id": 152185788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229647
    },
    {
        "content": "<p>but ... wouldn't it be more appropriate to have a single entry in the annotations, that we add at the outset, and then the projections into that annotation each reference the single entry that they share?</p>",
        "id": 152185864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229689
    },
    {
        "content": "<p>(this obviously is a more invasive change the code. but I think it is ... \"more correct\" ...?)</p>",
        "id": 152185890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229717
    },
    {
        "content": "<p>Yeah, it would. Not sure why I did it that way, there wasn't any particular rhyme or reason behind it, just what I ended up doing while fixing the bunch of errors that would have been around during that refactoring.</p>",
        "id": 152185904,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229737
    },
    {
        "content": "<p>I suppose I can just try to make this change myself</p>",
        "id": 152185929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229760
    },
    {
        "content": "<p>In fact, I think that was a problem that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had pointed out in relation to the ICEs we were seeing.</p>",
        "id": 152185932,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229764
    },
    {
        "content": "<p>on my check out of this branch</p>",
        "id": 152185935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229770
    },
    {
        "content": "<p>hmm okay yes</p>",
        "id": 152185940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229776
    },
    {
        "content": "<p>I think it wouldn't be too bad to fix actually.</p>",
        "id": 152185942,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229777
    },
    {
        "content": "<p><a href=\"#narrow/stream/122657-wg-nll/subject/.2354943.20user.20type.20annot.20in.20unreachable.20code/near/151542435\" title=\"#narrow/stream/122657-wg-nll/subject/.2354943.20user.20type.20annot.20in.20unreachable.20code/near/151542435\">this message</a></p>",
        "id": 152186006,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229808
    },
    {
        "content": "<p>I think he and I briefly spoke on it yesterday (where I asserting that your PR did not suffer from this problem, because I was looking in the wrong place for the instance of the problem)</p>",
        "id": 152186007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229811
    },
    {
        "content": "<p>I think if we made that change, then asserted well-formedness for the <code>UserTypeAnnotation::Ty(..)</code> and <code>UserTypeAnnotation::TypeOf(..)</code> case then where that would normally break <code>issue-54943-1.rs</code> and <code>issue-54943-2.rs</code>, it would only break <code>issue-54943-2.rs</code>?</p>",
        "id": 152186106,
        "sender_full_name": "davidtwco",
        "timestamp": 1545229915
    },
    {
        "content": "<p>/me looks</p>",
        "id": 152186152,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545229925
    },
    {
        "content": "<p>it certainly seems like it would help in at least <a href=\"http://issue-54943-1.rs\" target=\"_blank\" title=\"http://issue-54943-1.rs\">issue-54943-1.rs</a>, if done properly.</p>",
        "id": 152186286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230045
    },
    {
        "content": "<p>Since the issue there was that we had some annotation over <code>(String, &amp;'XXX str)</code> (or something like that, I forget exactly) and because there were two copies of the annotation, when the type relation happened because the code was reachable, you ended up with one copy that was <code>(String, &amp;'XXX str)</code> (when looking at the first field) and one that was <code>(String, &amp;'a str)</code> (when relating the second field) - and when doing well-formedness checking of that whole annotation later you ended up trying to work with <code>&amp;'XXX str</code> and failing. Since there would now be only one annotation, both fields would be related and you'd only have <code>(String, &amp;'a str)</code>.</p>",
        "id": 152186334,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230101
    },
    {
        "content": "<p>But they don't get related at all when unreachable, which is what <code>issue-54943-2.rs</code> shows.</p>",
        "id": 152186358,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230120
    },
    {
        "content": "<p>how are you thinking you'd go about doing this? Would you scan the <code>annotations</code> first to see if the given <code>CanonicalUserTypeAnnotation</code> was previously pushed onto it? Or are you thinking of a bigger re-architecting?</p>",
        "id": 152186363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230122
    },
    {
        "content": "<p>I had worked around this previously by having the projections indexed into an vec instead of the annotations, and then in the instantiate phase where I normally instantiate the canonicalized annotations now, I do that and apply the projections - that way when checking the well-formedness later, we were only doing so on that one field that would have been related - still failed on the unreachable case though.</p>",
        "id": 152186472,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230214
    },
    {
        "content": "<p>I'm not too sure, I'd need to refresh myself on the code.</p>",
        "id": 152186496,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230236
    },
    {
        "content": "<p>okay. just curious</p>",
        "id": 152186499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230240
    },
    {
        "content": "<blockquote>\n<p>I had worked around this previously by having the projections indexed into an vec instead of the annotations, and then in the instantiate phase where I normally instantiate the canonicalized annotations now, I do that and apply the projections - that way when checking the well-formedness later, we were only doing so on that one field that would have been related - still failed on the unreachable case though.</p>\n</blockquote>\n<p><a href=\"https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53\">diff for this experiment</a></p>",
        "id": 152186528,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230258
    },
    {
        "content": "<blockquote>\n<p>how are you thinking you'd go about doing this? Would you scan the <code>annotations</code> first to see if the given <code>CanonicalUserTypeAnnotation</code> was previously pushed onto it? Or are you thinking of a bigger re-architecting?</p>\n</blockquote>\n<p>Do you remember if a <code>PatternTypeProjections</code> only ever has the projections into a single annotation? Is it only ever <code>Field(0)</code>, <code>Field(1)</code> and <code>Field(2)</code> into the same <code>(X, Y, Z)</code> or can it be into <code>(X, Y)</code>, <code>(X, Z)</code> and <code>(Z, Y, X)</code> respectively?</p>",
        "id": 152186821,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230547
    },
    {
        "content": "<p>I'm pretty sure that the intent is that the <code>base</code> will be able to differ, at least in the long term</p>",
        "id": 152186866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230598
    },
    {
        "content": "<p>because we want to be able to ascribe types on patterns themselves</p>",
        "id": 152186873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230609
    },
    {
        "content": "<p>which means we'll get into scenarios like</p>",
        "id": 152186892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230618
    },
    {
        "content": "<p><code>let (x: X, y): PairOfXandY;</code></p>",
        "id": 152186948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230652
    },
    {
        "content": "<p>I guess I'd probably just have worked out some sort of check to see whether an annotation already exists and if so just return the same id.</p>",
        "id": 152186993,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230702
    },
    {
        "content": "<p>and thus the accumulated state as we descend will (eventually) have distinct patterns that we are potentially projecting out of.</p>",
        "id": 152186996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230703
    },
    {
        "content": "<blockquote>\n<p>I guess I'd probably just have worked out some sort of check to see whether an annotation already exists and if so just return the same id.</p>\n</blockquote>\n<p>Yeah I'm going to try that now on my local checkout</p>",
        "id": 152187024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230721
    },
    {
        "content": "<p>I'm not going to bother with a hashtable or anything. I don't expect this vector to grow much.</p>",
        "id": 152187039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230740
    },
    {
        "content": "<p>(which may be a terrible assumption longer term, but for now... )</p>",
        "id": 152187046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230757
    },
    {
        "content": "<p>Alternatively, I don't mind having some duplication of annotations as we propagate them through to NLL and then applying the projection before it is used at all in NLL type check.</p>",
        "id": 152187133,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230820
    },
    {
        "content": "<p>Or just as early as we can.</p>",
        "id": 152187149,
        "sender_full_name": "davidtwco",
        "timestamp": 1545230829
    },
    {
        "content": "<p>well the reason why I want to try avoiding duplicating the annotations is that, in cases like the \"potentially wrong-headed demo\" from <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a>, I think I need to ensure that we only have one annotation in hand when it gets its variables instantiated.</p>",
        "id": 152187302,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230935
    },
    {
        "content": "<p>Right now, because there are duplicate annotations for each projection, when I look at the types for <code>y</code> and <code>_z</code> in <code>let (mut y, mut _z): Pair&lt;&amp;u32&gt; = (s, x);</code>, I do not think I have much hope of ensuring that their respective types actually use the same regions.</p>",
        "id": 152187347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545230990
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 152187404,
        "sender_full_name": "davidtwco",
        "timestamp": 1545231006
    },
    {
        "content": "<p>yay: my modifications to your PR fix <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 152191270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234050
    },
    {
        "content": "<p>The deduplication of annotations?</p>",
        "id": 152191292,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234077
    },
    {
        "content": "<p>Is it on a branch? I'd be interested in taking a look.</p>",
        "id": 152191301,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234097
    },
    {
        "content": "<p>Its not uploaded yet, but I'll push in a moment.</p>",
        "id": 152191309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234112
    },
    {
        "content": "<p>If you want you could push straight onto my branch so we don't need to wait two bors cycles for it to land.</p>",
        "id": 152191378,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234163
    },
    {
        "content": "<p>Well I think the best thing may be for you to look at the two commits in question and cherry-pick them over if you like them.</p>",
        "id": 152192022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234771
    },
    {
        "content": "<p>I don't want the other change I made to get mixed in with yours unless you want it to be there.</p>",
        "id": 152192038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234790
    },
    {
        "content": "<p>Alright, sounds good.</p>",
        "id": 152192043,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234801
    },
    {
        "content": "<p>this is branch: <a href=\"https://github.com/pnkfelix/rust/commits/issue-54943-with-fix-for-55748\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commits/issue-54943-with-fix-for-55748\">https://github.com/pnkfelix/rust/commits/issue-54943-with-fix-for-55748</a></p>",
        "id": 152192127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234844
    },
    {
        "content": "<p>I <em>think</em> it will build and still fix my problem. (Its a quick result of me removing a bunch of code that was just noise now that I found these smaller deltas...)</p>",
        "id": 152192155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234876
    },
    {
        "content": "<p>Is it just the first two commits?</p>",
        "id": 152192215,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234935
    },
    {
        "content": "<p>the two commits I'm suggesting you consider cherry picking are <a href=\"https://github.com/pnkfelix/rust/commit/194e25d8783504a0b2fc3dd4622545b5baccafac\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commit/194e25d8783504a0b2fc3dd4622545b5baccafac\">194e25d</a> and <a href=\"https://github.com/pnkfelix/rust/commit/eaf062131abe70468e08ad0d343d3ba311ab9530\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust/commit/eaf062131abe70468e08ad0d343d3ba311ab9530\">eaf0621</a></p>",
        "id": 152192228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234944
    },
    {
        "content": "<p>yeah, just the first two</p>",
        "id": 152192232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545234948
    },
    {
        "content": "<p>Yeah, I'll grab those, they look like they'd just be a straight improvement on what is currently there.</p>",
        "id": 152192296,
        "sender_full_name": "davidtwco",
        "timestamp": 1545234969
    },
    {
        "content": "<p>okay great. and now I've just confirmed that that branch does indeed fix my demo.</p>",
        "id": 152192331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235013
    },
    {
        "content": "<p>Doing a quick UI test run with it locally and then I'll push them to my PR.</p>",
        "id": 152192461,
        "sender_full_name": "davidtwco",
        "timestamp": 1545235143
    },
    {
        "content": "<p>note that it <em>might</em> <code>ui/nll/user-annotations/pattern.rs</code>, since one test in there is broken by my branch.</p>",
        "id": 152192726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235334
    },
    {
        "content": "<p>but honestly I think that is due to my third commit that you are not cherry-picking.</p>",
        "id": 152192732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235347
    },
    {
        "content": "<p>I guess I'll be able to confirm that in a moment.</p>",
        "id": 152192742,
        "sender_full_name": "davidtwco",
        "timestamp": 1545235362
    },
    {
        "content": "<p>Had a failure in <code>ui/dropck/dropck_trait_cycle_checked.rs</code> but it was just the attribution of a error changing from a \"cast\" to a \"type annotation\" so it seems OK.</p>",
        "id": 152193232,
        "sender_full_name": "davidtwco",
        "timestamp": 1545235741
    },
    {
        "content": "<p>interesting that I didn't see that on my end...</p>",
        "id": 152193365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235819
    },
    {
        "content": "<p>was it from compare-mode=nll or something?</p>",
        "id": 152193376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235836
    },
    {
        "content": "<p>It was.</p>",
        "id": 152193380,
        "sender_full_name": "davidtwco",
        "timestamp": 1545235842
    },
    {
        "content": "<p>ok i see</p>",
        "id": 152193386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545235848
    },
    {
        "content": "<p>Anyway, updated the PR with those.</p>",
        "id": 152193582,
        "sender_full_name": "davidtwco",
        "timestamp": 1545236003
    },
    {
        "content": "<p>I noted a concern here: <a href=\"https://github.com/rust-lang/rust/pull/55937#pullrequestreview-186731482\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55937#pullrequestreview-186731482\">link</a></p>",
        "id": 152210014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250807
    },
    {
        "content": "<p>I tried <a href=\"https://gist.github.com/davidtwco/515efb2d947211e240955a437d712251\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/515efb2d947211e240955a437d712251\">this test case</a> which is similar to what you mentioned in the issue, and it has <a href=\"https://gist.github.com/davidtwco/3724fd9ad0f5363982dfc293797fa145\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/3724fd9ad0f5363982dfc293797fa145\">this MIR</a>.</p>",
        "id": 152210675,
        "sender_full_name": "davidtwco",
        "timestamp": 1545251406
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152210679,
        "sender_full_name": "davidtwco",
        "timestamp": 1545251411
    },
    {
        "content": "<p>I guess this is because the span is included</p>",
        "id": 152210766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251519
    },
    {
        "content": "<p>doesn't feel \"right\" to me</p>",
        "id": 152210796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251523
    },
    {
        "content": "<p>but it may prevent there from being an actual bug</p>",
        "id": 152210812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251528
    },
    {
        "content": "<p>I am wondering if some kind of trickery involving macros can distinct annotations with the same span</p>",
        "id": 152210838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/davidtwco/2347f13126e9471703acb25829242168\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/2347f13126e9471703acb25829242168\">test</a> and <a href=\"https://gist.github.com/davidtwco/ceb500acaac1c278ec89115b8898d262\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/ceb500acaac1c278ec89115b8898d262\">mir</a>?</p>",
        "id": 152211039,
        "sender_full_name": "davidtwco",
        "timestamp": 1545251743
    },
    {
        "content": "<p>that's roughly what I had in mind, yes :)</p>",
        "id": 152211122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251785
    },
    {
        "content": "<p>okay so then that approach isn't quite right I guess...</p>",
        "id": 152212185,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545252746
    },
    {
        "content": "<p>I guess if we included a <code>HirId</code> or something it could work</p>",
        "id": 152212229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545252806
    },
    {
        "content": "<p>yeah I was just musing that tying it back to either the HIR or the HAIR would be necessary to deal with these scenarios</p>",
        "id": 152212257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545252833
    },
    {
        "content": "<p>right, I had thought first about refactoring things more broadly, but perhaps adding a <code>HirId</code> would be a \"good enough\" hack</p>",
        "id": 152212336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545252870
    },
    {
        "content": "<p>I should try to make a variant of <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's test that shows the bug without having to look at MIR</p>",
        "id": 152212672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545253099
    },
    {
        "content": "<p>I tried for a little bit to do that but struggled.</p>",
        "id": 152212690,
        "sender_full_name": "davidtwco",
        "timestamp": 1545253118
    },
    {
        "content": "<p>I can probably do it. Not tonight though. Have to wait until I get a bit more sleep</p>",
        "id": 152212741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545253166
    },
    {
        "content": "<p>Okay I have a test but its coupled to my own work for <a href=\"https://github.com/rust-lang/rust/issues/55748\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55748\">#55748</a></p>",
        "id": 152247669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545302635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you may want to just take my commits out of your PR</p>",
        "id": 152247720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545302649
    },
    {
        "content": "<p>and I'll do them in a manner that doesn't get fooled by macros separately.</p>",
        "id": 152247728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545302666
    },
    {
        "content": "<p>(If you want to see it, <a href=\"https://gist.github.com/6802e05d447dc5415774a214ff6ea5ae\" target=\"_blank\" title=\"https://gist.github.com/6802e05d447dc5415774a214ff6ea5ae\">this is the test</a>.]</p>",
        "id": 152247827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545302781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Is it only deduplication within a <code>PatternTypeProjections</code> or is it over all annotations that you need?</p>",
        "id": 152252966,
        "sender_full_name": "davidtwco",
        "timestamp": 1545308708
    },
    {
        "content": "<p>i think its only over <code>PatternTypeProjections</code></p>",
        "id": 152252975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545308743
    },
    {
        "content": "<p>or rather, I think that the only place where a single source type can cause multiple entries to be added ...?</p>",
        "id": 152253027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545308770
    },
    {
        "content": "<p>by \"source type\" I mean ... I guess a node representing a type in the macro-expanded AST</p>",
        "id": 152253040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545308810
    },
    {
        "content": "<p>I've got something that doesn't deduplicate as much - it'll deduplicate within <code>PatternTypeProjections</code> so if you end up having a <code>Field(field[0])</code> and a <code>Field(field[1])</code> out of the same annotation then it won't be duplicated and won't be affected by macros or rely on spans. But it doesn't deduplicate globally like your fix did where the same annotation isn't used for a <code>StatementKind::AscribeUserType</code> statement even if it is the same underlying <code>Ty</code>.</p>",
        "id": 152253163,
        "sender_full_name": "davidtwco",
        "timestamp": 1545308955
    },
    {
        "content": "<p>I'm not sure if that is useful.</p>",
        "id": 152253166,
        "sender_full_name": "davidtwco",
        "timestamp": 1545308960
    },
    {
        "content": "<p>it may be enough for my purposes</p>",
        "id": 152253170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545308979
    },
    {
        "content": "<p>my fix de-duplicating globally was a bug</p>",
        "id": 152253172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545308991
    },
    {
        "content": "<p>For example, with my test case from yesterday, I <a href=\"https://gist.github.com/davidtwco/b1871efb357a7c6a23901f2bd35fd582\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/b1871efb357a7c6a23901f2bd35fd582\">get this</a>.</p>",
        "id": 152253255,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309079
    },
    {
        "content": "<p>For the code from your issue, <a href=\"https://gist.github.com/davidtwco/3d5b8bbe84c640ae5f1210280ad08ba9\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/3d5b8bbe84c640ae5f1210280ad08ba9\">I get this</a>.</p>",
        "id": 152253264,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309109
    },
    {
        "content": "<p>I'm not sure if it is right or not.</p>",
        "id": 152253266,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309115
    },
    {
        "content": "<p>I suspect it isn't, because there are a lot of annotations.</p>",
        "id": 152253268,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309120
    },
    {
        "content": "<p>And they're still different.</p>",
        "id": 152253310,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309149
    },
    {
        "content": "<p>/me reads</p>",
        "id": 152253320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545309186
    },
    {
        "content": "<p>In <code>visit_bindings</code> instead of adding the <code>CanonicalUserTypeAnnotation</code> to <code>PatternTypeProjections</code> and then cloning that each time you add a projection, I'm storing it to get an index at the start and cloning the index after adding a projection.</p>",
        "id": 152253336,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309241
    },
    {
        "content": "<p>its a good sign that lines 78 and 79 on your code (for my issue) are referencing the same UserTypeAnnotation</p>",
        "id": 152253373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545309243
    },
    {
        "content": "<p>Which I thought would work.</p>",
        "id": 152253376,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309245
    },
    {
        "content": "<p>yes that sounds plausible.</p>",
        "id": 152253392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545309284
    },
    {
        "content": "<p>You maybe want to just show me the diff?</p>",
        "id": 152253396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545309293
    },
    {
        "content": "<p>(and I'll apply it on my branch and give it  a whirl)</p>",
        "id": 152253408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545309315
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/a00b8af51ca45558085baf838cfdc79f\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/a00b8af51ca45558085baf838cfdc79f\">https://gist.github.com/davidtwco/a00b8af51ca45558085baf838cfdc79f</a></p>",
        "id": 152253423,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309353
    },
    {
        "content": "<p>I also haven't run all the tests on it, just those two files - so it might be completely broken in ways I've not checked yet.</p>",
        "id": 152253466,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309373
    },
    {
        "content": "<p>(going to grab lunch now, so might be delayed in responding for ~20mins)</p>",
        "id": 152253473,
        "sender_full_name": "davidtwco",
        "timestamp": 1545309402
    },
    {
        "content": "<p>that diff does well against the test I posted earlier.</p>",
        "id": 152254973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311380
    },
    {
        "content": "<p>It passes the test suite (except for the same dropck test that your initial change affected, it will undo that).</p>",
        "id": 152255035,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311414
    },
    {
        "content": "<p>it even fixes a case that I didn't expect it to</p>",
        "id": 152255048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311431
    },
    {
        "content": "<p>(and the same mir-opt test, same thing)</p>",
        "id": 152255054,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311439
    },
    {
        "content": "<p>If it seems to do what we want then I'll add it to the PR?</p>",
        "id": 152255077,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311477
    },
    {
        "content": "<p>namely I expanded my previous test with this new <a href=\"https://gist.github.com/8dbe7ab864cbc6ac65164af06abe66be\" target=\"_blank\" title=\"https://gist.github.com/8dbe7ab864cbc6ac65164af06abe66be\">gist</a></p>",
        "id": 152255078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311479
    },
    {
        "content": "<p>I saw that earlier but didn't know what other stuff it depended on from your PR.</p>",
        "id": 152255092,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311508
    },
    {
        "content": "<p>and <a href=\"https://gist.github.com/pnkfelix/8dbe7ab864cbc6ac65164af06abe66be#file-wildcard-tyvars-rs-L79\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/8dbe7ab864cbc6ac65164af06abe66be#file-wildcard-tyvars-rs-L79\">this case on line 79</a> is now accepted under your diff</p>",
        "id": 152255093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311512
    },
    {
        "content": "<p>which is totally cool with me</p>",
        "id": 152255096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311520
    },
    {
        "content": "<p>(I don't understand why my previous version was rejecting it)</p>",
        "id": 152255141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311534
    },
    {
        "content": "<p>yeah no that test is not going to be useful without the other commit in my branch</p>",
        "id": 152255158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311565
    },
    {
        "content": "<p>which, as I said before, I think we should keep as a separate PR</p>",
        "id": 152255164,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311580
    },
    {
        "content": "<p>Would you prefer I just add it on top of the existing commits or replace the last three with the first attempt at deduplication?</p>",
        "id": 152255179,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311595
    },
    {
        "content": "<p>I think you should replace</p>",
        "id": 152255189,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311611
    },
    {
        "content": "<p>as in, don't keep the bogus deduplication. its going just introduce noise in the history.</p>",
        "id": 152255208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311636
    },
    {
        "content": "<p>Sure, will do that now.</p>",
        "id": 152255257,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311658
    },
    {
        "content": "<p>I am a <em>little</em> curious whether we can (should?) use linked structures rather than cloning as we descend</p>",
        "id": 152255274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311694
    },
    {
        "content": "<p>but its not something I really want anyone to spend much mental energy on</p>",
        "id": 152255293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311714
    },
    {
        "content": "<p>Yeah, I didn't like how much cloning it involved - don't think it was any more than there was before though.</p>",
        "id": 152255297,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311722
    },
    {
        "content": "<p>oh actually you are right</p>",
        "id": 152255314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311752
    },
    {
        "content": "<p>I just hid the cloning in the methods, didn't i</p>",
        "id": 152255319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311760
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 152255360,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311763
    },
    {
        "content": "<p>okay then don't worry about it</p>",
        "id": 152255380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311782
    },
    {
        "content": "<p>unless you feel like re-hiding it</p>",
        "id": 152255387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311793
    },
    {
        "content": "<p>I think I prefer it not hidden.</p>",
        "id": 152255391,
        "sender_full_name": "davidtwco",
        "timestamp": 1545311801
    },
    {
        "content": "<p>fine with me</p>",
        "id": 152255395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545311806
    },
    {
        "content": "<p>PR updated.</p>",
        "id": 152255809,
        "sender_full_name": "davidtwco",
        "timestamp": 1545312249
    },
    {
        "content": "<p>first up, <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+label%3AP-high+\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+label%3AP-high+\">P-high issues</a></p>",
        "id": 152255961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545312424
    },
    {
        "content": "<p>Wrong topic.</p>",
        "id": 152255967,
        "sender_full_name": "davidtwco",
        "timestamp": 1545312430
    },
    {
        "content": "<p>And stream.</p>",
        "id": 152255968,
        "sender_full_name": "davidtwco",
        "timestamp": 1545312432
    },
    {
        "content": "<p>d'oh</p>",
        "id": 152255970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545312437
    },
    {
        "content": "<p>Don't think you can edit that to the right stream.</p>",
        "id": 152255977,
        "sender_full_name": "davidtwco",
        "timestamp": 1545312451
    },
    {
        "content": "<p>could just delete all of this. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152255985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545312464
    },
    {
        "content": "<p>what is current status of <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s branch here? (cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>)</p>",
        "id": 152266087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545321902
    },
    {
        "content": "<p>From my most recent <a href=\"https://github.com/rust-lang/rust/pull/55937#issuecomment-449020922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55937#issuecomment-449020922\">comment</a> on the PR: </p>\n<blockquote>\n<p>(this looks good to me. I'm planning to r+ but I'll wait a few hours to see if @nikomatsakis wants to weigh in on the latest commit.)</p>\n</blockquote>",
        "id": 152266243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545322051
    },
    {
        "content": "<p>basically <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  came up with a more targetted way to avoid duplicate entries just when descending into the projections of a pattern</p>",
        "id": 152266328,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545322093
    },
    {
        "content": "<p>and it is enough to resolve the problem I was facing</p>",
        "id": 152266352,
        "sender_full_name": "pnkfelix",
        "timestamp": 1545322115
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 152268175,
        "sender_full_name": "davidtwco",
        "timestamp": 1545323496
    },
    {
        "content": "<p>I'm happy to start building on this PR to handle the unreachable case once I've got a clearer idea how we want to handle it.</p>",
        "id": 152323767,
        "sender_full_name": "davidtwco",
        "timestamp": 1545391069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any thoughts on the toolstate breakages as a result of <a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a>? Iâ€™ve been taking a look and think there might have been a bug with my fix for <a href=\"https://github.com/rust-lang/rust/issues/55511\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55511\">#55511</a> because as far as I understand, I think the code mentioned in the PR comments should work?</p>",
        "id": 154185186,
        "sender_full_name": "davidtwco",
        "timestamp": 1546447051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I haven't seen that yet, link?</p>",
        "id": 154185268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546447111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/55937#issuecomment-450899521\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55937#issuecomment-450899521\">https://github.com/rust-lang/rust/pull/55937#issuecomment-450899521</a></p>",
        "id": 154185296,
        "sender_full_name": "davidtwco",
        "timestamp": 1546447145
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136\">https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136</a> is the commit that would have affected that.</p>",
        "id": 154185563,
        "sender_full_name": "davidtwco",
        "timestamp": 1546447381
    },
    {
        "content": "<p>Hmm, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that does sound strange</p>",
        "id": 154193256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455419
    },
    {
        "content": "<p>I wonder if we can get a minimized reproduction. I also wonder if <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>  monitors zulip =)</p>",
        "id": 154193278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455434
    },
    {
        "content": "<p>well <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c864079c6a555e7960818b2fa82690cb\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c864079c6a555e7960818b2fa82690cb\">maybe this playground link suffices</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Blah</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Placeholder</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Placeholder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Blah</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;hi&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">Placeholder</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Blah</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154193531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455639
    },
    {
        "content": "<p>That looks like the same issue.</p>",
        "id": 154193589,
        "sender_full_name": "davidtwco",
        "timestamp": 1546455699
    },
    {
        "content": "<p>it certainly <em>seems</em> like a bug</p>",
        "id": 154193606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455716
    },
    {
        "content": "<p>that same example does compile for me</p>",
        "id": 154193610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455719
    },
    {
        "content": "<p>(with an older nightly)</p>",
        "id": 154193653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455724
    },
    {
        "content": "<p>looking at the generated Mir, we do indeed have an <code>AscribeUserTypeAnnotation</code> on the value being matched</p>",
        "id": 154193872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455937
    },
    {
        "content": "<p>that doesn't seem right though</p>",
        "id": 154193881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455945
    },
    {
        "content": "<p>perhaps because <a href=\"https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136\">https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136</a> is incorrect</p>",
        "id": 154193944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546455979
    },
    {
        "content": "<p>in general the handling of user type annotations and patterns is more complex than we first imagined I think</p>",
        "id": 154193964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456006
    },
    {
        "content": "<p>I guess we should file an issue on this</p>",
        "id": 154195455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457483
    },
    {
        "content": "<p>I can look a bit more</p>",
        "id": 154195456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> there is no issue filed yet, right?</p>",
        "id": 154195461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457495
    },
    {
        "content": "<p>Not that I know of.</p>",
        "id": 154195469,
        "sender_full_name": "davidtwco",
        "timestamp": 1546457505
    },
    {
        "content": "<p>I'll file one and do a bit of investigation perhaps</p>",
        "id": 154195957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457983
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/57280\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57280\">https://github.com/rust-lang/rust/issues/57280</a></p>",
        "id": 154196085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546458115
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I that some of the original examples from <a href=\"https://github.com/rust-lang/rust/issues/55511\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55511\">https://github.com/rust-lang/rust/issues/55511</a> also give errors when they shouldn't (in particular, the first example)</p>",
        "id": 154202627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464585
    },
    {
        "content": "<p>I'm still a touch confused why though</p>",
        "id": 154202634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464592
    },
    {
        "content": "<p>I also thought of a potential complication with user-type-annotations around promoted stuff--</p>",
        "id": 154202693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464613
    },
    {
        "content": "<p>if we \"promote\" a type assertion.. maybe we never do that I guess</p>",
        "id": 154202701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464623
    },
    {
        "content": "<p>Ah, I see why the error occurs, duh. We are requiring that the type of the path being matched is a subtype of the type of the constant that ... doesn't seem right.</p>",
        "id": 154202884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464822
    },
    {
        "content": "<p>Oops, should have paid more attention when working on that fix.</p>",
        "id": 154202964,
        "sender_full_name": "davidtwco",
        "timestamp": 1546464874
    },
    {
        "content": "<blockquote>\n<p>Ah, I see why the error occurs, duh. We are requiring that the type of the path being matched is a subtype of the type of the constant that ... doesn't seem right.</p>\n</blockquote>\n<p>This might just be my misunderstanding, but isn't that what is required in order to make the should-error case from <a href=\"https://github.com/rust-lang/rust/issues/55511\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55511\">#55511</a> produce an error?</p>",
        "id": 154203073,
        "sender_full_name": "davidtwco",
        "timestamp": 1546464989
    },
    {
        "content": "<p>Well, it will produce an error in that case, but it's not the only way :)</p>",
        "id": 154203201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465168
    },
    {
        "content": "<blockquote>\n<p>Well, it will produce an error in that case, but it's not the only way <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>Of course, right.</p>",
        "id": 154203208,
        "sender_full_name": "davidtwco",
        "timestamp": 1546465186
    },
    {
        "content": "<p>to be honest, the semantics of matching against a constant have long been debated</p>",
        "id": 154203261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465208
    },
    {
        "content": "<p>but if you think of it as e.g. similar to <code>a == b</code></p>",
        "id": 154203266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465220
    },
    {
        "content": "<p>that does not require that <code>A &lt;: B</code> nor <code>B &lt;: A</code> (where <code>A</code> and  <code>B</code> are the types of <code>a</code> and <code>b</code> respectively)</p>",
        "id": 154203274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465236
    },
    {
        "content": "<p>it does require that <code>A: PartialEq&lt;B&gt;</code></p>",
        "id": 154203282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465245
    },
    {
        "content": "<p>but e.g. <code>&amp;'a str: PartialEq&lt;&amp;'static str&gt;</code> and <code>&amp;'static str: PartialEq&lt;&amp;'a str&gt;</code></p>",
        "id": 154203299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465265
    },
    {
        "content": "<blockquote>\n<p>Of course, right.</p>\n</blockquote>\n<p>don't feel too bad :P I at first was thinking it was the semantics we wanted too</p>",
        "id": 154203321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465286
    },
    {
        "content": "<p>but that was clearly just wrong, even in the original set of examples</p>",
        "id": 154203330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465305
    },
    {
        "content": "<p>for those <em>original</em> examples, something like <code>ExpectedType &lt;: MatchedType</code> does work</p>",
        "id": 154203383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465334
    },
    {
        "content": "<p>(which is the reverse of what we are doing now)</p>",
        "id": 154203391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465348
    },
    {
        "content": "<p>but I don't think it's really <em>right</em> either</p>",
        "id": 154203396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465356
    },
    {
        "content": "<p>and actually this <code>PartialEq</code> impl for <code>Cell</code> is unnecessarily strict</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[stable(feature = </span><span class=\"s\">&quot;rust1&quot;</span><span class=\"cp\">, since = </span><span class=\"s\">&quot;1.0.0&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"nb\">PartialEq</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154203445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465416
    },
    {
        "content": "<p>but I guess that's why we are getting an error</p>",
        "id": 154203451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465423
    },
    {
        "content": "<p>that is, it could really be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">T</span>: <span class=\"nb\">PartialEq</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I suppose</p>",
        "id": 154203513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465471
    },
    {
        "content": "<p>anyway now I'm wondering how the lexical type-checker is handling this</p>",
        "id": 154203530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465493
    },
    {
        "content": "<p>OK, so, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> , the <em>lexical</em> type checker actually does kind of the \"wrong\" thing too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// somewhat surprising: in this case, the subtyping</span>\n<span class=\"w\">                </span><span class=\"c1\">// relation goes the opposite way as the other</span>\n<span class=\"w\">                </span><span class=\"c1\">// cases. Actually what we really want is not a subtyping</span>\n<span class=\"w\">                </span><span class=\"c1\">// relation at all but rather that there exists a LUB (so</span>\n<span class=\"w\">                </span><span class=\"c1\">// that they can be compared). However, in practice,</span>\n<span class=\"w\">                </span><span class=\"c1\">// constants are always scalars or strings.  For scalars</span>\n<span class=\"w\">                </span><span class=\"c1\">// subtyping is irrelevant, and for strings `ty` is</span>\n<span class=\"w\">                </span><span class=\"c1\">// type is `&amp;&#39;static str`, so if we say that</span>\n<span class=\"w\">                </span><span class=\"c1\">//</span>\n<span class=\"w\">                </span><span class=\"c1\">//     &amp;&#39;static str &lt;: expected</span>\n<span class=\"w\">                </span><span class=\"c1\">//</span>\n<span class=\"w\">                </span><span class=\"c1\">// that&#39;s equivalent to there existing a LUB.</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">demand_suptype</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pat_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>that's from <a href=\"https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src/librustc_typeck/check/_match.rs#L153-L165\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src/librustc_typeck/check/_match.rs#L153-L165\"><code>_match.rs</code></a></p>",
        "id": 154203643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465580
    },
    {
        "content": "<p>that fix doesn't seem very right</p>",
        "id": 154203663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465598
    },
    {
        "content": "<p>but I suppose we could match that behavior by extending pattern ascriptions on constants to have the opposite variance</p>",
        "id": 154203667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465618
    },
    {
        "content": "<p>which would be a small fix, if not the ideal one</p>",
        "id": 154203693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465647
    },
    {
        "content": "<p>I wonder if I can craft a test case that behaves poorly, probably</p>",
        "id": 154203703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465657
    },
    {
        "content": "<blockquote>\n<p>but I suppose we could match that behavior by extending pattern ascriptions on constants to have the opposite variance</p>\n</blockquote>\n<p>I think that would be a good first step so that nightly doesn't have this behaviour and instead mirrors what AST borrowck does.</p>",
        "id": 154203766,
        "sender_full_name": "davidtwco",
        "timestamp": 1546465686
    },
    {
        "content": "<p>We could follow-up with the more correct fix.</p>",
        "id": 154203769,
        "sender_full_name": "davidtwco",
        "timestamp": 1546465692
    },
    {
        "content": "<p>yes</p>",
        "id": 154203818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465765
    },
    {
        "content": "<p>I'm actually not sure if I can create a kind of \"actionable\" example where the rule goes wrong in <em>stable</em> Rust</p>",
        "id": 154203824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465778
    },
    {
        "content": "<p>because there..huh. There are <em>supposed</em> to be limitations on the types of constants you can match against</p>",
        "id": 154203902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465815
    },
    {
        "content": "<p>they have to \"derive\" <code>Eq</code> and <code>PartialEq</code> iirc</p>",
        "id": 154203913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465825
    },
    {
        "content": "<p>and not have manual impl's</p>",
        "id": 154203917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465831
    },
    {
        "content": "<p>but I don't see the requisite (unstable...) annotations on <code>Cell</code>...</p>",
        "id": 154204023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546465934
    },
    {
        "content": "<p>ah, wow, interesting</p>",
        "id": 154204212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466155
    },
    {
        "content": "<p>my example only compiled because I was using <code>Option&lt;Cell&lt;u32&gt;&gt;</code> and the value was <code>None</code></p>",
        "id": 154204260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466169
    },
    {
        "content": "<p>if <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a215c646c07b91bb7040fdf8f378a14b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a215c646c07b91bb7040fdf8f378a14b\">the value is <code>Some</code></a>, you get the stability error</p>",
        "id": 154204272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466185
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, are you going to do that fix, or should I?</p>",
        "id": 154204276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466193
    },
    {
        "content": "<p>I can leave a few notes if desired</p>",
        "id": 154204280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466199
    },
    {
        "content": "<p>I can fix it.</p>",
        "id": 154204296,
        "sender_full_name": "davidtwco",
        "timestamp": 1546466212
    },
    {
        "content": "<p>Assuming you are fine with adding a field <a href=\"https://github.com/davidtwco/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src/librustc_mir/hair/pattern/mod.rs#L862\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src/librustc_mir/hair/pattern/mod.rs#L862\">here</a> with the variance, I think it should be alright to thread that through.</p>",
        "id": 154204325,
        "sender_full_name": "davidtwco",
        "timestamp": 1546466255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> speaking of user type annotations... <a href=\"https://github.com/rust-lang/rfcs/pull/2522#issuecomment-415551732\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2522#issuecomment-415551732\">https://github.com/rust-lang/rfcs/pull/2522#issuecomment-415551732</a> <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 154204339,
        "sender_full_name": "centril",
        "timestamp": 1546466277
    },
    {
        "content": "<blockquote>\n<p>Assuming you are fine with adding a field <a href=\"https://github.com/davidtwco/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src/librustc_mir/hair/pattern/mod.rs#L862\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src/librustc_mir/hair/pattern/mod.rs#L862\">here</a> with the variance, I think it should be alright to thread that through.</p>\n</blockquote>\n<p>yes this is basically what I had in mind</p>",
        "id": 154204447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546466383
    },
    {
        "content": "<p>Submitted a PR with that.</p>",
        "id": 154243265,
        "sender_full_name": "davidtwco",
        "timestamp": 1546526706
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/57304\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57304\">#57304</a></p>",
        "id": 154243285,
        "sender_full_name": "davidtwco",
        "timestamp": 1546526717
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> :)</p>",
        "id": 154248561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546531740
    },
    {
        "content": "<p>Making a quick change to it to fix an issue I've noticed.</p>",
        "id": 154248583,
        "sender_full_name": "davidtwco",
        "timestamp": 1546531766
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, <a href=\"https://github.com/rust-lang/rust/pull/57304#discussion_r245025505\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57304#discussion_r245025505\">left a comment here</a></p>",
        "id": 154249146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532339
    },
    {
        "content": "<p>I've made it locally so that it is an <code>Option&lt;Variance&gt;</code> and I only set it to <code>Some(..)</code> in the specific spot where we want to reverse it, and then I just use <code>.unwrap_or(..)</code> with whatever was there previously - I found that I couldn't replicate the exact variances used in each case if I shifted that decision back like I was doing.</p>",
        "id": 154249312,
        "sender_full_name": "davidtwco",
        "timestamp": 1546532481
    },
    {
        "content": "<p>It seemed off to introduce a <code>variance</code> field to the <code>PatternKind::AscribeUserType</code> and then only use it in one case.</p>",
        "id": 154249396,
        "sender_full_name": "davidtwco",
        "timestamp": 1546532537
    },
    {
        "content": "<p>That <em>should</em> resolve your review comment?</p>",
        "id": 154249454,
        "sender_full_name": "davidtwco",
        "timestamp": 1546532635
    },
    {
        "content": "<p>hmm maybe but I agree something seems fishy</p>",
        "id": 154250693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533942
    },
    {
        "content": "<p>also, the use I highlighted is not \"like\" the others</p>",
        "id": 154250698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533953
    },
    {
        "content": "<p>as I noted -- it is constraining the type of a different thing</p>",
        "id": 154250699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533960
    },
    {
        "content": "<p>and that is why the variance does not apply</p>",
        "id": 154250735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533963
    },
    {
        "content": "<p>so I don't really think that the <code>unwrap_or</code> solution is right there</p>",
        "id": 154250749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533986
    },
    {
        "content": "<p>(though I think that the variance will always be <code>None</code> in that case)</p>",
        "id": 154250755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534000
    },
    {
        "content": "<p>are there other cases that didn't match up, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>?</p>",
        "id": 154250762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534008
    },
    {
        "content": "<p>I imagined that we would only change the spot that was currently <code>Covariant</code></p>",
        "id": 154250769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534017
    },
    {
        "content": "<p>When I was looking at the diff previously, there was a place where we used <code>Invariant</code> and and one where we used <code>Covariant</code>, but I wasn't sure that they wouldn't result from the same <code>PatternKind::AscribeUserType</code> construction - where I didn't have the information to pick between <code>Invariant</code> and <code>Covariant</code>.</p>",
        "id": 154250849,
        "sender_full_name": "davidtwco",
        "timestamp": 1546534110
    },
    {
        "content": "<p>I can take another look <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, but I feel a bit uneasy with <code>Option&lt;Variance&gt;</code></p>",
        "id": 154251251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534510
    },
    {
        "content": "<p>I'd feel better if we can say with certainty when it matters and when it doesn't</p>",
        "id": 154251259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534521
    },
    {
        "content": "<p>(and I <em>think</em> we can)</p>",
        "id": 154251263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534528
    },
    {
        "content": "<p>I'm happy to change the approach, I'm just not too sure what that would look like.</p>",
        "id": 154251327,
        "sender_full_name": "davidtwco",
        "timestamp": 1546534574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so in your new PR, I see two calls to <code>unwrap_or</code>, if i'm not mistaken, right?</p>",
        "id": 154253110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536650
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 154253115,
        "sender_full_name": "davidtwco",
        "timestamp": 1546536657
    },
    {
        "content": "<p>basically I think the PR looks like your original PR except that the place which uses <code>Invariant</code> just ignores the variance and continues to specify <code>Invariant</code></p>",
        "id": 154253129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536670
    },
    {
        "content": "<p>and the reason it ignores it should have a comment,</p>",
        "id": 154253133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536677
    },
    {
        "content": "<p>the point is that the variance is the variance to use when relating the type annotation to <em>the value being matched</em></p>",
        "id": 154253135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536689
    },
    {
        "content": "<p>but in this case, that same annotation is being applied to the <em>binding</em></p>",
        "id": 154253141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536700
    },
    {
        "content": "<p>as an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154253146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536711
    },
    {
        "content": "<p>here, the type <code>T_x</code> of <code>x</code> just <em>is</em> <code>T</code> (<code>T == T_x</code>, or <code>T &lt;: T_x</code> and <code>T_x &lt;: T</code>)</p>",
        "id": 154253149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536717
    },
    {
        "content": "<p>but the type <code>U</code> of <code>&lt;expr&gt;</code> need only meet <code>U &lt;: T</code></p>",
        "id": 154253192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536729
    },
    {
        "content": "<p>this is also why it is using <code>Invariant</code> and not <code>Covariant</code> now</p>",
        "id": 154253224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536784
    },
    {
        "content": "<p>which I should have commented in the first place but anyway</p>",
        "id": 154253232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536804
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 154253234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536810
    },
    {
        "content": "<p>The example makes sense but I'm still not sure I understand exactly what changes you're requesting.</p>",
        "id": 154253301,
        "sender_full_name": "davidtwco",
        "timestamp": 1546536879
    },
    {
        "content": "<p>ok well to start can you revert to the older version?</p>",
        "id": 154253304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536898
    },
    {
        "content": "<p>Doing that now.</p>",
        "id": 154253323,
        "sender_full_name": "davidtwco",
        "timestamp": 1546536930
    },
    {
        "content": "<p>Alright, pushed what was there before.</p>",
        "id": 154253748,
        "sender_full_name": "davidtwco",
        "timestamp": 1546537427
    },
    {
        "content": "<p>It seems like in doing that, I've lost the <a href=\"https://github.com/rust-lang/rust/pull/57304/files#diff-ef9c98f22bf95e3bda12c849d5550cedL1324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57304/files#diff-ef9c98f22bf95e3bda12c849d5550cedL1324\">equivalent of this line</a> where <code>Covariant</code> is given.</p>",
        "id": 154254436,
        "sender_full_name": "davidtwco",
        "timestamp": 1546538121
    },
    {
        "content": "<p>But I've not been able to work out which of <a href=\"https://github.com/rust-lang/rust/pull/57304/files#diff-b2dc10372716c61d52394605d024374bR91\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57304/files#diff-b2dc10372716c61d52394605d024374bR91\">this spot</a> or <a href=\"https://github.com/rust-lang/rust/pull/57304/files#diff-e826542d6f24137d5b0b5ae333230529R718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57304/files#diff-e826542d6f24137d5b0b5ae333230529R718\">this spot</a> should be changed, or if neither is really correct as it depends on some decision made later in the code (which is why I used an <code>Option</code>).</p>",
        "id": 154254618,
        "sender_full_name": "davidtwco",
        "timestamp": 1546538292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/57304#pullrequestreview-189119455\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57304#pullrequestreview-189119455\">left a review</a></p>",
        "id": 154255531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539137
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 154255567,
        "sender_full_name": "davidtwco",
        "timestamp": 1546539190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, this conversation seems relevant to this thread: <a href=\"https://github.com/rust-lang/rfcs/pull/2522#discussion_r209286375\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2522#discussion_r209286375\">https://github.com/rust-lang/rfcs/pull/2522#discussion_r209286375</a></p>",
        "id": 154255639,
        "sender_full_name": "centril",
        "timestamp": 1546539262
    },
    {
        "content": "<p>(pinged you there)</p>",
        "id": 154255642,
        "sender_full_name": "centril",
        "timestamp": 1546539268
    },
    {
        "content": "<p>I've got to review that RFC at some point</p>",
        "id": 154255884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539490
    },
    {
        "content": "<p>/me goes to print it out</p>",
        "id": 154255911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539516
    },
    {
        "content": "<p>Addressed review comments <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 154257109,
        "sender_full_name": "davidtwco",
        "timestamp": 1546540482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> did they make sense to you? :)</p>",
        "id": 154257522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546540808
    },
    {
        "content": "<p>Yeah, it all makes sense, cleared up some misconceptions about how we were doing things.</p>",
        "id": 154257681,
        "sender_full_name": "davidtwco",
        "timestamp": 1546540944
    }
]