[
    {
        "content": "<p>A user posted an issue in which the lifetime of a reference was unnecessarily inferred to include a yield point. Since this can impact the auto traits of the resulting state machine, it'd be ideal if this didn't happen. I was just wondering if anyone is thinking about how yield points interact with region inference. <a href=\"https://internals.rust-lang.org/t/async-await-and-references-in-pattern-match/9409/2\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/async-await-and-references-in-pattern-match/9409/2\">https://internals.rust-lang.org/t/async-await-and-references-in-pattern-match/9409/2</a></p>\n<p>Also this is my first time using Zulip so sorry if I've not done things properly somehow. :))</p>",
        "id": 158031364,
        "sender_full_name": "boats",
        "timestamp": 1549893186
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-compiler-nll</span></p>",
        "id": 158031372,
        "sender_full_name": "davidtwco",
        "timestamp": 1549893197
    },
    {
        "content": "<p>hmm there's definitely something funny happening there</p>",
        "id": 158031980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549893775
    },
    {
        "content": "<p>I want to double-check something: Is the claim here that this issue arises with and without AST-borrowck (which is non-trivial to check since one cannot run this example on the 2015 edition)?</p>",
        "id": 158032105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549893854
    },
    {
        "content": "<p>and that the reason NLL is relevant is because one might hope that the increased precision of NLL would allow sidestepping the problem?</p>",
        "id": 158032126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549893887
    },
    {
        "content": "<p>Or is the claim that this code works with AST-borrowck and NLL is somehow regressing it?</p>",
        "id": 158032164,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549893911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span> ^ ?</p>",
        "id": 158032176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549893922
    },
    {
        "content": "<p>I haven't investigated closely, but I don't have any reason to think its a regression.</p>",
        "id": 158032321,
        "sender_full_name": "boats",
        "timestamp": 1549894043
    },
    {
        "content": "<p>I find it fascinating that pulling the <code>f.foo()</code> expression out into its own local sidesteps the error. I'm more used to things going in the other direction. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 158032425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549894126
    },
    {
        "content": "<p>(except of course for the cases where pulling it into a local is also introducing changes to evaluation order. But I do not think that is happening here. Then again I might be misunderstanding the generator desugaring.)</p>",
        "id": 158032474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549894173
    },
    {
        "content": "<p>Yea it was very surprising to me also that that code change made it compile.</p>",
        "id": 158032476,
        "sender_full_name": "boats",
        "timestamp": 1549894174
    },
    {
        "content": "<p>The most interesting thing to me in this thread was that this is a design goal that could be factored into future NLL/polonius work - reducing the number of live objects across yield points. This matters both for auto traits like in this example and also optimizing the size of the state machine.</p>",
        "id": 158032729,
        "sender_full_name": "boats",
        "timestamp": 1549894383
    },
    {
        "content": "<p>definitely</p>",
        "id": 158032938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549894589
    }
]