[
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I've got a local build using leapfrog triejoin etc</p>",
        "id": 150922251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011248
    },
    {
        "content": "<p>oh you've switched the variants to this new API already ? I had PRs on the way so that people wouldn't have to bother</p>",
        "id": 150922361,
        "sender_full_name": "lqd",
        "timestamp": 1544011324
    },
    {
        "content": "<p>I switched to the new API;  I'm not sure how you can avoid having to bother...?</p>",
        "id": 150922517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011475
    },
    {
        "content": "<p>(forked to a new topic)</p>",
        "id": 150922570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011526
    },
    {
        "content": "<p>this <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> is the work I had done <a href=\"https://github.com/rust-lang-nursery/polonius/pull/88\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/88\">https://github.com/rust-lang-nursery/polonius/pull/88</a></p>",
        "id": 150922961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011891
    },
    {
        "content": "<p>one can't avoid having to bother, <em>you</em> didn't have to as I had already done it :)</p>",
        "id": 150923017,
        "sender_full_name": "lqd",
        "timestamp": 1544011925
    },
    {
        "content": "<p>oh I see :)</p>",
        "id": 150923040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011970
    },
    {
        "content": "<p>well, it was good for me anyway to better understand :)</p>",
        "id": 150923044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544011977
    },
    {
        "content": "<p>sure sure :)</p>",
        "id": 150923070,
        "sender_full_name": "lqd",
        "timestamp": 1544012014
    },
    {
        "content": "<p>I'd be curious <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> to get your 2 eurocents <a href=\"https://github.com/rust-lang-nursery/datafrog/pull/18\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/18\">on these docs</a>, too</p>",
        "id": 150923075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012026
    },
    {
        "content": "<p>in particular if that sounds like an accurate summary</p>",
        "id": 150923082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012037
    },
    {
        "content": "<p>though obviously for real end-users to understand it needs a few examples</p>",
        "id": 150923126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012046
    },
    {
        "content": "<p>I will look the 2 PRs over for sure at lunchbreak (in particular I feel like there were more possible uses of leapjoin in datafrog opt but I might be misremembering)</p>",
        "id": 150923199,
        "sender_full_name": "lqd",
        "timestamp": 1544012156
    },
    {
        "content": "<p>also \"your 2 eurocents\" = <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 150923258,
        "sender_full_name": "lqd",
        "timestamp": 1544012189
    },
    {
        "content": "<p>I think I see one missing use actually</p>",
        "id": 150923272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012202
    },
    {
        "content": "<p>oh, maybe not</p>",
        "id": 150923276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012209
    },
    {
        "content": "<p>at some point there was the question of whether or not we needed to materialize the borrows_live_at relation, it's only used in errors and we could avoid doing so with the leapjoin, so when we're not asking for these tuples (using the verbose mode flag) there was not really a need to</p>",
        "id": 150923443,
        "sender_full_name": "lqd",
        "timestamp": 1544012326
    },
    {
        "content": "<p>(and those might be the couple other leapjoins opportunities I remember)</p>",
        "id": 150923638,
        "sender_full_name": "lqd",
        "timestamp": 1544012521
    },
    {
        "content": "<p>I see</p>",
        "id": 150923728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012588
    },
    {
        "content": "<p>I think that is no longer true post bug fix</p>",
        "id": 150923730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012592
    },
    {
        "content": "<p>though you could roll that bug fix into errors I guess</p>",
        "id": 150923740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012603
    },
    {
        "content": "<p>anyway, cool</p>",
        "id": 150923747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012618
    },
    {
        "content": "<p>I might just merge the docs + publish the new datafrog</p>",
        "id": 150923754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012626
    },
    {
        "content": "<p>but first <span class=\"emoji emoji-2615\" title=\"coffee\">:coffee:</span></p>",
        "id": 150923764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544012637
    },
    {
        "content": "<p>oh true, very possible that the bugfix can change things up a bit here</p>",
        "id": 150923818,
        "sender_full_name": "lqd",
        "timestamp": 1544012668
    },
    {
        "content": "<p>the doc comment sounds sensible to me, that the leapers propose/prevent values from their relation that should extend/filter a source tuple <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 150924442,
        "sender_full_name": "lqd",
        "timestamp": 1544013434
    },
    {
        "content": "<p>hmm it seemed it's still true that we could fold <code>borrows_live_at</code> in <code>errors</code>. Also I might have misunderstood some leapfrog behaviour before, as I would have liked to use it to compute <code>dying_can_reach_live</code>: even though it works as a simple join here, the fact that it works on Relations could allow, using the leapjoin with (or not computing) <code>borrow_live_at</code>, to remove the need to have <code>region_live_at</code> duplicated in Variable/Relation forms (a long winded explanation to save one copy, albeit a potentially big one: <code>clap</code> has 1M+ tuples in there)</p>",
        "id": 150926395,
        "sender_full_name": "lqd",
        "timestamp": 1544015655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want comments on the leapjoin PR that would be like \"the join allows to remove us this copy X\" ? There's no real need to address such comments in this PR since it works (and also since I can make a PR later with these specific changes) so I wondered if it'd be useful or not</p>",
        "id": 150927032,
        "sender_full_name": "lqd",
        "timestamp": 1544016316
    },
    {
        "content": "<p>sure :)</p>",
        "id": 150927209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016477
    },
    {
        "content": "<p>I saw some copies that might be removable</p>",
        "id": 150927251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016486
    },
    {
        "content": "<p>e.g. we have <code>subset</code> and then two projections from it (<code>subset_rp</code> and some other one)</p>",
        "id": 150927261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016501
    },
    {
        "content": "<p>is that what you mean?</p>",
        "id": 150927264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016503
    },
    {
        "content": "<p>exactly</p>",
        "id": 150927270,
        "sender_full_name": "lqd",
        "timestamp": 1544016509
    },
    {
        "content": "<p>similarly <code>requires</code></p>",
        "id": 150927271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016510
    },
    {
        "content": "<p>same as well</p>",
        "id": 150927275,
        "sender_full_name": "lqd",
        "timestamp": 1544016515
    },
    {
        "content": "<p>yeah, seems like only one of those projections is needed</p>",
        "id": 150927280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016521
    },
    {
        "content": "<p>those were the couple I was thinking about</p>",
        "id": 150927285,
        "sender_full_name": "lqd",
        "timestamp": 1544016525
    },
    {
        "content": "<p>I was debating — as an aside — whether to adjust the comments in this case to something like <code>subset((r, p), b)</code> instead of <code>subset(r, p, b)</code> or whatever</p>",
        "id": 150927306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016553
    },
    {
        "content": "<p>I think maybe keeping the datalog comments \"clean\"</p>",
        "id": 150927314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016563
    },
    {
        "content": "<p>but using names like <code>subset_r2p</code> is a decent compromise</p>",
        "id": 150927319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016570
    },
    {
        "content": "<p>I've had the same debate between being able to reuse the rules in say soufflé, and describing the precise layout/details of the datafrog computation</p>",
        "id": 150927415,
        "sender_full_name": "lqd",
        "timestamp": 1544016620
    },
    {
        "content": "<p>(maybe something that can be fixed with a proc-macro datafrog compiler cough cough :3)</p>",
        "id": 150927495,
        "sender_full_name": "lqd",
        "timestamp": 1544016711
    },
    {
        "content": "<p>:)</p>",
        "id": 150927629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544016834
    },
    {
        "content": "<p>It'd be cool to have <code>filter_map</code>s capabilities in datafrog so that we could prevent symmetries a priori instead of hackily as I've done before. There are still some in <code>dying_can_reach</code> I'd like to remove, for instance.</p>",
        "id": 150929611,
        "sender_full_name": "lqd",
        "timestamp": 1544018364
    },
    {
        "content": "<p>(I think I mentioned this before, but I've rechecked this datapoint with datafrog 1.0: switching loc_ins to leapjoin goes from 360ms to 130ms, but doing so prevents materializing the <code>borrow_live_at</code> tuples the verbose mode requires)</p>",
        "id": 150947635,
        "sender_full_name": "lqd",
        "timestamp": 1544032836
    },
    {
        "content": "<blockquote>\n<p>It'd be cool to have filter_maps capabilities in datafrog</p>\n</blockquote>\n<p>What sort of capabilities do you mean? In principle, it should be pretty easy to write a <code>filter</code> operator in datafrog (from variable -&gt; variable) which just passes along the filtered <code>recent</code> set of tuples. A <code>filter_map</code> operator would be a bit more expensive, as you would need to re-sort, and de-duplicate w.r.t. prior tuples.</p>\n<p>Or are you thinking of something totally different from this?</p>",
        "id": 150950136,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> mostly it was a way to make this <a href=\"https://github.com/rust-lang-nursery/polonius/pull/78/files#diff-0e90a25f5b1ef5489f6b71a945c9a970R120\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/78/files#diff-0e90a25f5b1ef5489f6b71a945c9a970R120\">ugly hack</a> cleaner, whether it’d be a separate filter operator, or allowing the \"logic\" closure to return an Option of the tuple that the join helper wouldn’t push to the results, is that clearer ?</p>",
        "id": 150950807,
        "sender_full_name": "lqd",
        "timestamp": 1544035609
    },
    {
        "content": "<p>I see, I think I understand. In principle, you might even like to do that at the end of the iteration, for the <code>to_add</code> members. The <code>recent</code> member is post-sorting and post-deduplication, so you may have done a bunch of work cleaning up those tuples you are about to discard.</p>",
        "id": 150950948,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035725
    },
    {
        "content": "<p>(just to prevent symmetries here and there, as you rightfully pointed out before that there were many in \"subsets\" for example, and removing them does make a difference)</p>",
        "id": 150950986,
        "sender_full_name": "lqd",
        "timestamp": 1544035783
    },
    {
        "content": "<p>But, for example, the differential dataflow join allows you to specify a function <code>FnMut(&amp;Key, &amp;Val1, &amp;Val2) -&gt; impl Iterator&lt;Item = Result&gt;</code> which could possibly be helpful?</p>",
        "id": 150950993,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035800
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 150951083,
        "sender_full_name": "lqd",
        "timestamp": 1544035857
    },
    {
        "content": "<p>It might also be helpful to just have a <code>filter</code> method on a <code>Variable</code> which does the in-place filtering (so that you don't have to amend all of the join rules). You would still materialize many things in that case, but you wouldn't need as much surgery in the join rules themselves (especially good if you might have several <code>filter</code> predicates).</p>",
        "id": 150951098,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035875
    },
    {
        "content": "<p>Adding that generality to <code>join</code> should be super easy. It worked great in differential, and the main change is that your join closures probably need a <code>Some((old_result))</code> rather than just <code>old_result</code>.</p>",
        "id": 150951132,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035913
    },
    {
        "content": "<p>but for sure this was the only case I seem to have wanted such a filter, it might be more interesting in fully general DD than the specific polonius use of datafrog</p>",
        "id": 150951205,
        "sender_full_name": "lqd",
        "timestamp": 1544035953
    },
    {
        "content": "<p>Probably the \"optimal\" thing to do is determine where e.g. subsets with the same scope come into existence, in terms of which rule, and augment that rule to prevent tuples containing repetition.</p>",
        "id": 150951239,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544035988
    },
    {
        "content": "<p>It really is a super-easy change, though. Unless I'm missing something. And in DD computations it can help a lot to avoid materializing a bunch of things that will then just be discarded.  What sort of tuple reduction do you see with that filter?</p>",
        "id": 150951338,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036062
    },
    {
        "content": "<p>right. (and it’s not very often)</p>",
        "id": 150951351,
        "sender_full_name": "lqd",
        "timestamp": 1544036074
    },
    {
        "content": "<p>I’ll need to check numbers on the computer when I’m back at it, esp if I’ve done it at the wrong time :) subsets was like 10-15% of the final count I think</p>",
        "id": 150951420,
        "sender_full_name": "lqd",
        "timestamp": 1544036141
    },
    {
        "content": "<p>Other easy changes: it isn't too hard to think about a <code>Leaper</code> implementation that doesn't contain data, just predicates. They work like the <code>FilterAnti</code> struct, in that they never propose anything, and only restrict proposals.</p>",
        "id": 150951489,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036171
    },
    {
        "content": "<p>(and how this impacts downstream rules I hadn’t checked)</p>",
        "id": 150951504,
        "sender_full_name": "lqd",
        "timestamp": 1544036194
    },
    {
        "content": "<p>oh interesting as well :)</p>",
        "id": 150951521,
        "sender_full_name": "lqd",
        "timestamp": 1544036216
    },
    {
        "content": "<p>So when you use <code>from_leapjoin</code>, you could add another leaper that is just the \"filter on scopes being different\" leaper.</p>",
        "id": 150951525,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036220
    },
    {
        "content": "<p>I stumbled upon a case I didn’t understand and which was related to filtering, I’ll investigate more details to show you if that’s ok</p>",
        "id": 150951577,
        "sender_full_name": "lqd",
        "timestamp": 1544036264
    },
    {
        "content": "<p>That should have the appealing property that it will filter the proposals as they flow through leapjoin, long before they get dropped into <code>subset</code>, long before they move from <code>to_add</code> into <code>recent</code>.</p>",
        "id": 150951644,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036293
    },
    {
        "content": "<p>More details are good. Happy to help out here. :D</p>",
        "id": 150951679,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036334
    },
    {
        "content": "<p>(IIRC leapjoin panicking because of a failing / max usize proposals on some specific pieces of data)</p>",
        "id": 150951686,
        "sender_full_name": "lqd",
        "timestamp": 1544036343
    },
    {
        "content": "<p>My main constraint is that I have no clue what the rules are doing.</p>",
        "id": 150951696,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036350
    },
    {
        "content": "<p>Ooo, that sounds like a bug.</p>",
        "id": 150951719,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036371
    },
    {
        "content": "<p>I’ll go home and gather more information</p>",
        "id": 150951777,
        "sender_full_name": "lqd",
        "timestamp": 1544036405
    },
    {
        "content": "<p>The intent is that any \"well-formed\" leapjoin has at least one contribution that is <code>extend_with</code>, so that we have positive constraints on the new values. If none have this property, it could be that all extenders say \"whatever, take all values lol\".</p>",
        "id": 150951821,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036433
    },
    {
        "content": "<p>you, sir, are as ever quite helpful, and — literally — a scholar :D</p>",
        "id": 150951839,
        "sender_full_name": "lqd",
        "timestamp": 1544036453
    },
    {
        "content": "<p>np! I'll be around, and ping me elsewhere if I lose track of Zulip (which I do; <em>every</em> project uses a different chat site, literally no duplication yet).</p>",
        "id": 150951865,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544036481
    },
    {
        "content": "<p>will do, thanks again for the \"filter\" talk + ideas</p>",
        "id": 150951961,
        "sender_full_name": "lqd",
        "timestamp": 1544036525
    },
    {
        "content": "<p>(Oh that might be it, it didn’t have an extend_with IIRC, a dynamic source and 2 filter_with leapers. and that might not be well-formed at all)</p>",
        "id": 150952461,
        "sender_full_name": "lqd",
        "timestamp": 1544036912
    },
    {
        "content": "<p>I just pushed a branch that has an example predicate based leaper.</p>",
        "id": 150953226,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544037576
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/datafrog/pull/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/pull/20\">https://github.com/rust-lang-nursery/datafrog/pull/20</a></p>",
        "id": 150953374,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544037699
    },
    {
        "content": "<p>There are some other natural ones you could do, like a <code>flat_map</code> based leaper that proposes new values based on a function of <code>prefix</code>, which corresponds to integrity constraints in databases (e.g. you have a tuple with fields <code>date</code>, <code>time</code>, and <code>datetime</code>). Not necessarily interesting for you all, but the sort of thing that is easy-ish to do.</p>",
        "id": 150953476,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544037785
    },
    {
        "content": "<p>nice :)</p>",
        "id": 150953747,
        "sender_full_name": "lqd",
        "timestamp": 1544038036
    },
    {
        "content": "<p>Looking at the code, this rule</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">subset</span><span class=\"p\">.</span><span class=\"n\">from_leapjoin</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"n\">subset_p</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cfg_edge_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>doesn't contribute any new R1 == R2 cases. Rather, the second rule </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">subset</span><span class=\"p\">.</span><span class=\"n\">from_join</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"n\">live_to_dying_regions_r2pq</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"n\">dying_can_reach_live</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">r3</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>seems to be where they show up.</p>",
        "id": 150954739,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544038914
    },
    {
        "content": "<p>That means that the filter leapers probably won't help, and what you want is a join whose closure can return an <code>impl Iterator&lt;Item=Result&gt;</code> to drop <code>r1 == r3</code> tuples on the floor.</p>",
        "id": 150954802,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544038953
    },
    {
        "content": "<p>maybe <code>dying_can_reach_live</code> is getting them from <code>dying_can_reach</code></p>",
        "id": 150955013,
        "sender_full_name": "lqd",
        "timestamp": 1544039113
    },
    {
        "content": "<p>(I think the latter had some as well) the join with <code>impl Iterator</code> is an interesting thought indeed</p>",
        "id": 150955132,
        "sender_full_name": "lqd",
        "timestamp": 1544039210
    },
    {
        "content": "<p>I think that rule is </p>\n<div class=\"codehilite\"><pre><span></span>// subset(R1, R3, Q) :-\n//   live_to_dying_regions(R1, R2, P, Q),\n//   dying_can_reach_live(R2, R3, P, Q).\n</pre></div>\n\n\n<p>and <code>R1 == R3</code> can probably happen even without <code>dying_can_reach_live</code> screwing things up. Maybe I misunderstand, though!</p>",
        "id": 150955169,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544039245
    },
    {
        "content": "<p>I have a branch somewhere to add statistics the the datafrog compute which I should refresh; might be also easy to add some predicates to check which rule and which rounds contribute to which \"predicate stat\"</p>",
        "id": 150955326,
        "sender_full_name": "lqd",
        "timestamp": 1544039331
    },
    {
        "content": "<p>But yeah it looks like <code>dying_can_reach</code> could get them too, from its second rule.</p>",
        "id": 150955331,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544039335
    },
    {
        "content": "<p>ok yeah, the case I was seeing was not well-formed, no extend leapers only filters — so I assume it's expected for it to fail. </p>\n<p>I was modeling <code>errors(B, P) :- requires(R, B, P), region_live_at(R, P), invalidates(P, B).</code> as </p>\n<div class=\"codehilite\"><pre><span></span>errors.from_leapjoin(\n    &amp;requires_rp,\n    &amp;mut [\n        &amp;mut region_live_at_rel.filter_with(|&amp;((r, p), _b)| (r, p)),\n        &amp;mut invalidates_rel.filter_with(|&amp;((_r, p), b)| (p, b)),\n    ],\n    |&amp;((_r, p), b), &amp;()| (b, p)\n);\n</pre></div>",
        "id": 150955760,
        "sender_full_name": "lqd",
        "timestamp": 1544039653
    },
    {
        "content": "<p>Ah, ok. So this is probably painful because <code>requires</code> is the variable, and what you need to start from?</p>",
        "id": 150955835,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544039718
    },
    {
        "content": "<p>Let me ponder that. I'm sure there is a way to start from <code>requires</code> and \"pretend\" that someone has just proposed some values. At which point you can just stitch on the existing leapers, not exactly doing a join but just filtering things down.</p>",
        "id": 150955911,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544039780
    },
    {
        "content": "<p>yes. it's not extremely painful or anything mind you, I only stumbled upon this while trying to remove an intermediate variable, it does work perfectly otherwise :)</p>",
        "id": 150955926,
        "sender_full_name": "lqd",
        "timestamp": 1544039797
    },
    {
        "content": "<p>More generally, \"treefrog leapjoin\" is a specific instance of \"delta queries\", where you can implement joins and such more efficiently than the binary joins that datafrog has by default.</p>",
        "id": 150955956,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544039823
    },
    {
        "content": "<p>(btw my brain is now forever broken when trying to remember the join name, where I randomly mix and match pieces between it and leapfrog triejoin :)</p>",
        "id": 150956238,
        "sender_full_name": "lqd",
        "timestamp": 1544040058
    },
    {
        "content": "<p>inb4 a paper \"a new join name, but at what COST\"</p>",
        "id": 150956278,
        "sender_full_name": "lqd",
        "timestamp": 1544040092
    },
    {
        "content": "<blockquote>\n<p>I'm sure there is a way to start from <code>requires</code> and \"pretend\" that someone has just proposed some values</p>\n</blockquote>\n<p>oh like an <code>extend_with</code> closure returning the full tuple or similar trickery ?</p>",
        "id": 150956779,
        "sender_full_name": "lqd",
        "timestamp": 1544040479
    },
    {
        "content": "<p>All that the rest of the leapjoin algorithm needs is a <code>Vec&lt;Val&gt;</code> for each <code>Tuple</code>, and so if you show up with a <code>Relation&lt;(Tuple, Val)&gt;</code> we can re-stage it temporarily as a bunch of <code>(Tuple, Vec&lt;Val&gt;)</code> for long enough for the other relations to express their opinions.</p>",
        "id": 150957030,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544040659
    },
    {
        "content": "<p>It needs a bit of surgery, and might look like re-writing some of <code>leapjoin_into</code> using the fact that you have <code>Leaper</code> implementations for those other relations.</p>",
        "id": 150957191,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544040800
    },
    {
        "content": "<p>But, if you make a note of this and collect a few of them (or just sit on this one for a while) I can try a re-think of some of the traits to accommodate more patterns that might be useful.</p>",
        "id": 150957311,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544040931
    },
    {
        "content": "<p>could it be something we other contribots could do (albeit with a bit of guidance I assume) so that you wouldn't have to spend time doing it ?</p>",
        "id": 150957373,
        "sender_full_name": "lqd",
        "timestamp": 1544040987
    },
    {
        "content": "<p>If you like, sure! Ideally, the <code>Leaper</code> trait is sufficient to do things like this. It is meant to capture enough info to let you dance through various candidate extensions, though it does ask for them to be in vectors, I suppose.</p>",
        "id": 150957526,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544041143
    },
    {
        "content": "<p>sure I'll document this case (with data, like in a test) and look for others (I think I might have had another one), to see if these requirements can be just slight surgery, which could offer new flexibility without needing to go the harder and possibly not-that-useful route of leapjoins over Variables</p>",
        "id": 150957597,
        "sender_full_name": "lqd",
        "timestamp": 1544041203
    },
    {
        "content": "<p>Leapjoins over variables will probably eventually show up. They really aren't that horrible, but they clash a bit with the \"owned and ref unification\" PR. They are the sort of thing that you would have needed back in the pre-optimized version of Polonius, where there was a self-join between <code>subset</code> and itself.</p>",
        "id": 150957693,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544041276
    },
    {
        "content": "<p>But yeah if you note down the pain points, I'm happy to help out, especially if it turns out to be pretty easy and just a bit of coding. One of the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> intents was that there was little enough internals that you could drop in and just screw around with vectors if you need to.</p>",
        "id": 150957780,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544041336
    },
    {
        "content": "<p>I was also hoping one day for fun to look at parallelizing the 3 \"semi-naive evaluation joins\" to see if it makes a difference on bigger relations :)</p>",
        "id": 150957918,
        "sender_full_name": "lqd",
        "timestamp": 1544041467
    },
    {
        "content": "<p>Actually, re-thinknig that \"start from <code>requires</code>\" issue, it could be interesting to break leapjoin into two parts: 1. a positive \"propose some values\" step, and then 2. \"as many restrictions as you want\".</p>",
        "id": 150957924,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544041472
    },
    {
        "content": "<p>This would allow some flexibility for how you start out, but also insist that you start from something and use types to make sure you don't lack a positive constraint on the extensions.</p>",
        "id": 150957965,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1544041526
    },
    {
        "content": "<p>could be nice, alleviating the need for a WF check, and providing a direct place to have the \"pretending someone proposed a value\" before the restrictions</p>",
        "id": 150958239,
        "sender_full_name": "lqd",
        "timestamp": 1544041750
    },
    {
        "content": "<p>I'd like to chime in and thank y'all for this conversation. I still know nothing about all this, but this discussion was like... only 2 steps away from what I think I might know, so it's tantalizing to attempt to follow.</p>",
        "id": 150959070,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544042493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> since you seem to be having fun: I think we can only have <code>subset_pr1</code> and remove <code>subset_p</code> :)</p>",
        "id": 151001289,
        "sender_full_name": "lqd",
        "timestamp": 1544098066
    },
    {
        "content": "<p>(and also only <code>requires_rp</code> I think)</p>",
        "id": 151001361,
        "sender_full_name": "lqd",
        "timestamp": 1544098132
    },
    {
        "content": "<p>oh, I didn't see all these comments before =) now I see what the 'predicate leaper' was all about</p>",
        "id": 151001379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098167
    },
    {
        "content": "<blockquote>\n<p>Ah, ok. So this is probably painful because <code>requires</code> is the variable, and what you need to start from?</p>\n</blockquote>\n<p>I don't follow this though</p>",
        "id": 151001537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> hmm let me take a look =) using <code>perf stat</code> you can definitely see some reduction (not sure if you saw my commit messages), even though removing variables doesn't seem to affect the wallclock much</p>",
        "id": 151001550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098376
    },
    {
        "content": "<p>I see, you are correct</p>",
        "id": 151001571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098408
    },
    {
        "content": "<p>yeah I did see them, at least removing the subset copies looked interesting, 3%</p>",
        "id": 151001578,
        "sender_full_name": "lqd",
        "timestamp": 1544098420
    },
    {
        "content": "<p>it also just seems like the code is a bit easier to understand this way</p>",
        "id": 151001768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098652
    },
    {
        "content": "<p>only one copy of the core tuples</p>",
        "id": 151001776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098671
    },
    {
        "content": "<p>I also noticed cloning the facts, which we do unequivocally in the engine, takes around 5ms on clap, not world shattering but LocationInsensitive clocks in at around 130ms here so it's not that insignificant. It could be nice to avoid it, esp. once we combine the passes, and maybe Frank's other PR about owned and ref values is a step towards this (but maybe it's just about the leapjoin so idk)</p>",
        "id": 151001778,
        "sender_full_name": "lqd",
        "timestamp": 1544098673
    },
    {
        "content": "<p>yes :D</p>",
        "id": 151001784,
        "sender_full_name": "lqd",
        "timestamp": 1544098680
    },
    {
        "content": "<p>another 0.94%</p>",
        "id": 151001851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098745
    },
    {
        "content": "<p>re: the cloning, yes, I've been thinking about it,</p>",
        "id": 151001868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098767
    },
    {
        "content": "<p>I feel like the thing to do would be to just push some of that work into the fact generation in the compiler ultimately</p>",
        "id": 151001875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098780
    },
    {
        "content": "<p>nice little win again :)</p>",
        "id": 151001878,
        "sender_full_name": "lqd",
        "timestamp": 1544098785
    },
    {
        "content": "<p>that said</p>",
        "id": 151001882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098789
    },
    {
        "content": "<p>well, I guess I just want to experiment with moving more of the logic into datalog</p>",
        "id": 151001933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098808
    },
    {
        "content": "<p>I'd prefer if we can get the compiler's facts to be a bit more primitive</p>",
        "id": 151001938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098816
    },
    {
        "content": "<p>and I <em>still</em> want to write up how the datafrog-opt rules work and investigate my proposed alternative :P which I haven't had time to do...</p>",
        "id": 151001964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098850
    },
    {
        "content": "<blockquote>\n<p>nice little win again :)</p>\n</blockquote>\n<p>yeah</p>",
        "id": 151001971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098862
    },
    {
        "content": "<p>while things are still in flux it doesn't matter all that much rn yeah, just something on the todo list :)</p>",
        "id": 151001999,
        "sender_full_name": "lqd",
        "timestamp": 1544098892
    },
    {
        "content": "<p>maybe time to merge that PR</p>",
        "id": 151002007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098905
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/88\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/88\">https://github.com/rust-lang-nursery/polonius/pull/88</a> I mean</p>",
        "id": 151002012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098910
    },
    {
        "content": "<p>agreed</p>",
        "id": 151002013,
        "sender_full_name": "lqd",
        "timestamp": 1544098918
    },
    {
        "content": "<blockquote>\n<p>(and also only <code>requires_rp</code> I think)</p>\n</blockquote>\n<p>oh I can maybe do this first...</p>",
        "id": 151002059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544098935
    },
    {
        "content": "<p>I do wonder about your thoughts about being able to skip generating borrows_live_at in location_insensitive and datafrogopt ?</p>",
        "id": 151002084,
        "sender_full_name": "lqd",
        "timestamp": 1544098977
    },
    {
        "content": "<p>it's important to have and pretty much the only thing we test at the moment, but it's not strictly speaking necessary</p>",
        "id": 151002116,
        "sender_full_name": "lqd",
        "timestamp": 1544099016
    },
    {
        "content": "<p>I think we should skip it</p>",
        "id": 151002204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099102
    },
    {
        "content": "<p>and test only for errors</p>",
        "id": 151002215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099107
    },
    {
        "content": "<p>we just need better tests :P</p>",
        "id": 151002219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099111
    },
    {
        "content": "<p>that's something else I've been meaning to do</p>",
        "id": 151002238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099150
    },
    {
        "content": "<p>but maybe better to open some issues</p>",
        "id": 151002242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099155
    },
    {
        "content": "<p>go through \"key examples\" and make more polonius unit tests from them</p>",
        "id": 151002289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099166
    },
    {
        "content": "<p>yeah :) (for datafrog_opt we might however also need the leapjoin without extend_with we mentioned yesterday as well)</p>",
        "id": 151002293,
        "sender_full_name": "lqd",
        "timestamp": 1544099171
    },
    {
        "content": "<p>it'd be really nice if I had any confidence that <code>cargo test --all</code> meant something</p>",
        "id": 151002298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099174
    },
    {
        "content": "<p>0.97%</p>",
        "id": 151002320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099207
    },
    {
        "content": "<p>(for requires)</p>",
        "id": 151002322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099210
    },
    {
        "content": "<p>leapjoin is very nice :)</p>",
        "id": 151002331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099223
    },
    {
        "content": "<p>that said, possible diagnostics work and all could impact whether we need the borrows_live_at or not</p>",
        "id": 151002343,
        "sender_full_name": "lqd",
        "timestamp": 1544099243
    },
    {
        "content": "<p>true, maybe</p>",
        "id": 151002385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099282
    },
    {
        "content": "<p>maybe worth waiting on that</p>",
        "id": 151002400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099286
    },
    {
        "content": "<p>once these are more clear, it could also help towards deciding whether cfg compression is good or not</p>",
        "id": 151002409,
        "sender_full_name": "lqd",
        "timestamp": 1544099317
    },
    {
        "content": "<p>Overall measurements from this branch on clap:</p>\n<table>\n<thead>\n<tr>\n<th>point</th>\n<th>instructions</th>\n<th>ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>28,514,865,669</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>529b0c9 (adopt datafrog 1.0)</td>\n<td>27,062,590,519</td>\n<td>0.94</td>\n</tr>\n<tr>\n<td>2df8fc3 (use only <code>requires_rp</code>)</td>\n<td>21,322,189,163</td>\n<td>0.74</td>\n</tr>\n</tbody>\n</table>",
        "id": 151002510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099416
    },
    {
        "content": "<p>I actually have no idea why the datafrog 1.0 switch made any difference</p>",
        "id": 151002514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099428
    },
    {
        "content": "<p>but still, 25%, not bad</p>",
        "id": 151002518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099440
    },
    {
        "content": "<p>I'll just test on rustc one last time I guess</p>",
        "id": 151002539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099467
    },
    {
        "content": "<p>there were some sorting and alloc PRs between 0.1 and 1.0 IIRC</p>",
        "id": 151002551,
        "sender_full_name": "lqd",
        "timestamp": 1544099486
    },
    {
        "content": "<p>ah, nice, yes</p>",
        "id": 151002557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544099492
    },
    {
        "content": "<p>adding rustc's \"smoke test\" facts to polonius' inputs and test that it errors correctly would boost (at least my) confidence in our tests</p>",
        "id": 151002945,
        "sender_full_name": "lqd",
        "timestamp": 1544099844
    },
    {
        "content": "<p>seems to get the same results as before</p>",
        "id": 151003564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544100492
    },
    {
        "content": "<p>merged <a href=\"https://github.com/rust-lang-nursery/polonius/pull/88\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/88\">https://github.com/rust-lang-nursery/polonius/pull/88</a></p>",
        "id": 151003572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544100504
    },
    {
        "content": "<p>awesome job niko and frank :)</p>",
        "id": 151003650,
        "sender_full_name": "lqd",
        "timestamp": 1544100586
    },
    {
        "content": "<p>uh and <em>you</em> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> :P</p>",
        "id": 151006233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544103311
    },
    {
        "content": "<p>ps, I didn't look at naive / location-insensitive, maybe there are leapfrog opportunities there?</p>",
        "id": 151006246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544103331
    },
    {
        "content": "<p>there are indeed :) those were the reasons for the \"do we generate borrows_live_at for location_insensitive\" questions</p>",
        "id": 151006355,
        "sender_full_name": "lqd",
        "timestamp": 1544103415
    },
    {
        "content": "<p>I'll open a PR for location_insensitive later today, also probably add the smoke test just in case, and we can discuss there (I'm not imagining location_insensitive ever needing borrows like datafrogopt needs to, but you never know)</p>",
        "id": 151006413,
        "sender_full_name": "lqd",
        "timestamp": 1544103473
    },
    {
        "content": "<p>(the 2 remaining variants porting PRs are done, working on adding Matthew's smoke tests now)</p>",
        "id": 151038801,
        "sender_full_name": "lqd",
        "timestamp": 1544126451
    },
    {
        "content": "<p>(Matthew's smoke tests immediately showed a problem in the Naive variant <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span> — edit: PR fixing it is up as well)</p>",
        "id": 151049052,
        "sender_full_name": "lqd",
        "timestamp": 1544135438
    },
    {
        "content": "<blockquote>\n<p>(the 2 remaining variants porting PRs are done, working on adding Matthew's smoke tests now)</p>\n</blockquote>\n<p>remind what \"matthew's smoke tests\" are?</p>",
        "id": 151099452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175614
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/31b97f789f4809d0bff76e931a5dfd4fece079da/src/test/ui/nll/polonius-smoke-test.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31b97f789f4809d0bff76e931a5dfd4fece079da/src/test/ui/nll/polonius-smoke-test.rs\">this test</a></p>",
        "id": 151099468,
        "sender_full_name": "lqd",
        "timestamp": 1544175652
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 151099497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175714
    },
    {
        "content": "<p>I just landed a PR -- hadn't noticed all of your PRs yet :P -- that adds at least one such tricky case as well (vec-push-ref)</p>",
        "id": 151099547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175734
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/pull/94\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/94\">link</a></p>",
        "id": 151099555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175750
    },
    {
        "content": "<p>though I'm only comparing against naive</p>",
        "id": 151099562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175766
    },
    {
        "content": "<p>I was thinking it'd be nice to extend the testing infrastructure to actually encode the <em>expected</em> results</p>",
        "id": 151099574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175786
    },
    {
        "content": "<p>I did see this cool new test case yesterday <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> (and now I have conflicts on the cargo.lock which I had already fixed ;) slowly growing confidence in tests is nice</p>",
        "id": 151099580,
        "sender_full_name": "lqd",
        "timestamp": 1544175801
    },
    {
        "content": "<p>agreed, a couple tests do check the expected results but not many, if things change too much we might miss changes in expected results :/</p>",
        "id": 151099603,
        "sender_full_name": "lqd",
        "timestamp": 1544175840
    },
    {
        "content": "<p>yeah, it certainly makes changes to naive kind of scary</p>",
        "id": 151099679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175894
    },
    {
        "content": "<p>it's not that hard to encode expected results</p>",
        "id": 151099683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175900
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I was also planning to mess a bit with applying <a href=\"https://github.com/BurntSushi/quickcheck\" target=\"_blank\" title=\"https://github.com/BurntSushi/quickcheck\"><code>quickcheck</code></a> to datafrog, just because I've never tried using it before</p>",
        "id": 151099703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175928
    },
    {
        "content": "<p>it's surely going to be interesting :)</p>",
        "id": 151099710,
        "sender_full_name": "lqd",
        "timestamp": 1544175942
    },
    {
        "content": "<p>as well as datafrog unit tests, maybe benchmarks could be nice, seeing how a lot of PRs are about performance or ensuring it doesn't regress (Reed had started doing a couple last summer and we can dig them up)</p>",
        "id": 151099760,
        "sender_full_name": "lqd",
        "timestamp": 1544175996
    },
    {
        "content": "<p>maybe we could extend the program parser to encode expected results in the tests ergonomically</p>",
        "id": 151099797,
        "sender_full_name": "lqd",
        "timestamp": 1544176058
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I want to merge <a href=\"https://github.com/rust-lang-nursery/polonius/pull/91\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/91\">https://github.com/rust-lang-nursery/polonius/pull/91</a> but it has conflicts on Cargo.lock</p>",
        "id": 151100375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544176873
    },
    {
        "content": "<p>yeah I'm rebasing rn :)</p>",
        "id": 151100382,
        "sender_full_name": "lqd",
        "timestamp": 1544176901
    },
    {
        "content": "<p>also &lt;<a href=\"https://github.com/rust-lang-nursery/polonius/pull/93\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/93\">https://github.com/rust-lang-nursery/polonius/pull/93</a>&gt; is confusing me -- the bug seems real =) but I'm confused why any of the tests are passing at all... <em>oh</em> <code>test_facts</code> is asserting that <code>borrow_live_at</code> is equal, ok</p>",
        "id": 151100544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177090
    },
    {
        "content": "<p>in general, I'd like to extend the <code>tests!</code> macro so it looks more like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tests</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">issue_47680</span><span class=\"p\">(</span><span class=\"s\">&quot;issue-47680&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;main&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">tuples</span><span class=\"w\"> </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 151100592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177136
    },
    {
        "content": "<p>the tests were mostly checking <code>borrows_live_at</code> indeed, checking errors we can see a difference with datafrogopt</p>",
        "id": 151100670,
        "sender_full_name": "lqd",
        "timestamp": 1544177192
    },
    {
        "content": "<p>all the rules were ported to generate errors, all but setting up the initial facts of a relation, thus generating no errors which the tests missed :)</p>",
        "id": 151100706,
        "sender_full_name": "lqd",
        "timestamp": 1544177237
    },
    {
        "content": "<p>heh</p>",
        "id": 151100725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177259
    },
    {
        "content": "<p>seems like we should just move everything over to \"expected errors\" and stop inspecting borrow-live-at in general</p>",
        "id": 151100820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177394
    },
    {
        "content": "<p>yeah but borrow_live_at is so valuable I wonder how to do it</p>",
        "id": 151100877,
        "sender_full_name": "lqd",
        "timestamp": 1544177425
    },
    {
        "content": "<p>I wish there was a way to still test them when we need to</p>",
        "id": 151100918,
        "sender_full_name": "lqd",
        "timestamp": 1544177484
    },
    {
        "content": "<p>(cargo.lock conflicts in PRs with multiple commits are <em>ugh</em> :)</p>",
        "id": 151101091,
        "sender_full_name": "lqd",
        "timestamp": 1544177711
    },
    {
        "content": "<blockquote>\n<p>I wish there was a way to still test them when we need to</p>\n</blockquote>\n<p>I guess we can compute them when the <code>dump_flags</code> bool is true (and just duplicate a bit the rules)</p>",
        "id": 151101317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544177936
    },
    {
        "content": "<p>we'd still have to have the variables and relations (albeit empty) and check whether to fill them at each compute round. that's how I've been testing its removal, but wondered about #cfgs and all</p>",
        "id": 151101481,
        "sender_full_name": "lqd",
        "timestamp": 1544178076
    },
    {
        "content": "<p>yes, we'd still have to do that. seems ok</p>",
        "id": 151101826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178452
    },
    {
        "content": "<p>cfg has the downside that we can't enable it dynamically</p>",
        "id": 151101842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178472
    },
    {
        "content": "<p>but I guess you might say \"only do it for <code>#[cfg(test)]</code>\" or something</p>",
        "id": 151101846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178480
    },
    {
        "content": "<p>or a cargo feature</p>",
        "id": 151101888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178490
    },
    {
        "content": "<p>I doubt the branches would be a real cost though (nor an empty variable)</p>",
        "id": 151101898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178517
    },
    {
        "content": "<p>right</p>",
        "id": 151101979,
        "sender_full_name": "lqd",
        "timestamp": 1544178608
    },
    {
        "content": "<p>the deps <a href=\"https://github.com/rust-lang-nursery/polonius/pull/91\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/91\">PR</a> should be good to go now</p>",
        "id": 151101994,
        "sender_full_name": "lqd",
        "timestamp": 1544178643
    },
    {
        "content": "<p>(we might enjoy having bors to recheck PRs and tests :)</p>",
        "id": 151102012,
        "sender_full_name": "lqd",
        "timestamp": 1544178694
    },
    {
        "content": "<p>yeah could setup bors ng or something</p>",
        "id": 151102325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544179084
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, <a href=\"https://github.com/rust-lang-nursery/polonius/pull/92\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/92\">https://github.com/rust-lang-nursery/polonius/pull/92</a> has conflicts now =)</p>",
        "id": 151104325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544181596
    },
    {
        "content": "<p>:)</p>",
        "id": 151104381,
        "sender_full_name": "lqd",
        "timestamp": 1544181623
    },
    {
        "content": "<p>on it</p>",
        "id": 151104385,
        "sender_full_name": "lqd",
        "timestamp": 1544181630
    },
    {
        "content": "<p>inb4 \"introducing MEGA PRs\" a single PR for all one's needs</p>",
        "id": 151104416,
        "sender_full_name": "lqd",
        "timestamp": 1544181680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rebased :)</p>",
        "id": 151105075,
        "sender_full_name": "lqd",
        "timestamp": 1544182457
    },
    {
        "content": "<blockquote>\n<p>with applying quickcheck to datafrog</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd recommend <a href=\"https://docs.rs/proptest/0.7.0/proptest/\" target=\"_blank\" title=\"https://docs.rs/proptest/0.7.0/proptest/\">proptest</a></p>",
        "id": 151184350,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544288860
    },
    {
        "content": "<p>I've found it to be a bit more usable</p>",
        "id": 151184367,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544288880
    },
    {
        "content": "<p>Namely, the code you write to generate testcases has been more composable</p>",
        "id": 151184422,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544288950
    },
    {
        "content": "<p>yeah I started messing with that but got distracted</p>",
        "id": 151478373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560233
    },
    {
        "content": "<p>will try to get back to it this week maybe</p>",
        "id": 151478376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544560236
    }
]