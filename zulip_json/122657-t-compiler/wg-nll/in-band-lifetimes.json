[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> didn't you add <code>in_band_lifetimes</code> feature to the compiler ?</p>",
        "id": 130300311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550463
    },
    {
        "content": "<p>You mean in rustc_mir? I went through and tried it but never submitted a PR</p>",
        "id": 130300365,
        "sender_full_name": "simulacrum",
        "timestamp": 1532550496
    },
    {
        "content": "<p>I still have the branch though, probably relatively easy to rebase</p>",
        "id": 130300369,
        "sender_full_name": "simulacrum",
        "timestamp": 1532550510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/compare/master...Mark-Simulacrum:rustc-mir-inband\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...Mark-Simulacrum:rustc-mir-inband\">https://github.com/rust-lang/rust/compare/master...Mark-Simulacrum:rustc-mir-inband</a> is the diff</p>",
        "id": 130300430,
        "sender_full_name": "simulacrum",
        "timestamp": 1532550575
    },
    {
        "content": "<p>oh, you didn't land it?</p>",
        "id": 130300495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550608
    },
    {
        "content": "<p>that explains why the <code>#![feature]</code> is not present :)</p>",
        "id": 130300555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Want me to rebase it?</p>",
        "id": 130300743,
        "sender_full_name": "simulacrum",
        "timestamp": 1532550891
    },
    {
        "content": "<p>idk, maybe? I'd like to start using the feature -- I'm not crazy though about having lifetimes named <code>'a</code> at impl scope</p>",
        "id": 130300765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550917
    },
    {
        "content": "<p>I'd want to maybe establish a different convention</p>",
        "id": 130300771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550926
    },
    {
        "content": "<p>basically what I wanted was something where single-letter names were only used at fn level</p>",
        "id": 130300778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550939
    },
    {
        "content": "<p>and multi-letter names were meant to be meaningful and could be used anywhere</p>",
        "id": 130300782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550951
    },
    {
        "content": "<p>ideally, a lint-enforced convention, but maybe good to do it manually to start</p>",
        "id": 130300821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550964
    },
    {
        "content": "<p>it's not particularly urgent</p>",
        "id": 130300836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532550991
    },
    {
        "content": "<p>I was just curious because I thought I remembered you saying you had applied that change to <code>librustc_mir</code></p>",
        "id": 130300841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551003
    },
    {
        "content": "<p>actually what I'd like to do is start using the <code>implied_outlives_bounds</code> for structs...</p>",
        "id": 130300854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551019
    },
    {
        "content": "<p>I get sick of writing <code>&lt;'cx, 'gcx: 'tcx, 'tcx: 'cx&gt;</code></p>",
        "id": 130300867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551044
    },
    {
        "content": "<p>I don't imagine it'll be a difficult rebase</p>",
        "id": 130300879,
        "sender_full_name": "simulacrum",
        "timestamp": 1532551079
    },
    {
        "content": "<p>I can put it up later today/tomorrow probably</p>",
        "id": 130300922,
        "sender_full_name": "simulacrum",
        "timestamp": 1532551091
    },
    {
        "content": "<p>But yeah, conventions need to be established</p>",
        "id": 130300929,
        "sender_full_name": "simulacrum",
        "timestamp": 1532551102
    },
    {
        "content": "<p>agreed. I'm not sure I have the right ones, either, but I <em>think</em> they would work well</p>",
        "id": 130300945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551128
    },
    {
        "content": "<p>I would like to start using it though to try and get better sense for how it \"feels\"</p>",
        "id": 130300961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532551155
    },
    {
        "content": "<p>Sure, yeah</p>",
        "id": 130301037,
        "sender_full_name": "simulacrum",
        "timestamp": 1532551236
    },
    {
        "content": "<p>on this topic, I tried to add <code>infer_outlives_requirements</code> to librustc_mir, but due to the (fixed) bug for cross-crate cases, it's still not usable</p>",
        "id": 130319669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532576993
    },
    {
        "content": "<p>need one more beta</p>",
        "id": 130319670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532576996
    },
    {
        "content": "<p>proposal: instead of <code>'cx</code>, use <code>'this</code> to represent the \"contravariant region\"...</p>",
        "id": 130323336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532583276
    },
    {
        "content": "<p>or maybe <code>'me</code> or <code>'my</code></p>",
        "id": 130323605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532583678
    },
    {
        "content": "<p>Bringing back <code>'self</code>. eh</p>",
        "id": 130344997,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532613105
    },
    {
        "content": "<p><code>'self</code> doesn't work because <code>self</code> is a keyword -- <code>'this</code> has been the trend I've seen so far</p>",
        "id": 130347206,
        "sender_full_name": "simulacrum",
        "timestamp": 1532615415
    },
    {
        "content": "<p>I do like <code>'me</code> or something shorter though</p>",
        "id": 130347220,
        "sender_full_name": "simulacrum",
        "timestamp": 1532615425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I was referencing some Olde Rust, before when I started (0.12, IIRC) where <code>'self</code> was a predefined lifetime.</p>",
        "id": 130349632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532617232
    },
    {
        "content": "<p>Heh</p>",
        "id": 130349667,
        "sender_full_name": "simulacrum",
        "timestamp": 1532617255
    },
    {
        "content": "<p>But, as useful feedback instead of my joke...</p>\n<blockquote>\n<p>to represent the \"contravariant region\"...</p>\n</blockquote>\n<p>Maybe it should be <code>'cr</code></p>",
        "id": 130349749,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532617315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Well, it's up: <a href=\"https://github.com/rust-lang/rust/pull/52736\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52736\">https://github.com/rust-lang/rust/pull/52736</a></p>",
        "id": 130352760,
        "sender_full_name": "simulacrum",
        "timestamp": 1532619562
    },
    {
        "content": "<p>But reviewing that is going to be a nightmare</p>",
        "id": 130352770,
        "sender_full_name": "simulacrum",
        "timestamp": 1532619580
    },
    {
        "content": "<p>to some extent, if it compiles, it's fine</p>",
        "id": 130353116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532619861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> some of the changes are surprising to me; I'll leave comments</p>",
        "id": 130353402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620098
    },
    {
        "content": "<p>I'm definitely interested in feedback</p>",
        "id": 130353416,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620116
    },
    {
        "content": "<p>Some of it might be that as I went through my patterns somewhat changed I think as I got more of a feel for things</p>",
        "id": 130353422,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620135
    },
    {
        "content": "<p>the thing I'm most curious about is the <code>'self_</code></p>",
        "id": 130353458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620191
    },
    {
        "content": "<p>yeah ewww <code>'self_</code></p>",
        "id": 130353537,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532620257
    },
    {
        "content": "<p>i like that cramertj also reviewed</p>",
        "id": 130353551,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1532620288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What do you think about using <code>'_</code> instead of <code>'a</code>/<code>'me</code>? I guess we can't always since we sometime want to tie things to that lifetime...</p>",
        "id": 130353642,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620378
    },
    {
        "content": "<p>it's not so much the name itself</p>",
        "id": 130353649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> well I think we should use <code>'_</code> whenever possible</p>",
        "id": 130353664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620398
    },
    {
        "content": "<p>that's the first and foremost rule</p>",
        "id": 130353672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620404
    },
    {
        "content": "<p>and in fact we have a lint for this</p>",
        "id": 130353677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620408
    },
    {
        "content": "<p>that... I think even works?</p>",
        "id": 130353680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620411
    },
    {
        "content": "<p>Even if that means a later patch will need to make broader changes?</p>",
        "id": 130353683,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620415
    },
    {
        "content": "<p>that would be my preference</p>",
        "id": 130353691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620424
    },
    {
        "content": "<p>i.e. today you can pretty much just start using <code>'a</code> in contexts</p>",
        "id": 130353693,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620426
    },
    {
        "content": "<p>I think names should connect things</p>",
        "id": 130353699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620432
    },
    {
        "content": "<p>if I see a name, I would typically assume it's tied to something else</p>",
        "id": 130353747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620445
    },
    {
        "content": "<p>if the name is only used once, that is misleading</p>",
        "id": 130353757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620449
    },
    {
        "content": "<p>What about <code>'tcx</code>?</p>",
        "id": 130353768,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620461
    },
    {
        "content": "<p>E.g. <code>mir::Place&lt;'tcx&gt;</code> or some such</p>",
        "id": 130353782,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620471
    },
    {
        "content": "<p>I typically use <code>'_</code> if I can instead</p>",
        "id": 130353786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620473
    },
    {
        "content": "<p>but that is something of an exception</p>",
        "id": 130353790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620476
    },
    {
        "content": "<p>but I do usually write e.g. <code>&amp;InferCtxt&lt;'_, '_, 'tcx&gt;</code></p>",
        "id": 130353807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620494
    },
    {
        "content": "<p>and not <code>'gcx</code></p>",
        "id": 130353808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620496
    },
    {
        "content": "<p>I'd be fine with e.g. <code>Ty&lt;'_&gt;</code> if it's not needed</p>",
        "id": 130353822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620509
    },
    {
        "content": "<p>but I'm also ok with <code>Ty&lt;'tcx&gt;</code>, since that is so omni-present</p>",
        "id": 130353827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> but mainly I was curious whether the <code>'self_</code> was actually <em>needed</em></p>",
        "id": 130353902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620579
    },
    {
        "content": "<p>that is, you went from a case with elision to one without</p>",
        "id": 130353904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620584
    },
    {
        "content": "<p><code>fn foo(&amp;self, ..) -&gt; Foo&lt;'_&gt;</code> to <code>fn foo(&amp;'a self, ..) -&gt; Foo&lt;'a&gt;</code></p>",
        "id": 130353911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620599
    },
    {
        "content": "<p>if that is <em>needed</em>, that seems like a bug</p>",
        "id": 130353915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620606
    },
    {
        "content": "<p>It's sometimes needed (when you have multiple lifetimes in input params)</p>",
        "id": 130353966,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620672
    },
    {
        "content": "<p>But mostly not required</p>",
        "id": 130353974,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620680
    },
    {
        "content": "<p>but in those cases, it should have been needed before, no?</p>",
        "id": 130354176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620839
    },
    {
        "content": "<p>That's true, yes</p>",
        "id": 130354218,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620894
    },
    {
        "content": "<p>Another interesting question is whether (when possible) we should omit <code>'tcx</code> lifetimes too, e.g. if the function doesn't actually use that property/tie</p>",
        "id": 130354279,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620926
    },
    {
        "content": "<p>Yeah, I lack a strong opinion there. I think I would probably keep that particular one just for simplicity somehow.</p>",
        "id": 130354305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620958
    },
    {
        "content": "<p>but I also think it's fine not to</p>",
        "id": 130354311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620968
    },
    {
        "content": "<p>It feels like we should have better answers here...</p>",
        "id": 130354329,
        "sender_full_name": "simulacrum",
        "timestamp": 1532620986
    },
    {
        "content": "<p>but I feel like when I am writing signatures, I will generally just write <code>'tcx</code> out of habit and not want to think about how tied things are</p>",
        "id": 130354332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620992
    },
    {
        "content": "<p>I..huh. I don't see a problem.</p>",
        "id": 130354336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532620995
    },
    {
        "content": "<p>but, more specifically, do you mean \"rustc should have better answers\" or \"Rust\" or both?</p>",
        "id": 130354345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621014
    },
    {
        "content": "<p>the first more strongly but both</p>",
        "id": 130354353,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621025
    },
    {
        "content": "<p>It's harder on newcomers if the code is inconsistent</p>",
        "id": 130354412,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621052
    },
    {
        "content": "<p>What would make an answer \"better\"?</p>",
        "id": 130354415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621056
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 130354421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621062
    },
    {
        "content": "<p>then write <code>'tcx</code></p>",
        "id": 130354423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621064
    },
    {
        "content": "<p>Right, but then <code>'a, 'tcx, 'gcx</code> should be everywhere, no?</p>",
        "id": 130354434,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621083
    },
    {
        "content": "<p>no!</p>",
        "id": 130354439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621087
    },
    {
        "content": "<p>i.e. you'll get obscure errors if the impl doesn't have it</p>",
        "id": 130354443,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621091
    },
    {
        "content": "<p>first off, not <code>'a</code> :)</p>",
        "id": 130354444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621091
    },
    {
        "content": "<p>why?</p>",
        "id": 130354448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621095
    },
    {
        "content": "<p>I am confused</p>",
        "id": 130354449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621097
    },
    {
        "content": "<p>oh, I see what you mean</p>",
        "id": 130354455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621101
    },
    {
        "content": "<p>Because you're using lifetimes from<code>self</code></p>",
        "id": 130354459,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621103
    },
    {
        "content": "<p>so <em>including</em> <code>'a</code> is more likely to cause problems than not</p>",
        "id": 130354466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621108
    },
    {
        "content": "<p>leaving aside the question of name</p>",
        "id": 130354474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621118
    },
    {
        "content": "<p>because it is not a real thing</p>",
        "id": 130354476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621124
    },
    {
        "content": "<p>Agreed on <code>'a</code> but seems like <code>'tcx</code>/'gcx` are good ideas, right?</p>",
        "id": 130354480,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621127
    },
    {
        "content": "<p>I think you could make a case for <code>'gcx</code></p>",
        "id": 130354486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621135
    },
    {
        "content": "<p>it probably doesn't matter too much either way</p>",
        "id": 130354499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621157
    },
    {
        "content": "<p>Well, I've seen errors from 'tcx and 'gcx being not associated</p>",
        "id": 130354546,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621168
    },
    {
        "content": "<p>(while I was doing this)</p>",
        "id": 130354550,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621172
    },
    {
        "content": "<p>well</p>",
        "id": 130354553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621177
    },
    {
        "content": "<p>I'd rather not write it :)</p>",
        "id": 130354554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621179
    },
    {
        "content": "<p>because it's so unusual to use</p>",
        "id": 130354565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621189
    },
    {
        "content": "<p>that I prefer to have attention called to it</p>",
        "id": 130354567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621191
    },
    {
        "content": "<p>Hm, sure, but the problem is that it's no longer a local consideration</p>",
        "id": 130354582,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621211
    },
    {
        "content": "<p>i.e. I can see not writing it in functions but impl headers perhaps yes?</p>",
        "id": 130354588,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621221
    },
    {
        "content": "<p>why?</p>",
        "id": 130354589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621221
    },
    {
        "content": "<p>I mean .. yes, you'll get errors</p>",
        "id": 130354596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621228
    },
    {
        "content": "<p>we'll work on reporting them well</p>",
        "id": 130354600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621234
    },
    {
        "content": "<p>Right, you'll get errors and as a newcomer you'll have <em>no idea</em> how to fix them</p>",
        "id": 130354606,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621240
    },
    {
        "content": "<p>why would you have no idea?</p>",
        "id": 130354616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621249
    },
    {
        "content": "<p>I guess if errors are good, then maybe -- I just worry that it'll essentially be <code>'1</code> does not outlive <code>'tcx</code> and people will not know where <code>'1</code> came from</p>",
        "id": 130354686,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621291
    },
    {
        "content": "<p>e.g., if it tells you </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Ctxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">^^</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">being</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;gcx</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then it's fairly clear. You have to understand the scheme, of course.</p>",
        "id": 130354688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621293
    },
    {
        "content": "<p>but if we can point at the impl block then that's good enough</p>",
        "id": 130354697,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621304
    },
    {
        "content": "<p>I doubt we do today of course :) but it seems like something we could do</p>",
        "id": 130354708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621322
    },
    {
        "content": "<p>and should do</p>",
        "id": 130354711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621325
    },
    {
        "content": "<p>regardless of the outcome of this discussion :)</p>",
        "id": 130354716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621331
    },
    {
        "content": "<p>that said, I think i could be convinced that we should just use <code>'gcx</code> and <code>'tcx</code></p>",
        "id": 130354722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621341
    },
    {
        "content": "<p>for simpicity and to head off errors</p>",
        "id": 130354730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621348
    },
    {
        "content": "<p>I think those two lifetimes are 'special'</p>",
        "id": 130354738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621363
    },
    {
        "content": "<p>most other lifetimes just connect things</p>",
        "id": 130354744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621368
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0623]: lifetime mismatch\n   --&gt; librustc_mir/borrow_check/nll/mod.rs:259:9\n    |\n217 |     infcx: &amp;InferCtxt&lt;&#39;_, &#39;_, &#39;_&gt;,\n    |             ---------------------\n...\n220 |     mir: &amp;Mir&lt;&#39;_&gt;,\n    |           ------- these two types are declared with different lifetimes...\n...\n259 |         infcx.tcx,\n    |         ^^^^^^^^^ ...but data from `mir` flows into `infcx` here\n</pre></div>",
        "id": 130354756,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621375
    },
    {
        "content": "<p>but those lifetimes refer to very specific arenas in the compiler</p>",
        "id": 130354757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621376
    },
    {
        "content": "<p>well, the newer errors are actually better</p>",
        "id": 130354763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621385
    },
    {
        "content": "<p>we should remove that one</p>",
        "id": 130354765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621387
    },
    {
        "content": "<p>that is, that particular error form is a \"fancy error\" that overrides the base error</p>",
        "id": 130354803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621403
    },
    {
        "content": "<p>but the base errors are becoming better than the fancy error</p>",
        "id": 130354834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621411
    },
    {
        "content": "<p>in particular, the base errors would highlight <em>which</em> lifetime</p>",
        "id": 130354840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621422
    },
    {
        "content": "<p>not just the type as a whole</p>",
        "id": 130354845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621426
    },
    {
        "content": "<p>that's amazing</p>",
        "id": 130354853,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621446
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0623]: lifetime mismatch\n   --&gt; librustc_mir/borrow_check/nll/mod.rs:259:9\n    |\n217 |     infcx: &amp;InferCtxt&lt;&#39;_, &#39;_, &#39;_&gt;,\n    |                           -- let&#39;s call this &#39;1\n...\n220 |     mir: &amp;Mir&lt;&#39;_&gt;,\n    |               -- let&#39;s call this &#39;2\n...\n259 |         infcx.tcx,\n    |         ^^^^^^^^^ &#39;1 is required to outlive &#39;2 here\n</pre></div>",
        "id": 130354867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621464
    },
    {
        "content": "<p>something like that</p>",
        "id": 130354871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621467
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> <span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span> we should distill a test here</p>",
        "id": 130354881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621481
    },
    {
        "content": "<p>I think that it may be getting time to remove the \"nice region errors\"... or at least some of them .. in NLL mode</p>",
        "id": 130354890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621494
    },
    {
        "content": "<p>It'd be super cool if we could look at the struct and pull lifetime names from there</p>",
        "id": 130354911,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621519
    },
    {
        "content": "<p>we do that sometimes and it's mega confusing</p>",
        "id": 130354960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621530
    },
    {
        "content": "<p>hm, I guess it depends on the case</p>",
        "id": 130354973,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621540
    },
    {
        "content": "<p>that is, people are always like \"what is this name\"</p>",
        "id": 130354976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621546
    },
    {
        "content": "<p>yeah, I know, in this case it might be nice</p>",
        "id": 130354980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621552
    },
    {
        "content": "<p>I mean using names like <code>'1</code> and <code>'2</code> may not be better :)</p>",
        "id": 130354989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you maybe distill that test you just gave into an issue ?</p>",
        "id": 130355008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621579
    },
    {
        "content": "<p>e.g., with a simple reproduction</p>",
        "id": 130355017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621587
    },
    {
        "content": "<p>hm, I can point at the compiler tree, I think, that should work</p>",
        "id": 130355025,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621602
    },
    {
        "content": "<p>I think though I'm sort of convinced to just <code>'tcx</code> and <code>'gcx</code> consistently</p>",
        "id": 130355032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621606
    },
    {
        "content": "<p>it seems like it'll be easier to explain</p>",
        "id": 130355037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621611
    },
    {
        "content": "<p>well</p>",
        "id": 130355045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621621
    },
    {
        "content": "<p>Note that the test case is w/o NLL enabled</p>",
        "id": 130355092,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621644
    },
    {
        "content": "<p>I think that <a href=\"https://play.rust-lang.org/?gist=6ef135681004987b98c4438b136a51b3&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=6ef135681004987b98c4438b136a51b3&amp;version=nightly&amp;mode=debug&amp;edition=2015\">this test case will do</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">z</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130355137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621706
    },
    {
        "content": "<p>uh I can't connect to github for some reason :)</p>",
        "id": 130355163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621736
    },
    {
        "content": "<p>seems to reproduce, I'll file it</p>",
        "id": 130355231,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621789
    },
    {
        "content": "<p>can you also p=1 <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span>'s PR now that tests pass? :)</p>",
        "id": 130355247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621804
    },
    {
        "content": "<p>why on earth can't I connect to github...</p>",
        "id": 130355250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621809
    },
    {
        "content": "<p>(thats <a href=\"https://github.com/rust-lang/rust/issues/52648\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52648\">#52648</a>)</p>",
        "id": 130355269,
        "sender_full_name": "davidtwco",
        "timestamp": 1532621846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is an example of the new style errors at work, though in this case we can't point at the <code>'_</code>:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/issue-52533-1.rs:18:18\n   |\nLL |     gimme(|x, y| y)\n   |            -  -  ^ closure was supposed to return data with lifetime `&#39;1` but it is returning data with lifetime `&#39;2`\n   |            |  |\n   |            |  has type `&amp;Foo&lt;&#39;_, &#39;1, u32&gt;`\n   |            has type `&amp;Foo&lt;&#39;_, &#39;2, u32&gt;`\n</pre></div>",
        "id": 130355272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621851
    },
    {
        "content": "<p>I'm still impressed with that one :)</p>",
        "id": 130355335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621890
    },
    {
        "content": "<p>ok I got github to work now</p>",
        "id": 130355342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621901
    },
    {
        "content": "<p>switched to my cell phone hotspot :)</p>",
        "id": 130355345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> here's another example to file :)</p>",
        "id": 130355374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621980
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?gist=96fc205e5162ae48cb27063a22ea4518&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=96fc205e5162ae48cb27063a22ea4518&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=96fc205e5162ae48cb27063a22ea4518&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 130355376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621981
    },
    {
        "content": "<p>Yes, these errors are quite good</p>",
        "id": 130355379,
        "sender_full_name": "simulacrum",
        "timestamp": 1532621986
    },
    {
        "content": "<p>did you file the other one?</p>",
        "id": 130355387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532621995
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/52739\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52739\">#52739</a></p>",
        "id": 130355444,
        "sender_full_name": "davidtwco",
        "timestamp": 1532622015
    },
    {
        "content": "<p>I think that both of these are cases where the \"nice region errors\" are getting in the way</p>",
        "id": 130355480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1532622067
    },
    {
        "content": "<p>I've made a topic for discussing that.</p>",
        "id": 130355488,
        "sender_full_name": "davidtwco",
        "timestamp": 1532622075
    },
    {
        "content": "<p>Got really confused when I got assigned a issue from <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> but the name on the email of <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was different.</p>",
        "id": 130357227,
        "sender_full_name": "davidtwco",
        "timestamp": 1532623789
    }
]