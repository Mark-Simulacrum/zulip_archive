[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so we should talk here perhaps</p>",
        "id": 133660474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586563
    },
    {
        "content": "<p>you ask a reasonable Q <a href=\"https://github.com/rust-lang/rust/pull/53873#issuecomment-419543464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53873#issuecomment-419543464\">here</a>, about when lifetimes in ascribed types should be meaningful</p>",
        "id": 133660549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586625
    },
    {
        "content": "<p>to be honest, my intuition is that: if the programmer ascribed a type, at least to a variable (not sure yet about arbitrary expressions), then that type should be applied to the entire scope of that variable</p>",
        "id": 133660592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586666
    },
    {
        "content": "<p>even over the course of assignments</p>",
        "id": 133660626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586682
    },
    {
        "content": "<p>I realize that this might introduce borrowck errors (in the sense that sound code may start failing to compile, which might then be filed as an <code>NLL-complete</code> bug)</p>",
        "id": 133660661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586695
    },
    {
        "content": "<p>but if someone is going to write out an explicit lifetime, I think we are probably better of err'ing on the side of respecting their request</p>",
        "id": 133660688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586719
    },
    {
        "content": "<p>and also, I think that semantics will yield more intuitive user experience in terms of diagnostics</p>",
        "id": 133660715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586741
    },
    {
        "content": "<p>namely avoiding cases like this: <a href=\"https://github.com/rust-lang/rust/pull/53873#issuecomment-419440395\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53873#issuecomment-419440395\">https://github.com/rust-lang/rust/pull/53873#issuecomment-419440395</a></p>",
        "id": 133660735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536586758
    },
    {
        "content": "<p>ok so I wrote up a bunch of tests</p>",
        "id": 133660940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536586965
    },
    {
        "content": "<p>I pushed them</p>",
        "id": 133660943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536586966
    },
    {
        "content": "<p>there are two that worry me (both have a FIXME in the file)</p>",
        "id": 133660950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536586972
    },
    {
        "content": "<p>/me looks</p>",
        "id": 133660983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587007
    },
    {
        "content": "<p>one is the one I already showed</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">variable_no_initializer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME: It is unclear to me whether this should be an error or not.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133661076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587056
    },
    {
        "content": "<p>the other is this one</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">static_to_a_to_static_through_tuple</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME: The fact that this type-checks is perhaps surprising.</span>\n<span class=\"w\">    </span><span class=\"c1\">// What happens is that the right-hand side is constrained to have</span>\n<span class=\"w\">    </span><span class=\"c1\">// type `&amp;&#39;a u32`, which is possible, because it has type</span>\n<span class=\"w\">    </span><span class=\"c1\">// `&amp;&#39;static u32`. The variable `y` is then forced to have type</span>\n<span class=\"w\">    </span><span class=\"c1\">// `&amp;&#39;static u32`, but it is constrained only by the right-hand</span>\n<span class=\"w\">    </span><span class=\"c1\">// side, not the ascribed type, and hence it passes.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_z</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133661085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587066
    },
    {
        "content": "<p>it's probably worth me explaining a bit what I did in this PR</p>",
        "id": 133661088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587074
    },
    {
        "content": "<p>that last test exposes the \"gap\" â€” I think I've come to the conclusion that to enforce type constraints,</p>",
        "id": 133661104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587092
    },
    {
        "content": "<p>we have to do <em>two</em> things:</p>\n<ul>\n<li>Enforce the constraint as a supertype of the type of the initializer (what this PR does)</li>\n</ul>",
        "id": 133661125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587110
    },
    {
        "content": "<p>and if you made the <code>fn variable_no_initializer</code> returns <code>&amp;'static u32</code></p>",
        "id": 133661132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587118
    },
    {
        "content": "<ul>\n<li>Propagate the constraint <em>down</em> to the bindings within (what this PR does not do except in the case of <code>let x: T</code>)</li>\n</ul>",
        "id": 133661133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587123
    },
    {
        "content": "<p>and then have it return <code>y</code></p>",
        "id": 133661139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587125
    },
    {
        "content": "<p>I assume that <em>would</em> error</p>",
        "id": 133661155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587145
    },
    {
        "content": "<p>yes, one hopes :)</p>",
        "id": 133661164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587152
    },
    {
        "content": "<p>but yes, it will</p>",
        "id": 133661170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587156
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Propagate the constraint <em>down</em> to the bindings within (what this PR does not do except in the case of <code>let x: T</code>)</li>\n</ul>\n</blockquote>\n<p>the fact that we don't do this is why that second test passes</p>",
        "id": 133661218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587170
    },
    {
        "content": "<p>can we discuss the first test a bit more before we move on to the second?</p>",
        "id": 133661274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587256
    },
    {
        "content": "<p>... or  do you see them as intrinsically linked?</p>",
        "id": 133661374,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587338
    },
    {
        "content": "<p>yep</p>",
        "id": 133661376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587338
    },
    {
        "content": "<p>I don't think they are really linked</p>",
        "id": 133661387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587350
    },
    {
        "content": "<p>poor timing on my followup Q</p>",
        "id": 133661389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587351
    },
    {
        "content": "<p>okay</p>",
        "id": 133661394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587353
    },
    {
        "content": "<p>that's what I thought</p>",
        "id": 133661400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587357
    },
    {
        "content": "<p>there is <em>a</em> link</p>",
        "id": 133661407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587365
    },
    {
        "content": "<p>but we could make the first test pass today by special-casing the simple pattern of <code>x</code></p>",
        "id": 133661416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587377
    },
    {
        "content": "<p>but if we want <code>let (x, y): (&amp;'static u32, &amp;'static u32);</code> to propagate, we need to handle the pattern thing</p>",
        "id": 133661427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587389
    },
    {
        "content": "<p>so that is the link</p>",
        "id": 133661429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587391
    },
    {
        "content": "<p>so, I think I agree with your intution btw</p>",
        "id": 133661480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587404
    },
    {
        "content": "<p>that we do want an error here</p>",
        "id": 133661484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587408
    },
    {
        "content": "<p>that said, I don't know how to think about this in more complex cases, but actually the current solver isn't that smart anyway</p>",
        "id": 133661503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587421
    },
    {
        "content": "<p>wait, \"first test\" is <code>fn variable_no_initializer</code> ?</p>",
        "id": 133661507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587425
    },
    {
        "content": "<p>polonius will bring this question more to the fore</p>",
        "id": 133661509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587426
    },
    {
        "content": "<blockquote>\n<p>wait, \"first test\" is <code>fn variable_no_initializer</code> ?</p>\n</blockquote>\n<p>yes</p>",
        "id": 133661511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587432
    },
    {
        "content": "<p>hmm. and you're saying the fix is some sort of special case on... the <code>let x = ...</code> ?</p>",
        "id": 133661525,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587449
    },
    {
        "content": "<p>not on our treatment of assignments?</p>",
        "id": 133661528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587455
    },
    {
        "content": "<p>that is correct</p>",
        "id": 133661573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587501
    },
    {
        "content": "<p>well</p>",
        "id": 133661586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587507
    },
    {
        "content": "<p>you could do various things</p>",
        "id": 133661591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587511
    },
    {
        "content": "<p>however, in the current solver, if we had <code>let x: T;</code> impose constraints on the regions in <code>typeof(x)</code></p>",
        "id": 133661637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587524
    },
    {
        "content": "<p>those constraints would apply throughout the function</p>",
        "id": 133661644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587532
    },
    {
        "content": "<p>and in particular they would affect subsequent constraints</p>",
        "id": 133661646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587538
    },
    {
        "content": "<p>wait wait</p>",
        "id": 133661651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587543
    },
    {
        "content": "<p>I think</p>",
        "id": 133661661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587546
    },
    {
        "content": "<p>this is because our current solver is not (yet) location sensitive; this would not be true for polonius</p>",
        "id": 133661667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587554
    },
    {
        "content": "<p>you are writing <code>let x: T</code></p>",
        "id": 133661669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587555
    },
    {
        "content": "<p>and the test says <code>let x = ...</code></p>",
        "id": 133661672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587562
    },
    {
        "content": "<p>it does not</p>",
        "id": 133661676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587571
    },
    {
        "content": "<p>so when you say \"special case simple patterns\"</p>",
        "id": 133661677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587572
    },
    {
        "content": "<p>I am <em>literally</em> talking about the text</p>",
        "id": 133661688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587580
    },
    {
        "content": "<p>well</p>",
        "id": 133661690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587581
    },
    {
        "content": "<p>in the test, the variable is called <code>y</code></p>",
        "id": 133661700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587590
    },
    {
        "content": "<p><code>let x = ...; let y: &amp;'static u32;</code></p>",
        "id": 133661703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587594
    },
    {
        "content": "<p>this was in fact the source of my confusion</p>",
        "id": 133661707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587602
    },
    {
        "content": "<p>as to why the \"fix\" would be to <code>let x = ...;</code>;</p>",
        "id": 133661712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587613
    },
    {
        "content": "<p>I see, I see</p>",
        "id": 133661722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587622
    },
    {
        "content": "<p>sorry, my bad</p>",
        "id": 133661724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587624
    },
    {
        "content": "<p>okay now I think I am on a similar page to you, if not the same one</p>",
        "id": 133661789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587647
    },
    {
        "content": "<p>in any case, the point remains that if we had <code>let y: &amp;'static u32;</code> impose a constraint on <code>typeof(y)</code> at that point</p>",
        "id": 133661798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587654
    },
    {
        "content": "<p>it would propagate down below</p>",
        "id": 133661801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587658
    },
    {
        "content": "<p>We can special case <code>let x: T;</code> and also <code>let x: T = ...</code></p>",
        "id": 133661805,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587660
    },
    {
        "content": "<p>(in fact, maybe I'll handle that special case right now, just because ...)</p>",
        "id": 133661827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587677
    },
    {
        "content": "<p>and have it constrain occurrences of <code>x</code> in the function body, including on the RHS of assignments</p>",
        "id": 133661841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587694
    },
    {
        "content": "<p>I sort of wish that <code>let non-binding-pattern;</code> were not even legal</p>",
        "id": 133661847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587697
    },
    {
        "content": "<p>but oh well :P</p>",
        "id": 133661848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587699
    },
    {
        "content": "<p>Oh <code>let non_binding_pattern;</code> is so great though!</p>",
        "id": 133661864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587712
    },
    {
        "content": "<p>:)</p>",
        "id": 133661866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587715
    },
    {
        "content": "<p>well</p>",
        "id": 133661867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587718
    },
    {
        "content": "<p>what I meant <em>really</em> is</p>",
        "id": 133661875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587725
    },
    {
        "content": "<p>I wish that it were only legal for variables and maybe tuples</p>",
        "id": 133661879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587731
    },
    {
        "content": "<p>ah</p>",
        "id": 133661885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587738
    },
    {
        "content": "<p>stuff like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span>: <span class=\"nc\">Single</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133661888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587742
    },
    {
        "content": "<p>is just weird</p>",
        "id": 133661889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587745
    },
    {
        "content": "<p>yes okay</p>",
        "id": 133661892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587746
    },
    {
        "content": "<p>but annoying for us to handle</p>",
        "id": 133661893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587748
    },
    {
        "content": "<p>I wonder if it is <em>ever</em> done</p>",
        "id": 133661901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587756
    },
    {
        "content": "<p>that is goofy, I agree about that</p>",
        "id": 133661904,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587757
    },
    {
        "content": "<p>maybe we can kill it</p>",
        "id": 133661907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587761
    },
    {
        "content": "<p>that's what I am wondering :)</p>",
        "id": 133661947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587765
    },
    {
        "content": "<p>in Rust 2021</p>",
        "id": 133661948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587765
    },
    {
        "content": "<p>or Rust 2018 :)</p>",
        "id": 133661954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587771
    },
    {
        "content": "<p>you are optimistic</p>",
        "id": 133661965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587781
    },
    {
        "content": "<p>but you are also the one in charge. :)</p>",
        "id": 133661966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587785
    },
    {
        "content": "<p>heh yes I know</p>",
        "id": 133661967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587785
    },
    {
        "content": "<p>\"All hands on deck!\"</p>",
        "id": 133661978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587792
    },
    {
        "content": "<p>I would be curious if there is even a single <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> crate that uses it</p>",
        "id": 133661981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587799
    },
    {
        "content": "<p>hard to grep for</p>",
        "id": 133661997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587817
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 133662001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587821
    },
    {
        "content": "<p>we could make <code>let x: T</code> and even <code>let (a, b, c): (T1, T2, T3)</code> work with relative ease I think...</p>",
        "id": 133662039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587854
    },
    {
        "content": "<p>the rest is just sort of annoying to code, but not \"undoable\"</p>",
        "id": 133662051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587865
    },
    {
        "content": "<p>fixing <code>let x: T;</code> and <code>let x: T = ...;</code> would make me pretty happy.</p>",
        "id": 133662078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587882
    },
    {
        "content": "<p>the tuple cases probably do need to be done too</p>",
        "id": 133662111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587893
    },
    {
        "content": "<p>the rest... eh, just emit a warning</p>",
        "id": 133662115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587901
    },
    {
        "content": "<p>\"Your lifetimes here are not respected.\"</p>",
        "id": 133662122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587913
    },
    {
        "content": "<p>I agree it's plausible</p>",
        "id": 133662132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587922
    },
    {
        "content": "<p>this is why I was wondering if we could even kill it somehow</p>",
        "id": 133662142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587931
    },
    {
        "content": "<p>anyway, let's solve the rest</p>",
        "id": 133662149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587935
    },
    {
        "content": "<p>let me see, I bet I can fix <code>let x: T</code> pretty easily</p>",
        "id": 133662156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587942
    },
    {
        "content": "<p>tuples I would prefer to defer to another PR</p>",
        "id": 133662164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536587946
    },
    {
        "content": "<p>so okay, that's the first case you described</p>",
        "id": 133662170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587951
    },
    {
        "content": "<p>and I'm totally fine with deferring tuples</p>",
        "id": 133662176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536587958
    },
    {
        "content": "<p>since those are a case of the kind of propagation you describe for the \"second case\"</p>",
        "id": 133662248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588005
    },
    {
        "content": "<p>(I think that would also be something that could be readily mentored â€” tuples I mean)</p>",
        "id": 133662276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588022
    },
    {
        "content": "<p>so, the second case...</p>",
        "id": 133662283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588026
    },
    {
        "content": "<p>I guess plausibly the same treatment could be done</p>",
        "id": 133662289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588034
    },
    {
        "content": "<p>that is, we could probably solve the 80-20 for both cases by saying that we:</p>",
        "id": 133662298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588043
    },
    {
        "content": "<p>so one thing I want to double check about the semantics here</p>",
        "id": 133662309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588055
    },
    {
        "content": "<p>\"down-propagate\" the ascribed type to the bindings for variables + tuples</p>",
        "id": 133662317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588059
    },
    {
        "content": "<p>(whether or not there is an initializer)</p>",
        "id": 133662329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588066
    },
    {
        "content": "<p><code>let x = E: T;</code> will now not be synonymous with <code>let x: T = E;</code>, right?</p>",
        "id": 133662337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588074
    },
    {
        "content": "<p>(because the first case will not constraint all occurrences of <code>x</code> to have the type <code>T</code>)</p>",
        "id": 133662355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588095
    },
    {
        "content": "<p>not quite</p>",
        "id": 133662357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588096
    },
    {
        "content": "<p>it isn't today, either</p>",
        "id": 133662368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588101
    },
    {
        "content": "<p>I wouldn't think</p>",
        "id": 133662383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588117
    },
    {
        "content": "<p>oh is that right?</p>",
        "id": 133662385,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588119
    },
    {
        "content": "<p>okay I shouldn't be surprised</p>",
        "id": 133662423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588124
    },
    {
        "content": "<p>e.g. with <code>let mut</code></p>",
        "id": 133662432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588132
    },
    {
        "content": "<p>the type <code>T</code> in the first case only applies to <code>E</code></p>",
        "id": 133662442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588144
    },
    {
        "content": "<p>when you say \"today\"</p>",
        "id": 133662477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588178
    },
    {
        "content": "<p>are you talking about AST-borrowck too?</p>",
        "id": 133662485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588185
    },
    {
        "content": "<p>or just NLL?</p>",
        "id": 133662492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588187
    },
    {
        "content": "<p>I mean \"as implemented, using AST borrowck\"</p>",
        "id": 133662495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588190
    },
    {
        "content": "<p>I guess I'm still surprised.</p>",
        "id": 133662500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588200
    },
    {
        "content": "<p>(iirc type ascription is usable with a feature gate?)</p>",
        "id": 133662505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588201
    },
    {
        "content": "<p>well e.g. I would expect:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to error</p>",
        "id": 133662532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588223
    },
    {
        "content": "<p>oh of course</p>",
        "id": 133662547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588238
    },
    {
        "content": "<p>subtyping</p>",
        "id": 133662557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588241
    },
    {
        "content": "<p>/me smacks head</p>",
        "id": 133662600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588246
    },
    {
        "content": "<p>but I don't expect</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to error</p>",
        "id": 133662604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588247
    },
    {
        "content": "<p>you can probably write the same example with <code>as</code>...</p>",
        "id": 133662636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588269
    },
    {
        "content": "<p>ok so, I think now that if I do the \"simple fix\" for \"down-propagating\" pattern types into variable types</p>",
        "id": 133662717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588353
    },
    {
        "content": "<p>it will fix both my examples</p>",
        "id": 133662719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588355
    },
    {
        "content": "<p>it won't fix examples that use more complex patterns</p>",
        "id": 133662728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588359
    },
    {
        "content": "<p>e.g., structs etc</p>",
        "id": 133662729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588361
    },
    {
        "content": "<p>so in a way I guess my two examples -- <em>today</em> -- are the same problem</p>",
        "id": 133662782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588381
    },
    {
        "content": "<p>okay so I think it sounds like we've resolved the questions you had, in terms of next steps. I'm happy to summarize this conversation on the PR if you like, as a way of answering the Q(s) you posed in your last comment there.</p>",
        "id": 133662805,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588398
    },
    {
        "content": "<p>but I think that with polonius there is a distinct factor of where to enforce the subtyping constraint (this is indeed why I originally introduced <code>Locations::All</code>, but i'd like to remove that, but that's a problem for tomorrow)</p>",
        "id": 133662813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588407
    },
    {
        "content": "<p>sounds good</p>",
        "id": 133662820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588416
    },
    {
        "content": "<p>I think I can whip up that commit quickly</p>",
        "id": 133662824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536588421
    },
    {
        "content": "<blockquote>\n<p>so in a way I guess my two examples -- <em>today</em> -- are the same problem</p>\n</blockquote>\n<p>I suppose they are \"the same\", although the first case is something where we want the type annotation to constrain all assignments <em>to</em> <code>y</code>, while the second case is something where we want the type-checker to continue using the (more constrained/conservative) declared type for <code>y</code> when checking the <em>uses</em> of <code>y</code>. Does that sound right?</p>",
        "id": 133663449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588899
    },
    {
        "content": "<p>the words \"constrained/conservative\" are a bit goofy here</p>",
        "id": 133663510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588955
    },
    {
        "content": "<p>its \"constrained\" in the sense that <code>&amp;'a u32</code> is a more limited type (when compared to <code>&amp;'static u32</code>) for <em>using</em> <code>y</code></p>",
        "id": 133663579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536588981
    },
    {
        "content": "<p>(I actually have an idea how to implement the more complex patterns now, but I think it's best to leave for follow-up)</p>",
        "id": 133663637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589029
    },
    {
        "content": "<blockquote>\n<p>I suppose they are \"the same\", although the first case is something where we want the type annotation to constrain all assignments <em>to</em> <code>y</code>, while the second case is something where we want the type-checker to continue using the (more constrained/conservative) declared type for <code>y</code> when checking the <em>uses</em> of <code>y</code>. Does that sound right?</p>\n</blockquote>\n<p>yes, I think that the second case has more to do with setting an upper bound on the type -- that is, in the example, it cannot go \"up\" to the super type <code>&amp;'static u32</code></p>",
        "id": 133663754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589112
    },
    {
        "content": "<p>note that I use <code>==</code> constraints when propagating the ascribed type down to the bindings</p>",
        "id": 133663771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> hmm, a thought: given that we both agree that when the user ascribes a type to a variable, it should apply to all assignments/uses to that variable, maybe I should store the <code>user_ty</code> for variables in the <code>LocalDefn</code></p>",
        "id": 133664194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589424
    },
    {
        "content": "<p>that is, I was modifying the code so that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would generate a statement, but instead I can store <code>T</code> in the local definition of <code>x</code>, and enforce it that way in the type checker</p>",
        "id": 133664255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589454
    },
    {
        "content": "<p>cool</p>",
        "id": 133664259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536589458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok I made that change and pushed: indeed, things now work so long as you don't use more complex patterns</p>",
        "id": 133667006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591546
    },
    {
        "content": "<p>I realize incidentally that I think we are also not handling normalization correctly, but I want to address that in a follow-up too</p>",
        "id": 133667031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591566
    },
    {
        "content": "<p>er, I wonder what I meant by this \" Fix the WF rule bug\"</p>",
        "id": 133667047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591584
    },
    {
        "content": "<p>heh. \"Uh oh'</p>",
        "id": 133667066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536591598
    },
    {
        "content": "<p>oh, I remember what I meant</p>",
        "id": 133667144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591626
    },
    {
        "content": "<p>hmm maybe I'll file a follow-up for that, too</p>",
        "id": 133667155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591634
    },
    {
        "content": "<p>it's sort of a corner case</p>",
        "id": 133667164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591641
    },
    {
        "content": "<p>we are vulnerable, I think, to <a href=\"https://github.com/rust-lang/rust/issues/41677\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/41677\">#41677</a></p>",
        "id": 133667182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591663
    },
    {
        "content": "<p>but I'd like to make a test case</p>",
        "id": 133667190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591667
    },
    {
        "content": "<p>ok, well, my battery is out of power, so I will stop here for now :)</p>",
        "id": 133667228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591698
    },
    {
        "content": "<p>let me see if I have enough power to file a follow-up issue</p>",
        "id": 133667255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you want to review the last few commits?</p>",
        "id": 133667419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591824
    },
    {
        "content": "<p>if so, the PR is ready</p>",
        "id": 133667425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591829
    },
    {
        "content": "<p>/me has to go, bbl</p>",
        "id": 133667431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536591834
    },
    {
        "content": "<p>great will do</p>",
        "id": 133667494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536591848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so I <a href=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47184#issuecomment-420041056\">wrote up my idea for how to do the remaining bits without duplicating a ton of code</a>; though we do still duplicate <em>some</em>, in that we have to work out the logic to map from patterns to places. Maybe though we can share that with MIR builder too.</p>",
        "id": 133685281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536609720
    },
    {
        "content": "<p>This seems like something potentially mentorable</p>",
        "id": 133685322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536609727
    },
    {
        "content": "<p>Hmm, I think I have an idea of what you just wrote</p>",
        "id": 133686040,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1536610507
    },
    {
        "content": "<p>If this does become mentorable, I'd be happy to pick it up</p>",
        "id": 133686059,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1536610535
    },
    {
        "content": "<p>I guess the existing PR has to land first</p>",
        "id": 133686242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536610705
    },
    {
        "content": "<p>there are also a few other \"unchecked boxes\" to look into too</p>",
        "id": 133686247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536610718
    },
    {
        "content": "<p>oh wow the \"series of projection elements -- basically, the path that leads from the type that was given to the type of the binding\" actually sounds very much like something I was going to suggest</p>",
        "id": 133727368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536667793
    },
    {
        "content": "<p>namely, I kept thinking about the work I've read on Zippers and \"The Derivative of a Type is the Type of its One-Hole Contexts\"</p>",
        "id": 133727427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536667822
    },
    {
        "content": "<p>though now that I try to spell that out, a path from the given type down to the type of the binding isn't exactly the same as a One-Hole Context</p>",
        "id": 133727575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536668038
    },
    {
        "content": "<p>Still it definitely sounds like a promising direction</p>",
        "id": 133727623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536668051
    }
]