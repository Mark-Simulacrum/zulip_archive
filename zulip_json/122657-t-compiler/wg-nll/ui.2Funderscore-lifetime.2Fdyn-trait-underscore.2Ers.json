[
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> let's continue here =)</p>",
        "id": 127383722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800904
    },
    {
        "content": "<p>Sure.</p>",
        "id": 127383730,
        "sender_full_name": "davidtwco",
        "timestamp": 1527800931
    },
    {
        "content": "<p>anyway I ran locally</p>",
        "id": 127383734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800938
    },
    {
        "content": "<p>do you know how to render those graphviz files as visible graphs?</p>",
        "id": 127383756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800977
    },
    {
        "content": "<p>I usually do <code>dot -T svg foo.dot &gt; foo.svg</code> and open it in a browser</p>",
        "id": 127383760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527800987
    },
    {
        "content": "<p>Yeah, I've done that before.</p>",
        "id": 127383842,
        "sender_full_name": "davidtwco",
        "timestamp": 1527801040
    },
    {
        "content": "<p>ok so anyway I'm looking at the graph now</p>",
        "id": 127383914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801136
    },
    {
        "content": "<p>however</p>",
        "id": 127383937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801190
    },
    {
        "content": "<p>it doesn't make it so easy to correlate with the file ;)</p>",
        "id": 127383942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801196
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> this is my theory :)</p>",
        "id": 127384090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801369
    },
    {
        "content": "<p>region constraints can come from a lot of places <em>but</em></p>",
        "id": 127384094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801378
    },
    {
        "content": "<p>I think that it is helpful to distinguish those that arise from putting types \"in tension\" with one another — that's my term for it anyway. For example, if you do this: <code>x = y</code>, then you require that <code>typeof(y) &lt;: typeof(x)</code></p>",
        "id": 127384124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801423
    },
    {
        "content": "<p>I am calling <code>y</code> and <code>x</code> \"in tension\" there</p>",
        "id": 127384131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801438
    },
    {
        "content": "<p>in contrast, if you do <code>let x: T = y</code>, then we require that <code>typeof(x) = T</code>, which is not...</p>",
        "id": 127384141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801465
    },
    {
        "content": "<p>so anyway I sort of think we should be able to select — when type-checking — likely places like assignments that relate regions</p>",
        "id": 127384191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801496
    },
    {
        "content": "<p>well, I have to think about this some more :)</p>",
        "id": 127384201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801526
    },
    {
        "content": "<p>I had worked through some examples in the old regionck</p>",
        "id": 127384204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801532
    },
    {
        "content": "<p>I have to think how it relates to the new one</p>",
        "id": 127384208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801536
    },
    {
        "content": "<p>Sure thing, that makes sense so far.</p>",
        "id": 127384238,
        "sender_full_name": "davidtwco",
        "timestamp": 1527801585
    },
    {
        "content": "<p>I guess the TL;DR is I wodner if there is loower hanging fruit :)</p>",
        "id": 127384239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801591
    },
    {
        "content": "<p>but I'd sort of like to sit down with someone (maybe you! :) and talk this through</p>",
        "id": 127384283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801606
    },
    {
        "content": "<p>and see if we can find some heuristics we like</p>",
        "id": 127384289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801611
    },
    {
        "content": "<p>I guess to start we can add some causal information to the outlives, we are definitely going to need it</p>",
        "id": 127384295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801626
    },
    {
        "content": "<p>but maybe it's worth asking:</p>",
        "id": 127384297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801629
    },
    {
        "content": "<p>what would we <em>like</em> this error to look like anyway?</p>",
        "id": 127384298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801634
    },
    {
        "content": "<p>Yeah, that would probably help narrow down what all information we need to make it happen.</p>",
        "id": 127384313,
        "sender_full_name": "davidtwco",
        "timestamp": 1527801671
    },
    {
        "content": "<p>yeah that's usually how I start ...</p>",
        "id": 127384316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801680
    },
    {
        "content": "<p>I'm a bit torn here</p>",
        "id": 127384379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801783
    },
    {
        "content": "<p>I think my ideal message would be quite something like:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0495]: `dyn` type can only capture static references\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                               ^^^^^^^^^^^^^^^^^^^^^ this `dyn` type has no bound and can only capture static references\n...\n18 |     Box::new(items.iter())\n                  ------------ but non-static data flows into it from here\n   = suggestion: try adding a bound\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt; + &#39;_&gt; {\n</pre></div>",
        "id": 127384514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801974
    },
    {
        "content": "<p>obviously that's pretty tailored to this case</p>",
        "id": 127384519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801987
    },
    {
        "content": "<p>but that's kind of how I want the errors to look ;)</p>",
        "id": 127384522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527801994
    },
    {
        "content": "<p>otoh, that seems like \"future work\" potentially :)</p>",
        "id": 127384523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802000
    },
    {
        "content": "<p>it'd be interesting to look at some cases that are not about <code>dyn</code></p>",
        "id": 127384541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802028
    },
    {
        "content": "<p>still, I can imagine doing this without <em>that</em> much difficulty</p>",
        "id": 127384553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802065
    },
    {
        "content": "<p>or at least something <em>like</em> it</p>",
        "id": 127384554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0495]: `dyn` type can only capture static references\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                               ^^^^^^^^^^^^^^^^^^^^^ this `dyn` type has a `&#39;static` bound\n...\n18 |     Box::new(items.iter())\n                  ------------ but non-static data flows into it from here\n</pre></div>",
        "id": 127384611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802110
    },
    {
        "content": "<p>something like that might be quite doable</p>",
        "id": 127384615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802117
    },
    {
        "content": "<p>without undue changes</p>",
        "id": 127384620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802126
    },
    {
        "content": "<p>we'd have to track <em>enough</em> to know that the relationship to <code>'static</code> derives from a <code>dyn</code>-type lifetime bound</p>",
        "id": 127384628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802145
    },
    {
        "content": "<p>and the parameter passing from <code>items.iter()</code> is what introduces the non-static (<code>'1</code>) free lifetime</p>",
        "id": 127384635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802163
    },
    {
        "content": "<p>the latter I think is fairly easy to do — we'd tag parameter passing as one of those \"tension points\" I was talking about</p>",
        "id": 127384641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802181
    },
    {
        "content": "<p>the former is a bit trickier, because that involves bridging some of the \"older\" region code</p>",
        "id": 127384646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802198
    },
    {
        "content": "<p>but it definitely knows</p>",
        "id": 127384694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802208
    },
    {
        "content": "<p>actually...</p>",
        "id": 127384705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802227
    },
    {
        "content": "<p>I think that comes from the casting code...</p>",
        "id": 127384708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802237
    },
    {
        "content": "<p>ah well I think requirement derives from <a href=\"https://github.com/rust-lang/rust/blob/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1378-L1386\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1378-L1386\">the unsize cast</a>,</p>",
        "id": 127384724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802291
    },
    {
        "content": "<p>and then <a href=\"https://github.com/rust-lang/rust/blob/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1/src/librustc/traits/select.rs#L2976-L2979\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1/src/librustc/traits/select.rs#L2976-L2979\">from here in the traits code</a></p>",
        "id": 127384784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802372
    },
    {
        "content": "<p>so yeah not entirely trivial but doable</p>",
        "id": 127384785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802378
    },
    {
        "content": "<p>I think that this test was the only one that wasn't quite solved by the original issue-46983 PR - at least, it's the only one that I've found and seen mentioned in spreadsheets/paper docs against this issue.</p>",
        "id": 127384798,
        "sender_full_name": "davidtwco",
        "timestamp": 1527802411
    },
    {
        "content": "<p>which PR is that?</p>",
        "id": 127384805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802423
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/47329\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/47329\">https://github.com/rust-lang/rust/pull/47329</a></p>",
        "id": 127384815,
        "sender_full_name": "davidtwco",
        "timestamp": 1527802439
    },
    {
        "content": "<p>I had forgotten about that...</p>",
        "id": 127384862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802476
    },
    {
        "content": "<p>(that's why I originally was in the issue-46983 topic as <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> had commented in that issue that this test was an example that needed fixed)</p>",
        "id": 127384874,
        "sender_full_name": "davidtwco",
        "timestamp": 1527802492
    },
    {
        "content": "<p>so I suspect we could do this without modifying the traits code</p>",
        "id": 127384875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802493
    },
    {
        "content": "<p>if we setup the \"cause\" appropriately -- i.e., use a cause that indicates this is a \"unsizing cast\"</p>",
        "id": 127384884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802515
    },
    {
        "content": "<p>and then extract that out for the ultimate <code>outlives</code> obligation</p>",
        "id": 127384894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802554
    },
    {
        "content": "<p>this in short is kind of the strategy I wanted to employ: we add causal information, but sparsely, driven by test cases, and only for \"significant points\" we can explain to a user</p>",
        "id": 127384944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802601
    },
    {
        "content": "<p>then when we display errors we can kind of look for things that lie along the path</p>",
        "id": 127384948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802612
    },
    {
        "content": "<p>which have causal information</p>",
        "id": 127384959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802624
    },
    {
        "content": "<p>as a step in that direction, we might just kind of dump out the causal information like the current checker does, and gradually make it more 'fluent\"</p>",
        "id": 127384971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802648
    },
    {
        "content": "<p>I gotta run now but we could discuss in more depth tomorrow ;)</p>",
        "id": 127384982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527802667
    },
    {
        "content": "<p>Sounds good, getting late here anyway.</p>",
        "id": 127384987,
        "sender_full_name": "davidtwco",
        "timestamp": 1527802680
    },
    {
        "content": "<p>If you want to chat about this, I'm around. I could also do some experimenting here, I wasn't sure how clearly I was able to communicate yesterday.</p>",
        "id": 127414682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527857293
    },
    {
        "content": "<p>I'll be around in a few hours, at work just now.</p>",
        "id": 127415867,
        "sender_full_name": "davidtwco",
        "timestamp": 1527859234
    },
    {
        "content": "<p>Might not have time to chat about this today, my day is running on a bit. If you have some thoughts and want to dump them here than I can take a look when I've got a moment.</p>",
        "id": 127430791,
        "sender_full_name": "davidtwco",
        "timestamp": 1527878105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ok</p>",
        "id": 127430809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878148
    },
    {
        "content": "<p>I may do a bit of hacking, but doing other things right now, so prob not (looking at perf)</p>",
        "id": 127430813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878159
    },
    {
        "content": "<p>if I do, I'll push a branch somewhere and leave a few notes</p>",
        "id": 127430854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878168
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 127430861,
        "sender_full_name": "davidtwco",
        "timestamp": 1527878177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Had a chance to look into this at all?</p>",
        "id": 127542847,
        "sender_full_name": "davidtwco",
        "timestamp": 1528115900
    },
    {
        "content": "<p>Actually, I was literally just making a branch to do some experimentation for a bit this morning</p>",
        "id": 127542850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528115929
    },
    {
        "content": "<p>so no :)</p>",
        "id": 127542856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528115937
    },
    {
        "content": "<p>I was thinking of extending <code>Locations</code> to track causal information</p>",
        "id": 127542915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528116034
    },
    {
        "content": "<p>that reminds me that I really ought to try and land <a href=\"https://github.com/rust-lang/rust/pull/50938\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50938\">https://github.com/rust-lang/rust/pull/50938</a> at some point, as it simplifies <code>Locations</code></p>",
        "id": 127542936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528116068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> do you think you'd have time later today? (I presume you're working now)</p>",
        "id": 127542947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528116118
    },
    {
        "content": "<p>I'd be interested in scheduling a time to do some pair experimentation</p>",
        "id": 127542989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528116135
    },
    {
        "content": "<p>I reckon I should. It's 1.45pm here, I'll probably be available around 6.00pm for a while.</p>",
        "id": 127543132,
        "sender_full_name": "davidtwco",
        "timestamp": 1528116468
    },
    {
        "content": "<p>ok I realize that today I may be busy actually — have to see</p>",
        "id": 127543564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528117154
    },
    {
        "content": "<p>but I'll poke a bit this morning and maybe see if I can leave some notes for you to pick up</p>",
        "id": 127543569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528117169
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127543639,
        "sender_full_name": "davidtwco",
        "timestamp": 1528117225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I'm almost to the point of adding in some kind of very simple causal info; I'll push to a branch in a second</p>",
        "id": 127552875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129258
    },
    {
        "content": "<p>naturally got distracted by various things...</p>",
        "id": 127552881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129265
    },
    {
        "content": "<p>I'm hoping to render a graph soon showing it and see if we can figure out something from it :)</p>",
        "id": 127552887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129286
    },
    {
        "content": "<p>Great, just got in so I can have a look at it when you push.</p>",
        "id": 127552986,
        "sender_full_name": "davidtwco",
        "timestamp": 1528129420
    },
    {
        "content": "<p>ok, the branch is <code>nll-borrow-diagnostics</code> on my repository</p>",
        "id": 127553116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129576
    },
    {
        "content": "<p>I am still building locally though</p>",
        "id": 127553119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129584
    },
    {
        "content": "<p>the last commit is sloppy and mixes two things ;) but otherwise should be simple enough</p>",
        "id": 127553134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528129611
    },
    {
        "content": "<p>ok, well, I got the imagine :) it's definitely still going to take some refinement</p>",
        "id": 127553674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528130305
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/i3FXms5GZU4XHbO5xRxakpMQ/Screen-Shot-2018-06-04-at-12.39.05-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-06-04-at-12.39.05-PM.png\">Screen-Shot-2018-06-04-at-12.39.05-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/i3FXms5GZU4XHbO5xRxakpMQ/Screen-Shot-2018-06-04-at-12.39.05-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-06-04-at-12.39.05-PM.png\"><img src=\"/user_uploads/4715/i3FXms5GZU4XHbO5xRxakpMQ/Screen-Shot-2018-06-04-at-12.39.05-PM.png\"></a></div>",
        "id": 127553677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528130329
    },
    {
        "content": "<p>basically way too much interesting stuff :) I have to look more closely at theMIR</p>",
        "id": 127553679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528130339
    },
    {
        "content": "<p>but it's a start...</p>",
        "id": 127553682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528130343
    },
    {
        "content": "<p>I gotta run but I'll be online-ish</p>",
        "id": 127553687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528130351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> still around?</p>",
        "id": 127566338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528146316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah.</p>",
        "id": 127566850,
        "sender_full_name": "davidtwco",
        "timestamp": 1528147078
    },
    {
        "content": "<p>sorry, I left shortly before you wrote that :) back online for a bit</p>",
        "id": 127569783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528151113
    },
    {
        "content": "<p>not sure if you got a chance to take a look at that branch :)</p>",
        "id": 127569787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528151123
    },
    {
        "content": "<p>I had a glance through it, made some sense.</p>",
        "id": 127569794,
        "sender_full_name": "davidtwco",
        "timestamp": 1528151153
    },
    {
        "content": "<p>I tweaked the \"interesting\" criteria and now I think the set of edges is looking pretty good.</p>",
        "id": 127592265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528193599
    },
    {
        "content": "<p>we still have to do a bit more refinement but it's basically pulling out the interesting spots...</p>",
        "id": 127592271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528193635
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/30729457b235586e31f5a975e3338ed3\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/30729457b235586e31f5a975e3338ed3\">you can see the SVG here</a></p>",
        "id": 127601604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528206929
    },
    {
        "content": "<p>Nice - is there anything I can be doing related to this? This seems to be blocking my looking into #46983 (which is the topic this branched off from).</p>",
        "id": 127601986,
        "sender_full_name": "davidtwco",
        "timestamp": 1528207368
    },
    {
        "content": "<p>a good question :) I would definitely like to collaborate. i'm not sure the best way to set it up. Roughly what I had in mind is this:</p>\n<p>1. the rough categorization of interesting vs boring is good, but to do better, we need to inspect the actions a bit more deeply. I think it's probably best to do this lazilly — arguably, the interesting vs boring categorization could wait entirely and be done lazilly, actually, but I suspect it's useful to have the ability to thread a bit of information down this way for later.<br>\n    - in this case, the \"interesting\" cases boil down to <code>Box::new</code> and the various casts<br>\n    - I think we can rule out <code>Box::new</code> as 'interesting' because it has a signature that is just taking the lifetime it gets as argument and propagating it to the return value; this is not something we have to highlight for the user<br>\n2. so basically I imagine a \"general\" output that kind of shows which regions have to be equal to <code>'static</code> (we hsould discuss how to do that) and then highlights the interesting points in the MIR to show <em>why</em></p>",
        "id": 127603903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209588
    },
    {
        "content": "<p>one thought I have is that we could still do a pair session maybe to go over this live, but I'm happy to try async</p>",
        "id": 127603943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528209605
    },
    {
        "content": "<p>I'm happy to have a live session to look into it if we can work out a time.</p>",
        "id": 127604683,
        "sender_full_name": "davidtwco",
        "timestamp": 1528210513
    },
    {
        "content": "<p>Otherwise I just need pointed at something to work on and perhaps some pointers on what it should do/a starting point.</p>",
        "id": 127604695,
        "sender_full_name": "davidtwco",
        "timestamp": 1528210542
    },
    {
        "content": "<blockquote>\n<p>I'm happy to have a live session to look into it if we can work out a time.</p>\n</blockquote>\n<p>yeah that's the tricky part :)</p>",
        "id": 127604769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210627
    },
    {
        "content": "<p>I'm actually free-ish this afternoon</p>",
        "id": 127604777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210644
    },
    {
        "content": "<p>(my time zone)</p>",
        "id": 127604779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210647
    },
    {
        "content": "<p>not sure what time you become available</p>",
        "id": 127604784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528210652
    },
    {
        "content": "<p>Around the same as yesterday, two-to-three hours from now, roughly (and onwards from that).</p>",
        "id": 127604997,
        "sender_full_name": "davidtwco",
        "timestamp": 1528210915
    },
    {
        "content": "<p>great, ping me</p>",
        "id": 127607209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528213742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around just now.</p>",
        "id": 127612935,
        "sender_full_name": "davidtwco",
        "timestamp": 1528221232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> argh I missed this! are you around after the meeting or is that too crazy late for you</p>",
        "id": 127618357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528227611
    },
    {
        "content": "<p>I'm still around.</p>",
        "id": 127618367,
        "sender_full_name": "davidtwco",
        "timestamp": 1528227622
    },
    {
        "content": "<p>ok, I am free after this</p>",
        "id": 127618377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528227629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> want to chat a bit then ?</p>",
        "id": 127620951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528230571
    },
    {
        "content": "<p>Sure.</p>",
        "id": 127620958,
        "sender_full_name": "davidtwco",
        "timestamp": 1528230585
    },
    {
        "content": "<p><a href=\"https://appear.in/i-heart-rust\" target=\"_blank\" title=\"https://appear.in/i-heart-rust\">https://appear.in/i-heart-rust</a></p>",
        "id": 127621031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528230614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that was helpful, I'll start looking into that, could you gist the file with the rough outline that you worked together?</p>",
        "id": 127623058,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233200
    },
    {
        "content": "<p>yep!</p>",
        "id": 127623064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233230
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/257ec66494a1fb2b0d5cde44ad24f1ce\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/257ec66494a1fb2b0d5cde44ad24f1ce\">https://gist.github.com/nikomatsakis/257ec66494a1fb2b0d5cde44ad24f1ce</a></p>",
        "id": 127623108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233252
    },
    {
        "content": "<p>what is the issue # again... <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> what was the issue that covered \"nice region errors\"?</p>",
        "id": 127623118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233271
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/46983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46983\">https://github.com/rust-lang/rust/issues/46983</a> ?</p>",
        "id": 127623129,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233292
    },
    {
        "content": "<p>You mentioned <code>nice_region_error</code>related code in the original mentoring instructions.</p>",
        "id": 127623151,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233334
    },
    {
        "content": "<p>that seems like a decent one to use I guess</p>",
        "id": 127623208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233394
    },
    {
        "content": "<p>I think there are a bunch of issues that kind of cover this point</p>",
        "id": 127623212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233399
    },
    {
        "content": "<p>ok, i'm encoding the video now</p>",
        "id": 127623229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233445
    },
    {
        "content": "<p>that...takes a while</p>",
        "id": 127623231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233448
    },
    {
        "content": "<p>~30 minutes claims the encoder :)</p>",
        "id": 127623234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233457
    },
    {
        "content": "<p>I doubt I'll properly dig in till tomorrow so it'll be done no doubt for me to refresh my memory with then.</p>",
        "id": 127623288,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233497
    },
    {
        "content": "<p>+1</p>",
        "id": 127623365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233605
    },
    {
        "content": "<p>I realized I never posted the other one we made</p>",
        "id": 127623371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233609
    },
    {
        "content": "<p>forgot even what we talked about</p>",
        "id": 127623374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233614
    },
    {
        "content": "<p>I'll have to see if I still have the video file somewhere :)</p>",
        "id": 127623382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233627
    },
    {
        "content": "<p>I think we were looking at that function that was slow, ended up leading to the DFS change.</p>",
        "id": 127623420,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233721
    },
    {
        "content": "<p>I realize that \"that function that was slow\" doesn't really narrow it down.</p>",
        "id": 127623467,
        "sender_full_name": "davidtwco",
        "timestamp": 1528233737
    },
    {
        "content": "<p>oh yes I recall</p>",
        "id": 127623479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233776
    },
    {
        "content": "<p>well, that worked</p>",
        "id": 127623486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233784
    },
    {
        "content": "<p>:)</p>",
        "id": 127623487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528233786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> a question regarding our previous discussion: </p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1008-L1019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1008-L1019\">This is where</a> the error we're seeing at present is reported. I imagine for the purposes of testing that I'll make an error at this point that has all the labels of interesting spots and so on. </p>\n<p>I also think I understand roughly what the function that produces a <code>ConstraintCategory</code> will look like and similar with the ordering of those. </p>\n<p>What I've not quite been able to figure out is how to glue all that together - am I right in thinking that I'd want to look at all the constraints that are relevant to the given function, consider only those that are interesting (based on your branch from earlier in the week) and for each of those find the <code>ConstraintCategory</code> - which will then be sorted and their spans labelled?</p>",
        "id": 127705239,
        "sender_full_name": "davidtwco",
        "timestamp": 1528362350
    },
    {
        "content": "<p>PS, first things first: you ought to move that code into its own module</p>",
        "id": 127705292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362383
    },
    {
        "content": "<p>traditionally called <code>error_reporting.rs</code></p>",
        "id": 127705298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362396
    },
    {
        "content": "<p>Cool, I can do that.</p>",
        "id": 127705306,
        "sender_full_name": "davidtwco",
        "timestamp": 1528362414
    },
    {
        "content": "<p>I think what you want to do is probably similar to what <code>blame_span</code> does</p>",
        "id": 127705317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362430
    },
    {
        "content": "<p>basically, to do a depth-first search over the graph of constraints</p>",
        "id": 127705322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362441
    },
    {
        "content": "<p>er, <code>dependencies</code> is the one that actually <a href=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1058-L1065\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc_mir/borrow_check/nll/region_infer/mod.rs#L1058-L1065\">does the search</a> right now</p>",
        "id": 127705339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362479
    },
    {
        "content": "<p>but basically I imagined (a) getting a <em>path</em> through the graph</p>",
        "id": 127705385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362493
    },
    {
        "content": "<p>I suppose there could be multiple,</p>",
        "id": 127705389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362497
    },
    {
        "content": "<p>we can arbitrarily take the shortest one to make our lives easier...</p>",
        "id": 127705395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362508
    },
    {
        "content": "<p>well, <code>dependencies</code> is doing a kind of BFS</p>",
        "id": 127705424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362556
    },
    {
        "content": "<p>or a really inefficient version of a BFS ;)</p>",
        "id": 127705433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362575
    },
    {
        "content": "<p>but anyway I had imagined getting some kind of path (maybe a vec of paths, but let's start with one)</p>",
        "id": 127705440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362593
    },
    {
        "content": "<p>and then converting each edge on that path to a category</p>",
        "id": 127705446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362602
    },
    {
        "content": "<p>(for this purpose, you can ignore the uninterested ones, yes)</p>",
        "id": 127705492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362608
    },
    {
        "content": "<p>thus giving us a reduced vector of \"categories\"</p>",
        "id": 127705499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362619
    },
    {
        "content": "<p>so we go from <code>Vec&lt;ConstraintIndex&gt;</code> (the full path) to <code>Vec&lt;Category&gt;</code> (a shorter list of constraints)</p>",
        "id": 127705505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362632
    },
    {
        "content": "<p>then we can (a) find what looks like the best entry to call the \"primary\" span, and (b) issues labels for the rest</p>",
        "id": 127705519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362656
    },
    {
        "content": "<p>Alright, that makes sense.</p>",
        "id": 127705529,
        "sender_full_name": "davidtwco",
        "timestamp": 1528362670
    },
    {
        "content": "<p>actually a BFS (a true BFS) probably <em>does</em> make sense though</p>",
        "id": 127705604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362747
    },
    {
        "content": "<p>in the sense that it will find you a shortest path to start</p>",
        "id": 127705609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362754
    },
    {
        "content": "<p>otoh it's more of a pain to extract the path...</p>",
        "id": 127705636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362795
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 127705637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362801
    },
    {
        "content": "<p>the graph isn't that big so it shouldn't really matter that much</p>",
        "id": 127705642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362809
    },
    {
        "content": "<p>and it's only in the case of error</p>",
        "id": 127705646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362814
    },
    {
        "content": "<blockquote>\n<p>the graph isn't that big so it shouldn't really matter that much</p>\n</blockquote>\n<p>\"famous last words\" if ever I heard them</p>",
        "id": 127705662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362834
    },
    {
        "content": "<p><em>anyway</em> we can tweak that part later... =)</p>",
        "id": 127705715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528362859
    },
    {
        "content": "<p>did you get a chance to look at this, <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span>? (just curious)</p>",
        "id": 127771886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528464457
    },
    {
        "content": "<p>I've only had a chance to dig around the existing code a little - intend to start on it tonight.</p>",
        "id": 127771972,
        "sender_full_name": "davidtwco",
        "timestamp": 1528464557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not had as much time to work on this as I'd have liked - but I've got <a href=\"https://github.com/davidtwco/rust/tree/nll-dyn-trait-underscore-error-improvements\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/nll-dyn-trait-underscore-error-improvements\">the following branch so far</a> - it has the BFS through the graph to find the paths and it then filters out the boring constraints. I still need to categorize and sort but I am not anticipating that being too bad.</p>",
        "id": 127922525,
        "sender_full_name": "davidtwco",
        "timestamp": 1528755010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> cool! I'll take a look</p>",
        "id": 127927569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528763217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Made some more progress - now doing the categorization (albeit, poorly), sorting and emitting an error with labels. It looks pretty similar to what we drafted in the gist during our chat with lots of labelled points like \"Cast\" and so on.</p>\n<p>The categorization however, is pretty poor, I'll need some guidance there on what categories should exist and how to work them out - right now I've got three and when I categorize my constraints I get \"Cast\" for each one..</p>",
        "id": 127970919,
        "sender_full_name": "davidtwco",
        "timestamp": 1528832707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Would you prefer I open a WIP PR with the above?</p>",
        "id": 128011311,
        "sender_full_name": "davidtwco",
        "timestamp": 1528900139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> yeah, that'd be great</p>",
        "id": 128011602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528900491
    },
    {
        "content": "<p>this week is tough because of Moz All Hands; I skimmed the branch but...</p>",
        "id": 128011679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528900596
    },
    {
        "content": "<p>That's fine, forgot it was All Hands week. <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 128013222,
        "sender_full_name": "davidtwco",
        "timestamp": 1528902522
    },
    {
        "content": "<p>Submitted it as <a href=\"https://github.com/rust-lang/rust/pull/51536\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51536\">#51536</a> for next week.</p>",
        "id": 128013817,
        "sender_full_name": "davidtwco",
        "timestamp": 1528903235
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Made some more progress - now doing the categorization (albeit, poorly), sorting and emitting an error with labels. It looks pretty similar to what we drafted in the gist during our chat with lots of labelled points like \"Cast\" and so on.</p>\n<p>The categorization however, is pretty poor, I'll need some guidance there on what categories should exist and how to work them out - right now I've got three and when I categorize my constraints I get \"Cast\" for each one..</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Whenever you've got some time, could you take a look at this?</p>",
        "id": 128248204,
        "sender_full_name": "davidtwco",
        "timestamp": 1529330747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> definitely, sorry about last week</p>",
        "id": 128251373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529334175
    },
    {
        "content": "<p>No worries.</p>",
        "id": 128251409,
        "sender_full_name": "davidtwco",
        "timestamp": 1529334237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> hey, I'm talking about your branch with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> now — did we have some place where we were taking notes?</p>",
        "id": 128318882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529432826
    },
    {
        "content": "<p>I can't remember :)</p>",
        "id": 128318886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529432829
    },
    {
        "content": "<p>I don't think so - other than the text file that we used when pair programming. At least, not that I recall.</p>",
        "id": 128318897,
        "sender_full_name": "davidtwco",
        "timestamp": 1529432855
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 128319077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529433021
    },
    {
        "content": "<p>I found this, which was my sketch of \"vaguely\" the error I hoped we could produce</p>\n<div class=\"codehilite\"><pre><span></span>error[E0495]: this data would have to have static lifetime\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                  ---- fully elaborated type is `&amp;&#39;1 [T]`\n18 |       Box::new(items.iter())\n   |       ^^^^^^^^^^^^^^^^^^^^^^ casting this value to a `dyn Iterator` requires `&#39;1` to outlive `&#39;static`\n19 |  }\n</pre></div>",
        "id": 128319085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529433037
    },
    {
        "content": "<p>Yeah. Right now, all I've got is the traversal of the constraints where we find a path, then filtering out interesting and boring constraints based on your work, then a very poor attempt at categorization, then sorting, then labelling. Like this example from the gist, but a bit worse:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0495]: this data would have to have static lifetime\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                  ---- SourceArgument\n18 |       Box::new(items.iter())\n   |       ^^^^^^^^^^^^^^^^^^^^^^ InterestingSpot(Cast)\n   |       |\n   |       call to box\n19 | }\n</pre></div>",
        "id": 128319413,
        "sender_full_name": "davidtwco",
        "timestamp": 1529433418
    },
    {
        "content": "<p>let me read ...</p>",
        "id": 128319546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529433583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ping?</p>",
        "id": 128378148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529521923
    },
    {
        "content": "<p>I <a href=\"https://github.com/rust-lang/rust/pull/51536#pullrequestreview-130109766\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51536#pullrequestreview-130109766\">left a review here</a>, the TL;DR being that it looks good ...</p>",
        "id": 128378964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529523119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pong</p>",
        "id": 128379226,
        "sender_full_name": "davidtwco",
        "timestamp": 1529523461
    },
    {
        "content": "<p>hey, just wanted to talk about next steps</p>",
        "id": 128379254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529523482
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 128379292,
        "sender_full_name": "davidtwco",
        "timestamp": 1529523506
    },
    {
        "content": "<p>Just taking a look at the review.</p>",
        "id": 128379315,
        "sender_full_name": "davidtwco",
        "timestamp": 1529523561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> addressed the review comments and rebased that branch.</p>",
        "id": 128386771,
        "sender_full_name": "davidtwco",
        "timestamp": 1529532799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> great! However, I'm still confused, does it not affect the output of any tests yet?</p>",
        "id": 128425422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529597276
    },
    {
        "content": "<p>What do you think we need to do to land it?</p>",
        "id": 128425423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529597280
    },
    {
        "content": "<p>I'm trying to decide what's a good MVP</p>",
        "id": 128425464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529597287
    },
    {
        "content": "<p>I've modified the it to show spans and their categories for whatever tests that part of the code normally handles.</p>",
        "id": 128425477,
        "sender_full_name": "davidtwco",
        "timestamp": 1529597323
    },
    {
        "content": "<p>That's useless as an actual diagnostic but it is useful to debug the categorization.</p>",
        "id": 128425497,
        "sender_full_name": "davidtwco",
        "timestamp": 1529597364
    },
    {
        "content": "<p>hmm ok let me read your latest commits more carefully</p>",
        "id": 128425501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529597382
    },
    {
        "content": "<p>I'd like to get some feedback on the categorization - I think it's pretty poor so far, but the skeleton is there. You can scroll through the Travis output to see what it labels some spans as in tests that it affects.</p>",
        "id": 128425587,
        "sender_full_name": "davidtwco",
        "timestamp": 1529597453
    },
    {
        "content": "<p>After that we need to work out how we want to use those categories in making diagnostics.</p>",
        "id": 128425599,
        "sender_full_name": "davidtwco",
        "timestamp": 1529597471
    },
    {
        "content": "<p>ok :)</p>",
        "id": 128425695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529597585
    },
    {
        "content": "<p>After our initial chat to plan the work, I think we decided that our first steps were just going to be categorization of interesting constraints, so I've not thought much past that.</p>",
        "id": 128425704,
        "sender_full_name": "davidtwco",
        "timestamp": 1529597598
    },
    {
        "content": "<blockquote>\n<p>After our initial chat to plan the work, I think we decided that our first steps were just going to be categorization of interesting constraints, so I've not thought much past that.</p>\n</blockquote>\n<p>yes</p>",
        "id": 128426477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529598620
    },
    {
        "content": "<p>ok so let me browse the travis errors</p>",
        "id": 128426482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529598627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Any chance you could take a look at this before the weekend so I've got enough to keep me busy? No worries if you can't.</p>",
        "id": 128477158,
        "sender_full_name": "davidtwco",
        "timestamp": 1529679955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping when you've got some time to chat about next steps for this.</p>",
        "id": 128593057,
        "sender_full_name": "davidtwco",
        "timestamp": 1529921960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> let's find a time</p>",
        "id": 128615043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951138
    },
    {
        "content": "<p>I'm around now-ish and should be around this week</p>",
        "id": 128615047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951152
    },
    {
        "content": "<p>it'd prob be helpful for me to schedule a time for us to chat (on zulip is prob fine) just to help me focus :)</p>",
        "id": 128615092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm around just now.</p>",
        "id": 128615731,
        "sender_full_name": "davidtwco",
        "timestamp": 1529951902
    },
    {
        "content": "<p>ah, cool</p>",
        "id": 128615735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951907
    },
    {
        "content": "<p>ok so I guess the question is to figure out the next steps</p>",
        "id": 128615748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951942
    },
    {
        "content": "<p>I am very interesting in getting this to a MVP we can land</p>",
        "id": 128615756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951948
    },
    {
        "content": "<p>to some extent</p>",
        "id": 128615758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951955
    },
    {
        "content": "<p>the current messages are so bad</p>",
        "id": 128615761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951959
    },
    {
        "content": "<p>that it seems like we could land just about anything ;)</p>",
        "id": 128615763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951963
    },
    {
        "content": "<p>that said, I should get a local build going</p>",
        "id": 128615774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951992
    },
    {
        "content": "<p>it's hard to get a feeling for what's happening from the travis output</p>",
        "id": 128615778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529951997
    },
    {
        "content": "<p>Right now I think the categorization needs improvement - but I'm not sure how to go about doing that (what categories we need, what we consider to be in what category). And then I'm not sure how we plan to use these categories in creating diagnostics.</p>",
        "id": 128615855,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952070
    },
    {
        "content": "<p>ok so</p>",
        "id": 128615908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952126
    },
    {
        "content": "<p>it seems like there are a few things we could work on, yeah</p>",
        "id": 128615909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952142
    },
    {
        "content": "<p>one is improving categories</p>",
        "id": 128615911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952148
    },
    {
        "content": "<p>the other is the labels</p>",
        "id": 128615912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952151
    },
    {
        "content": "<p>my inclination is</p>",
        "id": 128615913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952154
    },
    {
        "content": "<p>that we should focus less on <em>narrowing down</em> the relevant points</p>",
        "id": 128615915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952160
    },
    {
        "content": "<p>and more on how to format them</p>",
        "id": 128615918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952163
    },
    {
        "content": "<p>i.e., we could land something first that adds too many labels</p>",
        "id": 128615923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952170
    },
    {
        "content": "<p>and then work on paring them down</p>",
        "id": 128615925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952174
    },
    {
        "content": "<p>I've got a local build of your branch going now, though it'll be a bit because this partcular directory has to rebuild LLVM</p>",
        "id": 128615935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952199
    },
    {
        "content": "<p>let me review again what you had</p>",
        "id": 128616016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gi\">+/// Constraints that are considered interesting can be categorized to</span>\n<span class=\"gi\">+/// determine why they are interesting.</span>\n<span class=\"gi\">+#[derive(Debug, Eq, PartialEq, PartialOrd, Ord)]</span>\n<span class=\"gi\">+enum ConstraintCategory {</span>\n<span class=\"gi\">+    Assignment,</span>\n<span class=\"gi\">+    Cast,</span>\n<span class=\"gi\">+    CallArgument,</span>\n<span class=\"gi\">+    Other,</span>\n<span class=\"gi\">+}</span>\n</pre></div>",
        "id": 128616023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952348
    },
    {
        "content": "<p>I figured that there could probably be more categories.</p>",
        "id": 128616070,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952381
    },
    {
        "content": "<p>I wonder if the \"interesting\" vs \"not interersting\" bit is really worth it</p>",
        "id": 128616071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952389
    },
    {
        "content": "<p>versus rolling everything into categories</p>",
        "id": 128616072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952395
    },
    {
        "content": "<p>it feels like two ways of getting at the same thing</p>",
        "id": 128616077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952401
    },
    {
        "content": "<p>in partcular, of those, I am nervous about \"assignment\"</p>",
        "id": 128616088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952426
    },
    {
        "content": "<p>Well, wasn't that so that we didn't label a span for a compiler-inserted temporary? My understanding was that was what was mostly being filtered out as boring.</p>",
        "id": 128616091,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952434
    },
    {
        "content": "<p>because it seems to me that many assignments will be assignments into temporaries</p>",
        "id": 128616093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952437
    },
    {
        "content": "<p>that the user doesn't think of as assignments</p>",
        "id": 128616097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952444
    },
    {
        "content": "<blockquote>\n<p>Well, wasn't that so that we didn't label a span for a compiler-inserted temporary? My understanding was that was what was mostly being filtered out as boring.</p>\n</blockquote>\n<p>well, my point is that we could do that filtering by mapping to a <code>None</code> category</p>",
        "id": 128616101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952463
    },
    {
        "content": "<p>which I guess you don't have here</p>",
        "id": 128616105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952467
    },
    {
        "content": "<p>or to <code>Other</code></p>",
        "id": 128616108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952470
    },
    {
        "content": "<p>or <code>Boring</code> or something =)</p>",
        "id": 128616112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952478
    },
    {
        "content": "<p>Ah, I see, yeah, we could do that too.</p>",
        "id": 128616154,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952488
    },
    {
        "content": "<p>we should also probably identify assignments to <code>_0</code>, which is the return slot</p>",
        "id": 128616160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952496
    },
    {
        "content": "<p>I think for a first draft we could create the following categories:</p>\n<ul>\n<li>call</li>\n<li>returned (assignment into <code>_0</code>)</li>\n<li>assignment to user variable</li>\n<li>other</li>\n</ul>",
        "id": 128616198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952577
    },
    {
        "content": "<p>which is basically what you have</p>",
        "id": 128616201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952584
    },
    {
        "content": "<p>then the interesting thing is to figure out how to print them out</p>",
        "id": 128616204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952589
    },
    {
        "content": "<p>er, cast too is probably good :)</p>",
        "id": 128616206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952600
    },
    {
        "content": "<p>I think we do want to distinguish some kind of \"miscellaneous\" category from the \"boring\" category</p>",
        "id": 128616264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952614
    },
    {
        "content": "<p>Alright, I can do that.</p>",
        "id": 128616271,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952638
    },
    {
        "content": "<p>basically, each of these will become an underline, and I think there is probably some set of things that seem important but we can use a kind of generic label about \"data flow\" or something for now</p>",
        "id": 128616272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952649
    },
    {
        "content": "<p>casts may fall in this category to start</p>",
        "id": 128616273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952655
    },
    {
        "content": "<p>since there are many kinds of casts</p>",
        "id": 128616283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952666
    },
    {
        "content": "<p>and really we will want to separate them out</p>",
        "id": 128616285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952669
    },
    {
        "content": "<p>so coming back to the output I was vaguely hoping for:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0495]: this data would have to have static lifetime\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                  ---- fully elaborated type is `&amp;&#39;1 [T]`\n18 |       Box::new(items.iter())\n   |       ^^^^^^^^^^^^^^^^^^^^^^ casting this value to a `dyn Iterator` requires `&#39;1` to outlive `&#39;static`\n19 |  }\n</pre></div>",
        "id": 128616295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529952715
    },
    {
        "content": "<p>Yeah, I wasn't sure how I'd transform the categorized constraints into something like that.</p>",
        "id": 128616344,
        "sender_full_name": "davidtwco",
        "timestamp": 1529952743
    },
    {
        "content": "<p>right so</p>",
        "id": 128616588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953073
    },
    {
        "content": "<p>there are a few parts</p>",
        "id": 128616591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953079
    },
    {
        "content": "<p>the \"this data would have to have static lifetime\" and \"fully elaborated type\" part</p>",
        "id": 128616637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953093
    },
    {
        "content": "<p>come from the original error</p>",
        "id": 128616642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953097
    },
    {
        "content": "<p>this part \"casting this value to a <code>dyn Iterator</code> requires <code>'1</code> to outlive <code>'static</code>\" comes from the constraint</p>",
        "id": 128616649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953110
    },
    {
        "content": "<p>( this is partly why i'd like to land something, as I think we could divide up these bits )</p>",
        "id": 128616686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953174
    },
    {
        "content": "<p>let's start with a simpler error which is closer to what we have...</p>",
        "id": 128616690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953182
    },
    {
        "content": "<p>I imagine something like this</p>",
        "id": 128616698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0495]: free region `` does not outlive free region `&#39;static`\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                  ---- fully elaborated type is `&amp;&#39;1 [T]`\n18 |       Box::new(items.iter())\n   |       ^^^^^^^^^^^^^^^^^^^^^^ cast requires `` to outlive `&#39;static`\n19 |  }\n</pre></div>",
        "id": 128616893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953370
    },
    {
        "content": "<p>this doesn't improve some of the core issues</p>",
        "id": 128616908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953387
    },
    {
        "content": "<p>but basically for each MIR statement with a \"category\"</p>",
        "id": 128616920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953405
    },
    {
        "content": "<p>I can take a stab at that, it seems doable. Understanding which parts of the diagnostic comes from what helps.</p>",
        "id": 128616926,
        "sender_full_name": "davidtwco",
        "timestamp": 1529953412
    },
    {
        "content": "<p>we would summarize the category with something like \"foo requires SUB to outlive SUP\"</p>",
        "id": 128616932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953416
    },
    {
        "content": "<p>where foo depends on the category</p>",
        "id": 128616936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953427
    },
    {
        "content": "<p>then we can separately attack how SUB and SUP are displayed (e.g., the empty string aspect :)</p>",
        "id": 128616983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953445
    },
    {
        "content": "<p>and also improving the categories and the wording thereof</p>",
        "id": 128616988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529953454
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 128617097,
        "sender_full_name": "davidtwco",
        "timestamp": 1529953568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could you point me in the right direction with how I'd work out the span in your elaborated type label from the example? - can't figure out how to find that, it isn't one of the categorized spans.</p>\n<div class=\"codehilite\"><pre><span></span>error[E0495]: example\n  --&gt; dyn-trait-underscore.rs:18:20\n   |\n16 |   fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |                  ---- this span right here\n18 |       Box::new(items.iter())\n   |\n19 |  }\n</pre></div>",
        "id": 128681484,
        "sender_full_name": "davidtwco",
        "timestamp": 1530048836
    },
    {
        "content": "<p>ah, well, that's a tricky one</p>",
        "id": 128681622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530048973
    },
    {
        "content": "<p>I don't think I expected you to have that span for the first commit :)</p>",
        "id": 128681627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530048980
    },
    {
        "content": "<p>however, the way I would get it is to:</p>\n<ul>\n<li>search the list of argument types for the one that contains the region in question<ul>\n<li>I think in practice this doesn't actually have to be unique, so let's say \"the first one\" for now</li>\n</ul>\n</li>\n<li>once we know the index of the argument, look at the HIR and extract the span for that argument's type</li>\n</ul>",
        "id": 128681662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530049042
    },
    {
        "content": "<p>I can point you at some similar code that does that</p>",
        "id": 128681664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530049048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  So far I've added the \"Boring\" category and the \"Return\" category that you suggested adding yesterday. And I've got the following error message:</p>\n<div class=\"codehilite\"><pre><span></span>error: Cast requires that data must outlive free region `&#39;static`\n  --&gt; src/test/ui/underscore-lifetime/dyn-trait-underscore.rs:18:5\n   |\n18 |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n   |     ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n</pre></div>\n\n\n<p>I'd ideally like to have something a little better for the PR (it doesn't quite match your \"lets start with something like this\" suggestion from yesterday), but I guess we could try land that (if it's good enough) so we can get more people involved in the tasks that span out from this one. I can always branch off of this and work on a follow-up PR of improvements so similar code would be helpful.</p>",
        "id": 128682405,
        "sender_full_name": "davidtwco",
        "timestamp": 1530049940
    },
    {
        "content": "<p>where did the \"cast requires\" come from?</p>",
        "id": 128682410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530049966
    },
    {
        "content": "<p>That's the category that the constraint had.</p>",
        "id": 128682411,
        "sender_full_name": "davidtwco",
        "timestamp": 1530049981
    },
    {
        "content": "<p>and in this csae there is only 1? (in general there might be multiple, right?)</p>",
        "id": 128682418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530049993
    },
    {
        "content": "<p>There are multiple, this is the one that sorted first - the others point to roughly the same span though.</p>",
        "id": 128682426,
        "sender_full_name": "davidtwco",
        "timestamp": 1530050022
    },
    {
        "content": "<p>Well, there are multiple constraint paths, this is the shortest path and the constraint category that sorted lowest/highest/whichever-it-is in that path.</p>",
        "id": 128682474,
        "sender_full_name": "davidtwco",
        "timestamp": 1530050050
    },
    {
        "content": "<p>It finds all the constraint paths from the region we're reporting an error from, it takes the shortest of those paths, categorizes the constraints (edges) and then sorts them by the category (<code>Ord</code> on <code>ConstraintCategory</code>) and then picks the first one as the primary span.</p>",
        "id": 128682533,
        "sender_full_name": "davidtwco",
        "timestamp": 1530050155
    },
    {
        "content": "<p>ok well regardless it seems like an improvement</p>",
        "id": 128682690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050323
    },
    {
        "content": "<p>and that probably makes sense</p>",
        "id": 128682698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050338
    },
    {
        "content": "<p>as a means of deciding what to \"highlight\" in the error</p>",
        "id": 128682703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050344
    },
    {
        "content": "<p>It's what past-you wanted.</p>",
        "id": 128682710,
        "sender_full_name": "davidtwco",
        "timestamp": 1530050354
    },
    {
        "content": "<p>eventually we might do something else but basically having <em>some</em> heuristic that picks a category</p>",
        "id": 128682715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050363
    },
    {
        "content": "<p>ah, past-me was smart ;)</p>",
        "id": 128682721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050373
    },
    {
        "content": "<p>or at least -- shocking! -- I seem to agree with past-me</p>",
        "id": 128682742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530050384
    },
    {
        "content": "<p>I'll check what tests it affects and then push the changes and see if I can't make Travis like this PR.</p>",
        "id": 128682935,
        "sender_full_name": "davidtwco",
        "timestamp": 1530050464
    },
    {
        "content": "<p>Pushed the above.</p>",
        "id": 128684306,
        "sender_full_name": "davidtwco",
        "timestamp": 1530052339
    },
    {
        "content": "<p>you around <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ?</p>",
        "id": 128734500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah</p>",
        "id": 128734503,
        "sender_full_name": "davidtwco",
        "timestamp": 1530129084
    },
    {
        "content": "<p>I am reviewing your PR</p>",
        "id": 128734506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129090
    },
    {
        "content": "<p>one very minor nit:</p>",
        "id": 128734509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129093
    },
    {
        "content": "<p>compiler error messages begin with a lower-case letter :)</p>",
        "id": 128734514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129097
    },
    {
        "content": "<p>think you can quickly patch that?</p>",
        "id": 128734517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530129102
    },
    {
        "content": "<p>Yeah, sure thing.</p>",
        "id": 128734520,
        "sender_full_name": "davidtwco",
        "timestamp": 1530129108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Should have just fixed that.</p>",
        "id": 128735886,
        "sender_full_name": "davidtwco",
        "timestamp": 1530130727
    },
    {
        "content": "<p>cool</p>",
        "id": 128735891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530130735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this branch has diverged so much from the current master.</p>",
        "id": 128786213,
        "sender_full_name": "davidtwco",
        "timestamp": 1530209973
    },
    {
        "content": "<p>Particularly the interesting/boring categorization that I built on.</p>",
        "id": 128786221,
        "sender_full_name": "davidtwco",
        "timestamp": 1530209989
    },
    {
        "content": "<p>Trying to tie these back together is painful.</p>",
        "id": 128786273,
        "sender_full_name": "davidtwco",
        "timestamp": 1530210010
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 128786280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530210023
    },
    {
        "content": "<p>/me tries to remember if he broke that</p>",
        "id": 128786282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530210027
    },
    {
        "content": "<p>I can try to rebase that part if you want</p>",
        "id": 128786286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530210032
    },
    {
        "content": "<p>I'd appreciate that.</p>",
        "id": 128786289,
        "sender_full_name": "davidtwco",
        "timestamp": 1530210039
    },
    {
        "content": "<p>working on it</p>",
        "id": 128786448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530210306
    },
    {
        "content": "<p>heh yeah this is nasty</p>",
        "id": 128787663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530211741
    },
    {
        "content": "<p>I got about three commits in but then it just got too different.</p>",
        "id": 128787681,
        "sender_full_name": "davidtwco",
        "timestamp": 1530211767
    },
    {
        "content": "<p>I have a rebased version that builds</p>",
        "id": 128788015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530212128
    },
    {
        "content": "<p>I am going to run tests and see what it does :)</p>",
        "id": 128788018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530212132
    },
    {
        "content": "<p>hmm something looks broken</p>\n<div class=\"codehilite\"><pre><span></span>test [ui] ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs has been running for over 60 seconds\ntest [ui] ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs has been running for over 60 seconds\ntest [ui] ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs has been running for over 60 seconds\ntest [ui] ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs has been running for over 60 seconds\ntest [ui] ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.rs has been running for over 60 seconds\ntest [ui] ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.rs has been running for over 60 seconds\ntest [ui] ui/nll/issue-50716.rs has been running for over 60 seconds\ntest [ui] ui/nll/ty-outlives/projection-one-region-closure.rs has been running for over 60 seconds\ntest [ui] ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs has been running for over 60 seconds\ntest [ui] ui/nll/ty-outlives/projection-one-region-trait-bound-closure.rs has been running for over 60 seconds\n</pre></div>",
        "id": 128788946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213196
    },
    {
        "content": "<p>I'm guessing this is going into an infinite loop</p>",
        "id": 128788951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213203
    },
    {
        "content": "<p><span class=\"emoji emoji-2639\" title=\"white frowning face\">:white_frowning_face:</span></p>",
        "id": 128789013,
        "sender_full_name": "davidtwco",
        "timestamp": 1530213267
    },
    {
        "content": "<p>investingating...</p>",
        "id": 128789159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530213483
    },
    {
        "content": "<p>seems to be <code>find_constraint_paths_from_region</code></p>",
        "id": 128791660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216769
    },
    {
        "content": "<p>Oh, that's strange.</p>",
        "id": 128791668,
        "sender_full_name": "davidtwco",
        "timestamp": 1530216794
    },
    {
        "content": "<p>I thought it checked to avoid re-visiting regions?</p>",
        "id": 128791687,
        "sender_full_name": "davidtwco",
        "timestamp": 1530216814
    },
    {
        "content": "<p>sample from debug output</p>",
        "id": 128791689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\nDEBUG 2018-06-28T20:08:56Z: rustc_mir::borrow_check::nll::region_infer::error_reporting: find_constraint_paths_from_region: index=ConstraintIndex(30) region=Some(&#39;_#31r)\n</pre></div>",
        "id": 128791694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216819
    },
    {
        "content": "<p>must be this loop</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;find_constraint_paths_from_region: index={:?} region={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128791748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216853
    },
    {
        "content": "<p>I'm not really clear on why this should've changed</p>",
        "id": 128791764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216878
    },
    {
        "content": "<p>but we might be generating slightly different constraints than we did before</p>",
        "id": 128791775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216886
    },
    {
        "content": "<p>want me to push the rebase, and you can debug?</p>",
        "id": 128791778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216892
    },
    {
        "content": "<p>/me is doing that</p>",
        "id": 128791784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216902
    },
    {
        "content": "<p>Yeah, no problem.</p>",
        "id": 128791798,
        "sender_full_name": "davidtwco",
        "timestamp": 1530216913
    },
    {
        "content": "<p>I'm realizing how little I understand that code ;)</p>",
        "id": 128791804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216919
    },
    {
        "content": "<p>I mean I understand it at a high level</p>",
        "id": 128791808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216923
    },
    {
        "content": "<p>:)</p>",
        "id": 128791810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530216925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> how did this go? did you ever find the problem?</p>",
        "id": 128845123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530299454
    },
    {
        "content": "<p>I didn't get a chance yesterday. Building it now.</p>",
        "id": 128845330,
        "sender_full_name": "davidtwco",
        "timestamp": 1530299682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the flag for graphviz output?</p>",
        "id": 128849001,
        "sender_full_name": "davidtwco",
        "timestamp": 1530304315
    },
    {
        "content": "<p>Forgotten it.</p>",
        "id": 128849005,
        "sender_full_name": "davidtwco",
        "timestamp": 1530304319
    },
    {
        "content": "<p>-Zdump_mir_graphviz ?</p>",
        "id": 128849381,
        "sender_full_name": "lqd",
        "timestamp": 1530304738
    },
    {
        "content": "<p>I'd been doing <code>-Z dump-mir=all</code> and getting no <code>.dot</code> files, very confusing.</p>",
        "id": 128849414,
        "sender_full_name": "davidtwco",
        "timestamp": 1530304797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed a fix to that infinite loop issue. Not ran _all_ the tests, but one that was infinite looping is no longer infinite looping.</p>",
        "id": 128851139,
        "sender_full_name": "davidtwco",
        "timestamp": 1530307386
    },
    {
        "content": "<p>Well, as it turns out I should have ran all the tests.</p>",
        "id": 128853357,
        "sender_full_name": "davidtwco",
        "timestamp": 1530311115
    },
    {
        "content": "<p>N-th time lucky.</p>",
        "id": 128854988,
        "sender_full_name": "davidtwco",
        "timestamp": 1530313877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Can you r+ the PR before I need to rebase again?</p>",
        "id": 128923833,
        "sender_full_name": "davidtwco",
        "timestamp": 1530458105
    },
    {
        "content": "<p>er, yes, done</p>",
        "id": 128923838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530458130
    },
    {
        "content": "<p>I didn't get a chance to read that closely yet your latest changes, but it's ok</p>",
        "id": 128923839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530458138
    },
    {
        "content": "<p>There's been no changes other than rebasing and the infinite loop fix (which was just moving a line) since you last <code>r+</code>'d.</p>",
        "id": 128923880,
        "sender_full_name": "davidtwco",
        "timestamp": 1530458175
    },
    {
        "content": "<p>ok</p>",
        "id": 128923936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530458323
    },
    {
        "content": "<p>it was the infinite loop fix I hadn't read :)</p>",
        "id": 128923937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530458328
    },
    {
        "content": "<p>I had to move when I considered a region visited in the DFS to before I looked at the edges going from it instead of after. This meant that if a region had a constraint to itself (which it must have had after the rebase) then it wouldn't cause an issue later when working out the paths.</p>",
        "id": 128923946,
        "sender_full_name": "davidtwco",
        "timestamp": 1530458396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Now that's merged, what are the next steps for it?</p>",
        "id": 128931800,
        "sender_full_name": "davidtwco",
        "timestamp": 1530476313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> good question! :) I'll try to prep an answer shortly, fits well with the planning I was hoping to do today</p>",
        "id": 128965451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530540462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ok so I am noticing some mildly surprising behavior from the current region inference stuff</p>",
        "id": 128982749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559512
    },
    {
        "content": "<p>in particular it's not finding the \"interesting constriants\" I expect</p>",
        "id": 128982754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559519
    },
    {
        "content": "<p>in at least one test case :)</p>",
        "id": 128982756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559523
    },
    {
        "content": "<p>I may try to debug it, or else to leave a comment if you want to take a look</p>",
        "id": 128982759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559531
    },
    {
        "content": "<p>I'm trying to figure out how to manage this region error thing, there are a lot of moving parts</p>",
        "id": 128982763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559546
    },
    {
        "content": "<p>Oh, that's interesting.</p>",
        "id": 128982828,
        "sender_full_name": "davidtwco",
        "timestamp": 1530559605
    },
    {
        "content": "<p>so in particular I see this graph:</p>",
        "id": 128982831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559611
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/mS5o31MuOgcXEaAdPoVR2JY7/Screen-Shot-2018-07-02-at-3.22.14-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-02-at-3.22.14-PM.png\">Screen-Shot-2018-07-02-at-3.22.14-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mS5o31MuOgcXEaAdPoVR2JY7/Screen-Shot-2018-07-02-at-3.22.14-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-02-at-3.22.14-PM.png\"><img src=\"/user_uploads/4715/mS5o31MuOgcXEaAdPoVR2JY7/Screen-Shot-2018-07-02-at-3.22.14-PM.png\"></a></div>",
        "id": 128982834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559616
    },
    {
        "content": "<p>from the <code>borrowck/issue-45983.rs</code> test case</p>",
        "id": 128982841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559635
    },
    {
        "content": "<p>the two regions in question are <code>'_#2r</code> and <code>'_#3r</code></p>",
        "id": 128982845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559650
    },
    {
        "content": "<p>so it seems like the \"interesting\" one is bb0[2]</p>",
        "id": 128982848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559656
    },
    {
        "content": "<p>but right now we are .. not finding that</p>",
        "id": 128982850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559661
    },
    {
        "content": "<p>I can't quite figure out how to interpret the <code>debug!</code> output</p>",
        "id": 128982853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559667
    },
    {
        "content": "<p>I have to look at the code a bit more closely I think</p>",
        "id": 128982897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559683
    },
    {
        "content": "<p>anyway, that <em>is</em> the right answer it turns out</p>",
        "id": 128982903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559693
    },
    {
        "content": "<p>(I'm writing up some comments about how to handle the closure errors, and this is the test case I am looking at)</p>",
        "id": 128982909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530559704
    },
    {
        "content": "<p>For that to be a boring region, doesn't that mean it acts on a temporary?</p>",
        "id": 128983019,
        "sender_full_name": "davidtwco",
        "timestamp": 1530559883
    },
    {
        "content": "<p>hmm perhaps that is the problem</p>",
        "id": 128983468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560514
    },
    {
        "content": "<p>some notes here:</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/51027#issuecomment-401912102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51027#issuecomment-401912102\">https://github.com/rust-lang/rust/issues/51027#issuecomment-401912102</a></p>",
        "id": 128983470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560517
    },
    {
        "content": "<p>on the closure problem anyway</p>",
        "id": 128983472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560522
    },
    {
        "content": "<p>I want to turn my attention back to the dyn-underscore problem now — I feel like we're getting close to a more \"unified region error reporting\" thing but I don't quite see it yet :)</p>",
        "id": 128983516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560542
    },
    {
        "content": "<p>that said, I should probably take what little time I have left today (grr, that took forever to dig into) and focus on finding some lower hanging fruit</p>",
        "id": 128983522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560564
    },
    {
        "content": "<p>I dont' really have much idea what issues to highlight just now...</p>",
        "id": 128983529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560575
    },
    {
        "content": "<p>jfyi the assignment is writing to</p>\n<div class=\"codehilite\"><pre><span></span>(*(_1.0: &amp;&#39;_#5r mut std::option::Option&lt;&amp;&#39;_#6r ()&gt;))\n</pre></div>\n\n\n<p>where <code>_1.0</code> is an upvar field projection</p>",
        "id": 128983639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530560746
    },
    {
        "content": "<p>That's a captured variable in a closure, right?</p>",
        "id": 128983692,
        "sender_full_name": "davidtwco",
        "timestamp": 1530560808
    },
    {
        "content": "<p>Is there a way to check if something is a upvar before considering it boring?</p>",
        "id": 128983700,
        "sender_full_name": "davidtwco",
        "timestamp": 1530560827
    },
    {
        "content": "<p>ultimately I think the boring idea was not the right one, on my part</p>",
        "id": 128983839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561085
    },
    {
        "content": "<p>that is, I think we should just use the categorization later on</p>",
        "id": 128983841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561095
    },
    {
        "content": "<p>and deciding boring/interesting then</p>",
        "id": 128983844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561101
    },
    {
        "content": "<p>I don't think there is any context that we have in the beginning</p>",
        "id": 128983847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561107
    },
    {
        "content": "<p>which we lack later on</p>",
        "id": 128983848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561109
    },
    {
        "content": "<p>in any case, yes, it is easy to tell upvar projections</p>",
        "id": 128983892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561124
    },
    {
        "content": "<p>Perhaps that's a decent small next step?</p>",
        "id": 128983904,
        "sender_full_name": "davidtwco",
        "timestamp": 1530561164
    },
    {
        "content": "<p>perhaps so</p>",
        "id": 128984209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561604
    },
    {
        "content": "<p>are you interested in poking at the closure stuff? you might try skimming those notes</p>",
        "id": 128984220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561619
    },
    {
        "content": "<p>and see if they make some measure of sense to you :)</p>",
        "id": 128984222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530561625
    },
    {
        "content": "<p>I'll take a look when I've got a moment.</p>",
        "id": 128984249,
        "sender_full_name": "davidtwco",
        "timestamp": 1530561712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> so I'm taking a closer look at the region error reporting code on master and doing a bit of experimentation</p>",
        "id": 129011924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530609158
    },
    {
        "content": "<p>jfyi</p>",
        "id": 129011926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530609163
    },
    {
        "content": "<p>I noticed (to start) some opportunities for cleanup, so I might just open a cleanup PR and r? you</p>",
        "id": 129011934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530609202
    },
    {
        "content": "<p>Sounds good, there's likely plenty of room for improvement.</p>",
        "id": 129011942,
        "sender_full_name": "davidtwco",
        "timestamp": 1530609219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ok I have some progress, gonna open a PR soon</p>",
        "id": 129029742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530631832
    },
    {
        "content": "<p>e.g., output for <code>issue-45983.rs</code> is:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; borrowck/issue-45983.rs:17:18\n   |\n16 |     let x = None;\n   |         - region `&#39;2` appears in the type of `x`\n17 |     give_any(|y| x = Some(y));\n   |               -  ^^^^^^^^^^^ free region requires that `&#39;1` must outlive `&#39;2`\n   |               |\n   |               region `&#39;1` appears in this argument\n</pre></div>",
        "id": 129030008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632065
    },
    {
        "content": "<p>(that's one of the closure ones)</p>",
        "id": 129030012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632070
    },
    {
        "content": "<p>the \"region <code>'2</code> appears in the type of <code>x</code>\" message was intended to eventually become something like \"fully elaborated type of <code>x</code> is ...\"</p>",
        "id": 129030034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632099
    },
    {
        "content": "<p>obviously this is not specialized to closures at all</p>",
        "id": 129030052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632110
    },
    {
        "content": "<p>the <code>dyn-trait-underscore</code> is printing:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; underscore-lifetime/dyn-trait-underscore.rs:18:5\n   |\n16 | fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n   |         ----- region `&#39;1` appears in this argument\n17 |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cast requires that `&#39;1` must outlive `&#39;static`\n</pre></div>",
        "id": 129030117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632163
    },
    {
        "content": "<p>which is ... kinda good :)</p>",
        "id": 129030129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632172
    },
    {
        "content": "<p>it'd be nice to underline the return type, didn't get to <em>that</em> yet</p>",
        "id": 129030131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632179
    },
    {
        "content": "<p>that'd be some more special cases</p>",
        "id": 129030137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632190
    },
    {
        "content": "<p>my goal though is to get something where we can make smaller PRs adding various special cases :)</p>",
        "id": 129030143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632200
    },
    {
        "content": "<p>this might be a perfect place for an error code actually</p>",
        "id": 129030275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632308
    },
    {
        "content": "<p>that is, maybe we can explain \"how to read this error\", once we get closer</p>",
        "id": 129030281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632316
    },
    {
        "content": "<p>hopefully we can get it good enough that — with a bit of guidance — mere mortals can actually <em>do so</em></p>",
        "id": 129030306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530632336
    },
    {
        "content": "<p>That certainly simplifies what I had for finding paths.</p>",
        "id": 129032371,
        "sender_full_name": "davidtwco",
        "timestamp": 1530634254
    },
    {
        "content": "<p>In the most recent example you've sent here, I think we need to break down \"cast\" more - it's not obvious (at least to me) that what is being highlighted is a cast (from a end-user reading their code perspective).</p>",
        "id": 129032383,
        "sender_full_name": "davidtwco",
        "timestamp": 1530634295
    },
    {
        "content": "<p>presuming that <a href=\"https://github.com/rust-lang/rust/pull/51987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51987\">https://github.com/rust-lang/rust/pull/51987</a> turns out to be a win,</p>",
        "id": 129032385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634299
    },
    {
        "content": "<p>the code likely gets simpler still</p>",
        "id": 129032388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634302
    },
    {
        "content": "<p>since we can just walk the tree of constraints...</p>",
        "id": 129032391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634307
    },
    {
        "content": "<p>yes, that's Yet Another orthogonal sort of problem</p>",
        "id": 129032437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634324
    },
    {
        "content": "<p>but a tricky one</p>",
        "id": 129032439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634325
    },
    {
        "content": "<p>it's particularly not obvious here I guess</p>",
        "id": 129032452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634345
    },
    {
        "content": "<p>since the \"cast\" is an implicit coercion</p>",
        "id": 129032457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634349
    },
    {
        "content": "<p>we need to thread more information through there</p>",
        "id": 129032462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634358
    },
    {
        "content": "<p>still, you gotta remember the competition for this particular error :)</p>",
        "id": 129032466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; underscore-lifetime/dyn-trait-underscore.rs:18:20\n   |\n18 |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n   |                    ^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 16:1...\n  --&gt; underscore-lifetime/dyn-trait-underscore.rs:16:1\n   |\n16 | / fn a&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt;&gt; {\n17 | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `&#39;static`\n18 | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n19 | | }\n   | |_^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; underscore-lifetime/dyn-trait-underscore.rs:18:14\n   |\n18 |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n   |              ^^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\n   = note: ...so that the expression is assignable:\n           expected std::boxed::Box&lt;(dyn std::iter::Iterator&lt;Item=&amp;T&gt; + &#39;static)&gt;\n              found std::boxed::Box&lt;dyn std::iter::Iterator&lt;Item=&amp;T&gt;&gt;\n</pre></div>",
        "id": 129032484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634386
    },
    {
        "content": "<p>not exactly super comprehensible</p>",
        "id": 129032487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634392
    },
    {
        "content": "<p>The first example you gave with the closure is much improved.</p>",
        "id": 129032489,
        "sender_full_name": "davidtwco",
        "timestamp": 1530634394
    },
    {
        "content": "<p>Yeah, just naming the regions is a significant improvement.</p>",
        "id": 129032501,
        "sender_full_name": "davidtwco",
        "timestamp": 1530634419
    },
    {
        "content": "<p>that said,</p>",
        "id": 129032553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634452
    },
    {
        "content": "<p>it is interesting that this one</p>",
        "id": 129032557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634455
    },
    {
        "content": "<p>highlights the <em>source</em> more</p>",
        "id": 129032561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634461
    },
    {
        "content": "<p>i.e., the <code>items</code></p>",
        "id": 129032568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634469
    },
    {
        "content": "<p>and not the cast</p>",
        "id": 129032570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634471
    },
    {
        "content": "<p>we can do that too</p>",
        "id": 129032573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634473
    },
    {
        "content": "<p>another follow-up :)</p>",
        "id": 129032578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634483
    },
    {
        "content": "<p>it basically all comes down to using more of the information in that causal chain</p>",
        "id": 129032587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530634496
    }
]