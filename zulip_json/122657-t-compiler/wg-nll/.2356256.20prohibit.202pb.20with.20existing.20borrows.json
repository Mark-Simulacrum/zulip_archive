[
    {
        "content": "<p>So if I recall from the last time we discussed this, a first step that we could take was to remove the use of 2PB from within the match desugaring code, and replace it with some sort of special cast. (i.e., for a <code>ref mut</code> binding used in a guard, we create a value of <code>&amp;&amp;Foo</code> type and then cast that to <code>&amp;&amp;mut Foo</code>)</p>\n<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, I recall you did some of the initial work pursuing these changes, do you have any interest in trying to do that refactoring?</p>\n<p>If I understand correctly, it should be a \"no-op\" in terms of its effect on end-users -- i.e., the same set of code should be accepted, it would just be being accepted by relying on a \"cast\" instead of 2PB.</p>",
        "id": 154257991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546541200
    },
    {
        "content": "<p>I guess an important question is whether we plan to actually prohibit 2PB-with-pre-existing-borrows or not. But this seems like a first step we can take in either case. OTOH, if we don't plan to prohibit pre-existing borrows...</p>",
        "id": 154258032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546541249
    },
    {
        "content": "<p>ah I remember there were some comments I hadn't read yet</p>",
        "id": 154258037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546541255
    },
    {
        "content": "<p>(I guess one point is that I think that the idea of using a cast is not a bad idea regardless; it feels like sort of a \"later\" move in terms of code cleanliness. This case always a weird 2PB case since it was <em>never</em> activated.)</p>",
        "id": 154258852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546541959
    },
    {
        "content": "<p>Yes, I was going to create a PR to change to a cast for matches, but then I realized that the \"variable\" in the match guard could have a subtype of the type of the variable in the arm and decided it would need more work or more thought.</p>",
        "id": 154259100,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546542238
    },
    {
        "content": "<p>hmm, say more?</p>",
        "id": 154259174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546542303
    },
    {
        "content": "<p>do you have a specific example in mind?</p>",
        "id": 154259184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546542309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">eq_types</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">eq_types</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// z: &amp;mut &amp;&#39;local i32 !?</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>It's not <em>unsafe</em>, just (somewhat) unexpected.</p>",
        "id": 154259402,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546542524
    },
    {
        "content": "<p>so, let me see if I can say this explicitly:</p>\n<ul>\n<li>when desugaring the <code>ref mut z</code> for use in the guard, we would first create a <code>&amp;&amp;x</code>, so something of type <code>&amp;'a &amp;'b &amp;'static i32</code>, and assign that to some temporary. This temporary might have type <code>&amp;'c &amp;'d &amp;'e i32</code>, and the concern then is that <code>'e</code> is never forced to be equal to <code>'static</code>?</li>\n</ul>",
        "id": 154259892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546542947
    },
    {
        "content": "<p>seems true. we could force the issue but it'd be a bit awkward</p>",
        "id": 154259954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546542982
    },
    {
        "content": "<p>e.g., that cast that converts the <code>&amp;&amp;&amp;i32</code> to a <code>&amp;&amp;mut &amp;i32</code> could conceivably take also the \"place\" that was originally borrowed, to equate the types</p>",
        "id": 154259974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546543010
    },
    {
        "content": "<p>seems true, though I'm not sure if I am worried about it</p>",
        "id": 154260538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546543499
    },
    {
        "content": "<p>I would be surprised if it's noticed very often, but it is a difference compared to the current behaviour.</p>",
        "id": 154260672,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546543616
    },
    {
        "content": "<p>Anyway, I think I could get this implemented soon.</p>",
        "id": 154260720,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546543669
    },
    {
        "content": "<p>that'd be great. Seems like we can decide whether/how to address the other problem once we have the outlines of the impl</p>",
        "id": 154260813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546543732
    },
    {
        "content": "<p>OK, but this one which currently compiles on my branch is too far...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ref_to_static</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// Apparently we try to promote per use</span>\n<span class=\"w\">            </span><span class=\"n\">ref_to_static</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154430013,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546629423
    },
    {
        "content": "<p>and this...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154437682,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546636517
    },
    {
        "content": "<p>so, <code>&amp;0</code> <em>has</em> static lifetime..</p>",
        "id": 154441084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639580
    },
    {
        "content": "<p>ah, ok, I see</p>",
        "id": 154441105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639605
    },
    {
        "content": "<p><code>ref mut z</code>, right :)</p>",
        "id": 154441108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639609
    },
    {
        "content": "<p>hmm, so, one thing I was thinking about last night is whether we want this to be a distinct kind of borrow (ugh...)</p>",
        "id": 154441148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639644
    },
    {
        "content": "<p>(though so long as the resulting type is <code>&amp;T</code>, I don't think it would solve the covariance issues)</p>",
        "id": 154441226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639691
    },
    {
        "content": "<p>(I guess the point with the latter example is that the actual mutable borrow winds up being dead code?)</p>",
        "id": 154441274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546639751
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 154445036,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546643703
    },
    {
        "content": "<blockquote>\n<p>hmm, so, one thing I was thinking about last night is whether we want this to be a distinct kind of borrow (ugh...)</p>\n</blockquote>\n<p>This is the best thing I've thought of for now, but it's definitely not great.</p>",
        "id": 154445179,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546643874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I'm trying to decide what I think about those examples being accepted. I feel like it's not <em>horrible</em> if they are -- I recall us talking about how much to expose the \"desugaring\" of bindings in guards before, and I continue to think that it's reasonable to expose to people (in extreme cases...) that bindings in a guard are actually shared borrows \"at heart\". But I'm wondering, do you remember when this came up before exactly and what we did then?</p>",
        "id": 154577864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546875805
    },
    {
        "content": "<p>This has come up previously in this thread, and the decision that the strangeness was ok.</p>",
        "id": 154586222,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546883083
    },
    {
        "content": "<p>The issue was that the reference in the guard would alias the reference in being matched on and both could be used.</p>",
        "id": 154586317,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546883169
    },
    {
        "content": "<p>Specifically, this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">ptr</span>::<span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;aliasing mutable references?&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154601991,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546895952
    },
    {
        "content": "<p>The only really bad issue we would have with a naive lowering is the promotion issue, but this seems like it's a bug in the promotion code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;???&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154602237,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546896164
    },
    {
        "content": "<p>Notably the assert doesn't fire here (because the <code>Context</code> is a mutating projection, not a mutable borrow)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;???&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154602387,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1546896303
    },
    {
        "content": "<p>(I think, on a related note, that you can observe that <code>&amp;z</code> changes in the guard, but that is also true today)</p>",
        "id": 154603149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546896932
    },
    {
        "content": "<p>So, I've tried a different approach that takes the naive match lowering and works around it to add the required fake borrows. I'm hoping that the rarity of <code>ref mut x if ...</code> means that no one has written code that it would break (neither the compiler, nor any of its tests, contain such code).</p>",
        "id": 155122206,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547502465
    },
    {
        "content": "<p>If someone has then it can be changed to use (either kind of) two-phase borrows, using the same migration warnings as for other two-phase borrows.</p>",
        "id": 155122211,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547502470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> this is part of your recent PR?</p>",
        "id": 155206474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588080
    },
    {
        "content": "<p>This is what the recent PR is for, it's waiting on crater to see if the \"real mutable borrows\" approach is possible.</p>",
        "id": 155206652,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547588208
    },
    {
        "content": "<p>I haven't had a chance to read it yet</p>",
        "id": 155206663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588220
    },
    {
        "content": "<p>so I'm not quite sure what \"real mutable borrows\" means exactly :)</p>",
        "id": 155206678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588235
    },
    {
        "content": "<p>I think the reason we didn't do that before was because it would have conflicted with the borrows of the thing we are matching <em>against</em></p>",
        "id": 155206690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588251
    },
    {
        "content": "<p>but I guess that is what you changed, something in how we do <em>those</em> borrows?</p>",
        "id": 155206701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547588262
    },
    {
        "content": "<p>Yes, the idea (in either version) is that we can assign the fake borrows again at the start of any match guard to avoid conflicting with the borrow access from the <code>ref mut</code>.</p>",
        "id": 155206792,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547588327
    },
    {
        "content": "<p>Then either some changes to fake borrows, or (minimal) two-phase borrows ensure that there's no conflict with the borrow from <code>ref mut</code>.</p>",
        "id": 155206838,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547588383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> are you around now by any chance? I'm skimming over your PR now</p>",
        "id": 155257395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649052
    },
    {
        "content": "<p>(and I had a question or two)</p>",
        "id": 155257429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649078
    },
    {
        "content": "<p>I think it would be helpful to show the desugared form for some simple example</p>",
        "id": 155258743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650029
    },
    {
        "content": "<p>I'll try to writeup some notes on this soon</p>",
        "id": 155273154,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547661153
    },
    {
        "content": "<p>thanks -- I read the diff but I'm not sure I \"got it\" yet</p>",
        "id": 155273533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547661485
    },
    {
        "content": "<p>I might have to re-read :)</p>",
        "id": 155273535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547661489
    },
    {
        "content": "<p>Link to <a href=\"https://github.com/rust-lang/rust/pull/57609#issuecomment-454922025\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57609#issuecomment-454922025\">summary comment</a>, for convenience =)</p>",
        "id": 155287777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ok does <a href=\"https://github.com/rust-lang/rust/pull/57609#issuecomment-458288480\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57609#issuecomment-458288480\">this description</a> sound accurate?</p>",
        "id": 157055023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548707411
    },
    {
        "content": "<p>Branch with the new match lowering for anyone interested: <a href=\"https://github.com/matthewjasper/rust/tree/cleanup-match-lowering\" target=\"_blank\" title=\"https://github.com/matthewjasper/rust/tree/cleanup-match-lowering\">https://github.com/matthewjasper/rust/tree/cleanup-match-lowering</a></p>",
        "id": 157418773,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549105168
    }
]