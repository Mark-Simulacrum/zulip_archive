[
    {
        "content": "<p>I spent some time optimizing the borrow-check transitive closure computation. The more optimized version no longer computes the full transitive closure at each point; instead, it only computes the transitive closure for those regions that are going out of scope along an edge. This can probably be made better still, but already it makes quite a difference:</p>\n<div class=\"codehilite\"><pre><span></span>Mr-Darcy. cargo run --release -- -a TimelyOpt inputs/clap-rs/app-parser-{{impl}}-add_defaults/ --skip-tuples\n    Finished release [optimized] target(s) in 0.07s\n     Running `target/release/borrow-check -a TimelyOpt &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39; --skip-tuples`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 63.513s\nMr-Darcy. cargo run --release -- -a Naive inputs/clap-rs/app-parser-{{impl}}-add_defaults/ --skip-tuples\n    Finished release [optimized] target(s) in 0.22s\n     Running `target/release/borrow-check -a Naive &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39; --skip-tuples`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 131.559s\n</pre></div>",
        "id": 126439115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526080842
    },
    {
        "content": "<p>I wonder if tables work. Let's find out.</p>\n<table>\n<thead>\n<tr>\n<th>version</th>\n<th>time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>before</td>\n<td>131s</td>\n</tr>\n<tr>\n<td>after</td>\n<td>63s</td>\n</tr>\n</tbody>\n</table>",
        "id": 126439122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526080891
    },
    {
        "content": "<p>obviously still some way to go</p>",
        "id": 126439124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526080900
    },
    {
        "content": "<p>though I strongly suspect that <a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/20\">https://github.com/rust-lang-nursery/borrow-check/issues/20</a> would help a lot -- <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span>, did you ever do anything in that direction btw?</p>",
        "id": 126439278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526081160
    },
    {
        "content": "<p>I gotta figure out the best way to do some profiling of the timely stuff though. It's sort of opaque to me still. Frank McSherry recommended adding <code>count</code> calls at one point to try and observe how many tuples were flying around...</p>",
        "id": 126439332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526081258
    },
    {
        "content": "<p>made one other improvement, and now it's done to 40s</p>",
        "id": 126439406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526081378
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/pull/23\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/pull/23\">opened a pull request</a>. Not sure who might want to review it =)</p>",
        "id": 126439790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526081985
    },
    {
        "content": "<p>That's my weekend project</p>",
        "id": 126439851,
        "sender_full_name": "qmx",
        "timestamp": 1526082042
    },
    {
        "content": "<p>ok. I'm stuck in GRU for a few more hours so I may poke at it</p>",
        "id": 126439858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082058
    },
    {
        "content": "<p>or something else, I'm going to first see if I can instrument the code more to get more insights</p>",
        "id": 126439866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082074
    },
    {
        "content": "<p>I still can't believe it's taking 40s :)</p>",
        "id": 126439868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082080
    },
    {
        "content": "<p>Go for it, I'm studying the basics</p>",
        "id": 126439869,
        "sender_full_name": "qmx",
        "timestamp": 1526082082
    },
    {
        "content": "<p>how many fricking billions of computer cycles is that :P</p>",
        "id": 126439876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082096
    },
    {
        "content": "<p>(good news: I checked, and my new analysis produces precisely the same final result as the old one)</p>",
        "id": 126439927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082130
    },
    {
        "content": "<p>woah, this surprises me, I have to admit:</p>",
        "id": 126440179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Mr-Darcy. Mr-Darcy. wc -l outlives.facts\n  534327 outlives.facts\nMr-Darcy. wc -l region_live_at.facts\n  782146 region_live_at.facts\nMr-Darcy. wc -l cfg_edge.facts\n   51896 cfg_edge.facts\n</pre></div>",
        "id": 126440183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082510
    },
    {
        "content": "<p>well, maybe not the region-live-at, but still, those are big numbers</p>",
        "id": 126440187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082524
    },
    {
        "content": "<p>esp. the first one</p>",
        "id": 126440191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082539
    },
    {
        "content": "<p>and an awful lot of those are bidirectional, just by inspection:</p>",
        "id": 126440199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082563
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&quot;\\&#39;_#13627r&quot;    &quot;\\&#39;_#7r&quot;    &quot;Mid(bb0[3])&quot;\n&quot;\\&#39;_#13628r&quot;    &quot;\\&#39;_#8r&quot;    &quot;Mid(bb0[3])&quot;\n&quot;\\&#39;_#7r&quot;    &quot;\\&#39;_#13627r&quot;    &quot;Mid(bb0[3])&quot;\n&quot;\\&#39;_#8r&quot;    &quot;\\&#39;_#13628r&quot;    &quot;Mid(bb0[3])&quot;\n</pre></div>",
        "id": 126440200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082566
    },
    {
        "content": "<p>huh?</p>",
        "id": 126440265,
        "sender_full_name": "qmx",
        "timestamp": 1526082631
    },
    {
        "content": "<p>when we have an invariant lifetime or are just requiring equality, we will generate <code>'a: 'b</code> and <code>'b: 'a</code></p>",
        "id": 126440281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082667
    },
    {
        "content": "<p>so two edges</p>",
        "id": 126440282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082677
    },
    {
        "content": "<p>I am hypothesizing that this maybe contributes to the remarkable number of outlives facts there (500k)</p>",
        "id": 126440288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082697
    },
    {
        "content": "<p>but i'm not sure if that's really true</p>",
        "id": 126440291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082709
    },
    {
        "content": "<p>as I dig a bit more</p>",
        "id": 126440292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082711
    },
    {
        "content": "<p>mm, actually, it does seem to happena  lot</p>",
        "id": 126440335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082724
    },
    {
        "content": "<p>e.g. here as well:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;\\&#39;_#563r&quot;  &quot;\\&#39;_#559r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#564r&quot;  &quot;\\&#39;_#560r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#565r&quot;  &quot;\\&#39;_#561r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#566r&quot;  &quot;\\&#39;_#562r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#559r&quot;  &quot;\\&#39;_#563r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#560r&quot;  &quot;\\&#39;_#564r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#561r&quot;  &quot;\\&#39;_#565r&quot;  &quot;Mid(bb240[6])&quot;\n&quot;\\&#39;_#562r&quot;  &quot;\\&#39;_#566r&quot;  &quot;Mid(bb240[6])&quot;\n</pre></div>",
        "id": 126440353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082760
    },
    {
        "content": "<p>would it make sense to add metadata to an edge? like marking it as a invariant</p>",
        "id": 126440355,
        "sender_full_name": "qmx",
        "timestamp": 1526082769
    },
    {
        "content": "<p>or even better, do we even care that things are invariant or not?</p>",
        "id": 126440379,
        "sender_full_name": "qmx",
        "timestamp": 1526082826
    },
    {
        "content": "<p>I'm not sure yet what makes sense, I just think it's interesting.</p>",
        "id": 126440448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082930
    },
    {
        "content": "<p>you could imagine that adding a new relation -- like subset -- just for equality</p>",
        "id": 126440455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082956
    },
    {
        "content": "<p>but it would make everyhting more complex</p>",
        "id": 126440456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082960
    },
    {
        "content": "<p>I'd prefer not to</p>",
        "id": 126440497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082974
    },
    {
        "content": "<p>but still might be something we can exploit somehow</p>",
        "id": 126440498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526082984
    },
    {
        "content": "<p>oh, hmm. I see part of the problem is the hack I did around the return type, which causes outlives relations to be added at <em>all</em> points</p>",
        "id": 126441172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526084303
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/borrow-check/issues/24\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/borrow-check/issues/24\">https://github.com/rust-lang-nursery/borrow-check/issues/24</a></p>",
        "id": 126442152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526086498
    },
    {
        "content": "<p>Here I is! I'm heading over to the repo to try and page in the Datalog and see if I can say something intelligent.  Immediate (superficial) response: if there are equivalence classes of nodes all mutually connected by bi-directional edges, then coalescing them down could help a lot. The SCC logic does this for transitive closure, but it may need to be something different here (not up to speed enough to be sure).</p>",
        "id": 126456458,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526119172
    },
    {
        "content": "<p>The times you are seeing do seem quite large for the number of tuples you are producing as output. By comparison, using DD to do a memory aliasing computation on the linux kernel produces ~1B facts and takes about 200s; a dataflow (null pointer flow) computation on httpd produces 10M output facts and takes about 10s.</p>\n<p>I've got the code and am starting to work through it, but one thing that stands out is a large number of \"cyclic joins\", which are triangle-like joins of the form:</p>\n<div class=\"codehilite\"><pre><span></span>Result(x,y,z) &lt;- A(x,y), B(y,z), C(x,z)\n</pre></div>\n\n\n<p>These can be painful because the <code>A(x,y), B(y,z)</code> join may produce many intermediate results, which may then be substantially reduced by <code>C(x,z)</code>. This may be fundamental, but there are some clever ways to execute these joins (e.g. in <a href=\"https://github.com/frankmcsherry/differential-dataflow/blob/master/examples/ngo.rs\" target=\"_blank\" title=\"https://github.com/frankmcsherry/differential-dataflow/blob/master/examples/ngo.rs\">this example of triangle counting using differential dataflow</a>). </p>\n<p>I'll take a look and see if re-wiring these joins to use the improved join patterns helps. One way to \"check\" is to take the final results for the relations and check out the cardinalities. If for example <code>y</code> has a high degree in <code>A</code> and <code>B</code> then <code>A(x,y),B(y,z)</code> will probably be massive, perhaps much larger than <code>C</code>, and the improved algorithms will likely help.</p>",
        "id": 126457043,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526120311
    },
    {
        "content": "<p>Another optimization that the triangle example above points out, which could shave constant factors but not asymptotic terms, is to use the \"arrangement\" infrastructure to arrange each (collection, key) pair at most once. </p>\n<p>For example, there is a lot of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">some_other_collection</span><span class=\"p\">.</span><span class=\"n\">semijoin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in the code, and each invocation will form a new indexed form of the contents of <code>region_live_at</code>. Instead, you can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">region_live_at_by_self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">region_live_at</span><span class=\"p\">.</span><span class=\"n\">arrange_by_self</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which gives you an arranged stream, one that you can use with <code>join_core</code> to effect a semijoin without rebuilding a <code>region_live_at</code> index for each use:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">some_other_collection</span><span class=\"p\">.</span><span class=\"n\">join_core</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at_by_self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)));</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This can reduce the memory and compute footprint by factors that depend on the amount of re-use of these relations. This will not take anything from 40s to 1s, though.</p>",
        "id": 126457241,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526120742
    },
    {
        "content": "<p>Another random (possibly out-dated) observation: In the computation of <code>subset</code> there is the rule</p>\n<div class=\"codehilite\"><pre><span></span>    // subset(R1, R3, P) :-\n    //   subset(R1, R2, P),\n    //   subset(R2, R3, P).\n</pre></div>\n\n\n<p>These sorts of rules are \"quadratic\" and often terrifying. The problem is that when we show up with 7.5M facts in <code>subset</code> (its final size) then there is a potential massive explosion of facts here, even if most of them end up being redundant.</p>\n<p>In a transitive closure computation, we would likely instead write</p>\n<div class=\"codehilite\"><pre><span></span>    // subset(R1, R3, P) :-\n    //   subset(R1, R2, P),\n    //   outlives(R2, R3, P).\n</pre></div>\n\n\n<p>which grows <code>subset</code> more slowly (over more rounds) but also doesn't experience a massive (potentially quadratic) derivation spike in any one round. If I make that change with the <code>Naive</code> strategy the time to derive <code>subset</code> drops from 40s down to 15s.</p>\n<p>IMPORTANTLY: This change also produces the wrong answer, because you have other <code>subset</code> facts produced by crawling along the <code>cfg_edge</code> relation, so it isn't always applicable, but I thought I'd point it out anyhow as an example of how some restructuring can mitigate some of the performance pain.</p>",
        "id": 126458235,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526122998
    },
    {
        "content": "<p>Another random observation: in the <code>Naive</code> execution, although <code>subset</code> produces 7.5M distinct derived results, there are actually 59,275,254 derived facts over 1,360 rounds. This implies a certain amount of redundancy, which might be legit but is also starting to explain where the 40s are coming from. :D</p>\n<p>Off to look into the <code>TimelyOpt</code> variant and see if I can grok that.</p>",
        "id": 126458521,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526123664
    },
    {
        "content": "<p>IIRC this subset rule was where most of the time came from in the Naive computation (eg removing it dropped from 140s to 9s)</p>",
        "id": 126458523,
        "sender_full_name": "lqd",
        "timestamp": 1526123687
    },
    {
        "content": "<p>(the results were then very wrong of course ;)</p>",
        "id": 126458575,
        "sender_full_name": "lqd",
        "timestamp": 1526123769
    },
    {
        "content": "<p>Looking at the new version of the logic, the first question that comes up (applies to the old version too) is whether it is important to produce all of <code>subset</code> and then determine <code>requires</code>, or whether the derivation of <code>requires</code> can drive the derivation of <code>subset</code>. I.e. it seems we only need <code>subset</code> here:</p>\n<div class=\"codehilite\"><pre><span></span>    // requires(R2, B, P) :-\n    //   requires(R1, B, P),\n    //   subset(R1, R2, P).\n</pre></div>\n\n\n<p>which might mean we can co-derive <code>subset</code> and <code>requires</code> together, restricting the derivation of <code>subset</code> to those <code>(R1, P)</code> present in <code>requires</code>.</p>",
        "id": 126458701,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526124100
    },
    {
        "content": "<p>Similarly, but perhaps less complicatedly, can we fuse the <code>subset</code> logic into the derivation of <code>requires</code>?</p>\n<p>In the <code>Naive</code> derivation, we have a bunch of rules like </p>\n<div class=\"codehilite\"><pre><span></span>    // subset(R1, R2, P) :- outlives(R1, R2, P).\n\n    // subset(R1, R3, P) :-\n    //   subset(R1, R2, P),\n    //   subset(R2, R3, P).\n\n    // subset(R1, R2, Q) :-\n    // subset(R1, R2, P),\n    //   cfg_edge(P, Q),\n    //   (region_live_at(R1, Q); universal_region(R1)),\n    //   (region_live_at(R2, Q); universal_region(R2)).\n</pre></div>\n\n\n<p>and it seems possible that we could replace </p>\n<div class=\"codehilite\"><pre><span></span>     // requires(R2, B, P) :-\n     //   requires(R1, B, P),\n     //   subset(R1, R2, P).\n</pre></div>\n\n\n<p>with flavors of the above rules and avoid deriving <code>subset</code> at all.</p>",
        "id": 126458809,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526124313
    },
    {
        "content": "<p>Niko asked elsewhere</p>\n<blockquote>\n<p>I find myself wanting to do a kind of “split” – that is, take a set of tuples, and do a join and an antijoin, and process the resulting tuples differently depending on which way they go. Is there an optimized way to do that?</p>\n</blockquote>\n<p>The answer should be yes. Let me try talking it out to convince myself. This is the implementation of <code>antijoin</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">semijoin</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">).</span><span class=\"n\">negate</span><span class=\"p\">())</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>so it computes <code>self.semijoin(other)</code> as part of its definition. Essentially it determines an antijoin by taking the original stream and subtracting off the semijoined terms. You could totally do the same thing by hand:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">semi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rel1</span><span class=\"p\">.</span><span class=\"n\">semijoin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rel2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">anti</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">semi</span><span class=\"p\">.</span><span class=\"n\">negate</span><span class=\"p\">().</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rel1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This does no more work than <code>antijoin</code> and gives you a handle to both <code>semi</code> and <code>anti</code>, which should be what you want. </p>\n<p>Important caveat: <code>antijoin</code> only works correctly under the assumption that <code>rel2</code> has maximum cardinality one; the <code>semijoin</code> implementation is not a restriction so much as a multiplication, so if <code>rel2</code> has records with multiplicity 2 or more, the antijoin logic is messed up. This can always be fixed with a <code>distinct</code>, but it isn't done automatically in case you have other ways to guarantee that distinctness holds.</p>",
        "id": 126459236,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526125318
    },
    {
        "content": "<p>(if it helps visualize the datalog, this is a graph of the Naive rules) <a href=\"/user_uploads/4715/eRWgvQafdfpsTxE6xWK2lIqK/Naive-precedence-graph.png\" target=\"_blank\" title=\"Naive-precedence-graph.png\">Naive-precedence-graph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/eRWgvQafdfpsTxE6xWK2lIqK/Naive-precedence-graph.png\" target=\"_blank\" title=\"Naive-precedence-graph.png\"><img src=\"/user_uploads/4715/eRWgvQafdfpsTxE6xWK2lIqK/Naive-precedence-graph.png\"></a></div>",
        "id": 126459979,
        "sender_full_name": "lqd",
        "timestamp": 1526127049
    },
    {
        "content": "<p>Ooo, neat.</p>",
        "id": 126460142,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526127469
    },
    {
        "content": "<p>(this is generated by soufflé's debug-report) it could be neat to have a graph of the timely computation, the different operators and so on</p>",
        "id": 126460235,
        "sender_full_name": "lqd",
        "timestamp": 1526127613
    },
    {
        "content": "<p>Some more data from <code>TimelyOpt</code>: the new <code>subset</code> computation takes about 16s and produces 2,714,121 distinct facts. The <code>requires</code> computation then takes 35s longer and produces 9,585,213 distinct facts. It produces about 30m facts pre-distinctness, which isn't massively out of line with a 1us per fact rate that other computations are doing. If there really are 9.5M result <code>requires</code> tuples needed, it might be that it is time to start engineering the computation rather than the query.</p>",
        "id": 126460240,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526127646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Yeah, we've had that in the past. The logging machinery logs all dataflow creation events, and you can feed them in to a visualizer of your choosing (Andrea Lattuada had one that would produce static graphs). You .. can end up with a bit of a tangle, though. :)</p>",
        "id": 126460251,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526127704
    },
    {
        "content": "<p>That picture is much prettier (simpler, let's say) than what we usually produce (with all the <code>map</code> and <code>concat</code> and loop feedback nodes and edges).</p>",
        "id": 126460299,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526127745
    },
    {
        "content": "<p>:)</p>",
        "id": 126460300,
        "sender_full_name": "lqd",
        "timestamp": 1526127752
    },
    {
        "content": "<p>still trying out soufflé with the Naive rules, its profiler is cool, eg:</p>\n<p>Relations — sorted by Total time, desc</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>ID</th>\n<th>Total Time</th>\n<th>Non Rec Time</th>\n<th>Rec Time</th>\n<th>Copy Time</th>\n<th>Tuples</th>\n<th>% of Time</th>\n<th>% of Tuples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>subset</td>\n<td>R1</td>\n<td>16.07m</td>\n<td>0.056s</td>\n<td>16.03m</td>\n<td>2.31s</td>\n<td>7.53M</td>\n<td>92.3</td>\n<td>42.0</td>\n</tr>\n<tr>\n<td>requires</td>\n<td>R2</td>\n<td>78.9s</td>\n<td>0.002s</td>\n<td>72.9s</td>\n<td>6.06s</td>\n<td>9.59M</td>\n<td>7.56</td>\n<td>53.4</td>\n</tr>\n<tr>\n<td>borrow_live_at</td>\n<td>R3</td>\n<td>1.43s</td>\n<td>1.43s</td>\n<td>0</td>\n<td>0</td>\n<td>832K</td>\n<td>0.137</td>\n<td>4.64</td>\n</tr>\n</tbody>\n</table>\n<p>Rules — sorted by Total time, desc</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>ID</th>\n<th>Total Time</th>\n<th>Non Rec Time</th>\n<th>Rec Time</th>\n<th>Copy Time</th>\n<th>Tuples</th>\n<th>% of Time</th>\n<th>% of Tuples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>subset(R1,R3,P) :-     subset(R1,R2,P),    subset(R2,R3,P).</td>\n<td>C1.1</td>\n<td>15.80m</td>\n<td>0</td>\n<td>15.75m</td>\n<td>2.51s</td>\n<td>4.97M</td>\n<td>90.8</td>\n<td>27.7</td>\n</tr>\n<tr>\n<td>requires(R2,B,P) :-     requires(R1,B,P),    subset(R1,R2,P).</td>\n<td>C2.1</td>\n<td>56.4s</td>\n<td>0</td>\n<td>53.6s</td>\n<td>2.74s</td>\n<td>5.42M</td>\n<td>5.40</td>\n<td>30.2</td>\n</tr>\n<tr>\n<td>requires(R,B,Q) :-     requires(R,B,P),    cfg_edge(P,Q),    region_live_at(R,Q),    !killed(B,P).</td>\n<td>C2.2</td>\n<td>12.2s</td>\n<td>0</td>\n<td>10.6s</td>\n<td>1.54s</td>\n<td>3.06M</td>\n<td>1.16</td>\n<td>17.0</td>\n</tr>\n<tr>\n<td>requires(R,B,Q) :-     requires(R,B,P),    cfg_edge(P,Q),    universal_region(R),    !killed(B,P).</td>\n<td>C2.3</td>\n<td>9.08s</td>\n<td>0</td>\n<td>8.52s</td>\n<td>0.556s</td>\n<td>1.10M</td>\n<td>0.869</td>\n<td>6.14</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    region_live_at(R1,Q),    region_live_at(R2,Q).</td>\n<td>C1.2</td>\n<td>6.37s</td>\n<td>0</td>\n<td>5.45s</td>\n<td>0.921s</td>\n<td>1.82M</td>\n<td>0.610</td>\n<td>10.2</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    region_live_at(R1,Q),    universal_region(R2).</td>\n<td>C1.3</td>\n<td>3.89s</td>\n<td>0</td>\n<td>3.81s</td>\n<td>0.076s</td>\n<td>151K</td>\n<td>0.372</td>\n<td>0.843</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    universal_region(R1),    region_live_at(R2,Q).</td>\n<td>C1.4</td>\n<td>3.67s</td>\n<td>0</td>\n<td>3.65s</td>\n<td>0.021s</td>\n<td>42.4K</td>\n<td>0.352</td>\n<td>0.236</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    universal_region(R1),    universal_region(R2).</td>\n<td>C1.5</td>\n<td>3.32s</td>\n<td>0</td>\n<td>3.32s</td>\n<td>0.006s</td>\n<td>11.2K</td>\n<td>0.318</td>\n<td>0.062</td>\n</tr>\n<tr>\n<td>borrow_live_at(P,B) :-     requires(R,B,P),    region_live_at(R,P).</td>\n<td>N3.1</td>\n<td>1.09s</td>\n<td>1.09s</td>\n<td>0</td>\n<td>0</td>\n<td>803K</td>\n<td>0.104</td>\n<td>4.47</td>\n</tr>\n<tr>\n<td>borrow_live_at(P,B) :-     requires(R,B,P),    universal_region(R).</td>\n<td>N3.2</td>\n<td>0.325s</td>\n<td>0.325s</td>\n<td>0</td>\n<td>0</td>\n<td>29.8K</td>\n<td>0.031</td>\n<td>0.166</td>\n</tr>\n<tr>\n<td>subset(R1,R2,P) :-     outlives(R1,R2,P).</td>\n<td>N1.1</td>\n<td>0.056s</td>\n<td>0.056s</td>\n<td>0</td>\n<td>0</td>\n<td>534K</td>\n<td>0.005</td>\n<td>2.98</td>\n</tr>\n<tr>\n<td>requires(R,B,P) :-     borrow_region(R,B,P).</td>\n<td>N2.1</td>\n<td>0.002s</td>\n<td>0.002s</td>\n<td>0</td>\n<td>0</td>\n<td>1.89K</td>\n<td>0.000</td>\n<td>0.011</td>\n</tr>\n</tbody>\n</table>",
        "id": 126462062,
        "sender_full_name": "lqd",
        "timestamp": 1526131956
    },
    {
        "content": "<p>(yes it takes 17mins over the clap facts on this laptop :p) I'll try and get some numbers from the TimelyOpt rules</p>",
        "id": 126462069,
        "sender_full_name": "lqd",
        "timestamp": 1526132023
    },
    {
        "content": "<p>That is super cool (the souffle profiling). 17 mins is mental though. DD takes less time even if you count the build time. :D  Is that the compiled mode, or interpreted, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>?</p>",
        "id": 126462166,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526132280
    },
    {
        "content": "<p>it's in compiled mode, and with 2 threads ;) but as niko said, it's just the original rule ordering, ie reordering it better would surely make it a lot faster — but with a 15mins feedback loop I'm not even going to look into that :p</p>",
        "id": 126462211,
        "sender_full_name": "lqd",
        "timestamp": 1526132397
    },
    {
        "content": "<p>niko mentioned having seen 10x better times from reordering</p>",
        "id": 126462254,
        "sender_full_name": "lqd",
        "timestamp": 1526132444
    },
    {
        "content": "<p>Also, more measurements and thoughts on <code>TimelyOpt</code>. The <code>borrow_live_at</code> relation, which I <em>think</em> is the main output of the analysis, has only 832,392 output facts, which is a substantial reduction from the 10M or so from <code>requires</code>. The rule that produces it is</p>\n<div class=\"codehilite\"><pre><span></span>    // borrow_live_at(B, P) :- requires(R, B, P), region_live_at(R, P)\n</pre></div>\n\n\n<p>which makes me think that there is the potential to short-circuit a bunch of the <code>requires</code> derivations. It isn't obvious how to do this yet, but it seems reasonable that we might be able to re-write the <code>requires</code> derivation so that each <code>borrow_live_at</code> fact acts as an antibody and suppresses further derivations of the fact (though, we have to avoid interfering with other derivations).</p>",
        "id": 126462255,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526132447
    },
    {
        "content": "<p>(I mostly wanted to see time %ages, and tuple %ages and absolute counts, per rule)</p>",
        "id": 126462298,
        "sender_full_name": "lqd",
        "timestamp": 1526132536
    },
    {
        "content": "<p>(and for comparison the Naive DD runs in 200-240s on the same machine)</p>",
        "id": 126462304,
        "sender_full_name": "lqd",
        "timestamp": 1526132628
    },
    {
        "content": "<p>Gah, Niko has disabled multi-threaded execution here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">timely</span>::<span class=\"n\">execute_from_args</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[].</span><span class=\"n\">into_iter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>That would probably bump up perf a bit more.</p>",
        "id": 126462406,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526132879
    },
    {
        "content": "<p>Souffle's profiling info also looks better than timely/differential's:</p>\n<p><a href=\"/user_uploads/4715/mAkPxPVyVCvijhl9IuQ9e25U/TimelyOpt-profiling.png\" target=\"_blank\" title=\"TimelyOpt-profiling.png\">TimelyOpt-profiling.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mAkPxPVyVCvijhl9IuQ9e25U/TimelyOpt-profiling.png\" target=\"_blank\" title=\"TimelyOpt-profiling.png\"><img src=\"/user_uploads/4715/mAkPxPVyVCvijhl9IuQ9e25U/TimelyOpt-profiling.png\"></a></div>",
        "id": 126462587,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526133258
    },
    {
        "content": "<p>About a 10% perf bump using github master DD, fwiw. (vs <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> version).</p>",
        "id": 126462637,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526133415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span>  here's an upload of its html profiler for you, if you wanted to check it out: <a href=\"https://lqd.github.io/profiler_html/main.html\" target=\"_blank\" title=\"https://lqd.github.io/profiler_html/main.html\">https://lqd.github.io/profiler_html/main.html</a></p>",
        "id": 126462733,
        "sender_full_name": "lqd",
        "timestamp": 1526133620
    },
    {
        "content": "<p><em>steals</em></p>",
        "id": 126462741,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526133697
    },
    {
        "content": "<p>(the data is separate, it's a json file, very easy to steal :p)</p>",
        "id": 126462783,
        "sender_full_name": "lqd",
        "timestamp": 1526133738
    },
    {
        "content": "<p>The ETHZ group has had a mind to do a D3 attachment that takes the timely logs (they stream out too) into a live dataflow graph, so you can watch the computation and see these sorts of stats live.  Just need to find someone who wants to spend the time. &gt;.&lt;</p>",
        "id": 126462804,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526133842
    },
    {
        "content": "<p>Just in case it's useful to anyone, here's some info about the (tentative) datalog soufflé version of TimelyOpt, with precedence graph <a href=\"/user_uploads/4715/SgvxtEtYrY3TJ-WwHs4mcs5s/timelyopt-precedence-graph.png\" target=\"_blank\" title=\"timelyopt-precedence-graph.png\">timelyopt-precedence-graph.png</a> and SCC graph <a href=\"/user_uploads/4715/exrvXPvoVTJp9N9FvM2fPRcW/timelyopt-scc-graph.png\" target=\"_blank\" title=\"timelyopt-scc-graph.png\">timelyopt-scc-graph.png</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SgvxtEtYrY3TJ-WwHs4mcs5s/timelyopt-precedence-graph.png\" target=\"_blank\" title=\"timelyopt-precedence-graph.png\"><img src=\"/user_uploads/4715/SgvxtEtYrY3TJ-WwHs4mcs5s/timelyopt-precedence-graph.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/exrvXPvoVTJp9N9FvM2fPRcW/timelyopt-scc-graph.png\" target=\"_blank\" title=\"timelyopt-scc-graph.png\"><img src=\"/user_uploads/4715/exrvXPvoVTJp9N9FvM2fPRcW/timelyopt-scc-graph.png\"></a></div><p>And a profile, for tuple numbers &amp; relative %ages:<br>\nRelations — sorted by Total time, desc</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>ID</th>\n<th>Total Time</th>\n<th>Non Rec Time</th>\n<th>Rec Time</th>\n<th>Copy Time</th>\n<th>Tuples</th>\n<th>% of Time</th>\n<th>% of Tuples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>requires</td>\n<td>R4</td>\n<td>52.8s</td>\n<td>268.8µs</td>\n<td>46.3s</td>\n<td>6.50s</td>\n<td>9.59M</td>\n<td>50.2</td>\n<td>71.9</td>\n</tr>\n<tr>\n<td>dead_can_reach</td>\n<td>R3</td>\n<td>36.1s</td>\n<td>0</td>\n<td>36.1s</td>\n<td>0.074s</td>\n<td>170K</td>\n<td>34.4</td>\n<td>1.27</td>\n</tr>\n<tr>\n<td>subset</td>\n<td>R1</td>\n<td>12.6s</td>\n<td>0.061s</td>\n<td>11.4s</td>\n<td>1.13s</td>\n<td>2.70M</td>\n<td>12.0</td>\n<td>20.3</td>\n</tr>\n<tr>\n<td>live_to_dead_regions</td>\n<td>R2</td>\n<td>2.01s</td>\n<td>0</td>\n<td>2.01s</td>\n<td>0.008s</td>\n<td>38.1K</td>\n<td>1.92</td>\n<td>0.286</td>\n</tr>\n<tr>\n<td>borrow_live_at</td>\n<td>R5</td>\n<td>1.53s</td>\n<td>1.53s</td>\n<td>0</td>\n<td>0</td>\n<td>832K</td>\n<td>1.46</td>\n<td>6.25</td>\n</tr>\n</tbody>\n</table>\n<p>Rules — sorted by Total time, desc</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>ID</th>\n<th>Total Time</th>\n<th>Non Rec Time</th>\n<th>Rec Time</th>\n<th>Copy Time</th>\n<th>Tuples</th>\n<th>% of Time</th>\n<th>% of Tuples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dead_can_reach(R1,R3,P,Q) :-     dead_can_reach(R1,R2,P,Q),    subset(R2,R3,P),    !region_live_at(R2,Q),    !universal_region(R2).</td>\n<td>C3.2</td>\n<td>30.8s</td>\n<td>0</td>\n<td>30.8s</td>\n<td>0.061s</td>\n<td>94.2K</td>\n<td>29.5</td>\n<td>0.706</td>\n</tr>\n<tr>\n<td>requires(R2,B,P) :-     requires(R1,B,P),    subset(R1,R2,P).</td>\n<td>C4.1</td>\n<td>30.3s</td>\n<td>0</td>\n<td>24.7s</td>\n<td>5.63s</td>\n<td>8.73M</td>\n<td>29.0</td>\n<td>65.5</td>\n</tr>\n<tr>\n<td>requires(R,B,Q) :-     requires(R,B,P),    cfg_edge(P,Q),    region_live_at(R,Q),    !killed(B,P).</td>\n<td>C4.2</td>\n<td>12.4s</td>\n<td>0</td>\n<td>11.9s</td>\n<td>0.520s</td>\n<td>807K</td>\n<td>11.8</td>\n<td>6.05</td>\n</tr>\n<tr>\n<td>requires(R,B,Q) :-     requires(R,B,P),    cfg_edge(P,Q),    universal_region(R),    !killed(B,P).</td>\n<td>C4.3</td>\n<td>9.61s</td>\n<td>0</td>\n<td>9.57s</td>\n<td>0.032s</td>\n<td>50.1K</td>\n<td>9.18</td>\n<td>0.376</td>\n</tr>\n<tr>\n<td>dead_can_reach(R2,R3,P,Q) :-     live_to_dead_regions(_R1,R2,P,Q),    subset(R2,R3,P).</td>\n<td>C3.1</td>\n<td>5.25s</td>\n<td>0</td>\n<td>5.20s</td>\n<td>0.049s</td>\n<td>75.8K</td>\n<td>5.02</td>\n<td>0.568</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    region_live_at(R1,Q),    region_live_at(R2,Q).</td>\n<td>C1.1</td>\n<td>4.32s</td>\n<td>0</td>\n<td>2.93s</td>\n<td>1.39s</td>\n<td>2.15M</td>\n<td>4.13</td>\n<td>16.2</td>\n</tr>\n<tr>\n<td>subset(R1,R3,Q) :-     live_to_dead_regions(R1,R2,P,Q),    dead_can_reach(R2,R3,P,Q),    region_live_at(R3,Q).</td>\n<td>C1.5</td>\n<td>2.97s</td>\n<td>0</td>\n<td>2.96s</td>\n<td>0.010s</td>\n<td>15.4K</td>\n<td>2.84</td>\n<td>0.116</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    region_live_at(R1,Q),    universal_region(R2).</td>\n<td>C1.2</td>\n<td>2.04s</td>\n<td>0</td>\n<td>2.04s</td>\n<td>0</td>\n<td>0</td>\n<td>1.95</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    universal_region(R1),    region_live_at(R2,Q).</td>\n<td>C1.3</td>\n<td>1.70s</td>\n<td>0</td>\n<td>1.70s</td>\n<td>11.6µs</td>\n<td>18</td>\n<td>1.62</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>subset(R1,R2,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    universal_region(R1),    universal_region(R2).</td>\n<td>C1.4</td>\n<td>1.63s</td>\n<td>0</td>\n<td>1.63s</td>\n<td>0</td>\n<td>0</td>\n<td>1.56</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>borrow_live_at(P,B) :-     requires(R,B,P),    region_live_at(R,P).</td>\n<td>N5.1</td>\n<td>1.16s</td>\n<td>1.16s</td>\n<td>0</td>\n<td>0</td>\n<td>803K</td>\n<td>1.11</td>\n<td>6.02</td>\n</tr>\n<tr>\n<td>live_to_dead_regions(R1,R2,P,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    region_live_at(R1,Q),    !region_live_at(R2,Q),    !universal_region(R2).</td>\n<td>C2.1</td>\n<td>1.14s</td>\n<td>0</td>\n<td>1.13s</td>\n<td>0.011s</td>\n<td>17.3K</td>\n<td>1.09</td>\n<td>0.130</td>\n</tr>\n<tr>\n<td>live_to_dead_regions(R1,R2,P,Q) :-     subset(R1,R2,P),    cfg_edge(P,Q),    universal_region(R1),    !region_live_at(R2,Q),    !universal_region(R2).</td>\n<td>C2.2</td>\n<td>0.827s</td>\n<td>0</td>\n<td>0.813s</td>\n<td>0.013s</td>\n<td>20.8K</td>\n<td>0.790</td>\n<td>0.156</td>\n</tr>\n<tr>\n<td>borrow_live_at(P,B) :-     requires(R,B,P),    universal_region(R).</td>\n<td>N5.2</td>\n<td>0.346s</td>\n<td>0.346s</td>\n<td>0</td>\n<td>0</td>\n<td>29.8K</td>\n<td>0.331</td>\n<td>0.224</td>\n</tr>\n<tr>\n<td>subset(R1,R2,P) :-     outlives(R1,R2,P).</td>\n<td>N1.1</td>\n<td>0.061s</td>\n<td>0.061s</td>\n<td>0</td>\n<td>0</td>\n<td>534K</td>\n<td>0.058</td>\n<td>4.01</td>\n</tr>\n<tr>\n<td>requires(R,B,P) :-     borrow_region(R,B,P).</td>\n<td>N4.1</td>\n<td>248.9µs</td>\n<td>248.9µs</td>\n<td>0</td>\n<td>0</td>\n<td>1.89K</td>\n<td>0.000</td>\n<td>0.014</td>\n</tr>\n</tbody>\n</table>",
        "id": 126468056,
        "sender_full_name": "lqd",
        "timestamp": 1526145988
    },
    {
        "content": "<p>(this is not taking into account niko's recent transitive loan propagation removal)</p>",
        "id": 126468169,
        "sender_full_name": "lqd",
        "timestamp": 1526146306
    },
    {
        "content": "<blockquote>\n<p>Some more data from <code>TimelyOpt</code>: the new <code>subset</code> computation takes about 16s and produces 2,714,121 distinct facts. The <code>requires</code> computation then takes 35s longer and produces 9,585,213 distinct facts. It produces about 30m facts pre-distinctness, which isn't massively out of line with a 1us per fact rate that other computations are doing. If there really are 9.5M result <code>requires</code> tuples needed, it might be that it is time to start engineering the computation rather than the query.</p>\n</blockquote>\n<p>I'm catching up here, but <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> how did you gather these numbers? Can you did it with my latest version as well (which is substantially faster)?</p>",
        "id": 126529389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526289259
    },
    {
        "content": "<blockquote>\n<p>Niko has disabled multi-threaded execution here</p>\n</blockquote>\n<p>Oh, I did? =) I forgot about that. We should see what happens, though I think there's still plenty of room to improve on a single thread.</p>",
        "id": 126529405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526289333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> </p>\n<blockquote>\n<p>Another optimization that the triangle example above points out, which could shave constant factors but not asymptotic terms, is to use the \"arrangement\" infrastructure to arrange each (collection, key) pair at most once. </p>\n</blockquote>\n<p>So I saw the \"arrangement\" infrastructure but I totally didn't understand it. Are there docs or examples you can point me at?</p>",
        "id": 126529464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526289460
    },
    {
        "content": "<p>I pulled the new code, and will try it out tonight. Iirc, things get a bit more complicated and I have a less good intuition about what is what, but I can attach the counters to the stream output and report back.</p>",
        "id": 126532488,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526295533
    },
    {
        "content": "<p>Yeah, let's see. I have a pile of non-public code that demonstrates it.  I'll send you a copy via email (it .. relates to some other published work of people I don't want to antagonize). I'll also take a swing through the code and see if there are any opportunities for it; there were in the <code>Naive</code> code, and I may show you those changes to explain, even if that code is mostly dead.</p>",
        "id": 126532548,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526295627
    },
    {
        "content": "<p>wouldn't it be interesting to have a way to see those counters, maybe displayed with the -v flag ?</p>",
        "id": 126534483,
        "sender_full_name": "lqd",
        "timestamp": 1526299301
    },
    {
        "content": "<p>I can totally add that <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. It's just an optional e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">subset</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">consolidate</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Subset counts: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126534673,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526299566
    },
    {
        "content": "<p>(( Currently un-breaking something I broke in timely, so distracted, but can get around to that too ))</p>",
        "id": 126534698,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526299629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> thanks; I tried attaching the counters but had a hard time interpreting the output. But I was missing the <code>.map(|_| ()).consolidate()</code>, which I think would make all the difference (I was seeing way too many tuples)</p>",
        "id": 126536457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526302860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> when I use the \"arrange\", would I want to arrange <em>both</em> things being joined?</p>",
        "id": 126536684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303274
    },
    {
        "content": "<p>I guess that only makes sense if it is joined more than once, and often one side is an \"ephemeral\" result</p>",
        "id": 126536733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303308
    },
    {
        "content": "<p>also, reading the code, I guess I could not do something like <code>.semijoin(&amp;arranged_region_live)</code> -- the code seems to call <code>arrange_by_self</code> on the result, and I don't see a \"fast path\" for <code>Arranged</code></p>",
        "id": 126536814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303438
    },
    {
        "content": "<p>that is, <code>Arranged</code> doesn't implement <code>arrange_by_self</code> as a no-op</p>",
        "id": 126536817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303448
    },
    {
        "content": "<p>so I guess I have to use <code>join_core</code> then?</p>",
        "id": 126536820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303455
    },
    {
        "content": "<p>which admittedly doesn't seem too bad</p>",
        "id": 126536831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526303480
    },
    {
        "content": "<p>ok, I think I have it figured out</p>",
        "id": 126538088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526305294
    },
    {
        "content": "<p>that improved things to 14.2s; I updated the PR</p>",
        "id": 126538489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526305859
    },
    {
        "content": "<p>(fyi, just quickly hacking in a <code>-w 8</code> argument on my local machine seemed to be approx a 2x win -- 7.9s instead of 14s)</p>",
        "id": 126540583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526308849
    },
    {
        "content": "<blockquote>\n<p>@Frank McSherry when I use the \"arrange\", would I want to arrange both things being joined?</p>\n</blockquote>\n<p>As you note, it's only helpful if there is re-use, but even if you don't arrange things the non-arranged <code>join</code> and such will internally do an arrange for you. They all call in to <code>join_core</code>, and put arranges in place if you haven't already done so yourself (and they do not re-arrange an arrangement, so shouldn't be worries there).</p>",
        "id": 126541165,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526309580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> yep, I kind of pieced it together from reading the source. Using <code>arrange</code> proved to be a small win. I kept it.</p>",
        "id": 126541202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309619
    },
    {
        "content": "<p>That said, I'm not using it yet for <code>antijoin</code>, because I was too lazy :P</p>",
        "id": 126541209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309636
    },
    {
        "content": "<p>as an aside, I've been thinking btw about how to write a \"intro to differential dataflow\" tutorial =) it'd be interesting to chat over with you at some point</p>",
        "id": 126541271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> depending on your rig, it may be faster to use fewer workers than you have hardware threads. The timely workers are pretty impolite (and just sit on the cores) which can cause hiccups if the OS decides it has to do some things (one of the workers gets suspended, which can block parts of the compute).</p>",
        "id": 126541290,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526309700
    },
    {
        "content": "<p>this is why we should add a flag so we can experiment with the number :) but that said I expect in the real compiler to have many simul. jobs, so it may not typically be worth using &gt;1 worker.</p>",
        "id": 126541314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309734
    },
    {
        "content": "<p>that said, I imagine we might want to make it depend on the size of the fn</p>",
        "id": 126541322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309745
    },
    {
        "content": "<p>in any case I still think there's a lot of improvements to be made without jumping to parallelism</p>",
        "id": 126541328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526309757
    },
    {
        "content": "<p>Totally. Is it correct that the \"output\" for the computation is just the <code>borrow_live_at</code> relation? Is it important to compute all of <code>subset</code> and <code>requires</code> other than for determining <code>bla</code>, and might it be possible that derived <code>bla</code> tuples can suppress derivations in <code>subset</code> and <code>requires</code>?</p>",
        "id": 126541409,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526309826
    },
    {
        "content": "<p>heh, I was going to ask if timely used rayon work-stealing :)</p>",
        "id": 126541421,
        "sender_full_name": "qmx",
        "timestamp": 1526309859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> It doesn't (use rayon). It's a sane question to ask if that makes sense, but it conflicts a bit with the dataflow design elsewhere (e.g. the inter-operator shared state all needs mutexes, at least if done naively).</p>",
        "id": 126541517,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526309975
    },
    {
        "content": "<blockquote>\n<p>Is it correct that the \"output\" for the computation is just the <code>borrow_live_at</code> relation?</p>\n</blockquote>\n<p>Mostly; in fact, I think we can make an even more narrow relation -- this is what <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> have been working on in issue #4. Basically, we can narrow down to a set of points and loans where we need <code>borrow_live_at</code>.</p>\n<p>That said, there is one other piece of the check that I have to think about, where we might wind up needing <code>subset</code> in some other cases. (But still not the full relation)</p>\n<blockquote>\n<p>Is it important to compute all of <code>subset</code> and <code>requires</code> other than for determining <code>bla</code></p>\n</blockquote>\n<p>No</p>\n<blockquote>\n<p>and might it be possible that derived <code>bla</code> tuples can suppress derivations in <code>subset</code> and <code>requires</code>?</p>\n</blockquote>\n<p>I think you are saying \"is it possible that -- because <code>borrow_live_at</code> only cares about <em>some</em> region that requires a loan L -- we might save some time because right now we compute <em>all</em> regions that require that loan L?\" If so, that might be true. I'm not really sure how much in practice now that I've suppressed the transitive computation. I suppose we could try to figure it out.</p>",
        "id": 126541615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526310092
    },
    {
        "content": "<p>I was also wondering whether we will save time just by knowing that we only care about a subset of loans in any case. But It's hard to say how often that will be true.</p>",
        "id": 126541683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526310142
    },
    {
        "content": "<p>In previous version (as of a day or two back) the size of <code>requires</code> was about 10x that of <code>borrow_live_at</code>, which made it seem like perhaps there were ways to thin down redundant derivations. Total speculation, though.</p>",
        "id": 126541710,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526310182
    },
    {
        "content": "<p>makes sense; it's worth checking again</p>",
        "id": 126541795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526310281
    },
    {
        "content": "<p>in any case I'd like to add some kind of <code>count</code> calls that can dump out the size of each relation</p>",
        "id": 126541801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526310300
    },
    {
        "content": "<p>\"Regular Datalog\" for incremental view maintenance from this paper <a href=\"https://arxiv.org/abs/1804.10565\" target=\"_blank\" title=\"https://arxiv.org/abs/1804.10565\">https://arxiv.org/abs/1804.10565</a> could be interesting in our case (but maybe too limiting)</p>",
        "id": 126558215,
        "sender_full_name": "lqd",
        "timestamp": 1526331888
    },
    {
        "content": "<p>I just wrote a Datalog-specific framework, not built on timely dataflow. It is a lot simpler, and could in principle be a lot faster. At the moment it is not actually faster, due to be being lazy about how I do merge sort. It's about 300 lines of code, and currently correctly does a reference reachability computation. The intent here is that if it ends up both i. faster and ii. easier to integrate into rustc, then great!</p>",
        "id": 126642898,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I'm not sure what you are saying, is this a new project?</p>",
        "id": 126642955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span>  I was looking at Jamie Brandon's older Imp ideas for the same reason if you remember his work (some with DD :)</p>",
        "id": 126642958,
        "sender_full_name": "lqd",
        "timestamp": 1526474215
    },
    {
        "content": "<p>Yeah, brand new as of this morning.</p>",
        "id": 126642959,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474216
    },
    {
        "content": "<p>interesting. I was wondering whether a \"pared down differential-dataflow\" might do well for us</p>",
        "id": 126642968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474240
    },
    {
        "content": "<p>Currently trying to sort out some performance issues (using <code>sort_unstable</code> increases running time by about 1.5x over <code>sort</code>).</p>",
        "id": 126642974,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474256
    },
    {
        "content": "<p>It's a super-simple implementation. I'll try and document it a bit more this evening. Currently does monotonic variables with join and map, but semijoin and antijoin should be easy.</p>",
        "id": 126643029,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474323
    },
    {
        "content": "<p>cool.</p>",
        "id": 126643035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526474341
    },
    {
        "content": "<p>Here's a gist at the moment: <a href=\"https://gist.github.com/frankmcsherry/60be7cfe54b5bf096e879c9d15d679e1\" target=\"_blank\" title=\"https://gist.github.com/frankmcsherry/60be7cfe54b5bf096e879c9d15d679e1\">https://gist.github.com/frankmcsherry/60be7cfe54b5bf096e879c9d15d679e1</a></p>\n<p>it's not well explained yet, but roughly: variables have a pile of facts, a \"recent\" pile of facts (new as of the last round) and a \"to_add\" pile of facts that should be introduced in the next round (and made recent). All of the operators look at variables as inputs, and produce new outputs \"to_add\".</p>",
        "id": 126643095,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474435
    },
    {
        "content": "<p>This part is what a program looks like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iteration</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iteration</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">variable1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iteration</span><span class=\"p\">.</span><span class=\"n\">variable</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;nodes&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">variable2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iteration</span><span class=\"p\">.</span><span class=\"n\">variable</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;edges&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">variable1</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">variable2</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">iteration</span><span class=\"p\">.</span><span class=\"n\">changed</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// N(a,c) &lt;-  N(a,b), E(b,c)</span>\n<span class=\"w\">        </span><span class=\"n\">join_into</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">variable1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">variable2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">variable1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">variable1</span><span class=\"p\">.</span><span class=\"n\">complete</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126643109,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474476
    },
    {
        "content": "<p>the return of <code>gallop</code>:)</p>",
        "id": 126643179,
        "sender_full_name": "lqd",
        "timestamp": 1526474622
    },
    {
        "content": "<p>It's the same one that Jamie used, fwiw. :)</p>",
        "id": 126643186,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526474639
    },
    {
        "content": "<p>this might be not the end solution, but is immensely useful to me on the educational front to understand what's going on :)</p>",
        "id": 126643372,
        "sender_full_name": "qmx",
        "timestamp": 1526474888
    },
    {
        "content": "<p>I figure another advantage might be that, that this is a bit easier to grok, maintain, and debug (correctness/performance) if things go wrong (or if I get hit by a bus).</p>",
        "id": 126643536,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526475197
    },
    {
        "content": "<p>Also, this reachability example at least takes 1.3s to compile in release mode. That might be welcome too. :)</p>",
        "id": 126643537,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526475197
    },
    {
        "content": "<p>I hadn't really considered this, but I love the idea of having a rust-lang-nursery crate that is just the core \"datalog-y\" framework that is owned by compiler team</p>",
        "id": 126643690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475395
    },
    {
        "content": "<p>it does address some of my other concerns about taking on differential-dataflow as a dependency</p>",
        "id": 126643692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475405
    },
    {
        "content": "<p>e.g., I would prefer we keep rustc deps easily auditable</p>",
        "id": 126643698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475415
    },
    {
        "content": "<p>it actually doesn't matter whether it's owned by rust-lang-nursery or not, but basically I just mean a project that can grow its own community</p>",
        "id": 126643712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475438
    },
    {
        "content": "<p>and presumably be usable outside of just borrow-check</p>",
        "id": 126643715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475446
    },
    {
        "content": "<p>I feel like a number of compiler optimizations etc might benefit from the same infrastructure</p>",
        "id": 126643720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475458
    },
    {
        "content": "<p>obvious example; we compute liveness by hand with a home-grown thing</p>",
        "id": 126643783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475517
    },
    {
        "content": "<p>(I have contemplated integrating that computaiton into borrow-check as well at some point...)</p>",
        "id": 126643796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526475540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> the more I think about this the more I like it :) question: how long do you think it will take you to get something usable, <em>and</em>, would there be ways for us to help you :)</p>",
        "id": 126644465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526476556
    },
    {
        "content": "<p>\"you're not alone man\"</p>",
        "id": 126644507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526476571
    },
    {
        "content": "<p>It's up and running. I'll push a version to github, and you can take a peek / comment on what's missing etc.</p>",
        "id": 126645282,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526477713
    },
    {
        "content": "<p>we definitely need <code>antijoin</code> etc</p>",
        "id": 126645285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477730
    },
    {
        "content": "<p>though only I think on facts</p>",
        "id": 126645287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477736
    },
    {
        "content": "<p>maybe I can see if I can ascertain how one might add it ;)</p>",
        "id": 126645291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477745
    },
    {
        "content": "<p>do we name things <code>datalog-rs</code> or <code>datalog_rs</code> or what?</p>",
        "id": 126645293,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526477747
    },
    {
        "content": "<p>Oh, antijoin is super easy; I can do that, just lazy.</p>",
        "id": 126645298,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526477759
    },
    {
        "content": "<p>crate names should have <code>-</code></p>",
        "id": 126645299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477759
    },
    {
        "content": "<blockquote>\n<p>Oh, antijoin is super easy; I can do that, just lazy.</p>\n</blockquote>\n<p>I figured, it might just be interesting for me to contemplate how to do it :)</p>",
        "id": 126645342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477770
    },
    {
        "content": "<p>in order to make myself understand code better</p>",
        "id": 126645343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477774
    },
    {
        "content": "<p>although it looked prety clear from my skim</p>",
        "id": 126645345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477778
    },
    {
        "content": "<p>(I don't know if I'll have time for that today anyway, i'm on a compressed schedule since I have to take my daughter to the hospital later)</p>",
        "id": 126645352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477799
    },
    {
        "content": "<p>Ah, in which case I can give you a chance. :)  There is some code with the signature commented out, but the logic in the body is totally not correct. (in the gist).</p>",
        "id": 126645353,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526477801
    },
    {
        "content": "<blockquote>\n<p>do we name things <code>datalog-rs</code> or <code>datalog_rs</code> or what?</p>\n</blockquote>\n<p>and it's recommended to not have \"rs\". I think Cargo will remove it automatically now</p>",
        "id": 126645358,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526477816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> heh don't feel the need to wait for me :)</p>",
        "id": 126645359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477818
    },
    {
        "content": "<p>oh, that too</p>",
        "id": 126645363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477823
    },
    {
        "content": "<p>but I think the github project can have it, just the cargo name typically doesn't</p>",
        "id": 126645380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477849
    },
    {
        "content": "<p>for obvious reasons</p>",
        "id": 126645382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I halt the other efforts in lieu of integrating this?</p>",
        "id": 126645389,
        "sender_full_name": "qmx",
        "timestamp": 1526477867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> I still think we want to do that factoring</p>",
        "id": 126645396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477880
    },
    {
        "content": "<p>but probably not worth investigating how to get differential-dataflow into rustc</p>",
        "id": 126645441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477890
    },
    {
        "content": "<p>until we decide one way or the other here</p>",
        "id": 126645443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477895
    },
    {
        "content": "<p>that is, we still want to factor borrow-check itself into a reusable library</p>",
        "id": 126645445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477903
    },
    {
        "content": "<p>grr, I need to take a month-long vacation to play with rust</p>",
        "id": 126645461,
        "sender_full_name": "qmx",
        "timestamp": 1526477940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> do it do it</p>",
        "id": 126645470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526477954
    },
    {
        "content": "<p>/me looks at the clock</p>",
        "id": 126645472,
        "sender_full_name": "qmx",
        "timestamp": 1526477954
    },
    {
        "content": "<p><a href=\"https://github.com/frankmcsherry/datalog-rs\" target=\"_blank\" title=\"https://github.com/frankmcsherry/datalog-rs\">https://github.com/frankmcsherry/datalog-rs</a></p>",
        "id": 126645535,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526478020
    },
    {
        "content": "<p>What does <span class=\"emoji emoji-1f980\" title=\"crab\">:crab:</span> mean?</p>",
        "id": 126646277,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526479101
    },
    {
        "content": "<p>It's like the bat-sign, but for Rust code? :)</p>",
        "id": 126646281,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526479114
    },
    {
        "content": "<p><a href=\"http://www.rustacean.net/\" target=\"_blank\" title=\"http://www.rustacean.net/\">http://www.rustacean.net/</a></p>",
        "id": 126646299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479151
    },
    {
        "content": "<p>I use it to indicate ferris =)</p>",
        "id": 126646311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479173
    },
    {
        "content": "<p>![ferris](<a href=\"http://www.rustacean.net/assets/rustacean-orig-noshadow.png\" target=\"_blank\" title=\"http://www.rustacean.net/assets/rustacean-orig-noshadow.png\">http://www.rustacean.net/assets/rustacean-orig-noshadow.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"http://www.rustacean.net/assets/rustacean-orig-noshadow.png\" target=\"_blank\" title=\"http://www.rustacean.net/assets/rustacean-orig-noshadow.png\"><img src=\"https://uploads.zulipusercontent.net/5e3c036eb2de043c5419db13f683e6c9c8ae3aac/687474703a2f2f7777772e72757374616365616e2e6e65742f6173736574732f72757374616365616e2d6f7269672d6e6f736861646f772e706e67\"></a></div>",
        "id": 126646388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479267
    },
    {
        "content": "<p>a Rusty high five ;)</p>",
        "id": 126646397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479305
    },
    {
        "content": "<p>I was just trying to suss out the social implication. Like, if all of you had bowed your heads and clicked your hands as you scuttled side to side, you know \"gotcha, but weird\". :)</p>",
        "id": 126646447,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526479330
    },
    {
        "content": "<p>Rusty high five is better. ;)   Antijoin is live, btw. Not tested yet, though.</p>",
        "id": 126646463,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526479350
    },
    {
        "content": "<p>if we could configure this part of Zulip, I would make the <code>+</code> key add the <span class=\"emoji emoji-1f980\" title=\"crab\">:crab:</span> instead of <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 126646477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479388
    },
    {
        "content": "<p>maybe I should open an issue</p>",
        "id": 126646479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526479403
    },
    {
        "content": "<p>Wow. + does do that!</p>",
        "id": 126646531,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526479467
    },
    {
        "content": "<p>Repo updated with a hypothetical borrow checker (from naive, but without the universal region stuff). I haven't checked that it is correct yet, and so very bold to claim it would work. I did verify the reachability computation, but I'll try and get some facts loaded in and see if it produces the right number of tuples at least.</p>",
        "id": 126648966,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526482661
    },
    {
        "content": "<p>(the zoidberg salute :3)</p>",
        "id": 126649015,
        "sender_full_name": "lqd",
        "timestamp": 1526482714
    },
    {
        "content": "<p>Also, you can see from the <code>borrow_check.rs</code> example,  <a href=\"https://github.com/frankmcsherry/datalog-rs/blob/master/src/bin/borrow_check.rs\" target=\"_blank\" title=\"https://github.com/frankmcsherry/datalog-rs/blob/master/src/bin/borrow_check.rs\">https://github.com/frankmcsherry/datalog-rs/blob/master/src/bin/borrow_check.rs</a>, that the syntax can be a bit heavy. No method chaining at the moment, in the interest of keeping things lightweight (each call needs some more state managed, and we ask the programmer to do that manually rather than stashing it somewhere secret and managing it).</p>",
        "id": 126649028,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526482749
    },
    {
        "content": "<p>if need be we can also generate calls to this API, parsed from datalog clauses</p>",
        "id": 126649127,
        "sender_full_name": "lqd",
        "timestamp": 1526482879
    },
    {
        "content": "<p>I guess a key difference here is that you are not — as in differential-dataflow — modeling a program, but rather directly executing the actions</p>",
        "id": 126649128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526482883
    },
    {
        "content": "<p>right?</p>",
        "id": 126649131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526482893
    },
    {
        "content": "<p>(hence the <code>while</code> and so forth)</p>",
        "id": 126649140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526482916
    },
    {
        "content": "<p>That is definitely a difference, yes. Each of the \"direct executions\" says \"pick up any new records since last time around, and do what needs to be done wrt adding records to the output\".</p>",
        "id": 126649188,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526482941
    },
    {
        "content": "<p>but it does mean that someone needs to name the output, as the loop itself doesn't persist any state from iteration to iteration.</p>",
        "id": 126649195,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526482969
    },
    {
        "content": "<p>I'm not sure what you mean by \"name\" yet</p>",
        "id": 126649210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483006
    },
    {
        "content": "<p>Could probably clean this up a bit idiomatically, but could also let it be. It was pretty formulaic writing out the names of the intermediate relations, if tedious.</p>",
        "id": 126649220,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>subset_r1p.from_map(&amp;subset, |&amp;(r1,r2,p)| ((r1,p),r2));\n</pre></div>",
        "id": 126649221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483029
    },
    {
        "content": "<p>I guess <code>subset_r1p</code>  is the \"named output\"</p>",
        "id": 126649272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483053
    },
    {
        "content": "<p>\"name\" meaning only \"the operator itself does not create such a thing for you\". So you need to point the operator at some place for it to put the results.</p>",
        "id": 126649273,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483055
    },
    {
        "content": "<p>you are referring to?</p>",
        "id": 126649274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483056
    },
    {
        "content": "<p>Yes! The code is written as a lot of <code>relation.from_operator(...)</code> where the <code>relation</code> gets some more facts from the application of whatever the operator is.</p>",
        "id": 126649280,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483091
    },
    {
        "content": "<p>right, ok. I mean I think that's fine for now.</p>",
        "id": 126649288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483104
    },
    {
        "content": "<p>it is still pretty easy to map to-from the underlying datalog</p>",
        "id": 126649294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483114
    },
    {
        "content": "<p>Old code was <code>rel1.join(&amp;rel2).join(&amp;rel3).map(..).blah(...)</code> where each step along the way the framework built the temporary collection to manage stuff; here the programmer has to do it.</p>",
        "id": 126649299,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483141
    },
    {
        "content": "<p>yes I get it</p>",
        "id": 126649353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483224
    },
    {
        "content": "<p>clearly the old code was nicer</p>",
        "id": 126649360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483227
    },
    {
        "content": "<p>but this seems ok too</p>",
        "id": 126649361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483230
    },
    {
        "content": "<p>we might be able to make some scheme where you create temporaries</p>",
        "id": 126649366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483248
    },
    {
        "content": "<p>that are not named</p>",
        "id": 126649367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483253
    },
    {
        "content": "<p>well, I guess they have to persist across loop iterations</p>",
        "id": 126649368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483257
    },
    {
        "content": "<p>so that doesn't work</p>",
        "id": 126649369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483259
    },
    {
        "content": "<p>Yeah, some things like <code>map</code> could be simplified, but (at least in this implementation) you need a <code>Variable</code> wherever you want a collection indexed by some key so that you can do a join/antijoin.</p>",
        "id": 126649434,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483355
    },
    {
        "content": "<p>So for example the <code>subset</code> variable could probably be removed, as it contributes nothing over the three indexed variants. One can be produced, and the other two derived from it with <code>from_map()</code>.</p>",
        "id": 126649488,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483417
    },
    {
        "content": "<p>I was wondering whether this model allowed for us to optimize cases where we know something will be joined many times</p>",
        "id": 126649497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483443
    },
    {
        "content": "<p>e.g. something like <code>arrange</code></p>",
        "id": 126649498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483450
    },
    {
        "content": "<p>(I didn't read closely enough yet to see)</p>",
        "id": 126649501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483465
    },
    {
        "content": "<p>Already does! :D</p>",
        "id": 126649505,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483466
    },
    {
        "content": "<p>For example, in the definition of <code>subset</code>, the two uses of <code>&amp;region_live_at</code> are just the same variable.</p>",
        "id": 126649515,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483499
    },
    {
        "content": "<p>/me looks</p>",
        "id": 126649564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483547
    },
    {
        "content": "<p>I see</p>",
        "id": 126649573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483572
    },
    {
        "content": "<p>This .. loses a lot of the flexibility of differential dataflow. The <code>Variable</code> types are roughly \"two-version\" relations, reflecting an \"old\" version and a \"new\" version. But because we know exactly when we want to use old and new, and when the entire world ticks forward from old to new (at the bottom of each loop), it is a bit easier to share the state.</p>",
        "id": 126649586,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> are variables always (K, V) tuples?</p>",
        "id": 126649587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526483591
    },
    {
        "content": "<p>Variables are arbitrary <code>Tuple: Ord</code> types, and join applies when they are <code>(Key, Val)</code> pairs.</p>",
        "id": 126649592,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483611
    },
    {
        "content": "<p>I guess they don't even have to be tuples, so perhaps that is a misnomer.</p>",
        "id": 126649679,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483760
    },
    {
        "content": "<p>btw, (looking at the code) there are some weird perf gotchas. When we first create relations (sorted lists of tuples) <code>sort_unstable()</code> is faster than <code>sort()</code>, but when we merge relations then <code>sort()</code> is about 1.5x faster than <code>sort_unstable()</code>. Not sure what is up, but there are probably similar gotchas to watch out for perf-wise.</p>",
        "id": 126649759,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483838
    },
    {
        "content": "<p>On the plus side, can just point a profiler at it and see wtf is going on, and change it, I guess. :)</p>",
        "id": 126649766,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526483862
    },
    {
        "content": "<p>The <code>datalog</code> crate name is taken, so working name is now <code>datafrog</code>. Complaints can be directed to .. well the maintainer of the <code>datalog</code> crate first, but then to /dev/null.</p>",
        "id": 126651868,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526486520
    },
    {
        "content": "<p>I think I prefer <code>datafrog</code></p>",
        "id": 126651910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526486539
    },
    {
        "content": "<p>I see the logo already :P</p>",
        "id": 126651914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526486554
    },
    {
        "content": "<p><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126651986,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526486677
    },
    {
        "content": "<p>even better, it's pre-drawn for you</p>",
        "id": 126652015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526486749
    },
    {
        "content": "<p>someone will expect leapfrog triejoin then :p</p>",
        "id": 126652061,
        "sender_full_name": "lqd",
        "timestamp": 1526486768
    },
    {
        "content": "<p>Oh wow, good point <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 126652111,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526486883
    },
    {
        "content": "<p>I've pushed some doctests, it seems that in simple examples at least <code>join</code>, <code>antijoin</code>, and <code>map</code> work as planned. I'm actually flying to Vienna for some talks tomorrow morning (8pm here now) so not sure how much I'll get done wrt trying out <code>borrow_check.rs</code>. Happy to help out and put some time in when I get it, but I'll probably also take some time to check out Vienna too! :)</p>",
        "id": 126656227,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526492729
    },
    {
        "content": "<p>This is all in that same repo ?</p>",
        "id": 126657281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526494147
    },
    {
        "content": "<p>yes</p>",
        "id": 126657350,
        "sender_full_name": "lqd",
        "timestamp": 1526494213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> bon voyage :)</p>",
        "id": 126657355,
        "sender_full_name": "lqd",
        "timestamp": 1526494226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I've continued your borrowck-data <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> example: 1) loaded nll facts, 2) added <code>borrow_live_at</code>(but couldn't test it) 3) and begun testing the computation: the first iteration, computing <code>subset</code>, works and produces the same tuples as DD. However, the next iteration, for <code>requires</code> doesn't: I've surely made a mistake in the inputs or something, but I don't know where (that's also the reason why I couldn't test if <code>borrow_live_at</code> is correctly done or not). My branch is here <a href=\"https://github.com/lqd/borrow-check/tree/datafrog\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/datafrog\">https://github.com/lqd/borrow-check/tree/datafrog</a> — I've also temporarily disabled timely there so that it builds in 15s. I was testing with the smaller issue-47680 input, <code>requires</code>produces around 100 tuples instead of approx 150.</p>",
        "id": 126674721,
        "sender_full_name": "lqd",
        "timestamp": 1526519521
    },
    {
        "content": "<p>I'm very pleased with \"datafrog\". Well done.</p>",
        "id": 126677092,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526524818
    },
    {
        "content": "<p>I'll check it out <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. One possible outcome (other than \"you erred\" or \"I erred\") is that it is computing the same answer, just differently. This implementation intentionally holds data back a bit longer to make sure everyone gets the same single view of the data, and that might mean that it takes more rounds for the facts to propagate (roughly the same amount of work though).</p>\n<p>Ima investigate, but if you notice that it does indeed reach a different limit (different number of <code>bla</code> facts, for example) that is 100% evidence that something is wrong, whereas \"second round different\" might just be a warning sign.</p>",
        "id": 126681867,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526535453
    },
    {
        "content": "<p>Ok, totally not the right total number of tuples:</p>\n<div class=\"codehilite\"><pre><span></span>Echidnatron% cargo +nightly run --release -- -a Datafrog inputs/clap-rs/app-parser-{{impl}}-add_defaults/\n    Finished release [optimized] target(s) in 0.08s\n     Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults/&#39;`\nsubset is complete: 7531526\nrequires is complete: 84101\nborrow_live_at is complete: 31933\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 33.721s\n</pre></div>",
        "id": 126682135,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526536055
    },
    {
        "content": "<p>The count for subset looks \"correct\" (previously reported as 7.53M tuples), so will dive in to <code>requires</code> and what might be up there!</p>",
        "id": 126682182,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526536145
    },
    {
        "content": "<p>Ah, one important thing (sorry!): the <code>borrow_check.rs</code> code that I hacked up (which looks like what you've based things on) totally ignored universal regions. I saw the issue that they were going away, and didn't port them for reasons of simplicity. But as long as the <code>region_live_at</code> relations don't yet have the universal regions in them that could be a source of discrepancy. Could be other issues too, of course. :D</p>",
        "id": 126682235,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526536252
    },
    {
        "content": "<p>Further study (no answers yet) but it will almost 100% be the case that the number of tuples in each round of derivation are different from before. In particular each operator application takes one round to take effect, including easy operators like <code>from_map</code>. That shouldn't cause the computation to reach a different limit, so the glitchy outputs at the moment are still unresolved. Possible answers: i. bugs (datafrog loves bugs), ii. universal regions.</p>",
        "id": 126682519,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526536807
    },
    {
        "content": "<p>Wait (reading your code more) you seem to have noticed the universal region thing and addressed it! I'm looking at the same issue you are looking at, and it seems small enough to get data out that are not what we expect. I'm not sure of the easiest way to get a dump of the legit <code>requires</code> facts from <code>-a Naive</code>, but if we have those and can start to debug the \"when was this fact supposed to show up\" process, that would be my next step.</p>",
        "id": 126683110,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526538035
    },
    {
        "content": "<p>It does totally look like Datafrog bug though. Other options seem to have expired.</p>",
        "id": 126683121,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526538071
    },
    {
        "content": "<p>Boarding in six minutes, so unlikely to solve right now. I can pick up the debugging later tonight, but next step is to find a tuple (or all 50) that should be derived but are not, so that we can check for the moment that should have happened and see what silly code prevented it.</p>",
        "id": 126683283,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526538366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> thank you for looking into this! I'll keep digging don't worry about it, enjoy the talks and Vienna :)  I was going to try and compare the <code>requires</code> subrules to what Native outputs (rn it's dumped with <code>-v</code>, as a list named <code>restricts</code> in the output). I'll try later today to get more information about the missing tuples. thanks again</p>",
        "id": 126685018,
        "sender_full_name": "lqd",
        "timestamp": 1526541787
    },
    {
        "content": "<p>\"my kingdom for why-not provenance\"</p>",
        "id": 126685095,
        "sender_full_name": "lqd",
        "timestamp": 1526541938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> nice!</p>",
        "id": 126686333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526544465
    },
    {
        "content": "<p>My plan for this evening: grab the facts output from Datafrog and check that i. if you run the computation again you get no more facts (if it has reached fixed point you shouldn't, but maybe you do because bugs) and ii. when you input them into Souffle with the same rules you should get a few more facts (up to the ~150). These new facts are the ones that should be derived but are not, and should be easy to check out (with the same interned numbers as Datafrog).</p>\n<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, do you have a Souffle implementation of the Naive rules on hand? I know you had one version, once, but is it something you can check in to your repo?</p>",
        "id": 126698751,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526565831
    },
    {
        "content": "<p>I've not had a chance to check out datafrog yet</p>",
        "id": 126698802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526565855
    },
    {
        "content": "<p>/me dying to do that</p>",
        "id": 126698804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526565860
    },
    {
        "content": "<p>sure, I have both the naive and opt one</p>",
        "id": 126698805,
        "sender_full_name": "lqd",
        "timestamp": 1526565864
    },
    {
        "content": "<p>(I made a bit of progress I'll explain a bit later)</p>",
        "id": 126698813,
        "sender_full_name": "lqd",
        "timestamp": 1526565889
    },
    {
        "content": "<p>Cool; between meetings now, and can check back in a few hours!</p>",
        "id": 126698830,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526565915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> can't commit rn, but here's a gist of both in the meantime <a href=\"https://gist.github.com/lqd/cb4c1e615be1eb0bcbf17919c0cef937\" target=\"_blank\" title=\"https://gist.github.com/lqd/cb4c1e615be1eb0bcbf17919c0cef937\">https://gist.github.com/lqd/cb4c1e615be1eb0bcbf17919c0cef937</a> (the opt one worked in my tests but I'm not sure if I correctly translated the universal_region removal; no biggie since you wanted the naive one)</p>",
        "id": 126698991,
        "sender_full_name": "lqd",
        "timestamp": 1526566117
    },
    {
        "content": "<p>Tyvm!</p>",
        "id": 126699001,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526566141
    },
    {
        "content": "<p><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126699011,
        "sender_full_name": "lqd",
        "timestamp": 1526566153
    },
    {
        "content": "<p>(datafrog is indeed a name as cool as Frank's previous \"differential dataflog\" :D)</p>",
        "id": 126699026,
        "sender_full_name": "lqd",
        "timestamp": 1526566199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> </p>\n<div class=\"codehilite\"><pre><span></span>Echidnatron% souffle -c ~/Projects/borrow-check/naive.dl | wc\n     106     208    2241\nEchidnatron%\n</pre></div>",
        "id": 126699276,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526566553
    },
    {
        "content": "<p>Are we sure that 150-ish is the right answer?</p>",
        "id": 126699326,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526566585
    },
    {
        "content": "<p>I remember something like 135 now lemme check</p>",
        "id": 126699338,
        "sender_full_name": "lqd",
        "timestamp": 1526566624
    },
    {
        "content": "<p>Oh wait, this is <code>bla</code> as output, and you are worried about <code>requires</code>. Nevermind me!</p>",
        "id": 126699342,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526566627
    },
    {
        "content": "<p>think soufflé finds 152 requires</p>",
        "id": 126699505,
        "sender_full_name": "lqd",
        "timestamp": 1526566854
    },
    {
        "content": "<p>I think the last of the requires rules is interesting, commenting out the rest basically gives the same output as DD</p>",
        "id": 126699570,
        "sender_full_name": "lqd",
        "timestamp": 1526566948
    },
    {
        "content": "<p>the tuple I was about to try and locate was :<br>\ntimely (hopefully soufflé as well :p) has</p>\n<div class=\"codehilite\"><pre><span></span>&quot;Mid(bb2[0])&quot;    &quot;\\&#39;_#6r&quot;         &quot;bw0&quot;\n&quot;Mid(bb2[0])&quot;    &quot;\\&#39;_#6r&quot;         &quot;bw2&quot;\n</pre></div>",
        "id": 126699593,
        "sender_full_name": "lqd",
        "timestamp": 1526566998
    },
    {
        "content": "<p>datafrog only has the bw0 one</p>",
        "id": 126699604,
        "sender_full_name": "lqd",
        "timestamp": 1526567012
    },
    {
        "content": "<p>Cool; this is helpful! My plan is to try and get souffle going on the interned index values; do you think going backwards from the interned indices to strings is better (I'm not clear on how to do that)</p>",
        "id": 126699667,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526567081
    },
    {
        "content": "<p>I was just doing that rn</p>",
        "id": 126699676,
        "sender_full_name": "lqd",
        "timestamp": 1526567101
    },
    {
        "content": "<p>InternerTables \"untern\" could I think be used to get back from those strings to the indices</p>",
        "id": 126699702,
        "sender_full_name": "lqd",
        "timestamp": 1526567132
    },
    {
        "content": "<p>but maybe using the interned values with soufflé would be less of a hassle I'm not sure</p>",
        "id": 126699760,
        "sender_full_name": "lqd",
        "timestamp": 1526567181
    },
    {
        "content": "<p>Unless you strongly object, I'm just going to hack Datafrog to dump the interned tables as text, so that I can Souffle them up and use those values.</p>",
        "id": 126699769,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526567200
    },
    {
        "content": "<p>oh I'm not objecting anything :D</p>",
        "id": 126699786,
        "sender_full_name": "lqd",
        "timestamp": 1526567241
    },
    {
        "content": "<p>(don't take this sentence out of context)</p>",
        "id": 126699799,
        "sender_full_name": "lqd",
        "timestamp": 1526567258
    },
    {
        "content": "<p>okies, off to meetings! I should get some dataz for you soon (well, later this evening).</p>",
        "id": 126699882,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526567347
    },
    {
        "content": "<p>awesome :) (just a heads up I might not have access to a computer this evening)</p>",
        "id": 126700050,
        "sender_full_name": "lqd",
        "timestamp": 1526567591
    },
    {
        "content": "<p>interestingly enough, all the 47 missing tuples from <code>requires</code> seem to be for the <code>bw2</code> loan</p>",
        "id": 126706127,
        "sender_full_name": "lqd",
        "timestamp": 1526575112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I might be onto something, around the killed antijoin; killed is a &lt;L, P&gt; and it might need to be like the other semijoins, like &lt;(L, P), ()&gt;</p>",
        "id": 126708901,
        "sender_full_name": "lqd",
        "timestamp": 1526578548
    },
    {
        "content": "<p>or maybe not :/ but something is up with this antijoin</p>",
        "id": 126709115,
        "sender_full_name": "lqd",
        "timestamp": 1526578793
    },
    {
        "content": "<p>some more results: hacking the worst antijoin of all time, joining <code>requires_bp((b,p),r)</code> into <code>requires_1</code> only if <code>(b, p)</code> is not in <code>killed</code>, we have:</p>\n<div class=\"codehilite\"><pre><span></span>subset is complete: 30\nrequires is complete: 152\nborrow_live_at is complete: 102\n</pre></div>\n\n\n<p>of course these 102 data<span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> <code>bla</code> are the same ones timely returns :3</p>",
        "id": 126710587,
        "sender_full_name": "lqd",
        "timestamp": 1526580349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I don't understand that last line -- oh, bla is <code>borrow_live_at</code></p>",
        "id": 126710680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526580435
    },
    {
        "content": "<p>yes sorry</p>",
        "id": 126710686,
        "sender_full_name": "lqd",
        "timestamp": 1526580447
    },
    {
        "content": "<p>so basically <code>antijoin</code> is the problem, definitely</p>",
        "id": 126710687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526580447
    },
    {
        "content": "<p>probably more my inputs to it I think</p>",
        "id": 126710696,
        "sender_full_name": "lqd",
        "timestamp": 1526580468
    },
    {
        "content": "<p>but there's a mismatch between what frank's requires_1 expected (eg a relation) vs what i could be (if it's the semijoin structure I mentioned)</p>",
        "id": 126710755,
        "sender_full_name": "lqd",
        "timestamp": 1526580513
    },
    {
        "content": "<p>it's definitely around this predicate for sure tho, so that's good to know :)</p>",
        "id": 126710778,
        "sender_full_name": "lqd",
        "timestamp": 1526580552
    },
    {
        "content": "<p>we gotta rename <code>borrow_live_at</code> to <code>loan_live_at</code>, so that the acronym is <code>lla</code> :)</p>",
        "id": 126710786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526580570
    },
    {
        "content": "<p>/me gets confused each time he sees \"bla\"</p>",
        "id": 126710792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526580580
    },
    {
        "content": "<p>and all Bs to Ls !</p>",
        "id": 126710795,
        "sender_full_name": "lqd",
        "timestamp": 1526580586
    },
    {
        "content": "<p>tried it with clap just to check the number of tuples and we're at 832392 <code>borrow_live_at</code> like we expect <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span>  (I don't want to talk about how long it took  :p)</p>",
        "id": 126712198,
        "sender_full_name": "lqd",
        "timestamp": 1526582422
    },
    {
        "content": "<p>that's with the \"worst antijoin ever\"?</p>",
        "id": 126712636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526583061
    },
    {
        "content": "<p>yes indeed, and more copies/indexing than necessary (as I was trying to stay as close to the initial rules) as some of the indexing work can be shared between the 1st 2 \"iterations\" (as was the case with frank's original example btw)</p>",
        "id": 126712700,
        "sender_full_name": "lqd",
        "timestamp": 1526583150
    },
    {
        "content": "<p>for the smaller input it's very competitive even in this state</p>",
        "id": 126712727,
        "sender_full_name": "lqd",
        "timestamp": 1526583214
    },
    {
        "content": "<p>/me facepalms</p>",
        "id": 126712806,
        "sender_full_name": "lqd",
        "timestamp": 1526583315
    },
    {
        "content": "<p>lemme check something real quick lol</p>",
        "id": 126712813,
        "sender_full_name": "lqd",
        "timestamp": 1526583331
    },
    {
        "content": "<p>ok I take it back I do want to talk about it</p>",
        "id": 126712887,
        "sender_full_name": "lqd",
        "timestamp": 1526583424
    },
    {
        "content": "<p>with all the caveats I mentioned before, we're at 60s naive data-<span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> vs 148s for naive DD</p>",
        "id": 126712946,
        "sender_full_name": "lqd",
        "timestamp": 1526583485
    },
    {
        "content": "<p>of course among the long command line, sorting &amp; uniquing and diffing the output, of course the \"--release\" characters were missing</p>",
        "id": 126712992,
        "sender_full_name": "lqd",
        "timestamp": 1526583574
    },
    {
        "content": "<p>that's awesome!</p>",
        "id": 126712999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526583593
    },
    {
        "content": "<p>sounds good for a future <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>-opt (which I'll do tomorrow if nobody beats me to it, as I'll be mobile-only tonight) -- frank will know how to deal with the antijoin</p>",
        "id": 126713106,
        "sender_full_name": "lqd",
        "timestamp": 1526583715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did I also mention polonius with datafrog compiles in 8s vs 2.5mins with timely ? :)</p>",
        "id": 126713179,
        "sender_full_name": "lqd",
        "timestamp": 1526583776
    },
    {
        "content": "<p>(on this beefy machine, at home it's like 10 mins)</p>",
        "id": 126713195,
        "sender_full_name": "lqd",
        "timestamp": 1526583803
    },
    {
        "content": "<p>(the antijoin is sooner in the datafrog example compared to naive DD, and it doesn't work the same way so of course it's a \"grain of salt\" situation for this comparison)</p>",
        "id": 126713300,
        "sender_full_name": "lqd",
        "timestamp": 1526583938
    },
    {
        "content": "<p>(there might be some possible parallelism to have when creating tuples in the joins each round, à la \"R×S = (R delta × S) + (R × S delta) + (R delta × S delta)\")</p>",
        "id": 126713657,
        "sender_full_name": "lqd",
        "timestamp": 1526584379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can't wait, compile times have been killin' me</p>",
        "id": 126714657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526585746
    },
    {
        "content": "<p>This all looks really good. I can believe the antijoin is glitchy, but not obvious to me at the moment what is wrong. The argument is a <code>Relation</code> to try and ensure that no one uses a variable (that might grow with iteration); .. that shouldn't make it wrong, but .. it could lead to bugs? I'm not sure.</p>",
        "id": 126715761,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526587299
    },
    {
        "content": "<p>I'll try and get at this tomorrow. Like a moron, I left my power cable at IST in Vienna, so it won't be until tomorrow that I get back there, and on battery power for now.</p>",
        "id": 126715814,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526587336
    },
    {
        "content": "<p>sad that there is no \"crying frog\" emoji</p>",
        "id": 126715897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526587466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I'm on mobile but here's teh ugliness <a href=\"https://gist.github.com/lqd/c2c645ac053ecc8340ca12e8b0f5d03b\" target=\"_blank\" title=\"https://gist.github.com/lqd/c2c645ac053ecc8340ca12e8b0f5d03b\">https://gist.github.com/lqd/c2c645ac053ecc8340ca12e8b0f5d03b</a></p>",
        "id": 126716172,
        "sender_full_name": "lqd",
        "timestamp": 1526587820
    },
    {
        "content": "<p>Ah sweet; was just about to beg for that. :D</p>",
        "id": 126716178,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526587834
    },
    {
        "content": "<p>TIL copying big files on a phone, not that easy</p>",
        "id": 126716212,
        "sender_full_name": "lqd",
        "timestamp": 1526587910
    },
    {
        "content": "<p>Ok, I'll look into this. I've got some code that is <em>super similar</em> but still producing the wrong answer. Not at all clear why.</p>",
        "id": 126716282,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526587985
    },
    {
        "content": "<p>I have full confidence in your laptop, it has bested many big data clusters before <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 126716287,
        "sender_full_name": "lqd",
        "timestamp": 1526588001
    },
    {
        "content": "<p>Well, it goes plenty fast on all of these computations, just gets the wrong answer. Didn't say anything about it being more accurate than the clusters. ;)</p>",
        "id": 126716346,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588065
    },
    {
        "content": "<p><span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126716361,
        "sender_full_name": "lqd",
        "timestamp": 1526588099
    },
    {
        "content": "<p>Also, yours is not the worst antijoin of all time; mine is basically the same but uses <code>Vec::contains()</code>.</p>",
        "id": 126716379,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588136
    },
    {
        "content": "<p>I had that before as well !</p>",
        "id": 126716426,
        "sender_full_name": "lqd",
        "timestamp": 1526588191
    },
    {
        "content": "<p>But mine gives also gives the wrong answer, so I have you beat there!</p>",
        "id": 126716442,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588256
    },
    {
        "content": "<p>everything's a competition I see how it is <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 126716491,
        "sender_full_name": "lqd",
        "timestamp": 1526588317
    },
    {
        "content": "<p>Want to know something crazy: my antijoin <em>isn't suppressing any tuples</em>. Everything it sees it emits as output. Somehow it isn't seeing the right inputs, or something...</p>",
        "id": 126716514,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588395
    },
    {
        "content": "<p>it must be doing something right, the test looked sane IIRC</p>",
        "id": 126716596,
        "sender_full_name": "lqd",
        "timestamp": 1526588476
    },
    {
        "content": "<p>that's also why I was wondering whether it was the input, which didn't look like the other semijoins (but might be handled by the operator)</p>",
        "id": 126716670,
        "sender_full_name": "lqd",
        "timestamp": 1526588601
    },
    {
        "content": "<p>I FIGURED IT OUT!</p>",
        "id": 126716671,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588604
    },
    {
        "content": "<p>yes!</p>",
        "id": 126716679,
        "sender_full_name": "lqd",
        "timestamp": 1526588632
    },
    {
        "content": "<p>So, my antijoin was producing the right tuples. It was just producing them badly. It presumed that if you filter (K,V) then that remains in order, so it doesn't need to re-sort anything. But it forgot about the map that is being applied.</p>",
        "id": 126716730,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588673
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Duration { secs: 0, nanos: 213561 } subset is complete: 30\nrequires, initial size: 3\nDuration { secs: 0, nanos: 758060 } requires is complete: 152\nDuration { secs: 0, nanos: 821829 } borrow_live_at is complete: 102\n</pre></div>",
        "id": 126716734,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588677
    },
    {
        "content": "<p>awesome <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126716754,
        "sender_full_name": "lqd",
        "timestamp": 1526588743
    },
    {
        "content": "<p>pushed</p>",
        "id": 126716809,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526588786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> thanks very much! I'll do the timelyopt conversion tomorrow, I'm really looking forward to seeing those numbers as well</p>",
        "id": 126716904,
        "sender_full_name": "lqd",
        "timestamp": 1526588914
    },
    {
        "content": "<p>No worries <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. Fun to do something helpful and relatively understandable.</p>",
        "id": 126717083,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526589228
    },
    {
        "content": "<p>btw I was poking at your datafrog branch <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> — seems like we don't need to manually specify the types of all variables, just </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subset_r1p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iteration1</span><span class=\"p\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"s\">&quot;subset_r1p&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>will suffice. (I was curious why those types couldn't be inferred. Turns out, they can.)</p>",
        "id": 126725349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526603478
    },
    {
        "content": "<p>nice</p>",
        "id": 126725387,
        "sender_full_name": "lqd",
        "timestamp": 1526603524
    },
    {
        "content": "<p>I found them helpful to debug <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> ofc they were initially written by Frank</p>",
        "id": 126725394,
        "sender_full_name": "lqd",
        "timestamp": 1526603576
    },
    {
        "content": "<p>also helpful for the \"mechanized translations\" from the datalog rules,  but very verbose indeed</p>",
        "id": 126725402,
        "sender_full_name": "lqd",
        "timestamp": 1526603638
    },
    {
        "content": "<p>yeah I can imagine they're handy anyway — but if we were going to e.g. generate this code from  a macro, it's nice to not need them.</p>",
        "id": 126725437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526603643
    },
    {
        "content": "<p>absolutely</p>",
        "id": 126725443,
        "sender_full_name": "lqd",
        "timestamp": 1526603656
    },
    {
        "content": "<p>I'll clean them up tomorrow <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126725499,
        "sender_full_name": "lqd",
        "timestamp": 1526603791
    },
    {
        "content": "<p>I've finally got a spare moment to read into datafrog</p>",
        "id": 126725504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526603830
    },
    {
        "content": "<p>very nice</p>",
        "id": 126725505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526603847
    },
    {
        "content": "<p>feels very promising</p>",
        "id": 126725556,
        "sender_full_name": "lqd",
        "timestamp": 1526603964
    },
    {
        "content": "<p>also wonder whether rayon could fit in there</p>",
        "id": 126725614,
        "sender_full_name": "lqd",
        "timestamp": 1526604060
    },
    {
        "content": "<p>if nothing else one could use the <code>par_sort</code> methods</p>",
        "id": 126725620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604069
    },
    {
        "content": "<p>but maybe elsewhere too...</p>",
        "id": 126725621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604077
    },
    {
        "content": "<p>...it's sort of tempting to rewrite to not use <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> etc</p>",
        "id": 126725623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604089
    },
    {
        "content": "<p>i.e., make each <code>Variable</code> an index and have <code>Iteration</code> hold all the data for them</p>",
        "id": 126725624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604114
    },
    {
        "content": "<p>then you would write stuff like <code>iteration.map(target, source, closure)</code> or whatever</p>",
        "id": 126725665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604136
    },
    {
        "content": "<p>instead of <code>target.from_map(source, closure)</code></p>",
        "id": 126725666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604141
    },
    {
        "content": "<p>totally irrelevant of course</p>",
        "id": 126725668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604159
    },
    {
        "content": "<p>though maybe relevant if you were going to use Rayon</p>",
        "id": 126725670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604169
    },
    {
        "content": "<p>depending</p>",
        "id": 126725671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604171
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 126725721,
        "sender_full_name": "lqd",
        "timestamp": 1526604250
    },
    {
        "content": "<p>anyway the <em>real</em> question is what will perf look like with the 'timely-opt' variant I guess</p>",
        "id": 126725723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604250
    },
    {
        "content": "<p>yup</p>",
        "id": 126725726,
        "sender_full_name": "lqd",
        "timestamp": 1526604257
    },
    {
        "content": "<p>but it seems like the naive was faster</p>",
        "id": 126725727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604263
    },
    {
        "content": "<p>(if I read your msg correctly)</p>",
        "id": 126725728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604268
    },
    {
        "content": "<p>it was indeed</p>",
        "id": 126725732,
        "sender_full_name": "lqd",
        "timestamp": 1526604277
    },
    {
        "content": "<p>though not necessarily faster than w/ <code>distinct_total</code></p>",
        "id": 126725733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604277
    },
    {
        "content": "<p>(I'd be curious to see that comparison)</p>",
        "id": 126725735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604284
    },
    {
        "content": "<p>that is, naive w/ distinct_total</p>",
        "id": 126725738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604292
    },
    {
        "content": "<p>I never measured that :)</p>",
        "id": 126725739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604300
    },
    {
        "content": "<p>could be surprising <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126725748,
        "sender_full_name": "lqd",
        "timestamp": 1526604315
    },
    {
        "content": "<p>one <em>might</em> (I don't know?) expect a similar ratio?</p>",
        "id": 126725750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604322
    },
    {
        "content": "<p>I guess I really have no idea</p>",
        "id": 126725753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604329
    },
    {
        "content": "<p>just gotta measure and see</p>",
        "id": 126725754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526604333
    },
    {
        "content": "<p>I remember Jamie's Brandon doing some datafrog work one could say and mentioning exactly that, how important predictable performance was to them</p>",
        "id": 126725815,
        "sender_full_name": "lqd",
        "timestamp": 1526604402
    },
    {
        "content": "<p>I'll try this in the morning</p>",
        "id": 126725833,
        "sender_full_name": "lqd",
        "timestamp": 1526604479
    },
    {
        "content": "<p>Oh just realized that as each variable is of distinct type you can't use indices</p>",
        "id": 126726602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526606055
    },
    {
        "content": "<p>can't you use a composite index? <code>(type,id)</code></p>",
        "id": 126727288,
        "sender_full_name": "qmx",
        "timestamp": 1526607608
    },
    {
        "content": "<p>quick comments (heading out to the Apple store soon!):</p>\n<p>The <code>Rc</code> and <code>RefCell</code>s are optional; they are there to allow a binding of the \"read\" and \"write\" halves of each variable, and to allow the <code>Iteration</code> struct to manage all of its variables. If we wanted to break that and insist that users manage both halves and manually called <code>.changed()</code> on each pair, we could avoid them I think. It is perhaps a bit more error-prone, though, in that I could imagine people adding new variables to an existing program and forgetting to step them, which would effectively make them non-recursive (fixed at whatever their initial values are). Could easily complain in <code>Drop</code> if they clearly haven't been stepped completely, but I'm not sure of the right trade-off of \"bullet-proofing\" vs \"simple <code>Send</code> types\".</p>",
        "id": 126736774,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526628483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> thank you that's great!</p>",
        "id": 126737474,
        "sender_full_name": "lqd",
        "timestamp": 1526629859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> re: the <code>Rc</code>, not a big thing. I think the current solution works out quite elegantly.</p>",
        "id": 126740781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526635956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you were wondering yesterday, naive DD as is vs naive DD w/ distinct_total comes at 142s vs 118s</p>",
        "id": 126740852,
        "sender_full_name": "lqd",
        "timestamp": 1526636050
    },
    {
        "content": "<p>encouraging</p>",
        "id": 126740863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526636077
    },
    {
        "content": "<p>naive DF being 52s</p>",
        "id": 126740922,
        "sender_full_name": "lqd",
        "timestamp": 1526636164
    },
    {
        "content": "<p>Can probably speed that up a bit, too. Each of the non-arranged collections (e.g. <code>subset</code>, <code>requires</code>, without a <code>_xyz</code> suffix) can probably be removed and we just use <code>from_map</code> to change one of them to the others.</p>",
        "id": 126747926,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526648552
    },
    {
        "content": "<p>yeah I was also wondering how to use the same indexed inputs between iterations (eg region_live_at and cfg_edge)</p>",
        "id": 126748475,
        "sender_full_name": "lqd",
        "timestamp": 1526649238
    },
    {
        "content": "<p>(I was removing some redundant reindexing between iterations and noticed those)</p>",
        "id": 126748582,
        "sender_full_name": "lqd",
        "timestamp": 1526649360
    },
    {
        "content": "<p>I was entertaining the idea of making a macro to produce the programs in question</p>",
        "id": 126750101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650850
    },
    {
        "content": "<p>but I decided to \"sleep in\" instead (until 5:30am :)</p>",
        "id": 126750104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650860
    },
    {
        "content": "<p>kind of glad I didn't though since it sounds like they don't yet reflect \"best practice\" :)</p>",
        "id": 126750114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650872
    },
    {
        "content": "<p>I don't quite yet see how \"arranged\" things are reflected..  are those a distinct kind of variable?</p>",
        "id": 126750140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650910
    },
    {
        "content": "<p>I was thinking it was through the \"indices\" variables (but then again I'm not extremely competent with any of this <span class=\"emoji emoji-1f921\" title=\"clown face\">:clown_face:</span> )</p>",
        "id": 126750338,
        "sender_full_name": "lqd",
        "timestamp": 1526651072
    },
    {
        "content": "<p>sorry for being slow with the frogopt translation, I'm trying to internalize and come up the mechanized translations rules that would come naturally to the both of you</p>",
        "id": 126750446,
        "sender_full_name": "lqd",
        "timestamp": 1526651182
    },
    {
        "content": "<blockquote>\n<p>I was thinking it was through the \"indices\" variables (but then again I'm not extremely competent with any of this <span class=\"emoji emoji-1f921\" title=\"clown face\">:clown_face:</span> )</p>\n</blockquote>\n<p>such modesty :)</p>",
        "id": 126750605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651373
    },
    {
        "content": "<p>I didn't look that closely, apparently, or at least I didn't notice variables named <code>indices</code></p>",
        "id": 126750613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651387
    },
    {
        "content": "<p>I'll look again later...</p>",
        "id": 126750615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651393
    },
    {
        "content": "<p>I'm mostly hoping you two will just solve all our problems :)</p>",
        "id": 126750657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651403
    },
    {
        "content": "<p>they're not named indices but suffixed with the key</p>",
        "id": 126750700,
        "sender_full_name": "lqd",
        "timestamp": 1526651485
    },
    {
        "content": "<p>eg subset_r1p</p>",
        "id": 126750706,
        "sender_full_name": "lqd",
        "timestamp": 1526651495
    },
    {
        "content": "<p>ah those</p>",
        "id": 126750775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651584
    },
    {
        "content": "<p>ok</p>",
        "id": 126750776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526651585
    },
    {
        "content": "<p>I could be very wrong !!</p>",
        "id": 126750801,
        "sender_full_name": "lqd",
        "timestamp": 1526651619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> You should be able to pretty cheaply re-use the indices. If you <code>.complete()</code> the variables, you get a sorted <code>Vec&lt;_&gt;</code> out, and if you insert that in a new <code>Variable</code> it should be pretty cheap: the list will be re-sorted, but that should just be a linear scan if the right sort algorithm is used (<code>sort</code> does this, <code>sort_unstable</code> might).</p>",
        "id": 126751358,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526652256
    },
    {
        "content": "<p>I can demo the \"remove <code>subset</code> and just use <code>subset_r1p</code>\" thing if you'd like. It's not too magical, and probably just a snippet should make it clear.</p>",
        "id": 126751390,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526652314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> oh true I didn't think of this, indeed</p>",
        "id": 126751393,
        "sender_full_name": "lqd",
        "timestamp": 1526652327
    },
    {
        "content": "<p>I think I did this, lemme get you a gist</p>",
        "id": 126751401,
        "sender_full_name": "lqd",
        "timestamp": 1526652348
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/2fbd14646f1404d2222a7d823ed4f1bd\" target=\"_blank\" title=\"https://gist.github.com/lqd/2fbd14646f1404d2222a7d823ed4f1bd\">https://gist.github.com/lqd/2fbd14646f1404d2222a7d823ed4f1bd</a></p>",
        "id": 126751457,
        "sender_full_name": "lqd",
        "timestamp": 1526652396
    },
    {
        "content": "<p>E.g., where right now we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">subset_r1p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">r2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subset_r2p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">r1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subset_p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we can just skip <code>subset</code> and do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"c1\">// subset_r1p is now the thing we build up</span>\n<span class=\"w\">    </span><span class=\"n\">subset_r2p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_r1p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">((</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">r1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subset_p</span><span class=\"p\">.</span><span class=\"n\">from_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_r1p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">((</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126751458,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526652396
    },
    {
        "content": "<p>oh no so it's not what I was talking about, (and I think you actually already did this) using the indexed relations from iteration to the next when possible</p>",
        "id": 126751492,
        "sender_full_name": "lqd",
        "timestamp": 1526652473
    },
    {
        "content": "<p>very nice, thank you. I'll try to see if I can add to frogopt when I've progressed enough</p>",
        "id": 126751553,
        "sender_full_name": "lqd",
        "timestamp": 1526652539
    },
    {
        "content": "<p>Sorry, two things here:</p>\n<p>1. Capturing <code>subset_r1p</code> from the first iteration (subset) and using it in the second iteration (requires). You are doing this in the fragment, which is great.<br>\n2. Not having a <code>subset</code> or a <code>requires</code>, and only keeping indexed lists.</p>",
        "id": 126751561,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526652546
    },
    {
        "content": "<p>this will help as well indeed, they are pretty big on clap</p>",
        "id": 126751664,
        "sender_full_name": "lqd",
        "timestamp": 1526652686
    },
    {
        "content": "<p>I like that there's a lot of potential to improve</p>",
        "id": 126751672,
        "sender_full_name": "lqd",
        "timestamp": 1526652707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> such indexed lists would be where in DD we'd use \"arranged\" lists right ?</p>",
        "id": 126752344,
        "sender_full_name": "lqd",
        "timestamp": 1526653532
    },
    {
        "content": "<p>Erm, sure, except so much simpler here.</p>",
        "id": 126752351,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526653545
    },
    {
        "content": "<p>A <code>Relation</code>'s <code>into</code> method sorts and deduplicates, which isn't free, but if the list is already sorted it is really. cheap.</p>",
        "id": 126752398,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526653569
    },
    {
        "content": "<p>The spirit is the same (cheap to re-use) but operationally they are pretty different. The arranged re-use is more like when we use a <code>Variable</code> multiple times in the same query.</p>",
        "id": 126752459,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526653639
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126752521,
        "sender_full_name": "lqd",
        "timestamp": 1526653702
    },
    {
        "content": "<p>Btw, if you want any help at any point just holler. I'm done with my work for the week and have power again. :)  Resting for a bit before heading out to explore Vienna.</p>",
        "id": 126752697,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526653984
    },
    {
        "content": "<p>I'm just at the point I think I've translated the 1st join lol</p>",
        "id": 126753157,
        "sender_full_name": "lqd",
        "timestamp": 1526654605
    },
    {
        "content": "<p>I was a bit unsure what the granularity was to cut the queries into different Iterations</p>",
        "id": 126753216,
        "sender_full_name": "lqd",
        "timestamp": 1526654665
    },
    {
        "content": "<p>(and I had the same problem knowing when to use scopes with DD)</p>",
        "id": 126753217,
        "sender_full_name": "lqd",
        "timestamp": 1526654686
    },
    {
        "content": "<p>esp since this timelyopt conversion has a more complicated graph than the naive one (and which you did 99% of)</p>",
        "id": 126753324,
        "sender_full_name": "lqd",
        "timestamp": 1526654833
    },
    {
        "content": "<p>I think in principle you can just put everything in one iteration, if you want.</p>",
        "id": 126753655,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526655336
    },
    {
        "content": "<p>The only reason you \"need\" multiple ones is when you want to use antijoin. Otherwise, all of the relations contribute to each other positively, and can just co-develop. Nothing especially good happens by completing one of them first and then doing the next (perhaps lower peak memory utilization?).</p>",
        "id": 126753709,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526655387
    },
    {
        "content": "<blockquote>\n<p>when you want to use antijoin.</p>\n</blockquote>\n<p>meaning, when you want to derive something iteratively, and then use it as the right-hand side of an antijoin.</p>",
        "id": 126753738,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526655438
    },
    {
        "content": "<p>yeah I was gonna say that <em>our</em> use of antijoin should be fine</p>",
        "id": 126753795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526655506
    },
    {
        "content": "<p>with one <del>iteration</del> loop</p>",
        "id": 126753798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526655509
    },
    {
        "content": "<p>oh very interesting, and rn we're only doing antijoins of inputs</p>",
        "id": 126753893,
        "sender_full_name": "lqd",
        "timestamp": 1526655650
    },
    {
        "content": "<p>Right, all the rules are monotonic (positively so) with respect to all variables other than <code>killed</code>, which is static over the rounds of iteration.</p>",
        "id": 126753916,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526655711
    },
    {
        "content": "<p>right. usually datalog people talk about \"stratifying\" the programs in layers here when it comes to negation, basically — that is, if you do an antijoin of a non-input relation R, you have to have  a \"layer\" such that R and all of its dependencies are completed first</p>",
        "id": 126753918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526655713
    },
    {
        "content": "<p>thanks to the both of you :)</p>",
        "id": 126754063,
        "sender_full_name": "lqd",
        "timestamp": 1526655884
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> have you seen a sketch of what the \"timelyopt\" dl looked like ? something like <a href=\"https://gist.github.com/lqd/88f6eb5dd75e3850d2abc1242dbcea4a\" target=\"_blank\" title=\"https://gist.github.com/lqd/88f6eb5dd75e3850d2abc1242dbcea4a\">https://gist.github.com/lqd/88f6eb5dd75e3850d2abc1242dbcea4a</a> (some things are missing/different but giving the same answers on the specific test datasets)</p>",
        "id": 126754080,
        "sender_full_name": "lqd",
        "timestamp": 1526655927
    },
    {
        "content": "<p>I have seen that; I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has an even newer version though, right? E.g. stuff like </p>\n<div class=\"codehilite\"><pre><span></span>    // dead_region_requires(R, B, P, Q) :-\n    //   requires(R, B, P),\n    //   !killed(B, P),\n    //   cfg_edge(P, Q),\n    //   !region_live_at(R, Q).\n</pre></div>",
        "id": 126754268,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526656163
    },
    {
        "content": "<p>I tihnk it's the same except universal_regions</p>",
        "id": 126754281,
        "sender_full_name": "lqd",
        "timestamp": 1526656199
    },
    {
        "content": "<p>I'm up for implementing any random program, but don't want to grab that away from you. :)</p>",
        "id": 126754336,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526656214
    },
    {
        "content": "<p>Yeah current <code>timely_opt.rs</code> has all sorts of heinous subset/requires co-development, and lots of <code>dead_can_reach_live</code> horror story plotlines going on in it.</p>",
        "id": 126754378,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526656279
    },
    {
        "content": "<p>(eg in soufflé I wasn't easily able to have facts containing the universal region points, so I used the rules until then; not a problem with DD or data-<span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>)</p>",
        "id": 126754379,
        "sender_full_name": "lqd",
        "timestamp": 1526656279
    },
    {
        "content": "<p>I believe that Polonius master has the latest version of the timely-opt computation</p>",
        "id": 126754410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span>  I'd gladly take help but won't take you away from visiting Vienna</p>",
        "id": 126754462,
        "sender_full_name": "lqd",
        "timestamp": 1526656352
    },
    {
        "content": "<blockquote>\n<p>Yeah current <code>timely_opt.rs</code> has all sorts of heinous subset/requires co-development, and lots of <code>dead_can_reach_live</code> horror story plotlines going on in it.</p>\n</blockquote>\n<p>( I think this can all be one big iteration though )</p>",
        "id": 126754464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656354
    },
    {
        "content": "<p>oh I didn't see the latest revision then :/</p>",
        "id": 126754475,
        "sender_full_name": "lqd",
        "timestamp": 1526656374
    },
    {
        "content": "<p>this is me looking at Niko's \"detransitize\" branch; maybe not the current one (no clue what \"polonius\" is; some sort of Bond villian org codename probably).</p>",
        "id": 126754500,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526656423
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/\">https://github.com/rust-lang-nursery/polonius/</a></p>",
        "id": 126754506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656434
    },
    {
        "content": "<p>it's the new name for the borrow-check repo :)</p>",
        "id": 126754511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656439
    },
    {
        "content": "<p>Now! With extra <del>fun</del> Shakespeare references!</p>",
        "id": 126754558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656448
    },
    {
        "content": "<p>anyway, <a href=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/timely_opt.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/blob/master/src/output/timely_opt.rs\">this is the most up to date</a></p>",
        "id": 126754566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656463
    },
    {
        "content": "<p>it is probably the same as the detransitize branch</p>",
        "id": 126754567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656468
    },
    {
        "content": "<p>Okies, I may go and try to hack on that for a bit. Maybe grab a glass of wein on the Danube (in Wien) and type a bit taking in the evening.</p>",
        "id": 126754653,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526656587
    },
    {
        "content": "<p>I myself am verifying I correctly did like the 3rd clause ... <code>live_to_dead_regions</code></p>",
        "id": 126754753,
        "sender_full_name": "lqd",
        "timestamp": 1526656708
    },
    {
        "content": "<p>/me is having a lot of fun watching this unfold</p>",
        "id": 126754766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656729
    },
    {
        "content": "<p>(slowly getting the hang of it)</p>",
        "id": 126754769,
        "sender_full_name": "lqd",
        "timestamp": 1526656734
    },
    {
        "content": "<p>no pressure :p</p>",
        "id": 126754785,
        "sender_full_name": "lqd",
        "timestamp": 1526656768
    },
    {
        "content": "<p>![popcorn](<a href=\"http://i0.kym-cdn.com/photos/images/newsfeed/000/895/845/2f9.jpg\" target=\"_blank\" title=\"http://i0.kym-cdn.com/photos/images/newsfeed/000/895/845/2f9.jpg\">http://i0.kym-cdn.com/photos/images/newsfeed/000/895/845/2f9.jpg</a>)</p>\n<div class=\"message_inline_image\"><a href=\"http://i0.kym-cdn.com/photos/images/newsfeed/000/895/845/2f9.jpg\" target=\"_blank\" title=\"http://i0.kym-cdn.com/photos/images/newsfeed/000/895/845/2f9.jpg\"><img src=\"https://uploads.zulipusercontent.net/4eed7fdd0ca614b1f16c7f425fe2c1353a32ab6e/687474703a2f2f69302e6b796d2d63646e2e636f6d2f70686f746f732f696d616765732f6e657773666565642f3030302f3839352f3834352f3266392e6a7067\"></a></div>",
        "id": 126754789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656770
    },
    {
        "content": "<p>yesss, 1 done, 1 million to go</p>",
        "id": 126754951,
        "sender_full_name": "lqd",
        "timestamp": 1526656986
    },
    {
        "content": "<p>Random observation from before, probably still applies: in the clap example there were several thousand rounds of derivations, which makes me think there is <em>lots</em> of cfg crawling going on. If there is still a plan to collapse down indistinguishable regions, that could probably still have a positive effect!</p>",
        "id": 126755122,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526657182
    },
    {
        "content": "<p>there are plans indeed :D</p>",
        "id": 126755139,
        "sender_full_name": "lqd",
        "timestamp": 1526657206
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/20\">https://github.com/rust-lang-nursery/polonius/issues/20</a></p>",
        "id": 126755156,
        "sender_full_name": "lqd",
        "timestamp": 1526657232
    },
    {
        "content": "<p>Neat! We can probably do it in Datalog too, fwiw (connected components of edges are indistinguishable if their application is unimpeded by any of the <code>region_live_at</code> transitions, and <code>killed</code>, I think).</p>",
        "id": 126755232,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526657320
    },
    {
        "content": "<p>sneaking off for a bit; will report back later!</p>",
        "id": 126755260,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526657373
    },
    {
        "content": "<blockquote>\n<p>Neat! We can probably do it in Datalog too, fwiw (connected components of edges are indistinguishable if their application is unimpeded by any of the <code>region_live_at</code> transitions, and <code>killed</code>, I think).</p>\n</blockquote>\n<p>that was my plan</p>",
        "id": 126756024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658496
    },
    {
        "content": "<p>but we don't have all the pieces we need for that yet</p>",
        "id": 126756032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658501
    },
    {
        "content": "<p>almost</p>",
        "id": 126756040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658509
    },
    {
        "content": "<p>anyway, I'd like to keep that in our back pocket :)</p>",
        "id": 126756044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658517
    },
    {
        "content": "<p>it seems like we've got a decent chance of getting the perf we need without</p>",
        "id": 126756050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658528
    },
    {
        "content": "<p>in which case it's just gravy :)</p>",
        "id": 126756054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658531
    },
    {
        "content": "<p>&lt;insert homer mmm gravy meme here&gt;</p>",
        "id": 126756322,
        "sender_full_name": "qmx",
        "timestamp": 1526658892
    },
    {
        "content": "<p>One thing I don't currently like about datafrog is that the variable declarations happen so far from their use. Hard to write rules without lots of scrolling around. =/</p>",
        "id": 126756415,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526659074
    },
    {
        "content": "<p>Btw, sitting on the river, having some dark czech beer, enjoying the weather. just fyi about life choices.</p>",
        "id": 126756464,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526659109
    },
    {
        "content": "<p>I'm writing each mecanized step as well so I have 100 lines between one operator call and the var decl :D</p>",
        "id": 126756978,
        "sender_full_name": "lqd",
        "timestamp": 1526659743
    },
    {
        "content": "<p>fwiw I'm in sunny south of france frank :p</p>",
        "id": 126756989,
        "sender_full_name": "lqd",
        "timestamp": 1526659764
    },
    {
        "content": "<p>(not far from where Prolog was invented)</p>",
        "id": 126757078,
        "sender_full_name": "lqd",
        "timestamp": 1526659844
    },
    {
        "content": "<p>How's boston, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 126757137,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526659949
    },
    {
        "content": "<p>/me can't complain about sunny Florida</p>",
        "id": 126757151,
        "sender_full_name": "qmx",
        "timestamp": 1526659983
    },
    {
        "content": "<p>3/4 :D</p>",
        "id": 126757214,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526660056
    },
    {
        "content": "<p>:D</p>",
        "id": 126757244,
        "sender_full_name": "lqd",
        "timestamp": 1526660125
    },
    {
        "content": "<p>ok, polonius version \"code complete\"!</p>",
        "id": 126757508,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526660461
    },
    {
        "content": "<p>(meaning: typed a lot, now time to see what happens when I <code>cargo check</code> it.)</p>",
        "id": 126757535,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526660517
    },
    {
        "content": "<p>I had barely finished <code>dead_region_requires</code> ...</p>",
        "id": 126757606,
        "sender_full_name": "lqd",
        "timestamp": 1526660611
    },
    {
        "content": "<p>I'm trying out a weird programming style. Write all the rules w/o declaring anything, see what you need, then go and define the things.</p>",
        "id": 126757763,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526660779
    },
    {
        "content": "<p>while I spend 90% of my time scrolling</p>",
        "id": 126757787,
        "sender_full_name": "lqd",
        "timestamp": 1526660839
    },
    {
        "content": "<p>Yeah, I did that for a while and then thought \"I have so much beer in my belly, why don't I just write the program first will surely work out\".</p>",
        "id": 126757850,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526660963
    },
    {
        "content": "<p><span class=\"emoji emoji-1f37a\" title=\"beer\">:beer:</span> -driven development</p>",
        "id": 126757935,
        "sender_full_name": "lqd",
        "timestamp": 1526661107
    },
    {
        "content": "<p>Rapidly approaching Ballmer peak.</p>",
        "id": 126758329,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661621
    },
    {
        "content": "<p>it's running...</p>",
        "id": 126758414,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661755
    },
    {
        "content": "<p>super fast.</p>",
        "id": 126758424,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661780
    },
    {
        "content": "<p>awesome</p>",
        "id": 126758425,
        "sender_full_name": "lqd",
        "timestamp": 1526661782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>     Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults&#39; --skip-tuples`\nDuration { secs: 0, nanos: 523194318 }  borrow_live_at is complete: 0\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults\nTime: 0.549s\nEchidnatron%\n</pre></div>",
        "id": 126758428,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661784
    },
    {
        "content": "<p>sec.</p>",
        "id": 126758431,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661789
    },
    {
        "content": "<p>:)</p>",
        "id": 126758496,
        "sender_full_name": "lqd",
        "timestamp": 1526661892
    },
    {
        "content": "<p>debugging this is going to be rough. I forgot to load <code>requires</code> with <code>borrow_region</code>, but still not right yet:</p>\n<div class=\"codehilite\"><pre><span></span>     Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults&#39; --skip-tuples`\nDuration { secs: 2, nanos: 122990259 }  borrow_live_at is complete: 391740\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults\nTime: 2.174s\nEchidnatron%\n</pre></div>",
        "id": 126758519,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661958
    },
    {
        "content": "<p>only off by about 2x, right? &gt;.&gt;</p>",
        "id": 126758566,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526661989
    },
    {
        "content": "<p>:D</p>",
        "id": 126758575,
        "sender_full_name": "lqd",
        "timestamp": 1526662033
    },
    {
        "content": "<p>yeah debugging was a bit rough for me even on the simpler naive program</p>",
        "id": 126758583,
        "sender_full_name": "lqd",
        "timestamp": 1526662055
    },
    {
        "content": "<p>that's why I went step by step comparing to DD, but that requires a 2.5mins compilation per clause ....</p>",
        "id": 126758587,
        "sender_full_name": "lqd",
        "timestamp": 1526662076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>warning: unused variable: `dead_region_requires`\n  --&gt; src/output/datafrog.rs:47:13\n   |\n47 |         let dead_region_requires = iteration.variable::&lt;(Region, Loan, Point, Point)&gt;(&quot;dead_region_requires&quot;);\n   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using `_dead_region_requires` instead\n</pre></div>",
        "id": 126758646,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662147
    },
    {
        "content": "<p>Hint #1</p>",
        "id": 126758647,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662154
    },
    {
        "content": "<p>(mostly to side step ungrounded vars w/ soufflé)</p>",
        "id": 126758648,
        "sender_full_name": "lqd",
        "timestamp": 1526662166
    },
    {
        "content": "<p>this compiler is helpful!</p>",
        "id": 126758652,
        "sender_full_name": "lqd",
        "timestamp": 1526662179
    },
    {
        "content": "<p>I'm coming up to <code>dead_can_reach</code> -- I'm loving theses clauses btw, it's like a Walking Dead homage, dead_can_reach_origins the prequel, dead_can_reach_live the Broadway musical</p>",
        "id": 126758729,
        "sender_full_name": "lqd",
        "timestamp": 1526662312
    },
    {
        "content": "<p>fwiw: <a href=\"https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea\" target=\"_blank\" title=\"https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea\">https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea</a></p>",
        "id": 126758774,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662350
    },
    {
        "content": "<p>I had it as \"dead can reach live? oh no! run live, run!\"</p>",
        "id": 126758776,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662373
    },
    {
        "content": "<p>mine is 100 comments per join <span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span> <a href=\"https://gist.github.com/lqd/e6bcc6bde2b0fe9a14e3f2fa1b57904c\" target=\"_blank\" title=\"https://gist.github.com/lqd/e6bcc6bde2b0fe9a14e3f2fa1b57904c\">https://gist.github.com/lqd/e6bcc6bde2b0fe9a14e3f2fa1b57904c</a></p>",
        "id": 126758846,
        "sender_full_name": "lqd",
        "timestamp": 1526662500
    },
    {
        "content": "<p>One thing I'm not sure of is whether I grokked Niko's DD code. Embarrassingly, it is apparently hard to read... :)</p>",
        "id": 126758868,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662540
    },
    {
        "content": "<p>tbf the beers might be part of the reason why :D</p>",
        "id": 126758929,
        "sender_full_name": "lqd",
        "timestamp": 1526662613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> beautiful right now :) springtime is the best ...</p>",
        "id": 126758942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662651
    },
    {
        "content": "<blockquote>\n<p>One thing I'm not sure of is whether I grokked Niko's DD code. Embarrassingly, it is apparently hard to read... :)</p>\n</blockquote>\n<p>uh oh =)</p>",
        "id": 126759050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662790
    },
    {
        "content": "<p>I tried to keep datalog comments because — I confess —  find the DD by itself kind of \"write only\" (but quite mechanical and easy to write once you have datalog)</p>",
        "id": 126759105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662817
    },
    {
        "content": "<p>maybe that's not enough though</p>",
        "id": 126759118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662833
    },
    {
        "content": "<p>(Frank BTW, any time it's not fun debugging anymore vs enjoying Vienna, I can also \"help\")</p>",
        "id": 126759121,
        "sender_full_name": "lqd",
        "timestamp": 1526662836
    },
    {
        "content": "<p>Well, all the beer is drunk, so I'm afraid I must go.</p>",
        "id": 126759124,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662848
    },
    {
        "content": "<p>I'll just leave this:</p>\n<div class=\"codehilite\"><pre><span></span>Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults&#39; --skip-tuples`\nDuration { secs: 16, nanos: 743834090 } borrow_live_at is complete: 832392\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults\nTime: 16.839s\nEchidnatron%\n</pre></div>",
        "id": 126759133,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526662865
    },
    {
        "content": "<p>he's already debugged it</p>",
        "id": 126759139,
        "sender_full_name": "lqd",
        "timestamp": 1526662889
    },
    {
        "content": "<p>is that the right number of tuples? :)</p>",
        "id": 126759143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662902
    },
    {
        "content": "<p>yeah</p>",
        "id": 126759144,
        "sender_full_name": "lqd",
        "timestamp": 1526662907
    },
    {
        "content": "<p>seems to be approx the same time, which is interesting</p>",
        "id": 126759146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662920
    },
    {
        "content": "<p>oh well I guess</p>",
        "id": 126759186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662931
    },
    {
        "content": "<p>I am comparing two different computers ;)</p>",
        "id": 126759187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526662936
    },
    {
        "content": "<p>we might need the cfg compression after all, fiddle with different sorting methods (even without rayon's par sort), try and reduce alloc and temporaries</p>",
        "id": 126759311,
        "sender_full_name": "lqd",
        "timestamp": 1526663128
    },
    {
        "content": "<p>I'm not worried yet :)</p>",
        "id": 126759375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663189
    },
    {
        "content": "<p>between CFG compression + the location-insensitive-pre-filter I think we'll make big wins</p>",
        "id": 126759379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663207
    },
    {
        "content": "<p>even if it had exactly DD like performance (not thinking about ease of writing, which we could macro) it might be still worth it for the compile time win, easier maintenance, good optimization potential, etc</p>",
        "id": 126759458,
        "sender_full_name": "lqd",
        "timestamp": 1526663320
    },
    {
        "content": "<p>oh, definitely!</p>",
        "id": 126759555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663474
    },
    {
        "content": "<p>this seems like a much easier story re: integration</p>",
        "id": 126759562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663485
    },
    {
        "content": "<p>(actually, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, I wonder if it's worth waiting for the datafrog story to play out — that might completely obviate the need to integrate an executable into rustc)</p>",
        "id": 126759573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663519
    },
    {
        "content": "<p>(I'll also convert the pre-pass to datafrog, at a snail's pace evidently)</p>",
        "id": 126759686,
        "sender_full_name": "lqd",
        "timestamp": 1526663648
    },
    {
        "content": "<p>Sorry! In actual fact it started raining and the beer-man decided to close up shop, meaning I had to boogie. Obvs not all the beer had been drunk (it's Austria!).</p>",
        "id": 126759692,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526663676
    },
    {
        "content": "<p>Gist updated with the correct version.</p>",
        "id": 126759696,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526663682
    },
    {
        "content": "<p>Full detail:</p>\n<div class=\"codehilite\"><pre><span></span>    Finished release [optimized] target(s) in 18.62s\n     Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults&#39; --skip-tuples`\nDuration { secs: 16, nanos: 548798709 } borrow_live_at is complete: 832392\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults\nTime: 16.638s\nEchidnatron%\n</pre></div>\n\n\n<p>means it now runs faster than it takes to compile. Ball is in your court, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ;)</p>",
        "id": 126759769,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526663803
    },
    {
        "content": "<p>Looks like (profiling) almost all the time is spent in deduplication. Probably what's going on is that there are relatively fewer <code>distinct_total</code> calls in the differential code, whereas datafrog is doing a distinct for every variable (incl intermediates, etc).</p>",
        "id": 126759860,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526663981
    },
    {
        "content": "<p>that makes sense; I did spend some time thinking about where duplicates could be introduced</p>",
        "id": 126759931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664039
    },
    {
        "content": "<p>I suppose we could make that explicit in datafrog?</p>",
        "id": 126759934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664044
    },
    {
        "content": "<p>ps I really like the model of \"manually\" compiling to a nice set of primitives</p>",
        "id": 126759948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664079
    },
    {
        "content": "<p>that is, I like us having the ability to map it back to datalog, but also not being reliant on some automated optimizer</p>",
        "id": 126759952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664096
    },
    {
        "content": "<p>for perf reasons probably makes sense. could probably just have a bool with each variable that is \"do distinct\", at which point it is on the programmer to make sure they have distincts set up to converge properly (no cycles w/o distincts).</p>",
        "id": 126759954,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664098
    },
    {
        "content": "<p>(to apply domain knowledge of this kind)</p>",
        "id": 126759957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664100
    },
    {
        "content": "<p>on my machine, timely 11s vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> 15s -- manual distincts would be <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126760090,
        "sender_full_name": "lqd",
        "timestamp": 1526664254
    },
    {
        "content": "<p>Manual distincts:</p>\n<div class=\"codehilite\"><pre><span></span>Running `target/release/borrow-check -a Datafrog &#39;inputs/clap-rs/app-parser-{{impl}}-add_defaults&#39; --skip-tuples`\nDuration { secs: 9, nanos: 640609767 }  borrow_live_at is complete: 832392\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults\nTime: 9.729s\nEchidnatron%\n</pre></div>",
        "id": 126760133,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664355
    },
    {
        "content": "<blockquote>\n<p>on my machine, timely 11s vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> 15s -- manual distincts would be <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>\n</blockquote>\n<p>I think you mean: <span class=\"emoji emoji-1f550\" title=\"clock1\">:clock1:</span> 11s vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> 15s</p>",
        "id": 126760180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664376
    },
    {
        "content": "<p>also i confess I find data-<span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> hard to read and prefer just <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126760208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664422
    },
    {
        "content": "<p>emoji-word hybrids blow my mind</p>",
        "id": 126760219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664436
    },
    {
        "content": "<p>Now <em>that</em> is the nit to end all nits.</p>",
        "id": 126760223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664452
    },
    {
        "content": "<p>(if you'll allow me, I just want to say that Niko, Frank -- and also Jamie who's not doing Rust anymore -- are 3 of my favorite technical writers/people/etc in the world, so I'm extremely happy rn)</p>",
        "id": 126760292,
        "sender_full_name": "lqd",
        "timestamp": 1526664550
    },
    {
        "content": "<p>Jamie is still doing Rust I think...</p>",
        "id": 126760297,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664566
    },
    {
        "content": "<p>Just, not as publicly. &gt;.&gt;</p>",
        "id": 126760301,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664584
    },
    {
        "content": "<p>:) very Julia rn, think he did a talk extremely recently on Imp</p>",
        "id": 126760348,
        "sender_full_name": "lqd",
        "timestamp": 1526664607
    },
    {
        "content": "<p>compilation staging seemed key to this work</p>",
        "id": 126760433,
        "sender_full_name": "lqd",
        "timestamp": 1526664726
    },
    {
        "content": "<p>Profiling on the manual distinct runs, btw:</p>",
        "id": 126760448,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664787
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/_RxOBxhoLOTBbtg6wo9lmOuv/Screen-Shot-2018-05-18-at-19.32.49.png\" target=\"_blank\" title=\"Screen-Shot-2018-05-18-at-19.32.49.png\">Screen-Shot-2018-05-18-at-19.32.49.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_RxOBxhoLOTBbtg6wo9lmOuv/Screen-Shot-2018-05-18-at-19.32.49.png\" target=\"_blank\" title=\"Screen-Shot-2018-05-18-at-19.32.49.png\"><img src=\"/user_uploads/4715/_RxOBxhoLOTBbtg6wo9lmOuv/Screen-Shot-2018-05-18-at-19.32.49.png\"></a></div>",
        "id": 126760452,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664800
    },
    {
        "content": "<p>I don't know how to interpret that :)</p>",
        "id": 126760462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664833
    },
    {
        "content": "<p>except that \"shuffling data\" is a big part...</p>",
        "id": 126760469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526664837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> do you think we could process some of the tuples creation for each loop iteration, in parallel (and if it would help) as we have the base relations and the deltas and can join them I think independently + union the 3 subresults</p>",
        "id": 126760513,
        "sender_full_name": "lqd",
        "timestamp": 1526664867
    },
    {
        "content": "<p>The sorting and such does a bit of memmove action. I can probably tidy some of it up, but it's probably somewhat intrinsic to the approach.</p>",
        "id": 126760516,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664873
    },
    {
        "content": "<p>Yes, that could totally work. All of the update steps do read-only access to their inputs, populate a vec, and then append that vec to a \"todo list\" for each variable.</p>",
        "id": 126760531,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664911
    },
    {
        "content": "<p>(and rayon's par_iter and par_sort)</p>",
        "id": 126760542,
        "sender_full_name": "lqd",
        "timestamp": 1526664949
    },
    {
        "content": "<p>Although, looking at the profiling, not so much time is spend in <code>join_into</code> and <code>antijoin_into</code>, so perhaps it would be better to parallelize the remaining distincts.</p>",
        "id": 126760543,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526664949
    },
    {
        "content": "<p>I'm sure there are plenty more optimizations too. Each of the named relations is in un-indexed form, and then indexed a few different ways. That should mean we can remove at least one instance of each named relation, which should do something positive probably. &gt;.&gt;</p>",
        "id": 126760628,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665039
    },
    {
        "content": "<p>Random other things too: the way I merge two sorted lists is to append one on to the other and call <code>sort()</code>, which .. you might have opinions about.</p>",
        "id": 126760685,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665084
    },
    {
        "content": "<p>what is the current <span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span> vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> results?</p>",
        "id": 126760693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665093
    },
    {
        "content": "<p>with 'less dedup' I mean</p>",
        "id": 126760701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665105
    },
    {
        "content": "<p>(in my recent tests of your previous ideas removing some of those bigger relations resulted in visible wins, albeit on the Naive prog / <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>)</p>",
        "id": 126760732,
        "sender_full_name": "lqd",
        "timestamp": 1526665146
    },
    {
        "content": "<p>It's a bit hard to say; lemme push the manual distinct repo, and then gist my code.</p>",
        "id": 126760763,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665196
    },
    {
        "content": "<p>Manual distinct pushed (new method: <code>variable_indistinct()</code>) and gist updated with code that uses it.</p>",
        "id": 126760847,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665295
    },
    {
        "content": "<p>But, perf seems good enough that next step is probably collapsing CFG. ;)</p>",
        "id": 126760908,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665336
    },
    {
        "content": "<p><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span> 11s vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> 8s</p>",
        "id": 126760940,
        "sender_full_name": "lqd",
        "timestamp": 1526665380
    },
    {
        "content": "<p>(on this beefy machine)</p>",
        "id": 126760953,
        "sender_full_name": "lqd",
        "timestamp": 1526665392
    },
    {
        "content": "<p>yeah, this is great!</p>",
        "id": 126760972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665425
    },
    {
        "content": "<p>25% win, rounding down a bit</p>",
        "id": 126761028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665449
    },
    {
        "content": "<p><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> compiles in 12s here vs <span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span> 2.5mins</p>",
        "id": 126761034,
        "sender_full_name": "lqd",
        "timestamp": 1526665468
    },
    {
        "content": "<p>and..there is that...</p>",
        "id": 126761038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665475
    },
    {
        "content": "<p>:3</p>",
        "id": 126761044,
        "sender_full_name": "lqd",
        "timestamp": 1526665481
    },
    {
        "content": "<p>we should discuss how to transition the repo</p>",
        "id": 126761052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665501
    },
    {
        "content": "<p>a bit tricky with e.g. <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s in-flight changes but I think those are simple enough we can comment them out and re-do</p>",
        "id": 126761066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> &lt;3 (you comin to rustfest paris next week BTW ?)</p>",
        "id": 126761069,
        "sender_full_name": "lqd",
        "timestamp": 1526665529
    },
    {
        "content": "<p>Negative <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. That sounds like it might have been a good plan, but didn't think that far ahead.</p>",
        "id": 126761076,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665561
    },
    {
        "content": "<p>I'll have a proxy there, though. <span class=\"user-mention\" data-user-id=\"116852\">@Andrea Lattuada</span> should be showing up.</p>",
        "id": 126761122,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we can let Santiago land his work while I convert the pre-pass, then convert the difference, and then you can decide ?</p>",
        "id": 126761153,
        "sender_full_name": "lqd",
        "timestamp": 1526665629
    },
    {
        "content": "<p>sounds fine</p>",
        "id": 126761166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665649
    },
    {
        "content": "<p>or is that too .. late ?</p>",
        "id": 126761171,
        "sender_full_name": "lqd",
        "timestamp": 1526665658
    },
    {
        "content": "<p>there's no <em>great</em> hurry— but I would say that if we can reduce the build time from minutes to seconds</p>",
        "id": 126761178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665675
    },
    {
        "content": "<p>it will help push further iteration along :)</p>",
        "id": 126761179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665681
    },
    {
        "content": "<p>I'd prioritize that personally</p>",
        "id": 126761218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665686
    },
    {
        "content": "<p>anyway I think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is busy today</p>",
        "id": 126761230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665708
    },
    {
        "content": "<p>maybe then land these 2 <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> sooner ?</p>",
        "id": 126761242,
        "sender_full_name": "lqd",
        "timestamp": 1526665731
    },
    {
        "content": "<p>if you want to prep a PR, I'd merge it</p>",
        "id": 126761252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665755
    },
    {
        "content": "<p>in any case I think we should consider reframing the 'insensitive' thing not as its own analysis</p>",
        "id": 126761260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665781
    },
    {
        "content": "<p>but as a refinement to timely-opt</p>",
        "id": 126761263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665784
    },
    {
        "content": "<p>ths might be an opportunity to do that reshuffling :)</p>",
        "id": 126761266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665793
    },
    {
        "content": "<p>alright I'll do this between this evening (about to grab dinner) and tomorrow</p>",
        "id": 126761269,
        "sender_full_name": "lqd",
        "timestamp": 1526665794
    },
    {
        "content": "<p>the only thing I would say is:</p>",
        "id": 126761270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665796
    },
    {
        "content": "<p>do we want to think about macros to make it easier to write?</p>",
        "id": 126761275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665801
    },
    {
        "content": "<p>I guess that can prob wait</p>",
        "id": 126761316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665807
    },
    {
        "content": "<p>particularly as we've already ported it</p>",
        "id": 126761331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665831
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126761357,
        "sender_full_name": "lqd",
        "timestamp": 1526665885
    },
    {
        "content": "<p>(heading off to dinner, bbl)</p>",
        "id": 126761367,
        "sender_full_name": "lqd",
        "timestamp": 1526665917
    },
    {
        "content": "<p>The writing was pretty formulaic, btw. But not obviously macro-able. Working through each join and naming each relation I thought I'd need, then seeing what those were (in rustc error messages) and prepping each of them as <code>from_map</code> of their source relation.</p>",
        "id": 126761421,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526665960
    },
    {
        "content": "<p>yeah I think it's better to wait until we're all done, sort of, and then see if we can add macros or what</p>",
        "id": 126761430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665982
    },
    {
        "content": "<p>I have a feeling it will evolve further before we're done</p>",
        "id": 126761443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665990
    },
    {
        "content": "<p>no need to bake things in yet</p>",
        "id": 126761445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526665994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> IMO yea, macros very last</p>",
        "id": 126761510,
        "sender_full_name": "qmx",
        "timestamp": 1526666062
    },
    {
        "content": "<p>and I'm really really interested into how this will be done</p>",
        "id": 126761517,
        "sender_full_name": "qmx",
        "timestamp": 1526666079
    },
    {
        "content": "<p>Btw, just added a few more <code>variable_indistinct</code> calls, doing less distinct work, and things actually slowed down a bit (presumably because the non-distinct relations made more work for others). So, might be a bit of exploration to do here.</p>",
        "id": 126761989,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526666816
    },
    {
        "content": "<p>ah so you were allowing some duplication to slip in basically?</p>",
        "id": 126762057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526666897
    },
    {
        "content": "<p>(I tried to add <code>distinct_total</code> in places I thought might add duplications, but I may have left some because there was a distinct coming later, can't remember)</p>",
        "id": 126762069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526666928
    },
    {
        "content": "<p>(and I could have just been wrong)</p>",
        "id": 126762071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526666931
    },
    {
        "content": "<p>I tried removing all distincts except for a few that make all recursive definitions distinct (subset, requires, and dead_can_reach). So, fewer \"unnecessary\" distincts, but it seems like they may occasionally help performance.</p>",
        "id": 126762151,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526667068
    },
    {
        "content": "<p>interesting</p>",
        "id": 126762237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667234
    },
    {
        "content": "<p>fwiw, <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> is taking 5,764 rounds to converge, and I think a lot of the distinct work is essentially looking up relatively few facts in larger base relations (vs many facts at once, derived over fewer rounds).</p>",
        "id": 126762712,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526667857
    },
    {
        "content": "<p>If we had a \"large step\" cfg relation, even without collapsing down indistinguishable components, it should probably speed things up just due to the way that doing distincts in bulk is more efficient than doing them drawn out over multiple rounds.</p>",
        "id": 126762745,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526667935
    },
    {
        "content": "<p>what do you mean by \"large step\"? sort of \"reachable\"?</p>",
        "id": 126762754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667953
    },
    {
        "content": "<p>like, transitive clsoure? (or some subset of it?)</p>",
        "id": 126762757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526667961
    },
    {
        "content": "<p>well, as opposed to \"small step\" (random PL vocabulary sneaking back in).</p>",
        "id": 126762806,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526667990
    },
    {
        "content": "<p>oh well <em>that</em> clears everything up</p>",
        "id": 126762815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668009
    },
    {
        "content": "<p>;)</p>",
        "id": 126762818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668011
    },
    {
        "content": "<p>If we took all the steps that were legit to take at once (i.e. to all points that are not kills, nor at which there is a change in the <code>region_live_at</code> relation).</p>",
        "id": 126762831,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526668035
    },
    {
        "content": "<p>yeah I have to think about what that means</p>",
        "id": 126762833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668049
    },
    {
        "content": "<p>that is, you can't just compute transitive closure of CFG</p>",
        "id": 126762840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668059
    },
    {
        "content": "<p>but definitely you can imagine taking multiple steps</p>",
        "id": 126762847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668069
    },
    {
        "content": "<p>on a related note I've wondered if we can aggregate the effects of (e.g.) a basic block</p>",
        "id": 126762889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668086
    },
    {
        "content": "<p>and then compute at the boundaries of basic blocks</p>",
        "id": 126762895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668092
    },
    {
        "content": "<p>(as is often done...)</p>",
        "id": 126762906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668105
    },
    {
        "content": "<p>E.g. we could put together a relation <code>Equiv(P,Q)</code> which is <code>CFG(P,Q)</code> minus any pairs for which <code>RLA(R,P), !RLA(R,Q)</code> or any <code>Killed(R,P)</code> or <code>Killed(R,Q)</code>.</p>",
        "id": 126762910,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526668118
    },
    {
        "content": "<p>right</p>",
        "id": 126762912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668127
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 126762959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526668202
    },
    {
        "content": "<p>In principle we could collapse down everything to some representative of <code>Equiv</code>, but even skipping that and just applying all the rules at once (rather than over .. ~100 rounds or whatever) would do something solid.</p>",
        "id": 126762985,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526668206
    },
    {
        "content": "<p>Fwiw, if you impl the rules</p>\n<div class=\"codehilite\"><pre><span></span>        // InEquiv(P,Q) :- CFG(P,Q), Killed(B,P).\n        // InEquiv(P,Q) :- CFG(P,Q), RLA(R,P), !RLA(R,Q).\n</pre></div>\n\n\n<p>then there are 6,253 inequiv edges out of 51,896 cfg edges.</p>",
        "id": 126763714,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526669264
    },
    {
        "content": "<p>we could also process — gross oversimplification — 4 tuples at a time and have the operators use SIMD</p>",
        "id": 126764331,
        "sender_full_name": "lqd",
        "timestamp": 1526670079
    },
    {
        "content": "<p>(maybe ? sometimes ?)</p>",
        "id": 126764375,
        "sender_full_name": "lqd",
        "timestamp": 1526670127
    },
    {
        "content": "<p>The EmptyHeaded folks use it to do efficient galloping, but .. I think it involves some aggressive pre-computation for the relations.</p>",
        "id": 126764392,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526670167
    },
    {
        "content": "<p>Not exactly multiple tuples at a time, but searching for multiple matches for one tuple at a time.</p>",
        "id": 126764411,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526670196
    },
    {
        "content": "<p>Lots to do, but I think with those equiv vs cfg numbers, there is a 10x speed-up waiting if one consolidates indistinguishable components of the cfg.</p>",
        "id": 126764427,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526670241
    },
    {
        "content": "<p>I also remember LegoBase (I think) wrt to merging of operators and the likes</p>",
        "id": 126764450,
        "sender_full_name": "lqd",
        "timestamp": 1526670243
    },
    {
        "content": "<p>ofc they staged queries but we know them ahead of time</p>",
        "id": 126764475,
        "sender_full_name": "lqd",
        "timestamp": 1526670299
    },
    {
        "content": "<p>agreed, the cfg looks like a good avenue</p>",
        "id": 126764492,
        "sender_full_name": "lqd",
        "timestamp": 1526670330
    },
    {
        "content": "<p>maybe could also try automatically different orders for the rules \"evaluation\"</p>",
        "id": 126764563,
        "sender_full_name": "lqd",
        "timestamp": 1526670452
    },
    {
        "content": "<p>(but that may overfitting to clap in particular, who knows)</p>",
        "id": 126764608,
        "sender_full_name": "lqd",
        "timestamp": 1526670486
    },
    {
        "content": "<p>as you said reducing the millions of tuples flying about will surely always be the best bet :)</p>",
        "id": 126764630,
        "sender_full_name": "lqd",
        "timestamp": 1526670546
    },
    {
        "content": "<p>fwiw, breakdown of total tuples produced (in the 9.5s or so):</p>\n<div class=\"codehilite\"><pre><span></span>FINAL: &quot;region_live_at_p&quot;   1076158\nFINAL: &quot;inequiv&quot;    1154468\nFINAL: &quot;killed_p&quot;   980\nFINAL: &quot;cfg_edge_p&quot; 51896\nFINAL: &quot;region_live_at&quot; 1076158\nFINAL: &quot;dead_can_reach_live_r1pq&quot;   38684\nFINAL: &quot;dead_can_reach_live&quot;    38684\nFINAL: &quot;dead_can_reach_r2q&quot; 194748\nFINAL: &quot;dead_can_reach_1&quot;   156064\nFINAL: &quot;dead_can_reach&quot; 194748\nFINAL: &quot;dead_can_reach_origins&quot; 43222\nFINAL: &quot;dead_region_requires_rpq&quot;   50555\nFINAL: &quot;dead_region_requires_2&quot; 907164\nFINAL: &quot;dead_region_requires_1&quot; 858650\nFINAL: &quot;dead_region_requires&quot;   50555\nFINAL: &quot;live_to_dead_regions_r2pq&quot;  38098\nFINAL: &quot;live_to_dead_regions_p&quot; 38098\nFINAL: &quot;live_to_dead_regions_2&quot; 2719027\nFINAL: &quot;live_to_dead_regions_1&quot; 2931089\nFINAL: &quot;live_to_dead_regions&quot;   38098\nFINAL: &quot;requires_rp&quot;    858674\nFINAL: &quot;requires_bp&quot;    858674\nFINAL: &quot;requires_2&quot; 859328\nFINAL: &quot;requires_1&quot; 858650\nFINAL: &quot;requires&quot;   858674\nFINAL: &quot;subset_p&quot;   2714121\nFINAL: &quot;subset_r2p&quot; 2714121\nFINAL: &quot;subset_r1p&quot; 2714121\nFINAL: &quot;subset_2&quot;   2661662\nFINAL: &quot;subset_1&quot;   2785151\nFINAL: &quot;subset&quot; 2714121\nFINAL: &quot;subset&quot; 2714121\nFINAL: &quot;subset_1&quot;   2785151\nFINAL: &quot;subset_2&quot;   2661662\nFINAL: &quot;subset_r1p&quot; 2714121\nFINAL: &quot;subset_r2p&quot; 2714121\nFINAL: &quot;subset_p&quot;   2714121\nFINAL: &quot;requires&quot;   858674\nFINAL: &quot;requires_1&quot; 858650\nFINAL: &quot;requires_2&quot; 859328\nFINAL: &quot;requires_bp&quot;    858674\nFINAL: &quot;requires_rp&quot;    858674\nFINAL: &quot;borrow_live_at&quot; 0\nFINAL: &quot;live_to_dead_regions&quot;   38098\nFINAL: &quot;live_to_dead_regions_1&quot; 2931089\nFINAL: &quot;live_to_dead_regions_2&quot; 2719027\nFINAL: &quot;live_to_dead_regions_p&quot; 38098\nFINAL: &quot;live_to_dead_regions_r2pq&quot;  38098\nFINAL: &quot;dead_region_requires&quot;   50555\nFINAL: &quot;dead_region_requires_1&quot; 858650\nFINAL: &quot;dead_region_requires_2&quot; 907164\nFINAL: &quot;dead_region_requires_rpq&quot;   50555\nFINAL: &quot;dead_can_reach_origins&quot; 43222\nFINAL: &quot;dead_can_reach&quot; 194748\nFINAL: &quot;dead_can_reach_1&quot;   156064\nFINAL: &quot;dead_can_reach_r2q&quot; 194748\nFINAL: &quot;dead_can_reach_live&quot;    38684\nFINAL: &quot;dead_can_reach_live_r1pq&quot;   38684\nFINAL: &quot;region_live_at&quot; 1076158\nFINAL: &quot;cfg_edge_p&quot; 51896\n</pre></div>\n\n\n<p>NB: each relation seems to be dropped twice. Not sure what is up with that.</p>",
        "id": 126764893,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526670956
    },
    {
        "content": "<p>Oh, the boxed versions getting dropped (the ones <code>Iteration</code> holds on to).</p>",
        "id": 126764946,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671021
    },
    {
        "content": "<p>Ooo, optimization:</p>\n<div class=\"codehilite\"><pre><span></span>        // live_to_dead_regions(R1, R2, P, Q) :-\n        //   subset(R1, R2, P),\n        //   cfg_edge(P, Q),\n        //   region_live_at(R1, Q),\n        //   !region_live_at(R2, Q).\n</pre></div>\n\n\n<p>should be </p>\n<div class=\"codehilite\"><pre><span></span>        // live_to_dead_regions(R1, R2, P, Q) :-\n        //   subset(R1, R2, P),\n        //   cfg_edge(P, Q),\n        //   !region_live_at(R2, Q).\n        //   region_live_at(R1, Q),\n</pre></div>",
        "id": 126765101,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671226
    },
    {
        "content": "<p>should we try and get all antijoins as soon as possible ?</p>",
        "id": 126765116,
        "sender_full_name": "lqd",
        "timestamp": 1526671254
    },
    {
        "content": "<p>the earliest we filter the better</p>",
        "id": 126765131,
        "sender_full_name": "lqd",
        "timestamp": 1526671308
    },
    {
        "content": "<p>Not sure, but looking at the sizes up above, there is a 2.9M -&gt; 2.7M change with the semijoin, and then a 2.7M -&gt; 38K change with the antijoin. Not sure if it is general, though.</p>",
        "id": 126765133,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671313
    },
    {
        "content": "<p>Both the antijoin and the semijoin filter, so it isn't as obvious as that unfortunately. (I made the mistake of thinking it was when I posted \"Ooo, optimization\").</p>",
        "id": 126765177,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671346
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> Hi folks! Frank’s proxy here :) looking forward to RustFest, and happy to chat about Differential Dataflow-related things!</p>",
        "id": 126765183,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1526671364
    },
    {
        "content": "<p>true, so did I</p>",
        "id": 126765189,
        "sender_full_name": "lqd",
        "timestamp": 1526671373
    },
    {
        "content": "<p>But in this case I think that joining subset and cfg first might be wrong (should probably join cfg and rla, then semijoin against subset).</p>",
        "id": 126765202,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671432
    },
    {
        "content": "<p>Heyo <span class=\"user-mention\" data-user-id=\"116852\">@Andrea Lattuada</span> !</p>",
        "id": 126765205,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671441
    },
    {
        "content": "<p>Pondering whether I should just go to Paris anyhow and see what is going on...</p>",
        "id": 126765750,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526671895
    },
    {
        "content": "<p>tickets were sold out, but I saw them talking about last minute tickets</p>",
        "id": 126765795,
        "sender_full_name": "lqd",
        "timestamp": 1526671951
    },
    {
        "content": "<p>(I think Felix is also part of the organization <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span>)</p>",
        "id": 126765868,
        "sender_full_name": "lqd",
        "timestamp": 1526672057
    },
    {
        "content": "<p>Was mostly just thinking about going to Paris. &gt;.&gt;</p>",
        "id": 126765879,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526672093
    },
    {
        "content": "<p>lol</p>",
        "id": 126765897,
        "sender_full_name": "lqd",
        "timestamp": 1526672130
    },
    {
        "content": "<blockquote>\n<p>Was mostly just thinking about going to Paris. &gt;.&gt;</p>\n</blockquote>\n<p>I agree with this reasoning</p>",
        "id": 126766042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want me to replace <a href=\"http://naive.rs\" target=\"_blank\" title=\"http://naive.rs\">naive.rs</a> with the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> naive, and in general remove DD usage ? what to do about location_insensitive, want me to translate with the PR ?</p>",
        "id": 126766045,
        "sender_full_name": "lqd",
        "timestamp": 1526672332
    },
    {
        "content": "<p>or later</p>",
        "id": 126766053,
        "sender_full_name": "lqd",
        "timestamp": 1526672342
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want me to replace <a href=\"http://naive.rs\" target=\"_blank\" title=\"http://naive.rs\">naive.rs</a> with the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> naive, and in general remove DD usage ? </p>\n</blockquote>\n<p>yes</p>",
        "id": 126766056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672345
    },
    {
        "content": "<p>re: location-insensitve, i'd be ok with commenting it out for now</p>",
        "id": 126766065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672366
    },
    {
        "content": "<p>translating it would be a good exercise</p>",
        "id": 126766067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672374
    },
    {
        "content": "<p>for someone else to get familiar :)</p>",
        "id": 126766069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> do you want me to git commit with your GH email as the author ? since you are, you know, the author</p>",
        "id": 126766149,
        "sender_full_name": "lqd",
        "timestamp": 1526672464
    },
    {
        "content": "<p>Oh, however you like <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. I'm happy to donate authorship of that stuff. Whichever way is least likely to cause problems down the road (if the commits are serious about authorship and don't like screwing around, then probably yes).</p>",
        "id": 126766227,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526672572
    },
    {
        "content": "<p>I wouldn't know myself, maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can chime in ?</p>",
        "id": 126766242,
        "sender_full_name": "lqd",
        "timestamp": 1526672609
    },
    {
        "content": "<p>I don't think it matters either way</p>",
        "id": 126766247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672620
    },
    {
        "content": "<p>in general we state that, if you open a PR, you are claiming willingness to release that code under the license</p>",
        "id": 126766297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672655
    },
    {
        "content": "<p>maybe I just integrate <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> with our naive version and then frank opens a PR for the opt version ?</p>",
        "id": 126766309,
        "sender_full_name": "lqd",
        "timestamp": 1526672697
    },
    {
        "content": "<p>either wfm</p>",
        "id": 126766319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> may not want to :)</p>",
        "id": 126766322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672713
    },
    {
        "content": "<p>:)</p>",
        "id": 126766324,
        "sender_full_name": "lqd",
        "timestamp": 1526672721
    },
    {
        "content": "<p>oh geez, yeah that means I have to figure out how to PR at you all without deleting everything else in your repo.</p>",
        "id": 126766327,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526672732
    },
    {
        "content": "<p>heh that was sort of the reaction I expected</p>",
        "id": 126766330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672745
    },
    {
        "content": "<p>I say <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> just do it all and credit <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> in the comment</p>",
        "id": 126766332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526672752
    },
    {
        "content": "<p>\"hrm, looks like someone reverted all of those PartialOrd and Ord changes from several versions back...\"</p>",
        "id": 126766333,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526672761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> is the gist from a couple hours back the version I should add ?</p>",
        "id": 126767021,
        "sender_full_name": "lqd",
        "timestamp": 1526673686
    },
    {
        "content": "<p>probably, lemme check. the one just post-<code>variable_indistinct</code> is good.</p>",
        "id": 126767174,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526673921
    },
    {
        "content": "<p>yeah <a href=\"https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea\" target=\"_blank\" title=\"https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea\">https://gist.github.com/frankmcsherry/adb9ed3c433eb9f4ddaf591ad9888dea</a> is right with the indistincts</p>",
        "id": 126767236,
        "sender_full_name": "lqd",
        "timestamp": 1526674000
    },
    {
        "content": "<p>seems right to me.</p>",
        "id": 126767245,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526674023
    },
    {
        "content": "<p>I tidied it a bit (no need to have a scope to get <code>bla</code>) but it's essentially the right thing for now.</p>",
        "id": 126767257,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526674059
    },
    {
        "content": "<p>I suspect it will continue to evolve a bit.</p>",
        "id": 126767261,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526674066
    },
    {
        "content": "<p>so without the antijoins ordering, or removing/adding some distincts you were mentioning</p>",
        "id": 126767263,
        "sender_full_name": "lqd",
        "timestamp": 1526674069
    },
    {
        "content": "<p>yeah and niko really wants to switch away from <code>bla</code>s ;)</p>",
        "id": 126767314,
        "sender_full_name": "lqd",
        "timestamp": 1526674094
    },
    {
        "content": "<p>no, haven't tried out the antijoin order change, and the other distincts were small order changes (0.1s-ish).</p>",
        "id": 126767316,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526674098
    },
    {
        "content": "<p>alright, thank you</p>",
        "id": 126767322,
        "sender_full_name": "lqd",
        "timestamp": 1526674120
    },
    {
        "content": "<p>No worries, thanks for guiding all the work around!</p>",
        "id": 126767332,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526674159
    },
    {
        "content": "<p>you did all the work! :p</p>",
        "id": 126767404,
        "sender_full_name": "lqd",
        "timestamp": 1526674250
    },
    {
        "content": "<p>I'm loving the 20x reduction in compile time :3</p>",
        "id": 126767889,
        "sender_full_name": "lqd",
        "timestamp": 1526675019
    },
    {
        "content": "<p>/me fixes his \"Datafro\" typos</p>",
        "id": 126768835,
        "sender_full_name": "lqd",
        "timestamp": 1526676411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> unless I made some git mistakes, it might be time to <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> <a href=\"https://github.com/rust-lang-nursery/polonius/pull/36\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/36\">https://github.com/rust-lang-nursery/polonius/pull/36</a></p>",
        "id": 126769603,
        "sender_full_name": "lqd",
        "timestamp": 1526677612
    },
    {
        "content": "<p>love the PR title :)</p>",
        "id": 126769617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526677647
    },
    {
        "content": "<p>:)</p>",
        "id": 126769620,
        "sender_full_name": "lqd",
        "timestamp": 1526677655
    },
    {
        "content": "<p><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126769624,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526677662
    },
    {
        "content": "<p>Kinda thinking Niko gets 50% authorship too, since I copy/pasted all of his comments.</p>",
        "id": 126769663,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526677682
    },
    {
        "content": "<p>I did 50% of those copy/pastes frank</p>",
        "id": 126769680,
        "sender_full_name": "lqd",
        "timestamp": 1526677710
    },
    {
        "content": "<p>I think I'll double-check by hand it produces the same tuples, then merge</p>",
        "id": 126769694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526677744
    },
    {
        "content": "<p>though I should really read the core carefully at some point</p>",
        "id": 126769703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526677755
    },
    {
        "content": "<p>(kidding ofc, but I actually did integrate more of the timelyopt comments so we don't lose them)</p>",
        "id": 126769718,
        "sender_full_name": "lqd",
        "timestamp": 1526677782
    },
    {
        "content": "<p>def take a peek; I unsafe cast a few u32s to usizes, but pretty sure it's all good</p>",
        "id": 126769725,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526677796
    },
    {
        "content": "<p>(( i don't do anything like that, but since the datafrog crate is under my control, .. muaaahaaha. ))</p>",
        "id": 126769786,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526677837
    },
    {
        "content": "<p>agreed wrt to manual checking first</p>",
        "id": 126769788,
        "sender_full_name": "lqd",
        "timestamp": 1526677839
    },
    {
        "content": "<p>yeah, that'll just have to wait till later in the day</p>",
        "id": 126769790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526677845
    },
    {
        "content": "<p>anyway nice job y'all!</p>",
        "id": 126769795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526677853
    },
    {
        "content": "<p>it will be nice to have <span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span> vs <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> numbers from your machine as well</p>",
        "id": 126769852,
        "sender_full_name": "lqd",
        "timestamp": 1526677927
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> — this branch may change the integration story</p>",
        "id": 126769876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> doing a local build now</p>",
        "id": 126769930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678057
    },
    {
        "content": "<p>I also used the word bespoke as I know you like it</p>",
        "id": 126769933,
        "sender_full_name": "lqd",
        "timestamp": 1526678063
    },
    {
        "content": "<p>lol</p>",
        "id": 126769937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678075
    },
    {
        "content": "<p>I actually picked it up from <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> ;)</p>",
        "id": 126769940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678080
    },
    {
        "content": "<p>I think I recall him talking about \"bespoke union find analyses\" or something</p>",
        "id": 126769943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678091
    },
    {
        "content": "<p>it all makes sense</p>",
        "id": 126769946,
        "sender_full_name": "lqd",
        "timestamp": 1526678096
    },
    {
        "content": "<p><span class=\"emoji emoji-2b55\" title=\"heavy large circle\">:heavy_large_circle:</span></p>",
        "id": 126769954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678106
    },
    {
        "content": "<p>(seriously tho, CHR might be good for bespoke union find (ofc Chalk comes to mind))</p>",
        "id": 126769964,
        "sender_full_name": "lqd",
        "timestamp": 1526678137
    },
    {
        "content": "<p>(I'll redirect most talks about this to eternaleye, who would precisely explain why, better than I could — this goes for this topic and many others ;)</p>",
        "id": 126770035,
        "sender_full_name": "lqd",
        "timestamp": 1526678271
    },
    {
        "content": "<p>\"CHR, what else\"</p>",
        "id": 126770087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526678331
    },
    {
        "content": "<p>if all goes well, after merging we should also create an issue for the location-insensitive <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> conversion, I left some comments about that in the PR as well</p>",
        "id": 126770836,
        "sender_full_name": "lqd",
        "timestamp": 1526679640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed another cleanup commit — measurements are variable on my laptop, but it's a 5% max improvement</p>",
        "id": 126774464,
        "sender_full_name": "lqd",
        "timestamp": 1526685491
    },
    {
        "content": "<p>I also suspect mw, zoxc, or njn will be able to improve all this :)</p>",
        "id": 126774598,
        "sender_full_name": "lqd",
        "timestamp": 1526685742
    },
    {
        "content": "<p>had a chance to test it locally:</p>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Compile Time</th>\n<th>Run Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>210s</td>\n<td>14.191s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></td>\n<td>11s</td>\n<td>8s</td>\n</tr>\n</tbody>\n</table>",
        "id": 126775096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526686792
    },
    {
        "content": "<p>I'd...say we have a winner :)</p>",
        "id": 126775097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526686801
    },
    {
        "content": "<p>/me afk</p>",
        "id": 126775140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526686807
    },
    {
        "content": "<p>we rarely saw results with more than one <span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span> worker AFAICT ?</p>",
        "id": 126775310,
        "sender_full_name": "lqd",
        "timestamp": 1526687223
    },
    {
        "content": "<p>With threads (8 core machine):</p>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Workers</th>\n<th>Compile Time</th>\n<th>Run Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>1</td>\n<td>210s</td>\n<td>14.191s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>2</td>\n<td>210s</td>\n<td>11.035s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>4</td>\n<td>210s</td>\n<td>8.898s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>8</td>\n<td>210s</td>\n<td>7.953s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></td>\n<td>1</td>\n<td>11s</td>\n<td>8s</td>\n</tr>\n</tbody>\n</table>",
        "id": 126776259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526689167
    },
    {
        "content": "<p>oh awesome thank you :)</p>",
        "id": 126776378,
        "sender_full_name": "lqd",
        "timestamp": 1526689427
    },
    {
        "content": "<p>Comment on the PR, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. Just noticed another 1.5s we can shave off by further <code>_indistinct()</code> use (for some reason I forgot to do it to all of the <code>requires_</code> variants).</p>",
        "id": 126787211,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526715299
    },
    {
        "content": "<p>oh very nice <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126788061,
        "sender_full_name": "lqd",
        "timestamp": 1526717488
    },
    {
        "content": "<p>I also tried \"compressed\", with the equiv / inequiv rules. As you mentioned, it can likely be a big win to use that successfully</p>",
        "id": 126788159,
        "sender_full_name": "lqd",
        "timestamp": 1526717748
    },
    {
        "content": "<p>it is on everyone's mind <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span> <a href=\"https://twitter.com/martinkl/status/997500551746158593\" target=\"_blank\" title=\"https://twitter.com/martinkl/status/997500551746158593\">https://twitter.com/martinkl/status/997500551746158593</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/martinkl/status/997500551746158593\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/683377237547192321/ZFAx7ted_normal.jpg\"></a><p>I am looking for Datalog engines that can perform incremental view maintenance. I know of <a href=\"https://twitter.com/logicblox\" target=\"_blank\" title=\"https://twitter.com/logicblox\">@logicblox</a>; any others? (cc <a href=\"https://twitter.com/palvaro\" target=\"_blank\" title=\"https://twitter.com/palvaro\">@palvaro</a>)</p><span>- Martin Kleppmann (@martinkl)</span></div></div>",
        "id": 126788916,
        "sender_full_name": "lqd",
        "timestamp": 1526719541
    },
    {
        "content": "<p>which reminds me we could also look at Eve's Rust runtime, since they supposedly did just that</p>",
        "id": 126788972,
        "sender_full_name": "lqd",
        "timestamp": 1526719661
    },
    {
        "content": "<p>(Expressing CRDTs using Datalog <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span>)</p>",
        "id": 126789092,
        "sender_full_name": "lqd",
        "timestamp": 1526719914
    },
    {
        "content": "<p>I also pushed the requires_* indistincts, 10-15% gain for free</p>",
        "id": 126789487,
        "sender_full_name": "lqd",
        "timestamp": 1526720829
    },
    {
        "content": "<blockquote>\n<p>Comment on the PR, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>. Just noticed another 1.5s we can shave off by further <code>_indistinct()</code> use (for some reason I forgot to do it to all of the <code>requires_</code> variants).</p>\n</blockquote>\n<p>taking that into account, I get:</p>\n<p>With threads (8 core machine):</p>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Workers</th>\n<th>Compile Time</th>\n<th>Run Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>1</td>\n<td>210s</td>\n<td>14.191s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>2</td>\n<td>210s</td>\n<td>11.035s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>4</td>\n<td>210s</td>\n<td>8.898s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-23f2\" title=\"timer clock\">:timer_clock:</span></td>\n<td>8</td>\n<td>210s</td>\n<td>7.953s</td>\n</tr>\n<tr>\n<td><span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></td>\n<td>1</td>\n<td>11s</td>\n<td>7.154s</td>\n</tr>\n</tbody>\n</table>",
        "id": 126789583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526721078
    },
    {
        "content": "<p>nice :)</p>",
        "id": 126790073,
        "sender_full_name": "lqd",
        "timestamp": 1526722208
    },
    {
        "content": "<p>I'm making a few tweaks as I go; just got another 5% win incidentally =)</p>",
        "id": 126790121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526722377
    },
    {
        "content": "<p>if we could \"uncompress/unpack\" from the InEquiv points, it would be <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> — unless I'm horribly mistaken, computing these points is very fast, using these edges instead of the full cfg is very fast, but don't know yet how to get to the original results back (but that would make it &lt; 2s on clap)</p>",
        "id": 126790127,
        "sender_full_name": "lqd",
        "timestamp": 1526722405
    },
    {
        "content": "<p>(so down to 6.8s on my machine)</p>",
        "id": 126790128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526722409
    },
    {
        "content": "<p>I've not yet gotten to that point, still going over the relations bit by bit, but yes that was my intuition when filing #20</p>",
        "id": 126790166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526722446
    },
    {
        "content": "<p>(\"compressing\" is &lt;1s on clap on my slow laptop)</p>",
        "id": 126790168,
        "sender_full_name": "lqd",
        "timestamp": 1526722447
    },
    {
        "content": "<p>hacky, and full of clones, but here's the InEquiv computation <a href=\"https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03\" target=\"_blank\" title=\"https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03\">https://gist.github.com/lqd/743abae3913bc3785a955b749289ca03</a></p>",
        "id": 126790221,
        "sender_full_name": "lqd",
        "timestamp": 1526722636
    },
    {
        "content": "<p>lovin' the faster compile times</p>",
        "id": 126790260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526722697
    },
    {
        "content": "<p>oh yeah your 5% win, a bit like adapting timelyopt's previous \"micro-optimization arrangements\" <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> there were a couple of those before</p>",
        "id": 126790268,
        "sender_full_name": "lqd",
        "timestamp": 1526722751
    },
    {
        "content": "<p>yeah, although I tried in one other cases and it was not a win</p>",
        "id": 126790375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723021
    },
    {
        "content": "<p>I'm not really sure why</p>",
        "id": 126790377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723029
    },
    {
        "content": "<p>that is, removing <code>dead_can_reach_r2q</code> went from 6.8s to 6.9s</p>",
        "id": 126790411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723042
    },
    {
        "content": "<p>(almost sounds like noise, but it was quite consistent)</p>",
        "id": 126790419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723053
    },
    {
        "content": "<p>at this point though I would say</p>",
        "id": 126790421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723059
    },
    {
        "content": "<p>we need more tests</p>",
        "id": 126790423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723061
    },
    {
        "content": "<p>that is, our \"benchmark suite\" is rather limited :)</p>",
        "id": 126790425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723078
    },
    {
        "content": "<p>anyway, I read through the datafrog-opt code now fairly closely</p>",
        "id": 126790427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723096
    },
    {
        "content": "<p>looks great!</p>",
        "id": 126790428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723098
    },
    {
        "content": "<p>just gonna run rustfmt then merge</p>",
        "id": 126790474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723168
    },
    {
        "content": "<p>yay</p>",
        "id": 126790478,
        "sender_full_name": "lqd",
        "timestamp": 1526723200
    },
    {
        "content": "<p>insert appropriate celebratory emojis here</p>",
        "id": 126790481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723215
    },
    {
        "content": "<p><span class=\"emoji emoji-1f370\" title=\"cake\">:cake:</span></p>",
        "id": 126790487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723229
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"emoji emoji-1f44f\" title=\"clap\">:clap:</span> <span class=\"emoji emoji-1f91d\" title=\"handshake\">:handshake:</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f38a\" title=\"confetti ball\">:confetti_ball:</span></p>",
        "id": 126790489,
        "sender_full_name": "lqd",
        "timestamp": 1526723266
    },
    {
        "content": "<p>and of course <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126790490,
        "sender_full_name": "lqd",
        "timestamp": 1526723279
    },
    {
        "content": "<p>ha yes</p>",
        "id": 126790535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723348
    },
    {
        "content": "<p>it'd be nice to move from a git dependency to a <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> dep</p>",
        "id": 126790536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723358
    },
    {
        "content": "<p>yup naive has 3 iterations but doesn't really need it</p>",
        "id": 126790537,
        "sender_full_name": "lqd",
        "timestamp": 1526723366
    },
    {
        "content": "<p>but I don't know if the latest datafrog is fully published there?</p>",
        "id": 126790538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723373
    },
    {
        "content": "<p>anyway not a big thing</p>",
        "id": 126790539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723378
    },
    {
        "content": "<p>and because of that the indices were not shared like they are in opt (plus I didn't know I could collapse them into one at the time, but we can do that if you want)</p>",
        "id": 126790596,
        "sender_full_name": "lqd",
        "timestamp": 1526723423
    },
    {
        "content": "<p>I don't think frank has published it on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 126790600,
        "sender_full_name": "lqd",
        "timestamp": 1526723448
    },
    {
        "content": "<blockquote>\n<p>and because of that the indices were not shared like they are in opt (plus I didn't know I could collapse them into one at the time, but we can do that if you want)</p>\n</blockquote>\n<p>I'd like to keep naive as \"obviously correct\" as we can, but actually one iteration is somehow more \"obvious\" than multiple, so perhaps it's worth it.</p>",
        "id": 126790652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723592
    },
    {
        "content": "<p>that is, in \"the datalog source\", we don't have multiple iterations</p>",
        "id": 126790654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723625
    },
    {
        "content": "<p>true</p>",
        "id": 126790696,
        "sender_full_name": "lqd",
        "timestamp": 1526723647
    },
    {
        "content": "<p>and it'd probably be more idiomatic to actually share those indices</p>",
        "id": 126790697,
        "sender_full_name": "lqd",
        "timestamp": 1526723658
    },
    {
        "content": "<p>more datafroggy</p>",
        "id": 126790698,
        "sender_full_name": "lqd",
        "timestamp": 1526723677
    },
    {
        "content": "<p>I can take care of it whenever, but it would also be a \"good first issue\" for others, get into the API, with an executable test with known and comparable results</p>",
        "id": 126790709,
        "sender_full_name": "lqd",
        "timestamp": 1526723745
    },
    {
        "content": "<p>true — can you maybe file an issue around it?</p>",
        "id": 126790748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723820
    },
    {
        "content": "<p>will do</p>",
        "id": 126790753,
        "sender_full_name": "lqd",
        "timestamp": 1526723847
    },
    {
        "content": "<p>and there also needs a similar one for location-insensitive work</p>",
        "id": 126790755,
        "sender_full_name": "lqd",
        "timestamp": 1526723875
    },
    {
        "content": "<p>yep</p>",
        "id": 126790794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526723919
    },
    {
        "content": "<p>I wanted to write something like that last night in any case — I want to think about whether the location-insensitive work ought to be done as a 'separate analysis' or as part of the datafrog-opt analysis. (maybe we should just clone datafrog-opt and layer the location-insensitive in there, but that might not make sense either.)</p>",
        "id": 126790847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526724050
    },
    {
        "content": "<p>I probably won't get much more time to poke at this during the weekend, but we can pick it up on monday I suppose</p>",
        "id": 126790853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526724072
    },
    {
        "content": "<p>I guess to start it makes sense to port the location-insensitive analysis as it was</p>",
        "id": 126790856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526724101
    },
    {
        "content": "<p>maybe others will get to it before then, otherwise yeah I can do both this weekend, or get back to it after that</p>",
        "id": 126790944,
        "sender_full_name": "lqd",
        "timestamp": 1526724302
    },
    {
        "content": "<p>either way; it seems fine to me to let e.g. <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or others do some of it, to get a feel for how <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> works</p>",
        "id": 126791034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526724521
    },
    {
        "content": "<p>I can't add labels but here's the first issue <a href=\"https://github.com/rust-lang-nursery/polonius/issues/37\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/37\">https://github.com/rust-lang-nursery/polonius/issues/37</a></p>",
        "id": 126791126,
        "sender_full_name": "lqd",
        "timestamp": 1526724736
    },
    {
        "content": "<p>do we need a new issue for the location-insensitive port or would I mention it on <a href=\"https://github.com/rust-lang-nursery/polonius/issues/29\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/29\">https://github.com/rust-lang-nursery/polonius/issues/29</a> ?</p>",
        "id": 126791131,
        "sender_full_name": "lqd",
        "timestamp": 1526724831
    },
    {
        "content": "<p>I'd say just mention it in the existing issue</p>",
        "id": 126791170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526724873
    },
    {
        "content": "<p>alright done, <a href=\"https://github.com/rust-lang-nursery/polonius/issues/29#issuecomment-390395464\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/29#issuecomment-390395464\">https://github.com/rust-lang-nursery/polonius/issues/29#issuecomment-390395464</a></p>",
        "id": 126791379,
        "sender_full_name": "lqd",
        "timestamp": 1526725396
    },
    {
        "content": "<p>I'm up for pushing at <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> whenever. I just pushed a version with a perf improvement. Nothing for borrow_check, but another example (<a href=\"http://graspan1.rs\" target=\"_blank\" title=\"http://graspan1.rs\">graspan1.rs</a>) got about 2x out of it. It .. lead me to something I'm not sure I know the right idiom for:</p>\n<p>The <code>Relation</code> type has a <code>From</code> implementation for <code>I: IntoIterator</code>, which is pretty general but not actually the right implementation for <code>Vec&lt;Tuple&gt;</code>, because it drains the iterator and collects it into a new allocation. It seems like you'd also want a <code>From</code> for <code>Vec&lt;Tuple&gt;</code>, perhaps using specialization (?). For now, there is a <code>from_vec()</code> method, and using that gives some wins for me in the other project (much larger inputs relative to derived facts).</p>",
        "id": 126791418,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526725463
    },
    {
        "content": "<p>I've also prepped a blog post about the engine, meant to explain things from the ground up. Much editing to do, but here is a peek: <a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md\">https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md</a></p>",
        "id": 126791427,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526725541
    },
    {
        "content": "<p>I was seeing a number of <code>merges</code>with empty relations, removing those out didn't make much a difference I think, but could be wrong</p>",
        "id": 126791428,
        "sender_full_name": "lqd",
        "timestamp": 1526725559
    },
    {
        "content": "<p>If any of <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> , <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> do not want to be ack'd in it, please let me know and I will not.</p>",
        "id": 126791443,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526725562
    },
    {
        "content": "<p>Oh, interesting. Probably <code>insert</code> isn't checking for non-emptiness before pushing an empty vector on the list. Lemme add that just so that things are tasteful (it should be almost no cost, as <code>merge()</code> is cheap to merge an empty list).</p>",
        "id": 126791469,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526725623
    },
    {
        "content": "<p>(I don't mind being praised in public by my idols, but don't feel obligated to do it :p — joking, of course :)</p>",
        "id": 126791475,
        "sender_full_name": "lqd",
        "timestamp": 1526725629
    },
    {
        "content": "<blockquote>\n<p>It seems like you'd also want a <code>From</code> for <code>Vec&lt;Tuple&gt;</code>, perhaps using specialization (?). For now, there is a <code>from_vec()</code> method, and using that gives some wins for me in the other project (much larger inputs relative to derived facts).</p>\n</blockquote>\n<p>Yeah this seems like a classic case for specialization</p>",
        "id": 126791527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526725768
    },
    {
        "content": "<p>Random further thoughts (I'll poke at things with time, but want to write them down): in several cases we have e.g.</p>\n<div class=\"codehilite\"><pre><span></span>        let subset_r1p = iteration.variable_indistinct(&quot;subset_r1p&quot;);\n        let subset_r2p = iteration.variable_indistinct(&quot;subset_r2p&quot;);\n        let subset_p = iteration.variable_indistinct(&quot;subset_p&quot;);\n</pre></div>\n\n\n<p>where if the tuples are ordered <code>p_r1_r2</code> say, then the same sorted lists work for <code>_r1p</code> and <code>_p</code>. We just have to swing around the order to <code>_pr1</code> and then describe a trait <code>ProvidesKeyVal</code> or something that allows one to dance around using either key (<code>p</code> or <code>pr1</code>).</p>",
        "id": 126798897,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526743268
    },
    {
        "content": "<p>Hrm. Maybe more complicated than I imagine, due to the difficulty of going from a <code>&amp;(X, Y, Z)</code> to a <code>&amp;(X, Y)</code>.</p>",
        "id": 126799083,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526743791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> possibly stupid question, should we actually have (some?) inputs as indistinct variables ?</p>",
        "id": 126799748,
        "sender_full_name": "lqd",
        "timestamp": 1526745368
    },
    {
        "content": "<p>Totally could, but I don't think anything good happens. The indistinctness prevents comparisons of new data against existing data, but this doesn't happen for the input collections.</p>",
        "id": 126799773,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526745479
    },
    {
        "content": "<p>oh only affecting tuple creations</p>",
        "id": 126799825,
        "sender_full_name": "lqd",
        "timestamp": 1526745535
    },
    {
        "content": "<p>don't those variables pass through the regular mechanism at the beginning though ?</p>",
        "id": 126799902,
        "sender_full_name": "lqd",
        "timestamp": 1526745698
    },
    {
        "content": "<p>eg fill one the Variable inputs (not Relations) and it'll transition from the different tuple storage during the .changed() rounds</p>",
        "id": 126799948,
        "sender_full_name": "lqd",
        "timestamp": 1526745738
    },
    {
        "content": "<p>(esp for some of the bigger inputs — <em>if</em> what I'm saying makes sense)</p>",
        "id": 126800005,
        "sender_full_name": "lqd",
        "timestamp": 1526745888
    },
    {
        "content": "<p>ofc even if it did gain a bit, it'd be more worthwhile to go for the 10x cfg equiv route</p>",
        "id": 126800153,
        "sender_full_name": "lqd",
        "timestamp": 1526746227
    },
    {
        "content": "<p>They do pass through the reg mechanisms, but it's all meant to be zero cost for the first relation that comes in. That is, a relation is sorted and distinct, so you only do any work once you have two of them. The transition from <code>to_add</code> to <code>recent</code> to <code>stable</code> is just a pointer move, until you have conflicting relations.</p>",
        "id": 126800207,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526746401
    },
    {
        "content": "<p>(trying indistinct out on <code>rla</code> and <code>cfg_edge_p</code>seemed to make a bit of improvement)</p>",
        "id": 126800208,
        "sender_full_name": "lqd",
        "timestamp": 1526746405
    },
    {
        "content": "<p>Hrm. Interesting that it did anything! It's possible I've botched the logic somewhere.</p>",
        "id": 126800210,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526746432
    },
    {
        "content": "<p>could be noise as well :3 (but it seemed to have faster rounds than usual) just another thing we can note</p>",
        "id": 126800249,
        "sender_full_name": "lqd",
        "timestamp": 1526746471
    },
    {
        "content": "<p>oh</p>",
        "id": 126800252,
        "sender_full_name": "lqd",
        "timestamp": 1526746498
    },
    {
        "content": "<p>Hrm. Yeah, double checking the <code>insert</code> and <code>changed</code> logic, the <em>intent</em> is that nothing should happen if there is just one relation that comes in.</p>",
        "id": 126800259,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526746517
    },
    {
        "content": "<p>you might also have made those improvements earlier today, while the rev polonius used is from yesterday</p>",
        "id": 126800262,
        "sender_full_name": "lqd",
        "timestamp": 1526746520
    },
    {
        "content": "<p>Some improvements landed, not sure. The ones I know landed seemed to have zero impact on polonius, but helped me out on some other analyses.</p>",
        "id": 126800304,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526746592
    },
    {
        "content": "<p>I'll try with everything uptodate, but it's probably not that important anyway :)</p>",
        "id": 126800306,
        "sender_full_name": "lqd",
        "timestamp": 1526746612
    },
    {
        "content": "<p>These thing can matter, if the logic is dodgy. :)  The 2x improvement I got in non-polonius compute was adding a <code>From</code> implementation for <code>Vec&lt;Tuple&gt;</code> rather than using the <code>IntoIterator</code> one (which drains the vec and then collects it).</p>",
        "id": 126800313,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526746658
    },
    {
        "content": "<p><em>cough even without the 2x it'd be faster than the ASPLOS paper cough</em></p>",
        "id": 126800360,
        "sender_full_name": "lqd",
        "timestamp": 1526746781
    },
    {
        "content": "<p>the indistinct could be noise for the couple % over yesterday's rev</p>",
        "id": 126800799,
        "sender_full_name": "lqd",
        "timestamp": 1526747802
    },
    {
        "content": "<p>I did try just updating to today's and seemed overall still a wee bit faster than yersterday's anyway (that is without any other change than the new rev)</p>",
        "id": 126800805,
        "sender_full_name": "lqd",
        "timestamp": 1526747833
    },
    {
        "content": "<p>Cool; I can take a peek. It certainly shouldn't hurt, I just don't understand why it helps either. :)</p>",
        "id": 126800939,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526748132
    },
    {
        "content": "<p>it doesn't really anymore so it was surely just a fluke of this high variance machine :/</p>",
        "id": 126800944,
        "sender_full_name": "lqd",
        "timestamp": 1526748184
    },
    {
        "content": "<p>which makes perfect sense that it wouldn't :)</p>",
        "id": 126800948,
        "sender_full_name": "lqd",
        "timestamp": 1526748208
    },
    {
        "content": "<p>Minor nit on your blog post <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> , I think datalog <code>:-</code> for bindings rather than <code>&lt;-</code>. Otherwise, very impressive work =D</p>",
        "id": 126801773,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526750262
    },
    {
        "content": "<p>(I think there are competing conventions)</p>",
        "id": 126802957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526753094
    },
    {
        "content": "<blockquote>\n<p>either way; it seems fine to me to let e.g. <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or others do some of it, to get a feel for how <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> works</p>\n</blockquote>\n<p>what needs to be done?</p>",
        "id": 126803158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753536
    },
    {
        "content": "<p>sorry, ETOOMANYMESSAGES</p>",
        "id": 126803160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753543
    },
    {
        "content": "<p>didn't read</p>",
        "id": 126803161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753546
    },
    {
        "content": "<p>tried to read some and figured that a lot of stuff was already using a context which I lack</p>",
        "id": 126803162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753569
    },
    {
        "content": "<p>probably you have been talking since a while about some stuff and I have no clue :P</p>",
        "id": 126803166,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753584
    },
    {
        "content": "<p>just figured that you changed datalog with datafrog, I still need to see what's that about</p>",
        "id": 126803169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1526753606
    },
    {
        "content": "<p>classic... Sorry Frank</p>",
        "id": 126803213,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526753662
    },
    {
        "content": "<p>I'm gonna spin off a new topic <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> for just this :)</p>",
        "id": 126803223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526753712
    },
    {
        "content": "<p>More random optimization thoughts (not sure how best to effect, without substantial changes): queries like </p>\n<div class=\"codehilite\"><pre><span></span>    // subset(R1, R2, Q) :-\n    //   subset(R1, R2, P) :-\n    //   cfg_edge(P, Q),\n    //   region_live_at(R1, Q),\n    //   region_live_at(R2, Q).\n</pre></div>\n\n\n<p>require a few collections that we maintain (subsets <code>_1</code> and <code>_2</code>). In fact, once we get going we don't need these collections, because none of the other relations change, so no one actually consults them at all. We need the tuples to be sorted and batched, but not maintained (distinctly or not). So the random merging and sorting of lists isn't really a big deal.</p>",
        "id": 126821664,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526797474
    },
    {
        "content": "<p><code>subset_r2p</code> looks dead in datafrog_opt; can anyone confirm that? I get a small bump by deleting it.</p>",
        "id": 126822154,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526798683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I don't quite understand the distinction you are drawing between \"sorted/batched\" and \"maintained\"</p>",
        "id": 126826189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526808707
    },
    {
        "content": "<p>(<code>subset_r2p</code> is unused indeed)</p>",
        "id": 126826521,
        "sender_full_name": "lqd",
        "timestamp": 1526809536
    },
    {
        "content": "<p>(so is <code>live_to_dead_regions_p</code>)</p>",
        "id": 126826616,
        "sender_full_name": "lqd",
        "timestamp": 1526809798
    },
    {
        "content": "<p>maybe the distinction is that we could need less data, as being only used as temporaries, only the round's recent batch is effectively used, while <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> will still assume we might want to .complete() it one day ?</p>",
        "id": 126826760,
        "sender_full_name": "lqd",
        "timestamp": 1526810123
    },
    {
        "content": "<p>it's subtle. But I can see something along those lines, perhaps specifically because they are not distinct?</p>",
        "id": 126826947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526810549
    },
    {
        "content": "<p>or maybe I'm misremembering</p>",
        "id": 126826951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526810578
    },
    {
        "content": "<p>anyway I'm still having my morning coffee =) not fully awake yet</p>",
        "id": 126826961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526810603
    },
    {
        "content": "<p>(tbf so am I, but it's noon :p)</p>",
        "id": 126827062,
        "sender_full_name": "lqd",
        "timestamp": 1526810874
    },
    {
        "content": "<p>PS a PR removing <code>subset_r2p</code> and <code>live_to_dead_regions_p</code> would not be unwelcome :)</p>",
        "id": 126827105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526810960
    },
    {
        "content": "<p>on it (and updating to frog's latest rev)</p>",
        "id": 126827107,
        "sender_full_name": "lqd",
        "timestamp": 1526811001
    },
    {
        "content": "<blockquote>\n<p>it's subtle. But I can see something along those lines, perhaps specifically because they are not distinct?</p>\n</blockquote>\n<p>to elaborate on what I mean: I think <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> you were suggesting that those variables don't <em>need</em> a \"stable\"? But I thought it was still used to sometimes catch duplicates — but I guess the point is that if there is some new tuple in <code>subset</code>, it will <em>always</em> be new in <code>subset_1</code> (which is <code>subset</code> join <code>cfg_edge</code>). That... it true here, I guess, and distinct has nothing to do with it.</p>\n<p>(But I suppose that if the closure given to <code>from_join</code> were to drop some fields, it might not be true, in which case distinct would be important, right?)</p>",
        "id": 126827350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526811540
    },
    {
        "content": "<p>I thought it could be that — but I'm no Frank :D — and for this very specific case of indexing, where we wouldn't/shouldn't drop fields to get this benefit ?</p>",
        "id": 126827447,
        "sender_full_name": "lqd",
        "timestamp": 1526811748
    },
    {
        "content": "<p>PR is up <a href=\"https://github.com/rust-lang-nursery/polonius/pull/40\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/40\">https://github.com/rust-lang-nursery/polonius/pull/40</a> (I haven't ran it a lot for a before/after, but the numbers seem lower than before, on this slow/high variance machine)</p>",
        "id": 126827453,
        "sender_full_name": "lqd",
        "timestamp": 1526811834
    },
    {
        "content": "<p>yeah, I see some slight win, although the numbers are a bit jumpier today than yesterday for some weird reason</p>",
        "id": 126827541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526811998
    },
    {
        "content": "<p>Good news (esp for <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ): I implemented leapfrog triejoin.</p>",
        "id": 126827686,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812336
    },
    {
        "content": "<p>Or, leapfrog join, let's say. No tries involved yet.</p>",
        "id": 126827688,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812348
    },
    {
        "content": "<p>:D</p>",
        "id": 126827690,
        "sender_full_name": "lqd",
        "timestamp": 1526812355
    },
    {
        "content": "<p>I've got a few changes in place, but they are about a 1.5s improvement over what I had before. Still poking at things though.</p>",
        "id": 126827696,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812398
    },
    {
        "content": "<p>Main gist is that when doing multiple joins to extend just one attribute, you can do it all at once and save yourself the pain of intermediate materialization:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"c1\">// subset(R1, R2, Q) :-</span>\n<span class=\"w\">            </span><span class=\"c1\">//   subset(R1, R2, P) :-</span>\n<span class=\"w\">            </span><span class=\"c1\">//   cfg_edge(P, Q),</span>\n<span class=\"w\">            </span><span class=\"c1\">//   region_live_at(R1, Q),</span>\n<span class=\"w\">            </span><span class=\"c1\">//   region_live_at(R2, Q).</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// Carry `R1 &lt;= R2` from P into Q if both `R1` and</span>\n<span class=\"w\">            </span><span class=\"c1\">// `R2` are live in Q.</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">datafrog</span>::<span class=\"n\">leapfrog</span>::<span class=\"p\">{</span><span class=\"n\">LeapFrog</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">leapfrog_into</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cfg_edge_rel</span><span class=\"p\">,</span><span class=\"w\">       </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at_rel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at_rel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leapers</span>: <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">LeapFrog</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">leapfrog_into</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leapers</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">subset_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)),</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126827735,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812446
    },
    {
        "content": "<p>this work has both scientific and comedic value</p>",
        "id": 126827736,
        "sender_full_name": "lqd",
        "timestamp": 1526812474
    },
    {
        "content": "<p>You just need to indicate for each of the participating relations how they should search for a tuple prefix, which clues them in on how to propose/reject possible extension values.</p>",
        "id": 126827743,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812509
    },
    {
        "content": "<p>Leaper::from</p>",
        "id": 126827786,
        "sender_full_name": "lqd",
        "timestamp": 1526812580
    },
    {
        "content": "<p>Interesting. We'll need a name for the antijoin variant (currently <code>AntiWrapper</code>) that leaps around avoiding things. <code>Frogger</code>, perhaps?</p>",
        "id": 126827792,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812651
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"c1\">// live_to_dead_regions(R1, R2, P, Q) :-</span>\n<span class=\"w\">            </span><span class=\"c1\">//   subset(R1, R2, P),</span>\n<span class=\"w\">            </span><span class=\"c1\">//   cfg_edge(P, Q),</span>\n<span class=\"w\">            </span><span class=\"c1\">//   region_live_at(R1, Q),</span>\n<span class=\"w\">            </span><span class=\"c1\">//   !region_live_at(R2, Q).</span>\n\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">datafrog</span>::<span class=\"n\">leapfrog</span>::<span class=\"p\">{</span><span class=\"n\">LeapFrog</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AntiWrapper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">leapfrog_into</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cfg_edge_rel</span><span class=\"p\">,</span><span class=\"w\">       </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at_rel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AntiWrapper</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">region_live_at_rel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leapers</span>: <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">LeapFrog</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wrapper3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">leapfrog_into</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leapers</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">live_to_dead_regions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)),</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">q</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126827833,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812701
    },
    {
        "content": "<p>(I feel niko wanted to have the bad guy from the muppets movie in there somewhere)</p>",
        "id": 126827834,
        "sender_full_name": "lqd",
        "timestamp": 1526812726
    },
    {
        "content": "<p>Doc Hopper?</p>",
        "id": 126827840,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526812781
    },
    {
        "content": "<p>Constantine ? <a href=\"#narrow/stream/122657-wg-nll/subject/porting-to-datafrog/near/126803992\" title=\"#narrow/stream/122657-wg-nll/subject/porting-to-datafrog/near/126803992\">https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/porting-to-datafrog/near/126803992</a> (I know very little about the topic sorry :p)</p>",
        "id": 126827881,
        "sender_full_name": "lqd",
        "timestamp": 1526812850
    },
    {
        "content": "<p>in any case, super good news</p>",
        "id": 126827935,
        "sender_full_name": "lqd",
        "timestamp": 1526813013
    },
    {
        "content": "<p>It's all a bit hack-y at the moment. May take a day or two to tidy this up. I don't have a sense for whether there is a time crunch on anything here. Perhaps eventually good to push a crate, once the types settled down a bit.</p>",
        "id": 126827977,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526813062
    },
    {
        "content": "<p>maybe the concept of parts/steps/hops/leap</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cfg_edge_leap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cfg_edge_rel</span><span class=\"p\">.</span><span class=\"n\">join_leap</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_leap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">region_live_at_rel</span><span class=\"p\">.</span><span class=\"n\">join_leap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">_r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_anti_leap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">region_live_at_rel</span><span class=\"p\">.</span><span class=\"n\">antijoin_leap</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,(</span><span class=\"n\">_r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leaps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cfg_edge_leap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_leap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">region_live_at_anti_leap</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"n\">live_to_dead_regions</span><span class=\"p\">.</span><span class=\"n\">from_leaps</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subset_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">leaps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">)),</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">q</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126828144,
        "sender_full_name": "lqd",
        "timestamp": 1526813522
    },
    {
        "content": "<p>Also, it looks like <code>requires</code> is only ever used followed by a <code>!killed</code>, which makes me think we could put it as part of the <code>requires</code> derivation. I.e. make <code>requires</code> into <code>requires_but_not_killed</code> or something like that. Save all the antijoins with killed (which is not large, but which currently results in materializations).</p>\n<p>Off to explore a bit! Will check back later.</p>",
        "id": 126828449,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526814124
    },
    {
        "content": "<p>(or ofc <code>extend_from_leaps</code>)</p>",
        "id": 126828453,
        "sender_full_name": "lqd",
        "timestamp": 1526814134
    },
    {
        "content": "<p>So I've been playing with trying to build a more efficient implementation of <code>Relation::merge</code> that actually zips the two tuple lists instead of just appending them and then doing a sort/dedup</p>",
        "id": 126836161,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526832103
    },
    {
        "content": "<p>I'm not sure I'll be able to make it faster, but one interesting thing I noticed is that there are a not-insignificant number of cases where one of the tuple lists basically just picks up after the other one leaves off<br>\ni.e. <code>elements1[elements1.len() - 1] &lt; elements2[0]</code></p>",
        "id": 126836202,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526832175
    },
    {
        "content": "<p>not sure why exactly, but that \"fast path\" might be worth keeping even if my other stuff doesn't work out</p>",
        "id": 126836212,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526832228
    },
    {
        "content": "<blockquote>\n<p>Good news (esp for <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ): I implemented leapfrog triejoin.</p>\n</blockquote>\n<p>clearly this should be <code>triefrog</code>. <code>leaptriefrog</code>?</p>",
        "id": 126836312,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526832476
    },
    {
        "content": "<p>unfortunately there are no tries ATM, only joins :3 &lt;insert dog logic meme here&gt;</p>",
        "id": 126836449,
        "sender_full_name": "lqd",
        "timestamp": 1526832763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> That's interesting! (the continuation thing). I was a bit lazy here, relying on the fact that <code>sort()</code> does a merge sort, and so it should i. identify the sorted regions, then ii. do a merge as fast as Rust knows how. In principle this can be sped up (especially when we want to do multiple merges), but it may not be too far off of the \"right answer\".</p>\n<p>Another random observation: the join orders and tuple orders and stuff have implications for sorting. There are times where the tuple layout is different, but the order is the same or very similar (e.g. flipping the last two elements). Paying attention to these things might make sorting less painful (though I didn't pay much attention myself).</p>",
        "id": 126836773,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526833543
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> I haven't looked in to how map etc. maintain the sorted invariants. Initial experiments seem to indicate that my zipper merge is a little faster, but I'm currently playing whack-a-mole with system issues (curse you dynamic frequency scaling!) to make sure my benchmarks are testing what I think they are</p>",
        "id": 126836922,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526833839
    },
    {
        "content": "<p>Another way to speed up the computation, perhaps, is to observe that all of the <code>Loan</code> computations are independent (there are no rules that change the loan associated with the tuple). This means that one could implement everything as an outer loop over borrows, with the inner component of each loop having a much smaller working set. It's not obviously a good fit for <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> which prefers to do everything at the same time, but worth keeping in mind (also, perhaps more obvious when one could stop early: a loan requirement can't cross cfg edges where it is killed, independent of the number of regions alive there).</p>",
        "id": 126836925,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526833861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> Another related optimization: the <code>self.stable</code> field could probably be one <code>Vec&lt;Tuple&gt;</code> which has delineated regions that are sorted. This means that rather than lots of merges, one just removes delineations and sorts (merges) regions. This saves the allocations and memcpys and such, which .. are some fraction of the work that is going on.</p>",
        "id": 126837019,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526834051
    },
    {
        "content": "<p>Also,  though perhaps this isn't the best time (boarding!) I'd love to get a rundown of the intent of the _opt variants. Clearly the <code>subset</code> and <code>requires</code> they compute are different, and I'd love to know how and why (are there better names for them, for someone starting from the naive implementation?).</p>",
        "id": 126837066,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526834175
    },
    {
        "content": "<p>I can look in to that once I'm sure my merge is faster<br>\nOne disadvantage of the approach I'm taking is that it always allocates. I could probably play some clever indexing tricks and shuffle things around in memory  to make it work, but I don't think it's possible to do what I want without either allocating or using lots of unsafe</p>",
        "id": 126837068,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526834221
    },
    {
        "content": "<p>IIRC the opt was started mainly to limit the TC over <code>subset</code> which Frank had warned against doing :)</p>",
        "id": 126837218,
        "sender_full_name": "lqd",
        "timestamp": 1526834528
    },
    {
        "content": "<p>at first, then also <code>requires</code>(edited with what I actually meant to say)</p>",
        "id": 126837226,
        "sender_full_name": "lqd",
        "timestamp": 1526834613
    },
    {
        "content": "<p>yes we can see some of the steps Niko took in the PR  <a href=\"https://github.com/rust-lang-nursery/polonius/pull/23/commits\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/23/commits\">https://github.com/rust-lang-nursery/polonius/pull/23/commits</a></p>",
        "id": 126837265,
        "sender_full_name": "lqd",
        "timestamp": 1526834655
    },
    {
        "content": "<p>yeah, I think eventually we wanted to drive computation of the subset relation from the invalidates facts</p>",
        "id": 126837272,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526834731
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> 's PRs are the first steps in that direction (<a href=\"https://github.com/rust-lang-nursery/polonius/pull/28\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/28\">https://github.com/rust-lang-nursery/polonius/pull/28</a> and <a href=\"https://github.com/rust-lang-nursery/polonius/pull/34\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/34\">https://github.com/rust-lang-nursery/polonius/pull/34</a>)</p>",
        "id": 126837316,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526834778
    },
    {
        "content": "<p>Other random observations: even in frog-opt, about 0.5M facts in <code>subset</code> are symmetric relation facts, e.g. <code>(p, (r, r))</code>.</p>",
        "id": 126837317,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526834792
    },
    {
        "content": "<p>These are probably logically redundant somehow. Trying to map out how many distinct equivalence classes of region there are.</p>",
        "id": 126837327,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526834829
    },
    {
        "content": "<p>maybe Yannakakis' algorithm could provide us with a simple plan wrt join orders ? eg at the beginning of coding a computation, we'd describe the variables and needed joins, and \"something\" could give us some of this info, eg iteration.explain_analyze() ;)</p>",
        "id": 126837428,
        "sender_full_name": "lqd",
        "timestamp": 1526835041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>datafrog_opt            time:   [1.2379 ms 1.2448 ms 1.2527 ms]\n                        change: [-27.409% -23.825% -20.116%] (p = 0.00 &lt; 0.05)\n                        Performance has improved.\nFound 10 outliers among 100 measurements (10.00%)\n  4 (4.00%) high mild\n  6 (6.00%) high severe\n</pre></div>\n\n\n<p><span class=\"emoji emoji-1f44c\" title=\"ok hand\">:ok_hand:</span> <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span></p>",
        "id": 126838632,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526837519
    },
    {
        "content": "<p>I /think/ I measured it correctly</p>",
        "id": 126838671,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526837541
    },
    {
        "content": "<p><a href=\"https://github.com/frankmcsherry/datafrog/pull/2\" target=\"_blank\" title=\"https://github.com/frankmcsherry/datafrog/pull/2\">https://github.com/frankmcsherry/datafrog/pull/2</a></p>",
        "id": 126838823,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526837974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> Dunno if it applies, but could maybe use <a href=\"https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#method.merge\" target=\"_blank\" title=\"https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#method.merge\">https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#method.merge</a> ?</p>",
        "id": 126839030,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1526838430
    },
    {
        "content": "<p>No, it's not just a simple merge. We also need to de-duplicate at the same time</p>",
        "id": 126839075,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526838511
    },
    {
        "content": "<p>I mean we don't /need/ to but we can and I think it's faster</p>",
        "id": 126839085,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526838561
    },
    {
        "content": "<p>Haven't tested it though so who knows</p>",
        "id": 126839086,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526838570
    },
    {
        "content": "<p>(I had mentioned the empty rels I saw in merge before, but in my limited testing special casing them didn't make a big difference) the zipper merge does improve datafrog_opt on clap indeed, sweet <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 126839196,
        "sender_full_name": "lqd",
        "timestamp": 1526838821
    },
    {
        "content": "<p>Nice, I'm glad my benchmarking did actually mean something =P</p>",
        "id": 126839746,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526839810
    },
    {
        "content": "<p>So, I've spent some time profiling <code>polonius</code></p>",
        "id": 126849850,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526862553
    },
    {
        "content": "<p>It seems like <code>Relation::merge</code> is still the largest contributor to runtime, followed by <code>gallop</code> (as part of <code>join_core</code>, presumably)</p>",
        "id": 126849903,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526862662
    },
    {
        "content": "<p>which I guess is unsurprising</p>",
        "id": 126849911,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526862688
    },
    {
        "content": "<p>I'm trying to get data about which relations/operations are the worst offenders now</p>",
        "id": 126849914,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526862705
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/oXYHV6R4XE8eRkNf-w6C3hP3/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> I started making graphs again <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/oXYHV6R4XE8eRkNf-w6C3hP3/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/oXYHV6R4XE8eRkNf-w6C3hP3/pasted_image.png\"></a></div>",
        "id": 126852675,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526868993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span>  did you ever play with using some sort of hash-based join instead of the sort-and-zip approach? I feel like it might help perf since instead of maintaining a bunch of independent \"views\" of the data (<code>subset_r1p</code>, <code>subset_r2p</code>, etc.), we can keep a single \"source of truth\" vector and have the joins accelerated by something like <code>HashMap&lt;K, usize&gt;</code> maps. Right now it seems like tuples flow through the system, sometimes with a latency of like 3 rounds, before finally coming back around to impact the same set that kicked off their insertion in the first place. So you get <a href=\"/user_uploads/4715/kJaaOty_FZCm2cr2bc8Vd0vH/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">this kind of rippling effect</a> though all of the variables as changes express themselves after some latency. I know we'll have to accept some of that, but from what I've seen in the profiling data the best thing to do to improve perf seems to be reducing the number of variables (and maybe rounds?) that we have to do merges on.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kJaaOty_FZCm2cr2bc8Vd0vH/pasted_image.png\" target=\"_blank\" title=\"this kind of rippling effect\"><img src=\"/user_uploads/4715/kJaaOty_FZCm2cr2bc8Vd0vH/pasted_image.png\"></a></div>",
        "id": 126854519,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526873182
    },
    {
        "content": "<p>It might end up all coming out in the wash though, since to support my vision of hash-based joins we still need to maintain a O(N) sized dictionary of key-&gt;indices plus we would have garbage cache locality on accesses to the datastore in all likelyhood</p>",
        "id": 126854613,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526873415
    },
    {
        "content": "<p>/me is like 30% of the way through implementing this so I guess we'll see</p>",
        "id": 126854614,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526873427
    },
    {
        "content": "<p>... and I think that's about as far as I'm going to get. The ownership issues are many, and I'd either need to do a boatload of <code>Rc</code> based pointer chasing or train cars full of copies to get it compiling. Either way memory usage would probably be much higher for very little perf gain. It was educational, if not necessarily a step in the right direction.</p>",
        "id": 126856942,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526879012
    },
    {
        "content": "<p>and the borrow checker really saved me here, if it was C++ I would have gotten really sad after chasing iterator invalidation bugs forever =)</p>",
        "id": 126856991,
        "sender_full_name": "Reed Koser",
        "timestamp": 1526879145
    },
    {
        "content": "<p>Looming updates (on my laptop):</p>\n<p>1. Pointing polonius at new datafrog master:  7.680s -&gt; 6.934s.<br>\n2. Using treefrog leapjoin: 6.934s -&gt; 5.744s.</p>\n<p>The treefrog leapjoin (lftj is logicblox's property) structures some joins differently, and it would be good to explain this so that folks can take advantage. Roughly, the more constraints you can put in at the same time the better, and the more you break apart queries into little relations the less better. I'll get a blog post out today I suspect.</p>\n<p>Also, with current numbers, on clap the <code>subset</code> relation is larger than all the others put together. It is also a great candidate for TFLJing, in that it is mostly a set of rules for how to extend <code>requires</code>, rather than anything we need to materialize. That possibility might be speculation on my part, so I'll try and explain how inlining <code>subset</code> could help come blogpost time.</p>",
        "id": 126860891,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526887753
    },
    {
        "content": "<p>(I was looking at reducing the <code>cfg</code>relation, nothing particular to report at this time; apart from the exact idea mentioned in issue #20 I think, will not help for clap itself)</p>",
        "id": 126863517,
        "sender_full_name": "lqd",
        "timestamp": 1526893287
    },
    {
        "content": "<p>Continued:</p>\n<p>3. Write own <code>binary_search</code> method: 5.744s -&gt; 5.335s</p>",
        "id": 126863868,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526893928
    },
    {
        "content": "<p>maybe a different sorting algorithm</p>",
        "id": 126864157,
        "sender_full_name": "lqd",
        "timestamp": 1526894525
    },
    {
        "content": "<p>Maybe! Though, it's not so much the performance of Rust's <code>binary_search</code> as the guarantees it does/doesn't provide.</p>",
        "id": 126864963,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526895935
    },
    {
        "content": "<p>It is important to have a binary search that finds the first match of a thing (e.g. a key, in a list of (key,val)), so that we can scan forward and find all other matches.</p>",
        "id": 126865007,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526895976
    },
    {
        "content": "<p>I think the current implementation does this, but the team declined to commit to it doing this.</p>",
        "id": 126865011,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526895998
    },
    {
        "content": "<p><a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\">https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin</a></p>",
        "id": 126867121,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526900254
    },
    {
        "content": "<p>Associated with this, I have a highly modified <code>datafrog_opt.rs</code> that might want a different name to land. It should be the same logic, but it is different enough that perhaps it makes sense to keep both versions around for the moment?</p>",
        "id": 126867355,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526900650
    },
    {
        "content": "<blockquote>\n<p>Other random observations: even in frog-opt, about 0.5M facts in <code>subset</code> are symmetric relation facts, e.g. <code>(p, (r, r))</code>.</p>\n</blockquote>\n<p>wait, are they <em>literally</em> <code>r &lt;= r</code>? then we really don't need them...</p>",
        "id": 126870351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906399
    },
    {
        "content": "<blockquote>\n<p>Also,  though perhaps this isn't the best time (boarding!) I'd love to get a rundown of the intent of the _opt variants. Clearly the <code>subset</code> and <code>requires</code> they compute are different, and I'd love to know how and why (are there better names for them, for someone starting from the naive implementation?).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> basically my intution was to avoid computing the transitive closure, and instead only propagate edges where needed. The purpose of computing the transitive closure, for the most part, was that sometimes we would remove intermediate regions but we wanted to keep the overall effect. Example:</p>\n<p>At some point P, you add <code>r1 &lt;= r2</code> and <code>r2 &lt;= r3</code>. Then in the successor point <code>Q</code>, <code>r2</code> goes dead. We still want to ensure that (at Q) we know that <code>r1 &lt;= r3</code>. </p>\n<p>We used to compute TC and then remove everything related to <code>r2</code>. We now do this more lazilly, only computing the reachability for regions like <code>r2</code> that (A) are dead in Q but (B) have a live predecessor in Q.</p>",
        "id": 126870399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906450
    },
    {
        "content": "<blockquote>\n<p>Associated with this, I have a highly modified <code>datafrog_opt.rs</code> that might want a different name to land. It should be the same logic, but it is different enough that perhaps it makes sense to keep both versions around for the moment?</p>\n</blockquote>\n<p>if it's mostly about using the leapfrog join, it could also be good for someone to reimplement it and gain familiarity :)</p>",
        "id": 126897903,
        "sender_full_name": "lqd",
        "timestamp": 1526944985
    },
    {
        "content": "<p>That sounds good too. I've got them locally now, but can gist them around or hand them off to anyone who wants to learn more. </p>\n<p>Apropos that, I'm trying to grok the <code>_opt</code> rules to see if there are opportunities to use treefrog better. The main thing is that with this infrastructure, the actions that \"cost\" are adding a new variable; the large number of involved relations only improve the situation (by constraining the variable more). The \"number of joins\" is not especially important. With that in mind, it is possible that the <code>_opt</code> rules could be improved by fusing together a bunch of the rules, to try and get roughly one <code>leapjoin</code> per variable introduced. It may not be exactly that easy, but I'll try and fish out some examples to show what I mean.</p>",
        "id": 126910333,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526972392
    },
    {
        "content": "<p>a bit like folding \"subset\" into \"requires\" like you mentioned earlier</p>",
        "id": 126910735,
        "sender_full_name": "lqd",
        "timestamp": 1526973188
    },
    {
        "content": "<p>Yeah, if that would work out it would be great. I .. can't understand the <code>_opt</code> logic well enough to know if that will be the case, though. :)</p>",
        "id": 126910836,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526973386
    },
    {
        "content": "<p>haha <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> — I was rereading your \"DD computation explanations\" paper yesterday since I was about to track tuples flowing</p>",
        "id": 126910989,
        "sender_full_name": "lqd",
        "timestamp": 1526973729
    },
    {
        "content": "<p>tbf this could rely on the limited datasets too much, might be prudent to wait for proper testing (or just focus on the rules but that's like, harder, man)</p>",
        "id": 126911096,
        "sender_full_name": "lqd",
        "timestamp": 1526973993
    },
    {
        "content": "<p>(tbf2 the <code>invalidates</code> data could/should also cut down the cfg — in addition to another PR helping <code>subset</code> by reducing <code>outlives</code> by 50%)</p>",
        "id": 126911252,
        "sender_full_name": "lqd",
        "timestamp": 1526974373
    },
    {
        "content": "<p>Yeah, I would be interested to see a bunch more inputs before specializing too much; that's a good point. Is the <code>clap</code> example the known-worst case, or is there a spectrum?</p>",
        "id": 126911770,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526975551
    },
    {
        "content": "<p>I'll just chill for a bit then. ;)</p>",
        "id": 126911772,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526975559
    },
    {
        "content": "<p>Btw, Datalog has simpler explanations than the DD explanations. There is a paper by <a href=\"https://yanniss.github.io\" target=\"_blank\" title=\"https://yanniss.github.io\">https://yanniss.github.io</a> which has detail (and other good datalog links there).</p>",
        "id": 126911780,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526975637
    },
    {
        "content": "<p>This is the explanations paper I'm thinking of: <a href=\"https://yanniss.github.io/DeclarativeDebugging.pdf\" target=\"_blank\" title=\"https://yanniss.github.io/DeclarativeDebugging.pdf\">https://yanniss.github.io/DeclarativeDebugging.pdf</a></p>",
        "id": 126911834,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526975733
    },
    {
        "content": "<p>thanks, I was also reading this one :)</p>",
        "id": 126912587,
        "sender_full_name": "lqd",
        "timestamp": 1526977305
    },
    {
        "content": "<p>I was wondering the same about clap and worst-cases, it looks like to be one of the slow cases / the slowest case that is tracked on <a href=\"https://perf.rust-lang.org/\" target=\"_blank\" title=\"https://perf.rust-lang.org/\">https://perf.rust-lang.org/</a> but wondered how \"realistic\" it was</p>",
        "id": 126912641,
        "sender_full_name": "lqd",
        "timestamp": 1526977398
    },
    {
        "content": "<p>we can generate our own facts easily though</p>",
        "id": 126912645,
        "sender_full_name": "lqd",
        "timestamp": 1526977407
    },
    {
        "content": "<p>which examples would be best, surely niko and felix know</p>",
        "id": 126912689,
        "sender_full_name": "lqd",
        "timestamp": 1526977455
    },
    {
        "content": "<p>OK, I finally caught up with y'all on this TreeFrog LeapJoin business. =) Very cool!</p>",
        "id": 126914941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526981666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think you said you wanted to keep #20 (condensing the CFG) in your backpocket for now, was this mostly because of the location::all issue ? or maybe also because of the current lack of tests/benchmarks, to validate if potential improvements are correct and not overfitted to the repo's couple datasets ?</p>",
        "id": 126918428,
        "sender_full_name": "lqd",
        "timestamp": 1526988567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> btw, in your leapjoin section about <code>dead_region_requires((R, P, Q), B)</code> I'm assuming you switched from joining with <code>requires_bp</code> like in the current version, to <code>requires_rp</code> because after leapjoining everything (let's call it, a leap surgery :3) you found out that you didn't need the <code>requires_bp</code> index anymore ? (not that it changes the results of course, just checking)</p>",
        "id": 126920792,
        "sender_full_name": "lqd",
        "timestamp": 1526992816
    },
    {
        "content": "<p>Yeah, that is a good point: some of the performance improvement comes from many of the multiply-indexed relations simplifying down to just one relation. For example, there is only one copy of each of <code>subset</code> and <code>requires</code>.</p>",
        "id": 126921044,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526993297
    },
    {
        "content": "<p>awesome thank you</p>",
        "id": 126921119,
        "sender_full_name": "lqd",
        "timestamp": 1526993450
    },
    {
        "content": "<p><a href=\"https://gist.github.com/frankmcsherry/d3a5c56458779fa7df5934cbd68cb571\" target=\"_blank\" title=\"https://gist.github.com/frankmcsherry/d3a5c56458779fa7df5934cbd68cb571\">https://gist.github.com/frankmcsherry/d3a5c56458779fa7df5934cbd68cb571</a></p>",
        "id": 126921265,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526993720
    },
    {
        "content": "<p>for the treefrogged version.</p>",
        "id": 126921268,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526993743
    },
    {
        "content": "<p>I was trying it out with the Naive rules first :) which is nice</p>",
        "id": 126921419,
        "sender_full_name": "lqd",
        "timestamp": 1526993998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I was thinking as I rode the subway today: first off, I've not looked at your actual code, and I guess I have to review the blog post, but it seems like it would be useful if the <code>count</code> function provided some feedback to the function that filters tuples later on (e.g., where to start looking for matches etc)</p>",
        "id": 126921690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994443
    },
    {
        "content": "<p>but secondly, we often have some information about ordering we could supply, though I'm not sure if that is useful</p>",
        "id": 126921693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994457
    },
    {
        "content": "<p>I'm not sure I grok the sort of feedback that could be provided. Can you give an example? The <code>intersect</code> method picks up mostly where <code>count</code> leaves off, looking at the same range that it just went and checked the bounds of to get the count back.</p>",
        "id": 126921783,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526994586
    },
    {
        "content": "<p>mm I guess a simple example would be that we know that <code>cfg_edge</code> will produce relatively matches</p>",
        "id": 126921843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994631
    },
    {
        "content": "<p>so e.g. when I would try to optimize, I would try to order joins with <code>cfg_edge</code> earlier</p>",
        "id": 126921856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994665
    },
    {
        "content": "<p>that said, it seems like the <code>count</code> mechanism is just more general and this may not be something we need to manually specify anymore</p>",
        "id": 126921862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994684
    },
    {
        "content": "<p>which is even better</p>",
        "id": 126921866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994689
    },
    {
        "content": "<p>I think there isn't much advantage to get here (unless I'm mis-understanding): the <code>count</code> method will return something like 1 pretty often (for <code>cfg</code>) and we will determine that it should be the one to propose the extension.</p>",
        "id": 126921882,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526994721
    },
    {
        "content": "<p>right, I agree</p>",
        "id": 126921927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994736
    },
    {
        "content": "<p>I guess my thought was that we might avoid invoking <code>count</code> — but then it's just doing work we kind of have to do anyway</p>",
        "id": 126921933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994748
    },
    {
        "content": "<p>Yeah, <code>count</code> happens to id where we need to head in the big array of tuples anyhow (and that info is cached for <code>propose</code> and <code>intersect</code>). Even if we hard-wired in \"always use <code>cfg</code> don't bother doing <code>count</code>\" I think the times would be pretty similar. We could check though.</p>",
        "id": 126921979,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526994816
    },
    {
        "content": "<p>nope, I'm convinced =)</p>",
        "id": 126922060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526994916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> hello <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> — just checking, even with leapfrog we couldn't  easily fold <code>subset</code> or <code>requires</code> right ? or <code>borrow_live_at</code> into the recent <code>errors(B, P) :- invalidates(P, B), borrow_live_at(B, P).</code> because all of those end up using more than one dynamic variable instead of just Relations. (I'm guessing we somehow can make a specific version of <code>borrow_live_at</code> that contains the <code>invalidates</code> join, for the regular mode; while in verbose mode we \"have\" to produce those triples; and I guess it might also change depending on how much of this error computation etc can be done in polonius rather than rustc)</p>",
        "id": 126965136,
        "sender_full_name": "lqd",
        "timestamp": 1527061959
    },
    {
        "content": "<p>That sounds right. It isn't too hard to treefrog together two variables, but it isn't supported right now. You would need to i. write wrapper for Variables, which would need to check each of the relations when they count/propose/intersect, and ii. make sure that you write each of the update leapjoins (i.e. a leapjoin stemming from each of the involved variables, as each one just responds to changes in one relation).</p>",
        "id": 126965559,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1527062764
    },
    {
        "content": "<p>oh cool :) Maybe it can be a \"good first issue\" on the datafrog repo for people to contribute</p>",
        "id": 126965649,
        "sender_full_name": "lqd",
        "timestamp": 1527062969
    },
    {
        "content": "<p>so that you don't have to do <em>all</em> the work heh</p>",
        "id": 126965652,
        "sender_full_name": "lqd",
        "timestamp": 1527062987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> </p>\n<blockquote>\n<p>while in verbose mode we \"have\" to produce those triples; and I guess it might also change depending on how much of this error computation etc can be done in polonius rather than rustc</p>\n</blockquote>\n<p>I think we can just drop \"verbose\" mode if it's getting in the way of something.</p>",
        "id": 126967689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527066496
    },
    {
        "content": "<p>totally; until we know exactly what rustc will require between the errors and the <code>borrow_live_at</code> tuples, this can be in flux for a while</p>",
        "id": 126967756,
        "sender_full_name": "lqd",
        "timestamp": 1527066603
    },
    {
        "content": "<p>(nothing to be worried about anyway: even the multi variable join we know can be done would just be a bonus; leapfrog producing errors (but not <code>borrow_live_at</code>) is slightly faster than leapfrog producing <code>borrow_live_at</code>, we can even produce both by checking verbose mode during the iteration, and it still approximately the same — and both of those 2 are already faster than without leapfrog, like 20–30%; that being said I would also like to make sure the <code>errors</code>are actually correct otherwise those numbers are not that useful :) so I'll finish the frontend soon; meanwhile frank can rest and land this new API at his leisure :)</p>",
        "id": 126970151,
        "sender_full_name": "lqd",
        "timestamp": 1527070445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ideally yeah, we trick someone most Rust-focused into coming up to speed on how <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> works, so that its understanding does live only in my head, and the code doesn't have the risk of rotting due to it not being clear how to make it do a specific thing. Such issues could be good, esp if you all id such a person.</p>",
        "id": 126970341,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1527070890
    },
    {
        "content": "<p>I took a stab at writing a merge that could handle multiple relations at once. It seems like it's generally slower, but here's the code <a href=\"https://github.com/rust-lang-nursery/datafrog/compare/master...bobtwinkles:multimerge?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/datafrog/compare/master...bobtwinkles:multimerge?expand=1\">https://github.com/rust-lang-nursery/datafrog/compare/master...bobtwinkles:multimerge?expand=1</a> so people can learn from my mistakes =P<br>\nI'm just creating iterators over all the relations up front, and then stepping through them to generated a sorted list. Results (naming convention is merge_(# of relations)_(average relation size)/algorithm:</p>\n<div class=\"codehilite\"><pre><span></span>merge/merge_003x100/Individual\n                        time:   [2.7191 us 2.7451 us 2.7767 us]\n                        change: [-8.8104% -7.1505% -5.6703%] (p = 0.00 &lt; 0.05)\n                        Performance has improved.\nFound 11 outliers among 100 measurements (11.00%)\n  1 (1.00%) low mild\n  3 (3.00%) high mild\n  7 (7.00%) high severe\nmerge/merge_003x100/MultiMerge\n                        time:   [4.3975 us 4.4096 us 4.4266 us]\n                        change: [-1.6184% -0.7284% +0.0416%] (p = 0.09 &gt; 0.05)\n                        No change in performance detected.\nFound 11 outliers among 100 measurements (11.00%)\n  1 (1.00%) low mild\n  2 (2.00%) high mild\n  8 (8.00%) high severe\n\nmerge/merge_004x100000/Individual\n                        time:   [7.0525 ms 7.0865 ms 7.1178 ms]\nFound 1 outliers among 100 measurements (1.00%)\n  1 (1.00%) low mild\nmerge/merge_004x100000/MultiMerge\n                        time:   [7.9256 ms 7.9569 ms 7.9988 ms]\nFound 7 outliers among 100 measurements (7.00%)\n  2 (2.00%) high mild\n  5 (5.00%) high severe\n</pre></div>\n\n\n<p>My guess is that it's slower due to having poor cache locality (jumping all over memory to read from the different lists) compared to just merging things one at a time</p>",
        "id": 127141172,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527370402
    },
    {
        "content": "<p>I was wondering whether using indexes would help doing the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> joins, in addition to limiting the Variable indexes, or for such small relations maybe it wouldn't be that useful (maybe a compressed bitset, à la roaring bitmaps?)</p>",
        "id": 128772229,
        "sender_full_name": "lqd",
        "timestamp": 1530192827
    },
    {
        "content": "<p>and also if <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> (hello ;) had thoughts about using a Factorized representation would be possible/useful/stupid (as IIRC there's also a worst-case optimal join algorithm that can work with them) and it seemed to lower both the space and time complexity (linked to the hypertree width) :)</p>",
        "id": 128772361,
        "sender_full_name": "lqd",
        "timestamp": 1530192974
    },
    {
        "content": "<p>what kind of indexes are you referring to ?</p>",
        "id": 128772378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530192998
    },
    {
        "content": "<p>roaring bitmaps you mean ?</p>",
        "id": 128772407,
        "sender_full_name": "lqd",
        "timestamp": 1530193063
    },
    {
        "content": "<p>or using them in the Variables themselves ?</p>",
        "id": 128772415,
        "sender_full_name": "lqd",
        "timestamp": 1530193073
    },
    {
        "content": "<p>if the former: <a href=\"https://roaringbitmap.org/\" target=\"_blank\" title=\"https://roaringbitmap.org/\">https://roaringbitmap.org/</a> a kind of hybrid structure</p>",
        "id": 128772486,
        "sender_full_name": "lqd",
        "timestamp": 1530193147
    },
    {
        "content": "<p>(with tricks similar to map fusion, to enable the multiple chunks to use bitsets/arrays/etc independently)</p>",
        "id": 128772801,
        "sender_full_name": "lqd",
        "timestamp": 1530193552
    },
    {
        "content": "<blockquote>\n<p>roaring bitmaps you mean ?</p>\n</blockquote>\n<p>I've never heard of that either, but you wrote:</p>\n<blockquote>\n<p>...I was wondering whether using indexes would help..</p>\n</blockquote>",
        "id": 128773169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530194096
    },
    {
        "content": "<p>I'm not sure what you meant by 'indexes' there</p>",
        "id": 128773177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530194122
    },
    {
        "content": "<p>I guess I have heard of roaring bitmaps</p>",
        "id": 128773179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530194130
    },
    {
        "content": "<p>we do use sparse bitsets in the compiler</p>",
        "id": 128773247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530194212
    },
    {
        "content": "<p>roaring's techniques feel potentially like overkill, but I'm not sure</p>",
        "id": 128773256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1530194227
    },
    {
        "content": "<p>yeah, I was wondering how to compare using galloping vs computing the intersection of keys using indices and then joining the values</p>",
        "id": 128773267,
        "sender_full_name": "lqd",
        "timestamp": 1530194254
    },
    {
        "content": "<p>and the other questions were about using factorized representations which seemed interesting to both reduce the number of materialized results, and the time to compute the join as well -- but maybe only on bigger datasets that we never reach with the NLL facts I'm not sure (and hoped Frank who knows everything would know whether this was a good idea before looking too much into it ;)</p>",
        "id": 128773418,
        "sender_full_name": "lqd",
        "timestamp": 1530194444
    },
    {
        "content": "<p>So, the variables and galloping are pretty much a lightweight LSM index. They are throughput optimized rather than lookup optimized, so if you felt that there were perhaps many rounds producing few tuples, a random access optimized index might be better. The current design does at most one linear pass across each index per round, and likely to a sparse subset based on the relative sizes (driven by galloping).  As long as the number of facts is substantially larger than the number of iterations, this should be .. pretty good, I think?</p>",
        "id": 128780592,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1530203441
    },
    {
        "content": "<p>It's totally reasonable to ask about swapping in a HashMap or the like, as an actual index, at which point you trade away some throughput and gain some reduction in minimum latency. I have no data on which is better / worse, but one advantage of the sorted lists is that you can re-use a <code>(a,b,c)</code> list for <code>a</code> joins, <code>(a,b)</code> joins, and <code>(a,b,c)</code> semijoins, unlike a <code>HashMap</code> where you need to pick the keys explicitly.</p>",
        "id": 128780657,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1530203532
    },
    {
        "content": "<p>Factorized stuff could work, but it depends a lot on the query. If there are opportunities for factorization then they can be great, and if there are not then (I think) nothing good results. Nothing stood out at me in the current query. (For Niko's benefit: factorization is maintaining joined results in \"cross-product of lists\" form rather than expanded out as tuples, most commonly beneficial if another join can be done that can consume the cross product representation (meaning the next keys are not fields left unexpanded).</p>",
        "id": 128780678,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1530203637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> thanks a lot, as always :)</p>",
        "id": 128780848,
        "sender_full_name": "lqd",
        "timestamp": 1530203882
    },
    {
        "content": "<p>I'm not aware of easy idiomatic ways to integrate factorized query stuff, except perhaps hooking the gallop results as an iterator, and allow you to call either <code>flat_map</code> or <code>collect</code>. That being said, I've only come across a query where it helps once (it helped a lot), and I don't have a lot of experience with using them idiomatically.</p>",
        "id": 128780889,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1530203886
    },
    {
        "content": "<p>Hey no worries! :D</p>",
        "id": 128780933,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1530203971
    }
]