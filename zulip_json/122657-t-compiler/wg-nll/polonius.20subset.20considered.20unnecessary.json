[
    {
        "content": "<p><em>So</em>, I've been thinking about the polonius rules. I .. am pretty sure that the transitive closure computation for subset is just plain unnecessary, if the main thing you are interested in is which loans are live at a particular point. </p>\n<p>Interestingly, cloning the naive rules and removing the transitive closure for subset yields both a simple, readable specification, but <strong>also</strong> a faster one:</p>\n<table>\n<thead>\n<tr>\n<th>Algorithm</th>\n<th>Time for clap-rs</th>\n<th>LOC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Naive</td>\n<td>31.73s</td>\n<td>221</td>\n</tr>\n<tr>\n<td>DatafrogOpt</td>\n<td>3.929s</td>\n<td>454</td>\n</tr>\n<tr>\n<td>Reachable</td>\n<td>2.360s</td>\n<td>165</td>\n</tr>\n<tr>\n<td>LocationInsensitive</td>\n<td>0.646s</td>\n<td>153</td>\n</tr>\n</tbody>\n</table>",
        "id": 148869608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593105
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 148869612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593112
    },
    {
        "content": "<p>oh, nice</p>",
        "id": 148869683,
        "sender_full_name": "lqd",
        "timestamp": 1543593160
    },
    {
        "content": "<p>I think the reason I always wanted to keep the transitive closure computation for subset before was because we're going to need <em>something</em> like it in order to deal with errors around lifetime parameters.</p>",
        "id": 148869694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593176
    },
    {
        "content": "<p>But I think you can model those as special loans (which is basically what they are anyway)</p>",
        "id": 148869703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593186
    },
    {
        "content": "<p>I'm sort of annoying by all this though :P because I thought I had some great insight yesterday about a new rule to add that would \"carry\" <code>requires</code> relationships across cfg edges.</p>",
        "id": 148869714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593224
    },
    {
        "content": "<p>but it turns out my insight is mostly that some of my old rules were unnecessary :P</p>",
        "id": 148869724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593233
    },
    {
        "content": "<p>somehow doesn't feel as nice ;)</p>",
        "id": 148869732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593239
    },
    {
        "content": "<p>the result is good tho</p>",
        "id": 148869791,
        "sender_full_name": "lqd",
        "timestamp": 1543593254
    },
    {
        "content": "<p>did you by any chance run the rustc test suite with the Reachable variant ?</p>",
        "id": 148869818,
        "sender_full_name": "lqd",
        "timestamp": 1543593283
    },
    {
        "content": "<p>it's funny that this whole thing started with \"optimizing the transitive closure\" subject and we just needed to optimize it away :)</p>",
        "id": 148870137,
        "sender_full_name": "lqd",
        "timestamp": 1543593540
    },
    {
        "content": "<blockquote>\n<p>did you by any chance run the rustc test suite with the Reachable variant ?</p>\n</blockquote>\n<p>not yet</p>",
        "id": 148870618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593937
    },
    {
        "content": "<p>I just build the latest master</p>",
        "id": 148870625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593950
    },
    {
        "content": "<blockquote>\n<p>model those as special loans<br>\nwould this be in the polonius rules or in rustc's \"lowering\" to facts ?</p>\n</blockquote>",
        "id": 148870628,
        "sender_full_name": "lqd",
        "timestamp": 1543593954
    },
    {
        "content": "<p>probably polonius rules</p>",
        "id": 148870672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593965
    },
    {
        "content": "<p>in particular, it knows the set of universal regions</p>",
        "id": 148870676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593970
    },
    {
        "content": "<p>but I guess could be either</p>",
        "id": 148870678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593976
    },
    {
        "content": "<p>I'd sort of like push more and more into polonius eventually though</p>",
        "id": 148870684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593983
    },
    {
        "content": "<p>the tl;dr is that if you have some outlives relationships that ultimately require <code>'a: 'b</code></p>",
        "id": 148870693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593993
    },
    {
        "content": "<p>we need to know that and check that the user declared it</p>",
        "id": 148870698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543593999
    },
    {
        "content": "<p>but what this is really saying <em>in polonius terms</em></p>",
        "id": 148870705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594005
    },
    {
        "content": "<p>is that the set of loans in 'a had better be a subset of the set of loans in 'b</p>",
        "id": 148870711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594021
    },
    {
        "content": "<p>so if we say that there is some special loan La that is <em>only</em> in <code>'a</code></p>",
        "id": 148870721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594031
    },
    {
        "content": "<p>and we find that <code>requires('b, La, P)</code> for some point P...</p>",
        "id": 148870749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594078
    },
    {
        "content": "<p>...then the user must have declared that <code>'a: 'b</code> or else it's an error</p>",
        "id": 148870804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594101
    },
    {
        "content": "<p>something like that, though it has to be extended to higher universes too, but the same principle applies</p>",
        "id": 148870811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594112
    },
    {
        "content": "<p>oh interesting yeah</p>",
        "id": 148870819,
        "sender_full_name": "lqd",
        "timestamp": 1543594127
    },
    {
        "content": "<p>just the fact that's possible to do without needing the TC is good in any case</p>",
        "id": 148870842,
        "sender_full_name": "lqd",
        "timestamp": 1543594160
    },
    {
        "content": "<p>basically we can encode the outlives relationships from the declaration as relations</p>",
        "id": 148870845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594165
    },
    {
        "content": "<p>and then search for errors like:</p>\n<div class=\"codehilite\"><pre><span></span>universal_region_error :-\n  universal_region(Ra, La), // universal region Ra has associated loan Lb\n  universal_region(Rb, _),\n  requires(Rb, La, _P),\n  !universal_region_subset_transitive(Ra, Rb).\n</pre></div>",
        "id": 148870940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594256
    },
    {
        "content": "<p>(note that some of the rustc tests <em>will fail</em> in the polonius mode; when I completed the cfg compression around the beginning of october there were then 37 of those failing tests if I remember correctly)</p>",
        "id": 148870975,
        "sender_full_name": "lqd",
        "timestamp": 1543594299
    },
    {
        "content": "<p>ps, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, note that in the new rules all the transitive  computation is in the <code>requires</code> relation, so it's really quite simple to restrict it only to loans we care about.</p>",
        "id": 148870984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594313
    },
    {
        "content": "<p>i.e., if we compute the \"maybe failing\" loans using a first pass location insensitive analysis</p>",
        "id": 148871032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594328
    },
    {
        "content": "<p>yeah that's why I wanted to do a baseline run</p>",
        "id": 148871041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594341
    },
    {
        "content": "<p>I will try to get that going now</p>",
        "id": 148871049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594343
    },
    {
        "content": "<p>oh that's good for the possible location insensitive prepass</p>",
        "id": 148871060,
        "sender_full_name": "lqd",
        "timestamp": 1543594357
    },
    {
        "content": "<p>yep</p>",
        "id": 148871062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594363
    },
    {
        "content": "<p>which runs in 0.6s</p>",
        "id": 148871088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594391
    },
    {
        "content": "<p>so it still laps all the others ;)</p>",
        "id": 148871102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594395
    },
    {
        "content": "<p>I have it in 100ms</p>",
        "id": 148871106,
        "sender_full_name": "lqd",
        "timestamp": 1543594401
    },
    {
        "content": "<p>I haven't integrated your latest changes to datafrog yet</p>",
        "id": 148871115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594423
    },
    {
        "content": "<p>with the \"leapfrog\" join</p>",
        "id": 148871117,
        "sender_full_name": "lqd",
        "timestamp": 1543594423
    },
    {
        "content": "<p>though I have them on a branch</p>",
        "id": 148871118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594427
    },
    {
        "content": "<p>I have to go lookup the cargo syntax for dealing with that</p>",
        "id": 148871123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594435
    },
    {
        "content": "<p>I guess I could just rewrite the toml to a path dependency</p>",
        "id": 148871130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594442
    },
    {
        "content": "<p>replace/patch ?</p>",
        "id": 148871167,
        "sender_full_name": "lqd",
        "timestamp": 1543594444
    },
    {
        "content": "<p>that feels so dirty</p>",
        "id": 148871169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594445
    },
    {
        "content": "<p>right</p>",
        "id": 148871176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594450
    },
    {
        "content": "<p>I just remember there are two ways to do it and I can never figure out why there are 2</p>",
        "id": 148871182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594461
    },
    {
        "content": "<p>does one of them not require me to edit the actual Cargo.toml?</p>",
        "id": 148871194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594475
    },
    {
        "content": "<p>that feels like the right one :)</p>",
        "id": 148871197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594479
    },
    {
        "content": "<p>also, I am...mostly happy since switching to DuckDuckGo, but dang does it suck at searches with the word \"cargo\" in them</p>",
        "id": 148871221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594512
    },
    {
        "content": "<p>I don't think we can avoid editing cargo.toml can we ?</p>",
        "id": 148871223,
        "sender_full_name": "lqd",
        "timestamp": 1543594514
    },
    {
        "content": "<p>apparently it really helps to know who I am for that :P</p>",
        "id": 148871229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594519
    },
    {
        "content": "<blockquote>\n<p>I don't think we can avoid editing cargo.toml can we ?</p>\n</blockquote>\n<p>it feels like you should be able...</p>",
        "id": 148871236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594533
    },
    {
        "content": "<p>anyway not germane :)</p>",
        "id": 148871238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594538
    },
    {
        "content": "<p>I'd like to be able to do tests like this without having files git considers dirty in my repo :P</p>",
        "id": 148871245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594546
    },
    {
        "content": "<p>the <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> changes would also allow to reopen/redo the \"specialization\" datafrog PR removing some allocations</p>",
        "id": 148871307,
        "sender_full_name": "lqd",
        "timestamp": 1543594578
    },
    {
        "content": "<p>and ofc changing the variants to use the join</p>",
        "id": 148871317,
        "sender_full_name": "lqd",
        "timestamp": 1543594590
    },
    {
        "content": "<p>although I think there's something I need to work out (or with Frank), possibly a bug/misunderstanding in the join, which would allow to remove more temporary indices</p>",
        "id": 148871352,
        "sender_full_name": "lqd",
        "timestamp": 1543594633
    },
    {
        "content": "<p>(no big deal, it's some uncommon cases, like where the regular join should have the same behaviour, although being able to work on Relations over Variables would allow these indices to be removed)</p>",
        "id": 148871438,
        "sender_full_name": "lqd",
        "timestamp": 1543594693
    },
    {
        "content": "<p>I actually can't find any docs for <code>[replace]</code> etc in <a href=\"https://doc.rust-lang.org/cargo/reference/\" target=\"_blank\" title=\"https://doc.rust-lang.org/cargo/reference/\">https://doc.rust-lang.org/cargo/reference/</a></p>",
        "id": 148871472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594740
    },
    {
        "content": "<p>yeah it's patch IIRC</p>",
        "id": 148871487,
        "sender_full_name": "lqd",
        "timestamp": 1543594758
    },
    {
        "content": "<p>ah, found it</p>",
        "id": 148871488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594758
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/source-replacement.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/cargo/reference/source-replacement.html\">https://doc.rust-lang.org/cargo/reference/source-replacement.html</a></p>",
        "id": 148871489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594760
    },
    {
        "content": "<p>oh but also replace wow</p>",
        "id": 148871504,
        "sender_full_name": "lqd",
        "timestamp": 1543594782
    },
    {
        "content": "<p>at least it's documented yay</p>",
        "id": 148871571,
        "sender_full_name": "lqd",
        "timestamp": 1543594819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so when I use your branch</p>",
        "id": 148871595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594848
    },
    {
        "content": "<p>do I also have to edit the source?</p>",
        "id": 148871598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594851
    },
    {
        "content": "<p>yeah</p>",
        "id": 148871600,
        "sender_full_name": "lqd",
        "timestamp": 1543594856
    },
    {
        "content": "<p>or will <code>from_join</code> and friends use it automatically</p>",
        "id": 148871601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594856
    },
    {
        "content": "<p>it's a completely different api unfortunately</p>",
        "id": 148871619,
        "sender_full_name": "lqd",
        "timestamp": 1543594868
    },
    {
        "content": "<p>oh</p>",
        "id": 148871629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594881
    },
    {
        "content": "<p>:)</p>",
        "id": 148871633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594885
    },
    {
        "content": "<p>I'll try to get you one of the variants using it</p>",
        "id": 148871641,
        "sender_full_name": "lqd",
        "timestamp": 1543594900
    },
    {
        "content": "<p>well hold up</p>",
        "id": 148871649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594906
    },
    {
        "content": "<p>I'll open a PR with my changes I guess</p>",
        "id": 148871651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594912
    },
    {
        "content": "<p>then you can port that ;)</p>",
        "id": 148871652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594916
    },
    {
        "content": "<p>lol</p>",
        "id": 148871655,
        "sender_full_name": "lqd",
        "timestamp": 1543594920
    },
    {
        "content": "<p>well</p>",
        "id": 148871696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594923
    },
    {
        "content": "<p>if you have a link ready</p>",
        "id": 148871699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594925
    },
    {
        "content": "<p>that's fine too</p>",
        "id": 148871700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543594927
    },
    {
        "content": "<p>I can take care of it</p>",
        "id": 148871710,
        "sender_full_name": "lqd",
        "timestamp": 1543594944
    },
    {
        "content": "<p>but here's <a href=\"https://gist.github.com/lqd/2b227413a20e6840bd5516b69f01caf8\" target=\"_blank\" title=\"https://gist.github.com/lqd/2b227413a20e6840bd5516b69f01caf8\">an example</a> of the location_insensitive variant using the treefrog join just to show you how different it is</p>",
        "id": 148871757,
        "sender_full_name": "lqd",
        "timestamp": 1543595011
    },
    {
        "content": "<p>I guess <a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\">Frank's post</a> also shows some, but I'll port Reachable and push the other 2 I've already done then</p>",
        "id": 148871835,
        "sender_full_name": "lqd",
        "timestamp": 1543595099
    },
    {
        "content": "<p>(unrelated: about the switch to \"beta\" -- since you're removing <code>try</code> do we still need the tests returning a <code>Result&lt;(), Error&gt;</code> ?)</p>",
        "id": 148871943,
        "sender_full_name": "lqd",
        "timestamp": 1543595199
    },
    {
        "content": "<p>PS I updated my table with LOC just for fun:</p>\n<table>\n<thead>\n<tr>\n<th>Algorithm</th>\n<th>Time for clap-rs</th>\n<th>LOC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Naive</td>\n<td>31.73s</td>\n<td>221</td>\n</tr>\n<tr>\n<td>DatafrogOpt</td>\n<td>3.929s</td>\n<td>454</td>\n</tr>\n<tr>\n<td>Reachable</td>\n<td>2.360s</td>\n<td>165</td>\n</tr>\n<tr>\n<td>LocationInsensitive</td>\n<td>0.646s</td>\n<td>153</td>\n</tr>\n</tbody>\n</table>",
        "id": 148872039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543595301
    },
    {
        "content": "<blockquote>\n<p>(unrelated: about the switch to \"beta\" -- since you're removing <code>try</code> do we still need the tests returning a <code>Result&lt;(), Error&gt;</code> ?)</p>\n</blockquote>\n<p>ah, I ... guess not? depends if they are using <code>?</code> I guess?</p>",
        "id": 148872056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543595327
    },
    {
        "content": "<p>Reachable is going to be short and sweet :)</p>",
        "id": 148872167,
        "sender_full_name": "lqd",
        "timestamp": 1543595407
    },
    {
        "content": "<p>(ok I'll comment on the rustfmt PR -- or meh actually, no big deal, we can have an <code>?</code> instead of an <code>.expect()</code> :)</p>",
        "id": 148872219,
        "sender_full_name": "lqd",
        "timestamp": 1543595441
    },
    {
        "content": "<p>I'm gonna merge <a href=\"https://github.com/rust-lang-nursery/polonius/pull/85\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/85\">https://github.com/rust-lang-nursery/polonius/pull/85</a></p>",
        "id": 148872356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543595544
    },
    {
        "content": "<p>I've decided it's worth avoiding nightly dependencies in stuff the compiler uses if at all possible</p>",
        "id": 148872374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543595569
    },
    {
        "content": "<p>even if not <em>strictly</em> necessary</p>",
        "id": 148872382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543595573
    },
    {
        "content": "<p>do you want to switch to stable on dec 6 ?</p>",
        "id": 148872405,
        "sender_full_name": "lqd",
        "timestamp": 1543595592
    },
    {
        "content": "<p>ideally, but beta suffices</p>",
        "id": 148873317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543596582
    },
    {
        "content": "<p>since the compiler builds on beta :)</p>",
        "id": 148873320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543596584
    },
    {
        "content": "<p>sure :)</p>",
        "id": 148873851,
        "sender_full_name": "lqd",
        "timestamp": 1543597019
    },
    {
        "content": "<p>(I wonder how would CFG compression behave over the Reachable variant)</p>",
        "id": 148873884,
        "sender_full_name": "lqd",
        "timestamp": 1543597042
    },
    {
        "content": "<p>(oh I forgot, in my CFG compression PR, there's also the dataset from the rustc \"polonius smoke test\"; it's an interesting one because IIRC it also contained functions which shouldn't compile, &amp; important to have as we currently mostly test loans and not errors yet)</p>",
        "id": 148875259,
        "sender_full_name": "lqd",
        "timestamp": 1543598441
    },
    {
        "content": "<p>Maybe I'm missing something, how does this work without TC?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">g</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// how does this loan end up having to outlive the function?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148878353,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543601821
    },
    {
        "content": "<p>let me check because I may be missing something :)</p>",
        "id": 148879026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602473
    },
    {
        "content": "<p>(that is, maybe that's the piece I was missing; I remember doing many rounds in the original polonius days with various examples of how info had to travel)</p>",
        "id": 148879145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602594
    },
    {
        "content": "<p>(and I was planning on reproducing those rounds as part of a write-up :)</p>",
        "id": 148879195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602604
    },
    {
        "content": "<p>before that:</p>\n<div class=\"codehilite\"><pre><span></span>./x.py test src/test/ui --compare-mode polonius --bless\n</pre></div>\n\n\n<p>gives me </p>\n<div class=\"codehilite\"><pre><span></span>FAILED. 177 passed; 17 failed; 4847 ignored; 0 measured; 0 filtered out\n</pre></div>",
        "id": 148879272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> but yeah you may be right :) maybe this is a false insight =)</p>",
        "id": 148879431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602826
    },
    {
        "content": "<p>I guess that those 17 failures are not including my fixes though</p>",
        "id": 148879495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543602853
    },
    {
        "content": "<blockquote>\n<p>but it turns out my insight is mostly that some of my old rules were unnecessary :P</p>\n</blockquote>\n<p>IMO those are amongst the best insights :D</p>",
        "id": 148885336,
        "sender_full_name": "RalfJ",
        "timestamp": 1543608201
    },
    {
        "content": "<p>except when maybe it is wrong...I have to think a bit more, but I think I may have just forgotten about an important part of how polonius works (which <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> reminded me of :P)</p>",
        "id": 148886177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608991
    },
    {
        "content": "<p>but right now i'm trying to do reviews :)</p>",
        "id": 148886181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608997
    },
    {
        "content": "<p>/me still on the edge of my seat :p</p>",
        "id": 148892193,
        "sender_full_name": "lqd",
        "timestamp": 1543614834
    }
]