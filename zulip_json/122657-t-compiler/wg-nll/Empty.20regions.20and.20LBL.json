[
    {
        "content": "<p>Have we decided that this should compile? <a href=\"https://github.com/rust-lang/rust/blob/0a985f2c86add139d880882c968e68747b366be6/src/test/ui/hrtb/due-to-where-clause.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0a985f2c86add139d880882c968e68747b366be6/src/test/ui/hrtb/due-to-where-clause.rs\">https://github.com/rust-lang/rust/blob/0a985f2c86add139d880882c968e68747b366be6/src/test/ui/hrtb/due-to-where-clause.rs</a><br>\ncc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176269749,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569080754
    },
    {
        "content": "<p>NLL is allowing <code>for&lt;'b&gt; FooS&lt;'_&gt;: Foo&lt;'b&gt;</code> on line 6 because <code>'_</code> is completely unconstrained, so it can be <code>'empty</code>.</p>",
        "id": 176269875,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569080896
    },
    {
        "content": "<p>The lexical region solver doesn't allow this kind of reasoning (and NLL usually doesn't because most regions end up with at least a liveness constraint).</p>",
        "id": 176269900,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569080975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> seems like sound reasoning on NLL's part; why would we not allow this?</p>",
        "id": 176270967,
        "sender_full_name": "centril",
        "timestamp": 1569082755
    },
    {
        "content": "<p>Because such reasoning applies only in very specific situations. The fairly similar <code>({test::&lt;FooS&lt;'_&gt;&gt;}(&amp;mut 42));</code> fails to compile with and without NLL</p>",
        "id": 176271220,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569083164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> why does the block version not work?</p>",
        "id": 176271299,
        "sender_full_name": "centril",
        "timestamp": 1569083337
    },
    {
        "content": "<p><code>'_</code> is now live between the block finishing evaluation and the function being called, so is not <code>'empty</code>.</p>",
        "id": 176271313,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569083387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I guess I don't understand how that came to be.</p>\n<p>The reasoning \"<code>'_</code> is completely unconstrained, so it can be <code>'empty</code>\" seems sane tho.</p>",
        "id": 176271598,
        "sender_full_name": "centril",
        "timestamp": 1569083865
    },
    {
        "content": "<p>I'm not very happy with 'empty, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 176404099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269093
    },
    {
        "content": "<p>that's the main reason I backed out from the universe work</p>",
        "id": 176404138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269116
    },
    {
        "content": "<p>partly because it doesn't have an <em>obvious</em> analogous in polonius</p>",
        "id": 176404346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269216
    },
    {
        "content": "<p>though you can make interpretations that make sense</p>",
        "id": 176404367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269225
    },
    {
        "content": "<p>Interesting question to ask how we would deny this in NLL mode -- I guess by requiring that all the types outlive the call, which .. I'm a <em>bit</em> surprised we <em>don't</em> require</p>",
        "id": 176404505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269303
    },
    {
        "content": "<p>Is that an oversight?</p>",
        "id": 176404531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269318
    },
    {
        "content": "<p>Hmm, is <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1583-L1589\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L1583-L1589\">this comment just wrong</a>?</p>",
        "id": 176404996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269617
    },
    {
        "content": "<p>seems like it might be</p>",
        "id": 176405136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269705
    },
    {
        "content": "<p>in particular, we probably don't require that the types of <em>constants</em> are live at the point of us?</p>",
        "id": 176405152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269715
    },
    {
        "content": "<p>I guess that <a href=\"https://github.com/rust-lang/rust/pull/64749/commits/9b9b7f18805949939d9e45a4b99a9ab4b7d4b768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64749/commits/9b9b7f18805949939d9e45a4b99a9ab4b7d4b768\">this commit</a> from <a href=\"https://github.com/rust-lang/rust/issues/64749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64749\">#64749</a> address this, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>?</p>",
        "id": 177097156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569963199
    },
    {
        "content": "<p>that's also how I understood it</p>",
        "id": 177097706,
        "sender_full_name": "lqd",
        "timestamp": 1569963636
    },
    {
        "content": "<p>Yes</p>",
        "id": 177097788,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569963701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> what happened to the work you were doing to improve these errors?</p>",
        "id": 177098013,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569963845
    },
    {
        "content": "<p>I was working on a PR that made them more common without flags.</p>",
        "id": 177098073,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569963909
    },
    {
        "content": "<p>ah damn, the issues were closed with the leak-check revival and I forgot about it, I think I've seen some of Aaron Hill's PRs touch on those areas</p>",
        "id": 177098090,
        "sender_full_name": "lqd",
        "timestamp": 1569963938
    },
    {
        "content": "<p>I do remember having issues emitting \"expected/found\" trait errors at this point of the pipeline, and think have seen others with this same problem</p>",
        "id": 177098242,
        "sender_full_name": "lqd",
        "timestamp": 1569964077
    },
    {
        "content": "<p>I can find that work again, and if that's ok we can talk about those related issues and how to fix then</p>",
        "id": 177098353,
        "sender_full_name": "lqd",
        "timestamp": 1569964152
    },
    {
        "content": "<p>(some of the work was merged though, but there were a bunch of other paths triggering this specific unclear error)</p>",
        "id": 177098952,
        "sender_full_name": "lqd",
        "timestamp": 1569964599
    },
    {
        "content": "<blockquote>\n<p>I've seen some of Aaron Hill's PRs touch on those areas</p>\n</blockquote>\n<p>for example <a href=\"https://github.com/rust-lang/rust/issues/63678\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63678\">#63678</a> just in case you hadn't seen it</p>",
        "id": 177102179,
        "sender_full_name": "lqd",
        "timestamp": 1569967574
    }
]