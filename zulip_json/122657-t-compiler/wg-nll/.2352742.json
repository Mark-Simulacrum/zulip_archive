[
    {
        "content": "<p>With the PR for <a href=\"https://github.com/rust-lang/rust/issues/52739\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52739\">#52739</a> approved, figured I'd open a new topic (instead of <code>issue-52739</code>) to discuss <a href=\"https://github.com/rust-lang/rust/issues/52742\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52742\">#52742</a>.</p>",
        "id": 130992688,
        "sender_full_name": "davidtwco",
        "timestamp": 1533576677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 130992694,
        "sender_full_name": "davidtwco",
        "timestamp": 1533576689
    },
    {
        "content": "<p>+1</p>",
        "id": 130992784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> what error do we get with your branch?</p>",
        "id": 130992798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576800
    },
    {
        "content": "<p>for that example</p>",
        "id": 130992802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576803
    },
    {
        "content": "<p>can you paste it in there?</p>",
        "id": 130992808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576805
    },
    {
        "content": "<p>oh, actually, i'm going to guess it's the same?</p>",
        "id": 130992821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576821
    },
    {
        "content": "<p>probably we assume that all EarlyBound regions are named and not anonymous?</p>",
        "id": 130992878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576853
    },
    {
        "content": "<p>that strikes me as a bug in the \"nice region error\" code</p>",
        "id": 130992884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576862
    },
    {
        "content": "<p>Same as issue, yeah: <a href=\"https://gist.github.com/davidtwco/3f8c293d4455bbbc8de7988eabe53f55\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/3f8c293d4455bbbc8de7988eabe53f55\">https://gist.github.com/davidtwco/3f8c293d4455bbbc8de7988eabe53f55</a></p>",
        "id": 130992887,
        "sender_full_name": "davidtwco",
        "timestamp": 1533576866
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that <a href=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc/infer/error_reporting/nice_region_error/util.rs#L202-L212\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc/infer/error_reporting/nice_region_error/util.rs#L202-L212\">this function</a> is wrong</p>",
        "id": 130992942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576934
    },
    {
        "content": "<p>in particular <a href=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc/infer/error_reporting/nice_region_error/util.rs#L209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27ede55414e01f13c6869a8763da207e544cc6ad/src/librustc/infer/error_reporting/nice_region_error/util.rs#L209\">this line</a></p>",
        "id": 130992949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576947
    },
    {
        "content": "<p>I was just looking at that, then at <code>ReEarlyBound</code> to see if there were functions on it that would identify it as a <code>'_</code>.</p>",
        "id": 130993000,
        "sender_full_name": "davidtwco",
        "timestamp": 1533576966
    },
    {
        "content": "<p>we should check the <code>name</code>, yeah</p>",
        "id": 130993005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576977
    },
    {
        "content": "<p>when that code was written, <code>'_</code> was not a thing</p>",
        "id": 130993011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533576984
    },
    {
        "content": "<p>I'll throw a branch together with that.</p>",
        "id": 130993020,
        "sender_full_name": "davidtwco",
        "timestamp": 1533577000
    },
    {
        "content": "<p>not sure what name we use there</p>",
        "id": 130993021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577005
    },
    {
        "content": "<p>I assume that other parts of our region inference error handling might make the same assumption about <code>ReEarlyBound</code> always being named.</p>",
        "id": 130993046,
        "sender_full_name": "davidtwco",
        "timestamp": 1533577048
    },
    {
        "content": "<p>it appears to be the result of this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lifetime_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">def_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">as_local_node_id</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()).</span><span class=\"n\">as_interned_str</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130993059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577060
    },
    {
        "content": "<p>I think we will use <code>keywords::UnderscoreLifetime.name().as_interned_str()</code> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 130993121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577107
    },
    {
        "content": "<p>i.e., that is what <code>name</code> will be for a <code>'_</code> or other anonymous lifetime</p>",
        "id": 130993134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577116
    },
    {
        "content": "<p>that appears in an impl header</p>",
        "id": 130993137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577119
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 130993163,
        "sender_full_name": "davidtwco",
        "timestamp": 1533577153
    },
    {
        "content": "<p>from here, in case you are curious (<a href=\"https://github.com/rust-lang/rust/blob/4b8089daf8046d7999310d44e5c68ccff4ab255a/src/librustc/hir/lowering.rs#L678-L684\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4b8089daf8046d7999310d44e5c68ccff4ab255a/src/librustc/hir/lowering.rs#L678-L684\">link to source</a>)</p>",
        "id": 130993252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533577218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> what do you think of <a href=\"https://github.com/rust-lang/rust/pull/53088#pullrequestreview-143719446\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53088#pullrequestreview-143719446\">these proposed changes to your PR</a>? (I'm sharing this topic because it seems relevant enough)</p>",
        "id": 130997829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533582248
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 130998067,
        "sender_full_name": "davidtwco",
        "timestamp": 1533582507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Both look good.</p>",
        "id": 130998091,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1533582546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ok, cool...wasn't sure if you'd want to split out into a distinct PR</p>",
        "id": 130998128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533582601
    },
    {
        "content": "<p>but I think it'll be simple enough</p>",
        "id": 130998182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533582612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Submitted <a href=\"https://github.com/rust-lang/rust/issues/53124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53124\">#53124</a> for <a href=\"https://github.com/rust-lang/rust/issues/52742\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52742\">#52742</a>.</p>",
        "id": 130998534,
        "sender_full_name": "davidtwco",
        "timestamp": 1533582993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> great! that is more the message I expected; I wouldn't say it <em>fixes</em> 52742 though. More like \"exposes\" it</p>",
        "id": 130998561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583063
    },
    {
        "content": "<p>seems like good progress regardless</p>",
        "id": 130998613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583089
    },
    {
        "content": "<p>Should I change it to \"Part of <a href=\"https://github.com/rust-lang/rust/issues/52742\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52742\">#52742</a>\"?</p>",
        "id": 130998623,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583101
    },
    {
        "content": "<p>one easy thing might be to fix the<code>&amp;self</code> handling to use the \"pretty-printed type\"</p>",
        "id": 130998625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583103
    },
    {
        "content": "<p>yeah</p>",
        "id": 130998626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583105
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/issue-52742.rs:25:9\n   |\nLL |     fn take_bar(&amp;mut self, b: Bar&lt;&#39;_&gt;) {\n   |                 ---------         -- let&#39;s call this `&#39;1`\n   |                 |\n   |                 has type `&amp;mut Foo&lt;&#39;1, &#39;_&gt;`\nLL |         self.y = b.z\n   |         ^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;2`\n</pre></div>",
        "id": 130998640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583127
    },
    {
        "content": "<p>which would be better</p>",
        "id": 130998650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583136
    },
    {
        "content": "<p>I think my ideal though might be to highlight the impl itself:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/issue-52742.rs:25:9\n   |\nLL |  impl Foo&lt;&#39;_, &#39;_&gt; {\n  |            -- let&#39;s call this `&#39;2`\nLL |     fn take_bar(&amp;mut self, b: Bar&lt;&#39;_&gt;) {\n   |                                   -- let&#39;s call this `&#39;1`\nLL |         self.y = b.z\n   |         ^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;2`\n</pre></div>",
        "id": 130998723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583215
    },
    {
        "content": "<p>something like that</p>",
        "id": 130998745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583256
    },
    {
        "content": "<p>that would be a bit harder :)</p>",
        "id": 130998753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583271
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 130998754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583275
    },
    {
        "content": "<p>I think I prefer annotating the function rather than the impl - the locality of it all helps I think - might just be me though.</p>",
        "id": 130998763,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583309
    },
    {
        "content": "<p>yeah, I'm not entirely sure which I prefer</p>",
        "id": 130998816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583357
    },
    {
        "content": "<p>another interesting case is when you have a named lifetime</p>",
        "id": 130998827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583370
    },
    {
        "content": "<p>e.g., imagine</p>",
        "id": 130998830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583375
    },
    {
        "content": "<p>Are those parameters on the impl not intended to be inferred from the struct defn in future?</p>",
        "id": 130998844,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583385
    },
    {
        "content": "<p>I’d kinda prefer if <code>'_</code>s were replaced in-place as well, it would make reading the error in-a-glance way easier. Don’t need to scan around for the “lets call this x”.</p>",
        "id": 130998848,
        "sender_full_name": "nagisa",
        "timestamp": 1533583390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/issue-52742.rs:25:9\n   |\nLL |  impl Foo&lt;&#39;tcx, &#39;_&gt; {\n  |            ----`&#39;tcx` declared here\nLL |     fn take_bar(&amp;mut self, b: Bar&lt;&#39;_&gt;) {\n   |                                   -- let&#39;s call this `&#39;1`\nLL |         self.y = b.z\n   |         ^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;tcx`\n</pre></div>",
        "id": 130998849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583391
    },
    {
        "content": "<blockquote>\n<p>I’d kinda prefer if <code>'_</code>s were replaced in-place as well, it would make reading the error in-a-glance way easier. Don’t need to scan around for the “lets call this x”.</p>\n</blockquote>\n<p>I think this is an interesting idea -- editing the source txt -- but I'd prefer to hold off on it</p>",
        "id": 130998863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583419
    },
    {
        "content": "<p>in particular, we are working now on identifying the spans etc</p>",
        "id": 130998872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583429
    },
    {
        "content": "<p>once we have the <em>labels</em> all working as we want, transitioning to editing the source text seems like an orthogonal step</p>",
        "id": 130998892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583442
    },
    {
        "content": "<p>yes, can always be implemented as a improvement once everything lands at all.</p>",
        "id": 130998930,
        "sender_full_name": "nagisa",
        "timestamp": 1533583444
    },
    {
        "content": "<blockquote>\n<p>Are those parameters on the impl not intended to be inferred from the struct defn in future?</p>\n</blockquote>\n<p>they are not inferred from the struct definition, no.. but they may not require explicit declarations</p>",
        "id": 130998948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583471
    },
    {
        "content": "<p>e.g., like my second example</p>",
        "id": 130998953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583478
    },
    {
        "content": "<p>but that feature still hasn't gotten enough usage for me to feel confident about its fate</p>",
        "id": 130998962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583493
    },
    {
        "content": "<p>anyway, I'd be happy with either the \"fully annotated self type\" or \"select the impl\" version to start</p>",
        "id": 130998971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583506
    },
    {
        "content": "<p>but I'd like to get rid of all the \"lifetime <code>'1</code> appears in foo\" sort of messages at least</p>",
        "id": 130998978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583519
    },
    {
        "content": "<p>which are horribly unspecific</p>",
        "id": 130998980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583521
    },
    {
        "content": "<p>I reckon I could probably use the existing \"has type\" logic. I'd just need to detect when we are looking at <code>self</code> in the code where the \"lifetime appears in\" message logic and call that function.</p>",
        "id": 130999084,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583643
    },
    {
        "content": "<p>right</p>",
        "id": 130999156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583700
    },
    {
        "content": "<p>I think right now what happens</p>",
        "id": 130999161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583709
    },
    {
        "content": "<p>is that we fail to \"match\" the <code>Ty&lt;'tcx&gt;</code> and the HIR type</p>",
        "id": 130999164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583715
    },
    {
        "content": "<p>I imagine we could — in this case — fallback to the \"has type\" sort of display</p>",
        "id": 130999167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583728
    },
    {
        "content": "<p>that was my intention, anyway</p>",
        "id": 130999169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583731
    },
    {
        "content": "<p>thinking a bit more about it, I think one appealing point about highlighting the <code>impl</code> is that -- if you wanted to change the lifetime in the <code>self</code> type -- it shows you the code you would have to edit to do so</p>",
        "id": 130999187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583762
    },
    {
        "content": "<p>I guess we could give both, too</p>",
        "id": 130999189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583765
    },
    {
        "content": "<p>anyway, changing the \"fallback\" to \"has type\" seems like a good step regardless</p>",
        "id": 130999193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583778
    },
    {
        "content": "<p>probably helps with some other cases</p>",
        "id": 130999195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583782
    },
    {
        "content": "<p>hybrid:</p>\n<div class=\"codehilite\"><pre><span></span>error: unsatisfied lifetime constraints\n  --&gt; $DIR/issue-52742.rs:25:9\n   |\nLL |  impl Foo&lt;&#39;_, &#39;_&gt; {\n  |            -- let&#39;s call this `&#39;2`\nLL |     fn take_bar(&amp;mut self, b: Bar&lt;&#39;_&gt;) {\n   |                 ---------         -- let&#39;s call this `&#39;1`\n   |                 |\n   |                 has type `&amp;mut Foo&lt;&#39;2, &#39;_&gt;`\nLL |         self.y = b.z\n   |         ^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;2`\n</pre></div>",
        "id": 130999251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583832
    },
    {
        "content": "<p>What's the best way to check if the <code>argument_hir_ty: &amp;hir::Ty</code> I have is <code>self</code>?</p>",
        "id": 130999265,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583835
    },
    {
        "content": "<p>I don't think you need to do that actually</p>",
        "id": 130999270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583850
    },
    {
        "content": "<p>Just fallback to \"has type\" in all cases?</p>",
        "id": 130999305,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583894
    },
    {
        "content": "<p>Or from some other criteria?</p>",
        "id": 130999309,
        "sender_full_name": "davidtwco",
        "timestamp": 1533583902
    },
    {
        "content": "<p>all cases</p>",
        "id": 130999313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583906
    },
    {
        "content": "<p>here is the function I am talking about <a href=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L172-L188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L172-L188\">link</a></p>",
        "id": 130999321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583915
    },
    {
        "content": "<p>you can see in my comment what I wanted it to look like :)</p>",
        "id": 130999368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583930
    },
    {
        "content": "<p>anyway, <a href=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L212-L215\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L212-L215\">this is the fallback here</a></p>",
        "id": 130999399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533583978
    },
    {
        "content": "<p>Ah, I was looking at <code>give_name_if_we_can_match_hir_ty_from_argument</code> because that has the message has \"appears in this type\" rather than \"appears in this argument\".</p>",
        "id": 130999420,
        "sender_full_name": "davidtwco",
        "timestamp": 1533584014
    },
    {
        "content": "<p>oh well maybe I am wrong too :)</p>",
        "id": 130999695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584396
    },
    {
        "content": "<p>oh hmm there is <a href=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L417-L423\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L417-L423\">this fallback too</a>...</p>",
        "id": 130999761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584457
    },
    {
        "content": "<p>maybe I wound up with 'double fallback'? :)</p>",
        "id": 130999767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think that <a href=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L417-L423\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs#L417-L423\">this code should return <code>None</code></a></p>",
        "id": 130999780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584487
    },
    {
        "content": "<p>and then the \"arguments code\" I was talking about should be modified to use the \"has type\" formulation</p>",
        "id": 130999787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584509
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 130999832,
        "sender_full_name": "davidtwco",
        "timestamp": 1533584530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> want me to hold off on <a href=\"https://github.com/rust-lang/rust/pull/53124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53124\">https://github.com/rust-lang/rust/pull/53124</a> then? (i.e., try to make those changes in this PR?)</p>",
        "id": 130999869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584592
    },
    {
        "content": "<p>Yeah, I'll hopefully get that in tonight <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 131000016,
        "sender_full_name": "davidtwco",
        "timestamp": 1533584762
    },
    {
        "content": "<p>ok</p>",
        "id": 131000064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533584778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> That's the fallback changed.</p>",
        "id": 131004463,
        "sender_full_name": "davidtwco",
        "timestamp": 1533589801
    },
    {
        "content": "<p>Interestingly, only affected that single case.</p>",
        "id": 131004506,
        "sender_full_name": "davidtwco",
        "timestamp": 1533589808
    },
    {
        "content": "<p>what is \"that\"?</p>",
        "id": 131004546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533589894
    },
    {
        "content": "<p>did you update PR?</p>",
        "id": 131004549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533589897
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 131004593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533589932
    },
    {
        "content": "<p>still, very nice</p>",
        "id": 131004595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533589934
    },
    {
        "content": "<p>that mostly means we need more tests I guess ;)</p>",
        "id": 131004598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533589943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> if you are looking for more things to do =) <a href=\"https://github.com/rust-lang/rust/issues/51175\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51175\">https://github.com/rust-lang/rust/issues/51175</a> are kind of interesting</p>",
        "id": 131004619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590020
    },
    {
        "content": "<p>in each case, it seems like we pick a bad span to highlight</p>",
        "id": 131004621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590029
    },
    {
        "content": "<p>would have to dig in to see why</p>",
        "id": 131004623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533590035
    },
    {
        "content": "<p>Sounds good, I'll assign it.</p>",
        "id": 131004625,
        "sender_full_name": "davidtwco",
        "timestamp": 1533590042
    },
    {
        "content": "<p>I think I have that fixed (or at least improved) locally (I was working on something else, which is why I didn't assign it)</p>",
        "id": 131004704,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1533590141
    },
    {
        "content": "<p>I'll unassign it.</p>",
        "id": 131004756,
        "sender_full_name": "davidtwco",
        "timestamp": 1533590172
    },
    {
        "content": "<blockquote>\n<p>maybe I wound up with 'double fallback'? :)</p>\n</blockquote>\n<p>Careful, if you get to triple fallback the processor will reset...</p>",
        "id": 131009973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533598464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> PR for this failed on merge testing in AppVeyor - not particularly sure why. I've seen it and will take a look.</p>",
        "id": 131156051,
        "sender_full_name": "davidtwco",
        "timestamp": 1533800035
    },
    {
        "content": "<p>So, I can reproduce the failure locally after a rebase.</p>",
        "id": 131161677,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808428
    },
    {
        "content": "<p>Seems like it isn't really anything to do with this PR, something another PR has changed.</p>",
        "id": 131161758,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808538
    },
    {
        "content": "<p>So I'm just going to do a <code>--bless</code> and push since I assume the output is intended given that the other PR that changed it got through review.</p>",
        "id": 131161822,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808584
    },
    {
        "content": "<p>Even though it changes the test case for this change (and others) - the execution never seems to get to output this diagnostic this PR changed.</p>",
        "id": 131161849,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808654
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> failures:\n ---- [ui] ui\\nll\\issue-52742.rs stdout ----\n diff of stderr:\n<span class=\"gd\">-   error: unsatisfied lifetime constraints</span>\n<span class=\"gd\">-     --&gt; $DIR/issue-52742.rs:25:9</span>\n<span class=\"gi\">+   error[E0106]: missing lifetime specifiers</span>\n<span class=\"gi\">+     --&gt; $DIR/issue-52742.rs:23:10</span>\n3      |\n<span class=\"gd\">-   LL |     fn take_bar(&amp;mut self, b: Bar&lt;&#39;_&gt;) {</span>\n<span class=\"gd\">-      |                 ---------         -- let&#39;s call this `&#39;1`</span>\n<span class=\"gd\">-      |                 |</span>\n<span class=\"gd\">-      |                 has type `&amp;mut Foo&lt;&#39;_, &#39;2&gt;`</span>\n<span class=\"gd\">-   LL |         self.y = b.z</span>\n<span class=\"gd\">-      |         ^^^^^^^^^^^^ requires that `&#39;1` must outlive `&#39;2`</span>\n<span class=\"gi\">+   LL | impl Foo&lt;&#39;_, &#39;_&gt; {</span>\n<span class=\"gi\">+      |          ^^ expected 2 lifetime parameters</span>\n10\n11  error: aborting due to previous error\n12\n<span class=\"gi\">+   For more information about this error, try `rustc --explain E0106`.</span>\n13\n</pre></div>\n\n\n<p>This was the test case we specifically added to test <code>&amp;mut Foo&lt;'_, '2&gt;</code> - should we add another since it no longer does that?</p>",
        "id": 131161906,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> see <a href=\"https://github.com/rust-lang/rust/pull/53124/files#r208872417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53124/files#r208872417\">https://github.com/rust-lang/rust/pull/53124/files#r208872417</a></p>",
        "id": 131161919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808763
    },
    {
        "content": "<p>Oh, thanks!</p>",
        "id": 131161924,
        "sender_full_name": "davidtwco",
        "timestamp": 1533808781
    },
    {
        "content": "<p>Fixed that PR, passes locally. Should be good to <code>r+</code> again once Travis confirms.</p>",
        "id": 131162114,
        "sender_full_name": "davidtwco",
        "timestamp": 1533809061
    },
    {
        "content": "<p>PR is all green again.</p>",
        "id": 131169540,
        "sender_full_name": "davidtwco",
        "timestamp": 1533818643
    }
]