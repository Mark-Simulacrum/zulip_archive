[
    {
        "content": "<p>I'm creating a topic thread for <a href=\"https://github.com/rust-lang/rust/issues/53123\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53123\">#53123</a>. <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> may take a look.</p>",
        "id": 131122205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533750107
    },
    {
        "content": "<p>I can assign the issue to you <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, if you want to \"commit\" (at least for now..)</p>",
        "id": 131122266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533750151
    },
    {
        "content": "<p>Hello! Hopefully I am using Zulip right</p>",
        "id": 131122389,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533750314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok. So do you want to play around with <code>candidate_should_be_dropped_in_favor_of</code> or look at the alternate solution?</p>",
        "id": 131124367,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752171
    },
    {
        "content": "<p>I think I would prefer to start by playing around with <code>candidate_should_be_dropped_in_favor_of</code></p>",
        "id": 131124405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752259
    },
    {
        "content": "<p>the NLL hack is sort of a \"fallback\"</p>",
        "id": 131124407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752267
    },
    {
        "content": "<p>It's my first time in the borrowing/lifetimes code. Can you give me a bit of an overview? It would be helpful to understand <code>candidate_should_be_dropped_in_favor_of</code></p>",
        "id": 131124646,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752527
    },
    {
        "content": "<p>well that code is really not concerned with borrowing or lietimes</p>",
        "id": 131124655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752548
    },
    {
        "content": "<p>it is in the trait solver</p>",
        "id": 131124660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752552
    },
    {
        "content": "<p>Ye Olde Crappy Trait solver, that is</p>",
        "id": 131124668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752559
    },
    {
        "content": "<p>rather than the New And Shiny Chalk ;)</p>",
        "id": 131124672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752567
    },
    {
        "content": "<p>there is actually a write-up of how it works in the rustc guide I think</p>",
        "id": 131124676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752575
    },
    {
        "content": "<p>I wonder how up to date it is</p>",
        "id": 131124681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752579
    },
    {
        "content": "<p>the write-up is in the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\">Trait Solving (Old Style)</a> chapter</p>",
        "id": 131124708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752611
    },
    {
        "content": "<p>in particular, the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#winnowing-resolving-ambiguities\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#winnowing-resolving-ambiguities\">section on winnowing</a></p>",
        "id": 131124721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752628
    },
    {
        "content": "<p>/me reading</p>",
        "id": 131124775,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752655
    },
    {
        "content": "<blockquote>\n<p>During type checking, we do not store the results of trait selection. We simply wish to verify that trait selection will succeed. Then later, at trans time, when we have all concrete types available, we can repeat the trait selection to choose an actual implementation, which will then be generated in the output binary.</p>\n</blockquote>",
        "id": 131124912,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752784
    },
    {
        "content": "<p>Is there a downside to storing the selected trait?</p>",
        "id": 131124924,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752794
    },
    {
        "content": "<p>Why search for it twice?</p>",
        "id": 131124928,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752800
    },
    {
        "content": "<p>Are there some impls that can only be known at trans time?</p>",
        "id": 131124934,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752812
    },
    {
        "content": "<p>complexity, for one thing</p>",
        "id": 131124935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752814
    },
    {
        "content": "<p>but also it doesn't play so well with specialization</p>",
        "id": 131124937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752819
    },
    {
        "content": "<p>Ah okay makes sense</p>",
        "id": 131124947,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752829
    },
    {
        "content": "<p>Thanks</p>",
        "id": 131124948,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533752830
    },
    {
        "content": "<p>in particular if we are checking a generic fn, we may find a generic impl, but once we know the concrete types, we can find a more narrow one</p>",
        "id": 131124958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok so I created a PR which adds the test case from the issue as a new run-pass test. As expected, the test currently fails. <a href=\"https://github.com/rust-lang/rust/pull/53212\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53212\">https://github.com/rust-lang/rust/pull/53212</a></p>",
        "id": 131154919,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798164
    },
    {
        "content": "<p>I printed out the arguments to <code>candidate_should_be_dropped_in_favor_of</code> and got the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">victim</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EvaluatedCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">candidate</span>: <span class=\"nc\">BuiltinCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">has_nested</span>: <span class=\"nc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluation</span>: <span class=\"nc\">EvaluatedToOk</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EvaluatedCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">candidate</span>: <span class=\"nc\">ParamCandidate</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluation</span>: <span class=\"nc\">EvaluatedToOk</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"n\">victim</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EvaluatedCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">candidate</span>: <span class=\"nc\">BuiltinCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">has_nested</span>: <span class=\"nc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluation</span>: <span class=\"nc\">EvaluatedToOk</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EvaluatedCandidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">candidate</span>: <span class=\"nc\">ParamCandidate</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluation</span>: <span class=\"nc\">EvaluatedToOk</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131154942,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798242
    },
    {
        "content": "<p>Tried out a few things here and there, but I'm not quite sure I completely understand the fix you're suggesting in the issue.</p>",
        "id": 131154994,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798298
    },
    {
        "content": "<p>It is taking me ridiculously long to make any progress because rustc takes a <strong>ridiculous</strong> amount of time to recompile every time I make even a tiny change (like adding logging)</p>",
        "id": 131155014,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>./x.py build -i --stage 1 --keep-stage 0 &amp;&amp; RUST_LOG=rustc::traits ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/test/run-pass/nll/issue-53123-raw-pointer-cast.rs\n</pre></div>",
        "id": 131155056,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798364
    },
    {
        "content": "<p>This is the entire command I'm running. Let me know if you have any tips :)</p>",
        "id": 131155065,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533798375
    },
    {
        "content": "<p>hmm the command I usually do is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">keep</span><span class=\"o\">-</span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">libstd</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and I find that adding logging or other small deltas are usually not that slow</p>",
        "id": 131161974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808845
    },
    {
        "content": "<p>the change I was proposing to fix the issue would be to modify the <code>candidate_should_be_dropped_in_favor_of</code> so that it prefers a <code>BuiltinCandidate</code> -- specifically, a <code>BuiltinCandidate</code> with <code>has_nested: false</code> -- to any other</p>",
        "id": 131161989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808892
    },
    {
        "content": "<p>the <code>has_nested: false</code> means that there are no <em>further</em> obligations</p>",
        "id": 131161992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808916
    },
    {
        "content": "<p>I think all of our built-in candidates  are very general</p>",
        "id": 131162036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808949
    },
    {
        "content": "<p>so this would be the most accepting thing we can do</p>",
        "id": 131162039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808957
    },
    {
        "content": "<p>another pattern that I use a lot <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> is to do <code>./x.py check</code> all the time until I am ready to test</p>",
        "id": 131162921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810187
    },
    {
        "content": "<p>I guess that won't help here</p>",
        "id": 131162923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810190
    },
    {
        "content": "<p>If I pass <code>src/libstd</code> to the build command, won't it only build the standard library? I need it to build the trait solver</p>",
        "id": 131193501,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533843738
    },
    {
        "content": "<p>Also, if you <code>--keep-stage 1</code>, won't it not build stage 1 at all?</p>",
        "id": 131193530,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533843793
    },
    {
        "content": "<p>Right, that command will rebuild the stage 0 compiler but skip rebuilding stage 1 std</p>",
        "id": 131193586,
        "sender_full_name": "simulacrum",
        "timestamp": 1533843847
    },
    {
        "content": "<p>which gives you a mostly fully functioning compiler</p>",
        "id": 131193588,
        "sender_full_name": "simulacrum",
        "timestamp": 1533843855
    },
    {
        "content": "<p>I guess the docs here are a bit misleading then: <a href=\"https://rust-lang-nursery.github.io/rustc-guide/how-to-build-and-run.html#running-xpy-and-building-a-stage1-compiler\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/how-to-build-and-run.html#running-xpy-and-building-a-stage1-compiler\">https://rust-lang-nursery.github.io/rustc-guide/how-to-build-and-run.html#running-xpy-and-building-a-stage1-compiler</a></p>",
        "id": 131193594,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533843870
    },
    {
        "content": "<p>Stage 0 is built from my local checkout?</p>",
        "id": 131193597,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533843881
    },
    {
        "content": "<p>From those docs:</p>\n<blockquote>\n<p>Stage 0: the stage0 compiler can be your existing (perhaps older version of) Rust compiler, the current beta compiler or you may download the binary from the internet.</p>\n</blockquote>",
        "id": 131193601,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533843891
    },
    {
        "content": "<p>Yes stage 0 compiler artifacts (stage1/bin/rustc)</p>",
        "id": 131193766,
        "sender_full_name": "simulacrum",
        "timestamp": 1533844102
    },
    {
        "content": "<p>Ohhh. The result of stage 0 is stage 1. That makes sense actually. Thanks!</p>",
        "id": 131193795,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533844156
    },
    {
        "content": "<p>So is the command I want to use <code>./x.py build -i --stage 1 --keep-stage 0 src/librustc</code>?</p>",
        "id": 131193873,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533844209
    },
    {
        "content": "<p>I tried <code>--keep-stage 1</code> but I got some warnings and panics</p>",
        "id": 131193880,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533844223
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Updating only changed submodules\nSubmodules updated in 0.04 seconds\n    Finished dev [unoptimized] target(s) in 0.19s\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.21s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.18s\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.23s\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 codegen artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu, llvm)\n    Finished release [optimized] target(s) in 0.19s\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\nWarning: Using a potentially old libstd. This may not behave well.\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nthread &#39;main&#39; panicked at &#39;File::open(stamp) failed with No such file or directory (os error 2)&#39;, bootstrap/lib.rs:1109:12\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nfailed to run: /home/sunjay/Documents/projects/rust/build/bootstrap/debug/bootstrap build -i --stage 1 --keep-stage 1 src/librustc\n</pre></div>",
        "id": 131193885,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533844242
    },
    {
        "content": "<p>Yeah so you need to build once without it</p>",
        "id": 131194220,
        "sender_full_name": "simulacrum",
        "timestamp": 1533844684
    },
    {
        "content": "<p>Then add it</p>",
        "id": 131194225,
        "sender_full_name": "simulacrum",
        "timestamp": 1533844687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> I usually use <code>--keep-stage 1</code> personally -- if I get problems, I take it away for one cycle :)</p>",
        "id": 131194874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533845620
    },
    {
        "content": "<p>but I don't really know what <code>--keep-stage 0</code> does :)</p>",
        "id": 131194877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533845628
    },
    {
        "content": "<p>Currently building stage 1. I'll try it with <code>--keep-stage 1</code> after that :)</p>",
        "id": 131194952,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533845742
    },
    {
        "content": "<p>Thanks for both of your help!</p>",
        "id": 131194953,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533845745
    },
    {
        "content": "<p><code>./x.py build -i --stage 1 --keep-stage 1 src/librustc</code> compiles fast!</p>",
        "id": 131195260,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533846185
    },
    {
        "content": "<p>yes, yes it does.</p>",
        "id": 131195313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533846201
    },
    {
        "content": "<p>Though you probably want src/libstd as skipping librustc/compiling it is useless</p>",
        "id": 131195447,
        "sender_full_name": "simulacrum",
        "timestamp": 1533846369
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/a4FHprs819k1T4YsRfHmZM6U/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/a4FHprs819k1T4YsRfHmZM6U/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/a4FHprs819k1T4YsRfHmZM6U/pasted_image.png\"></a></div>",
        "id": 131195475,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533846434
    },
    {
        "content": "<p>Isn't the path what you are asking it to compile?</p>",
        "id": 131195483,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533846444
    },
    {
        "content": "<p>It won't skip librustc</p>",
        "id": 131195485,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533846452
    },
    {
        "content": "<p>src/libstd is what you'd want</p>",
        "id": 131195543,
        "sender_full_name": "simulacrum",
        "timestamp": 1533846514
    },
    {
        "content": "<p>Sorry, I'm trying to understand what you're recommending. The file I'm editing is <code>src/librustc/traits/select.rs</code>. Why pass <code>src/libstd</code> instead of <code>src/librustc</code>?</p>",
        "id": 131195658,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533846704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> the point is that there is a sequence of things to build:</p>\n<ul>\n<li>(stage 0) libstd</li>\n<li>(stage 0) rustc</li>\n<li>(stage 1) libstd</li>\n<li>(stage 1) rustc</li>\n</ul>",
        "id": 131195789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533846861
    },
    {
        "content": "<p>so when you say <code>--stage 1 src/libstd</code>, you build everything up to there-- which includes rustc built by the stage0 compiler</p>",
        "id": 131195799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533846879
    },
    {
        "content": "<p>Oh! That makes sense! I wish that was explained in the rustc-guide (if it is, we should move it to the section about building rustc)</p>",
        "id": 131195927,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533847045
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 131195928,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533847047
    },
    {
        "content": "<p>I thought it was :)</p>",
        "id": 131195936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847067
    },
    {
        "content": "<p>but maybe not very well</p>",
        "id": 131195937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847069
    },
    {
        "content": "<p>that is, in the section you pointed at</p>",
        "id": 131195978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847083
    },
    {
        "content": "<p>it says:</p>\n<blockquote>\n<p>What this command will do is the following:</p>\n<ul>\n<li>Using the beta compiler (also called stage 0), it will build the standard library and rustc from the src directory. The resulting compiler is called the \"stage 1\" compiler.<ul>\n<li>During this build, the -i (or --incremental) switch enables incremental compilation, so that if you later rebuild after editing things in src, you can save a bit of time.</li>\n</ul>\n</li>\n<li>Using this stage 1 compiler, it will build the standard library. (this is what the src/libstd) means.</li>\n</ul>\n</blockquote>",
        "id": 131195999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847124
    },
    {
        "content": "<p>but clearly could be clearer</p>",
        "id": 131196008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847144
    },
    {
        "content": "<p>also that section prob needs updating for <code>--keep-stage 1</code>...</p>",
        "id": 131196014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533847153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The PR is updated: <a href=\"https://github.com/rust-lang/rust/pull/53212\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53212\">https://github.com/rust-lang/rust/pull/53212</a></p>",
        "id": 131197411,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533849003
    },
    {
        "content": "<p>See my comment in the PR for some information about what I did</p>",
        "id": 131197440,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533849012
    },
    {
        "content": "<p>I basically implemented exactly what you said and made it so that <code>BuiltInCandidate { has_nested: false }</code> is preferred in <strong>all</strong> cases</p>",
        "id": 131197447,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533849033
    },
    {
        "content": "<p>looks about right</p>",
        "id": 131200512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533853319
    },
    {
        "content": "<p>although that fn is always kind of mind-bending</p>",
        "id": 131200557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533853326
    },
    {
        "content": "<p>/me can't wait for chalk</p>",
        "id": 131200559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533853328
    },
    {
        "content": "<p>I <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span> chalk</p>",
        "id": 131201762,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533855200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Tests have passed in the PR. Anything else to be done or shall we merge it?</p>",
        "id": 131201820,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533855257
    },
    {
        "content": "<p>no, that's probably fine</p>",
        "id": 131201899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855439
    },
    {
        "content": "<p>Ok. Then I guess it's good to go: <a href=\"https://github.com/rust-lang/rust/pull/53212\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53212\">https://github.com/rust-lang/rust/pull/53212</a></p>",
        "id": 131201982,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533855583
    },
    {
        "content": "<p><span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 131201988,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1533855596
    }
]