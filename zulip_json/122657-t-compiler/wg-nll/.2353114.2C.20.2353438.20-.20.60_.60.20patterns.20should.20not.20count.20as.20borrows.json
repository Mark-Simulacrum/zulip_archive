[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I realized after your comment that discriminants aren't places, so we can't borrow one. I guess I could try making it one or alternatively make a new <code>StatementKind</code>/<code>Rvalue</code> for them. I guess I could try both and see how they compare.</p>",
        "id": 133081354,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535658038
    },
    {
        "content": "<p>I think that this is probably the approach that seems most natural.</p>",
        "id": 133081365,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535658062
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I realized after your comment that discriminants aren't places, so we can't borrow one. I guess I could try making it one or alternatively make a new <code>StatementKind</code>/<code>Rvalue</code> for them. I guess I could try both and see how they compare.</p>\n</blockquote>\n<p>actually, we have a hack here...</p>",
        "id": 133115332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535709807
    },
    {
        "content": "<p>ah, right</p>",
        "id": 133115401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535709892
    },
    {
        "content": "<p>I was thinking of this:</p>",
        "id": 133115407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535709901
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/borrow_check/mod.rs#L730-L734\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/borrow_check/mod.rs#L730-L734\">https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/borrow_check/mod.rs#L730-L734</a></p>",
        "id": 133115417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535709921
    },
    {
        "content": "<p>however — presently — this is not part of a <code>Place</code>, you are correct, instead, that is used as part of <a href=\"https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/borrow_check/mod.rs#L738-L743\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src/librustc_mir/borrow_check/mod.rs#L738-L743\">specifying what you access</a></p>",
        "id": 133115424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535709953
    },
    {
        "content": "<p>hmm, hmm, hmm</p>",
        "id": 133115475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535710005
    },
    {
        "content": "<p>I mean borrowing the \"thing that contains the discriminant\" would be a suitable overapproximation :P</p>",
        "id": 133115479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535710020
    },
    {
        "content": "<p>Borrowing the thing that contains the discriminant is too much of an over-approximation. There are crates that match on an <code>enum</code> while one of its fields is borrowed, which conflicts with a borrow of the <code>enum</code>.</p>",
        "id": 133145320,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535745704
    },
    {
        "content": "<blockquote>\n<p>match on an enum while one of its fields is borrowed</p>\n</blockquote>\n<p>but, if they've borrowed a field, the variant has to have already been decided; why would they match again?</p>",
        "id": 133145418,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535745839
    },
    {
        "content": "<p>They could have returned, in which case the borrow will last until the end of the function until we have Polonius.</p>",
        "id": 133145496,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535745923
    },
    {
        "content": "<p>They could also have only borrowed in one case in an if expression.</p>",
        "id": 133145566,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535746006
    },
    {
        "content": "<blockquote>\n<p>Borrowing the thing that contains the discriminant is too much of an over-approximation. There are crates that match on an <code>enum</code> while one of its fields is borrowed, which conflicts with a borrow of the <code>enum</code>.</p>\n</blockquote>\n<p>are we seeing these regressions in crater?</p>",
        "id": 133145589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746074
    },
    {
        "content": "<p>all of this, incidentally, further argues for my desire to separate out the borrow checker's notion of \"place\" from MIR's notion of place</p>",
        "id": 133145636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746122
    },
    {
        "content": "<p>I think we were, I held off on this PR until I was pretty sure that this was leading to actual regressions.</p>",
        "id": 133145649,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535746161
    },
    {
        "content": "<p>hmm I hadn't seen those?</p>",
        "id": 133145654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746179
    },
    {
        "content": "<p>The only one I can find ATM is <a href=\"https://cargobomb-reports.s3.amazonaws.com/nll-3/00bcc44fb92c28465c727881355c3235a56a4045/reg/rgen3-save-0.1.0/log.txt\" target=\"_blank\" title=\"https://cargobomb-reports.s3.amazonaws.com/nll-3/00bcc44fb92c28465c727881355c3235a56a4045/reg/rgen3-save-0.1.0/log.txt\">https://cargobomb-reports.s3.amazonaws.com/nll-3/00bcc44fb92c28465c727881355c3235a56a4045/reg/rgen3-save-0.1.0/log.txt</a>. Does <a href=\"https://github.com/nikomatsakis/nll-crater-run-results\" target=\"_blank\" title=\"https://github.com/nikomatsakis/nll-crater-run-results\">https://github.com/nikomatsakis/nll-crater-run-results</a> contain everything, because I thought that there were more?</p>",
        "id": 133145884,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535746392
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 133146006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746513
    },
    {
        "content": "<p>that said, we might have erroneously considered that legit</p>",
        "id": 133146035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746534
    },
    {
        "content": "<p>it's not obvious from the quoted error that it's not</p>",
        "id": 133146098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746566
    },
    {
        "content": "<p>I guess we have to go to the original sources to tell</p>",
        "id": 133146102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746571
    },
    {
        "content": "<p>some are not obvious yeah. there might be some in the reports that are not in the repo, there's a parser combinator library I hadn't time to minimize yet as well</p>",
        "id": 133146139,
        "sender_full_name": "lqd",
        "timestamp": 1535746625
    },
    {
        "content": "<p>that looks pretty legit to me</p>",
        "id": 133146267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746786
    },
    {
        "content": "<p>I think I have minimized rgen3 (it's the pokémon one IIRC), it looked legit but I might have done it incorrectly ?</p>",
        "id": 133146275,
        "sender_full_name": "lqd",
        "timestamp": 1535746798
    },
    {
        "content": "<p>relevant function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sections</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SaveSections</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">blocks</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">most_recent_index</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">team_and_items</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">SectionData</span>::<span class=\"n\">TeamAndItems</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">sections</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">team_and_items_index</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">data</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Unexpected section data. Expected TeamAndItems&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trainer_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">SectionData</span>::<span class=\"n\">TrainerInfo</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                  </span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">sections</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">trainer_info_index</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">data</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Unexpected section data. Expected TrainerInfo&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SaveSections</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">team</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">team_and_items</span><span class=\"p\">.</span><span class=\"n\">team</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">trainer</span>: <span class=\"nc\">trainer_info</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133146276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746798
    },
    {
        "content": "<p>if I'm not mistaken, unless <code>team_and_items_index != trainer_info_index</code>, those two mutable borrows could overlap?</p>",
        "id": 133146347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746830
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, I could <em>imagine</em> cases where the borrow would be stronger than we would want</p>",
        "id": 133146364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746864
    },
    {
        "content": "<p>I'd just be surprised to see them in practice</p>",
        "id": 133146371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746868
    },
    {
        "content": "<p>or maybe not, who knows, mostly I mean \"I just don't remember seeing them\" :)</p>",
        "id": 133146390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> are you currently doing some sort of hacking on this?</p>",
        "id": 133146441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535746929
    },
    {
        "content": "<p>I have what you see in the PR and 20 minutes work on making discriminants Places.</p>",
        "id": 133146476,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535747021
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 133146750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747309
    },
    {
        "content": "<p>making discrim places seems plausible for now, anyway</p>",
        "id": 133146752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747319
    },
    {
        "content": "<p>presumably it'll result in some <code>bug!</code> calls...</p>",
        "id": 133146756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747326
    },
    {
        "content": "<p>the challenge is that there are discriminants that can't be treated like other places</p>",
        "id": 133146764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747343
    },
    {
        "content": "<p>e.g., the null value of <code>Option&lt;&amp;T&gt;</code>  =)</p>",
        "id": 133146768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747352
    },
    {
        "content": "<p>this is why we have <code>ReadDiscriminant()</code> and not discriminant places</p>",
        "id": 133146780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747373
    },
    {
        "content": "<p>Indeed, I was planing to remove borrows of discriminants in one of the after borrowck passes</p>",
        "id": 133146866,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535747465
    },
    {
        "content": "<p>It's still not great, having MIR that makes no sense to run.</p>",
        "id": 133146907,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535747522
    },
    {
        "content": "<p>well</p>",
        "id": 133147019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747649
    },
    {
        "content": "<p>yeah</p>",
        "id": 133147023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747662
    },
    {
        "content": "<p>I mean that part <em>itself</em> doesn't bother me</p>",
        "id": 133147025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747668
    },
    {
        "content": "<p>I always (in my head) imagine a \"lowering\" step between the MIR we initially create</p>",
        "id": 133147032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747686
    },
    {
        "content": "<p>and the LIR that we execute (which just happens to share the same data structures as MIR)</p>",
        "id": 133147039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747695
    },
    {
        "content": "<p>but one might imagine wanting something like <code>BorrowDiscriminant(...)</code> etc</p>",
        "id": 133147049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747709
    },
    {
        "content": "<p>so that you can at least more easily screen out the \"impossible cases\"</p>",
        "id": 133147055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747725
    },
    {
        "content": "<p>One could <em>even</em> imagine producing a whole distinct IR for LIR</p>",
        "id": 133147064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747739
    },
    {
        "content": "<p>this is not entirely crazy</p>",
        "id": 133147066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747740
    },
    {
        "content": "<p>in particular, it might eliminate some clones</p>",
        "id": 133147073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747750
    },
    {
        "content": "<p>that is, I think you could create the MIR, modify it in place to have full regions etc, then \"clone/simplify\" it into LIR, which might be somewhat different (SSA, maybe, etc)</p>",
        "id": 133147125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747777
    },
    {
        "content": "<p>anyway</p>",
        "id": 133147126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747778
    },
    {
        "content": "<p>that's all way far away for this bug :)</p>",
        "id": 133147127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747783
    },
    {
        "content": "<p>just thinking out loud</p>",
        "id": 133147132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747790
    },
    {
        "content": "<p>I considered <code>BorrowDiscriminant(...)</code>, it's probably worse for borrowck and better for everyone else who uses MIR.</p>",
        "id": 133147170,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535747859
    },
    {
        "content": "<p>And is probably stricter in some edge cases.</p>",
        "id": 133147225,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535747903
    },
    {
        "content": "<p>it's annoying that we now have borrows coming from something other than <code>Ref</code> expressions I guess</p>",
        "id": 133147258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747984
    },
    {
        "content": "<p>that is a pretty big loss</p>",
        "id": 133147260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535747988
    },
    {
        "content": "<p>ok well</p>",
        "id": 133147302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748004
    },
    {
        "content": "<p>I guess one other thing</p>",
        "id": 133147312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748009
    },
    {
        "content": "<p>would be <code>BorrowKind::Discriminant</code></p>",
        "id": 133147315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748017
    },
    {
        "content": "<p>which is...wacky</p>",
        "id": 133147327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748041
    },
    {
        "content": "<p>but the idea would be sort of that it's a shared borrow of \"the discriminant\"</p>",
        "id": 133147333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748050
    },
    {
        "content": "<p>I forget just how <code>places_conflict</code> works...</p>",
        "id": 133147346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748067
    },
    {
        "content": "<p>in particular if it has access to the borrow kind</p>",
        "id": 133147353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748087
    },
    {
        "content": "<p>probably not</p>",
        "id": 133147354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748090
    },
    {
        "content": "<p>It would probably work, but would almost certainly cause anyone to be confused when they first see it.</p>",
        "id": 133147408,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535748125
    },
    {
        "content": "<p>It doesn't. I would have <code>BorrowKind::Discriminant</code> do a <code>Shallow(Discriminant)</code> access but borrow the whole place, if I could get away with it.</p>",
        "id": 133147474,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535748216
    },
    {
        "content": "<p>Otherwise just make discriminant a Place</p>",
        "id": 133147546,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535748318
    },
    {
        "content": "<blockquote>\n<p>It doesn't. I would have <code>BorrowKind::Discriminant</code> do a <code>Shallow(Discriminant)</code> access but borrow the whole place, if I could get away with it.</p>\n</blockquote>\n<p>what precisely are you looking to \"accept\" here?</p>",
        "id": 133147624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748433
    },
    {
        "content": "<p>I guess you are thinking of a case where something is borrowed that is not affecting the discriminant?</p>",
        "id": 133147813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748683
    },
    {
        "content": "<p>it'd be good to come up with some specific example</p>",
        "id": 133147824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748699
    },
    {
        "content": "<p>I suspect that most of them also won't build with AST borrow check</p>",
        "id": 133147832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748705
    },
    {
        "content": "<p>The main things are</p>\n<ul>\n<li>Matches on a struct that have a field borrowed.</li>\n<li>Matches on enums that have a field borrowed.</li>\n<li><code>_</code> patterns on places that are borrowed.</li>\n</ul>\n<p>Using normal shared borrows more carefully should get us two of these, so I'll start there.</p>",
        "id": 133147833,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535748708
    },
    {
        "content": "<p>in which case, maybe we can leave it for future work :)</p>",
        "id": 133147838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535748711
    },
    {
        "content": "<p>Well AST borrowck has a soundness bug around matching on borrowed places, which makes this even more fun.</p>",
        "id": 133148100,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535749037
    },
    {
        "content": "<p>Some examples of what might or might not compile: <a href=\"https://play.rust-lang.org/?gist=3393dae9f7a74179a77af649ba50689d&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=3393dae9f7a74179a77af649ba50689d&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=3393dae9f7a74179a77af649ba50689d&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 133149213,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535750458
    },
    {
        "content": "<p>my guess is that the final example might not compile, even if we removed E0382 (which we plan to, once NLL is merged)</p>",
        "id": 133150252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535751951
    },
    {
        "content": "<p>because we've been trying to be agnostic about the order in which match arms are tested</p>",
        "id": 133150283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535751962
    },
    {
        "content": "<p>that is sort of a special case in that there is probably <em>no other possible way</em> to evaluate that pattern</p>",
        "id": 133150303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535751975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133150312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535751989
    },
    {
        "content": "<p>but something like that would I expect still be illegal</p>",
        "id": 133150314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535751995
    },
    {
        "content": "<p>regardless, all would be illegal under the compilation model I proposed</p>",
        "id": 133150321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535752004
    },
    {
        "content": "<p>in that <code>s</code> needs to be borrowed</p>",
        "id": 133150325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535752010
    },
    {
        "content": "<p>because it is compared for equality</p>",
        "id": 133150328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535752017
    },
    {
        "content": "<p>and it would remain borrowed until the match arm executes</p>",
        "id": 133150336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535752025
    },
    {
        "content": "<p>Should this compile then?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">is_this_ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133151155,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535753045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> an interesting question</p>",
        "id": 133153454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535756338
    },
    {
        "content": "<p>Ok so we need some kind of \"shallow borrow\" to allow this to compile</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// has to prevent assigning to x in guards, but borrowing it will conflict with the borrow above</span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133226372,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535917721
    },
    {
        "content": "<p>I guess I'll close the current PR and try implementing discriminant Places. Unless you think that now is the time to try using a different version of Place in borrowck.</p>",
        "id": 133226539,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535918061
    },
    {
        "content": "<p>Maybe <code>BorrowKind::Shallow</code>and parsing the borrow kinds to places conflict is simpler.</p>",
        "id": 133227262,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535919536
    },
    {
        "content": "<p>So, for reference, I'm proposing:</p>\n<ul>\n<li>Create a new <code>BorrowKind</code>: <code>Shallow</code> (name can be bike-shed)</li>\n<li>\n<p><code>Shallow</code> borrows differ from shared borrows in that</p>\n<ul>\n<li>When we check for access we treat them as a <code>Shallow(Some(_))</code> read</li>\n<li>When we check for conflicts with them, if the access place is a strict prefix of the borrow place then we don't consider that a conflict.<ul>\n<li>For example, a <code>Shallow</code> borrow of <code>x</code> does not conflict with any access or borrow of <code>x.0</code> or <code>*x</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Remove the current fake borrow in matches.</p>\n</li>\n<li>When building matches we take a <code>Shallow</code> borrow of any <code>Place</code> that we switch on, and any pointer that's dereferenced in that <code>Place</code>.<ul>\n<li><code>match x { &amp;Some(1) =&gt; (),  _ =&gt; (), }</code> would <code>Shallow</code> borrow <code>x</code>, <code>*x</code> and <code>(*x as Some).0</code> (the <code>*x</code> borrow is unnecessary, but I'm not sure how easy it would be to remove.)</li>\n</ul>\n</li>\n<li>Read the borrows before the last match arm (we should have enough fake edges to only need to do this on the last arm).</li>\n<li>Replace the fake discriminant read with a <code>ReadForMatch</code>.</li>\n<li>Change ReadForMatch to only check for initializedness (to prevent <code>let x: !; match x {}</code>), but not conflicting borrows. It is still considered a use for liveness and <code>unsafe</code> checking.</li>\n<li>Try to keep the diagnostic improvements from the current PR.</li>\n</ul>",
        "id": 133229373,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535924364
    },
    {
        "content": "<blockquote>\n<p>Ok so we need some kind of \"shallow borrow\" to allow this to compile</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// has to prevent assigning to x in guards, but borrowing it will conflict with the borrow above</span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>I have to admit, I'm confused: why does it not suffice here to just borrow <code>x.1</code> alone?</p>",
        "id": 133249022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535965163
    },
    {
        "content": "<p>that is, your  comment says \"has to prevent assigning to <code>x</code> in guards\", but borrowing <code>x.1</code> should accomplish that, right? (and if the outer borrow <code>&amp;mut x.0</code> were not present, then presumably the guards then <em>would</em> be allowed to assign to <code>x.0</code>, in an ideal world at least?)</p>",
        "id": 133249117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535965249
    },
    {
        "content": "<p>Assignments only do shallow writes, so borrowing <code>(*x).0</code> or <code>*x</code> doesn't prevent assigning to <code>x</code>.</p>",
        "id": 133255150,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535974769
    },
    {
        "content": "<p>oh right, I overlooked that <code>x</code> is a <em>reference</em> to a tuple, not a tuple itself.</p>",
        "id": 133259917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535980208
    },
    {
        "content": "<p>(though then I'm not 100% sure why it should be illegal to assign to <code>x</code> ... its not like doing so would invalidate <code>r</code>, right...? I must not be thinking hard enough about this.)</p>",
        "id": 133259944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535980270
    },
    {
        "content": "<p>oh, the match itself... hmm.</p>",
        "id": 133260004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535980327
    },
    {
        "content": "<p>(but the <code>match</code> input is derefed...)</p>",
        "id": 133260011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535980353
    },
    {
        "content": "<p>I guess I'll just stop talking for a while</p>",
        "id": 133260016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1535980368
    },
    {
        "content": "<p>See the tests in this commit for why we borrow x as well as <code>*x</code> <a href=\"https://github.com/rust-lang/rust/commit/cb5c989598178af505fb215dd97afca8cc2b659f#diff-a2126cd3263a1f5342e2ecd5e699fbc6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cb5c989598178af505fb215dd97afca8cc2b659f#diff-a2126cd3263a1f5342e2ecd5e699fbc6\">https://github.com/rust-lang/rust/commit/cb5c989598178af505fb215dd97afca8cc2b659f#diff-a2126cd3263a1f5342e2ecd5e699fbc6</a></p>",
        "id": 133274143,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536000288
    },
    {
        "content": "<p>Replace <code>&amp;</code> with <code>&amp;mut</code> in the second test to get something closer to the example here.</p>",
        "id": 133274158,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536000337
    },
    {
        "content": "<blockquote>\n<p>(though then I'm not 100% sure why it should be illegal to assign to <code>x</code> ... its not like doing so would invalidate <code>r</code>, right...? I must not be thinking hard enough about this.)</p>\n</blockquote>\n<p>so <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> this is -- to <em>some</em> extent -- an artifact of how MIR desugars</p>",
        "id": 133375289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536154076
    },
    {
        "content": "<p>that is, when matching on a place expression (like <code>(*x).1</code>) we will use that same <code>(*x).1</code> place expression to load the option etc</p>",
        "id": 133375351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536154107
    },
    {
        "content": "<p>so if it changes 'mid match', that is a problem</p>",
        "id": 133375359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536154115
    },
    {
        "content": "<p>aside: I feel like we are overdue to update and complete the NLL RFC</p>",
        "id": 133375396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536154164
    },
    {
        "content": "<blockquote>\n<p>So, for reference, I'm proposing:</p>\n</blockquote>\n<p>let me try to compare this...</p>",
        "id": 133375417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536154181
    },
    {
        "content": "<blockquote>\n<ul>\n<li>When building matches we take a <code>Shallow</code> borrow of any <code>Place</code> that we switch on, and any pointer that's dereferenced in that <code>Place</code>.</li>\n</ul>\n</blockquote>\n<p>I'm tempted to add \"or bind to a variable\" here as well. i.e. this should not compile</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133402721,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536181627
    },
    {
        "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, didn't get to this</p>",
        "id": 133403283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182120
    },
    {
        "content": "<p>argh</p>",
        "id": 133403286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182123
    },
    {
        "content": "<p>not sure where the days keep going!</p>",
        "id": 133403295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536182132
    },
    {
        "content": "<blockquote>\n<p>(though then I'm not 100% sure why it should be illegal to assign to <code>x</code> ... its not like doing so would invalidate <code>r</code>, right...? I must not be thinking hard enough about this.)</p>\n</blockquote>\n<p>I cannot believe that I forgot that the match input is implicitly borrowed (and then we read from that borrow in the <code>ReadForMatch</code> MIR statements), especially since I'm the one who implemented that PR!</p>",
        "id": 133503131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536317335
    },
    {
        "content": "<p>just goes to show how badly sleep deprived I have been. <span class=\"emoji emoji-1f62a\" title=\"sleepy\">:sleepy:</span> <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 133503144,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536317375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ping</p>",
        "id": 133529793,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536346348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> pong</p>",
        "id": 133531927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536348424
    },
    {
        "content": "<p>Just a reminder that this exists.</p>",
        "id": 133532298,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536348847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> </p>\n<p>Reading your <a href=\"#narrow/stream/122657-wg-nll/subject/.2353114.2C.20.2353438.20-.20.60_.60.20patterns.20should.20not.20count.20as.20borrows/near/133229373\" title=\"#narrow/stream/122657-wg-nll/subject/.2353114.2C.20.2353438.20-.20.60_.60.20patterns.20should.20not.20count.20as.20borrows/near/133229373\">big comment</a>:</p>\n<blockquote>\n<p>When we check for conflicts with them, if the access place is a strict prefix of the borrow place then we don't consider that a conflict.</p>\n</blockquote>\n<p>I think you have this reversed, maybe? That is, I think you mean \"if the <em>borrow</em> place is a strict prefix of the <em>access</em> place\". That at least fits your example: \"a Shallow borrow of <code>x</code> does not conflict with any access or borrow of <code>x.0</code> or <code>*x</code>\"</p>\n<blockquote>\n<p>When building matches we take a Shallow borrow of any Place that we switch on, and any pointer that's dereferenced in that Place.</p>\n</blockquote>\n<p>This sounds good, though I think I would say \"we take a shallow borrow on all prefixes of any place that we switch on\". </p>\n<p>I'm not sure about \"all pointer dereferences\". For example, if you have a pattern like <code>&amp;_</code>, do we count <em>that</em>? I sort of think not, but it's unclear. It interacts somewhat with unsafe code guidelines, actually, in that this <em>might</em> be used to imply that the pointer has a valid type (but in that scenario one would normally have a pattern more like <code>&amp;!</code> or something).</p>\n<blockquote>\n<p>we should have enough fake edges to only need to do this on the last arm</p>\n</blockquote>\n<p>Hmm. Perhaps true but it makes me a bit nervous to only do the last arm. =) In part this is for the future: e.g., if we start to remove fake borrows, I don't want us to forget that we now have to add reads.</p>\n<blockquote>\n<p>Change ReadForMatch to only check for initializedness</p>\n</blockquote>\n<p>Hmm. So I think eventually we should adopt <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\">the <code>!</code> pattern proposal that I blogged about the other day</a>, which would address this. In particular, you would have <code>match x { ! }</code>, and the <code>!</code> would be considered a \"switch\", so we would get a \"fake borrow\", which would in turn prevent <code>x</code> from being uninitialized. </p>\n<p>This is probably \"close enough\" to what you are doing here, at least for now. </p>\n<p>I'm trying to think if there are other examples to be concerned about ...</p>",
        "id": 133678500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536602647
    },
    {
        "content": "<p>Sorry for taking so long</p>",
        "id": 133678504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536602652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>I think you have this reversed, maybe? That is, I think you mean \"if the <em>borrow</em> place is a strict prefix of the <em>access</em> place\". That at least fits your example: \"a Shallow borrow of <code>x</code> does not conflict with any access or borrow of <code>x.0</code> or <code>*x</code>\"</p>\n</blockquote>\n<p>Yes. :face palm:. </p>\n<blockquote>\n<p>I'm not sure about \"all pointer dereferences\". For example, if you have a pattern like <code>&amp;_</code>, do we count <em>that</em>? </p>\n</blockquote>\n<p>No, we aren't switching or binding on any place behind the reference.</p>\n<blockquote>\n<p>Hmm. So I think eventually we should adopt <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\">the <code>!</code> pattern proposal that I blogged about the other day</a></p>\n</blockquote>\n<p>Indeed, but we need something before then.</p>",
        "id": 133681170,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536605202
    },
    {
        "content": "<p>I just want to be sure we are doing something \"sort of compatible\" with that</p>",
        "id": 133681187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605235
    },
    {
        "content": "<p>I .. think we are :P</p>",
        "id": 133681189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605239
    },
    {
        "content": "<blockquote>\n<p>No, we aren't switching or binding on any place behind the reference.</p>\n</blockquote>",
        "id": 133681209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605273
    },
    {
        "content": "<p>it seems like we can define a set of things that must not change (e.g., those we are \"switching\" on) and then borrow all the prefixes</p>",
        "id": 133681255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605294
    },
    {
        "content": "<p>basically that <code>Place</code> must continue to evaluate to the same value throughout the match</p>",
        "id": 133681259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605312
    },
    {
        "content": "<p>I am happy, I think, modeling that as many small borrows — though you could imagine modeling it as a distinct kind of borrow</p>",
        "id": 133681280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605359
    },
    {
        "content": "<p>one for which <code>places_conflict</code> might act differently</p>",
        "id": 133681282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605367
    },
    {
        "content": "<p>(in fact, it's just \"prefix of\"?)</p>",
        "id": 133681291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605387
    },
    {
        "content": "<p>I have to look at that</p>",
        "id": 133681345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605406
    },
    {
        "content": "<p>refresh my memory on that code I mean</p>",
        "id": 133681360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605413
    },
    {
        "content": "<p>it seems like <code>each_borrow_involving_path</code> would be the one, probably, that checks the borrow kind</p>",
        "id": 133681374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605441
    },
    {
        "content": "<p>but basically traditional borrows ensure that the <em>memory we reached by evaluating the place</em> doesn't change, but here we want to ensure that we can <em>continue</em> to evaluate the place... an interesting distinction</p>",
        "id": 133681388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605474
    },
    {
        "content": "<blockquote>\n<p>(in fact, it's just \"prefix of\"?)</p>\n</blockquote>\n<p>It depends on how we want to handle unions.</p>",
        "id": 133681718,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536605821
    },
    {
        "content": "<p>yeah, right. I think we want to handle them as errors</p>",
        "id": 133681747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605881
    },
    {
        "content": "<p>(that is, the way that you would get from the many shallow borrows)</p>",
        "id": 133681793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605902
    },
    {
        "content": "<p>ps</p>",
        "id": 133681806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605921
    },
    {
        "content": "<p>I think the right way to think of it, still, is as a \"discriminant borrow\"</p>",
        "id": 133681814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605929
    },
    {
        "content": "<p>oh, well, hmm</p>",
        "id": 133681841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605949
    },
    {
        "content": "<p>I guess the point is that — for the prefixes — that doesn't work</p>",
        "id": 133681850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605959
    },
    {
        "content": "<p>okok</p>",
        "id": 133681852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605961
    },
    {
        "content": "<p>Maybe, but it's a bit strange to call it the discriminant with integers.</p>",
        "id": 133681870,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536605980
    },
    {
        "content": "<p>\"shallow\" is a funny term</p>",
        "id": 133681877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605986
    },
    {
        "content": "<p>but I can't think of a better one</p>",
        "id": 133681893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536605997
    },
    {
        "content": "<p>Anyway I'll implement a hopefully conservative variant of this and I guess we can see where we stand.</p>",
        "id": 133681951,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536606008
    },
    {
        "content": "<p>in particular, the fact that (e.g.) a shallow borrow of a tuple means:</p>\n<ul>\n<li>you can't overwrite the tuple</li>\n<li>but you <em>can</em> write to its fields</li>\n</ul>\n<p>just surprises me a bit.</p>",
        "id": 133681971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536606018
    },
    {
        "content": "<p>yes, I'm basically <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> on the idea</p>",
        "id": 133681983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536606029
    },
    {
        "content": "<blockquote>\n<p>in particular, the fact that (e.g.) a shallow borrow of a tuple means:</p>\n<ul>\n<li>you can't overwrite the tuple</li>\n<li>but you <em>can</em> write to its fields</li>\n</ul>\n<p>just surprises me a bit.</p>\n</blockquote>\n<p>True, but we won't ever create a shallow borrow of a tuple but none of its fields.</p>",
        "id": 133682150,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536606185
    },
    {
        "content": "<p>it's more that I affect \"shallow\" to mean \"not through a pointer deref\"</p>",
        "id": 133683098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607103
    },
    {
        "content": "<p>but that's not quite what this means</p>",
        "id": 133683099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607107
    },
    {
        "content": "<p>anyway, it's fine</p>",
        "id": 133683103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607109
    },
    {
        "content": "<p>maybe we find another name</p>",
        "id": 133683104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607112
    },
    {
        "content": "<p>regardless, it does feel like we need a new concept</p>",
        "id": 133683106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607121
    },
    {
        "content": "<p>that doesn't already exist</p>",
        "id": 133683109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536607129
    },
    {
        "content": "<p>Current state:<br>\n<a href=\"https://gist.github.com/matthewjasper/20706927286a2f81768dc67a175b15d2\" target=\"_blank\" title=\"https://gist.github.com/matthewjasper/20706927286a2f81768dc67a175b15d2\">https://gist.github.com/matthewjasper/20706927286a2f81768dc67a175b15d2</a></p>",
        "id": 133843543,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536786019
    },
    {
        "content": "<p>reading</p>",
        "id": 133843818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786353
    },
    {
        "content": "<p>nice!</p>",
        "id": 133843820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786354
    },
    {
        "content": "<p>what is <code>v</code> <a href=\"https://gist.github.com/matthewjasper/20706927286a2f81768dc67a175b15d2#file-match-guards-partially-borrows-rs-L57\" target=\"_blank\" title=\"https://gist.github.com/matthewjasper/20706927286a2f81768dc67a175b15d2#file-match-guards-partially-borrows-rs-L57\">here</a>?</p>",
        "id": 133843831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786359
    },
    {
        "content": "<p>also, maybe add a variant of <code>fn bad_indirect_mutation_in_guard</code> that uses the new patterns</p>",
        "id": 133843892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786398
    },
    {
        "content": "<p><code>s</code>, but the neither me nor the compile read comments. :P</p>",
        "id": 133843896,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1536786401
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">bad_indirect_mutation_in_guard</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR</span>\n<span class=\"w\">            </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133843904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786410
    },
    {
        "content": "<p>Pushed</p>",
        "id": 134007262,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537008243
    },
    {
        "content": "<p>Ok, so the problem is that the fake borrows are sometimes dereferencing pointers in inactive variants (or something like that)</p>",
        "id": 134120721,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537211347
    },
    {
        "content": "<p>This will segfault:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;&amp;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134120744,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537211390
    },
    {
        "content": "<p>So I'm planning to create a MIR transform to remove them. But I'm wondering why there isn't already a pass to remove <code>ReadForMatch</code>es?</p>",
        "id": 134120848,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537211483
    },
    {
        "content": "<blockquote>\n<p>So I'm planning to create a MIR transform to remove them. But I'm wondering why there isn't already a pass to remove <code>ReadForMatch</code>es?</p>\n</blockquote>\n<p>I suspect there is -- but probably not to remove the <em>borrows</em>?</p>",
        "id": 134123953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537215316
    },
    {
        "content": "<p>They seem to survive up to codegen judging by emit mir output. Not removing the borrows is expected though.</p>",
        "id": 134124414,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537215810
    },
    {
        "content": "<p>They may just be made a no-op at codegen time I guess</p>",
        "id": 134125957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537217736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> what can a <code>ShallowBorrow</code>actually inspect on a place, since it will not conflict with any projection into that place? Is it <em>solely</em> for the discriminant? Or is it also for the array-length? Is it for <em>all</em> metadata (like discriminant and array-length) that is not covered by the set of things that can be borrowed via MIR-projections?</p>",
        "id": 134521262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537789764
    },
    {
        "content": "<p>The list is something like discriminants, array lengths the value of a numeric type (or char or bool), and the value of a reference, but not what it points to.</p>",
        "id": 134521477,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1537790097
    },
    {
        "content": "<p>oh interesting, I hadn't consider the pointer value of the reference</p>",
        "id": 134521491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537790147
    },
    {
        "content": "<p>If you get a chance, it might be nice to add that list of concrete examples; the current comment leads one to see the discriminant as one example, but seeing the others as you listed here, even if you don't intend for it to be an exhaustive enumeration of the possibilities, is useful.</p>",
        "id": 134521575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537790240
    },
    {
        "content": "<p>and my description of it being for \"metadata\" would be misleading, since you've pointed out there are things like numeric values that are not metadata, but as also not projections.</p>",
        "id": 134521589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537790276
    }
]