[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elem</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">next</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Skip forward 2 nodes</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Skip forward 2 nodes</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `leading.next` as mutable more than once at a time\n  --&gt; src/lib.rs:43:28\n   |\n28 |     while let Some(node) = &amp;mut leading.next {\n   |                            ----------------- first mutable borrow occurs here\n...\n43 |     while let Some(node) = &amp;mut leading.next {\n   |                            ^^^^^^^^^^^^^^^^^\n   |                            |\n   |                            second mutable borrow occurs here\n   |                            first borrow used here, in later iteration of loop\n</pre></div>",
        "id": 147674336,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542207955
    },
    {
        "content": "<p>What am I missing here? The first loop works fine, but the second loop causes the error</p>",
        "id": 147674538,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542208001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> / <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is this code relevant to your loop diagnostic discussion?</p>",
        "id": 147677678,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542209901
    },
    {
        "content": "<p>I don't think it's relevant</p>",
        "id": 147677739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209958
    },
    {
        "content": "<p>the error is curious</p>",
        "id": 147677741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209960
    },
    {
        "content": "<p>Ok, cause this also has \" in later iteration of loop\", so your discussion caught my eye</p>",
        "id": 147677766,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542209983
    },
    {
        "content": "<p>trying to decide if it's a bug :)</p>",
        "id": 147677768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209984
    },
    {
        "content": "<p>yes, indeed</p>",
        "id": 147677773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209989
    },
    {
        "content": "<p>it might be, not entirely sure</p>",
        "id": 147677783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542209998
    },
    {
        "content": "<p>and it's two distinct loops (shrug)</p>",
        "id": 147677853,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542210017
    },
    {
        "content": "<p>I think it might just be another instance of <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">https://github.com/rust-lang/rust/issues/47680</a></p>",
        "id": 147677901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210055
    },
    {
        "content": "<p>the reasoning feels similar</p>",
        "id": 147677913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210065
    },
    {
        "content": "<p>basically, in one case, the borrow ends because no data</p>",
        "id": 147677923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210075
    },
    {
        "content": "<p>in the other branch (when <code>i==2</code> is false) the variable is overwritten</p>",
        "id": 147677930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210082
    },
    {
        "content": "<p>this is basically \"the case\" that polonius aims to fix</p>",
        "id": 147677936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210091
    },
    {
        "content": "<p>well, this plus \"Problem Case <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>\" from the original NLL RFC</p>",
        "id": 147677952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210103
    },
    {
        "content": "<p>we should call this Problem Case <a href=\"https://github.com/rust-lang/rust/issues/4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/4\">#4</a> =)</p>",
        "id": 147677962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542210110
    },
    {
        "content": "<p>Oh, problem <a href=\"https://github.com/rust-lang/rust/issues/4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/4\">#4</a></p>",
        "id": 147678181,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542210270
    },
    {
        "content": "<p>Yeah, to me <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a> is all about cross-function interaction of borrows, but I don't see any function calls here.</p>",
        "id": 147678257,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542210351
    },
    {
        "content": "<p>Reduced</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">next</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0499]: cannot borrow `list.next` as mutable more than once at a time\n  --&gt; src/lib.rs:10:25\n   |\n5  | fn example(mut list: &amp;mut Node) {\n   |                      - let&#39;s call the lifetime of this reference `&#39;1`\n6  |     if let Some(node) = &amp;mut list.next {\n   |                 ----    -------------- first mutable borrow occurs here\n   |                 |\n   |                 assignment requires that `list.next` is borrowed for `&#39;1`\n...\n10 |     if let Some(node) = &amp;mut list.next {\n   |                         ^^^^^^^^^^^^^^ second mutable borrow occurs here\n</pre></div>",
        "id": 147678377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542210446
    },
    {
        "content": "<p>Do you think I should add these to that issue, or create a new one and cross-link them? If it is problem <a href=\"https://github.com/rust-lang/rust/issues/4\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/4\">#4</a>, then a separate issue seems appropriate</p>",
        "id": 147678511,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542210540
    },
    {
        "content": "<p>I'm not sure if you and I mean the same things by 3 and 4 =)</p>",
        "id": 147684161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215349
    },
    {
        "content": "<p>I agree this has nothing to do with Problem Case <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>, which is all about returning something from the fn</p>",
        "id": 147684164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215361
    },
    {
        "content": "<p>but I think it is the same as <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a>, which (unless I am forgetting something) also had nothing to do with returning things</p>",
        "id": 147684174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215376
    },
    {
        "content": "<p>I think i'd prefer a comment  on <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a></p>",
        "id": 147684182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215393
    },
    {
        "content": "<p>but a new issue is also ok, as long as the two are interlinked</p>",
        "id": 147684185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542215400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a> has all sorts of borrows optionally crossing function boundaries:</p>\n<ul>\n<li><code>fn get_child(&amp;mut self, value: char) -&gt; Option&lt;&amp;mut Self&gt;</code></li>\n<li><code>fn get_self(&amp;mut self) -&gt; Option&lt;&amp;mut Self&gt;</code></li>\n<li><code>fn maybe_next(&amp;mut self) -&gt; Option&lt;&amp;mut Self&gt;</code></li>\n</ul>\n<p>The linked list example here has no function calls at all. </p>\n<p>To me, NLL <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a> is \"borrow checker understands when function <em>maybe</em> returns a borrow\". I don't know what NLL#4 would be yet, but it certainly seems distinct from this.</p>",
        "id": 147691854,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542222690
    },
    {
        "content": "<p>oh wait <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a>... is the opposite?</p>\n<blockquote>\n<p>The mutable borrow is released when matching on a Option&lt;&amp;mut Self&gt; in a function, but not when the function is inlined</p>\n</blockquote>",
        "id": 147692050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542222884
    }
]