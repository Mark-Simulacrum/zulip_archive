[
    {
        "content": "<p>Opening this topic to start discussing this <a href=\"https://github.com/rust-lang/rust/issues/52669\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52669\">https://github.com/rust-lang/rust/issues/52669</a> issue :)</p>",
        "id": 133841343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536783722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to continue talking about this here</p>",
        "id": 133842443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536784896
    },
    {
        "content": "<p>if I change the code to foo(a.b), I get ...</p>",
        "id": 133842452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536784909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0382]: borrow of moved value: `a.b`\n  --&gt; test.rs:17:5\n   |\n16 |     foo(a.b);\n   |         --- value moved here\n17 |     a.b.clone()\n   |     ^^^ value borrowed here after move\n   |\n   = note: move occurs because `a.b` has type `B`, which does not implement the `Copy` trait\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 133842496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536784925
    },
    {
        "content": "<p>so, it seems that we are failing to check for moves from parent paths as you guessed :)</p>",
        "id": 133842522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536784965
    },
    {
        "content": "<p>and if I change the code to use <code>a</code>, by doing a.clone(), I get ...</p>",
        "id": 133842628,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536785079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0382]: borrow of moved value: `a`\n  --&gt; test.rs:18:5\n   |\n17 |     foo(a);\n   |         - value moved here\n18 |     a.clone();\n   |     ^ value borrowed here after move\n   |\n   = note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 133842642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536785104
    },
    {
        "content": "<p>so definitely seems to be that we are failing to check for moves from parent paths</p>",
        "id": 133842654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536785122
    },
    {
        "content": "<p>ok</p>",
        "id": 133843191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785694
    },
    {
        "content": "<p>interesting</p>",
        "id": 133843192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785695
    },
    {
        "content": "<p>I guess we can just look for moves of any parent path by \"iterating more\"</p>",
        "id": 133843199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785704
    },
    {
        "content": "<p>in the backwards DFS</p>",
        "id": 133843203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785707
    },
    {
        "content": "<p>interestingly, this is not something that is .. obviously correct if we were to try and write that fn more generically</p>",
        "id": 133843213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785719
    },
    {
        "content": "<p>so I'm glad you didn't go ahead and do that :)</p>",
        "id": 133843223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785730
    },
    {
        "content": "<p>:)</p>",
        "id": 133844746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536787117
    },
    {
        "content": "<p>need to go, will try to code this later</p>",
        "id": 133844763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536787129
    },
    {
        "content": "<p>or tomorrow</p>",
        "id": 133844766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536787136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 133976859,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536956615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> am now</p>",
        "id": 133977211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536957035
    },
    {
        "content": "<p>have some minutes to dig into this</p>",
        "id": 133977540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957464
    },
    {
        "content": "<p>I was guessing that I need to do something like ... <code>move_data.move_paths[mpi].place</code></p>",
        "id": 133977637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957548
    },
    {
        "content": "<p>to access place and from there I guess I have access to the whole chain of calls, right?</p>",
        "id": 133977645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957564
    },
    {
        "content": "<p>so I can iterate over <code>a.b.c.d</code> calls</p>",
        "id": 133977654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957577
    },
    {
        "content": "<p>I see there's <code>has_any_child_of</code> to go to childs</p>",
        "id": 133977910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957937
    },
    {
        "content": "<p>but I want to go up</p>",
        "id": 133977913,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536957940
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 133978092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958148
    },
    {
        "content": "<p>there is a <code>parent</code> field I think</p>",
        "id": 133978097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958152
    },
    {
        "content": "<p>so you can go up</p>",
        "id": 133978098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958154
    },
    {
        "content": "<p>probably want to do that once in the beginning</p>",
        "id": 133978102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958159
    },
    {
        "content": "<p>and collect to a vector</p>",
        "id": 133978106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958163
    },
    {
        "content": "<p>not sure if there is a helper; I think I looked for one once and didn't find one</p>",
        "id": 133978115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958170
    },
    {
        "content": "<p>unsure I follow what you want to do</p>",
        "id": 133978187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958220
    },
    {
        "content": "<p>I mean, when and why collecting into a vector at the beginning?</p>",
        "id": 133978197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958244
    },
    {
        "content": "<p>ahh</p>",
        "id": 133978224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958289
    },
    {
        "content": "<p>you meant ...</p>",
        "id": 133978225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958291
    },
    {
        "content": "<p><code>collect &amp;self.move_data.loc_map[l] + parents</code>?</p>",
        "id": 133978237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958313
    },
    {
        "content": "<p>and then iterate</p>",
        "id": 133978275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958324
    },
    {
        "content": "<p>is that what you meant?</p>",
        "id": 133978288,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536958331
    },
    {
        "content": "<p>yep</p>",
        "id": 133978582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958731
    },
    {
        "content": "<p>collect that stuff before you enter the reverse DFS basically</p>",
        "id": 133978589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958741
    },
    {
        "content": "<p>so you have it available</p>",
        "id": 133978592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536958743
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133981267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536961838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ...</p>",
        "id": 133981562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962169
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0599]: no method named `map` found for type `std::vec::Vec&lt;dataflow::move_paths::indexes::MoveOutIndex&gt;` in the current scope\n   --&gt; librustc_mir/borrow_check/error_reporting.rs:555:54\n    |\n555 |                 let mois = self.move_data.loc_map[l].map(|moi| {\n    |                                                      ^^^\n    |\n    = note: the method `map` exists but the following trait bounds were not satisfied:\n            `&amp;mut std::vec::Vec&lt;dataflow::move_paths::indexes::MoveOutIndex&gt; : std::iter::Iterator`\n            `&amp;mut [dataflow::move_paths::indexes::MoveOutIndex] : std::iter::Iterator`\n</pre></div>",
        "id": 133981566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962172
    },
    {
        "content": "<p>not sure I understand correctly the error</p>",
        "id": 133981604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962234
    },
    {
        "content": "<p><code>.iter().map()</code> ?</p>",
        "id": 133981619,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962252
    },
    {
        "content": "<p>yes</p>",
        "id": 133981633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962272
    },
    {
        "content": "<p>I just did that</p>",
        "id": 133981637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962275
    },
    {
        "content": "<p>but still, don't understand that much the error</p>",
        "id": 133981690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962299
    },
    {
        "content": "<p>Oh, is that error message from some other run?</p>",
        "id": 133981692,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962300
    },
    {
        "content": "<p>Cause it's true; <code>Vec</code> does not have a <code>map</code> method.</p>",
        "id": 133981704,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962326
    },
    {
        "content": "<p>no no, right after commenting I added an iter() call meanwhile you've said the same</p>",
        "id": 133981705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962329
    },
    {
        "content": "<blockquote>\n<p>Cause it's true; <code>Vec</code> does not have a <code>map</code> method.</p>\n</blockquote>\n<p>but it says ...</p>",
        "id": 133981723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962351
    },
    {
        "content": "<p><code>    = note: the method </code>map<code> exists but the following trait bounds were not satisfied:</code></p>",
        "id": 133981725,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962354
    },
    {
        "content": "<p>it's kind of misleading</p>",
        "id": 133981733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962364
    },
    {
        "content": "<p>it's saying that the method exists</p>",
        "id": 133981743,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962375
    },
    {
        "content": "<p>It does (as <code>Iterator::map</code>)</p>",
        "id": 133981750,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962396
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 133981818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962429
    },
    {
        "content": "<p>when I read the method exist I thought it was referring that it exists on the type of the thing not somewhere</p>",
        "id": 133981836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962456
    },
    {
        "content": "<p>I don't know why it picks only <code>&amp;mut</code> here. Maybe something to do with the index?</p>",
        "id": 133981855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962478
    },
    {
        "content": "<p>and that's also another thing that have confused me</p>",
        "id": 133981871,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962497
    },
    {
        "content": "<p>but first the thing I read was ...</p>",
        "id": 133981880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962504
    },
    {
        "content": "<p>no method named <code>map</code> found for type Vec but note that the method <code>map</code> exists</p>",
        "id": 133981941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962539
    },
    {
        "content": "<p>I guessed in Vec, why would this be talking about some other type</p>",
        "id": 133981985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962585
    },
    {
        "content": "<p>but in some way you're not satisfying the traits bounds mentioned</p>",
        "id": 133981999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962598
    },
    {
        "content": "<p>that's what I've read from the error</p>",
        "id": 133982007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962604
    },
    {
        "content": "<p>hehe</p>",
        "id": 133982012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962607
    },
    {
        "content": "<p>I could see it being reworded...</p>\n<blockquote>\n<p>note: the method <code>map</code> exists on the traits (Foo, Bar, Baz, ...) but the following trait bounds were not satisfied:</p>\n</blockquote>",
        "id": 133982089,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962684
    },
    {
        "content": "<p>rewording the next part is tougher</p>",
        "id": 133982097,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962703
    },
    {
        "content": "<p>cause how do you succinctly explain auto-deref</p>",
        "id": 133982114,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536962732
    },
    {
        "content": "<p>yep</p>",
        "id": 133982162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536962765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> got a chance to come back to the computer and see the output of this thing and is giving ...</p>",
        "id": 133990157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536974832
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-error[E0382]: use of moved value: `a.b`\n-  --&gt; $DIR/issue-52669.rs:23:5\n+error[E0382]: borrow of moved value: `a.b`\n+  --&gt; $DIR/issue-52669.rs:25:5\n    |\n LL |     foo(a);\n    |         - value moved here\n LL |     a.b.clone()\n-   |     ^^^ value used here after move\n+   |     ^^^ value borrowed here after move\n</pre></div>",
        "id": 133990159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536974835
    },
    {
        "content": "<p>is using the word borrowed instead of use</p>",
        "id": 133990166,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536974849
    },
    {
        "content": "<p>I'd need to investigate a bit more</p>",
        "id": 133990169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1536974858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> seems... not wrong. That is, <code>a.b.clone()</code> <em>does</em> borrow <code>a.b</code></p>",
        "id": 134005794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537006306
    },
    {
        "content": "<p>yes, I wasn’t sure if we wanted to match AST</p>",
        "id": 134007225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537008199
    },
    {
        "content": "<p>I don't think we have to match 100% — although, separately, I think we should revisit this sort of terminology and decide how confusing it is, or if we can make it clearer.</p>",
        "id": 134008684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537011023
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134009732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537013117
    },
    {
        "content": "<p>have opened <a href=\"https://github.com/rust-lang/rust/pull/54255\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54255\">https://github.com/rust-lang/rust/pull/54255</a></p>",
        "id": 134016689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537025714
    },
    {
        "content": "<p>pretty sure that this part <a href=\"https://github.com/rust-lang/rust/pull/54255/files#diff-eebdb0687a3fb91fde3e02235e377676R558\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54255/files#diff-eebdb0687a3fb91fde3e02235e377676R558\">https://github.com/rust-lang/rust/pull/54255/files#diff-eebdb0687a3fb91fde3e02235e377676R558</a> can be made better</p>",
        "id": 134016701,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537025745
    },
    {
        "content": "<p>need to check a bit better</p>",
        "id": 134016703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537025757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have fixed the comments you've made</p>",
        "id": 134055098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537106615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> one thing I was wondering is whether we want a test (like the one I added in a comment somewhere) just showing that the opposite works</p>",
        "id": 134106396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537196692
    },
    {
        "content": "<p>we may have one</p>",
        "id": 134106399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537196694
    },
    {
        "content": "<p>but maybe we should have a dedicated test</p>",
        "id": 134106404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537196699
    },
    {
        "content": "<p>can do that</p>",
        "id": 134106445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537196728
    },
    {
        "content": "<p>the rest looks good?</p>",
        "id": 134106453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537196733
    },
    {
        "content": "<p>yep</p>",
        "id": 134106517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537196779
    },
    {
        "content": "<p>btw</p>",
        "id": 134106637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537196936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Note that the moves data already includes &quot;parent&quot; paths, so we don&#39;t have to worry about the other case: that is, if there is a move of a.b.c, it is already marked as a move of a.b and a as well, so we will generate the correct errors there.\n</pre></div>",
        "id": 134106640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537196939
    },
    {
        "content": "<p>where do you want to add that?</p>",
        "id": 134106649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537196946
    },
    {
        "content": "<p>doing this ...</p>",
        "id": 134106758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537197042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// If we are found a use of a.b.c which was in error, then we want to look for</span>\n<span class=\"w\">                </span><span class=\"c1\">// moves not only of a.b.c but also a.b and a.</span>\n<span class=\"w\">                </span><span class=\"c1\">//</span>\n<span class=\"w\">                </span><span class=\"c1\">// Note that the moves data already includes &quot;parent&quot; paths, so we don&#39;t have to</span>\n<span class=\"w\">                </span><span class=\"c1\">// worry about the other case: that is, if there is a move of a.b.c, it is already</span>\n<span class=\"w\">                </span><span class=\"c1\">// marked as a move of a.b and a as well, so we will generate the correct errors</span>\n<span class=\"w\">                </span><span class=\"c1\">// there.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">mpis</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">move_paths</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">move_paths</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">mpis</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">move_paths</span><span class=\"p\">[</span><span class=\"n\">mpi</span><span class=\"p\">].</span><span class=\"n\">parents</span><span class=\"p\">(</span><span class=\"n\">move_paths</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134106763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537197048
    },
    {
        "content": "<p>not sure if that's what you wanted</p>",
        "id": 134106768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537197057
    },
    {
        "content": "<p>yes</p>",
        "id": 134106850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537197135
    },
    {
        "content": "<p>done, running tests and all that and will push</p>",
        "id": 134106902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537197204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed again, with that comment included and the test</p>",
        "id": 134112216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1537202390
    }
]