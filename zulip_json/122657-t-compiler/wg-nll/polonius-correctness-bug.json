[
    {
        "content": "<p>Privately, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> wrote:</p>\n<blockquote>\n<p>for the example I've been looking at, I feel like the difference between Naive and Opt is something tiny. The 2 missing borrows we'd expect to see are from the borrow_region input tuples (making them requires tuples) but are not in the region_live_atinput -- thus making the last rule borrow_live_at(B, P) :- requires(R, B, P), region_live_at(R, P) ignore them</p>\n</blockquote>\n<p>and I'm moving it to a public thread. =)</p>",
        "id": 127309601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689659
    },
    {
        "content": "<p>specifically, the <code>Location::All</code> hack winds up adding <code>outlives</code> relationships at each point, even when some of the regions involved are not live</p>",
        "id": 127309619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689687
    },
    {
        "content": "<p>I changed this in my PR — removing <code>Locations::All</code> and instead equating the \"inner and outer\" return types at the RETURN point</p>",
        "id": 127309632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689715
    },
    {
        "content": "<p>sorry if that's vague :( it's hard to describe concisely, I have a comment somewhere tho</p>",
        "id": 127309641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689726
    },
    {
        "content": "<p>it sounds like it might repair the discrepancy, but it's an interesting meta-point: the Opt variant seems to assume a certain \"WF\" condition here</p>",
        "id": 127309647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689747
    },
    {
        "content": "<p>I rebased my branch and I'm doing a local build</p>",
        "id": 127309713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689804
    },
    {
        "content": "<blockquote>\n<p>and I'm moving it to a public thread. =)</p>\n</blockquote>\n<p>much appreciated from us lurkers</p>",
        "id": 127309733,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527689828
    },
    {
        "content": "<p>(as it happens <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>, this is also related to that behavior we were discussing earlier)</p>",
        "id": 127309743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689854
    },
    {
        "content": "<p>e.g., this branch kind of doubles down on it :)</p>",
        "id": 127309748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689863
    },
    {
        "content": "<p>(in polonius)</p>",
        "id": 127309751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689868
    },
    {
        "content": "<p>but you definitely convinced me I want to revisit this question and consider some alternate, less permissive variations</p>",
        "id": 127309760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689882
    },
    {
        "content": "<p>but I guess it's good to first get things working the \"pure\" way</p>",
        "id": 127309805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527689902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> which was the failing test again?</p>",
        "id": 127310499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527690770
    },
    {
        "content": "<p><a href=\"http://issue-31567.rs\" target=\"_blank\" title=\"http://issue-31567.rs\">issue-31567.rs</a></p>",
        "id": 127310528,
        "sender_full_name": "lqd",
        "timestamp": 1527690809
    },
    {
        "content": "<p>hmm, ok. My branch doesn't fix it :)</p>",
        "id": 127310532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527690827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>struct VecWrapper&lt;&#39;a&gt;(&amp;&#39;a mut S);\n\nstruct S(Box&lt;u32&gt;);\n\nfn get_dangling&lt;&#39;a&gt;(v: VecWrapper&lt;&#39;a&gt;) -&gt; &amp;&#39;a u32 {\n    let s_inner: &amp;&#39;a S = &amp;*v.0; //~ ERROR `*v.0` does not live long enough\n    &amp;s_inner.0\n}\n\nimpl&lt;&#39;a&gt; Drop for VecWrapper&lt;&#39;a&gt; {\n    fn drop(&amp;mut self) {\n        *self.0 = S(Box::new(0));\n    }\n}\n\nfn main() {\n    let mut s = S(Box::new(11));\n    let vw = VecWrapper(&amp;mut s);\n    let dangling = get_dangling(vw);\n    println!(&quot;{}&quot;, dangling);\n}\n</pre></div>",
        "id": 127310534,
        "sender_full_name": "lqd",
        "timestamp": 1527690829
    },
    {
        "content": "<p>I don't have time to dig further just now though</p>",
        "id": 127310580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527690853
    },
    {
        "content": "<p>yeah it seems the Opt variant has slightly different requirements wrt <code>borrow_region</code> and <code>region_live_at</code>, but for this particular example were not linked to <code>outlives</code>and the Location::All hack</p>",
        "id": 127311106,
        "sender_full_name": "lqd",
        "timestamp": 1527691534
    },
    {
        "content": "<p>interesting. I don't know (yet) why else those would be violated.</p>",
        "id": 127311342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527691825
    },
    {
        "content": "<p>I'll try to look into which rules here make Naive produce that the regions are live at those points, and Opt is not</p>",
        "id": 127311799,
        "sender_full_name": "lqd",
        "timestamp": 1527692505
    },
    {
        "content": "<p>btw I added the use case where Naive and Opt differ <a href=\"https://github.com/rust-lang-nursery/polonius/pull/67\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/67\">https://github.com/rust-lang-nursery/polonius/pull/67</a> (time for birthday dinner :)</p>",
        "id": 127318316,
        "sender_full_name": "lqd",
        "timestamp": 1527700715
    },
    {
        "content": "<p>:)</p>",
        "id": 127318410,
        "sender_full_name": "lqd",
        "timestamp": 1527700813
    },
    {
        "content": "<p>(looking at CI this reminds me we can remove the histo crate dependency I think)</p>",
        "id": 127318425,
        "sender_full_name": "lqd",
        "timestamp": 1527700847
    },
    {
        "content": "<p>I feel one of the coolest advantages of this representation as facts, is how extremely easy it is to reduce mechanically, à la property-based testing. I think I have reduced one of the differences between Naive and Opt in issue 31567 to just 5 facts :)</p>",
        "id": 127424118,
        "sender_full_name": "lqd",
        "timestamp": 1527870050
    },
    {
        "content": "<blockquote>\n<p>à la property-based testing</p>\n</blockquote>\n<p>I reiterate my statement from before that quickcheck or proptest would be good things to cram in and let them run for a weekend</p>",
        "id": 127425821,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527872344
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 127428113,
        "sender_full_name": "lqd",
        "timestamp": 1527875012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would you want a PR with a <code>#[should_panic]</code> test for this Naive/Opt difference ?</p>",
        "id": 127428612,
        "sender_full_name": "lqd",
        "timestamp": 1527875488
    },
    {
        "content": "<p>sounds useful :)</p>",
        "id": 127428699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527875566
    },
    {
        "content": "<p>it's a bit harder to do with the frontend right now until we've implemented def/use/liveness, since all these facts are at the same point, but it's similar in spirit to:</p>\n<div class=\"codehilite\"><pre><span></span>universal_regions {}\nblock B0 {\n    borrow_region_at(&#39;a, L0), outlives(&#39;a: &#39;b), outlives(&#39;b: &#39;c), outlives(&#39;c: &#39;d), use(&#39;d); // the use here is mostly so that &#39;d is live for the frontend\n}\n</pre></div>",
        "id": 127430074,
        "sender_full_name": "lqd",
        "timestamp": 1527877299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok so if need be all the issue-31567 facts are in PR #67, and this new reduced test is <a href=\"https://github.com/rust-lang-nursery/polonius/pull/69\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/69\">here</a> :)</p>",
        "id": 127430606,
        "sender_full_name": "lqd",
        "timestamp": 1527877899
    },
    {
        "content": "<p>awesome: I don't know when I'll have time to look, but I will say that being able to do this sort of reduction was one of the primary reasons I wanted to separate borrowck out</p>",
        "id": 127430689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527877976
    },
    {
        "content": "<p>so: very cool!</p>",
        "id": 127430692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527877979
    },
    {
        "content": "<p>all my engineer dreams are coming true ;)</p>",
        "id": 127430705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878004
    },
    {
        "content": "<p>:)</p>",
        "id": 127430708,
        "sender_full_name": "lqd",
        "timestamp": 1527878013
    },
    {
        "content": "<p>except the one where this sucker is fast (/me ducks)</p>",
        "id": 127430709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878015
    },
    {
        "content": "<p>(though from my current analysis, I think there's still lots of room to make this NLL type-check go faster...)</p>",
        "id": 127430716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878038
    },
    {
        "content": "<p>at least having the test could open the possibility for other contributors to look at it</p>",
        "id": 127430717,
        "sender_full_name": "lqd",
        "timestamp": 1527878039
    },
    {
        "content": "<p>yep</p>",
        "id": 127430757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878046
    },
    {
        "content": "<p>it's not clear to me that it's a <em>bug</em> exactly, this discrepancy</p>",
        "id": 127430766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878058
    },
    {
        "content": "<p>or at least it might be a prblem on rustc side</p>",
        "id": 127430767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878064
    },
    {
        "content": "<p>I'd really like to remove <code>Location::All</code></p>",
        "id": 127430771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878070
    },
    {
        "content": "<p>though I guess that doesn't fix this bug, as we said</p>",
        "id": 127430776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878076
    },
    {
        "content": "<p>I wonder if the same discrepancy is still present</p>",
        "id": 127430779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878083
    },
    {
        "content": "<p>yeah, but since it's also with the outlives, it's also confusing whether Location::All should / why it doesn't have impact here</p>",
        "id": 127430799,
        "sender_full_name": "lqd",
        "timestamp": 1527878122
    },
    {
        "content": "<blockquote>\n<p>it's a bit harder to do with the frontend right now until we've implemented def/use/liveness, since all these facts are at the same point, but it's similar in spirit to:</p>\n</blockquote>\n<p>interesting; this actually does strike me as a kind of bug...</p>",
        "id": 127430802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878129
    },
    {
        "content": "<p>I'll try to look more closely</p>",
        "id": 127430808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878144
    },
    {
        "content": "<p>frontend bug ? or rustc + facts bug ?</p>",
        "id": 127430851,
        "sender_full_name": "lqd",
        "timestamp": 1527878166
    },
    {
        "content": "<p>er, sorry, a bug in <code>DatafrogOpt</code></p>",
        "id": 127430859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527878175
    },
    {
        "content": "<p>right</p>",
        "id": 127430863,
        "sender_full_name": "lqd",
        "timestamp": 1527878185
    },
    {
        "content": "<p>there are no cfg edges whatsoever</p>",
        "id": 127430871,
        "sender_full_name": "lqd",
        "timestamp": 1527878201
    },
    {
        "content": "<p>and we're trying to limit the TC to regions that are live-to-dead along edges _huge shortcuts in this sentence cough_</p>",
        "id": 127430882,
        "sender_full_name": "lqd",
        "timestamp": 1527878237
    },
    {
        "content": "<p>The other missing loan from the same issue has basically the same structure, except the last of the 3 <code>outlives</code> is at a different point (but the <code>cfg_edge</code>s are not significant for this specific missing loan either). I'll try and look at the other -Zpolonius issues next</p>",
        "id": 127437268,
        "sender_full_name": "lqd",
        "timestamp": 1527886338
    },
    {
        "content": "<p>omg I finally got through all the -Zpolonius failures Santiago posted before. I focused on finding the ones failing because of the Naive vs Opt differences, and found 11 of the 50+ failing tests. I reduced those to a smaller number (&lt;5) of vaguely distinct patterns, but it feels like it's only a couple of unique patterns — but since a few seemed very related to the TC at a single point, it's  possible it's actually a single bug. (since it hasn't been merged yet I'll repurpose PR #69 to add this small number of patterns, instead of just the one issue)</p>",
        "id": 127570321,
        "sender_full_name": "lqd",
        "timestamp": 1528151909
    },
    {
        "content": "<p>ok I think it really is one single bug: there are 4 unique-ish patterns, with 3 of those being a longer chain of <code>outlives</code> at the same point, and the 4th still having the same scheme but over 2 points instead of one</p>",
        "id": 127594778,
        "sender_full_name": "lqd",
        "timestamp": 1528198008
    },
    {
        "content": "<p>reduced, it looks a bit like this, whenever a region is live at a single point, Opt misses the region(s) it outlives (recursively)</p>\n<div class=\"codehilite\"><pre><span></span>universal_regions {}\nblock B0 {\n    borrow_region_at(&#39;a, L0), outlives(&#39;a: &#39;b), use(&#39;b); // region_live_at(&#39;b)\n}\n</pre></div>",
        "id": 127594906,
        "sender_full_name": "lqd",
        "timestamp": 1528198230
    },
    {
        "content": "<p>and in rustc's tests, there are multiple variations of this, either differing on the length of the <code>outlives</code> chain, or whether it happens at the same point or the next</p>",
        "id": 127594991,
        "sender_full_name": "lqd",
        "timestamp": 1528198376
    },
    {
        "content": "<p>so I'll encode all this as 4 tests, but they are likely to be fixed at the same time</p>",
        "id": 127595296,
        "sender_full_name": "lqd",
        "timestamp": 1528198859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've updated <a href=\"https://github.com/rust-lang-nursery/polonius/pull/69\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/pull/69\">https://github.com/rust-lang-nursery/polonius/pull/69</a> could you validate my comments in the tests are clear enough for you ?</p>",
        "id": 127597049,
        "sender_full_name": "lqd",
        "timestamp": 1528201658
    },
    {
        "content": "<p>yep</p>",
        "id": 127597105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201692
    },
    {
        "content": "<p>thanks for doing this btw</p>",
        "id": 127597108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201696
    },
    {
        "content": "<p>comment is excellent</p>",
        "id": 127597121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201727
    },
    {
        "content": "<p>I was wondering — why can't we use the 'parser front-end for this'? in particular, does it not support kind of \"Explicit form of every fact\"?</p>",
        "id": 127597132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201753
    },
    {
        "content": "<p>maybe we should make that a goal :)</p>",
        "id": 127597135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201760
    },
    {
        "content": "<p>agreed</p>",
        "id": 127597138,
        "sender_full_name": "lqd",
        "timestamp": 1528201767
    },
    {
        "content": "<p>while the 4th test could work I think</p>",
        "id": 127597147,
        "sender_full_name": "lqd",
        "timestamp": 1528201776
    },
    {
        "content": "<p>the other 3 are at the same point, and so not exactly realistic wrt to the format</p>",
        "id": 127597153,
        "sender_full_name": "lqd",
        "timestamp": 1528201791
    },
    {
        "content": "<p>it could work with \"blabla /\"</p>",
        "id": 127597202,
        "sender_full_name": "lqd",
        "timestamp": 1528201807
    },
    {
        "content": "<p>why does being at the same point make it unrealistic?</p>",
        "id": 127597212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528201832
    },
    {
        "content": "<p>just towards the format, eg I felt we mostly wanted to use the mid point</p>",
        "id": 127597230,
        "sender_full_name": "lqd",
        "timestamp": 1528201866
    },
    {
        "content": "<p>and here we'd have to use the start point</p>",
        "id": 127597304,
        "sender_full_name": "lqd",
        "timestamp": 1528201950
    },
    {
        "content": "<p>but yes I agree the frontend is made exactly for these cases :) I also initially was about to ask if you wanted to try to use it before merging those tests, instead of the facts as-is</p>",
        "id": 127597383,
        "sender_full_name": "lqd",
        "timestamp": 1528202084
    },
    {
        "content": "<p>question: can you readily dump out the values of the various sets for the <code>send_is_not_static_std_sync</code> test?</p>",
        "id": 127597400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202124
    },
    {
        "content": "<p>I'd be curious to see</p>",
        "id": 127597404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528202133
    },
    {
        "content": "<p>sure, I'll push them</p>",
        "id": 127597408,
        "sender_full_name": "lqd",
        "timestamp": 1528202147
    },
    {
        "content": "<p>(I also have an ugly function doing the reduction work)</p>",
        "id": 127597478,
        "sender_full_name": "lqd",
        "timestamp": 1528202222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/lqd/borrow-check/commit/914889f98afb44d3bf18c479a2939b15bda4a7ea\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commit/914889f98afb44d3bf18c479a2939b15bda4a7ea\">https://github.com/lqd/borrow-check/commit/914889f98afb44d3bf18c479a2939b15bda4a7ea</a></p>",
        "id": 127597665,
        "sender_full_name": "lqd",
        "timestamp": 1528202418
    },
    {
        "content": "<p>mutex and rwlock are the failing functions and are reduced in the tests</p>",
        "id": 127597689,
        "sender_full_name": "lqd",
        "timestamp": 1528202455
    },
    {
        "content": "<blockquote>\n<p>I was wondering — why can't we use the 'parser front-end for this'? in particular, does it not support kind of \"Explicit form of every fact\"?</p>\n</blockquote>\n<p>yes, this, we can't emit <code>region_live_at</code> manually right now (we kinda talked about it only as byproducts of <code>use</code> and liveness IIRC) but I can add it, we would want to avoid writing <code>region_live_at</code> as they are tedious, but for these exact cases it would have been useful :)</p>",
        "id": 127599518,
        "sender_full_name": "lqd",
        "timestamp": 1528204647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for these tests, would you rather have the \"exactly minimal facts\" which were automatically reduced, or something that can be a slight superset but using the frontend ? (since the frontend is focused on statements rather than points, there could be two points and an edge being generated, when sometimes no edges are actually needed to trigger the bug)</p>",
        "id": 127601964,
        "sender_full_name": "lqd",
        "timestamp": 1528207325
    },
    {
        "content": "<p>alright I've added <code>region_live_at</code> to the frontend, and converted the minimal reduced tests to the less-minimal frontend format :) (PR by tomorrow, although I'm not sure whether this would need bumping the polonius-parser or polonius version)</p>",
        "id": 127623227,
        "sender_full_name": "lqd",
        "timestamp": 1528233436
    },
    {
        "content": "<p>revising this topic, maybe this had the bug?</p>",
        "id": 134773607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082173
    },
    {
        "content": "<p>dang Zulip search is good btw</p>",
        "id": 134773695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082247
    },
    {
        "content": "<p>I have literally never failed to find the thing I was looking for thus far</p>",
        "id": 134773719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082305
    },
    {
        "content": "<p>:D (yeah it was this topic)</p>",
        "id": 134773880,
        "sender_full_name": "lqd",
        "timestamp": 1538082487
    },
    {
        "content": "<p>hmm ok so the test:</p>\n<div class=\"codehilite\"><pre><span></span>        universal_regions { }\n        block B0 {\n            borrow_region_at(&#39;a, L0),\n            outlives(&#39;a: &#39;b),\n            outlives(&#39;b: &#39;c),\n            outlives(&#39;c: &#39;d),\n            region_live_at(&#39;d);\n        }\n</pre></div>",
        "id": 134774128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082832
    },
    {
        "content": "<p>so ... I think that the problem is that the optimized version assumes that there are <em>two</em> live endpoints</p>",
        "id": 134774186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082868
    },
    {
        "content": "<p>but here there is only one</p>",
        "id": 134774188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082873
    },
    {
        "content": "<p>I am tempted to say that this is an invalid <em>input</em> that we should fix</p>",
        "id": 134774196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082884
    },
    {
        "content": "<p>in particular, I think that one could say that the borrow region is always live at the point where it is introduced</p>",
        "id": 134774208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082912
    },
    {
        "content": "<p>however</p>",
        "id": 134774216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082920
    },
    {
        "content": "<p>let me look at the code a bit to refresh my memory</p>",
        "id": 134774221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082928
    },
    {
        "content": "<p>e.g. this input passes</p>\n<div class=\"codehilite\"><pre><span></span>        universal_regions { }\n        block B0 {\n            borrow_region_at(&#39;a, L0),\n            region_live_at(&#39;a),\n            outlives(&#39;a: &#39;b),\n            outlives(&#39;b: &#39;c),\n            outlives(&#39;c: &#39;d),\n            region_live_at(&#39;d);\n        }\n</pre></div>",
        "id": 134774231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538082958
    },
    {
        "content": "<p>this would be nice, and we could quickly prototype such a fix in the same way we add all points to universal_regions</p>",
        "id": 134774698,
        "sender_full_name": "lqd",
        "timestamp": 1538083496
    },
    {
        "content": "<p>otoh I remember wanting it to be the case that</p>",
        "id": 134774719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083527
    },
    {
        "content": "<p>you could talk about various regions in the \"mid-point\" of things</p>",
        "id": 134774734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083543
    },
    {
        "content": "<p>that are never used outside</p>",
        "id": 134774736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083547
    },
    {
        "content": "<p>and only serve to make connections</p>",
        "id": 134774742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083550
    },
    {
        "content": "<p>but this is still true, I suppose</p>",
        "id": 134774748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083554
    },
    {
        "content": "<p>in particular, when you e.g. invoke a fn</p>",
        "id": 134774753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083559
    },
    {
        "content": "<p>that instantiates some higher-ranked regions at the point of call</p>",
        "id": 134774798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083571
    },
    {
        "content": "<p>and those don't appear in any MIR types, they only exist at the \"mid point\"</p>",
        "id": 134774802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083579
    },
    {
        "content": "<p>but they make connections between the arguments and the return type of the fn</p>",
        "id": 134774805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083588
    },
    {
        "content": "<p>e.g., <code>for&lt;'a&gt; fn(&amp;'a str) -&gt; &amp;'a str</code></p>",
        "id": 134774808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083595
    },
    {
        "content": "<p>the region that represents <code>'a</code> for any particular call</p>",
        "id": 134774812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083600
    },
    {
        "content": "<p>so this still preserves the \"both end-points are live on entry to the mid point\" property</p>",
        "id": 134774823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083618
    },
    {
        "content": "<p>I am trying to bring the \"opt code\" back into cache now to decide how hard it would be to match behavior though :)</p>",
        "id": 134775013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083845
    },
    {
        "content": "<p>but I'm not sure if it's worth it, feels to me like the borrow region should be live at the (mid-point) of borrow</p>",
        "id": 134775024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083868
    },
    {
        "content": "<p>which I <em>think</em> is the bug here</p>",
        "id": 134775027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538083877
    },
    {
        "content": "<p>very interesting cases tho, even if they don't appear quite often in the test suite</p>",
        "id": 134775036,
        "sender_full_name": "lqd",
        "timestamp": 1538083916
    },
    {
        "content": "<p>that's what I'm wondering</p>",
        "id": 134775253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084173
    },
    {
        "content": "<p>why only this test case?</p>",
        "id": 134775254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084177
    },
    {
        "content": "<p>I have to look at the rust test too</p>",
        "id": 134775257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084189
    },
    {
        "content": "<p>it's more let's say 10 rustc tests</p>",
        "id": 134775274,
        "sender_full_name": "lqd",
        "timestamp": 1538084240
    },
    {
        "content": "<p>but one pattern, only the length of the outlives chain changing (maybe 2 patterns, at most, but if memory serves, it only looked like there was one)</p>",
        "id": 134775281,
        "sender_full_name": "lqd",
        "timestamp": 1538084259
    },
    {
        "content": "<p>(IIRC I've mentioned in the polonius tests, the rustc tests where we saw these lengths of chains)</p>",
        "id": 134775362,
        "sender_full_name": "lqd",
        "timestamp": 1538084356
    },
    {
        "content": "<p>hmm</p>",
        "id": 134775427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538084412
    },
    {
        "content": "<p>I might be Doin It Wrong™ but I tried the quick hack we mentioned yesterday, to declare that each borrow region is always live at the point where it is introduced: it seems to fix the failing tests focusing on the opt/naive difference, but will also make other tests fail (eg our key loop feature of issue-47680)</p>",
        "id": 134818848,
        "sender_full_name": "lqd",
        "timestamp": 1538136044
    },
    {
        "content": "<p>interesting</p>",
        "id": 134830861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538147154
    },
    {
        "content": "<p>I don't have it quite \"in cache enough\" just yet</p>",
        "id": 134830920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538147178
    },
    {
        "content": "<p>there's no rush</p>",
        "id": 134831112,
        "sender_full_name": "lqd",
        "timestamp": 1538147376
    }
]