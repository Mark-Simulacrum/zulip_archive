[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> total nit, but I wonder if <code>impl Trait</code> would make this more readable:</p>\n<p>before:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">join_helper</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Relation</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"n\">Val1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Relation</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// do some stuff probably.</span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>after (I'm also using the \"rustfmt\" style here):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">join_helper</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Relation</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"n\">Val1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Relation</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// do some stuff probably.</span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126791673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726117
    },
    {
        "content": "<p>Interesting! I hadn't got around to testing <code>impl Trait</code> yet, but that does seem more tasteful.</p>",
        "id": 126791716,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726230
    },
    {
        "content": "<p>so far it all reads very nicely to me â€” but then i'm definitely knee deep in this space right now :)</p>",
        "id": 126791720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726268
    },
    {
        "content": "<p>I find <code>impl Trait</code> in argument position is basically made for closures ;)</p>",
        "id": 126791761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> in this line, you use <code>Fn</code> not <code>FnMut</code>, is there a reason for that (I don't immediately see why):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">join_into</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">)</span>-&gt;<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126791762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726331
    },
    {
        "content": "<p>though I guess most of the helpers wouldn't mutate environmental state anyway</p>",
        "id": 126791769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726373
    },
    {
        "content": "<p>Actually,  while I have you, why must I write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">join_into</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">)</span>-&gt;<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">logic</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch2</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">batch2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch1</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">batch1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Relation</span>::<span class=\"n\">from_vec</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and not this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">join_into</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">)</span>-&gt;<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">logic</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch2</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">batch2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch1</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">batch1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Relation</span>::<span class=\"n\">from_vec</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126791773,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726396
    },
    {
        "content": "<p>actually I'm not sure that you must :)</p>",
        "id": 126791818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726438
    },
    {
        "content": "<p>I get a bunch of errors (can link) that seem to be about the lifetimes in the <code>for &lt;'r, 's, 't&gt;</code> HRLs.</p>",
        "id": 126791819,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726449
    },
    {
        "content": "<p>oh</p>",
        "id": 126791820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Echidnatron% cargo test\n   Compiling datafrog v0.1.0 (file:///Users/mcsherry/Projects/datafrog)\nerror[E0631]: type mismatch in closure arguments\n  --&gt; src/join.rs:19:9\n   |\n16 |     let mut closure = |k,v1,v2| results.push(logic(k,v1,v2));\n   |                       -------------------------------------- found signature of `fn(&amp;Key, &amp;Val1, &amp;Val2) -&gt; _`\n...\n19 |         join_helper(&amp;recent1, &amp;batch2, closure);\n   |         ^^^^^^^^^^^ expected signature of `for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Key, &amp;&#39;s Val1, &amp;&#39;t0 Val2) -&gt; _`\n   |\nnote: required by `join::join_helper`\n  --&gt; src/join.rs:51:1\n   |\n51 | fn join_helper&lt;K: Ord, V1, V2, F: FnMut(&amp;K,&amp;V1,&amp;V2)&gt;(mut slice1: &amp;[(K,V1)], mut slice2: &amp;[(K,V2)], mut result: F) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0271]: type mismatch resolving `for&lt;&#39;r, &#39;s, &#39;t0&gt; &lt;[closure@src/join.rs:16:23: 16:61 results:_, logic:_] as std::ops::FnOnce&lt;(&amp;&#39;r Key, &amp;&#39;s Val1, &amp;&#39;t0 Val2)&gt;&gt;::Output == ()`\n  --&gt; src/join.rs:19:9\n   |\n19 |         join_helper(&amp;recent1, &amp;batch2, closure);\n   |         ^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n   |\nnote: required by `join::join_helper`\n  --&gt; src/join.rs:51:1\n   |\n51 | fn join_helper&lt;K: Ord, V1, V2, F: FnMut(&amp;K,&amp;V1,&amp;V2)&gt;(mut slice1: &amp;[(K,V1)], mut slice2: &amp;[(K,V2)], mut result: F) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 126791824,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726465
    },
    {
        "content": "<p>yeah you would need type annotations on the parameters</p>",
        "id": 126791827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726470
    },
    {
        "content": "<p>the reason is that, to infer which parameters have HRL, we use the \"expected type\"</p>",
        "id": 126791829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726486
    },
    {
        "content": "<p>that is, we look at the fn you are calling and the declared type on its parameter</p>",
        "id": 126791830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726496
    },
    {
        "content": "<p>if there is no expected type (as in the new code), then we will only infer a higher-ranked lifetime if it is manually given to us</p>",
        "id": 126791831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726514
    },
    {
        "content": "<p>I hope to improve this actually</p>",
        "id": 126791832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726520
    },
    {
        "content": "<p>but inferring higher-ranked things is a mite tricky so it may not work out</p>",
        "id": 126791872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726532
    },
    {
        "content": "<p>Re the <code>Fn</code> vs <code>FnMut</code>, no reason that I can think of. I think morally I imagined it would be a functional transformation of the inputs, but I can't see why <code>FnMut</code> shouldn't be permitted. Lemme fix that up too.</p>",
        "id": 126791873,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726545
    },
    {
        "content": "<p>(I think that, if I could go back in time, I would require that closure's parameters have a type given if there is no expected type, but ...)</p>",
        "id": 126791874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726548
    },
    {
        "content": "<p>so iow something like this would probably work:</p>",
        "id": 126791881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Val2</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126791885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726607
    },
    {
        "content": "<p>or whatever the right types are</p>",
        "id": 126791887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726612
    },
    {
        "content": "<p>okies, that seems likely to work. getting errors now about the fact that the closure has a <code>&amp;mut</code> in it, so can't be cloned; will have to take closure by reference rather than owned, I think but should be ok.</p>",
        "id": 126791933,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726709
    },
    {
        "content": "<p>Does <code>logic: &amp;mut impl Fn(&amp;blah)</code> work as well? (( also trying it out, but .. ))</p>",
        "id": 126791936,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726752
    },
    {
        "content": "<p>yes that would work</p>",
        "id": 126791937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726762
    },
    {
        "content": "<p>however</p>",
        "id": 126791976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726766
    },
    {
        "content": "<p>you should not have to modify the callee I don't thnk</p>",
        "id": 126791978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726772
    },
    {
        "content": "<p>because <code>FnMut</code> is implemented for <code>&amp;mut F</code> where <code> F: FnMut</code></p>",
        "id": 126791979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726780
    },
    {
        "content": "<p>(iirc)</p>",
        "id": 126791980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726783
    },
    {
        "content": "<p>so you should be able to get by with just <code>logic: impl FnMut(..)</code></p>",
        "id": 126791982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726803
    },
    {
        "content": "<p>and then on the caller side doing <code>..., &amp;mut closure)</code></p>",
        "id": 126791983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726811
    },
    {
        "content": "<p>though sometimes I forget just which adapters we actually have and I could be wrong :)</p>",
        "id": 126791989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526726833
    },
    {
        "content": "<p>Cool, this seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">join_into</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span>: <span class=\"nb\">Ord</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Variable</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">logic</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Val2</span><span class=\"p\">)</span>-&gt;<span class=\"nb\">Result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">recent2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">k</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Val1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Val2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch2</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input2</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">batch2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">batch1</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">stable</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">batch1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">join_helper</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">recent1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">recent2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Relation</span>::<span class=\"n\">from_vec</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 126792038,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526726995
    },
    {
        "content": "<p>Scope needed to allow <code>closure</code> to drop and release borrow on <code>results</code>, so that it can be moved into <code>insert</code>.</p>",
        "id": 126792083,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727023
    },
    {
        "content": "<blockquote>\n<p>Well enough that I'm still blocked on them confirming that we've actually computed the same thing, before getting too sassy.</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 126792084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727033
    },
    {
        "content": "<p>Yeah, well you can't see how long it takes them. Want to guess the speed-up?</p>",
        "id": 126792085,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727050
    },
    {
        "content": "<p>This is ASPLOS, one of the top architecture/systems conferences, right?</p>",
        "id": 126792091,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727076
    },
    {
        "content": "<p>confirm</p>",
        "id": 126792092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727086
    },
    {
        "content": "<p>It's about a 200x speed-up.  And it's totally the right answer. Same number of tuples as them, but they rounded to millions so hard to be 100% certain.</p>",
        "id": 126792130,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727125
    },
    {
        "content": "<p>introducing <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span> COST</p>",
        "id": 126792133,
        "sender_full_name": "lqd",
        "timestamp": 1526727141
    },
    {
        "content": "<p>wow, I was going to guess 10x â€”Â then realized that must be too conservative</p>",
        "id": 126792134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727143
    },
    {
        "content": "<p>so I was going to up to 100x :)</p>",
        "id": 126792135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727152
    },
    {
        "content": "<p>they take 11mins to do it; 3 seconds of compute with <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>.</p>",
        "id": 126792136,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727161
    },
    {
        "content": "<p>reading <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>'s implementation reminded me of some excellent lectures I was watching by Alex Stepanov</p>",
        "id": 126792144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727194
    },
    {
        "content": "<p>That's doing null pointer reachability on httpd. If you do it on postgres, it takes them 143.8 minutes. Guess for <span class=\"emoji emoji-1f438\" title=\"frog\">:frog:</span>.</p>",
        "id": 126792145,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727215
    },
    {
        "content": "<p>he often claimed \"computers are array processing machines\", and â€” paraphrased â€” using any other data structure is folly</p>",
        "id": 126792146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727215
    },
    {
        "content": "<p>uh..10s :)</p>",
        "id": 126792148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727234
    },
    {
        "content": "<p>/me just picks a number out of the air</p>",
        "id": 126792187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727254
    },
    {
        "content": "<p>5s to load the data, then 9s to complete the compute.</p>",
        "id": 126792188,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727268
    },
    {
        "content": "<p>wow</p>",
        "id": 126792191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727282
    },
    {
        "content": "<p>amazing</p>",
        "id": 126792195,
        "sender_full_name": "lqd",
        "timestamp": 1526727293
    },
    {
        "content": "<p>Current \"bee in bonnet\" is \"people who have to invent systems because the existing systems are so bad\".</p>",
        "id": 126792196,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727295
    },
    {
        "content": "<p>Arguably the ASPLOS authors are sympathetic characters here. They took a Stanford system, and instead of 3s, or even 11 minutes, it takes them (Stanford) four hours to do the httpd null pointer analysis. =/</p>",
        "id": 126792203,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727337
    },
    {
        "content": "<p>I am definitely feeling a desire to read those papers now</p>",
        "id": 126792243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727363
    },
    {
        "content": "<p>So they (the ASPLOS authors) are in a bit of a bind, in that the \"big data\" systems are just not suitable for what they are trying to do. And so they learn a bit about how to do this, but are just learning as they go.</p>",
        "id": 126792246,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727398
    },
    {
        "content": "<p>PS your link for \"real paper\" leads to <a href=\"https://github.com/frankmcsherry/blog/blob/master/posts\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts\">https://github.com/frankmcsherry/blog/blob/master/posts</a></p>",
        "id": 126792252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727424
    },
    {
        "content": "<p>which is maybe not what you meant</p>",
        "id": 126792255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727429
    },
    {
        "content": "<p>are they distributing the computation over a big cluster or something?</p>",
        "id": 126792256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727459
    },
    {
        "content": "<p>i.e., is part of the problem that they are paying a lot of synchronization overhead, but the quantity of data doesn't justify that?</p>",
        "id": 126792257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727474
    },
    {
        "content": "<p>Oh, right a few broken links at the moment sorry. (typed while out and about w/o internet).</p>",
        "id": 126792296,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727490
    },
    {
        "content": "<p>no worries</p>",
        "id": 126792297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727498
    },
    {
        "content": "<p>just thought I'd mention it</p>",
        "id": 126792298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526727500
    },
    {
        "content": "<p>No, this is single machine stuff they are doing. <a href=\"https://www.ics.uci.edu/~guoqingx/papers/wang-asplos17.pdf\" target=\"_blank\" title=\"https://www.ics.uci.edu/~guoqingx/papers/wang-asplos17.pdf\">https://www.ics.uci.edu/~guoqingx/papers/wang-asplos17.pdf</a></p>",
        "id": 126792300,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727513
    },
    {
        "content": "<p>That <code>impl Fn</code> stuff is great. Much cleaner, even if just syntax. :)</p>",
        "id": 126792358,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1526727622
    },
    {
        "content": "<blockquote>\n<p>We are going to reproduce their results!</p>\n</blockquote>\n<p>Readers will be able to predict how this will end</p>",
        "id": 126793638,
        "sender_full_name": "lqd",
        "timestamp": 1526730785
    },
    {
        "content": "<p>very nice post</p>",
        "id": 126793683,
        "sender_full_name": "lqd",
        "timestamp": 1526730872
    }
]