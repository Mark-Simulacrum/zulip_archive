[
    {
        "content": "<p>this is a placeholder thread to go on discussion why the location insensitive rustc is still taking too long to compile clap; see older notes in the making-more-plans thread</p>",
        "id": 126749855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526650577
    },
    {
        "content": "<p>ok I spent some time looking at why the type check is so expensive</p>",
        "id": 126754659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656595
    },
    {
        "content": "<p>I think I have a fix</p>",
        "id": 126754661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656599
    },
    {
        "content": "<p>in particular the <em>vast</em> majority of that time seems to be allocating some vectors we don't have to be allocating</p>",
        "id": 126754683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656644
    },
    {
        "content": "<p>but I'll have to tweak the ena API</p>",
        "id": 126754685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656647
    },
    {
        "content": "<p>should be easy though</p>",
        "id": 126754690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> or <span class=\"user-mention\" data-user-id=\"116110\">@Chris Vittal</span> â€” either of you, feel free to ping me if you want to help out with other optimization efforts on rustc (as opposed to <a href=\"https://github.com/rust-lang-nursery/polonius/\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/\">polonius</a> hacking)</p>",
        "id": 126754749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656691
    },
    {
        "content": "<p>(or anybody :)</p>",
        "id": 126754751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656697
    },
    {
        "content": "<p>I'm more than happy to work on that if that's where the work is needed.</p>",
        "id": 126754772,
        "sender_full_name": "davidtwco",
        "timestamp": 1526656738
    },
    {
        "content": "<p>ok I'm about to step out but I think that a good thing to do would be to look into how we can make <code>kill_loans_out_of_scope_at_location</code> faster</p>",
        "id": 126754860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656822
    },
    {
        "content": "<p>right now, it is very simplistic:</p>",
        "id": 126754864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656832
    },
    {
        "content": "<p>it iterates over <em>all borrows</em> and checks whether they are out of scope at a given location</p>",
        "id": 126754868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656842
    },
    {
        "content": "<p>this is pretty dumb</p>",
        "id": 126754869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656848
    },
    {
        "content": "<p>I'm not 100% sure what would be better ;) but I can think of at least some things</p>",
        "id": 126754874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656863
    },
    {
        "content": "<p>e.g., for each borrow, we could compute the set of <strong>transition points</strong> Q where:</p>\n<ul>\n<li>there is some predecessor P where the borrow <em>is</em> live</li>\n<li>the borrow is <em>not</em> live at Q</li>\n</ul>",
        "id": 126754891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656910
    },
    {
        "content": "<p>if we kept an index like <code>Q -&gt; [L]</code> where <code>Q</code> is some point and <code>[L]</code> is the set of borrows (loans) that have a transition point <code>Q</code>,</p>",
        "id": 126754939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656946
    },
    {
        "content": "<p>then <code>kill_loans_out_of_scope_at_location</code> could just lookup in that set</p>",
        "id": 126754942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656954
    },
    {
        "content": "<p>I'll be back in a few minutes, gotta walk to the subway</p>",
        "id": 126754946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526656967
    },
    {
        "content": "<p>ok on subway now :)</p>",
        "id": 126755948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658421
    },
    {
        "content": "<p>I'm not sure if what I just proposed <em>really</em> makes sense</p>",
        "id": 126755956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658435
    },
    {
        "content": "<p>it's not obvious to me how to build said map</p>",
        "id": 126755957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658439
    },
    {
        "content": "<p>but it feels like there has to be a faster way to do what we are doing</p>",
        "id": 126755962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658448
    },
    {
        "content": "<p>it occurs to me that if we <em>did</em> migrate to SEME regions (current system is not using them) they might enable a faster way to detect these transition points</p>",
        "id": 126755971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526658465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I'm fine with either polonius hacking, or rustc hacking. What's there to do?</p>",
        "id": 126759190,
        "sender_full_name": "Chris Vittal",
        "timestamp": 1526662948
    },
    {
        "content": "<p>well so <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I were talking earlier. The TL;DR is that we should try to polish rustc \"as is\" but keep things moving with polonius. That way we can integrate at our leisure.</p>",
        "id": 126759214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663017
    },
    {
        "content": "<p>as far as rustc goes, there are two bottlenecks:</p>",
        "id": 126759219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663033
    },
    {
        "content": "<p>one of them I had planned to tackle right now</p>",
        "id": 126759221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663038
    },
    {
        "content": "<p>though I would be happy to mentor it out also :) it involves adding a feature to <a href=\"https://github.com/rust-lang-nursery/ena\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/ena\">ena</a></p>",
        "id": 126759269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663060
    },
    {
        "content": "<p>I'm kind of incline dto just do it though</p>",
        "id": 126759274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663072
    },
    {
        "content": "<p>since it will take me as long to describe as to do =)</p>",
        "id": 126759277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663078
    },
    {
        "content": "<p>and I'd like to see how much faster it will go</p>",
        "id": 126759280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663082
    },
    {
        "content": "<p>the other is the <code>kill_loans_out_of_scope_at_location</code> thing I was talking about above; I'm not sure the best plan there</p>",
        "id": 126759295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663097
    },
    {
        "content": "<p>oh heh that's sort of funny</p>",
        "id": 126759320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663153
    },
    {
        "content": "<p>looking in my local clone of <code>ena</code> I see I had already started the changes I had in mind</p>",
        "id": 126759364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663166
    },
    {
        "content": "<p>and just forgotten about it</p>",
        "id": 126759367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526663168
    },
    {
        "content": "<hr>",
        "id": 126764820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670838
    },
    {
        "content": "<p>ok so on the topic of <code>kill_loans_out_of_scope_at_location</code></p>",
        "id": 126764860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> and I did a quick chat to cover background, which I will post, but it remains not <em>entirely</em> obvious to me how to do this better</p>",
        "id": 126764862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670868
    },
    {
        "content": "<p>at least one thing <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> that came up is that we should try just calling it less often</p>",
        "id": 126764864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670877
    },
    {
        "content": "<p>(not entirely sure that I came up with it, but sure)</p>",
        "id": 126764869,
        "sender_full_name": "davidtwco",
        "timestamp": 1526670895
    },
    {
        "content": "<p>well it came up anyway :)</p>",
        "id": 126764878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670910
    },
    {
        "content": "<p>want to give that a shot and see what breaks?</p>",
        "id": 126764880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670921
    },
    {
        "content": "<p>I suspect we only need the calls from <code>before_{statement,terminator}_effect</code></p>",
        "id": 126764886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670930
    },
    {
        "content": "<p>Sure thing.</p>",
        "id": 126764888,
        "sender_full_name": "davidtwco",
        "timestamp": 1526670934
    },
    {
        "content": "<p>I can't yet see how it could be otherwise..</p>",
        "id": 126764892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526670954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> two things.</p>\n<p>1. we should open a rustc issue. I'll do that, and then leave some more detailed notes.<br>\n2. I was thinking about this later and I think probably the best we can do to compute the kills for each borrow is like this:</p>\n<ul>\n<li>iterate over list of borrows </li>\n<li>for each borrow, we would do a DFS starting from the point of the borrow, stopping as we exit the region of the borrow: each point where we stop, we add a kill</li>\n</ul>\n<p>This is not how the current dataflow framework is setup, though: it wants to walk and, at each point, ask you: should I have a gen/kill bit here?</p>\n<p>I <em>think</em> there are other APIs though we could use for this, but if not, we could do that walk and build up a datastructure to use later (basically a map <code>P -&gt; Vec&lt;L&gt;</code> of killed borrows)</p>",
        "id": 126789832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526721705
    },
    {
        "content": "<p>I suspect this will be a big win even in \"theoretically\" it doesn't feel <em>that</em> much better</p>",
        "id": 126789874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526721728
    },
    {
        "content": "<p>Alright, great. (I've still been running into some issues getting rustc to compile - not sure what's changed in my setup or in rustc since I last compiled it, but after I've got that sorted I'll be looking at this).</p>",
        "id": 126789917,
        "sender_full_name": "davidtwco",
        "timestamp": 1526721843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not seeing any errors on run-pass or compile-fail after calling from only <code>before_{statement, terminator}_effect</code>.</p>",
        "id": 126796555,
        "sender_full_name": "davidtwco",
        "timestamp": 1526737659
    },
    {
        "content": "<p>maybe open a PR then :) r? me or pnkfelix...</p>",
        "id": 126796701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526737955
    },
    {
        "content": "<p>Sure thing.</p>",
        "id": 126797793,
        "sender_full_name": "davidtwco",
        "timestamp": 1526740668
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/50891\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50891\">https://github.com/rust-lang/rust/pull/50891</a></p>",
        "id": 126797886,
        "sender_full_name": "davidtwco",
        "timestamp": 1526740913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you open an issue for this?</p>",
        "id": 126829723,
        "sender_full_name": "davidtwco",
        "timestamp": 1526817344
    },
    {
        "content": "<p>no sorry I should do that</p>",
        "id": 126870633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> which is your PR btw ?</p>",
        "id": 126870638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526906812
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/50891\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50891\">https://github.com/rust-lang/rust/pull/50891</a></p>",
        "id": 126870710,
        "sender_full_name": "davidtwco",
        "timestamp": 1526906891
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> filed <a href=\"https://github.com/rust-lang/rust/issues/50934\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50934\">https://github.com/rust-lang/rust/issues/50934</a></p>",
        "id": 126871038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907396
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> , I r+'ed rust-lang/rust#50891 in the meantime</p>",
        "id": 126871059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526907451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> silly question, but does the MIR dataflow code have the option of adding a kill bit to an arbitrary point P?</p>",
        "id": 126871065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907466
    },
    {
        "content": "<p>right now, it usually does some kind of walk and invokes <code>statement_effect</code> to learn this information</p>",
        "id": 126871101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907483
    },
    {
        "content": "<p>Thanks. I'll take a look into that issue a little later today.</p>",
        "id": 126871108,
        "sender_full_name": "davidtwco",
        "timestamp": 1526907484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right, we only keep per-block info globally</p>",
        "id": 126871114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526907499
    },
    {
        "content": "<p>anyway maybe add some notes about that to #50934</p>",
        "id": 126871117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907501
    },
    {
        "content": "<p>hmm ok right</p>",
        "id": 126871121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and rely on the client to reconstruct any intra-block effect</p>",
        "id": 126871123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526907515
    },
    {
        "content": "<p>well ok</p>",
        "id": 126871124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907525
    },
    {
        "content": "<p>I guess all that means is</p>",
        "id": 126871125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907527
    },
    {
        "content": "<p>we should â€”Â in the <code>BorrowSet</code> or some such place â€” build up an index</p>",
        "id": 126871128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907534
    },
    {
        "content": "<p>that we can consult in the <code>Borrows</code> iterator</p>",
        "id": 126871131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907542
    },
    {
        "content": "<p>an index of what? Is this something for rust-lang/rust#50934 ?</p>",
        "id": 126871155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526907591
    },
    {
        "content": "<p>yes</p>",
        "id": 126871211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907620
    },
    {
        "content": "<p>right now, to figure out which loans go out of scope at some location L,</p>",
        "id": 126871213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907627
    },
    {
        "content": "<p>we iterate over all loans</p>",
        "id": 126871217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907630
    },
    {
        "content": "<p>and check if L is in their region</p>",
        "id": 126871222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907640
    },
    {
        "content": "<p>the best improvement I can think of (maybe you can think of a better one!) is to instead do a DFS starting from the point of each borrow</p>",
        "id": 126871230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907658
    },
    {
        "content": "<p>and then keep a map <code>Location -&gt; Set&lt;BorrowIndex&gt;</code></p>",
        "id": 126871258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907675
    },
    {
        "content": "<p>which basically stores the locations where each borrow went out of scope</p>",
        "id": 126871266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907685
    },
    {
        "content": "<p>this is still O(N^2) but you are only walking over the points actually <em>in</em> each borrow</p>",
        "id": 126871268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907694
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> , <a href=\"https://github.com/rust-lang/rust/issues/50934#issuecomment-390647460\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50934#issuecomment-390647460\">left more notes here</a></p>",
        "id": 126871330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907783
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 126871345,
        "sender_full_name": "davidtwco",
        "timestamp": 1526907832
    },
    {
        "content": "<p>btw over the weekend my <a href=\"https://github.com/rust-lang/rust/pull/50874\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/50874\">PR #50874</a> landed which seems to have been a <a href=\"http://perf.rust-lang.org/compare.html?start=bdace29de04af4fe9e4317b73c3f7d6418a33de1&amp;end=c95e1cccc9c248789230a54ecfd87971a04d5c0c&amp;stat=instructions:u\" target=\"_blank\" title=\"http://perf.rust-lang.org/compare.html?start=bdace29de04af4fe9e4317b73c3f7d6418a33de1&amp;end=c95e1cccc9c248789230a54ecfd87971a04d5c0c&amp;stat=instructions:u\">10-20% win overall</a> â€” I'm looking to see what's the next bottle neck in the typeck</p>",
        "id": 126871399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907876
    },
    {
        "content": "<p>I think it's still in that general area</p>",
        "id": 126871400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526907882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> speaking of topic hygiene, jfyi we can discuss how to improve <code>kill_loans_out_of_scope_at_location</code> here I suppose =)</p>",
        "id": 126925068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998396
    },
    {
        "content": "<p>ah true</p>",
        "id": 126925080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998415
    },
    {
        "content": "<p>okay I've re-read <a href=\"https://github.com/rust-lang/rust/issues/50934\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50934\">https://github.com/rust-lang/rust/issues/50934</a> ; it basically amounts to trying to precompute the kill-set on the Borrows for each location</p>",
        "id": 126925147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998453
    },
    {
        "content": "<p>(IIUC)</p>",
        "id": 126925155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998467
    },
    {
        "content": "<p>yeah nothing too clever</p>",
        "id": 126925165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998491
    },
    {
        "content": "<p>I'm just banking it would be faster</p>",
        "id": 126925168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998499
    },
    {
        "content": "<p>tbh I didn't quite understand what you were proposing</p>",
        "id": 126925170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998504
    },
    {
        "content": "<p>but maybe I have to (re-)read the source first</p>",
        "id": 126925179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998506
    },
    {
        "content": "<p>well I think I didn't understand everything here at first</p>",
        "id": 126925309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998657
    },
    {
        "content": "<p>(namely I misread the code and thought we were iterating over a bitset in the outer loop. But we're actually iterating, as you have said repeatedly, <em>all</em> of the registered borrows.)</p>",
        "id": 126925430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998802
    },
    {
        "content": "<p>you know: While we need to do the full iteration when we are setting up the initial gen and kill sets</p>",
        "id": 126925507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998854
    },
    {
        "content": "<p>once the dataflow equations are solved</p>",
        "id": 126925510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998862
    },
    {
        "content": "<p>we should be able to just iterate over the bits set to 1 in the block sets, right?</p>",
        "id": 126925522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998880
    },
    {
        "content": "<p>/me goes to double-check if we actually call these methods after the dataflow has been run</p>",
        "id": 126925529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526998908
    },
    {
        "content": "<blockquote>\n<p>we should be able to just iterate over the bits set to 1 in the block sets, right?</p>\n</blockquote>\n<p>yes, this was something else I wanted to consider doing</p>",
        "id": 126925577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998936
    },
    {
        "content": "<p>but then I was thinking that â€”Â if we pre-compute the sets we need â€” it hardly matters anyway, right?</p>",
        "id": 126925584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526998949
    },
    {
        "content": "<p>it does matter</p>",
        "id": 126925625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999015
    },
    {
        "content": "<p>because when we do the post-processing after dataflow has been solved</p>",
        "id": 126925634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999027
    },
    {
        "content": "<p>we are calling reconstruct_statement_effect</p>",
        "id": 126925650,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999033
    },
    {
        "content": "<p>which, right now, calls into the code like <code>before_statement_effect</code></p>",
        "id": 126925707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999050
    },
    {
        "content": "<p>yes, I know, but the set of borrows killed at that point are almost certainly the same set that are gen'd</p>",
        "id": 126925712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999060
    },
    {
        "content": "<p>unless you have a case like <code>foo = ...</code> which kills the borrow</p>",
        "id": 126925717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999069
    },
    {
        "content": "<p>my point is that we are still iterating over the full index</p>",
        "id": 126925719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999075
    },
    {
        "content": "<p>in the outer loop</p>",
        "id": 126925720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999079
    },
    {
        "content": "<p>or do you think that isn't a problem?</p>",
        "id": 126925728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999093
    },
    {
        "content": "<p>to be clear, I am saying:</p>\n<p>1. iterating only over the live borrows (in second phase) would be a win<br>\nbut<br>\n2. if we had a <code>Point -&gt; Vec&lt;Location&gt;</code> map (which we need anyway, probably?) then this might subsume that</p>",
        "id": 126925749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999117
    },
    {
        "content": "<p>but I agree that it would be a win</p>",
        "id": 126925757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999144
    },
    {
        "content": "<p>sorry, is the <code>Point -&gt; Vec&lt;Location&gt;</code> map ... is that the same as the side-index you propose in <a href=\"https://github.com/rust-lang/rust/issues/50934\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50934\">https://github.com/rust-lang/rust/issues/50934</a> ?</p>",
        "id": 126925818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999191
    },
    {
        "content": "<p>yes, that one</p>",
        "id": 126925824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999203
    },
    {
        "content": "<p>I guess we don't \"have to do it\"</p>",
        "id": 126925828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999207
    },
    {
        "content": "<p>I am personally worried that any such table will be a space hog</p>",
        "id": 126925831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999216
    },
    {
        "content": "<p>just that, <em>if we do it</em>, it might subsume the other computation</p>",
        "id": 126925832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999217
    },
    {
        "content": "<p>hmm, I'd be surprised by that</p>",
        "id": 126925845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999228
    },
    {
        "content": "<p>keep in mind that this table would hvae far fewer kills than we currently create</p>",
        "id": 126925855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999243
    },
    {
        "content": "<p>while the idea of \"iterating over the live borrows\" should be implementable with the state we are computing today</p>",
        "id": 126925856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999244
    },
    {
        "content": "<p>right now we kill every region that is out of scope at the point P</p>",
        "id": 126925858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999249
    },
    {
        "content": "<p>but that is \"overkill\" (no pun intended)</p>",
        "id": 126925867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999256
    },
    {
        "content": "<p>I am proposing that we only add a kill on the target Q of some edge P -&gt; Q where P is in the region but Q is not</p>",
        "id": 126925872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999269
    },
    {
        "content": "<blockquote>\n<p>while the idea of \"iterating over the live borrows\" should be implementable with the state we are computing today</p>\n</blockquote>\n<p>true</p>",
        "id": 126925879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999281
    },
    {
        "content": "<p>anyway I'm not opposed to doing that first if you think it's easy</p>",
        "id": 126925924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999290
    },
    {
        "content": "<p>and/or trying both</p>",
        "id": 126925927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999294
    },
    {
        "content": "<p>hmm yes okay the kill-set would only have entries that are actually potentially gen'ed at some point that reaches that location</p>",
        "id": 126925937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999310
    },
    {
        "content": "<p>the other property I am banking on here is that kills for loans occur in two cases:</p>\n<p>1. region ends<br>\n2. the borrowed path is reassigned</p>\n<p>and I assume 2 is rare.</p>",
        "id": 126925952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999336
    },
    {
        "content": "<p>(meaning that the set of borrows being killed at any point will typically be equal to the set where region ends)</p>",
        "id": 126925979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999363
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 126926052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999431
    },
    {
        "content": "<p>(still if you think it's easy to take advantage of the fact that we're in second phase â€” I guess that just means adding a flag somewhere to communicate that? â€”Â let's indeed do that and measure perf!)</p>",
        "id": 126926085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1526999495
    },
    {
        "content": "<p>Ah lets talk about it in the meeting tonight</p>",
        "id": 126926094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999510
    },
    {
        "content": "<p>We're way over time</p>",
        "id": 126926099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999517
    },
    {
        "content": "<p>I'm going to switch back to diagnostics review now</p>",
        "id": 126926146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1526999529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> <a href=\"https://perf.rust-lang.org/compare.html?start=531e4ab7bc1a9064ae0b77ba16a9cd46832194e6&amp;end=e249596d949661791d44633eb5e78b1ae999782d&amp;stat=instructions:u\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=531e4ab7bc1a9064ae0b77ba16a9cd46832194e6&amp;end=e249596d949661791d44633eb5e78b1ae999782d&amp;stat=instructions:u\">these are the perf results from your PR</a> â€” looking good! I'm assuming you didn't get a chance to look at the further improvements?</p>",
        "id": 127005955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527122641
    },
    {
        "content": "<p>we're still quite a bit slower doing clap check (NLL vs clean, for example)</p>",
        "id": 127006000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527122672
    },
    {
        "content": "<p>current profile information:</p>\n<table>\n<thead>\n<tr>\n<th>thing</th>\n<th>percent (total)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MIR borrowck</td>\n<td>24%</td>\n</tr>\n<tr>\n<td><code>â”” compute_regions</code></td>\n<td>10%</td>\n</tr>\n<tr>\n<td><code>â”‚â”” type_check_internal</code></td>\n<td>8%</td>\n</tr>\n<tr>\n<td><code>â”” do_dataflow</code></td>\n<td>6%</td>\n</tr>\n<tr>\n<td><code>â”‚â”” kill_loans_out_of_scope_at_location</code></td>\n<td>5%</td>\n</tr>\n<tr>\n<td><code>kill_loans_out_of_scope_at_location</code>(total)</td>\n<td>10%</td>\n</tr>\n</tbody>\n</table>",
        "id": 127006184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527123043
    },
    {
        "content": "<p>I haven't yet, sadly. I fully intend to but getting ready to move is taking more time than I anticipated.</p>",
        "id": 127022500,
        "sender_full_name": "davidtwco",
        "timestamp": 1527157641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've submitted <a href=\"https://github.com/rust-lang/rust/pull/51106\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51106\">https://github.com/rust-lang/rust/pull/51106</a> for #50934. It has a rough implementation of what you described and it builds, but it's failing some tests and I've not had a chance to look into that yet. Apologies for the delay on getting around to this.</p>",
        "id": 127159743,
        "sender_full_name": "davidtwco",
        "timestamp": 1527416351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> thanks! I'll take a look shortly</p>",
        "id": 127199303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527503022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Looking at the current error I'm getting on that PR and I'm struggling to work out the root cause.</p>",
        "id": 127222454,
        "sender_full_name": "davidtwco",
        "timestamp": 1527543877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ok I'll take a look tomorrow</p>",
        "id": 127225864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527551490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I think I'll just have to build it. That said, I think we could optimize this DFS quite a bit (and I can leave a few tips on that if you want). But I don't see an obvious problem yet.</p>",
        "id": 127241604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584170
    },
    {
        "content": "<p>er, maybe I do... I'll leave some comments</p>",
        "id": 127241625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thanks, I'll take a look as  soon as I get a chance.</p>",
        "id": 127241794,
        "sender_full_name": "davidtwco",
        "timestamp": 1527584426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> left a review but I'm not sure if I found the problem per se</p>",
        "id": 127242009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584729
    },
    {
        "content": "<p>interestingly, I was profiling the <code>webrender</code> build and it looks like MIR borrowck is only 4%</p>",
        "id": 127242072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584805
    },
    {
        "content": "<p>but on perf it seems to show significant overhead</p>",
        "id": 127242097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584861
    },
    {
        "content": "<p>maybe we're not measuring the same thing somehow</p>",
        "id": 127242100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527584869
    },
    {
        "content": "<p>Thanks, that's great.</p>",
        "id": 127242101,
        "sender_full_name": "davidtwco",
        "timestamp": 1527584869
    },
    {
        "content": "<p>I had the same issue trying to see what made webrender slow on Friday</p>",
        "id": 127242171,
        "sender_full_name": "lqd",
        "timestamp": 1527584979
    },
    {
        "content": "<p>looking via <code>time</code> I see 20s vs 18s or so... (from a single run) idk</p>",
        "id": 127242495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527585580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed up a commit that addresses those points - not sure what I was thinking when I did the initial implementation, should have been much cleaner.</p>",
        "id": 127262912,
        "sender_full_name": "davidtwco",
        "timestamp": 1527614723
    },
    {
        "content": "<p>Noticed locally that it is still causing that error, but on even more tests.</p>",
        "id": 127262921,
        "sender_full_name": "davidtwco",
        "timestamp": 1527614736
    },
    {
        "content": "<p>I guess that's progress =)</p>",
        "id": 127262996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614807
    },
    {
        "content": "<p>I do think it's possible for this to change behavior, but I would have expected (I think) fewer errors, not more</p>",
        "id": 127263001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614821
    },
    {
        "content": "<p>(or I could imagine it anyway)</p>",
        "id": 127263069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614886
    },
    {
        "content": "<p>I'll try to do a local build I suppose to see what's going on</p>",
        "id": 127263073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527614894
    },
    {
        "content": "<p>It seems like some part of the code after this is expecting there to be more errors than there now are.</p>",
        "id": 127263108,
        "sender_full_name": "davidtwco",
        "timestamp": 1527614960
    },
    {
        "content": "<p>ok. So I could imagine that you end up with a borrow like <code>&amp;'X foo</code> where <code>'X</code> encompasses not only some points reachable from the borrow but also some that are not</p>",
        "id": 127263128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615001
    },
    {
        "content": "<p>and this new code would not include those in the borrow</p>",
        "id": 127263171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615005
    },
    {
        "content": "<p>that said</p>",
        "id": 127263183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615016
    },
    {
        "content": "<p>hmm</p>",
        "id": 127263186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615018
    },
    {
        "content": "<p>I guess I don't think that should change behavior really</p>",
        "id": 127263192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615026
    },
    {
        "content": "<p>will have to investigate</p>",
        "id": 127263197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615034
    },
    {
        "content": "<p>(i.e., because before we would have had a GEN at the borrow, and a KILL when you exit the region, and no subsequent GEN)</p>",
        "id": 127263208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615048
    },
    {
        "content": "<p>I also noticed that on some tests, there were more errors.</p>",
        "id": 127263224,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615070
    },
    {
        "content": "<p>Anecdotally it seemed like that only happened when generators were involved.</p>",
        "id": 127263236,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615091
    },
    {
        "content": "<p>But 90% of the failures were the same error as before.</p>",
        "id": 127263242,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615101
    },
    {
        "content": "<p>interesting ok</p>",
        "id": 127263335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615212
    },
    {
        "content": "<p>I'm just not sure where to start in tracing the effect of the change I'm making through to the region inference code that's failing to try and identify what it is expecting.</p>",
        "id": 127263476,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615380
    },
    {
        "content": "<p>ok, I'm doing a local build â€” but if you want me to take a look faster, posting the output and <code>-Zdump-mir=nll</code> results from a test would help</p>",
        "id": 127263490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/davidtwco/e408a382d1af2822eeacebff93315ff8\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/e408a382d1af2822eeacebff93315ff8\">https://gist.github.com/davidtwco/e408a382d1af2822eeacebff93315ff8</a></p>",
        "id": 127263785,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615785
    },
    {
        "content": "<p>ok, <code>issue-45697.rs</code>is not a generator example :)</p>",
        "id": 127263872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615874
    },
    {
        "content": "<p>No, that's one of the \"couldn't find a constraint to blame\" ones.</p>",
        "id": 127263899,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615937
    },
    {
        "content": "<p>ah, I see. ok</p>",
        "id": 127263948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527615971
    },
    {
        "content": "<p>There's only a handful of generator ones and the rest are like that.</p>",
        "id": 127263955,
        "sender_full_name": "davidtwco",
        "timestamp": 1527615994
    },
    {
        "content": "<p>it might be helpful <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> to include the \"kill locations\" in the mir-dump output</p>",
        "id": 127263980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616041
    },
    {
        "content": "<p>in some form or other</p>",
        "id": 127263989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616063
    },
    {
        "content": "<p>Is that a functionality that exists already?</p>",
        "id": 127264036,
        "sender_full_name": "davidtwco",
        "timestamp": 1527616089
    },
    {
        "content": "<p>is what?</p>",
        "id": 127264054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616114
    },
    {
        "content": "<p>I mean mir-dump exists</p>",
        "id": 127264055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616119
    },
    {
        "content": "<p>we'd have to extend it to include this info</p>",
        "id": 127264059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616124
    },
    {
        "content": "<p>that...could be hard</p>",
        "id": 127264070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616141
    },
    {
        "content": "<p>just because of the way the phasing works out</p>",
        "id": 127264080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616152
    },
    {
        "content": "<p>probably easier would be to dump some info with <code>RUST_LOG</code> for now ;)</p>",
        "id": 127264084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616159
    },
    {
        "content": "<p>tl;dr I'd like to know:</p>\n<ul>\n<li>which borrow it is trying to report an error about and failing</li>\n<li>what the kill locations are that you inferred for this borrow</li>\n</ul>",
        "id": 127264092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616178
    },
    {
        "content": "<p>that said, I have a local build now</p>",
        "id": 127264160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616215
    },
    {
        "content": "<p>Ah, I wasn't sure if there was a flag existing that would output the kill locations with the dump.</p>",
        "id": 127264177,
        "sender_full_name": "davidtwco",
        "timestamp": 1527616237
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 127264242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616370
    },
    {
        "content": "<p>it's ok I'm doing a local build with the <code>debug!</code> I want</p>",
        "id": 127264245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616381
    },
    {
        "content": "<p>man I really want to refactor the borrow check sometimes :)</p>",
        "id": 127264258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616390
    },
    {
        "content": "<p>not exactly sure <em>how</em></p>",
        "id": 127264261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616393
    },
    {
        "content": "<p>I just feel like the code is cruftier than it should be for its age ;)</p>",
        "id": 127264264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616400
    },
    {
        "content": "<p>but we'll wait until polonius is done I guess</p>",
        "id": 127264266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616404
    },
    {
        "content": "<p>in particular i'd love to have really smooth debugging etc :) we have a lot of it...</p>",
        "id": 127264277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616425
    },
    {
        "content": "<p>...but also <code>borrow_check/mod.rs</code> is too big</p>",
        "id": 127264282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527616435
    },
    {
        "content": "<p>Yeah, it's a bit hard to browse without ack or ctags.</p>",
        "id": 127264520,
        "sender_full_name": "davidtwco",
        "timestamp": 1527616758
    },
    {
        "content": "<p>do you mind if I push a few minor things to your branch <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> ?</p>",
        "id": 127264706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617000
    },
    {
        "content": "<p>/me does it anyway</p>",
        "id": 127264714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> go ahead</p>",
        "id": 127264717,
        "sender_full_name": "davidtwco",
        "timestamp": 1527617025
    },
    {
        "content": "<p>so based on the debugging statements I added, I see:</p>",
        "id": 127264722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2018-05-29T18:01:13Z: rustc_mir::dataflow::impls::borrows: borrow bw2 starts at bb0[13]\nDEBUG 2018-05-29T18:01:13Z: rustc_mir::dataflow::impls::borrows: borrow bw2 gets killed at bb1[0]\n</pre></div>",
        "id": 127264766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617059
    },
    {
        "content": "<p>this seems to be the problem: in particular, if you look at the MIR, there ought to be some kills along the non-unwind path</p>",
        "id": 127264771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617074
    },
    {
        "content": "<p>I think your new DFS is a bit <em>too</em> efficient =)</p>",
        "id": 127264778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617098
    },
    {
        "content": "<p>that is, you jump from a location like <code>BB1[2]</code> to <code>BB1[N]</code> where <code>N</code> is the end without visiting the points in between sort of</p>",
        "id": 127264802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617143
    },
    {
        "content": "<p>that may be the problem</p>",
        "id": 127264808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617147
    },
    {
        "content": "<p>Ah!</p>",
        "id": 127264859,
        "sender_full_name": "davidtwco",
        "timestamp": 1527617183
    },
    {
        "content": "<p>That explains why there are more errors.</p>",
        "id": 127264861,
        "sender_full_name": "davidtwco",
        "timestamp": 1527617190
    },
    {
        "content": "<p>I did that before.</p>",
        "id": 127264866,
        "sender_full_name": "davidtwco",
        "timestamp": 1527617195
    },
    {
        "content": "<p>yeah so in this case I think that <code>bb4[1]</code> ought to be a kill point too</p>",
        "id": 127264879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617224
    },
    {
        "content": "<p>since the region in question:</p>\n<div class=\"codehilite\"><pre><span></span>| &#39;_#5r    | {bb0[8..=15], bb2[0..=3], bb3[0..=2], bb4[0]}\n</pre></div>",
        "id": 127264887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617246
    },
    {
        "content": "<p>ends at <code>bb4[0]</code></p>",
        "id": 127264893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617255
    },
    {
        "content": "<p>also, we should add <em>that</em> to the <code>debug!</code> â€” that is, the value of the borrow region</p>",
        "id": 127264896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617263
    },
    {
        "content": "<p>would've been useful</p>",
        "id": 127264902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527617272
    },
    {
        "content": "<p>Building locally with  it visiting each statement and not just the terminators - like it did originally.</p>",
        "id": 127265489,
        "sender_full_name": "davidtwco",
        "timestamp": 1527617875
    },
    {
        "content": "<p>ok</p>",
        "id": 127265690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527618097
    },
    {
        "content": "<p>Seems like with that change, there are even more errors! Well, that's not strictly true, while lots of tests are erroring, it's because the compiler isn't erroring when we expect it to.</p>",
        "id": 127266594,
        "sender_full_name": "davidtwco",
        "timestamp": 1527619127
    },
    {
        "content": "<p>heh:)</p>",
        "id": 127266703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527619260
    },
    {
        "content": "<p>did you push said change?</p>",
        "id": 127266708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527619265
    },
    {
        "content": "<p>Just did.</p>",
        "id": 127266713,
        "sender_full_name": "davidtwco",
        "timestamp": 1527619271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> what's an example test that fails?</p>",
        "id": 127267231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527619935
    },
    {
        "content": "<p><code>drop-may-dangle</code> should fail, it doesn't.</p>",
        "id": 127267241,
        "sender_full_name": "davidtwco",
        "timestamp": 1527619947
    },
    {
        "content": "<p>that is, <code>ui/nll/drop-may-dangle</code>.</p>",
        "id": 127267252,
        "sender_full_name": "davidtwco",
        "timestamp": 1527619966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> actually... I think that test <em>should</em> pass</p>",
        "id": 127267675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527620451
    },
    {
        "content": "<p>note:</p>\n<div class=\"codehilite\"><pre><span></span>// compile-flags:-Zborrowck=mir\n// compile-pass\n</pre></div>",
        "id": 127267687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527620468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Oops, read <code>drop-may-no-dangle</code> wrong.</p>",
        "id": 127267794,
        "sender_full_name": "davidtwco",
        "timestamp": 1527620602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> pushed a few more things, including one bug fix, running tests locally</p>",
        "id": 127268194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527621012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sounds good - sorry about being a bit useless with this one, not sure where my head is at.</p>",
        "id": 127268301,
        "sender_full_name": "davidtwco",
        "timestamp": 1527621175
    },
    {
        "content": "<p>with that fix <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> it passes <code>src/test/ui</code></p>",
        "id": 127268496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527621411
    },
    {
        "content": "<p><code>./x.py test --stage 1 src/test/ui</code></p>",
        "id": 127268503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527621422
    },
    {
        "content": "<p>Oh, great.</p>",
        "id": 127268504,
        "sender_full_name": "davidtwco",
        "timestamp": 1527621423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> I'm going to profile your branch btw</p>",
        "id": 127275755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527630068
    },
    {
        "content": "<p>Awesome - looking forward to seeing how it does.</p>",
        "id": 127275916,
        "sender_full_name": "davidtwco",
        "timestamp": 1527630245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> based on my profiles, that PR seems to drop MIR borrowck from 24% of the total down to 16% â€” <code>kill_loans_out_of_scope_at_location</code> is not visible, and the pre-computation cost <em>seems</em> cheap. I'm doing another build with some <code>#[inline(never)]</code> calls to help me isolate that, but I am hopeful this will be a decent win.</p>",
        "id": 127281917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527639571
    },
    {
        "content": "<p>The big cost seems to be the type check again</p>",
        "id": 127281919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527639581
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>Phase</th>\n<th>Percent of total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MIR Borrowck</td>\n<td>16%</td>\n</tr>\n<tr>\n<td>- Type check</td>\n<td>8%</td>\n</tr>\n<tr>\n<td>- - <code>take_and_reset_obligations</code></td>\n<td>4%</td>\n</tr>\n<tr>\n<td>- Dataflow</td>\n<td>2%</td>\n</tr>\n</tbody>\n</table>",
        "id": 127281985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527639672
    },
    {
        "content": "<p>not sure what the other 6% are yet</p>",
        "id": 127281988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527639678
    },
    {
        "content": "<p>I didn't measure the raw time before/after, which would be useful of course... I'll guess we'll see it from perf though</p>",
        "id": 127282073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527639806
    },
    {
        "content": "<p>Nice.</p>",
        "id": 127292081,
        "sender_full_name": "davidtwco",
        "timestamp": 1527660116
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@David Wood</span> your branch landed, the effects are not yet visible on perf but we should keep our eye on it</p>",
        "id": 127305496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527684008
    },
    {
        "content": "<p>there are however a bunch of new tests on perf â€” it's clear we're not \"out of the woods\" yet I would say</p>",
        "id": 127305503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527684024
    },
    {
        "content": "<p>I saw that it landed.</p>",
        "id": 127306573,
        "sender_full_name": "davidtwco",
        "timestamp": 1527685467
    },
    {
        "content": "<p>here are the <a href=\"http://perf.rust-lang.org/compare.html?start=524ad9b9e03656f3fdeb03ed82fe78db3916e566&amp;end=01aca8254fefbace3ec9fa9de8214cae2f7a07cd&amp;stat=instructions%3Au\" target=\"_blank\" title=\"http://perf.rust-lang.org/compare.html?start=524ad9b9e03656f3fdeb03ed82fe78db3916e566&amp;end=01aca8254fefbace3ec9fa9de8214cae2f7a07cd&amp;stat=instructions%3Au\">perf.rlo results</a> btw</p>",
        "id": 127312213,
        "sender_full_name": "lqd",
        "timestamp": 1527692915
    },
    {
        "content": "<p>oh, nice!</p>",
        "id": 127312228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527692929
    },
    {
        "content": "<p>pretty solid win</p>",
        "id": 127312241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527692946
    },
    {
        "content": "<p>still, the disparate impact (e.g., on webrender etc) shows that we gotta start profiling other crates...</p>",
        "id": 127312263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527692974
    },
    {
        "content": "<p>hmm simulacrum sent another link on discord which is not yet available, that was the initial one on GH ...</p>",
        "id": 127312347,
        "sender_full_name": "lqd",
        "timestamp": 1527693041
    },
    {
        "content": "<p>one is probably from the try run</p>",
        "id": 127312359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693053
    },
    {
        "content": "<p>versus the final merge</p>",
        "id": 127312361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693055
    },
    {
        "content": "<p>interesting that we are still seeing clap-rs be like 50% slower with NLL</p>",
        "id": 127312376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693083
    },
    {
        "content": "<p>oh yes, so this one must be the try build</p>",
        "id": 127312377,
        "sender_full_name": "lqd",
        "timestamp": 1527693084
    },
    {
        "content": "<p>the (NLL - clean) / NLL value is 32%â€” I have to check what %age is <code>borrowck_mir</code></p>",
        "id": 127312384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693098
    },
    {
        "content": "<p>I feel like it was significantly less than that</p>",
        "id": 127312438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693130
    },
    {
        "content": "<p>which indicates some other source of overhead</p>",
        "id": 127312440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693134
    },
    {
        "content": "<p>right, before I posted this:</p>\n<table>\n<thead>\n<tr>\n<th>Phase</th>\n<th>Percent of total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MIR Borrowck</td>\n<td>16%</td>\n</tr>\n<tr>\n<td>- Type check</td>\n<td>8%</td>\n</tr>\n<tr>\n<td>- - <code>take_and_reset_obligations</code></td>\n<td>4%</td>\n</tr>\n<tr>\n<td>- Dataflow</td>\n<td>2%</td>\n</tr>\n</tbody>\n</table>",
        "id": 127312453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693149
    },
    {
        "content": "<p>so where is that other 16%?</p>",
        "id": 127312460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527693156
    },
    {
        "content": "<p>it's interesting that <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span>'s <a href=\"https://github.com/rust-lang/rust/commit/910e29a45b8ffa612340eca1b9eb7fc144a37be1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/910e29a45b8ffa612340eca1b9eb7fc144a37be1\">PR</a> appears to have led to a <a href=\"http://perf.rust-lang.org/compare.html?start=7942022bf75be46e04ffc7874f705076a16da697&amp;end=910e29a45b8ffa612340eca1b9eb7fc144a37be1&amp;stat=instructions:u\" target=\"_blank\" title=\"http://perf.rust-lang.org/compare.html?start=7942022bf75be46e04ffc7874f705076a16da697&amp;end=910e29a45b8ffa612340eca1b9eb7fc144a37be1&amp;stat=instructions:u\">small perf regression</a></p>",
        "id": 127315147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527696223
    },
    {
        "content": "<p>I don't know why exactly that is</p>",
        "id": 127315149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527696227
    },
    {
        "content": "<p>probably not worth worrying about</p>",
        "id": 127315152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527696230
    },
    {
        "content": "<p>Huh, probably caused LLVM to miss some inter-procedural optimizations? That PR also introduced a number of extra DefID/tcx copies so if those weren't eliminated they could explain it. I guess we should remember to fold all that code back together once Polonius borrowck lands properly</p>",
        "id": 127315985,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527697368
    },
    {
        "content": "<p>yeah, maybe something like that. it's prety much in the noise anyway.</p>",
        "id": 127315999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697436
    },
    {
        "content": "<p>I wish a regression like that mattered :)</p>",
        "id": 127316000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697440
    },
    {
        "content": "<p>ah well actually</p>",
        "id": 127316041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697453
    },
    {
        "content": "<p>8% on clap is not nothing</p>",
        "id": 127316042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697456
    },
    {
        "content": "<p>I was looking at the wrong column =)</p>",
        "id": 127316049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697476
    },
    {
        "content": "<p>5% on clap, I guess, 8% on clap-check</p>",
        "id": 127316050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697485
    },
    {
        "content": "<p>either way, maybe worth investigating</p>",
        "id": 127316052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527697488
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 127316074,
        "sender_full_name": "Reed Koser",
        "timestamp": 1527697577
    },
    {
        "content": "<p>btw y'all note the new <a href=\"http://perf.rust-lang.org/nll-dashboard.html\" target=\"_blank\" title=\"http://perf.rust-lang.org/nll-dashboard.html\">http://perf.rust-lang.org/nll-dashboard.html</a> that helps to get a (numeric) picture of how much slower NLL is at any given commit</p>",
        "id": 127336331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527724928
    },
    {
        "content": "<p>seems like we should investigate inflate :)</p>",
        "id": 127336335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527724945
    },
    {
        "content": "<p>What's 1000% among friends</p>",
        "id": 127342328,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527736281
    },
    {
        "content": "<p>while inflate is a special case IIRC, an older version of the crate which contained a lot of macro generated code, some of that overhead must be present in the other benchmarks :)</p>",
        "id": 127346386,
        "sender_full_name": "lqd",
        "timestamp": 1527745130
    },
    {
        "content": "<p>I'll look at its NLL facts later today</p>",
        "id": 127346394,
        "sender_full_name": "lqd",
        "timestamp": 1527745185
    },
    {
        "content": "<p>(oops I don't have a rustc with debuginfo here, making valgrind/callgrind unhappy :3 â€” however there is one slow function in -Ztime-passes: <code>{{impl}}[3]::next_state))</code> which might be interesting to compare with polonius)</p>",
        "id": 127348139,
        "sender_full_name": "lqd",
        "timestamp": 1527748843
    },
    {
        "content": "<p>(so on this terrible machine 1) it's faster with datafrog_opt (I have high variance but seemed like 40%) 2) haven't tried leapfrog yet, 3) this fn passes the location-insensitive analysis, in around a 1/10th of the -Ztime-passes time)</p>",
        "id": 127349630,
        "sender_full_name": "lqd",
        "timestamp": 1527751619
    },
    {
        "content": "<p>interesting, but those two measurements aren't really directly comparable. The <code>-Ztime-passes</code> includes the overhead of MIR typeck etc, which we need regardless â€” that is, polonius only kicks in once it has the facts, but we still have to generate them.</p>",
        "id": 127353338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527758566
    },
    {
        "content": "<p>yeah it was mostly another datapoint because I couldn't profile rustc then :)</p>",
        "id": 127353596,
        "sender_full_name": "lqd",
        "timestamp": 1527759014
    },
    {
        "content": "<p>I've been digging through profiles of clap and I see some stuff to do but not <em>that</em> much. Have to think about if there is a way to radically improve perf of the type-check â€”Â I see about a 12% (of total time) win. Not bad, but we'd need to make a 40% total time win to get it \"as far as before\" (at least on my machine, which does somewhat more evenly than the perf machine for reasons unknown)</p>",
        "id": 127378123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527793344
    },
    {
        "content": "<p>Is this type checking new/unique to NLL world?</p>",
        "id": 127385973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1527804272
    },
    {
        "content": "<p>sort of, yes</p>",
        "id": 127406205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527842094
    },
    {
        "content": "<p>we were doing some limited type-checking on MIR before, but only as a sanity check</p>",
        "id": 127406208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527842105
    },
    {
        "content": "<p>still, this type-checking doesn't have to do the \"hard work\" of other type-checking. I have to dig into what is making it expensive more closely.</p>",
        "id": 127406217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527842128
    },
    {
        "content": "<p>I've been doing some digging; I have to step out now but I see some promising leads I think</p>",
        "id": 127422738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1527868319
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116106\">@Reed Koser</span> (or others) â€” looking a bit more at the profile from clap-rs, I see that <code>access_place</code> is 5% of total time</p>",
        "id": 127613570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221939
    },
    {
        "content": "<p>huh, actually this profile is kinda' weird</p>",
        "id": 127613623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528221978
    },
    {
        "content": "<p>well, ok, some 8% is spent in <code>visit_mir</code> -- what is that I wonder ..</p>",
        "id": 127613648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528222039
    },
    {
        "content": "<p>maybe it is <code>replace_regions_in_mir</code> ?</p>",
        "id": 127613736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528222165
    },
    {
        "content": "<p>/me adds some <code>#[inline(never)]</code></p>",
        "id": 127613742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528222191
    },
    {
        "content": "<p>this branch is...getting long...</p>\n<div class=\"codehilite\"><pre><span></span>Unmerged into rust-lang/master (39)\n04c83ed7f7 nll-perf-examination nikomatsakis/nll-perf-examination replace `LexicalRegionConstraintData` with `QueryRegionConstraint`\n49aa9424e6 extract the handling of region constraints from queries\n66f0ae9531 extract a helper for `make_query_result` that skips canonicalization\n53766377eb move `make_query_response` into method on infcx\n61b2470cbf break canonicalizer into submodules to make it easier to comprehend\ncf156508c5 promote canonical into a module\ned774b1998 align the `type-op` outputs with what canonicalized queries give\ne93fd74df5 mk `fully_perform_op_and_get_region_constraint_data` a TypeOp method\n728a378715 remove the `TypeOp` vs `InfcxTypeOp` distinction\nc461db2690 promote `type_op` into a `mod.rs` file\n9eb1f11e92 introduce `DropckOutlives` type-op\n84cb1929dd make `TypeOp` implement debug instead of carrying a closure\n10e6db0d5b extract a `enabled` helper to remove some ad-hoc conditionals\n56a47a3661 make `TypeOutlives` parameterized over a delegate\n21c511efe9 obligations.rs: rustfmt\nf384a7341f resolve type vars *before* entering `type_must_outlive`\n6109ae6c7f create `InfcxTypeOp` that only depend on an `infcx`\naf508f4f5c make normalize into an op\n3152d8583b let `trivial_noop` take ownership of `self`\n27546cc5a9 make `normalize` take ownership of the thing to be normalized\n4253474fc8 introduce `prove_predicates` type op\nc4fb817e1e introduce `trivial_noop` to accommodate micro-optimizations\n9d0c0711d9 introduce `Eq` type-op\nd42cddc61b introduce `Subtype` type_op\n31fffa05e8 introduce `type_op`\ne35a680d33 use `DUMMY_NODE_ID` as the `body_id` during NLL type-checking\n9fa1f202c7 convert type-check constraints into NLL constraints on the fly\nc1865024e6 rename `Constraint` to `OutlivesConstraint`\ncecf8bb8c3 WIP Region constraint data method name\n2988d98986 WIP region constraint data\ncb8a0f6c52 key drop-data computation by ty, not var\n1258830e83 update some tests affected by some of the prior tweaks\n99edb16fdc cache the `dropck_outlives` computation per variable\n752d850a3e extract out `fully_perform_op_and_get_constraint_constraints`\n820f863122 put the `RegionConstraintData` into an `Rc`\nff5dc41868 librustc_mir/borrow_check/nll/type_check/mod.rs: rustfmt\n50dbbaf04b micro-optimize empty predicate and normalize lists\n82dcf52494 skip `eq_types` and `sub_types` when the two types are equal\na75c924b93 add some instrumentation\n</pre></div>",
        "id": 127773918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528467001
    },
    {
        "content": "<p>/me hopes this works</p>",
        "id": 127773970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528467027
    },
    {
        "content": "<p>Poor reviewer</p>",
        "id": 127776559,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1528470364
    },
    {
        "content": "<p>I'll make it easy for them. Just r+ it already.</p>",
        "id": 127776613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528470428
    },
    {
        "content": "<p>Each step is quite self-contained, but it's a big transformation... I guess I could probably land some of these intermediate steps.</p>",
        "id": 127776624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528470452
    },
    {
        "content": "<p>not an obvious win though</p>",
        "id": 127776630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528470459
    },
    {
        "content": "<p>The perf results of my branch that adds a lot more caching are <a href=\"https://github.com/rust-lang/rust/pull/51538#issuecomment-397283915\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51538#issuecomment-397283915\">here</a> â€”Â pretty decent. Worth landing on its own, though not yet as good as I hoped. That said, that branch has some pretty inefficient conversions of data back and forth that I hope to eliminate...</p>\n<ul>\n<li><a href=\"http://perf.rust-lang.org/compare.html?start=cd1105437cd433c12ae5132c9632e01d387b2384&amp;end=adbbd12ea685afa27f98c032745585bb98f42e81&amp;stat=instructions%3Au\" target=\"_blank\" title=\"http://perf.rust-lang.org/compare.html?start=cd1105437cd433c12ae5132c9632e01d387b2384&amp;end=adbbd12ea685afa27f98c032745585bb98f42e81&amp;stat=instructions%3Au\">Comparison</a></li>\n<li>Dashboard: <a href=\"http://perf.rust-lang.org/nll-dashboard.html?commit=cd1105437cd433c12ae5132c9632e01d387b2384&amp;stat=instructions%3Au\" target=\"_blank\" title=\"http://perf.rust-lang.org/nll-dashboard.html?commit=cd1105437cd433c12ae5132c9632e01d387b2384&amp;stat=instructions%3Au\">before</a>, <a href=\"http://perf.rust-lang.org/nll-dashboard.html?commit=adbbd12ea685afa27f98c032745585bb98f42e81&amp;stat=instructions%3Au\" target=\"_blank\" title=\"http://perf.rust-lang.org/nll-dashboard.html?commit=adbbd12ea685afa27f98c032745585bb98f42e81&amp;stat=instructions%3Au\">after</a></li>\n</ul>",
        "id": 128063062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528980891
    },
    {
        "content": "<p>it's interesting though to look at the ones where this didn't help <em>at all</em> â€” e.g., <code>syn</code></p>",
        "id": 128063237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528981150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> it may be worth revisiting the profile of <code>syn</code></p>",
        "id": 128063254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528981181
    },
    {
        "content": "<p>not sure if <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> logged some notes on that, i'll have to check later</p>",
        "id": 128063264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528981196
    },
    {
        "content": "<p>I don't think they did yet, according to the <a href=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/NLL-Performance-Tracking-Doc-dRlUMiWT8eexf80FTrYj8\">Paper document</a></p>",
        "id": 128063362,
        "sender_full_name": "lqd",
        "timestamp": 1528981294
    },
    {
        "content": "<p>hey, sorry, notes about what?</p>",
        "id": 128065803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528984531
    },
    {
        "content": "<p>about <code>syn</code>?</p>",
        "id": 128065875,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528984590
    },
    {
        "content": "<p>yes</p>",
        "id": 128066621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528985500
    },
    {
        "content": "<p>I can build that</p>",
        "id": 128071162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528991478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux syn (master)]$ perf focus &#39;{do_mir_borrowck}&#39; --tree-callees --tree-min-percent 3\nMatcher    : {do_mir_borrowck}\nMatches    : 40\nNot Matches: 173\nPercentage : 18%\n\nTree\n| matched `{do_mir_borrowck}` (18% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (14% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check (13% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::type_check_internal (13% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::type_check::_$u7b$$u7b$closure$u7d$$u7d$::hf6df3047d9ec27be (9% total, 0% self)\n: : : : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (9% total, 0% self)\n: : : : : : | rustc_mir::borrow_check::nll::type_check::TypeChecker::fully_perform_op (7% total, 0% self)\n: : : : : : : | rustc::infer::InferCtxt::commit_if_ok (5% total, 0% self)\n: : : : : : : : | rustc::traits::query::dropck_outlives::&lt;impl rustc::infer::at::At&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;&gt;::dropck_outlives (3% total, 0% self)\n</pre></div>",
        "id": 128071548,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528991967
    },
    {
        "content": "<p>have updated the doc</p>",
        "id": 128071997,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528992538
    },
    {
        "content": "<p>btw, using a rustc build from june 6th</p>",
        "id": 128072005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528992555
    },
    {
        "content": "<p>I can update if something important has happened</p>",
        "id": 128072012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528992567
    },
    {
        "content": "<p>btw, have updated this thing and ran again</p>",
        "id": 128074872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Matcher    : {do_mir_borrowck}\nMatches    : 45\nNot Matches: 145\nPercentage : 23%\n\nTree\n| matched `{do_mir_borrowck}` (23% total, 0% self)\n: | rustc_mir::borrow_check::nll::compute_regions (17% total, 0% self)\n: : | rustc_mir::borrow_check::nll::type_check::type_check (14% total, 0% self)\n: : : | rustc_mir::borrow_check::nll::type_check::type_check_internal (14% total, 0% self)\n: : : : | rustc_mir::borrow_check::nll::type_check::type_check::_$u7b$$u7b$closure$u7d$$u7d$::hf6df3047d9ec27be (12% total, 0% self)\n: : : : : | rustc_mir::borrow_check::nll::type_check::liveness::generate (12% total, 0% self)\n: : : : : : | rustc_mir::borrow_check::nll::type_check::TypeChecker::fully_perform_op (9% total, 1% self)\n: : : : : : : | rustc::infer::InferCtxt::commit_if_ok (7% total, 0% self)\n: : : : : : : : | rustc::traits::query::dropck_outlives::&lt;impl rustc::infer::at::At&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;&gt;::dropck_outlives (5% total, 0% self)\n: : : : : : : : : | rustc::infer::canonical::&lt;impl rustc::infer::InferCtxt&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;&gt;::instantiate_query_result (3% total, 0% self)\n</pre></div>",
        "id": 128074876,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996381
    },
    {
        "content": "<p>5% worser since june 6th</p>",
        "id": 128074883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996394
    },
    {
        "content": "<p>unsure about the standard deviation of what we are running</p>",
        "id": 128074896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996427
    },
    {
        "content": "<p>thanks!</p>",
        "id": 128074936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996443
    },
    {
        "content": "<p>should I run this several times and take an average?</p>",
        "id": 128074940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996444
    },
    {
        "content": "<p>nah</p>",
        "id": 128074941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996447
    },
    {
        "content": "<p>it looks fairly consistent</p>",
        "id": 128074945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996453
    },
    {
        "content": "<p>is it 5% worser for real?</p>",
        "id": 128074947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996459
    },
    {
        "content": "<p>interesting result</p>",
        "id": 128074956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996474
    },
    {
        "content": "<p>going to update the doc with the new date</p>",
        "id": 128074961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996484
    },
    {
        "content": "<p>I don't know? I don't really care :)</p>",
        "id": 128074963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996487
    },
    {
        "content": "<p>ok</p>",
        "id": 128074965,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996492
    },
    {
        "content": "<p>I'm mostly interested in which parts of MIR borrowck</p>",
        "id": 128074969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996495
    },
    {
        "content": "<p>should I update the doc?</p>",
        "id": 128074970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996496
    },
    {
        "content": "<p>it is spending time in</p>",
        "id": 128074975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996501
    },
    {
        "content": "<p>I guess, I think it is not 5% worse</p>",
        "id": 128074988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996507
    },
    {
        "content": "<p>based on perf</p>",
        "id": 128074992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996514
    },
    {
        "content": "<p>yeah, I meant, I've already added june 6th results</p>",
        "id": 128075003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996527
    },
    {
        "content": "<p>do you prefer today's ones?</p>",
        "id": 128075008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996533
    },
    {
        "content": "<p>either is fine</p>",
        "id": 128075014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996541
    },
    {
        "content": "<p>ok</p>",
        "id": 128075020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996548
    },
    {
        "content": "<p>will leave as is then</p>",
        "id": 128075023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1528996551
    },
    {
        "content": "<p>they suggest that <code>dropck_outlives</code> is the big thing</p>",
        "id": 128075080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996580
    },
    {
        "content": "<p>which is interesting</p>",
        "id": 128075082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996582
    },
    {
        "content": "<p>but consistent with prior profiles of syn that I did</p>",
        "id": 128075085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996590
    },
    {
        "content": "<p>I am interested b/c i might've expected my branch to have more impact on that</p>",
        "id": 128075092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1528996603
    },
    {
        "content": "<p>I'm not seeing <code>dropck_outlives</code> with callgrind on <code>syn</code>(0.57% total, 0.15% self)</p>",
        "id": 128087770,
        "sender_full_name": "lqd",
        "timestamp": 1529012008
    },
    {
        "content": "<p>interesting</p>",
        "id": 128087885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012154
    },
    {
        "content": "<p>and the \"biggest\" NLL item that shows up by itself (there's a big cycle that is hard to untangle and understand) is the liveness::generate but only 4.5% total, 2% self</p>",
        "id": 128087939,
        "sender_full_name": "lqd",
        "timestamp": 1529012189
    },
    {
        "content": "<p>ok</p>",
        "id": 128087956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012228
    },
    {
        "content": "<p>NLL doesn't seem to be a whole lot worse than clean on syn</p>",
        "id": 128088033,
        "sender_full_name": "lqd",
        "timestamp": 1529012307
    },
    {
        "content": "<p>...huh.</p>",
        "id": 128088133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012421
    },
    {
        "content": "<p>ok</p>",
        "id": 128088135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012424
    },
    {
        "content": "<p>perf seems to think it's ~150%</p>",
        "id": 128088142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012435
    },
    {
        "content": "<p>for check right ?</p>",
        "id": 128088146,
        "sender_full_name": "lqd",
        "timestamp": 1529012460
    },
    {
        "content": "<p>on the compare page, for regular syn (non check) it's 13B to 16B, like 20%</p>",
        "id": 128088181,
        "sender_full_name": "lqd",
        "timestamp": 1529012517
    },
    {
        "content": "<p>with NLL being lower than the baseline incr</p>",
        "id": 128088236,
        "sender_full_name": "lqd",
        "timestamp": 1529012569
    },
    {
        "content": "<p>to be clear, I was looking at the regular non-check build, which is maybe not what niko and santiago were looking at (an maybe not that useful...)</p>",
        "id": 128088342,
        "sender_full_name": "lqd",
        "timestamp": 1529012704
    },
    {
        "content": "<p>I'll get the numbers for the check profile :)</p>",
        "id": 128088448,
        "sender_full_name": "lqd",
        "timestamp": 1529012832
    },
    {
        "content": "<blockquote>\n<p>for check right ?</p>\n</blockquote>\n<p>yes, check</p>",
        "id": 128088456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529012851
    },
    {
        "content": "<p>my branch I think is roughly ready to land. It seems to be a solid win but not totally transformative :( In that branch, typeck for clap is down to 7% though, and I see some further possible gains. (In comparison to 22% before). Total MIR time goes from 49% to 39%</p>",
        "id": 128475100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529677252
    },
    {
        "content": "<p>I just wanted to get to 0% ;)</p>",
        "id": 128475104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529677261
    },
    {
        "content": "<p>(there is still some cleanup work to do after that on the branch, in particular I think that an earlier PR of mine broke the <code>futures</code> crate when used with NLL, but I may put off the fix until a follow-up PR)</p>",
        "id": 128475114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529677293
    },
    {
        "content": "<p>do we know if the MIR walks we're still doing are expensive ? and if we're maybe MIRwalking too much ?</p>",
        "id": 128475377,
        "sender_full_name": "lqd",
        "timestamp": 1529677681
    },
    {
        "content": "<p>this is a graph of the time spent in MIR borrowck</p>",
        "id": 128477038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679782
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/4f4d962f906bffcc6d142838b5ef9f19\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/4f4d962f906bffcc6d142838b5ef9f19\">https://gist.github.com/nikomatsakis/4f4d962f906bffcc6d142838b5ef9f19</a></p>",
        "id": 128477042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679783
    },
    {
        "content": "<p>though it takes some time to learn how to interpret it</p>",
        "id": 128477047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679789
    },
    {
        "content": "<p>each percentage is an <strong>absolute figure</strong> of total execution time</p>",
        "id": 128477050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679795
    },
    {
        "content": "<p>and the labels on edges are the number of times that such an edge exists</p>",
        "id": 128477053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679801
    },
    {
        "content": "<p>it is not complete, just the top N functions</p>",
        "id": 128477055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679808
    },
    {
        "content": "<p>(this is the output of <code>--graph-callees</code> from perf-focus)</p>",
        "id": 128477059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679817
    },
    {
        "content": "<p>you can see that e.g. <code>visit_statement_entry</code> is 8%</p>",
        "id": 128477064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679838
    },
    {
        "content": "<p>a lot of which is <code>mutate_place</code> and <code>access_place</code></p>",
        "id": 128477106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> (I'm not sure if that includes your branch or not)</p>",
        "id": 128477144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529679924
    },
    {
        "content": "<p>nice graph :)</p>",
        "id": 128477199,
        "sender_full_name": "lqd",
        "timestamp": 1529679970
    },
    {
        "content": "<p>the 2 _place functions look interesting indeed</p>",
        "id": 128477460,
        "sender_full_name": "lqd",
        "timestamp": 1529680332
    },
    {
        "content": "<p>I was also wondering whether -Z two phase borrows had some speed implications (as IIRC perf.rlo only uses the MIR borrowck flag)</p>",
        "id": 128477550,
        "sender_full_name": "lqd",
        "timestamp": 1529680476
    },
    {
        "content": "<p>we should probably fix it; but I doubt it will have much impact</p>",
        "id": 128502989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1529717631
    }
]