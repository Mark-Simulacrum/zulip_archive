[
    {
        "content": "<p>I think a <code>#[ffi_no_unwind]</code> attribute for FFI declarations only would be ok</p>",
        "id": 178927599,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902335
    },
    {
        "content": "<p>For <code>extern \"C\" fn foo() { ... }</code> definitions in Rust, the attribute should not be necessary</p>",
        "id": 178927616,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902355
    },
    {
        "content": "<p>Since the compiler should be able to properly deduce whether that function can or cannot be <code>nounwind</code></p>",
        "id": 178927626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902370
    },
    {
        "content": "<p>Semantically, those who want to make those <code>extern \"C\"</code> Rust definitions <code>abort</code> can already do so by just using <code>catch_unwind</code>, so while we could add a \"proc macro\" that does it for them, it shouldn't be necessary for an MVP</p>",
        "id": 178927891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902646
    },
    {
        "content": "<p>The MVP could just be \"unwinding from <code>extern \"C\"</code> is ok, and for <code>extern \"C\"</code> declarations only there is a <code>#[ffi_no_unwind]</code> attribute that you can use.\"</p>",
        "id": 178927961,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902686
    },
    {
        "content": "<p>The \"unwinding from <code>extern \"C\"</code> is ok\" guarantee could be worded carefully, to say that it unwinds with a platform unwind, meaning that we on paper \"translate\" a Rust unwind to a platform unwind, so that this does not stabilize nor constrain the Rust unwind implementation details.</p>",
        "id": 178927994,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571902759
    }
]