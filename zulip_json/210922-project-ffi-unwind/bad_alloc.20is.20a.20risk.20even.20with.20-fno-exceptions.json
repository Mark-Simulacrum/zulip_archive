[
    {
        "content": "<p>in the lang team meeting, I mentioned that you'll likely get a C++ compiler error if you try compiling exception-throwing code with <code>-fno-exceptions</code>. apparently <code>bad_alloc</code> is a big exception to this: the <code>new</code> constructor that raises that exception is typically compiled into <code>libstdc++</code>, which on most platforms is compiled with exceptions. so even if the user's library is compiled with <code>-fno-exceptions</code>, allocation will still potentially throw <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 190753254,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584378915
    },
    {
        "content": "<p>I think this further pushes my preference in the direction of whichever proposal makes FFI unwinding support more easily pervasive. between the libc functions unwinding due to <code>pthread_cancel</code>, and <code>bad_alloc</code> coming even from C++ <code>-fno-exceptions</code>, foreign code that is truly nounwind is seeming increasingly rare</p>",
        "id": 190753730,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584379103
    },
    {
        "content": "<p>and right now I think the proposal that best fits this is no. 3 since it would not require changing the types of definitions in existing libraries to add unwinding support</p>",
        "id": 190753859,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584379167
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 190754543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584379477
    },
    {
        "content": "<p>In my experience, failure to allocate storage isn't all that common in modern systems -- there's usually something seriously wrong if that happens.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190753859\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190753859\">said</a>:</p>\n<blockquote>\n<p>and right now I think the proposal that best fits this is no. 3 since it would not require changing the types of definitions in existing libraries to add unwinding support</p>\n</blockquote>\n<p>Is this about libraries that were making incorrect assumptions about <code>extern \"C\"</code>?</p>",
        "id": 190755081,
        "sender_full_name": "centril",
        "timestamp": 1584379705
    },
    {
        "content": "<p>that's right, I'm thinking about all the cancellation points listed in <code>pthreads(7)</code> in particular</p>",
        "id": 190755388,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584379819
    },
    {
        "content": "<p>To me it's not a priority to retcon code that previously had UB/were unsound as having defined behavior</p>",
        "id": 190755617,
        "sender_full_name": "centril",
        "timestamp": 1584379922
    },
    {
        "content": "<p>I'm curious what the path forward would be then for libraries like <code>libc</code>. I remember hearing some mentions of just explicitly declaring <code>pthread_cancel</code> to be generally incompatible with Rust, but otherwise it seems like proposals 1 &amp; 2 would require changing a number of ABIs to <code>\"C unwind\"</code></p>",
        "id": 190756186,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584380087
    },
    {
        "content": "<p>I don't think there's a fundamental reason that couldn't be done, but it seems potentially quite disruptive</p>",
        "id": 190756304,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584380140
    },
    {
        "content": "<p>the <code>libc</code> crate can start using <code>\"C unwind\"</code> for the functions required; if the maintainers of that crate insist that they cannot do that as it would require a semver bump then they can use conditional compilation to use <code>\"C unwind\"</code> on newer compilers.</p>",
        "id": 190756675,
        "sender_full_name": "centril",
        "timestamp": 1584380320
    },
    {
        "content": "<p>at any rate, on older and current compilers we emit <code>nounwind</code>, so it's not like it was sound before</p>",
        "id": 190756719,
        "sender_full_name": "centril",
        "timestamp": 1584380339
    },
    {
        "content": "<p>Cancellation points are forced exceptions, so the rules are different for them: you can have forced exceptions from <code>extern \"C\"</code> as long as you make sure you have no destructors in the unwound frames.</p>",
        "id": 190757152,
        "sender_full_name": "Amanieu",
        "timestamp": 1584380547
    },
    {
        "content": "<p>So there would be no need to change the libc definitions (which would be a breaking change anyways)</p>",
        "id": 190757201,
        "sender_full_name": "Amanieu",
        "timestamp": 1584380570
    },
    {
        "content": "<p>I think in practice a lot of existing code that calls those APIs would run afoul of the no-destructor requirement, but it is good to know that there is a subset that will work fine as-is</p>",
        "id": 190757362,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584380662
    },
    {
        "content": "<p>to be explicit about my thinking here, I don't think any of these points are existential problems with proposals 1 &amp; 2, they just contribute to an overall impression of friction that I get with the split-ABIs vs proposal 3. I should also be explicit this concern comes from my personal language design aesthetics, as opposed to what our project at Fastly requires. any of the proposals currently described would be suitable for us</p>",
        "id": 190757581,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584380780
    },
    {
        "content": "<p>I haven't been opining much, but for future reference all opinions I give are based exclusively on (as <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> put it) \"my personal language design aesthetics\"; I personally don't actually have any projects that rely on FFI unwinding at the moment.</p>",
        "id": 190759355,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584381618
    },
    {
        "content": "<p>One thing we didn't do at the end of the meeting,</p>",
        "id": 190884197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466350
    },
    {
        "content": "<p>and I was sort of regretting it,</p>",
        "id": 190884199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466353
    },
    {
        "content": "<p>is to kind of do a \"round robin\" to get a take on where everybody \"stood\" in terms of what they'd prefer at that moment</p>",
        "id": 190884235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466369
    },
    {
        "content": "<p>...I think it's a useful thing we should do more often...</p>",
        "id": 190884245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466374
    },
    {
        "content": "<p>...though I partly feel like I haven't quite formed my opinion yet. I'm trying to find the \"hook\" that would put me on one side or another.</p>",
        "id": 190884299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466399
    },
    {
        "content": "<p>I feel like it'd be useful for folks with an opinion to lay out which factors they find most important that pushed them to one side or the other, as <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> did -- i.e., kind of summarize what you see as the crux of the case and what pushes you to one side</p>",
        "id": 190884466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466459
    },
    {
        "content": "<p><del>one other clarification that I was thinking about</del> (never mind, I was confused)</p>",
        "id": 190884477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584466464
    },
    {
        "content": "<p>that sounds good as long as we're explicit that it's not a decision-making vote, but just a chance to see where we are relative to a consensus position. I'd be happy to type up more of my thoughts on why I'm personally leaning toward proposal 3</p>",
        "id": 190889810,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584468804
    },
    {
        "content": "<p>yep, I see this as more of a \"where we currently stand and why\"</p>",
        "id": 190913319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584480640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190884197\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190884197\">said</a>:</p>\n<blockquote>\n<p>One thing we didn't do at the end of the meeting,</p>\n</blockquote>\n<p>I thought we agreed to do that offline, i.e. the \"straw poll\" discussion. It seems <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> is opposed on principle,  though, unless I'm misunderstanding.</p>",
        "id": 190916388,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584482371
    },
    {
        "content": "<p>Or did you think it would be better to just get verbal responses, synchronously?</p>",
        "id": 190916493,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584482419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>  I'm fine with straw polls on Zulip, although the decision is T-Lang's, but I don't like large straw polls on github</p>",
        "id": 190967288,
        "sender_full_name": "centril",
        "timestamp": 1584531044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190916388\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/bad_alloc.20is.20a.20risk.20even.20with.20-fno-exceptions/near/190916388\">said</a>:</p>\n<blockquote>\n<p>I thought we agreed to do that offline, i.e. the \"straw poll\" discussion. It seems <span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> is opposed on principle,  though, unless I'm misunderstanding.</p>\n</blockquote>\n<p>yeah, we did, though I think I'd prefer to see a bit more detailed thoughts, and I just think that in general there is value in make sure we actively hear from the folks in the room. I've found that the \"quiet people\" often have interesting things to say, and they may or may not speak up in the async case ...</p>",
        "id": 190982498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539641
    },
    {
        "content": "<p>POI: on embedded systems and standard C++ libraries written for that purpose using <code>-fno-exceptions</code> actually does what you’d expect, even in presence of memory allocation failures (which in turn are possible and likely there)</p>",
        "id": 191036737,
        "sender_full_name": "nagisa",
        "timestamp": 1584562952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Could you be more explicit? I'm not actually sure what I'd expect!</p>",
        "id": 191038447,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584563739
    },
    {
        "content": "<p>It does not generate any code to unwind. I don’t remember what exact behaviour it was, but IIRC it just behaved like <code>new(nothrow)</code>, i.e. returned a <code>nullptr</code>.</p>",
        "id": 191040416,
        "sender_full_name": "nagisa",
        "timestamp": 1584564653
    },
    {
        "content": "<p>Ah, okay. Thanks.</p>",
        "id": 191040504,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584564708
    },
    {
        "content": "<p>You get this with -fno-exceptions:</p>\n<div class=\"codehilite\"><pre><span></span>terminate called after throwing an instance of &#39;std::bad_alloc&#39;\n  what():  std::bad_alloc\n</pre></div>",
        "id": 191049491,
        "sender_full_name": "Amanieu",
        "timestamp": 1584569567
    },
    {
        "content": "<p>(with libstdc++)</p>",
        "id": 191049540,
        "sender_full_name": "Amanieu",
        "timestamp": 1584569606
    },
    {
        "content": "<p>Now obviously if you recompile libstdc++ itself with -fno-exceptions then you'll just get a direct abort instead.</p>",
        "id": 191049562,
        "sender_full_name": "Amanieu",
        "timestamp": 1584569627
    },
    {
        "content": "<p>So, in that case, it sounds like <code>libstdc++</code> compiled with <code>-fexceptions</code>, linked against Rust using our \"strategy 2\" (with the new ABI) that calls C++ code via <code>extern \"C\"</code> (the old ABI), <em>would</em> have undefined behavior if that C++ code has a failed allocation.</p>",
        "id": 191051424,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584570908
    },
    {
        "content": "<p>Yes, however keep in mind that the practical effect of such UB is actually quite limited in practice: it will usually just terminate the program since it can't find an exception handler.</p>",
        "id": 191051950,
        "sender_full_name": "Amanieu",
        "timestamp": 1584571282
    },
    {
        "content": "<p>That sounds rather friendly</p>",
        "id": 191052063,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584571366
    }
]