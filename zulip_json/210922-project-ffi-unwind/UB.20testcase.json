[
    {
        "content": "<p>Could someone please confirm that <a href=\"https://github.com/rust-lang/miri/issues/1740\">https://github.com/rust-lang/miri/issues/1740</a> is indeed an example of UB under the ffi-unwind RFC, and as such should be detected by Miri?</p>",
        "id": 229810993,
        "sender_full_name": "RalfJ",
        "timestamp": 1615450751
    },
    {
        "content": "<p>Hm, can you clarify which example? Unwinding from \"C\" functions indeed will be UB, I believe- unwind(allowed) I wouldn't expect to change that, and would expect for it to go away soon.</p>",
        "id": 229840236,
        "sender_full_name": "simulacrum",
        "timestamp": 1615465796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <code>#[unwind(allowed)]</code> makes unwinding not UB. It has the same effect as <code>extern \"C-unwind\"</code> but will be phased out in favor of the latter.</p>",
        "id": 229843738,
        "sender_full_name": "Amanieu",
        "timestamp": 1615467616
    },
    {
        "content": "<p>Hm, do we store it into metadata? For some reason I didn't recall us doing so, but good to know if it does.</p>",
        "id": 229846520,
        "sender_full_name": "simulacrum",
        "timestamp": 1615468908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/229843738\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <code>#[unwind(allowed)]</code> makes unwinding not UB.</p>\n</blockquote>\n<p>I see, thanks.</p>",
        "id": 230152665,
        "sender_full_name": "RalfJ",
        "timestamp": 1615629919
    },
    {
        "content": "<p>Hm, but it still seems to be UB with <code>-C panic=abort</code></p>",
        "id": 230152672,
        "sender_full_name": "RalfJ",
        "timestamp": 1615629928
    },
    {
        "content": "<p>Correct.</p>",
        "id": 230170493,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615650518
    },
    {
        "content": "<p>If that is intended to stay that way, we should probably update the unwinding UB in <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">https://doc.rust-lang.org/reference/behavior-considered-undefined.html</a></p>",
        "id": 230173332,
        "sender_full_name": "RalfJ",
        "timestamp": 1615652740
    },
    {
        "content": "<p>looks like the ways to cause UB are</p>\n<ul>\n<li>calling a function with a on-unwinding caller ABI, and that fn unwinds (this is possible even with the abort-on-panic shims when function pointers are cast around)</li>\n<li>calling any unwinding function with <code>-C panic=abort</code></li>\n</ul>",
        "id": 230173527,
        "sender_full_name": "RalfJ",
        "timestamp": 1615652969
    },
    {
        "content": "<p>doesn't the latter make things like the Rust lua wrappers unsound with <code>-C panic=abort</code>? That seems like a footgun</p>",
        "id": 230173536,
        "sender_full_name": "RalfJ",
        "timestamp": 1615652994
    },
    {
        "content": "<p>Lua wrappers are force-unwound or longjmp'd over, I think.</p>",
        "id": 230173805,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615653213
    },
    {
        "content": "<p>Force-unwinding should not be UB, I think, but I need to check the RFC again to be sure that's explicit.</p>",
        "id": 230173862,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615653253
    },
    {
        "content": "<p>Is unwinding in <code>panic=abort</code> possible in pure Rust, or does it require FFI somewhere?</p>",
        "id": 230173953,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615653337
    },
    {
        "content": "<p>(I have been assuming the latter)</p>",
        "id": 230174307,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615653723
    },
    {
        "content": "<p>okay maybe lua is a bad example</p>",
        "id": 230179818,
        "sender_full_name": "RalfJ",
        "timestamp": 1615659655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/230173953\">said</a>:</p>\n<blockquote>\n<p>Is unwinding in <code>panic=abort</code> possible in pure Rust, or does it require FFI somewhere?</p>\n</blockquote>\n<p>it requires FFI, but that's the point -- how do I write a safe Rust wrapper around FFI that can unwind?</p>",
        "id": 230179830,
        "sender_full_name": "RalfJ",
        "timestamp": 1615659669
    },
    {
        "content": "<p>looks like that is impossible since if someone uses my safe wrapper with <code>-C panic=abort</code>, we have UB</p>",
        "id": 230179863,
        "sender_full_name": "RalfJ",
        "timestamp": 1615659685
    },
    {
        "content": "<p>The plan is for <code>extern \"C-unwind\"</code> to catch foreign unwinds and turn them into aborts when building with <code>panic=abort</code>.</p>",
        "id": 230184051,
        "sender_full_name": "Amanieu",
        "timestamp": 1615664171
    },
    {
        "content": "<p>I'm not sure what the current behavior is.</p>",
        "id": 230184068,
        "sender_full_name": "Amanieu",
        "timestamp": 1615664183
    },
    {
        "content": "<p>That should indeed be the current behavior; the only problem is that the ABI is behind a feature gate.</p>",
        "id": 230185489,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615665723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/230184051\">said</a>:</p>\n<blockquote>\n<p>The plan is for <code>extern \"C-unwind\"</code> to catch foreign unwinds and turn them into aborts when building with <code>panic=abort</code>.</p>\n</blockquote>\n<p>opened a soundness issue for that <a href=\"https://github.com/rust-lang/rust/issues/83116\">https://github.com/rust-lang/rust/issues/83116</a></p>",
        "id": 230246784,
        "sender_full_name": "RalfJ",
        "timestamp": 1615737382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/230185489\">said</a>:</p>\n<blockquote>\n<p>That should indeed be the current behavior; the only problem is that the ABI is behind a feature gate.</p>\n</blockquote>\n<p>I cannot see any trace of such an abort-to-unwind wrapper in the LLVM IR for that issue, am I looking at the wrong place?</p>",
        "id": 230246797,
        "sender_full_name": "RalfJ",
        "timestamp": 1615737409
    },
    {
        "content": "<p>That appears to be an oversight, then. <span class=\"user-mention\" data-user-id=\"257364\">@Katelyn Martin</span>, we won't be able to stabilize <code>\"C-unwind\"</code> without that feature, but I don't know how to implement it or whether we have anything similar already in the compiler.</p>",
        "id": 230257531,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615744630
    },
    {
        "content": "<p>Wait, I'm trying to remember now -- were we going to put those wrappers <em>all the time</em>? Wasn't it the case that you can force-unwind over a frame with no dtors, at least?</p>",
        "id": 231140848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239923
    },
    {
        "content": "<p>presumably the RFC has the details though</p>",
        "id": 231140860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239929
    },
    {
        "content": "<p>It should be possible to abort on regular unwinds, but still allow forced-unwinds I think.</p>",
        "id": 231140916,
        "sender_full_name": "bjorn3",
        "timestamp": 1616240016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/231140848\">said</a>:</p>\n<blockquote>\n<p>Wait, I'm trying to remember now -- were we going to put those wrappers <em>all the time</em>? Wasn't it the case that you can force-unwind over a frame with no dtors, at least?</p>\n</blockquote>\n<p>What are the LLVM rules for force-unwinding out of a function call marked <code>nounwind</code>?<br>\nIf LLVM says this is UB, then we have the same UB in Rust, since with panic=abort we add <code>nounwind</code> basically everywhere.</p>",
        "id": 231146397,
        "sender_full_name": "RalfJ",
        "timestamp": 1616246688
    },
    {
        "content": "<p>C code <code>longjmp</code>s over <code>nounwind</code> frames all the time. So I assume it is allowed.</p>",
        "id": 231150354,
        "sender_full_name": "Amanieu",
        "timestamp": 1616251404
    },
    {
        "content": "<p>force-unwind is longjmp, right?</p>",
        "id": 231150356,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616251405
    },
    {
        "content": "<p>Yeah, I believe C++ noexcept gets turned into nouwind as well, so same thing there.</p>",
        "id": 231150376,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616251436
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/597Psh\">https://godbolt.org/z/597Psh</a><br>\nAccording to this CE build, it does. And in fact, <code>longjmp</code>itself is <code>nouwind</code>, so I think its safe to assume that <code>longjmp</code>ing out of a <code>nounwind</code> function is not UB in llvm.</p>",
        "id": 231150707,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616251759
    },
    {
        "content": "<p><code>longjmp</code> is only implemented as force-unwind on Windows. On all other platforms it simply restores all registers and the signal handler state. Force-unwinding uses the DWARF/SEH unwinding tables to unwind the stack and run destructors like with regular unwinding, except that it can't be catched. <code>nounwind</code> would cause the compiler to omit the destructors, but it will still emit the unwinding tables necessary for force-unwinding I think.</p>",
        "id": 231153656,
        "sender_full_name": "bjorn3",
        "timestamp": 1616255130
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/14268080/cancelling-a-thread-that-has-a-mutex-locked-does-not-unlock-the-mutex\">https://stackoverflow.com/questions/14268080/cancelling-a-thread-that-has-a-mutex-locked-does-not-unlock-the-mutex</a></p>\n<blockquote>\n<p>On GNU/Linux pthread_cancel is implemented with a special exception of type __cxxabi::__forced_unwind, so when a thread is cancelled an exception is thrown and the stack is unwound. If a mutex is locked by an RAII type then its destructor will be guaranteed to run if the stack is unwound by a __forced_unwind exception.</p>\n</blockquote>",
        "id": 231153717,
        "sender_full_name": "bjorn3",
        "timestamp": 1616255182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/231153656\">said</a>:</p>\n<blockquote>\n<p><code>nounwind</code> would cause the compiler to omit the destructors, but it will still emit the unwinding tables necessary for force-unwinding I think.</p>\n</blockquote>\n<p>cc <a href=\"https://github.com/rust-lang/rust/issues/69984\">#69984</a></p>",
        "id": 231156023,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616257805
    },
    {
        "content": "<p><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\">https://bugzilla.mozilla.org/show_bug.cgi?id=1302078</a>, the link mentioned in the comment around <code>must_emit_unwind_tables</code> in <a href=\"https://github.com/rust-lang/rust/issues/69984\">#69984</a>, looks also relevant.</p>",
        "id": 231157886,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616259819
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231160005,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616262054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/231153717\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/14268080/cancelling-a-thread-that-has-a-mutex-locked-does-not-unlock-the-mutex\">https://stackoverflow.com/questions/14268080/cancelling-a-thread-that-has-a-mutex-locked-does-not-unlock-the-mutex</a></p>\n<blockquote>\n<p>On GNU/Linux pthread_cancel is implemented with a special exception of type __cxxabi::__forced_unwind, so when a thread is cancelled an exception is thrown and the stack is unwound. If a mutex is locked by an RAII type then its destructor will be guaranteed to run if the stack is unwound by a __forced_unwind exception.</p>\n</blockquote>\n</blockquote>\n<p>if RAII destructors like mutex are run on this kind of unwinding, then it seems to be different from what was called \"forced unwinding\" in the Rust FFI WG?</p>",
        "id": 231160886,
        "sender_full_name": "RalfJ",
        "timestamp": 1616262941
    },
    {
        "content": "<p>Rust's interaction with forced unwinding is not specified; that's what the longjmp/cancelable discussion is about.</p>\n<p>Per the <code>\"C-unwind\"</code> RFC, forced unwinding over non-POFs will <em>never</em> be well defined, so we don't need to worry about that case. We only need to ensure that forced unwinding over POFs is safe (and in the future, we may restrict that to POFs with a specific annotation).</p>",
        "id": 231161688,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616263708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20testcase/near/231140848\">said</a>:</p>\n<blockquote>\n<p>Wait, I'm trying to remember now -- were we going to put those wrappers <em>all the time</em>? Wasn't it the case that you can force-unwind over a frame with no dtors, at least?</p>\n</blockquote>\n<p>The wrappers should explicitly not trap on forced-unwinding.</p>",
        "id": 231161925,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616263947
    },
    {
        "content": "<p>But yes, when compiling with <code>panic=abort</code>, all _invocations_ of <code>\"C-unwind\"</code> functions would need to use such a wrapper.</p>",
        "id": 231161975,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616264034
    },
    {
        "content": "<p>In case of rust force unwinding on arm ignores cleanup: <a href=\"https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/library/panic_unwind/src/gcc.rs#L148-L150\">https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/library/panic_unwind/src/gcc.rs#L148-L150</a><br>\nOn other platforms I do think it runs destructors when the unwind table generated by LLVM contains an entry for the current call: <a href=\"https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/library/panic_unwind/src/gcc.rs#L226-L260\">https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/library/panic_unwind/src/gcc.rs#L226-L260</a></p>",
        "id": 231163000,
        "sender_full_name": "bjorn3",
        "timestamp": 1616265075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I don't think it matters. As I said, Rust's behavior is explicitly not specified for force unwinding over frames with cleanup, and we have no plans to specify it in the future.</p>",
        "id": 231163278,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616265332
    }
]