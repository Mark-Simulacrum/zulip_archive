[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I'd appreciate feedback on this new section defining POF: <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/Rfc-POF-terminology/rfcs/0000-c-unwind-abi.md#plain-old-frames\">https://github.com/BatmanAoD/project-ffi-unwind/blob/Rfc-POF-terminology/rfcs/0000-c-unwind-abi.md#plain-old-frames</a></p>",
        "id": 199062492,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590690477
    },
    {
        "content": "<p>I like that a lot. it seems very clear</p>",
        "id": 199063273,
        "sender_full_name": "acfoltzer",
        "timestamp": 1590690823
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199063950,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590691163
    },
    {
        "content": "<p>Hm so maybe I misunderstood, but my understanding is that this \"Note that a non-POF may become a POF, for instance if all Drop objects are moved out of scope,\" is maybe too simplistic?</p>\n<p>In particular, for something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">Droppy</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">call_thing_that_will_try_to_skip_this_frame</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I believe we'll currently have a drop flag on the stack and as such the foo function is not POF even though all drop object are out of scope and won't drop</p>",
        "id": 199064976,
        "sender_full_name": "simulacrum",
        "timestamp": 1590691650
    },
    {
        "content": "<p>I don't know the details of why we require POF -- so I'm not sure if the drop flag means UB. But we should be sure to clarify and either link to or include it in the RFC, IMO.</p>",
        "id": 199065161,
        "sender_full_name": "simulacrum",
        "timestamp": 1590691717
    },
    {
        "content": "<p>(in the above <code>Droppy</code> implements Drop, to be clear)</p>",
        "id": 199065222,
        "sender_full_name": "simulacrum",
        "timestamp": 1590691747
    },
    {
        "content": "<p>The intent is to specify frames that can be safely deallocated without executing any drop glue, whether or not drop glue would execute in \"normal\" unwinding. Deallocation without stopping at landing pads is probably most common with <code>longjmp</code>.</p>",
        "id": 199067172,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590692622
    },
    {
        "content": "<p>For the example, it shouldn't be UB if <code>c</code> was <code>true</code>.</p>",
        "id": 199069617,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590693757
    },
    {
        "content": "<p>oh, yes, sorry, I meant that c was true in that case -- note that drop glue <em>would get executed</em> in that case</p>",
        "id": 199077612,
        "sender_full_name": "simulacrum",
        "timestamp": 1590696078
    },
    {
        "content": "<p>but that drop glue would look something like <code>if !was_dropped { ... }</code></p>",
        "id": 199077679,
        "sender_full_name": "simulacrum",
        "timestamp": 1590696096
    },
    {
        "content": "<p>it seems like it should be true that this can be safely skipped, but I am not 100% sure that is always true -- it definitely seems like it relies a good bit on how that's structured exactly</p>",
        "id": 199077912,
        "sender_full_name": "simulacrum",
        "timestamp": 1590696156
    },
    {
        "content": "<p>Perhaps the next step is to ask for confirmation from LLVM devs that skipping the cleanup there (or in an equivalent C++ scenario involving <code>longjmp</code>) is not UB?</p>",
        "id": 199078477,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590696308
    },
    {
        "content": "<p>C++ doesn't have drop flags, destructors are always executed.</p>",
        "id": 199080798,
        "sender_full_name": "Amanieu",
        "timestamp": 1590697088
    },
    {
        "content": "<p>Right - so the equivalent scenario would be a destructor that may or may not perform non-trivial cleanup depending on the object's state</p>",
        "id": 199082256,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590697733
    },
    {
        "content": "<p>E.g., is it UB to unwind over a frame with a <code>unique_ptr</code> after it's been moved-from?</p>",
        "id": 199082311,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590697769
    },
    {
        "content": "<p>Technically, yes. (Also I assume you meant longjmp instead of unwind)</p>",
        "id": 199137211,
        "sender_full_name": "Amanieu",
        "timestamp": 1590748462
    },
    {
        "content": "<p>I also feel a bit of uncertainty around this question</p>",
        "id": 199168421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590765381
    },
    {
        "content": "<p>I suspect it's one of those that almost always works but I'm worried about edge cases</p>",
        "id": 199168442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590765391
    },
    {
        "content": "<p>Yes, sorry, I did mean <code>longjmp</code></p>",
        "id": 199169301,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590765785
    },
    {
        "content": "<p>I realize it would be undefined according to the ISO C++ standard (due to the way \"moved-from\" objects are specified), but I'm curious whether LLVM provides stronger guarantees for a specific <code>unique_ptr</code> implementation (since we're not concerned with the specification of the C++ standard lib, but with the safety of skipping \"trivial cleanup\" operations)</p>",
        "id": 199169676,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590765923
    },
    {
        "content": "<p>I'm tending towards allowing this. As long as the destructor is effectively a no-op, we can safely elide it. AFAIK LLVM doesn't perform any code transformations that might invalidate that.</p>",
        "id": 199233586,
        "sender_full_name": "Amanieu",
        "timestamp": 1590806161
    }
]