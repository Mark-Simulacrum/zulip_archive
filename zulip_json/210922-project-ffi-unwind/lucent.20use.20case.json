[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@Adam C. Foltzer</span> can confirm, but from what I understand, the lucent use case is that they have:</p>\n<ul>\n<li>Rust panics that may unwind native frames</li>\n<li>The Rust panic is caught in Rust code </li>\n<li>Those native frames have no destructors</li>\n<li>This is all on a <code>x86_64-unknown-linux-gnu</code> target triple</li>\n</ul>\n<p>I think this is a good \"first target\" to fully define. First question <span class=\"user-mention\" data-user-id=\"237472\">@Adam C. Foltzer</span> is whether I have all the details right.</p>\n<p>Next question is whether there are other pertinent details I've omitted.</p>\n<p>What would be helpful (I think) would be to get some kind of presentation of what the minimum set of details we would have to specify in order to make that behavior stable and well-defined. I imagine <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> you have some handle on that.</p>",
        "id": 178275363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571220820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> IIRC, one detail was that those native frames are actually / often written in Rust, but there are many reasons why lucent cannot use the Rust ABI (too unstable, etc.).</p>",
        "id": 178281766,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571227530
    },
    {
        "content": "<blockquote>\n<p>I imagine @gnzlbg you have some handle on that.</p>\n</blockquote>\n<p>I believe the proposal in my PR solves that problem without any undefined behavior on all Itanium-like targets (most Rust targets, except for windows ones).</p>",
        "id": 178281852,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571227584
    },
    {
        "content": "<p>The proposal does not contain any wording for the windows targets yet though.</p>\n<p>Also, if those native frames are indeed written in Rust, then lucent would be a good example for an application that might need the feature proposed in the \"Futures section\"</p>",
        "id": 178281993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571227713
    },
    {
        "content": "<p>To avoid paying any \"unwind translation\" costs if we were to introduce any in the future</p>",
        "id": 178282013,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571227732
    },
    {
        "content": "<p>Hm, avoiding translation costs seems like a future optimization that may or may not be useful enough to pursue - I suspect that a translation layer may just be the cost of cross-platform stability</p>",
        "id": 178306324,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571244052
    },
    {
        "content": "<blockquote>\n<p>I believe the proposal in my PR solves that problem without any undefined behavior on all Itanium-like targets (most Rust targets, except for windows ones).</p>\n</blockquote>\n<p>yeah, it may very well -- that'd be great</p>",
        "id": 178306383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571244116
    },
    {
        "content": "<p>(actually, let's not even get into that right now, and just leave it at \"possibly useful feature described in Futures section\")</p>",
        "id": 178306434,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571244129
    },
    {
        "content": "<blockquote>\n<p>Also, if those native frames are indeed written in Rust, then lucent would be a good example for an application that might need the feature proposed in the \"Futures section\"</p>\n</blockquote>\n<p>maybe so, but no need to worry about that now</p>",
        "id": 178306448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571244145
    },
    {
        "content": "<blockquote>\n<p>Those native frames have no destructors</p>\n</blockquote>\n<p>I believe last time we spoke to Adam, he said that they definitely do need to handle frames with destructors</p>",
        "id": 178306466,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571244161
    },
    {
        "content": "<p>(Which should not necessarily impact our decision of what an \"MVP\" looks like)</p>",
        "id": 178306481,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571244172
    },
    {
        "content": "<p>This largely sounds right to me, but I think it's worth digging into what \"native frames\" mean. We have at least two source languages for frames in Lucet apps: Rust, and Wasm (compiled into x86-64). the runtime system is in Rust, and in practice so is the implementation of the functions Wasm guests import (we call those <em>hostcalls</em>).</p>\n<p>When you just run a Wasm guest that does some computation and returns without calling a hostcall, your most complicated call chain looks like <code>Rust -&gt; Wasm</code>.</p>\n<p>It gets trickier when you start calling hostcalls, because then you can have <code>Rust -&gt; Wasm -&gt; Rust</code>. It really gets interesting when you learn that hostcalls can call back into Wasm, so you can actually chain them alternately indefinitely: <code>Rust -&gt; Wasm -&gt; Rust -&gt; Wasm -&gt; [...]</code>.</p>\n<p>We want to uphold the property that destructors run on any Rust frames that may exist when there's either a panic in a Rust hostcall, or when the Wasm guest code faults. Whether the Wasm frames get unwound or just dropped is irrelevant at this point, because as Niko mentioned there are no destructors on those frames, just enough call frame information to let the unwinder do its thing.</p>",
        "id": 178318529,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571252254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I'll have to give your PR a thorough read later this afternoon, but it looks promising. the one thing I'd point out based on your comments here is that the \"native\" frames in the Lucet use case are generated from Wasm, not Rust. I believe Weld generates their code from LLVM, so \"native\" for them also means non-Rust</p>",
        "id": 178318996,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571252627
    },
    {
        "content": "<p>when I wrote native I meant \"generated from wasm\"</p>",
        "id": 178319683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571253157
    },
    {
        "content": "<p>on a meta note, I'm going to be in \"omg we have to get a demo out by <em>when</em>?\" mode until mid-November. I am still able to make time for this effort, particularly if any of y'all have a specific ask, but I will not be able to check in as frequently to do proactive work on stuff. If there are pieces missing that I'd be the right contributor to provide, please let me know so I don't miss them when I'm catching up on a batch of comments</p>",
        "id": 178326599,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571258491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> Is the unavailability of an MVP for cross-language unwinding blocking your November demo work?</p>",
        "id": 178326698,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571258574
    },
    {
        "content": "<p>it is not; we are on nightly now and using <code>#[unwind(allowed)]</code></p>",
        "id": 178326728,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571258605
    },
    {
        "content": "<p>Okay, glad there's no pressure from that direction, then!</p>",
        "id": 178326901,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571258758
    },
    {
        "content": "<p>yeah, we're using <code>async</code>/<code>await</code> for the demo anyway, so it's not much extra cost at this point</p>",
        "id": 178327806,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571259592
    },
    {
        "content": "<p>Well, that's at least on Beta :)</p>",
        "id": 178328189,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571259886
    },
    {
        "content": "<p>right, now it is, at long last :)</p>",
        "id": 178328214,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571259913
    }
]