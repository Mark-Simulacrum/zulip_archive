[
    {
        "content": "<p>Basically, C++ can catch a Rust panic with <code>catch (...)</code> and then decide not to rethrow it. <a href=\"https://github.com/rust-lang/rust/issues/67711\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67711\">#67711</a> makes sure that the <code>Box&lt;Any&gt;</code> is properly freed in this case, so we don't leak memory.</p>",
        "id": 185157068,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517763
    },
    {
        "content": "<p>However this does affect the way Rust handles double-panics. The problem is that <code>panic_count</code> in TLS is incremented when the panic is thrown, but not decremented when the panic is caught and destroyed by C++.</p>",
        "id": 185157184,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517818
    },
    {
        "content": "<p>This means that the next time a panic occurs, Rust will think that it is a double-panic and abort immediately.</p>",
        "id": 185157203,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517833
    },
    {
        "content": "<p>Now the question is, do we want to allow FFI code to catch and discard Rust panics?</p>",
        "id": 185157298,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517867
    },
    {
        "content": "<p>If yes, then we need to rework <code>panic_count</code> and the way double-panics work.</p>",
        "id": 185157337,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517903
    },
    {
        "content": "<p>If not then we can abort in the exception destructor if it is called outside of <code>catch_unwind</code>, just like <code>pthread_cancel</code> does.</p>",
        "id": 185157398,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517928
    },
    {
        "content": "<p>The main user-visible impact is that backtraces when a double-panic occurs will be slightly less precise: the second panic is treated as a normal panic (backtrace depends on RUST_BACKTRACE), but we will abort a bit later in the landing pad for the destructor which calls <code>abort</code> instead of <code>_Unwind_Resume</code>.</p>",
        "id": 185157524,
        "sender_full_name": "Amanieu",
        "timestamp": 1578518024
    },
    {
        "content": "<p>I think we probably don't want to allow that, at least not now, but it's a good issue to raise</p>",
        "id": 185158395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578518538
    },
    {
        "content": "<p>Aborting in the exception destructor sounds like the right approach to me. That way C++ can still catch the exception as long as it re-throws it, correct?</p>",
        "id": 185160700,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578520202
    },
    {
        "content": "<p>Yes, C++ can catch and rethrow it. Just not catch and ignore it.</p>",
        "id": 185161735,
        "sender_full_name": "Amanieu",
        "timestamp": 1578520878
    },
    {
        "content": "<p>Yep, that sounds good to me.</p>",
        "id": 185163537,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578522186
    }
]