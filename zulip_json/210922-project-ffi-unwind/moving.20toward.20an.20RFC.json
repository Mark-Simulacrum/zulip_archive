[
    {
        "content": "<p>OK, so, we discussed this in today's lang team meeting. It seems like most folks at this juncture favor the \"extern <code>C unwind</code>\" alternative -- there are some <a href=\"https://github.com/rust-lang/lang-team/blob/master/minutes/2020-03-26.md#shepherded-item-updates\" title=\"https://github.com/rust-lang/lang-team/blob/master/minutes/2020-03-26.md#shepherded-item-updates\">summaries in the ffi-unwind section here</a>.</p>",
        "id": 191949813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585257208
    },
    {
        "content": "<p>We were saying that it seems like at this point it would make sense to make a revised RFC that states</p>\n<ul>\n<li>add \"C unwind\"</li>\n<li>\n<p>clarifies that all unwinding across a C ABI is UB <strong>except</strong> the case of:<br>\n    * forced unwind where no destructors are on stack</p>\n</li>\n<li>\n<p>requires an abort guard in the case of a <code>extern \"C\" fn foo()</code> compiled with panic=unwind (to avoid UB)</p>\n</li>\n<li>declares that unwinding across a \"C unwind\" ABI is currently<br>\n    * permitted for exceptions that arose from a Rust panic<br>\n    * \"not yet specified\" for foreign exceptions (that will be follow-up work)</li>\n</ul>",
        "id": 191950165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585257355
    },
    {
        "content": "<p>I think that covers it</p>",
        "id": 191950169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585257359
    },
    {
        "content": "<p>I have one hesitation, but I don't think it has to block the RFC. In particular, I've been pondering the case of foreign exceptions propagating across Rust frames. I think that ideally we'd be able to support this, but if we did decide <em>not</em> to -- to make it UB, essentially -- then that might push me to support the \"one ABI\" option. After all, in that case, there is no \"new UB\" involved in switching from panic=unwind to panic=abort -- foreign exceptions are UB no matter what. Basically this would (iiuc) just mean that we no longer annotate foreign functions as 'nounwind' unless we have panic=abort (because Rust panics might propagate).</p>\n<p>(It <em>would</em> though still imply that changing the Rust unwinding mechanism to be distinct from the system mechanism is more costly; I don't personally think we should change the Rust unwinding mechanism anyway, so that doesn't bother me so much.)</p>\n<p>However, it's also true that in that case we could just deprecate \"C unwind\" and make it synonymous with \"C\", so I don't really care.  And ultimately I do think it's important for us to enable smoother C++ interop, and I think permitting exceptions might be an important part of that. </p>\n<p>(All of that said I might like to include some bit of these trade-offs in the RFC)</p>",
        "id": 191950775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585257665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/191950165\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/191950165\">said</a>:</p>\n<blockquote>\n<ul>\n<li>requires an abort guard in the case of a <code>extern \"C\" fn foo()</code> compiled with panic=unwind (to avoid UB)</li>\n</ul>\n</blockquote>\n<p>libstd is always compiled with panic=unwind, so a foreign unwind will always find a landing pad when the current thread is either the main thread for <code>--crate-type bin</code>, or the current thread is spawned using <code>std::thread::spawn</code>.</p>",
        "id": 191993526,
        "sender_full_name": "bjorn3",
        "timestamp": 1585301913
    },
    {
        "content": "<p>This is not related to foreign unwinding. We mark <code>extern \"C\"</code> functions as <code>nounwind</code>, so it is unsound if we let a panic out of them.</p>",
        "id": 191996280,
        "sender_full_name": "Amanieu",
        "timestamp": 1585303553
    },
    {
        "content": "<p>To clarify: this is talking about <code>extern \"C\"</code> functions written in Rust.</p>",
        "id": 191996381,
        "sender_full_name": "Amanieu",
        "timestamp": 1585303607
    },
    {
        "content": "<p>Ok, I thought this was about <code>extern \"C\" { fn foo(); }</code>.</p>",
        "id": 191997018,
        "sender_full_name": "bjorn3",
        "timestamp": 1585303950
    },
    {
        "content": "<p>I guess the question is -- who wants to start writing the RFC :) <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> are you interested?</p>",
        "id": 192098031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585358308
    },
    {
        "content": "<p>I can take a shot at that this week.</p>",
        "id": 192143760,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585433202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> any update?</p>",
        "id": 192699882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585848601
    },
    {
        "content": "<p>I'm probably not able to attend a meeting today</p>",
        "id": 192699956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585848616
    },
    {
        "content": "<p>But I think we're at the \"write RFC stage\" anyhow</p>",
        "id": 192699965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585848621
    },
    {
        "content": "<p>I've started but haven't gotten very far.</p>",
        "id": 192700228,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585848763
    },
    {
        "content": "<p>I copied various notes into the repo, too, with links to the originals. I made a separate PR, but I can just merge it without review if you don't mind.</p>",
        "id": 192700382,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585848845
    },
    {
        "content": "<blockquote>\n<p>clarifies that all unwinding across a C ABI is UB except the case of:\n* forced unwind where no destructors are on stack</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't think we sufficiently discussed forced unwind (option 1. vs. 2); there seemed to be cases where this could cause <code>-C panic=unwind</code> &lt;=&gt; <code>-C panic=abort</code> to generate UB whereas I got the impression that wasn't the case earlier in the meeting</p>",
        "id": 192706910,
        "sender_full_name": "centril",
        "timestamp": 1585851989
    },
    {
        "content": "<p>I thought <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> had reassured me on that issue (where Proposal 1 avoids UB that's present in Proposal 2) during our meeting on 2 March, but I don't see that recorded in our notes, unfortunately. I thought I remembered a comment to the effect that it's essentially a wash for some reason...</p>",
        "id": 192707701,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585852434
    },
    {
        "content": "<p>T-Lang pre-triage now; I'll try to look later</p>",
        "id": 192707816,
        "sender_full_name": "centril",
        "timestamp": 1585852487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> do you think the initial RFC, introducing <code>\"C unwind\"</code>, should specify what happens when a frame with <code>catch_unwind</code> is unwound by a foreign exception? Or should that be UB for now?</p>",
        "id": 192711739,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585854605
    },
    {
        "content": "<p>I personally feel that we should just specify it, but the lang team seems to be tending towards making it UB for now until a proper use case for it comes up.</p>",
        "id": 192711897,
        "sender_full_name": "Amanieu",
        "timestamp": 1585854682
    },
    {
        "content": "<p>Is there any reason not to specify it as <code>abort</code> for now?</p>",
        "id": 192712264,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585854845
    },
    {
        "content": "<p>I guess changing that would be _technically_ breaking...and I think that was mentioned in the PR discussion...</p>",
        "id": 192712310,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585854872
    },
    {
        "content": "<p>We only check the type of the exception in <code>catch_unwind</code>, so we can't guarantee that we will always abort.</p>",
        "id": 192712604,
        "sender_full_name": "Amanieu",
        "timestamp": 1585855025
    },
    {
        "content": "<p>I'm not sure I understand - isn't that sufficient to guarantee that foreign exceptions will abort in any case where they're guaranteed to reach the <code>catch_unwind</code> in the first place?</p>",
        "id": 192713383,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585855420
    },
    {
        "content": "<p>Not if you have C++ calling Rust which calls C++ again, all without a <code>catch_unwind</code>, and the inner C++ throws an exception.</p>",
        "id": 192717993,
        "sender_full_name": "Amanieu",
        "timestamp": 1585857615
    },
    {
        "content": "<p>Oh, I'm only asking about <code>catch_unwind</code>.</p>",
        "id": 192722848,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585859870
    },
    {
        "content": "<p>If you want to review the spec as I've explained it in my draft RFC, here it is: <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/c-unwind-rfc/rfcs/0000-c-unwind-abi.md\" title=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/c-unwind-rfc/rfcs/0000-c-unwind-abi.md\">https://github.com/BatmanAoD/project-ffi-unwind/blob/c-unwind-rfc/rfcs/0000-c-unwind-abi.md</a></p>",
        "id": 192723408,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585860174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I forgot until just now that your above comment says the RFC should leave behavior for foreign exceptions \"unspecified.\" Is there a reason for doing that instead of introducing the specification based on the table in the blog post?</p>",
        "id": 192725909,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585861385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/192707701\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/192707701\">said</a>:</p>\n<blockquote>\n<p>I thought <span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> had reassured me on that issue (where Proposal 1 avoids UB that's present in Proposal 2) during our meeting on 2 March, but I don't see that recorded in our notes, unfortunately. I thought I remembered a comment to the effect that it's essentially a wash for some reason...</p>\n</blockquote>\n<p>Oh, I think I remember the reason: in the case of a forced unwind, having destructors in scope is almost certainly UB anyway. For instance, with <code>longjmp</code>, that is definitely true in the general case.</p>",
        "id": 192728469,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585862625
    },
    {
        "content": "<p>Okay, I've got a rough draft of an RFC. Thanks to Amanieu for reviewing it already!</p>",
        "id": 192754446,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585884649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Why do we need to leave the behavior of foreign exceptions entering through <code>extern \"C\" { fn entrypoint(); }</code> undefined for now? Was this discussed in the lang team meeting on 3/26? All I see in the minutes is:</p>\n<blockquote>\n<ul>\n<li>Potentially exclude the behavior of foreign exceptions — they can remain UB<ul>\n<li>or we can try to come up with an answer</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 192833113,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585932706
    },
    {
        "content": "<p>Because nobody has proposed a use case for it.</p>",
        "id": 192833291,
        "sender_full_name": "Amanieu",
        "timestamp": 1585932786
    },
    {
        "content": "<p>So far the only people asking about FFI unwinding are the ones who want to throw Rust panics over foreign code.</p>",
        "id": 192833468,
        "sender_full_name": "Amanieu",
        "timestamp": 1585932850
    },
    {
        "content": "<p>Hm.... I am pretty confident that Lucet uses it already</p>",
        "id": 192833677,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585932952
    },
    {
        "content": "<p>I think it's fine if we just go ahead and make foreign exceptions well-defined. We'll leave it for the RFC discussion.</p>",
        "id": 192834217,
        "sender_full_name": "Amanieu",
        "timestamp": 1585933148
    },
    {
        "content": "<p>Okay. Should I mark those two comments in your review resolved?</p>",
        "id": 192834296,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585933184
    },
    {
        "content": "<p>Sure.</p>",
        "id": 192834602,
        "sender_full_name": "Amanieu",
        "timestamp": 1585933307
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 192835410,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585933638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Okay, I've changed the sections discussing forced unwind; I _think_ they're correct now. I also called out the fact that the one case where changing <code>panic=unwind</code> to <code>panic=abort</code>introduces UB is actually already UB (even with <code>panic=unwind</code>) most platforms. (In practice, on all but one platform)</p>",
        "id": 192839208,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585935440
    },
    {
        "content": "<p>My inclination was to leave that as \"not yet specified\" -- it seems to me that we don't yet have a satisfactory answer about the interaction with \"catch panic\", for one thing. I wasn't super happy with \"catch but convert to Rust panic\", which seems unlikely to be what anyone wants. Abort is \"ok\" but ungreat, it'd be nice to at least offer an alternative that permits one to rethrow with full fidelity.</p>",
        "id": 192852025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941530
    },
    {
        "content": "<p>I guess I just don't know that we've even written out the full range of options in a way to discuss</p>",
        "id": 192852061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941543
    },
    {
        "content": "<p>I'm not <em>entirely</em> convinced we even want foreign exceptions to ever be able to propagate across Rust code, although I also (somewhat contradictorily) think  we want to enable \"fluent\" C++ interaction, and it seems like that would require us to support foreign exceptions more fully</p>",
        "id": 192852107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941576
    },
    {
        "content": "<p>I think most use cases probably wouldn't involve <code>catch_panic</code>, just like most uses of <code>panic</code> across C++ frames would use <code>catch_panic</code> rather than C++ <code>catch</code> to stop the <code>panic</code> unwind</p>",
        "id": 192856231,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585943794
    },
    {
        "content": "<p>I think one reason I want to support C++ exceptions is just that it seems... arrogant, somehow, to make <code>panic</code>-unwinds the only type of exception that we permit to cross the C++/Rust boundary.</p>",
        "id": 192856379,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585943880
    },
    {
        "content": "<p>\"Rust's FFI doesn't prevent you from using your other languages' features\" is another of those language-values that I have in my head that may not be shared universally.</p>",
        "id": 192856522,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585943939
    },
    {
        "content": "<p>Also, UB in this case seems strictly worse than \"it just does what you expect.\"</p>",
        "id": 192856574,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585943970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/192856522\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/moving.20toward.20an.20RFC/near/192856522\">said</a>:</p>\n<blockquote>\n<p>\"Rust's FFI doesn't prevent you from using your other languages' features\" is another of those language-values that I have in my head that may not be shared universally.</p>\n</blockquote>\n<p>I would call it \"Rust gives seamless interop with other systems language, esp. C and C++\"</p>",
        "id": 193107055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210014
    },
    {
        "content": "<p>though we're not there yet :)</p>",
        "id": 193107064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210019
    },
    {
        "content": "<p>it's true-ish for C, I think it <em>should</em> be true for C++</p>",
        "id": 193107077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210026
    },
    {
        "content": "<p>otoh, we do require \"opt-in\" for that interop elsewhere</p>",
        "id": 193107084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210034
    },
    {
        "content": "<p>but it's definitely an argument for permitting us to interop with C++ exceptions</p>",
        "id": 193107138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210050
    },
    {
        "content": "<p>(and one I find convincing)</p>",
        "id": 193107146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586210056
    },
    {
        "content": "<p>I can see why, if we were already planning to make foreign exceptions UB, that might make the single-ABI proposal more appealing. But I don't really see why we would want to make foreign exceptions UB in the first place; haven't we discussed that before?</p>",
        "id": 201073757,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592341439
    },
    {
        "content": "<p>..we have</p>",
        "id": 201080757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592345707
    }
]