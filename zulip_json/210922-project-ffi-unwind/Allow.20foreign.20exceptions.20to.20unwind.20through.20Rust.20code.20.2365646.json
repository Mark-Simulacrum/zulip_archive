[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> has a PR that seems quite relevant to this working group =) I'm behind on our Zulip channels right now but I wanted to make sure we discussed it. At least based on the \"main description\" it sounds pretty great!</p>",
        "id": 178695165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571689721
    },
    {
        "content": "<p>Description:</p>\n<blockquote>\n<p>This PR allows C++ exceptions (and any other exceptions) to safely unwind through Rust code. In particular:<br>\n- Drop code will be executed as the exception unwinds through the stack, as with a Rust panic.<br>\n- <code>catch_unwind</code> will <em>not</em> catch the exception, instead the exception will silently continue unwinding past it.</p>\n<p>Incidentally, Rust panics can unwind just fine through C++ code as long as you mark the function with <code>#[unwind(allowed)]</code>. I've added a test for it to be sure.</p>\n<p>I haven't updated any of the documentation, so officially unwinding through FFI is still UB. However this is a step towards making it well-defined.</p>\n</blockquote>",
        "id": 178695385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571689834
    },
    {
        "content": "<p>Yes, Centril tagged me! I'll check it out. I meant to read the two RFC drafts yesterday but did not finish yet, unfortunately.</p>",
        "id": 178695419,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571689863
    },
    {
        "content": "<p>OK :)</p>",
        "id": 178695458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571689890
    },
    {
        "content": "<p>Oh I didn't realize there was a WG for this. I only looked into this because <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> mentioned it to me.</p>",
        "id": 178712681,
        "sender_full_name": "Amanieu",
        "timestamp": 1571704393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Welcome! We plan to announce our existence...soon...ish.</p>",
        "id": 178712798,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571704525
    },
    {
        "content": "<p>I'm done with the PR. I've updated the description with details of the new behavior, so you can use it as a base for what to allow/disallow in this WG.</p>",
        "id": 179229620,
        "sender_full_name": "Amanieu",
        "timestamp": 1572268926
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65646\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65646\">https://github.com/rust-lang/rust/pull/65646</a></p>",
        "id": 179229626,
        "sender_full_name": "Amanieu",
        "timestamp": 1572268929
    },
    {
        "content": "<p>I think that there is quorum that allowing foreign exceptions to unwind through Rust code at some point would be ok</p>",
        "id": 179230844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269760
    },
    {
        "content": "<p>The main controversy is whether one should be able to catch them or not from Rust <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span></p>",
        "id": 179230907,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269780
    },
    {
        "content": "<p>That is, whether it should be possible to catch them at all, and if so, whether <code>catch_unwind</code> or something else</p>",
        "id": 179230945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269811
    },
    {
        "content": "<p>The main issue is that the signature of <code>catch_unwind</code> really isn't suited for returning a caught foreign exception.</p>",
        "id": 179230955,
        "sender_full_name": "Amanieu",
        "timestamp": 1572269818
    },
    {
        "content": "<p>There is also the implementation issue of how should <code>catch_unwind</code> (or similar) deal with forced exceptions, etc.</p>",
        "id": 179230999,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269859
    },
    {
        "content": "<p>but yes, the signature is a big problem</p>",
        "id": 179231020,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269874
    },
    {
        "content": "<p>Or longjmp exceptions on Windows.</p>",
        "id": 179231028,
        "sender_full_name": "Amanieu",
        "timestamp": 1572269881
    },
    {
        "content": "<p>yes</p>",
        "id": 179231068,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269884
    },
    {
        "content": "<p>those aren't technically forced, but handling longjmp on windows differently would mean that longjmp behaves differently across platforms</p>",
        "id": 179231096,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269914
    },
    {
        "content": "<p>and a lot of code might want to rely on that not happening, but the truth is that <code>longjmp</code> does behave very differently across platforms</p>",
        "id": 179231114,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269932
    },
    {
        "content": "<p>It already behaves differently across platforms: it only runs destructors on MSVC, not on MinGW or any non-Windows platform.</p>",
        "id": 179231144,
        "sender_full_name": "Amanieu",
        "timestamp": 1572269954
    },
    {
        "content": "<p>yes</p>",
        "id": 179231154,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269962
    },
    {
        "content": "<p>My current opinion is that <code>catch_unwind</code> should ignore foreign exceptions always</p>",
        "id": 179231179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269978
    },
    {
        "content": "<p>and If we want to add support for catching foreign exceptions, that should be a different API</p>",
        "id": 179231192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572269992
    },
    {
        "content": "<p>IMO we should just do the same as C++ and say longjmp is UB if it unwinds through frames with destructors.</p>",
        "id": 179231193,
        "sender_full_name": "Amanieu",
        "timestamp": 1572269992
    },
    {
        "content": "<p>Yes I agree.</p>",
        "id": 179231203,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270000
    },
    {
        "content": "<p>the thing is that while C++ as a language says its UB, the implementations of C++ sometimes say \"that is actually guaranteed to do X\" (MSVC documents that longjmp runs destructors, and that's a guarantee there, so code for that platform can rely on that)</p>",
        "id": 179231294,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270038
    },
    {
        "content": "<p>Actually MSVC documents that longjmp <em>sometimes</em> runs desctructors, depending on compiler options. And it has a big warning box saying that relying on this is nonportable.</p>",
        "id": 179231353,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270087
    },
    {
        "content": "<p>It also depends on <code>noexcept</code>, etc.</p>",
        "id": 179231369,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270100
    },
    {
        "content": "<p>MSVC documents that destructors of <code>noexcept</code> functions might or might not be run depending on the function being inlined</p>",
        "id": 179231447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270135
    },
    {
        "content": "<p>but there is a long shot from that to \"UB\"</p>",
        "id": 179231465,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270147
    },
    {
        "content": "<p>I prefer to provide reasonables guarantees for the two types of unwinding that we have in general, the one that runs destructors, and the one that does not</p>",
        "id": 179231500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270170
    },
    {
        "content": "<p>and then what longjmp does on platform X depends on how platform X implements longjmp</p>",
        "id": 179231511,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270182
    },
    {
        "content": "<p>but the language doesn't have to say anything about that</p>",
        "id": 179231525,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270188
    },
    {
        "content": "<p>(we want to probably document what each platform does)</p>",
        "id": 179231544,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270208
    }
]