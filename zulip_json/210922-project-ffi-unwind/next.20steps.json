[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sorry about the confusion regarding the meeting on Monday. How do you suggest we take our next steps? Should we attempt to schedule another meeting with the lang team?</p>",
        "id": 189732827,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583354538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> my bad, too</p>",
        "id": 189799889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583420540
    },
    {
        "content": "<p>yeah, we ought to reschedule</p>",
        "id": 189799893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583420544
    },
    {
        "content": "<p>I am behind on scheduling meetings this month, it's been \"a week\"</p>",
        "id": 189799913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583420558
    },
    {
        "content": "<p>What were the weeks that worked well for unwind folks?</p>",
        "id": 189799928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583420575
    },
    {
        "content": "<p>I'm away next week</p>",
        "id": 189808020,
        "sender_full_name": "Amanieu",
        "timestamp": 1583425051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> We do have some notes from the meeting though: <a href=\"https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ?view\" target=\"_blank\" title=\"https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ?view\">https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ?view</a></p>",
        "id": 189808135,
        "sender_full_name": "Amanieu",
        "timestamp": 1583425115
    },
    {
        "content": "<p>Basically we decided that proposal 2 was strictly superior to proposal 1 (1&amp;2 are very similar).</p>",
        "id": 189808193,
        "sender_full_name": "Amanieu",
        "timestamp": 1583425157
    },
    {
        "content": "<p>So there's only 2 &amp; 3 left now.</p>",
        "id": 189808222,
        "sender_full_name": "Amanieu",
        "timestamp": 1583425171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thanks. I think we can just look back at the Doodle poll again: <a href=\"https://doodle.com/poll/d9xevh43spf6rx8n\" target=\"_blank\" title=\"https://doodle.com/poll/d9xevh43spf6rx8n\">https://doodle.com/poll/d9xevh43spf6rx8n</a></p>\n<p>Both the 16th and the 23rd would appear to work. <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> has your availability changed since you filled in the poll?</p>",
        "id": 189808262,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583425200
    },
    {
        "content": "<p>Still good for me!</p>",
        "id": 189808420,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583425276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The lang team already has that time reserved, correct? If so I think we can assume that Centril can make it on the 16th and just go ahead and schedule that as the new time.</p>",
        "id": 189818490,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583430730
    },
    {
        "content": "<p>Also, should we publish another blog post, providing the new date and removing the proposal-1 entries from the table?</p>",
        "id": 189818551,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583430774
    },
    {
        "content": "<p>I think we'll probably have a more productive meeting if we keep it small.</p>",
        "id": 189818712,
        "sender_full_name": "Amanieu",
        "timestamp": 1583430873
    },
    {
        "content": "<p>the 16th is good I think</p>",
        "id": 189822706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433487
    },
    {
        "content": "<p>let's do it</p>",
        "id": 189822722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433499
    },
    {
        "content": "<p>I'll review the notes, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span></p>",
        "id": 189822736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433508
    },
    {
        "content": "<p>I don't remember what is 1, 2, and 3</p>",
        "id": 189822741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433513
    },
    {
        "content": "<p>We won't have <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I think</p>",
        "id": 189822761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433527
    },
    {
        "content": "<p>but that's inevitable</p>",
        "id": 189822773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433535
    },
    {
        "content": "<p>On the 16th?</p>",
        "id": 189822774,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433536
    },
    {
        "content": "<p>since they're away for 4 weeks or something on vacation</p>",
        "id": 189822782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433542
    },
    {
        "content": "<p>Ah</p>",
        "id": 189822786,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433545
    },
    {
        "content": "<p>Okay, I was slightly worried when you said \"inevitable\"!</p>",
        "id": 189822801,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433556
    },
    {
        "content": "<p>Niko, since you created the Zulip poll, can you \"finalize\" it?</p>",
        "id": 189822896,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433607
    },
    {
        "content": "<p>Yes</p>",
        "id": 189823228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433829
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 189824308,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583434519
    },
    {
        "content": "<p>I'll post an announcement too</p>",
        "id": 189824503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583434655
    },
    {
        "content": "<p>I'm just trying to decide if we should have any other lang-team meetings</p>",
        "id": 189824512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583434665
    },
    {
        "content": "<p>full disclosure, I'm feeling a bit tired this month and lacking in enthusiasm :)</p>",
        "id": 189824523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583434678
    },
    {
        "content": "<p>Sorry to hear it; hope the rest of the month goes better for you! Or at least that April goes better...</p>",
        "id": 189825062,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583435022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Next.20steps/near/189824503\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/Next.20steps/near/189824503\">said</a>:</p>\n<blockquote>\n<p>I'll post an announcement too</p>\n</blockquote>\n<p>In <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a>?</p>",
        "id": 189825318,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583435190
    },
    {
        "content": "<p>Hey all, I've been \"drafted\" by Till to help finish out implementing what's necessary for <code>C-unwind</code>. I talked with <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> a bit, and I wanted to confirm what the final pieces are to implement in rustc. Hoping y'all can help me fill in gaps in my knowledge and let me know if anything is missing!</p>\n<p>My impression of what's left is:</p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=da889da2a16e0a1f4737ed23cdca76fe\">bug 1</a> - functions defined in Rust as <code>extern \"C\"</code> are still marked <code>nounwind</code> on stable today, but they shouldn't be as a transitionary measure until this feature is fully implemented and stabilized</li>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=6174bb7be51d731c2f4005e51d8cad63\">bug 2</a> - when that's compiled with <code>-Cpanic=abort</code> everything is marked <code>nounwind</code>, but it shouldn't be, there should be a landing pad that aborts the process</li>\n</ul>\n<p>Is that right? If so that's hopefully not too much to tackle :)</p>\n<p>One question I would have though is what the expected stabilization story for this feature is (or maybe that's still a TODO item). It looks like <code>#![feature(c_unwind)]</code> changes the behavior of the compiler, so if we were to stabilize it today it means that the same code would behave differently on nightly and on stable. Is this expected to be an issue? Or is it generally expected that we'll just stabilize the change in behavior and it's subtle enough that anyone affected can switch to nightly from the current stable?</p>",
        "id": 241575804,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622831506
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> !</p>",
        "id": 241579257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833221
    },
    {
        "content": "<p>I've not been following the bugs super closely, I imagine <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> or <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> can confirm</p>",
        "id": 241579277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833236
    },
    {
        "content": "<p>but that sounds right</p>",
        "id": 241579299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833246
    },
    {
        "content": "<p>Regarding the stabilization story, we haven't talked <em>too</em> much about that. I think a nice thing would be if there is a pattern people can write that is correct on both nightly <em>and</em> stable</p>",
        "id": 241579369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833282
    },
    {
        "content": "<p>I'm not sure if that's true though!</p>",
        "id": 241579379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833286
    },
    {
        "content": "<p>but really the number of affected crates here is--afaik---fairly small</p>",
        "id": 241579419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833309
    },
    {
        "content": "<p>so I would guess we can work closely with them</p>",
        "id": 241579430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833314
    },
    {
        "content": "<p>post some blog posts</p>",
        "id": 241579435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833316
    },
    {
        "content": "<p>and make it through</p>",
        "id": 241579440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833317
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> do we have a canonical list? we should probably prep one :)</p>",
        "id": 241579507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833335
    },
    {
        "content": "<p>or write a PSA blog post to try and get people's attention</p>",
        "id": 241579514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833340
    },
    {
        "content": "<p>and have them contact us</p>",
        "id": 241579520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622833342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/next.20steps/near/241579507\">said</a>:</p>\n<blockquote>\n<p>actually <span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> do we have a canonical list? we should probably prep one <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Hm... can we simply introduce a new GitHub issues tag for this?</p>",
        "id": 241579577,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622833381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Welcome to the project; thanks for stepping in! (Even if you were \"voluntold\"...)</p>\n<p>For bug 2, the real complication, in my mind, is truly external functions. We want to guarantee that even if an exception enters the Rust runtime from C++ (or equivalent), the runtime is aborted. I have been assuming that this needs to be implemented via some sort of shim that would be linked in every callee instead of linking the actual external function.</p>",
        "id": 241580300,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622833780
    },
    {
        "content": "<p>oh I thought it would be as simple as just having an aborting landing pad for all function calls with an ABI that can unwind?</p>",
        "id": 241580442,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622833856
    },
    {
        "content": "<p>Oh, maybe! Yes, I think that would have the desired effect.</p>",
        "id": 241580503,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622833904
    },
    {
        "content": "<p>that may not catch <em>everything</em> since the personality may still filter stuff, but we could in theory adjust personalities at some point in the future to be a catch-all for C++ exceptions or something reasonable like that</p>",
        "id": 241580590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622833940
    },
    {
        "content": "<p>So, in <code>abort=panic</code>, any function that _calls_ an <code>extern \"C\"</code> function would include a landing pad.</p>",
        "id": 241580592,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622833941
    },
    {
        "content": "<p>oh? I thought it was only calling <code>extern \"C-unwind\"</code>?</p>",
        "id": 241580613,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622833956
    },
    {
        "content": "<p>(in that <code>extern \"C\"</code> is an unsafe assertion that the function doesn't throw)</p>",
        "id": 241580632,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622833967
    },
    {
        "content": "<p>Er, right, sorry.</p>",
        "id": 241580651,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622833978
    },
    {
        "content": "<p>Sorry, I'm multitasking and should just wait to give you info until I have taken the time to restore my focus here!</p>",
        "id": 241580720,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622834013
    },
    {
        "content": "<p>lol no worries</p>",
        "id": 241580738,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622834021
    },
    {
        "content": "<p>if the transition story is still a bit up in the air I don't mind helping out with that as well, and the known use cases relying on unwinding would be good to review for that as well (mostly for my own edification)</p>",
        "id": 241580835,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622834064
    },
    {
        "content": "<p>We do have a feature where we abort when there's an unwind across <code>extern \"C\"</code> happening, though, don't we?</p>",
        "id": 241581282,
        "sender_full_name": "nagisa",
        "timestamp": 1622834356
    },
    {
        "content": "<p>yeah if <code>#![feature(c_unwind)]</code> is specified that's the main behavior change from stable</p>",
        "id": 241581515,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622834515
    },
    {
        "content": "<p>e.g. the codegen for \"bug 1\" above changes if you add that feature gate (and this is what I figured was also a question about the transition story)</p>",
        "id": 241581576,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622834541
    },
    {
        "content": "<p>Yes, <code>panic!</code> will cause an abort if it would otherwise escape from an <code>extern \"C\"</code> function.</p>",
        "id": 241581931,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622834753
    },
    {
        "content": "<p>ok I have created <a href=\"https://github.com/rust-lang/rust/pull/86155\">https://github.com/rust-lang/rust/pull/86155</a> with what I believe are the next steps</p>",
        "id": 241999528,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623194031
    },
    {
        "content": "<p>I also think that a reasonable stabilization story, given that PR, would be to stabilize <code>C-unwind</code> before we change the behavior of <code>C</code>, then after awhile once that's stable we change <code>C</code>'s behavior. That would allow projects to span all three channels if necessary. After that PR <code>C</code> behaves like <code>C-unwind</code> will in the future (more or less modulo some minor details)</p>",
        "id": 241999605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623194083
    },
    {
        "content": "<p>I'll try to look at that PR soon, but from your description it sounds like exactly what's needed; thank you!</p>",
        "id": 242003510,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623197542
    },
    {
        "content": "<p>(And yes, I agree that treating <code>C</code> like <code>C-unwind</code> for now is the correct path.)</p>",
        "id": 242003528,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623197577
    },
    {
        "content": "<p>I haven't implemented this, but one thought I had is that we could treat <code>extern \"C\" { ... }</code> functions as true <code>nounwind</code> things, but <code>extern \"C\" fn foo() {}</code> and function pointer would all behave equivalently to <code>C-unwind</code>. That's an option where we may not lose as much perf relative today, but tbh the perf loss is pretty amorphous as \"well LLVM may have to keep more landing pads\" rather than \"I saw this get NN% slower\", so I'm not sure whether this would be worth it as a purely transitionary thing</p>",
        "id": 242004496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623198428
    },
    {
        "content": "<p>Wouldn't keeping the declarations <code>nounwind</code> preserve the bug that all cross-language unwinding is LLVM UB?</p>",
        "id": 242006190,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623200157
    },
    {
        "content": "<p>indeed, yeah, so it'd be a balance between enabling that now vs preventing a hypothetical regression. I'd be wary to \"enable\" that though since the goal is to enable it with <code>C-unwind</code> rather than <code>C</code>, but that's just my 2c</p>",
        "id": 242008461,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623202293
    },
    {
        "content": "<p>I would prefer to remove the known LLVM UB without fanfare or even an announcement, and continue to have it be \"officially\" UB. That way we may potentially save some end-users from bad behavior.</p>",
        "id": 242009596,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623203457
    },
    {
        "content": "<p>hm ok I think that I am in a mire and I don't know what to do any more. While <a href=\"https://github.com/rust-lang/rust/pull/86155\">my PR</a> has had discussion I don't think it's been actually reviewed yet? I listed a <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-865178867\">few concrete questions</a> of where I think there are actually more blockers for <code>C-unwind</code> stabilization. Some of the MIR level concerns mostly just need someone to read it and say \"nah that's fine\" because I suspect it's benign, but there's two major issues which will require follow-ups to address:</p>\n<ul>\n<li>\n<p>The existing of a stable <code>\"C-unwind\"</code> ABI breaks assumptions that <code>-Clto -Cpanic=abort</code> does. That pass specifically, today, simply removes all landing pads. This is not correct in a world where calls to <code>C-unwind</code> functions need to be caught to abort the process. That pass was designed, during the initial inception of LTO &amp; panic=abort, to get the benefit of <code>-Cpanic=abort</code>-compiled libstd without having to actually recompile libstd. I don't know what the impact would be of removing that pass but it will almost surely make some binaries larger if not a bit slower. Additionally if that pass is used to remove unwing infrastructure completely that will no longer work because landing pads will still be present</p>\n</li>\n<li>\n<p>The <code>try</code> intrinsic I think has incorrect codegen (although I could be corrected here). I believe the intention of the intrinsic is that it catches only <em>Rust</em> exceptions but other C++-style exceptions can unwind through <code>try</code>. The Rust compiler, however, tags the <code>try</code> intrinsic with <code>nounwind</code> and that would need to get fixed.</p>\n</li>\n</ul>\n<p>Overall I don't really know how to proceed. I feel like there's just endless discussion happening without any actual reviews or anyone weighing in on what next steps are. I'm not super keen myself on just continuing this debate, I would ideally like to proceed down a selected path.</p>",
        "id": 243582335,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624397931
    },
    {
        "content": "<p>Yeah, I understand what you mean. The feature does change the panic=abort semantics in a rather subtle way, so I guess I'm not surprised by the issues cropping up, but I don't know who's qualified to do the MIR review.</p>",
        "id": 243585232,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1624399885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/next.20steps/near/243582335\">said</a>:</p>\n<blockquote>\n<p>I believe the intention of the intrinsic is that it catches only <em>Rust</em> exceptions but other C++-style exceptions can unwind through <code>try</code>.</p>\n</blockquote>\n<p>According to <a href=\"https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html#unresolved-questions\">https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html#unresolved-questions</a>, \"the behavior of <code>catch_unwind</code> when a foreign exception encounters it is currently left undefined\", and it might \"let the exception pass through uncaught or catch some or all foreign exceptions\" in the future.</p>",
        "id": 243627708,
        "sender_full_name": "hyd-dev",
        "timestamp": 1624441152
    },
    {
        "content": "<p>Oh bjorn3 actually clarified this point. The part I was worried about was <code>try</code> in <code>panic=abort</code> mode having the wrong codegen, but actually if a C++ exception enters Rust code it'll either be UB earlier (since something was marked as <code>\"C\"</code> when it should have been <code>\"C-unwind\"</code> or it would have been caught-to-abort by Rust's ABI anyway. I think that means the <code>try</code> issue is no longer an issue.</p>\n<p>That still leaves, though, the <code>-Clto</code> issue and someone to sign off on the ramifications on the other MIR passes.</p>",
        "id": 243671872,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624463343
    },
    {
        "content": "<p>Do you know who would be qualified to sign off on the MIR stuff, or would you like me to look into that?</p>",
        "id": 243681276,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1624467593
    },
    {
        "content": "<p>I do not know unfortunately who would be able to sign-off on oit</p>",
        "id": 243696567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624474422
    },
    {
        "content": "<p>My own personal reading is that the other MIR bits that look at <code>panic=abort</code> are not consequential and can be ignored, but ideally need to be updated in the future.</p>",
        "id": 243696664,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624474448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> you can put the PR r? me if you want</p>",
        "id": 243889655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624610847
    },
    {
        "content": "<p>I'll try to take a look today and decide what I think about the MIR changes</p>",
        "id": 243889686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624610867
    }
]