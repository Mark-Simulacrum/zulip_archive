[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for writing those thoughts</p>",
        "id": 180220435,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573211603
    },
    {
        "content": "<p>I think there is also the issue of how \"fine grained\" we want to be with respect to the checks.</p>",
        "id": 180220540,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573211715
    },
    {
        "content": "<p>About FFI with C ( but the same could apply to Rust), users want to FFI with C APIs that unwind and also that do not unwind, and for both cases, they sometimes want to \"check\" that they behave like they expected.</p>",
        "id": 180220713,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573211919
    },
    {
        "content": "<p>That is, it is a reasonable use case to be able to interface with a C API that does not unwind, ever, without any checks.</p>",
        "id": 180220738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573211944
    },
    {
        "content": "<p>But it is also reasonable to want to maybe add checks in debug-builds, even for those, just in case, for example.</p>",
        "id": 180220749,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573211963
    },
    {
        "content": "<p>And from there we go to interfacing with APIs that can unwind, where it might be reasonable to insert checks with <code>-C panic=abort</code> to make sure they don't unwind, but where it might also be reasonable to not insert those checks in that case, or to even produce a compiler error when a user tries to compile a crate that uses them with <code>-C panic=abort</code> (why wait till run-time here? well, for some APIs, it can be that they do not unwind under certain conditions, and the user upholds those).</p>",
        "id": 180220823,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212029
    },
    {
        "content": "<p>I think that all those use cases are valid, and that some of them can be kind of addressed with the <code>nounwind</code> keyword, or the <code>unwind(...)</code> attribute (e.g. <code>#[cfg_attr(test, unwinds(abort))]</code>).</p>",
        "id": 180220922,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212160
    },
    {
        "content": "<p>The problem of using attributes for customizing this behavior is that then the types of your API (e.g. <code>extern \"C\"</code> vs <code>extern \"C unwind\"</code>) might depend on whether you are doing a debug or release build.</p>",
        "id": 180221007,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212245
    },
    {
        "content": "<p>So maybe using a flag, e.g., like <code>-C debug-assertions</code> to control the behavior without changing types might be better, but then we add another \"knob\" to the compiler.</p>",
        "id": 180221033,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212282
    },
    {
        "content": "<p>Although a reasonable behavior might be to, for <code>extern \"C unwind\"</code> declarations in <code>-C panic=abort</code> crates to insert abort-on-unwind shims only if <code>-C debug-assertions</code> is enabled for the crate, reusing that knob for that.</p>",
        "id": 180221077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> -- I just amended the doc a lot, but I didn't have time to read these comments of yours yet -- also, I deleted your hackmd comments from the doc since I think they <em>might</em> be addressed, and I don't know another way to \"resolve\" comments in hackmd (it's comment system kinda' sucks)</p>",
        "id": 180235360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224229
    },
    {
        "content": "<p>thanks, i'll take a look</p>",
        "id": 180235422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573224247
    },
    {
        "content": "<blockquote>\n<p>But it is also reasonable to want to maybe add checks in debug-builds, even for those, just in case, for example.</p>\n</blockquote>\n<p>on this note, I totally agree, that is a worthwhile variation to consider, rather like how we handle overflow (except that we don't consider it UB in release builds)</p>",
        "id": 180235437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224262
    },
    {
        "content": "<p>well, that said, I'm not sure if I like it. I think the key concern is that <code>-Cpanic=abort</code> is something imposed on a libary <strong>from the outside</strong> -- if the library is only compatible with one mode without UB (because it invokes foreign functions that unwind), we probably want to consider ways for it to declare that, versus just having it silently trigger UB. It feels.. different to me. Have to think about it.</p>",
        "id": 180235555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224352
    },
    {
        "content": "<p>Yeah, me too.</p>",
        "id": 180236791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225089
    },
    {
        "content": "<p>That's also why I'm not sure whether delaying an error in that case until run-time is the best solution either.</p>",
        "id": 180236808,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225110
    },
    {
        "content": "<p>If you compile a crate with <code>-C panic=abort</code> and then call a <code>extern \"C unwind\" { fn foo(); }</code> then, maybe you want a compilation error ?</p>",
        "id": 180236864,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225155
    },
    {
        "content": "<p>A compilation error wouldn't be great either, because people might end up having to work around that by doing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[cfg(panic = </span><span class=\"s\">&quot;abort&quot;</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(panic = </span><span class=\"s\">&quot;unwind&quot;</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C unwind&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which seems unnecessary.</p>",
        "id": 180237018,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225245
    },
    {
        "content": "<p>Yet there are different pros/cons of the compilation-error, run-time error, or just UB cases, and for certain uses I imagine wanting some of them at one point or another, so I don't see a clear winner.</p>",
        "id": 180237102,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225301
    },
    {
        "content": "<blockquote>\n<p>if the library is only compatible with one mode without UB (because it invokes foreign functions that unwind), we probably want to consider ways for it to declare that, versus just having it silently trigger UB. It feels.. different to me.</p>\n</blockquote>\n<p>I don't remember in which context this was discussed (maybe <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> does?), but I recall that it might be worth it to allow specifying that a crate only works with <code>-C panic=unwind</code>, for example, at the crate level.</p>",
        "id": 180237236,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225382
    },
    {
        "content": "<p>So that if you try to compile it with <code>-C panic=abort</code>, compilation fails.</p>",
        "id": 180237284,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225408
    },
    {
        "content": "<p>A different strategy might also be to solve this at the library level.</p>",
        "id": 180237366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225449
    },
    {
        "content": "<p>We can say that unwinding from a <code>\"C unwind\"</code> function with <code>-C panic=abort</code> \"unwinds\"</p>",
        "id": 180237394,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225471
    },
    {
        "content": "<p>and that this unwinding is UB if it deallocates Rust types without calling their destructors</p>",
        "id": 180237425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225488
    },
    {
        "content": "<p>(otherwise, there shouldn't really be an issue with it just unwinding - a <code>longjmp</code> with <code>-C panic=abort</code> does just that)</p>",
        "id": 180237461,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225511
    },
    {
        "content": "<p>We could then expose an <code>panic::abort_on_unwind&lt;F&gt;(F)</code> API  that can be used to call <code>F</code> and <code>abort</code> if it unwinds.</p>",
        "id": 180237587,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225577
    },
    {
        "content": "<p>And that can be implemented in a library, without any language support, by just using <code>catch_unwind</code>.</p>",
        "id": 180237630,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225610
    },
    {
        "content": "<p>(or a similar API that allows catching foreign exceptions)</p>",
        "id": 180237690,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225657
    },
    {
        "content": "<p>People can then build their own \"<code>abort_on_unwind&lt;F&gt;(F)</code>\"-like helpers that do what they want (e.g. <code>abort</code> only in debug builds).</p>",
        "id": 180237790,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573225719
    },
    {
        "content": "<blockquote>\n<p>The problem of using attributes for customizing this behavior is that then the types of your API (e.g. <code>extern \"C\"</code> vs <code>extern \"C unwind\"</code>) might depend on whether you are doing a debug or release build.</p>\n</blockquote>\n<p>I think if we are going with attributes, that it will not be reflected in the ABI. One or the other.</p>",
        "id": 180243753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229160
    },
    {
        "content": "<blockquote>\n<p>That's also why I'm not sure whether delaying an error in that case until run-time is the best solution either.</p>\n</blockquote>\n<p>Yes, I agree, and this is an argument in favor of making people <em>opt-in</em> to unwinding</p>",
        "id": 180243891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229220
    },
    {
        "content": "<p>but, as you say, the unwinding may be something that only occurs under certain runtime conditions --</p>",
        "id": 180244050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229303
    },
    {
        "content": "<p>and moreover, aborting may be the right response!</p>",
        "id": 180244055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229308
    },
    {
        "content": "<p>i.e., the whole point of <code>-Cpanic=abort</code> isn't that panics and fatal errors <em>never happen</em>, it's the we abort when they do</p>",
        "id": 180244073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229330
    },
    {
        "content": "<p>I don't really see the advantage of \"push this to the library level\"</p>",
        "id": 180244095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229342
    },
    {
        "content": "<p>That just seems like the existing \"C\" approach to me</p>",
        "id": 180244112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229354
    },
    {
        "content": "<p>Or, put another way, that seems like it has precisely the problem that <code>-Cpanic=abort</code> kind of pushes UB onto libraries, and that people may fail to prepare properly for that.</p>",
        "id": 180244150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229385
    },
    {
        "content": "<p>Thinking more about the \"debugmode aborts\", I think that would be a good thing to do for calls to functions where it is UB for them to unwind</p>",
        "id": 180244202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229403
    },
    {
        "content": "<p>(but not in optimized builds)</p>",
        "id": 180244219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229411
    },
    {
        "content": "<p>but I don't think it's answer to the question of <code>-Cpanic=abort</code> inducing UB \"from the outside\". I think an answer there has to be one where it is hard to do it wrong.</p>",
        "id": 180244255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229436
    },
    {
        "content": "<blockquote>\n<p>I don't remember in which context this was discussed (maybe <span class=\"user-mention silent\" data-user-id=\"120076\">Kyle Strand</span> does?), but I recall that it might be worth it to allow specifying that a crate only works with <code>-C panic=unwind</code>, for example, at the crate level.</p>\n</blockquote>\n<p>The only discussion I remember along these lines was in RFC <a href=\"https://github.com/rust-lang/rust/issues/2699\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2699\">#2699</a>.</p>",
        "id": 180285149,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573257755
    }
]