[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> moving the \"FFI is not a sandbox\" conversation here</p>",
        "id": 180783324,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771087
    },
    {
        "content": "<p>Here's the way I formulated the \"not supposed to change behavior or protect the caller\" idea in my conversation earlier:</p>\n<ul>\n<li>FFI (in any language) should not protect the user from well-defined parts of the ABI being used, <em>even if</em> those parts of the ABI are \"problematic\" in some way (as exceptions arguably are), <em>but</em>...</li>\n<li>Protecting the user from undefined behavior is part of Rust's core values, and FFI is not <em>inherently</em> an opt-out from that protection.</li>\n</ul>",
        "id": 180783428,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771192
    },
    {
        "content": "<p>I agree these are still not really fully-fleshed-out opinions, let alone statements of fact.</p>",
        "id": 180783499,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771220
    },
    {
        "content": "<p>Well they are statements, but without justification ^^</p>",
        "id": 180783534,
        "sender_full_name": "centril",
        "timestamp": 1573771248
    },
    {
        "content": "<p>But I would say that they \"sound right\"  to me.</p>",
        "id": 180783537,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771252
    },
    {
        "content": "<p>Do you have specific objections to either claim, or do you just want to see a justification before deciding whether or not you agree?</p>",
        "id": 180783586,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771292
    },
    {
        "content": "<p>I think those are too coarse statements and not sufficiently nuanced</p>",
        "id": 180783722,
        "sender_full_name": "centril",
        "timestamp": 1573771389
    },
    {
        "content": "<p>splitting ABIs, adding shims, etc. is in my view perfectly legitimate in the interest of e.g. soundness, perf, etc.</p>",
        "id": 180783770,
        "sender_full_name": "centril",
        "timestamp": 1573771430
    },
    {
        "content": "<p>So, \"soundness\" is covered in the second bullet point.</p>",
        "id": 180783822,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771446
    },
    {
        "content": "<p>I'm not sure I see how shims could ever _improve_ performance.</p>",
        "id": 180783837,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771459
    },
    {
        "content": "<p>Didn't feel that way to me but ok</p>",
        "id": 180783854,
        "sender_full_name": "centril",
        "timestamp": 1573771472
    },
    {
        "content": "<p>But that's certainly an aspect of the question I hadn't even considered.</p>",
        "id": 180783859,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>  well the nounwind assumption would, but it wouldn't ostensibly cover \"the whole ABI\"</p>",
        "id": 180783930,
        "sender_full_name": "centril",
        "timestamp": 1573771529
    },
    {
        "content": "<p>nounwind isn't really a \"shim\", though, is it?</p>",
        "id": 180783950,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771553
    },
    {
        "content": "<p>Re: soundness, could you suggest an alternate phrasing of the second bullet point that does make it clear?</p>",
        "id": 180784025,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> not sure why you are linking perf and shims</p>",
        "id": 180784030,
        "sender_full_name": "centril",
        "timestamp": 1573771582
    },
    {
        "content": "<p>(I didn't)</p>",
        "id": 180784040,
        "sender_full_name": "centril",
        "timestamp": 1573771590
    },
    {
        "content": "<blockquote>\n<p>Protecting the user from undefined behavior (e.g. via an abort shim, in case you mess up) and maintaining soundness is part of Rust's core values, and FFI is not inherently an opt-out from that protection.</p>\n</blockquote>",
        "id": 180784118,
        "sender_full_name": "centril",
        "timestamp": 1573771645
    },
    {
        "content": "<p>\"Splitting ABIs, adding shims, etc ... perf, etc\" </p>\n<p>Was the performance consideration only meant to apply to \"splitting ABIs\", then?</p>",
        "id": 180784130,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771652
    },
    {
        "content": "<p>sure; nounwind &amp; friends</p>",
        "id": 180784149,
        "sender_full_name": "centril",
        "timestamp": 1573771669
    },
    {
        "content": "<p>Okay. My first impulse is to say that that's not really subject to the \"not a sandbox\" objection.</p>",
        "id": 180784247,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771723
    },
    {
        "content": "<p>Isn't \"maintaining soundness\" covered by \"protecting the user from undefined behavior\"?</p>",
        "id": 180784305,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771780
    },
    {
        "content": "<p>or implied by, rather</p>",
        "id": 180784313,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771785
    },
    {
        "content": "<p>depends on whether you are talking about the safe or unsafe fragment</p>",
        "id": 180784323,
        "sender_full_name": "centril",
        "timestamp": 1573771798
    },
    {
        "content": "<p>I'm a bit lost. \"unsafe fragment\"?</p>",
        "id": 180784390,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771819
    },
    {
        "content": "<p>the abort shim protects you from UB even in unsafe code; but it also maintains soundness</p>",
        "id": 180784435,
        "sender_full_name": "centril",
        "timestamp": 1573771848
    },
    {
        "content": "<p>one could ostensibly not have that shim for unsafe code, or only for unsafe code</p>",
        "id": 180784485,
        "sender_full_name": "centril",
        "timestamp": 1573771886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> either case, the soundness/UB point does poke a hole in \"not a sandbox\" pretty well</p>",
        "id": 180784514,
        "sender_full_name": "centril",
        "timestamp": 1573771914
    },
    {
        "content": "<p>Yeah, that's why I'm trying to reformulate the objection without using the word \"sandbox\"; it's far too vague.</p>",
        "id": 180784601,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573771953
    },
    {
        "content": "<p>It's a metaphor that I believe helped me understand Nick's concern, but I fully agree it's not adequate!</p>",
        "id": 180784651,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772005
    },
    {
        "content": "<p>But I think the first point stands:</p>",
        "id": 180784667,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772020
    },
    {
        "content": "<p>_If_ it is true that exceptions are a well-defined part of an ABI, then I would agree with Nick that it's not a good idea to change the semantics of functions that <code>throw</code> by changing their ABI strings when calling them from Rust.</p>",
        "id": 180784778,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772080
    },
    {
        "content": "<p>\"in any language\" makes the claim also extraordinarily strong -- maybe one of these languages can't even make full use of the ABI representable without a lot of cost</p>",
        "id": 180784789,
        "sender_full_name": "centril",
        "timestamp": 1573772085
    },
    {
        "content": "<p>...then it shouldn't expose that ABI.</p>",
        "id": 180784836,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772111
    },
    {
        "content": "<p>The negative way to phrase it would be: exposing an ABI but leaving out well-defined parts of that ABI is essentially failing to expose that ABI.</p>",
        "id": 180784938,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772163
    },
    {
        "content": "<p>I don't see why \"ABI with restrictions\" is illegitimate</p>",
        "id": 180784943,
        "sender_full_name": "centril",
        "timestamp": 1573772164
    },
    {
        "content": "<p>Well, partly I would say it fails the principle of least surprise, especially if the mechanism for specifying the ABI gives no indication that the ABI isn't fully supported.</p>",
        "id": 180785097,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772269
    },
    {
        "content": "<p>that's one consideration</p>",
        "id": 180785213,
        "sender_full_name": "centril",
        "timestamp": 1573772323
    },
    {
        "content": "<p>I.e. if the ABI string were <code>itanium</code>, where exceptions are <em>definitely</em> well defined (per the spec), one would expect that ABI to support exceptions.</p>",
        "id": 180785218,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772324
    },
    {
        "content": "<p>well in this case the ABI string is different</p>",
        "id": 180785282,
        "sender_full_name": "centril",
        "timestamp": 1573772362
    },
    {
        "content": "<p>Another is the one that <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> has been expressing, i.e., there's an appropriate way to restrict behavior/effects, but doing so via \"ABIs with restrictions\" is in some way suboptimal. (I don't want to try to paraphrase the reasoning here.)</p>",
        "id": 180785384,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772408
    },
    {
        "content": "<p>The main ABI string we're concerned about is <code>extern \"C\"</code>, though. The ABI string is not different.</p>",
        "id": 180785420,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772431
    },
    {
        "content": "<p>I'm familiar with their concerns re. effects <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180785480,
        "sender_full_name": "centril",
        "timestamp": 1573772475
    },
    {
        "content": "<p>There's sort of a \"strong objection\" to \"ABI with restrictions\", which is that they shouldn't exist <em>at all</em>; it sounds to me like Nick (the originator of the \"sandbox\" quote) is in this camp.</p>\n<p>Then, there's a \"weak objection\", which is that \"ABI with restrictions\" is valid but must be explicit.</p>",
        "id": 180785528,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772510
    },
    {
        "content": "<p>I'm not sure how much my personal opinion on the issue matters, but just so you know where I stand at the moment: I definitely agree with the \"weak objection\" stance that FFI mechanisms shouldn't implicitly disable well-defined parts of an ABI; I am currently on the fence with regard to the \"strong objection\" that e.g. <code>extern \"C nounwind\"</code> is illegitimate.</p>",
        "id": 180785674,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772609
    },
    {
        "content": "<p>That much was clear ^^</p>",
        "id": 180785782,
        "sender_full_name": "centril",
        "timestamp": 1573772669
    },
    {
        "content": "<p>Anyway, the third consideration is that any well-defined part of an ABI is a means of translating program semantics into program behavior. C++ uses exceptions in this way, and somewhere between \"most\" and \"all\" ABIs consider this mechanism well-defined.</p>",
        "id": 180785820,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772705
    },
    {
        "content": "<p>So, suppressing that feature of the ABI potentially changes the semantics of functions called via FFI, in a way that is both silent (e.g. you wouldn't get a warning at compile time or anything like that) and non-enforceable (i.e. the ABI exposed by C++ has no way of indicating whether or not an exception might be thrown).</p>",
        "id": 180785978,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573772839
    },
    {
        "content": "<p>I'll head off to bed but please do continue your points</p>",
        "id": 180786119,
        "sender_full_name": "centril",
        "timestamp": 1573772941
    },
    {
        "content": "<p>Fair enough. I think that's all I have.</p>",
        "id": 180786241,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573773011
    },
    {
        "content": "<p>So to summarize (mostly for future reference when I'm writing up a summary later), the objections to \"protecting the user from well-defined parts of the ABI\" are:</p>\n<ul>\n<li>principle of least surprise (ABIs are shared between languages; we shouldn't expect them to behave differently between languages)</li>\n<li>\"this is an implicit effects mechanism\"</li>\n<li>changes to semantics of foreign languages<p>- silent<br>\n- unenforceable</p>\n</li>\n</ul>",
        "id": 180786260,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573773039
    },
    {
        "content": "<p>Thanks for the discussion!</p>",
        "id": 180786279,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573773055
    }
]