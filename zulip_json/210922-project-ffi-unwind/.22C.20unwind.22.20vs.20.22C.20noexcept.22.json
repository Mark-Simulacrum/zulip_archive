[
    {
        "content": "<p>So it seems like the arguments in <a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw?view\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw?view\">this hackmd document</a> are fairly complete. Based on this, I personally find the argument in favor of the current setup (\"C\" does not permit unwinding, \"C unwind\" does) more compelling. To me, the killer argument is the point around safety and the interaction with <code>-Zpanic=abort</code>.</p>",
        "id": 179273421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572295236
    },
    {
        "content": "<p>At least in our last meeting, the lang team seemed to agree.</p>",
        "id": 179273441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572295252
    },
    {
        "content": "<p>Based on this, I'm wondering if we should declare this a finalized decision as well -- that would unlock us to move forward with a 0th RFC that includes the \"C unwind\" ABI.</p>",
        "id": 179273473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572295276
    },
    {
        "content": "<p>Er, I forgot about <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>'s comment earlier</p>\n<blockquote>\n<p>Josh Triplett: I just read through this whole thread, and the idea of allowing unwinding by default seems reasonable to me.</p>\n</blockquote>\n<p>so perhaps I am speaking too soon. Seems to argue in favor of doing the minimal \"just create the group\" RFC, just to make progress.</p>",
        "id": 179274139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572295749
    },
    {
        "content": "<p>I think <code>\"C unwind\"</code> would have the exact same concerns regarding <code>-Zpanic=abort</code>. In fact, I have been thinking of the question of <code>extern \"C\"</code>'s behavior in terms of whether or not <code>extern \"C\"</code> should be an alias for <code>extern \"C unwind\"</code>. (I realize that's not the only possibility discussed in that document, but I think it highlights the need to design <code>\"C unwind\"</code> with all due safety considerations, etc, regardless of how we treat <code>\"C\"</code>.)</p>",
        "id": 179274334,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572295862
    },
    {
        "content": "<p>I think the \"just create the group\" RFC is the right approach. Combining a governance issue with technical issues increasingly seems like a recipe for another very confusing GitHub thread.</p>",
        "id": 179274497,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572295942
    },
    {
        "content": "<blockquote>\n<p>I think <code>\"C unwind\"</code> would have the exact same concerns regarding <code>-Zpanic=abort</code></p>\n</blockquote>\n<p>I cover this in the doc: I think it's quite different. The key point is that extern \"C\" leaves it, in some sense, <em>ambiguous</em> whether unwinding occurs -- it claims that it might, but de facto it rarely does.</p>",
        "id": 179277978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298210
    },
    {
        "content": "<p>In contrast, \"C unwind\" would only be used where unwinding is <em>expected</em></p>",
        "id": 179278000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298227
    },
    {
        "content": "<p>This in turn means that we can insert shims to catch unwinding and abort without undue code size increase</p>",
        "id": 179278039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298262
    },
    {
        "content": "<p>(That said, I think it would be interesting to see real data here)</p>",
        "id": 179278060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298278
    },
    {
        "content": "<blockquote>\n<p>(That said, I think it would be interesting to see real data here)</p>\n</blockquote>\n<p>Agreed. I don't want to accidentally design ourselves into a corner in such a way that we can't add optimizations in the future, but optimizations without data don't seem like a good basis for selecting default behaviors.</p>",
        "id": 179278695,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572298773
    },
    {
        "content": "<p>(There are other arguments, all similar -- the core question is which aligns more closely with <em>reality</em>)</p>",
        "id": 179278807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298837
    },
    {
        "content": "<p>( I don't think it's right to frame it as <em>just</em> an optimization question )</p>",
        "id": 179278834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298858
    },
    {
        "content": "<p>(specifically, the question of auditing and reasoning)</p>",
        "id": 179278960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298941
    },
    {
        "content": "<p>One thing that struck me was when <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> mentioned that if we switched the default, he'd probably just do extern \"C noexcept\" for all functions in Fuschia.</p>",
        "id": 179278988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298966
    },
    {
        "content": "<p>which, in some sense, is fine...</p>",
        "id": 179279016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298982
    },
    {
        "content": "<p>anyway</p>",
        "id": 179279030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572298991
    },
    {
        "content": "<p>I'd actually prefer that. If Rust had a benevolent dictator and I were that dictator, I'd just deprecate <code>extern \"C\"</code> and everyone would need to pick between <code>\"C unwind\"</code> and <code>\"C nounwind\"</code>.</p>",
        "id": 179280132,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572299793
    },
    {
        "content": "<p>Also the keyword would be changed to <code>abi</code> for function definitions, while keeping <code>extern</code> for \"import-like\" declarations</p>",
        "id": 179280165,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572299828
    },
    {
        "content": "<blockquote>\n<p>One thing that struck me was when @Taylor Cramer mentioned that if we switched the default, he'd probably just do extern \"C noexcept\" for all functions in Fuschia.</p>\n</blockquote>\n<p>Not only fuchsia. I'd need to do the same on <code>libc</code>, which includes Fuchsia support, and that would mean that this is done for all platforms that Rust currently supports. That would be an API breaking change on all platforms: anyone taking function pointers to <code>libc</code> functions would need to update their code to use <code>extern \"C noexcept\"</code> instead unless we provide implicit coercions, but that alone won't be enough to avoid a breaking change and  <code>libc</code> would need a new major release, which means that the ecosystem would be broken until all crates update, but crates need to update in order, etc.</p>",
        "id": 179306991,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572335474
    },
    {
        "content": "<p>So we probably would need to figure out a way of adding support for two incompatible versions of a C-linking dependency to cargo or similar features to avoid a lot of pain.</p>",
        "id": 179307259,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572335792
    },
    {
        "content": "<p>Would it be a breaking change to change functions which are cancellation points in libc to <code>extern \"C unwind\"</code>?</p>",
        "id": 179321113,
        "sender_full_name": "Amanieu",
        "timestamp": 1572349354
    },
    {
        "content": "<p>Yes, that's also a breaking change.</p>",
        "id": 179321284,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572349560
    },
    {
        "content": "<p>I'd like to be able to say it would be a much smaller breaking change, but I don't think that's the case. There are not that many cancellation points, but they are used by a lot of crates.</p>",
        "id": 179321381,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572349628
    },
    {
        "content": "<p>With implicit coercions we could try to roll in those changes and see what happens, but there are a couple of things that implicit coercions don't cover.</p>",
        "id": 179321474,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572349716
    },
    {
        "content": "<p>e.g. <code>impl Trait for extern \"C\" fn(...) { }</code> wouldn't implement <code>Trait</code> for  the cancellation points if we make them <code>extern \"C unwind\"</code> anymore</p>",
        "id": 179321514,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572349758
    },
    {
        "content": "<p>I've seen code like that in the wild (e.g. in the <code>libm</code> testing crates), but it did not apply to any cancellation points</p>",
        "id": 179321654,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572349906
    },
    {
        "content": "<blockquote>\n<p>I'd like to be able to say it would be a much smaller breaking change, but I don't think that's the case. There are not that many cancellation points, but they are used by a lot of crates.</p>\n</blockquote>\n<p>This is an interesting consideration that is not covered in the existing doc</p>",
        "id": 179383580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572389246
    },
    {
        "content": "<p>However, <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>, another option would be to export those functions via a (deprecated) wrapper that (e.g.) aborts on unwind, and expose the <em>real</em> functions some other way</p>",
        "id": 179383685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572389298
    },
    {
        "content": "<p>(and perhaps also offer a major version bump that corrects the issue)</p>",
        "id": 179383705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572389312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, maybe. We should explore how to land this on libc. A problem with wrappers is that the address of the original libc function gets lost, and that could be a breaking change (e.g. if people are getting the address of the function, and then using <code>dlsym</code> or similar to figure out if its actually linked or if the <code>libc</code> is too old).</p>",
        "id": 179411298,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424496
    },
    {
        "content": "<blockquote>\n<p>(and perhaps also offer a major version bump that corrects the issue)</p>\n</blockquote>\n<p>We currently can't. <code>libc</code> links C libraries, and is linked as part of the rustc run-time, that is, it is part of a crates dependency graph if that crate links <code>liballoc</code> or <code>libstd</code>.</p>",
        "id": 179411379,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424571
    },
    {
        "content": "<p>IIRC, the only reason one can link <code>libc</code> from <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> is because it has the same major version as the one that's linked by <code>libstd</code>.</p>",
        "id": 179411395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424611
    },
    {
        "content": "<p>If we bump the major version of <code>libc</code>, then the versions in <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> and libstd are incompatible.</p>",
        "id": 179411421,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424633
    },
    {
        "content": "<p>This means that you can't use the slightly older <code>libc</code> crate with <code>libstd</code> anymore.</p>",
        "id": 179411441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424655
    },
    {
        "content": "<p>and that if you are in an older Rust toolchain, you can't use crates using the newer <code>libc</code> anymore.</p>",
        "id": 179411447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424673
    },
    {
        "content": "<p>IIRC when <code>libc</code> was bumped from <code>0.1</code> to <code>0.2</code> this required an ecosystem wide upgrade.</p>",
        "id": 179411506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424706
    },
    {
        "content": "<p>Everyone had to migrate their crates to use the latest Rust toolchain, and the latest libc version, and nothing older would work with those versions of those crates, and there are no \"facade-crate\" workarounds that one can use to avoid that.</p>",
        "id": 179411532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ^^^^^^ this is at least what I recollected from back then, I'm not sure if something has fundamentally changed  in the toolchain since that might allow us to handle this.</p>",
        "id": 179411618,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572424816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think it woud be useful to have a list of all the functions that you know can unwind --</p>",
        "id": 179427952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440174
    },
    {
        "content": "<p>is it <em>all</em> pthread APIs?</p>",
        "id": 179427969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440187
    },
    {
        "content": "<p>I'm not sure how pthread cancellation works</p>",
        "id": 179427985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440196
    },
    {
        "content": "<p>any time I've needed that sort of mechanism I always built it myself</p>",
        "id": 179428004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440211
    },
    {
        "content": "<p>there is a list, wait</p>",
        "id": 179428181,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440354
    },
    {
        "content": "<p><a href=\"http://man7.org/linux/man-pages/man7/pthreads.7.html\" target=\"_blank\" title=\"http://man7.org/linux/man-pages/man7/pthreads.7.html\">http://man7.org/linux/man-pages/man7/pthreads.7.html</a></p>",
        "id": 179428200,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440371
    },
    {
        "content": "<p>See \"cancellation points\" there</p>",
        "id": 179428209,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440377
    },
    {
        "content": "<blockquote>\n<p>I'm not sure how pthread cancellation works</p>\n</blockquote>\n<p>It pretty much works like a garbage collector would, it can only kick in when the current thread yields control to the \"runtime\"</p>",
        "id": 179428319,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440438
    },
    {
        "content": "<p>in this case the runtime is the C library, so pretty much all functions in the C library are cancellation points, e.g., <code>open</code>, or <code>poll</code>, etc.</p>",
        "id": 179428404,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440483
    },
    {
        "content": "<p>I don't know what happens if the thread that gets cancelled doesn't call one of those cancellation points for a while</p>",
        "id": 179428480,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> might know</p>",
        "id": 179428544,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440585
    },
    {
        "content": "<p>IIRC an implementation can in some cases send a signal, and kill the thread if it isn't caught, but..</p>",
        "id": 179428566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440609
    },
    {
        "content": "<p>I don't know if any implementation actually does that</p>",
        "id": 179428577,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440619
    },
    {
        "content": "<p>Full ist:</p>\n<div class=\"codehilite\"><pre><span></span>     The following functions are required to be cancellation points by\n       POSIX.1-2001 and/or POSIX.1-2008:\n\n           accept()\n           aio_suspend()\n           clock_nanosleep()\n           close()\n           connect()\n           creat()\n           fcntl() F_SETLKW\n           fdatasync()\n           fsync()\n           getmsg()\n           getpmsg()\n           lockf() F_LOCK\n           mq_receive()\n           mq_send()\n           mq_timedreceive()\n           mq_timedsend()\n           msgrcv()\n           msgsnd()\n           msync()\n           nanosleep()\n           open()\n           openat() [Added in POSIX.1-2008]\n           pause()\n           poll()\n           pread()\n           pselect()\n           pthread_cond_timedwait()\n           pthread_cond_wait()\n           pthread_join()\n           pthread_testcancel()\n           putmsg()\n           putpmsg()\n           pwrite()\n           read()\n           readv()\n           recv()\n           recvfrom()\n           recvmsg()\n           select()\n           sem_timedwait()\n           sem_wait()\n           send()\n           sendmsg()\n           sendto()\n           sigpause() [POSIX.1-2001 only (moves to &quot;may&quot; list in POSIX.1-2008)]\n           sigsuspend()\n           sigtimedwait()\n           sigwait()\n           sigwaitinfo()\n           sleep()\n           system()\n           tcdrain()\n           usleep() [POSIX.1-2001 only (function removed in POSIX.1-2008)]\n           wait()\n           waitid()\n           waitpid()\n           write()\n           writev()\n\n       The following functions may be cancellation points according to\n       POSIX.1-2001 and/or POSIX.1-2008:\n\n           access()\n           asctime()\n           asctime_r()\n           catclose()\n           catgets()\n           catopen()\n           chmod() [Added in POSIX.1-2008]\n           chown() [Added in POSIX.1-2008]\n           closedir()\n           closelog()\n           ctermid()\n           ctime()\n           ctime_r()\n           dbm_close()\n           dbm_delete()\n           dbm_fetch()\n           dbm_nextkey()\n           dbm_open()\n           dbm_store()\n           dlclose()\n           dlopen()\n           dprintf() [Added in POSIX.1-2008]\n           endgrent()\n           endhostent()\n           endnetent()\n           endprotoent()\n           endpwent()\n           endservent()\n           endutxent()\n           faccessat() [Added in POSIX.1-2008]\n           fchmod() [Added in POSIX.1-2008]\n           fchmodat() [Added in POSIX.1-2008]\n           fchown() [Added in POSIX.1-2008]\n           fchownat() [Added in POSIX.1-2008]\n           fclose()\n           fcntl() (for any value of cmd argument)\n           fflush()\n           fgetc()\n           fgetpos()\n           fgets()\n           fgetwc()\n           fgetws()\n           fmtmsg()\n           fopen()\n           fpathconf()\n           fprintf()\n           fputc()\n           fputs()\n           fputwc()\n           fputws()\n           fread()\n           freopen()\n           fscanf()\n           fseek()\n           fseeko()\n           fsetpos()\n           fstat()\n           fstatat() [Added in POSIX.1-2008]\n           ftell()\n           ftello()\n           ftw()\n           futimens() [Added in POSIX.1-2008]\n           fwprintf()\n           fwrite()\n           fwscanf()\n           getaddrinfo()\n           getc()\n           getc_unlocked()\n           getchar()\n           getchar_unlocked()\n           getcwd()\n           getdate()\n           getdelim() [Added in POSIX.1-2008]\n           getgrent()\n           getgrgid()\n           getgrgid_r()\n           getgrnam()\n           getgrnam_r()\n           gethostbyaddr() [SUSv3 only (function removed in POSIX.1-2008)]\n           gethostbyname() [SUSv3 only (function removed in POSIX.1-2008)]\n           gethostent()\n           gethostid()\n           gethostname()\n           getline() [Added in POSIX.1-2008]\n           getlogin()\n           getlogin_r()\n           getnameinfo()\n           getnetbyaddr()\n           getnetbyname()\n           getnetent()\n           getopt() (if opterr is nonzero)\n           getprotobyname()\n           getprotobynumber()\n           getprotoent()\n           getpwent()\n           getpwnam()\n           getpwnam_r()\n           getpwuid()\n           getpwuid_r()\n           gets()\n           getservbyname()\n           getservbyport()\n           getservent()\n           getutxent()\n           getutxid()\n           getutxline()\n           getwc()\n           getwchar()\n           getwd() [SUSv3 only (function removed in POSIX.1-2008)]\n           glob()\n           iconv_close()\n           iconv_open()\n           ioctl()\n           link()\n           linkat() [Added in POSIX.1-2008]\n           lio_listio() [Added in POSIX.1-2008]\n           localtime()\n           localtime_r()\n           lockf() [Added in POSIX.1-2008]\n           lseek()\n           lstat()\n           mkdir() [Added in POSIX.1-2008]\n           mkdirat() [Added in POSIX.1-2008]\n           mkdtemp() [Added in POSIX.1-2008]\n           mkfifo() [Added in POSIX.1-2008]\n           mkfifoat() [Added in POSIX.1-2008]\n           mknod() [Added in POSIX.1-2008]\n           mknodat() [Added in POSIX.1-2008]\n           mkstemp()\n           mktime()\n           nftw()\n           opendir()\n           openlog()\n           pathconf()\n           pclose()\n           perror()\n           popen()\n           posix_fadvise()\n           posix_fallocate()\n           posix_madvise()\n           posix_openpt()\n           posix_spawn()\n           posix_spawnp()\n           posix_trace_clear()\n           posix_trace_close()\n           posix_trace_create()\n           posix_trace_create_withlog()\n           posix_trace_eventtypelist_getnext_id()\n           posix_trace_eventtypelist_rewind()\n           posix_trace_flush()\n           posix_trace_get_attr()\n           posix_trace_get_filter()\n           posix_trace_get_status()\n           posix_trace_getnext_event()\n           posix_trace_open()\n           posix_trace_rewind()\n           posix_trace_set_filter()\n           posix_trace_shutdown()\n           posix_trace_timedgetnext_event()\n           posix_typed_mem_open()\n           printf()\n           psiginfo() [Added in POSIX.1-2008]\n           psignal() [Added in POSIX.1-2008]\n           pthread_rwlock_rdlock()\n           pthread_rwlock_timedrdlock()\n           pthread_rwlock_timedwrlock()\n           pthread_rwlock_wrlock()\n           putc()\n           putc_unlocked()\n           putchar()\n           putchar_unlocked()\n           puts()\n           pututxline()\n           putwc()\n           putwchar()\n           readdir()\n           readdir_r()\n           readlink() [Added in POSIX.1-2008]\n           readlinkat() [Added in POSIX.1-2008]\n           remove()\n           rename()\n           renameat() [Added in POSIX.1-2008]\n           rewind()\n           rewinddir()\n           scandir() [Added in POSIX.1-2008]\n           scanf()\n           seekdir()\n           semop()\n           setgrent()\n           sethostent()\n           setnetent()\n           setprotoent()\n           setpwent()\n           setservent()\n           setutxent()\n           sigpause() [Added in POSIX.1-2008]\n           stat()\n           strerror()\n           strerror_r()\n           strftime()\n           symlink()\n           symlinkat() [Added in POSIX.1-2008]\n           sync()\n           syslog()\n           tmpfile()\n           tmpnam()\n           ttyname()\n           ttyname_r()\n           tzset()\n           ungetc()\n           ungetwc()\n           unlink()\n           unlinkat() [Added in POSIX.1-2008]\n           utime() [Added in POSIX.1-2008]\n           utimensat() [Added in POSIX.1-2008]\n           utimes() [Added in POSIX.1-2008]\n           vdprintf() [Added in POSIX.1-2008]\n           vfprintf()\n           vfwprintf()\n           vprintf()\n           vwprintf()\n           wcsftime()\n           wordexp()\n           wprintf()\n           wscanf()\n</pre></div>",
        "id": 179428739,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440718
    },
    {
        "content": "<p>My rule of thumb is that, if some operation of the POSIX or C library APIs can result in a context switch to the kernel, the it is probably a cancellation point. That's a lot of operations.</p>",
        "id": 179428900,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572440826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I don't think that characterization of a major-version upgrade is quite right, and I think the next version can go much more smoothly than the last. It sort of depends on the specifics, but it's not so bad that everyone has to upgrade their rustc</p>",
        "id": 179435216,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572444579
    },
    {
        "content": "<p>Basically cancellation works like this:<br>\n1) <code>pthread_cancel</code> sends a signal to the thread being canceled.<br>\n2) The signal handler sets a flag in thread-local storage and returns.<br>\n3) If the thread was in a system call, that system call is automatically interrupted by the signal.<br>\n4) At cancellation points, glibc checks this flag and triggers unwinding if it is set.</p>",
        "id": 179435376,
        "sender_full_name": "Amanieu",
        "timestamp": 1572444676
    },
    {
        "content": "<p>There is also <code>PTHREAD_CANCEL_ASYNCHRONOUS</code>, which unwinds directly from the signal handler (without needing a cancellation point). But this is horribly unsafe and the man page says that this is only safe to use if the thread does not call <em>any</em> libc functions.</p>",
        "id": 179435666,
        "sender_full_name": "Amanieu",
        "timestamp": 1572444822
    },
    {
        "content": "<blockquote>\n<p>I don't think that characterization of a major-version upgrade is quite right, and I think the next version can go much more smoothly than the last.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> do you remember exactly what caused so much pain last time ?</p>",
        "id": 179435862,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572444935
    },
    {
        "content": "<p>Looking at the libc crate, the crate does not use the <code>links = </code> key in the Cargo.toml, so there should not be a conflict in dependency resolution due to it.</p>",
        "id": 179435951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572444977
    },
    {
        "content": "<p>The only places where things are linked are in the <code>extern \"C\" { ... }</code> blocks using link flags</p>",
        "id": 179435998,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445008
    },
    {
        "content": "<p>but that should not cause any troubles across major version releases</p>",
        "id": 179436053,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> the pain point is that <code>libc01::c_void</code> was a different type than <code>libc02::c_void</code>, so if you used <code>*mut c_void</code> in your public API then everyone had to upgrade at the same time to get everyone to agree on <code>c_void</code> (or any other libc type in the public API)</p>",
        "id": 179436086,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445075
    },
    {
        "content": "<p>that point specifically is now fixed with <code>core::ffi::c_void</code></p>",
        "id": 179436128,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445082
    },
    {
        "content": "<p>functions themselves don't matter, it's the public types being shared across libc versions</p>",
        "id": 179436162,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445101
    },
    {
        "content": "<p>and <code>c_void</code> was the <a href=\"https://github.com/rust-lang/rust/issues/1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/1\">#1</a> through like <a href=\"https://github.com/rust-lang/rust/issues/1000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/1000\">#1000</a> reason why it was so common</p>",
        "id": 179436176,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445111
    },
    {
        "content": "<p>yes libc now uses core::ffi::c_void</p>",
        "id": 179436208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445132
    },
    {
        "content": "<p>so a transition to 1.0 won't exactly be smooth but it won't be as bad as the last, or at least that's theorized</p>",
        "id": 179436225,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445136
    },
    {
        "content": "<p>the other types haven't changed either</p>",
        "id": 179436266,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445156
    },
    {
        "content": "<p>then there shouldn't be a problem at all in doing a new libc release</p>",
        "id": 179436290,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445172
    },
    {
        "content": "<p>ah, no wait</p>",
        "id": 179436322,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445201
    },
    {
        "content": "<p>(FWIW if a new libc release is being done this is something I think we'll want to coordinate with folks, this shouldn't just happen off-hand)</p>",
        "id": 179436367,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445207
    },
    {
        "content": "<p>but the issue is not that the types didn't change but that they're defined in two crates</p>",
        "id": 179436386,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> if I release libc 0.3, then <code>libc::03::c_int</code> is a different type that <code>libc::02::c_int</code></p>",
        "id": 179436396,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445223
    },
    {
        "content": "<p>That's not quite true b/c <code>c_int</code> is a type alias to <code>i32</code></p>",
        "id": 179436416,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445238
    },
    {
        "content": "<p>so anyone using those for interoperation will run into issues</p>",
        "id": 179436419,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445241
    },
    {
        "content": "<p>so it resolves to the same type</p>",
        "id": 179436420,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445242
    },
    {
        "content": "<p>something like <code>struct Dl_info</code>, however, will be different even though it didn't change</p>",
        "id": 179436440,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445256
    },
    {
        "content": "<p>ok, so it only impacts the struct types</p>",
        "id": 179436442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445259
    },
    {
        "content": "<p>or the <code>enum File {}</code></p>",
        "id": 179436447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445263
    },
    {
        "content": "<p>(but again let's discuss specifics before it actually hapens)</p>",
        "id": 179436454,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445266
    },
    {
        "content": "<p>right yeah</p>",
        "id": 179436457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445267
    },
    {
        "content": "<p>I see</p>",
        "id": 179436463,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445273
    },
    {
        "content": "<p>do you want to release libc 0.3 soon?</p>",
        "id": 179436465,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445273
    },
    {
        "content": "<p>no</p>",
        "id": 179436470,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445278
    },
    {
        "content": "<p>ah ok</p>",
        "id": 179436475,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445282
    },
    {
        "content": "<p>I just though things were worse than they are</p>",
        "id": 179436482,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445286
    },
    {
        "content": "<p>nah yeah we're in a way better position than before</p>",
        "id": 179436489,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445296
    },
    {
        "content": "<p>especially with <code>c_void</code> solved</p>",
        "id": 179436501,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445306
    },
    {
        "content": "<p>and all typedefs go to the same base integer types</p>",
        "id": 179436508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572445312
    },
    {
        "content": "<p>yes, type aliases help here for better or worse</p>",
        "id": 179436618,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445362
    },
    {
        "content": "<p>this looks pretty much as good as it is going to get</p>",
        "id": 179436648,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445384
    },
    {
        "content": "<p>every major release is going to cause the incompatibility with the types unless we use the semver trick</p>",
        "id": 179436673,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445405
    },
    {
        "content": "<p>(e.g. libc 0.3 depends on 0.2 and re-exports everything or parts of it)</p>",
        "id": 179436686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572445417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've added a quote from Nick Lewycky (whom I've mentioned a few times before and whom I've invited to join this group) to the document. I think it has some overlap with some other sections, but, unlike other arguments for letting <code>extern \"C\"</code> unwind-by-default, actually seems like a reasonable argument _not_ to introduce <code>extern \"C nounwind\"</code>.</p>",
        "id": 179459831,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572458750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I would also like to hear your reaction to that quote</p>",
        "id": 179460193,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572458971
    },
    {
        "content": "<p>Well, you can't really capture exceptions in C, but you can definitely throw them (just call <code>_Unwind_RaiseException</code>).</p>",
        "id": 179460529,
        "sender_full_name": "Amanieu",
        "timestamp": 1572459212
    },
    {
        "content": "<p>IMO the main argument is that <code>extern \"C\"</code> -&gt; <code>extern \"C nounwind\"</code> is an optimization, which <code>extern \"C\"</code> -&gt; <code>extern \"C unwind\"</code> is actually needed for correctness.</p>",
        "id": 179460788,
        "sender_full_name": "Amanieu",
        "timestamp": 1572459366
    },
    {
        "content": "<p>Also we avoid any issues with bumping the libc version, since <code>extern \"C nounwind\" fn</code> will coerce to <code>extern \"C\" fn</code>.</p>",
        "id": 179460880,
        "sender_full_name": "Amanieu",
        "timestamp": 1572459432
    },
    {
        "content": "<blockquote>\n<p>Well, you can't really capture exceptions in C, but you can definitely throw them (just call <code>_Unwind_RaiseException</code>).</p>\n</blockquote>\n<p>Isn't Nick's statement that you could catch them with a library function (the way Rust does) correct?</p>",
        "id": 179461501,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572459813
    },
    {
        "content": "<p>(I guess I'm still not sure how that actually works; it seems like it would need to set up a new frame with a landing pad...)</p>",
        "id": 179461659,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572459899
    },
    {
        "content": "<p>You would need to attach a custom personality function and generate the necessary landing pads. I'm pretty sure you can't do either even with GCC-specific extensions.</p>",
        "id": 179464793,
        "sender_full_name": "Amanieu",
        "timestamp": 1572461617
    },
    {
        "content": "<p>so -- obviously this remains the big topic dejour</p>",
        "id": 179635623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622159
    },
    {
        "content": "<p>I no longer like my framing (i.e., the topic of this zulip thread), in that I think that the set of interesting options is a bit more... entangled.</p>",
        "id": 179635649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622191
    },
    {
        "content": "<p>I was thinking about how to reorganize the information in the hackmd</p>",
        "id": 179635698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622203
    },
    {
        "content": "<p>I was thinking about trying to have a \"Considerations\" section that tries to outline major blocks of considerations, and then have a proposal section that goes through various possible designs and discusses their impact on the considerations</p>",
        "id": 179635730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622243
    },
    {
        "content": "<p>I think the proposals would be:</p>",
        "id": 179635740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622248
    },
    {
        "content": "<ul>\n<li>\"C\" vs \"C unwind\" -- the original proposal</li>\n</ul>",
        "id": 179635749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622257
    },
    {
        "content": "<ul>\n<li>\"C\" and <code>#[unwind(allowed)]</code> -- nightly behavior, where by-ptr calls are permitted to unwind, but you have to \"opt-in\" on extern declarations if they should permit unwinding</li>\n</ul>",
        "id": 179635820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622314
    },
    {
        "content": "<ul>\n<li>\"C\" and <code>#[unwind(ub)]</code> -- similar but we default to permitting unwinding and you have to <em>opt out</em> (not sure what the best flag would be there)</li>\n</ul>",
        "id": 179635869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622339
    },
    {
        "content": "<ul>\n<li>\"C\" vs \"C noexcept\" -- similar mirror image of the original proposal, I guess?</li>\n</ul>",
        "id": 179635885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622359
    },
    {
        "content": "<p>I guess there are basically two orthogonal facets</p>",
        "id": 179635895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622370
    },
    {
        "content": "<ul>\n<li>to use the ABI</li>\n<li>how to arrange defaults</li>\n</ul>",
        "id": 179635906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622383
    },
    {
        "content": "<p>but I'm not sure they're orthogonal in terms of the overall design space</p>",
        "id": 179635920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622393
    },
    {
        "content": "<p>(in other words, it feels like we might want to decide them together, though I'm trying to elaborate why I thought that now)</p>",
        "id": 179636034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622484
    },
    {
        "content": "<p>Let me think about how to organize the dock and give you an outline later, without doing the actual verbiage reorg</p>",
        "id": 179636694,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572622931
    },
    {
        "content": "<p>I want to spend a bit of time on the release notes blog today if possible, and over the weekend update the discussion/status summaries</p>",
        "id": 179636782,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572623011
    },
    {
        "content": "<p>\"release notes blog\"?</p>",
        "id": 179640535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625427
    },
    {
        "content": "<p>Er, release blog post.</p>",
        "id": 179641737,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572626246
    },
    {
        "content": "<blockquote>\n<p>Let me think about how to organize the dock and give you an outline later, without doing the actual verbiage reorg</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> were you ever able to make progress on this?</p>",
        "id": 180158802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573150639
    },
    {
        "content": "<p>Not really, unfortunately. I didn't even get a chance to help out with the blog post.</p>",
        "id": 180159035,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573150787
    }
]