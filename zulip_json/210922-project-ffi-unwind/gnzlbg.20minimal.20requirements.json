[
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/gnzlbg/project-ffi-unwind\" target=\"_blank\" title=\"https://github.com/gnzlbg/project-ffi-unwind\">https://github.com/gnzlbg/project-ffi-unwind</a></p>\n</blockquote>\n<p>this branch specifically? <a href=\"https://github.com/gnzlbg/project-ffi-unwind/tree/mvp_rfc\" target=\"_blank\" title=\"https://github.com/gnzlbg/project-ffi-unwind/tree/mvp_rfc\">https://github.com/gnzlbg/project-ffi-unwind/tree/mvp_rfc</a></p>",
        "id": 178226074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571167468
    },
    {
        "content": "<p>Yes. That s just my current brain dump</p>",
        "id": 178226187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167536
    },
    {
        "content": "<p>I was working with some thread cancellation issues in the UCGs and ended up needing this feature</p>",
        "id": 178226275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167564
    },
    {
        "content": "<p>So I started down explaining my problem and what guarantees I need</p>",
        "id": 178226379,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167597
    },
    {
        "content": "<p>seems useful, yes</p>",
        "id": 178226388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571167603
    },
    {
        "content": "<p>Those are implementable on Linux at least</p>",
        "id": 178226392,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167607
    },
    {
        "content": "<p>There are some references to the relevant specs</p>",
        "id": 178226411,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167619
    },
    {
        "content": "<p>I spun this out into its own topic</p>",
        "id": 178226435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571167634
    },
    {
        "content": "<p>So for background: <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/pthread_cancel.20looks.20unsound\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/pthread_cancel.20looks.20unsound\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/pthread_cancel.20looks.20unsound</a> and <a href=\"https://github.com/rust-lang/rust-memory-model/issues/46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-memory-model/issues/46\">https://github.com/rust-lang/rust-memory-model/issues/46</a></p>",
        "id": 178226834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167816
    },
    {
        "content": "<p>Basically, on Linux (or POSIX) in general, pthreads has cancellation points on a lost of C library APIs, like open, sleep, and so on</p>",
        "id": 178226899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167859
    },
    {
        "content": "<p>when a thread is cancelled, those functions unwind</p>",
        "id": 178226913,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167867
    },
    {
        "content": "<p>In the Itanium C++ ABI, there are ~3 types of unwinds, \"native\" (whatever the current programming language uses), \"foreign\" (what other programming languages that are not the current one uses), and \"forced\" (the stack frames do not control unwinding, but something external does, so the current stack frames cannot just stop unwinding completely, they can pause it, but must resume it - think <code>longjmp</code> where the stack frames being deallocated cannot stop it, only setjmp can, or thread cancellation..)</p>",
        "id": 178227163,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571167973
    },
    {
        "content": "<p>I think this might be simpler in the C ABI (the x86-ps-abi), but a lot of the wording there about unwinding is identical to the itanium ABI spec (the itanium builds on that one, so they aren't really incompatible)</p>",
        "id": 178227286,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168058
    },
    {
        "content": "<p>So that's it, when you spawn a thread, and call <code>pthread_cancel</code> on its thread id, some <code>extern \"C\"</code> function in libc unwinds, and that's UB - I need to make those <code>\"C unwind\"</code> instead</p>",
        "id": 178227342,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168101
    },
    {
        "content": "<p>since we want to spawn new threads that start a Rust function, this is Rust (spawns thread)-&gt;C (pthread_create)-&gt;Rust (the callback that gets started)-&gt;C (a call to <code>open</code> or something that can cancel the thread)</p>",
        "id": 178227456,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168169
    },
    {
        "content": "<p>So I need Rust-&gt;C to work, where C unwinds with a non-Rust unwinding, over Rust frames</p>",
        "id": 178227475,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168186
    },
    {
        "content": "<p>Rust threads on Linux contain all kind of stuff, so the T: Copy restriction for stackframes isn't enough</p>",
        "id": 178227505,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168210
    },
    {
        "content": "<p>pthreads cancels threads with \"forced unwinding\", so <code>catch_unwind</code> needs to be implemented to ignore those on linux</p>",
        "id": 178227545,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168242
    },
    {
        "content": "<p>I have no idea what happens when <code>-C panic=abort</code> and \"force unwinding\"</p>",
        "id": 178227627,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168293
    },
    {
        "content": "<p>probably the frames are just deallocated like a <code>longjmp</code>, so that would be unsound over non <code>T: Copy</code> frames</p>",
        "id": 178227650,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571168324
    },
    {
        "content": "<p>yikes, I didn't realize that <code>pthread_cancel</code> does that, though it makes sense</p>",
        "id": 178323990,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571256501
    },
    {
        "content": "<blockquote>\n<p>I have no idea what happens when <code>-C panic=abort</code> and \"force unwinding\"</p>\n</blockquote>\n<p>I know we don't emit landing pads with <code>panic=abort</code>, but is the <code>.eh_frame</code> still emitted I wonder? if not, I'm guessing the system unwinder would fail and abort the process</p>",
        "id": 178324041,
        "sender_full_name": "acfoltzer",
        "timestamp": 1571256556
    },
    {
        "content": "<p>So IIUC what happens with <code>-C panic=abort</code> is that we still unwind, but I don't know if destructors are run or not run consistently yet</p>",
        "id": 178361995,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302344
    },
    {
        "content": "<p>We probably could guard FFI calls to \"C unwind\" functions with code that causes an abort when <code>-C panic=abort</code></p>",
        "id": 178362042,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302399
    },
    {
        "content": "<p>But I think the real issue here is that when we say that it is UB for <code>extern \"C\"</code> to unwind, that requirement might be too strong</p>",
        "id": 178362114,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302449
    },
    {
        "content": "<p>since it would prevent <code>longjmp</code> on platforms where it is implemented by a particular kind of unwind, that LLVM supports even for <code>nounwind</code> functions</p>",
        "id": 178362130,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302475
    },
    {
        "content": "<p>and it would also prevent thread cancellation, which uses this exact same mechanism</p>",
        "id": 178362136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302489
    },
    {
        "content": "<p>I think I would be fine with making this requirement for <code>extern \"C\"</code> functions</p>",
        "id": 178362154,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302525
    },
    {
        "content": "<p>that would require those functions to use <code>\"C unwind\"</code> instead</p>",
        "id": 178362164,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302545
    },
    {
        "content": "<p>as long as we allow \"C unwind\" functions to still unwind in some cases even when <code>-C panic=abort</code></p>",
        "id": 178362214,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302575
    },
    {
        "content": "<p>e.g. by allowing these to unwind with certain platform specific mechanisms as long as doing so does not break any safety invariants that rely on destructors being run, like <code>Pin</code>, or <code>crossbeam::scope</code></p>",
        "id": 178362268,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302644
    },
    {
        "content": "<p>for those kinds of unwind that would be allowed with <code>-C panic=abort</code>, whether destructors run or not run would be a platform-specific detail, that users need to look up</p>",
        "id": 178362287,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302675
    }
]