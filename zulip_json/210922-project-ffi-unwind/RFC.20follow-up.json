[
    {
        "content": "<p>How do we want to address petrochenkov's point that there must be some safe way to unwind through <code>system</code> and <code>thiscall</code> ABIs in order to remove <code>#[unwind(allowed)] </code> from the standard library?</p>\n<p>Additionally, do we want to re-open discussion of whether unwinding should be the default rather than an opt-in behavior?</p>",
        "id": 201348539,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592536703
    },
    {
        "content": "<p>I.e. the unwinding ABI would be <code>extern \"C\"</code>, and we'd introduce a new C-without-unwinding ABI</p>",
        "id": 201348558,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592536763
    },
    {
        "content": "<p>I'd say that the \"ABI\" part and \"unwind\" part should ideally be orthogonal, but right now introducing <code>extern \"(system,thiscall) unwind\"</code> for the standard library use and not stabilizing them should be ok.</p>",
        "id": 201366223,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592557043
    },
    {
        "content": "<p>If the unwind part becomes orthogonal in the future, like <code>extern \"C\" unwind fn foo()</code>, then we can always keep <code>\"C unwind\"</code> for compatibility and desugar it into <code>\"C\" unwind</code>.</p>",
        "id": 201366364,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592557131
    },
    {
        "content": "<p>that's a really good point</p>",
        "id": 201393063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574964
    },
    {
        "content": "<p>I'm surprised we didn't talk about it already!</p>",
        "id": 201393151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575009
    },
    {
        "content": "<p>It does feel to me like the \"right thing\" is for the unwind to be kind of orthogonal, but perhaps that just means having \"unwind\" variants of system/thiscall/C</p>",
        "id": 201393204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575035
    },
    {
        "content": "<p>at least for now</p>",
        "id": 201393213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575039
    },
    {
        "content": "<p>We did...that's how RFC 2699 worked, at least at one point</p>",
        "id": 201393214,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592575039
    },
    {
        "content": "<p>ok well I wasn't involved :)</p>",
        "id": 201393258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575064
    },
    {
        "content": "<p>I just mean that in these recent conversations we haven't talked about non-C APIs that unwind</p>",
        "id": 201393291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575079
    },
    {
        "content": "<p>anyway I think i'm fine with just saying that we have <code>extern \"system unwind\"</code></p>",
        "id": 201393355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592575093
    },
    {
        "content": "<p>I'm hesitant. Shouldn't <code>system</code> mean \"automatically pick the right ABI for this system\"? That's why we have it in addition to <code>stdcall</code>, even though <code>stdcall</code> and <code>C</code> could in theory replace <code>system</code> (using annotations to select the right one for different targets).</p>",
        "id": 201405955,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592580817
    },
    {
        "content": "<p>If that's the case, then perhaps <code>system</code> should _always_ be \"unwind-safe\".</p>",
        "id": 201405974,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592580829
    },
    {
        "content": "<p>.....on platforms that are known to support unwinding.</p>",
        "id": 201406007,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592580842
    },
    {
        "content": "<p>We did briefly discuss whether we needed <code>unwind</code> for other ABIs during the lang team meeting on 2 March: langteam-sync/design-meeting-2020-03-02.md</p>",
        "id": 201406119,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592580900
    },
    {
        "content": "<p>The need for <code>system</code> to unwind makes me want to reconsider the <code>\"C\"</code>/<code>\"C nounwind\"</code> option.</p>",
        "id": 201406295,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592580987
    },
    {
        "content": "<p>honestly I forget where/when we use <code>system</code></p>",
        "id": 201643738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592850807
    },
    {
        "content": "<p>it seems likely to be fairly niche</p>",
        "id": 201643841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592850849
    },
    {
        "content": "<p>but maybe not :)</p>",
        "id": 201643852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592850858
    },
    {
        "content": "<p>petrochenkov's example is <code>panic</code>'s implementation on Windows: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/seh.rs#L310\">https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/seh.rs#L310</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;system&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[unwind(allowed)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_CxxThrowException</span><span class=\"p\">(</span><span class=\"n\">pExceptionObject</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pThrowInfo</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201643957,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592850928
    },
    {
        "content": "<p>right, are there other places we use it? is it primarily just the stdlib?</p>",
        "id": 201644050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592850965
    },
    {
        "content": "<p>or is it something used \"out there\" in the ecosystem?</p>",
        "id": 201644066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592850974
    },
    {
        "content": "<p>Hm... I don't know. But to me, the following make me lean toward \"<code>system</code> should always unwind\":</p>\n<ul>\n<li>the name - <code>system</code> implies \"automatically conform to the system's ABI\". Unwinding is part of that.</li>\n<li>the usage in <code>libunwind</code> - introducing an unwind-safe ABI (or multiple ABIs) should permit us to _remove_ <code>#[unwind(allowed)]</code> from the compiler rather than leaving it on nightly.</li>\n</ul>",
        "id": 201644335,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592851120
    },
    {
        "content": "<p>It looks like it's used in quite a few places, but I don't know if all 11k of these are \"real\" or not. But from looking through a half dozen pages of results, I don't see any red flags that my search isn't valid. <a href=\"https://github.com/search?q=%22extern+system%22+language%3ARust&amp;type=Code\">https://github.com/search?q=%22extern+system%22+language%3ARust&amp;type=Code</a></p>",
        "id": 201644760,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592851331
    },
    {
        "content": "<p>Resetting the discussion to the point of \"whether C-like ABIs should be considered unwind by default\" certainly wasn't my goal.</p>",
        "id": 201645597,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592851747
    },
    {
        "content": "<p>I wish I never brought this point, and I'd want recommend against overthinking and rationalizing some new semantics to <code>extern \"system\"</code>.</p>",
        "id": 201645795,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592851844
    },
    {
        "content": "<p>Whatever idea was originally behind \"system\", it's not currently used like that.<br>\nDe-facto it's a redundant alias to \"stdcall\" now and it would be better if it didn't exist, IMO.</p>",
        "id": 201645975,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592851952
    },
    {
        "content": "<p>\"stdcall unwind\" and \"thiscall unwind\" can be internal implementation details and I think the RFC can proceed in the same form as it's written now.</p>",
        "id": 201646136,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592852037
    },
    {
        "content": "<blockquote>\n<p>We did...that's how RFC 2699 worked, at least at one point</p>\n</blockquote>\n<p>Although, if the wg is ready to reconsider this (<code>extern \"C\" unwind fn foo</code>, making ABI orthogonal to the ABI flag), then it would probably be better long term.</p>",
        "id": 201647867,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592852931
    },
    {
        "content": "<p>If I recall correctly, the main reason we didn't want to do that is because we want to leave open the possibility of a separate \"nopanic\" feature (unrelated to <code>extern</code>) somewhere down the line.</p>",
        "id": 201648280,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853143
    },
    {
        "content": "<p>And we didn't want to \"accidentally\" introduce an equivalent feature.</p>",
        "id": 201648326,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853178
    },
    {
        "content": "<p>I understand not wanting <code>\"system\"</code> to unwind by default if <code>\"C\"</code> doesn't, but the fact that we'll need unwinding for <code>\"stdcall\"</code> and <code>\"thiscall\"</code> makes me think that we should reconsider the default for <code>\"C\"</code> as well.</p>",
        "id": 201648450,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853242
    },
    {
        "content": "<p>Unfortunately, the person who was most resistant to unwind-by-default was Centril, who is not currently active in the project or easily contactable. So if we re-opened the discussion, I suspect we could come to a different conclusion than we did before, but only because we would (presumably) no longer have an active advocate for the opposing perspective.</p>",
        "id": 201648817,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853472
    },
    {
        "content": "<p>I personally have a mild preference for no-unwind-by-default, though not a strong preference.</p>",
        "id": 201648964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592853548
    },
    {
        "content": "<p>That's helpful, I think.</p>",
        "id": 201648980,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853565
    },
    {
        "content": "<p>Specifically because <em>most</em> code doesn't need unwind, and it has a slight performance hit, and it's easy enough to add <code>unwind</code> to the <code>extern</code>.</p>",
        "id": 201648993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592853576
    },
    {
        "content": "<p>That holds doubly true if we can, without a substantial performance hit, catch unwind <em>attempts</em> and panic, at least in debug mode.</p>",
        "id": 201649026,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592853601
    },
    {
        "content": "<p>(I doubt it'll be zero-overhead, but we could do it in debug.)</p>",
        "id": 201649088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592853620
    },
    {
        "content": "<p>I believe that was Centril's primary objection as well, especially w/ <code>panic=abort</code></p>",
        "id": 201649138,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853665
    },
    {
        "content": "<p>Note that w/ <code>\"C unwind\"</code> in the current proposal, there is no UB. I like the idea that Rust is generally \"safe by default\". Having possible UB for the sake of performance seems very much like the sort of thing Rust typically only permits via opt-in, not opt-out.</p>",
        "id": 201649331,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592853768
    },
    {
        "content": "<p>So, we discussed this some in the meeting. I feel like the obvious fix to this problem is that we introduce additional ABIs (\"stdcall unwind\", etc), and I think that's...fine. I mean if we're adding \"C\" and \"C unwind\" I think honestly I would <strong>expect</strong> that you would have \"unwind\" variants of the various other ABIs available (and if there <em>isn't</em> a variant, I would expect that means something like unwinding doesn't work there for some other reason). This seems OK and I'm not inclined to try to change the consensus at this point.</p>",
        "id": 201652846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592855732
    },
    {
        "content": "<p>Okay. <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> , <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> , thoughts?</p>",
        "id": 201652968,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592855810
    },
    {
        "content": "<p>I haven't been following this closely (<del>gonna read backscroll now</del> done) but this shouldn't hurt our use case, so I'm fine with it (edit: yep, this sounds fine)</p>",
        "id": 201655912,
        "sender_full_name": "acfoltzer",
        "timestamp": 1592857331
    },
    {
        "content": "<p>Okay, so my TODOs for amending the RFC are:</p>\n<ul>\n<li>add <code>stdcall unwind</code> and <code>thiscall unwind</code> (noting that these are not available on all platforms)</li>\n<li>add <code>system unwind</code></li>\n<li>Add some information to the \"alternatives\" section discussing letting <code>\"C\"</code> unwind by default (this should be in the RFC already, but I think I may have forgotten to add it, so I'll review)</li>\n</ul>",
        "id": 201658771,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592858768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/RFC.20follow-up/near/201643841\">said</a>:</p>\n<blockquote>\n<p>it seems likely to be fairly niche</p>\n</blockquote>\n<p><code>winapi</code> uses <code>system</code> for almost all its extern functions, but I'm used to <code>winapi</code> being treated like a niche thing. <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 201675285,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1592870220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> I stand corrected!</p>",
        "id": 201705511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592905061
    },
    {
        "content": "<p>Though I can't tell if that implies that you have an opinion about using \"system unwind\" to declare intentional unwinding</p>",
        "id": 201705645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592905158
    },
    {
        "content": "<p>At least on Windows the cost of unwind tables is unavoidable, so the only real performance optimization is whether we emit drop tables in cases where we don't call anything that can unwind <em>other than</em> C++ so that if a C++ exception unwinds through us we can run our drops. Therefore I lean towards <em>supporting</em> unwinding by default.</p>\n<p>For some prior art, cl.exe (VC++ compiler) has a flag to determine the exception handling model. <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model\">https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model</a><br>\n<code>/EHsc</code> will assume that <code>extern \"C\"</code> cannot throw exceptions while <code>/EHs</code> will assume that they <em>can</em> throw. There is no opt in for specific functions. However you can opt out by declaring specific functions as <code>noexcept</code>.</p>",
        "id": 201716260,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1592913941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> So you are arguing for making <code>extern \"C\"</code> unwind-by-default on Windows specifically.</p>",
        "id": 201730032,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921161
    },
    {
        "content": "<p>Because it's less of a pessimization than it is on some other plaforms not requiring unwind tables.</p>",
        "id": 201730422,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921343
    },
    {
        "content": "<p>\"Support unwind-by-default on Windows\" should apply to <code>extern \"system\"</code> <em>less</em> than to <code>extern \"C\"</code> in general, because winapi doesn't usually throw anything we want to run drops on, AFAIR.</p>",
        "id": 201730755,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921494
    },
    {
        "content": "<p>And winapi is pretty much the only thing that uses stdcall, even if it's large, so it <em>is</em> niche <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 201730908,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921555
    },
    {
        "content": "<blockquote>\n<p>whether we emit drop tables in cases where we don't call anything that can unwind other than C++ </p>\n</blockquote>\n<p>Which is a significant optimization.<br>\nImagine any math stuff from C libraries that doesn't throw and is used in computationally heavy code.</p>",
        "id": 201731145,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921659
    },
    {
        "content": "<p><code>/EHsc</code> ftw</p>",
        "id": 201731395,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592921766
    },
    {
        "content": "<p>That's the default for projects created with Visual Studio at least.</p>",
        "id": 201732661,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592922351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/RFC.20follow-up/near/201730755\">said</a>:</p>\n<blockquote>\n<p>\"Support unwind-by-default on Windows\" should apply to <code>extern \"system\"</code> <em>less</em> than to <code>extern \"C\"</code> in general, because winapi doesn't usually throw anything we want to run drops on, AFAIR.</p>\n</blockquote>\n<p>I don't understand what you mean by this; do you just mean that winapi doesn't usually throw at all, or that something about the winapi interface makes it less likely for <code>Drop</code> objects to be used in the <em>calling</em> code, or something else?</p>",
        "id": 201749463,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592929857
    },
    {
        "content": "<p>The former, winapi doesn't throw (C++-style exceptions).</p>",
        "id": 201755889,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592933009
    },
    {
        "content": "<p>Ah, okay.</p>",
        "id": 201757107,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1592933599
    },
    {
        "content": "<p>When you say winapi doesn't through, are you saying that all failures are communicated through return codes, and not using SEH ?</p>",
        "id": 201858037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593010515
    },
    {
        "content": "<p>I feel like having the behavior of whether unwinding is UB or not depend on the platform (windows one way, other platforms another) is surprising and bound to cause portability hazards. I would not want to go that path.</p>",
        "id": 201858118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593010548
    },
    {
        "content": "<p>But I am interested to know whether winapi would expect to modify all of its ABIs from <code>extern \"system\"</code> to <code>extern \"system unwind\"</code> -- this was something we talked about with respect to libc and functions like <code>read</code> (which in some niche cases may use unwinding, but only with forced unwinds).</p>",
        "id": 201858280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593010603
    },
    {
        "content": "<p>That's explicitly called out in the RFC as the reason we consider forced unwinding over non-POFs to be UB.</p>",
        "id": 201858368,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593010640
    },
    {
        "content": "<p>(\"that\" meaning your point about the portability hazard of having UB on some platforms but not others for the same code)</p>",
        "id": 201858538,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593010693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/RFC.20follow-up/near/201858037\">said</a>:</p>\n<blockquote>\n<p>When you say winapi doesn't through, are you saying that all failures are communicated through return codes, and not using SEH ?</p>\n</blockquote>\n<p>All Windows API failures are communicated through return codes, so <code>winapi</code> would <em>not</em> opt into unwinding. When an SEH exception occurs 99% of the time you just want to crash the process because it indicates a fatal error. 1% of the time it is because you are doing things like reading/writing memory mapped files and the disk backing the file was unmounted and suddenly your read/write causes an SEH exception, in which case you use <code>__try</code> and <code>__catch</code> to catch that exception and gracefully return an error. I'd really love to have the equivalent of <code>__try</code> and <code>__catch</code> in Rust.</p>\n<p>The fun thing about SEH exceptions is that they can occur at <em>any</em> instruction, not just function calls or explicit throws. In C++ by default SEH exceptions do <em>not</em> trigger destructors and are <em>not</em> caught by <code>catch(...)</code> (although you can specify <code>/EHa</code> if you really want that).</p>",
        "id": 201926815,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1593052560
    },
    {
        "content": "<p>I take it that's what the LLVM docs mean when they refer to SEH as a form of \"async exception\"?</p>",
        "id": 201926978,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593052786
    },
    {
        "content": "<p>FYI as currently implemented we only run destructors for C++ exceptions (which panics are based on) and (sometimes) longjmp exception.</p>",
        "id": 201928416,
        "sender_full_name": "Amanieu",
        "timestamp": 1593054870
    },
    {
        "content": "<p>I would therefore consider any SEH exception as outside the scope of the RFC.</p>",
        "id": 201928424,
        "sender_full_name": "Amanieu",
        "timestamp": 1593054888
    },
    {
        "content": "<p>So -- from what I understand -- we are basically set to move forward, with the plan being to add unwind variants of ABIs as we find we need them, correct?</p>",
        "id": 202368981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> did you have any further edits to make or shall I fcp merge?</p>",
        "id": 202369023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465304
    },
    {
        "content": "<p>I want to add the ABIs we already know we need before fcp.</p>",
        "id": 202369094,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593465359
    },
    {
        "content": "<p>I have a few \"TODO\"s in comments in the document.</p>",
        "id": 202369147,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593465374
    },
    {
        "content": "<p>But adding the other strings is the main one.</p>",
        "id": 202369160,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593465389
    },
    {
        "content": "<p>OK. I think it's important to state that we expect to be adding more but not critical that it should be \"complete\". I think we should probably just list some and state that the set may vary.</p>",
        "id": 202442607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593527215
    },
    {
        "content": "<p>Do you think it would be acceptable to add new <code>unwind</code> ABIs after the RFC has landed without opening a new RFC? That seems like it would be a pretty minor change</p>",
        "id": 202507852,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593559877
    },
    {
        "content": "<p>I fully expect to do so</p>",
        "id": 202573586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593612899
    },
    {
        "content": "<p>I think we can say that explicitly, but the point of the RFC (in my view) is to establish the precedent, not to enumerate each use of it</p>",
        "id": 202573637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593612917
    },
    {
        "content": "<p>I've pushed a few changes</p>",
        "id": 202854935,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1593835476
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I completed my \"to do\" items over the weekend. From my perspective, the RFC is ready for FCP.</p>",
        "id": 203002892,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594048858
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I've made a few more changes, hopefully resolving <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> 's concerns.</p>",
        "id": 203210625,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594160492
    }
]