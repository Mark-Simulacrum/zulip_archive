[
    {
        "content": "<p>I've been reading a bit of glibc source code and I think I now have a better idea of how forced unwinding actually works. Basically in glibc, forced unwind works by try to unwind normally as many frames as possible while running destructors. Once it reaches a frame with no unwind info, it skips all remaining frames by using a simply longjmp.</p>",
        "id": 188937928,
        "sender_full_name": "Amanieu",
        "timestamp": 1582559475
    },
    {
        "content": "<p>This is how forced unwind can work with both <code>-fexceptions</code> and <code>-fno-exceptions</code>.</p>",
        "id": 188937958,
        "sender_full_name": "Amanieu",
        "timestamp": 1582559497
    },
    {
        "content": "<p>As such I would like to revise my previous position that unwinding through <code>nounwind</code> is not UB. Keep in mind that with <code>-C panic=abort</code> we often don't even have unwinding tables, so unwinding most likely will not work.</p>",
        "id": 188938111,
        "sender_full_name": "Amanieu",
        "timestamp": 1582559596
    },
    {
        "content": "<p>In terms of how it affects the proposals, it just turns non-forced unwinding from <code>unwind</code> to <code>UB</code> in the table. I don't think this change has any effect on the pros/cons that are listed.</p>",
        "id": 188938207,
        "sender_full_name": "Amanieu",
        "timestamp": 1582559658
    },
    {
        "content": "<p>Interesting. Thank you for looking into that.</p>",
        "id": 188938445,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582559839
    },
    {
        "content": "<p>The new \"forced unwinding\" description is a bit confusing to me. First,  is it not actually true that <code>catch (...) { }</code> will cause the program to abort on forced-unwind? Second, are frames that \"do not have unwinding support\" just frames marked w/ <code>nounwind</code>?</p>",
        "id": 188962247,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582575807
    },
    {
        "content": "<p>There's also frames with no unwinding tables.</p>",
        "id": 188969229,
        "sender_full_name": "Amanieu",
        "timestamp": 1582580549
    },
    {
        "content": "<p>That's the main issue here.</p>",
        "id": 188969241,
        "sender_full_name": "Amanieu",
        "timestamp": 1582580561
    },
    {
        "content": "<p>A normal unwind will just abort if it finds a frame with no unwind info. But pthread uses a hack and performs a longjmp when it reaches such a frame.</p>",
        "id": 188969394,
        "sender_full_name": "Amanieu",
        "timestamp": 1582580657
    },
    {
        "content": "<p><a href=\"https://github.com/bminor/glibc/blob/master/nptl/unwind.c#L54\" target=\"_blank\" title=\"https://github.com/bminor/glibc/blob/master/nptl/unwind.c#L54\">https://github.com/bminor/glibc/blob/master/nptl/unwind.c#L54</a></p>",
        "id": 188969421,
        "sender_full_name": "Amanieu",
        "timestamp": 1582580681
    },
    {
        "content": "<p>So that would apply in <code>panic=abort</code> for both \"C\" and \"C unwind\" in all three proposals, and in <code>panic=unwind</code> for \"C\" with proposals 1 &amp; 2?</p>",
        "id": 188972236,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582582616
    },
    {
        "content": "<p>Yes, sort of. Except \"C unwind\" under <code>panic=abort</code> will need to have unwinding tables since it needs to catch foreign exceptions and abort.</p>",
        "id": 188976268,
        "sender_full_name": "Amanieu",
        "timestamp": 1582585814
    },
    {
        "content": "<p>\"C\" under <code>panic=abort</code> will not have unwinding tables.</p>",
        "id": 188976296,
        "sender_full_name": "Amanieu",
        "timestamp": 1582585845
    },
    {
        "content": "<p>\"C\" under <code>panic=unwind</code> in proposal 1&amp;2 <em>does</em> have unwinding tables, but it is declared <code>nounwind</code> so LLVM will optimize destructors away.</p>",
        "id": 188976345,
        "sender_full_name": "Amanieu",
        "timestamp": 1582585909
    },
    {
        "content": "<p>Sorry I missed your first question.</p>\n<blockquote>\n<p>First, is it not actually true that catch (...) { } will cause the program to abort on forced-unwind?</p>\n</blockquote>\n<p>Yes it is technically true but I don't think it is very relevant to this discussion so I removed it. Rust has no mechanism for catching foreign exceptions (<code>catch_unwind</code> only catches Rust panics).</p>",
        "id": 188977069,
        "sender_full_name": "Amanieu",
        "timestamp": 1582586462
    },
    {
        "content": "<blockquote>\n<p>catch_unwind only catches Rust panics</p>\n</blockquote>\n<p>Hm, that's actually probably worth mentioning in the blog post, come to think of it!</p>",
        "id": 188980368,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582589830
    },
    {
        "content": "<p>I believe there was recently a PR to make catch_unwind catch foreign exceptions too.</p>",
        "id": 188994127,
        "sender_full_name": "bjorn3",
        "timestamp": 1582610876
    },
    {
        "content": "<p>I made a PR to make catch_unwind not segfault on foreign exceptions, is that what you're referring to? They're still not caught though.</p>",
        "id": 188998870,
        "sender_full_name": "Amanieu",
        "timestamp": 1582618015
    },
    {
        "content": "<p>Yes, I was refering to <a href=\"https://github.com/rust-lang/rust/issues/65646\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65646\">#65646</a></p>",
        "id": 189009955,
        "sender_full_name": "bjorn3",
        "timestamp": 1582628896
    }
]