[
    {
        "content": "<p>I was looking through:  <a href=\"https://github.com/rust-lang/rust/pull/86155\">https://github.com/rust-lang/rust/pull/86155</a> and one thing wasn't clear to me.<br>\nIt is mentioned that unwinding through <code>extern\"C\"</code> was explicitly defined as undefined behaviour, but considering the fact you can do it with pure safe rust, I can't see how that's valid (presuming that rust is fundamentally sound).<br>\nUnder presumption of soundness (which is, imo, necessary in order to reason about rust at all), the following code cannot possibly have undefined behaviour within rust itself  (This was mentioned in the issue a number of times):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// This line is safe, yet has undefined behaviour?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\">  </span><span class=\"c1\">// Calling the function is also safe</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I believe the previous reason why adding the abort-on-unwind shim wasn't possible was because this was an actual breaking change as a result of the same reasoning.  Wouldn't that argument still apply in future versions when <code>extern\"C-unwind\"</code> is stable?</p>",
        "id": 254456526,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632353603
    },
    {
        "content": "<p>Yes, that code has undefined behavior in stable Rust today, despite not having the <code>unsafe</code> keyword. This is actually the primary impetus for the existence of this project group.</p>\n<p>Abort-on-unwind is a breaking change, yes, but as you've observed, it only \"breaks\" code that already had undefined behavior. Unfortunately, as is often the case with undefined behavior, the code generally \"worked\" in the sense of doing what programmers would expect, i.e., unwinding without aborting; and this behavior was relied upon in a few projects. Hence the decision to delay implementing abort-on-unwind.</p>\n<p>The difference with <code>C-unwind</code>that permits us to finally enable the abort shim is that anyone relying on the old behavior now has a well-defined way to preserve the expected behavior, i.e. by using the new ABI string where appropriate.</p>",
        "id": 254462875,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1632358161
    },
    {
        "content": "<p>To be honest, it's rather suprising that any safe code can have this kind of fundamental undefined behaviour - that is, undefined as a matter of the language, and not as a result of a bug in the implementation. Rust purports to rule this out entirely: <a href=\"https://doc.rust-lang.org/stable/nomicon/safe-unsafe-meaning.html\">https://doc.rust-lang.org/stable/nomicon/safe-unsafe-meaning.html</a> states that \"No matter what, Safe Rust can't cause Undefined Behavior.\".</p>\n<p>I have written code that I have presumed as sound, that is not under this rule, by reason of it being safe - it cannot be possible that safe operations, with all invariants upheld by adjacent unsafe code, has undefined behaviour; this is a core principle of rust. The sole exception has been code using link-control attributes, which are <a href=\"https://github.com/rust-lang/rust/issues/82499\">fundamentally unsafe</a>. </p>\n<p>Wrt. to using the yet-to-be-stable <code>C-unwind</code> abi, this has issues in any crate that has an MSRV for some reason or another (the code I mentioned above is currently MSRV 1.39, so it can be built directly with mrustc for bootstrapping purposes). It also affects any crate with the <code>C</code> abi in it's public api (which also affects the aforementioned code), where changing to <code>C-unwind</code> would be a breaking change.</p>",
        "id": 254467968,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632362222
    },
    {
        "content": "<p>If the Rust compiler has a soundness hole, the MSRV on that crate does not have a bearing on whether the soundness hole will be fixed, nor whether the soundness hole is fixed in a backwards-compatible way. Rather, the impact on affected code is to be minimized, not eliminated entirely:<br>\n<a href=\"https://rust-lang.github.io/rfcs/1122-language-semver.html\">https://rust-lang.github.io/rfcs/1122-language-semver.html</a></p>",
        "id": 254469496,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363162
    },
    {
        "content": "<p>I'm not referring to a soundness hole in the implementation - if it were merely so, then the fix would be exactly the above PR. As far as I can tell, this is purported to be explicit undefined behaviour in the core language, which is fundamentally unsound - that is, unsound because it is undefined behaviour, not because of some issue in the compiler.</p>",
        "id": 254469805,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632363384
    },
    {
        "content": "<p>If the Rust compiler implements a language that is unsound, then it is <strong>also</strong> a bug in the compiler.</p>",
        "id": 254469884,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363441
    },
    {
        "content": "<p>The text you are citing, the Rustonomicon, is instructive, not definitional. i.e. it is allowed to be wrong. And in the pedagogic mode it is speaking in, the directive is as much a command as an explanation: Safe Rust cannot cause UB, ergo, you, dear reader who is likely a Rust programmer who may be wrapping <code>unsafe</code> APIs in safe function calls, you must prevent UB from leaking from that function.</p>",
        "id": 254469905,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363464
    },
    {
        "content": "<p>That is:<br>\nSafe Rust <strong>does</strong> cause UB all the time.<br>\nAnd that is an issue that must be fixed however necessary.</p>",
        "id": 254469979,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363516
    },
    {
        "content": "<p>I still do not think that it is unreasonable for a programmer to assume that code that is entirely safe, or safe code mixed with unsafe, where the unsafe code is unrelated to the cause of undefined behaviour as it neither directly causes it, nor violates an invariant that results in it, cannot possibly cause any undefined behaviour in the core language of rust.</p>",
        "id": 254470211,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632363695
    },
    {
        "content": "<p>It is not unreasonable, and yet, that is precisely why it must be changed, because it is in fact UB.</p>",
        "id": 254470515,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363870
    },
    {
        "content": "<p>As an example of the latter, if I have a raw pointer to some type <code>T</code>, possibly generic, possibly a trait object. I use unsafe code to dereference it and borrow into a reference, then use that resulting reference to call a safe trait method, that code is presumed to be sound iff it can be demonstraighted that the pointer meets the requirements for dereferencing, and is entirely unrelated to the safe function.</p>",
        "id": 254470524,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632363877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/.60extern.22C.22.60.20and.20unwinding/near/254470515\">said</a>:</p>\n<blockquote>\n<p>It is not unreasonable, and yet, that is precisely why it must be changed, because it is in fact UB.</p>\n</blockquote>\n<p>Wouldn't a less destructive approach to fixing it simply to declare it defined behaviour?</p>",
        "id": 254470549,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632363902
    },
    {
        "content": "<p>...No?</p>",
        "id": 254470561,
        "sender_full_name": "Jubilee",
        "timestamp": 1632363909
    },
    {
        "content": "<p>(Rather than altering the behaviour from the presumptive one and breaking code relying on it being sound)</p>",
        "id": 254470596,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632363941
    },
    {
        "content": "<p>I mean, I am willing to hear an argument re: how unwinding into arbitrary C code is something we can call \"well-defined\".</p>",
        "id": 254470751,
        "sender_full_name": "Jubilee",
        "timestamp": 1632364072
    },
    {
        "content": "<p>(Note that this is suggested separate from changing whether rust panics can validly unwind into foreign code, or wether foreign exceptions can unwind into rust code, neither of which are possible in safe rust nor breaks locally-correct soundness reasoning of unsafe code)</p>",
        "id": 254470766,
        "sender_full_name": "Connor Horman",
        "timestamp": 1632364079
    },
    {
        "content": "<p>I am pretty sure we cannot treat them as different because we cannot truly know, once the symbol is exposed to <code>#[no_mangle] pub extern \"C\"</code>, that it is not currently <strong>within</strong> C, which is why it must be UB to unwind: either it is caught at the boundary or it is not.</p>",
        "id": 254471566,
        "sender_full_name": "Jubilee",
        "timestamp": 1632364767
    },
    {
        "content": "<p>right, but this is UB without even using <code>no_mangle</code>, which was already implicitly unsafe</p>",
        "id": 254471856,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632365007
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 254471867,
        "sender_full_name": "Jubilee",
        "timestamp": 1632365020
    },
    {
        "content": "<p>I guess my main remark on that is just that Rust is not the only language that does symbol mangling yet interfaces with the C ABI, however. The <code>#[no_mangle]</code> annotation is merely a polite request to make things easy.</p>",
        "id": 254472270,
        "sender_full_name": "Jubilee",
        "timestamp": 1632365369
    },
    {
        "content": "<p>Yes, this was discussed extensively prior to the formation of the project group and leading up to the authorship of RFC-2945 (the specification of <code>\"C-unwind\"</code>. I can provide links to the relevant conversations if you'd like, but we are not likely to make <code>extern \"C\"</code> unwind \"soundly\" rather than aborting.</p>",
        "id": 254472804,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1632365871
    },
    {
        "content": "<p>And, yes, everyone agrees that unsoundness without <code>unsafe</code> is bad! I recommend thinking of this as a \"bug\" in the Rust specification itself.</p>",
        "id": 254473103,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1632366109
    },
    {
        "content": "<p>There's some explanation &amp; links here about the decision to move forward with introducing <code>extern \"C-unwind\"</code> and making <code>extern \"C\"</code> abort.</p>",
        "id": 254572082,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1632417732
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-ffi-unwind/blob/master/periodic-summaries/October-2ndHalf.md#letting-extern-c-unwind\">https://github.com/rust-lang/project-ffi-unwind/blob/master/periodic-summaries/October-2ndHalf.md#letting-extern-c-unwind</a></p>",
        "id": 254572755,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1632418029
    },
    {
        "content": "<p>WRT. this, I actually have an issue filed (effectively a tracking issue) in lccc (host). I do hope that it is possible to fix soon.<br>\n<a href=\"https://github.com/LightningCreations/lccc/issues/6\">https://github.com/LightningCreations/lccc/issues/6</a></p>",
        "id": 266474240,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640915894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> Thank you for doing that.</p>",
        "id": 266535130,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1641003545
    }
]