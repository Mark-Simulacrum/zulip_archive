[
    {
        "content": "<p>Based on discussion with <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> , I am hesitant to introduce any RFC with <code>extern \"C unwind\"</code>.</p>",
        "id": 178780098,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571767215
    },
    {
        "content": "<p>Say a bit more?</p>",
        "id": 178801296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571779989
    },
    {
        "content": "<p>this sounds very surprising to me :)</p>",
        "id": 178801447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780122
    },
    {
        "content": "<p>I am surprised to be saying it!</p>",
        "id": 178801555,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780231
    },
    {
        "content": "<p>So, Amanieu opened the new topic 'Allow unwinding from extern \"C\" by default', based on their PR to the compiler</p>",
        "id": 178801575,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780267
    },
    {
        "content": "<p>I'm breaking this out into its own topic, but I'd definitely like to see some links to what is making you feel this way. I was hoping we could open up <em>some</em> kind of RFC this week :)</p>",
        "id": 178801647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780298
    },
    {
        "content": "<p>The suggestion is essentially like treating <code>extern \"C\"</code> the way we were planning to treat <code>extern \"C unwind\"</code></p>",
        "id": 178801661,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780318
    },
    {
        "content": "<p>I brought up the various UB issues we were concerned about, and it sounds very possible that the possible UB from the LLVM perspective is actually quite minimal.</p>",
        "id": 178801703,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780366
    },
    {
        "content": "<p>And, more generically, the possibility that LLVM can generate well-behaved code would, I think, mean that any other Rust implementation could, too</p>",
        "id": 178801805,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780435
    },
    {
        "content": "<p>Hmm</p>",
        "id": 178801821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780449
    },
    {
        "content": "<p>Well, the main concern would I think be dead-code elim (or lack thereof)</p>",
        "id": 178801836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780465
    },
    {
        "content": "<p>\"C unwind\" is to some extent more of an <em>optimization</em></p>",
        "id": 178801847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780480
    },
    {
        "content": "<p>If I star comments here in Zulip, is that globally visible? I.e. could I quickly go into that thread and star various comments for you to read?</p>",
        "id": 178801853,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780487
    },
    {
        "content": "<p>But this sounds like a great thing to try and create a \"decision document\" around</p>",
        "id": 178801855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780489
    },
    {
        "content": "<blockquote>\n<p>If I star comments here in Zulip, is that globally visible? I.e. could I quickly go into that thread and star various comments for you to read?</p>\n</blockquote>\n<p>no</p>",
        "id": 178801858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780492
    },
    {
        "content": "<p>I can skim through that thread</p>",
        "id": 178801867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780497
    },
    {
        "content": "<p>Okay. Despite my previous comment, I think that would be worthwhile :)</p>",
        "id": 178801882,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780508
    },
    {
        "content": "<p>And, much to my surprise, as far as I can tell, gnzlbg seems to agree w/ Amanieu's suggestion</p>",
        "id": 178801942,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780535
    },
    {
        "content": "<p>(surprise b/c I had been under the impression that treating <code>extern \"C\"</code> that way was not something gnzlbg was at all favorably disposed toward)</p>",
        "id": 178801991,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780594
    },
    {
        "content": "<p>One person, I think, who may be able to read the thread and quickly point out issues with the proposal that I'm not seeing, would be Centril</p>",
        "id": 178802013,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780639
    },
    {
        "content": "<p>so far from my skimming, there are a lot of details and my eyes are glazing over :P</p>",
        "id": 178802060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780657
    },
    {
        "content": "<p>(specifically it seems like, in the part I'm reading, there is some debate about whether it is or is not UB and under what circumstances)</p>",
        "id": 178802086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780685
    },
    {
        "content": "<p>I'm presuming this gets settled, let me see if I can find the spot</p>",
        "id": 178802087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780690
    },
    {
        "content": "<p>right....</p>",
        "id": 178802088,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780691
    },
    {
        "content": "<p>but if we were to try and summarize, that would be an important thing to clarify</p>",
        "id": 178802094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571780700
    },
    {
        "content": "<p>my understanding is that \"we\" (not sure if that would be anyone, or someone on the Rust team with an existing relationship) should reach out to LLVM somehow and ask for an explicit statement to the effect that unwinding across stack frames without landing pads is well defined unless those frames have destructors/RAII/<code>finally</code></p>",
        "id": 178802168,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571780772
    },
    {
        "content": "<p>I guess the key question is <em>why</em> we were saying that <code>extern \"C\"</code> functions should not allow unwinding by default. I'm not sure how well argued this point is. There are presumably a few possible aspects:</p>\n<ul>\n<li>Most C functions do not, in fact, unwind, so it's a reasonable \"default\".</li>\n<li>Something something UB &lt;-- this seems to be what a lot of the thread is about, and in particular interactions around longjmp, but I found that a bit confusing.</li>\n<li>It permits dead-code elimination.</li>\n</ul>",
        "id": 178802502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781129
    },
    {
        "content": "<p>I'm a bit surprised to see discussion of <code>#[no_unwind]</code> attributes and not an ABI</p>",
        "id": 178802509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781140
    },
    {
        "content": "<p>Since the same arguments that led us to <code>\"C unwind\"</code> seem to apply in reverse</p>",
        "id": 178802515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781153
    },
    {
        "content": "<p>The main discussions I remember about not unwinding through <code>extern \"C\"</code> were several months before I opened RFC 2699, so...quite long ago, and scattered across multiple GitHub and Discourse threads.</p>",
        "id": 178802958,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571781532
    },
    {
        "content": "<p>My memory is that there was concern that the behavior would be LLVM-undefined in many or most cases. (Arguably even all cases.) Certainly I was given the impression that when an unwind crosses a stack frame with no landing pads, the platform-level behavior is undefined.</p>",
        "id": 178803123,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571781674
    },
    {
        "content": "<p>So if that's not true, and we can get documentation into LLVM guaranteeing the behavior of unwinding over C frames not compiled with <code>-fexceptions</code>, then I think Rust could officially change this from \"undefined behavior\" to \"implementation defined behavior,\" and the <code>no_unwind</code> optimization would just need to be made available to users somehow.</p>",
        "id": 178803255,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571781795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The main point is that we should provide a safe default that allows unwinding. If you want dead code elimination then you can explicitly mark certain C APIs that do not unwind. If you look at the libc headers you will see that certain functions are marked <code>noexcept</code> when compiled with a C++ compiler, rather than the other way around.</p>",
        "id": 178803351,
        "sender_full_name": "Amanieu",
        "timestamp": 1571781872
    },
    {
        "content": "<p>Can we create a hackmd and start to collect the key points here?</p>",
        "id": 178803373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781900
    },
    {
        "content": "<p>One thing I found very unclear, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>, was what all the UB considerations were, especially with respect to longjmp</p>",
        "id": 178803404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781915
    },
    {
        "content": "<p>hackmd doc I just created: <a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\">https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw</a></p>",
        "id": 178803434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781944
    },
    {
        "content": "<p>unfortunately, I have to run now to make dinner :)</p>",
        "id": 178803440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571781949
    },
    {
        "content": "<p>To be clear, I am definitely sympathetic to that argument, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> -- and also to the point that it behooves us to be analogous with C and C++</p>",
        "id": 178803522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571782021
    },
    {
        "content": "<blockquote>\n<p>To be clear, I am definitely sympathetic to that argument, <span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> -- and also to the point that it behooves us to be analogous with C and C++</p>\n</blockquote>\n<p>Same here.</p>",
        "id": 178803695,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571782146
    },
    {
        "content": "<p><code>longjmp</code> on Windows uses unwinding, but it is somewhat magic: it calls destructors but it is ignored by <code>noexcept</code>.</p>",
        "id": 178803793,
        "sender_full_name": "Amanieu",
        "timestamp": 1571782217
    },
    {
        "content": "<blockquote>\n<p>hackmd doc I just created: <a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\">https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> or <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> -- one thing I think would be super helpful would be if you could enumerate in this document some of the key scenarios you are curious about. For example, I saw some talk about a longjmp that unwinds over a \"noexcept\" frame. It seems like you two had a few such scenarios in mind.</p>",
        "id": 178805077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571783488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I believe <code>longjmp</code> w/ MSVC does _not_ call destructors; I think gnzlbg said that LLVM's difference in behavior here seems to be a Clang bug</p>",
        "id": 178805367,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571783785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is essentially the opposite proposal, e.g., instead of making C++ <code>noexcept(true)</code> the default for C APIs, it makes <code>noexcept(false)</code> the default, and adds some way to mark some APIs as <code>noexcept(true)</code></p>",
        "id": 178835870,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822243
    },
    {
        "content": "<p>(e.g. the <code>#[no_unwind]</code> attribute)</p>",
        "id": 178835877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822249
    },
    {
        "content": "<p>That opens the design of a large language feature, e.g., should <code>#[no_unwind]</code> be part of the type system ? (C++ didn't do that at first in C++11 but had to fix that in C++17)</p>",
        "id": 178835989,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822316
    },
    {
        "content": "<p>If its part of the type system its technically an effect, and that opens the question of how does one write code that's generic over <code>noexcept</code> (C++ provides a way to query whether an expression is <code>noexcept</code>, <code>noexcept</code> overloading, allows using <code>noexcept</code> in const contexts for constraining impls similar to where clauses, etc.)</p>",
        "id": 178836135,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822437
    },
    {
        "content": "<p>it also has implications for libstd, e.g., how to make libstd \"<code>#[no_unwind]</code> correct\", etc.</p>",
        "id": 178836179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822481
    },
    {
        "content": "<p>the application of such a feature goes way beyond C FFI as well, e.g., lots of code wants to make sure that certain operations cannot unwind, and <code>#[no_unwind]</code> would achieve that, so the use cases fan out a lot</p>",
        "id": 178836302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571822560
    },
    {
        "content": "<p>Usually, <code>#[no_unwind]</code> would also be able to make some currently incorrect uses of <code>AssertUnwindSafe</code> correct, e.g., by being able to express that some part of the code never unwinds, and therefore, cannot violate any panic safety invariants.</p>",
        "id": 178837718,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571823793
    },
    {
        "content": "<p>And well then there is also the issue of allowing <code>#[no_unwind]</code> in trait methods, for example. I don't think I've ever written a <code>Drop</code> implementation where allowing <code>Drop::drop</code> to unwind would be something I want.</p>",
        "id": 178837834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571823875
    },
    {
        "content": "<p>e.g. for something as simple as dropping a <code>[T]</code>, if one <code>T::drop</code> panics, then <code>[T]::drop</code> tries to drop all other elements, and then it panics (and if a second <code>T::drop</code> panics, then the program aborts)</p>",
        "id": 178837876,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571823948
    },
    {
        "content": "<p>That code could be much simpler if <code>T::drop</code> is known not to panic, and well, if you are building a <code>Vec&lt;T&gt;</code> on top of it, there is one element for which <code>T::drop</code> failed, but for which the <code>Vec&lt;T&gt;</code> deallocates its memory</p>",
        "id": 178838000,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824049
    },
    {
        "content": "<p>so there is a <code>T</code> in your program for which the destructor did not succeed and whose memory was deallocated</p>",
        "id": 178838129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824154
    },
    {
        "content": "<p>Yes, allowing drops to panic was a mistake, but I think it's outside the scope of this WG. Let's stay on topic.</p>",
        "id": 178838918,
        "sender_full_name": "Amanieu",
        "timestamp": 1571824752
    },
    {
        "content": "<p>While I mentioned a <code>#[no_unwind]</code> attribute, my proposal would just as well work with <code>extern \"C nounwind\"</code>. The key point is just allowing unwinding by default in <code>extern \"C\"</code>.</p>",
        "id": 178839001,
        "sender_full_name": "Amanieu",
        "timestamp": 1571824809
    },
    {
        "content": "<p>I've branched that to the \"noexcept-like feature\" thread</p>",
        "id": 178839846,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571825587
    }
]