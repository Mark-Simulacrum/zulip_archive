[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I started drafting a blog post, but it's pretty far from finished. If you have time, you may be interested in taking a look and seeing if I'm heading in the right direction. <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\" target=\"_blank\" title=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\">https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md</a></p>",
        "id": 184148037,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577157362
    },
    {
        "content": "<p>the post gives a lot of background, I'm wondering if it almost gives <em>too</em> much, but I'm not sure</p>",
        "id": 184674920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577991538
    },
    {
        "content": "<p>I might try an alternative outline just to see</p>",
        "id": 184674933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577991550
    },
    {
        "content": "<p>I wasn't planning on giving as much background as I ended up writing</p>",
        "id": 184674943,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577991557
    },
    {
        "content": "<p>But as I went, I realized that I don't think we have one place that explains the background with a balance of detail &amp; brevity</p>",
        "id": 184674969,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577991589
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184687311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578001754
    },
    {
        "content": "<p>There does seem to be value in that</p>",
        "id": 184687322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578001764
    },
    {
        "content": "<p>Maybe we even want two blog posts</p>",
        "id": 184687933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578002333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> this is WIP, but take a look at <a href=\"https://hackmd.io/PMlTBQS2T1i_a3lBW0348g?edit\" target=\"_blank\" title=\"https://hackmd.io/PMlTBQS2T1i_a3lBW0348g?edit\">what I wrote so far</a>. I'm trying to capture the \"essence\" of the problem as I see it...</p>",
        "id": 184691629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578006250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> One question on the blog post: the second alternative you describe is:</p>\n<blockquote>\n<p>Add a new ABI (\"C unwind\") that permits unwinding; the \"C\" ABI is specified as the system ABI but where unwinding is UB</p>\n</blockquote>\n<p>Since the original plan was for Rust functions defined with the \"C\" ABI to abort-on-panic, I had assumed that this would be the \"default\" option. Is this what you're referring to here, or would that be a third option?</p>",
        "id": 184867259,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578262012
    },
    {
        "content": "<p>I.e., unwinding would only be UB coming from foreign functions (or perhaps from an improper use of <code>unsafe</code>, I suppose), since \"C\" ABI Rust functions could not otherwise expose unwinding.</p>",
        "id": 184867352,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578262107
    },
    {
        "content": "<p>In any case, I have updated <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\" target=\"_blank\" title=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\">my draft</a> to incorporate a decent amount of the text from yours.</p>",
        "id": 184873505,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578273521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I believe the proposal was that unwinding through the \"C\" ABI was undefined behavior. Given that it is undefined, functions defined <em>in Rust</em> with the C ABI can abort -- but functions not defined in Rust would not abort</p>",
        "id": 185063756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437661
    },
    {
        "content": "<p>from the POV of the caller, you can be sure that unwinding never happens</p>",
        "id": 185063757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437669
    },
    {
        "content": "<p>and some callees (ones defined in Rust) guarantee that by aborting</p>",
        "id": 185063780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437692
    },
    {
        "content": "<p>I'm not sure if that is different from what you said :)</p>",
        "id": 185063794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437712
    },
    {
        "content": "<p>where is your updated blog post now..? in the PR?</p>",
        "id": 185063812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437730
    },
    {
        "content": "<p>I feel like my draft was still missing a certain amount of the arguments either way, but it was already useful in that I kind of shifted my opinion based on what <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> was pointing out</p>",
        "id": 185063845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437760
    },
    {
        "content": "<p>I think I just didn't realize while reading the draft the first time how important it is to emphasize that even with the \"abort-on-unwind\" logic, there's still UB.</p>",
        "id": 185063889,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578437767
    },
    {
        "content": "<p>Yes, I've continued updating the PR</p>",
        "id": 185063899,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578437782
    },
    {
        "content": "<p>it seems like the plan if \"UB if you unwind with <code>-Cpanic=abort</code>, but best effort aborts on debug\" is the best option</p>",
        "id": 185063914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437800
    },
    {
        "content": "<p>one thing I was wondering about was whether other <code>-C</code> options could induce UB in this way</p>",
        "id": 185063938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437828
    },
    {
        "content": "<p>that's a good question...</p>",
        "id": 185063949,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578437841
    },
    {
        "content": "<p>I think you can <em>imagine</em> a world where <code>-Cpanic=abort</code> simply refuses to compile code with <code>\"C unwind\"</code> ABI, but I think that's not really tenable</p>",
        "id": 185063959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437850
    },
    {
        "content": "<p>I think the <code>longjmp</code> situation more or less precludes that, doesn't it?</p>",
        "id": 185063984,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578437871
    },
    {
        "content": "<p>it's also very interesting that calls like <code>read</code> <em>may</em> unwind and may not, depending on the details of what platform you are on</p>",
        "id": 185063986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437872
    },
    {
        "content": "<p>which means that if we try to separate out in the ABI, we have to either <em>overapproximate</em> (to use \"C unwind\") or vary by target (\"ugh\") or just rule out some details of pthread cancelation (\"seems like losing capabilities\")</p>",
        "id": 185064066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437918
    },
    {
        "content": "<p>since <code>longjmp</code> should \"always work\", even if it's using unwinding under the covers, and therefore the <code>\"C\"</code> ABI needs to never interfere with it</p>",
        "id": 185064070,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578437921
    },
    {
        "content": "<p>well I imagine that <code>-Ctarget-feature</code> can cause UB</p>",
        "id": 185064102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437950
    },
    {
        "content": "<p>i.e., if your target actually lacks those features</p>",
        "id": 185064118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437967
    },
    {
        "content": "<p>similarly things like <code>link-args</code></p>",
        "id": 185064135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437984
    },
    {
        "content": "<p>who knows what <em>those</em> can do</p>",
        "id": 185064145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437989
    },
    {
        "content": "<p>so it seems like <code>-C</code> is already \"best know what you're doing\" territory to me, even though we should try hard to remove rough edges where we can</p>",
        "id": 185064209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438006
    },
    {
        "content": "<blockquote>\n<p>it seems like the plan if \"UB if you unwind with <code>-Cpanic=abort</code>, but best effort aborts on debug\" is the best option</p>\n</blockquote>\n<p>the good news about this is that it means <code>-Cpanic=abort</code> continues to be fully optimizable no matter what we choose</p>",
        "id": 185064335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438121
    },
    {
        "content": "<p>which means metrics don't matter</p>",
        "id": 185064588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438305
    },
    {
        "content": "<p>The concerning thing about <code>-Cpanic=abort</code> to me is that even if <code>-C</code> \"should\" mean \"best know what you're doing\", I think <code>panic=abort</code> is probably not perceived that way.</p>",
        "id": 185065145,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578438776
    },
    {
        "content": "<p>Especially since it's exposed via Cargo</p>",
        "id": 185065158,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578438787
    },
    {
        "content": "<p>Yes</p>",
        "id": 185065240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438852
    },
    {
        "content": "<p>This is why I would definitely want \"abort in debug mode\"</p>",
        "id": 185065250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438870
    },
    {
        "content": "<p>I would even consider <code>panic=ub</code> or something</p>",
        "id": 185065264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438886
    },
    {
        "content": "<p>(and make <code>abort</code> determinstically abort)</p>",
        "id": 185065267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438893
    },
    {
        "content": "<p>I think a big question is how much you care about <code>pthread_exit</code> and these interactions with <code>read</code> -- I'm trying to put my finger on it</p>",
        "id": 185065299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578438929
    },
    {
        "content": "<p>Well....</p>",
        "id": 185065367,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578438964
    },
    {
        "content": "<p>Semantically, there's an argument, I think, that <code>panic=abort</code> \"just\" means exactly what it says: <code>panic!</code> will trigger an abort.</p>",
        "id": 185065389,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578438989
    },
    {
        "content": "<p>To my mind, this means that leaving abort shims around in every  function that invokes a <code>\"C\"</code> function would be entirely permissible.</p>",
        "id": 185065420,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439034
    },
    {
        "content": "<p>That would be a concrete difference between <code>panic=ub</code> and <code>panic=abort</code>, and I  think it would simplify the implementation of both quite a bit.</p>",
        "id": 185065485,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439090
    },
    {
        "content": "<p>Although, come to think of it, going on that semantic argument, it shouldn't be <code>panic=ub</code>, it should be <code>panic=abort</code> _and_ <code>unwind=ub</code></p>",
        "id": 185065505,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439130
    },
    {
        "content": "<p>so a new flag...</p>",
        "id": 185065507,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439138
    },
    {
        "content": "<blockquote>\n<p>To my mind, this means that leaving abort shims around in every  function that invokes a <code>\"C\"</code> function would be entirely permissible.</p>\n</blockquote>\n<p>point is, that wouldn't permit invoking longjmp</p>",
        "id": 185065607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439249
    },
    {
        "content": "<p>er, sorry</p>",
        "id": 185065638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439282
    },
    {
        "content": "<p>longjmp would have to be given \"C unwind\", presumably, at least on some platforms</p>",
        "id": 185065653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439295
    },
    {
        "content": "<p>I think maybe an appealing configuration would be something like this:</p>",
        "id": 185065666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439306
    },
    {
        "content": "<ul>\n<li>with the \"C\" ABI, unwinding over a frame w/ dtors is UB (but unwinding is permitted otherwise)</li>\n<li>with \"C unwind\", unwinding works, but it's an error to <em>invoke</em> such functions with <code>-Cpanic=abort</code></li>\n</ul>",
        "id": 185065727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439345
    },
    {
        "content": "<p>I'm not sure about that; the abort shims already permit <code>longjmp</code>.</p>",
        "id": 185065730,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439349
    },
    {
        "content": "<p>basically, if you use foreign unwinding and rely on it to execute dtors, your ;library is just unusable with panic=abort</p>",
        "id": 185065739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439366
    },
    {
        "content": "<p>I don't think that _needs_ to be the case.</p>",
        "id": 185065753,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439387
    },
    {
        "content": "<p>well, it kind of does, right?</p>",
        "id": 185065771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439419
    },
    {
        "content": "<p>it's true we could special-case longjmp</p>",
        "id": 185065777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439427
    },
    {
        "content": "<p>Any form of \"forced unwind\" should never trigger an abort, I think.</p>",
        "id": 185065778,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439427
    },
    {
        "content": "<p>well, it is not ok if you fail to run dtors,</p>",
        "id": 185065834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439450
    },
    {
        "content": "<p>Because the definition of a \"forced unwind\" (from the Itanium spec and from... something else I just read today or yesterday... LLVM manual, I think?)</p>",
        "id": 185065836,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439455
    },
    {
        "content": "<p>is that no language can stop the exception</p>",
        "id": 185065847,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439464
    },
    {
        "content": "<p>so in those cses an abort is preferred to UB, though we may not be able to amnage one</p>",
        "id": 185065849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439466
    },
    {
        "content": "<p>hmmm</p>",
        "id": 185065866,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439476
    },
    {
        "content": "<p>I would think that in the <code>longjmp</code> case, not running dtors would be preferred!</p>",
        "id": 185065877,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439488
    },
    {
        "content": "<p>Not that it would be sound</p>",
        "id": 185065878,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439493
    },
    {
        "content": "<p>But that it's what users of <code>longjmp</code> would expect.</p>",
        "id": 185065883,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439502
    },
    {
        "content": "<p>Possibly-irrelevant question: are C++ destructors expected to run when <code>pthread_exit</code> runs?</p>",
        "id": 185065902,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439533
    },
    {
        "content": "<p>it's UB is the point</p>",
        "id": 185066012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439649
    },
    {
        "content": "<p>rust programs are allowed to assume their dtors run</p>",
        "id": 185066015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439659
    },
    {
        "content": "<p>many abstractions rely on this</p>",
        "id": 185066021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439663
    },
    {
        "content": "<p>I know, but it's the same in C++, except moreso.</p>",
        "id": 185066025,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439674
    },
    {
        "content": "<p>OK:)</p>",
        "id": 185066072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439689
    },
    {
        "content": "<p>I.e. the C++ community will tell you that \"destructors always run\"</p>",
        "id": 185066074,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439696
    },
    {
        "content": "<p>there is no concept of something like <code>mem::forget</code> in C++</p>",
        "id": 185066094,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439715
    },
    {
        "content": "<p>I believe in C++ it is UB to longjmp over a frame w/ dtors</p>",
        "id": 185066096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439717
    },
    {
        "content": "<p>in any case</p>",
        "id": 185066098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439721
    },
    {
        "content": "<p>(but in windows, it is defined to run those dtors)</p>",
        "id": 185066106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439729
    },
    {
        "content": "<p>I think you're right, though Windows says \"it may run dtors, it may not, depends on the optimizer\"</p>",
        "id": 185066121,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439749
    },
    {
        "content": "<p>which is why I think that system users would expect UB rather than abort logic</p>",
        "id": 185066127,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439756
    },
    {
        "content": "<p>I guess.. I odn't care?</p>",
        "id": 185066142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439775
    },
    {
        "content": "<p>like, if it is UB</p>",
        "id": 185066145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439778
    },
    {
        "content": "<p>Where \"system users\" means \"programmers used to the way longjmp interacts with other languages that have 'drop'-like features\"</p>",
        "id": 185066152,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439786
    },
    {
        "content": "<p>then aborting is certain one possible thing :)</p>",
        "id": 185066154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439788
    },
    {
        "content": "<p>That's fair.</p>",
        "id": 185066163,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578439796
    },
    {
        "content": "<blockquote>\n<p>Where \"system users\" means \"programmers used to the way longjmp interacts with other languages that have 'drop'-like features\"</p>\n</blockquote>\n<p>my point is: they should not be combining it</p>",
        "id": 185066167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439802
    },
    {
        "content": "<p>that is, they may <em>think</em> longjmp should 'just ignore' dtors</p>",
        "id": 185066218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439816
    },
    {
        "content": "<p>but they are wrong :)</p>",
        "id": 185066220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439818
    },
    {
        "content": "<p>even though it might <em>look</em> like this is what happens</p>",
        "id": 185066228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439833
    },
    {
        "content": "<p>but I think this is a bit off topic I guess</p>",
        "id": 185066258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439880
    },
    {
        "content": "<p>and i'm cooking so I should stop :)</p>",
        "id": 185066261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439884
    },
    {
        "content": "<p>main thing I was thinking is:</p>",
        "id": 185066264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439888
    },
    {
        "content": "<p>one advantage of \"C unwind\" is that it lets you identify call sites where unwinding is \"important\"</p>",
        "id": 185066273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578439901
    },
    {
        "content": "<p>True... it just doesn't seem correct to me to put that information in the ABI.</p>",
        "id": 185066686,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578440262
    },
    {
        "content": "<p>Backing up to the longjmp-over-Rust question: in <code>panic=abort</code> mode, on Windows, would you expect longjmp to be allowed over \"inert\" frames (as you termed them in your draft)?</p>",
        "id": 185066763,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578440332
    },
    {
        "content": "<p>A good question. I was assuming yes</p>",
        "id": 185067064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578440616
    },
    {
        "content": "<p>I think that is an explicit goal, in fact, no?</p>",
        "id": 185067068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578440625
    },
    {
        "content": "<p>well, maybe not</p>",
        "id": 185067075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578440634
    },
    {
        "content": "<p>we were trying to insert abort shims, but I guess those were triggering both with <code>-Cpanic=abort</code> and <code>-Cpanic=unwind</code>?</p>",
        "id": 185067126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578440653
    },
    {
        "content": "<p>I was also assuming yes.</p>",
        "id": 185067715,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578441187
    },
    {
        "content": "<p>somehow i feel more confused than I felt before:)</p>",
        "id": 185067992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578441483
    },
    {
        "content": "<p>Okay, so, if <code>-Cpanic=abort</code> only triggers abort on forced-unwind for debug builds when the unwind hits a _non-inert_ frame, I think that's reasonable.</p>",
        "id": 185154206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578515898
    },
    {
        "content": "<p>In release builds, UB, but again only for non-inert frames</p>",
        "id": 185154235,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578515920
    },
    {
        "content": "<p>(Where \"forced unwind\" is defined by Itanium ABI and by LLVM, and the two most common instances are<code>pthread_exit</code> on <em>N</em>X platforms or <code>longjmp</code> on Windows)</p>",
        "id": 185154269,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578515952
    },
    {
        "content": "<p>For inert frames, my inclination is to say that any interaction with a forced unwind is a violation of both LLVM's and Itanium's requirements for how language runtimes behave.</p>",
        "id": 185154362,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578516016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> does that seem correct?</p>",
        "id": 185154380,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578516033
    },
    {
        "content": "<p>For inert frames we just let the unwind go through without touching it, yes.</p>",
        "id": 185155824,
        "sender_full_name": "Amanieu",
        "timestamp": 1578517005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think we should add a sentence explicitly mentioning <code>catch_unwind</code>; here's an update to the draft: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/26\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/26\">https://github.com/rust-lang/project-ffi-unwind/pull/26</a></p>",
        "id": 189058443,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582662934
    },
    {
        "content": "<p>After that,  I think we can publish the blog post as soon as we have a date for the meeting. Agreed? (Niko, it looks like you're back in the US?)</p>",
        "id": 189058475,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582662955
    },
    {
        "content": "<p>I'm around now, yes,</p>",
        "id": 189124807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582731175
    },
    {
        "content": "<p>I'm in favor of posting the blog post --</p>",
        "id": 189124814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582731179
    },
    {
        "content": "<p>although I still feel like there's some \"higher level\" analysis that makes sense</p>",
        "id": 189124820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582731186
    },
    {
        "content": "<p>but I think we should post the post now :)</p>",
        "id": 189124829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582731192
    },
    {
        "content": "<p>did you want to open a PR against <a href=\"http://blog.rust-lang.org\" target=\"_blank\" title=\"http://blog.rust-lang.org\">blog.rust-lang.org</a>, <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>?</p>",
        "id": 189124845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582731207
    },
    {
        "content": "<p>Sure; should we just pick a date?</p>",
        "id": 189126242,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582732053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> did you see the doodle for rescheduling? <a href=\"https://doodle.com/poll/d9xevh43spf6rx8n#table\" target=\"_blank\" title=\"https://doodle.com/poll/d9xevh43spf6rx8n#table\">https://doodle.com/poll/d9xevh43spf6rx8n#table</a></p>",
        "id": 189126288,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582732078
    },
    {
        "content": "<p>Amanieu isn't available on the 9th, so let's pick either the 2nd or the 16th</p>",
        "id": 189127715,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582732876
    },
    {
        "content": "<p>hey, thank you. my Zulip tab got unloaded and didn't see the messages</p>",
        "id": 189132015,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582735353
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/522\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/522\">https://github.com/rust-lang/blog.rust-lang.org/pull/522</a></p>",
        "id": 189141130,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582740838
    },
    {
        "content": "<p>Okay, I'm assuming that the lang team members can make any of the four dates, since the design meetings are recurring. (Niko, please let me know if this isn't the case!) Since the rest of us are available this Monday, shall we just go ahead with that as the proposed date?</p>",
        "id": 189141256,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582740909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It seems the markdown support is different for <code>blog.rust-lang.org</code> than for GitHub. The table does not render correctly.</p>",
        "id": 189143264,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582741962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> I just noticed that we no longer have any <code>UB (debug: abort)</code> entries in the table.</p>",
        "id": 189146256,
        "sender_full_name": "Amanieu",
        "timestamp": 1582743455
    },
    {
        "content": "<p>Yet we still have a sentence talking about them.</p>",
        "id": 189146276,
        "sender_full_name": "Amanieu",
        "timestamp": 1582743472
    },
    {
        "content": "<p>Let's take discussion about the draft to the PR I've opened: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/522\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/522\">https://github.com/rust-lang/blog.rust-lang.org/pull/522</a></p>",
        "id": 189146368,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582743524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I've pushed an update to discuss the \"UB (debug: abort)\" possibility without actually modifying the table entries</p>",
        "id": 189149452,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582745199
    },
    {
        "content": "<p>LGTM</p>",
        "id": 189149552,
        "sender_full_name": "Amanieu",
        "timestamp": 1582745262
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span>  I'm going to go ahead and put 2020-03-02  as the date of the upcoming meeting unless someone objects.</p>",
        "id": 189158326,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582750777
    },
    {
        "content": "<p>Hello,</p>\n<p>I've read the blogpost and unfortunately I'm unable to attend the upcoming meeting. I have a cross-platform (windows/linux), ffi heavy project that run into this as the the C code uses longjmp across rust frames. In the common case my stack frames look something like: Rust -&gt; C -&gt; extern \"C\" Rust -&gt; Rust -&gt; C longjmp back to top first C frame.</p>\n<p>I have two specific questions:</p>\n<ul>\n<li>There are no options where forced unwinding results in destructors being run if panic=abort. I presume there is some technical limitation which prevents this from being feasible?</li>\n<li>For unwinding across rust frames, would all frames need to be tagged with some extern definition? I.e. would the inner rust frame in my layout be ok?</li>\n</ul>\n<p>FWIW based on what I've read so far, my preference would be proposal <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>, with some sort of pragma to warm/disallow -C panic=abort.</p>",
        "id": 189378932,
        "sender_full_name": "pquux",
        "timestamp": 1582957763
    },
    {
        "content": "<p>these Rust frames, do you control them (and the drop types that are owned by them), or could they be arbitrary user frames?<br>\nwith arbitrary user frames I'm afraid this is unsound and there is no fix. you cannot have unsafe code deallocate memory without running drop unless every single drop function that is being skipped has been carefully vetted to be okay with that -- which is of course impossible when, in generic or higher-order code, you cannot tell which types' drops are being skipped.</p>",
        "id": 189382600,
        "sender_full_name": "RalfJ",
        "timestamp": 1582966156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252303\">@pquux</span> First of all, keep in mind that longjmp is UB if you skip over any frames with destructors in them. If you really want to have destructors run then you need to use a different mechanism for unwinding, such as a C++ exception or a Rust panic.</p>",
        "id": 189383382,
        "sender_full_name": "Amanieu",
        "timestamp": 1582967780
    },
    {
        "content": "<p>Regarding your questions:</p>\n<ul>\n<li>Under <code>panic=abort </code> we don't emit any unwinding information to reduce binary size. That is after all the main point of <code>panic=abort</code>. So it is impossible for destructors to run when unwinding.</li>\n<li>Only the outermost frame (the one that interacts with C code) would need to be <code>extern \"C\"</code> or <code>extern \"C unwind\"</code>.</li>\n</ul>",
        "id": 189383432,
        "sender_full_name": "Amanieu",
        "timestamp": 1582967910
    },
    {
        "content": "<p>@RalfJ I sadly do not control them, the idea of the project is to allow users to write rust code as a library that interacts with the C code.</p>\n<p>@Amanieu Perhaps my understanding of unwinding is wrong, but what do you mean by \"skip over any frames with destructors in them\"? My understanding is fairly naive, but conceptually involves walking all stack frames between where you're throwing/longjmping from and the dest. I understand that on x64 they use unwind tables for this (as opposed to frame pointers). Does this mean some frames might not have unwind info, and longjmping over them is UB as they wouldnt be destructed properly?</p>\n<p>Unfortunately the longjmp is somewhat out of my control. I can modify the C code Im ffi'ing to, but it's use of longjmp is pretty foundational to the rest of the codebase and I don't trust myself enough to modify it in such an invasive way.</p>\n<p>What it sounds like is that regardless of which solution is chosen I'll still be in UB territory, but I'm not any better or worse off than I would be with equivalent C/C++ code. Apologies if this is the wrong forum for these questions, and thank you both for taking the time to reply.</p>",
        "id": 189406961,
        "sender_full_name": "pquux",
        "timestamp": 1583013134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252303\">@pquux</span> <code>longjmp</code> on Windows uses unwinding. On all other platforms it just skips straight to the <code>setjmp</code> by restoring the stack pointer value at the <code>setjmp</code> call. In both cases there must be no destructors in the frames being skipped.</p>",
        "id": 189408676,
        "sender_full_name": "Amanieu",
        "timestamp": 1583016560
    },
    {
        "content": "<p>Are you using lua by any chance?</p>",
        "id": 189408686,
        "sender_full_name": "Amanieu",
        "timestamp": 1583016598
    },
    {
        "content": "<p>Nope, its a fairly well tested emulator for a complicated ISA. Im aware of the platform difference there, but sorry, I still dont understand what you mean by frames being skipped.</p>",
        "id": 189409048,
        "sender_full_name": "pquux",
        "timestamp": 1583017278
    },
    {
        "content": "<p><a href=\"https://en.cppreference.com/w/cpp/utility/program/longjmp\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/utility/program/longjmp\">https://en.cppreference.com/w/cpp/utility/program/longjmp</a></p>",
        "id": 189409103,
        "sender_full_name": "Amanieu",
        "timestamp": 1583017332
    },
    {
        "content": "<p>Also just to be clear, what I have seems to work on both linux and windows, Im more trying to figure out how thin the ice I'm on is, and if there are things I can do to make it less thin.</p>",
        "id": 189409104,
        "sender_full_name": "pquux",
        "timestamp": 1583017336
    },
    {
        "content": "<blockquote>\n<p>No destructors for automatic objects are called. If replacing of std::longjmp with throw and setjmp with catch would execute a non-trivial destructor for any automatic object, the behavior of such std::longjmp is undefined.</p>\n</blockquote>",
        "id": 189409107,
        "sender_full_name": "Amanieu",
        "timestamp": 1583017348
    },
    {
        "content": "<p>What I mean by frames being skipped is something like this:<br>\nC ==calls=&gt; Rust ==calls=&gt; C ==calls=&gt; longjmp</p>",
        "id": 189409164,
        "sender_full_name": "Amanieu",
        "timestamp": 1583017465
    },
    {
        "content": "<p>Where the longjmp skips over the Rust frames and goes straight back to the first C frrame.</p>",
        "id": 189409176,
        "sender_full_name": "Amanieu",
        "timestamp": 1583017496
    },
    {
        "content": "<p>oh, duh. Im sorry, I see now. I mostly develop on windows and had internalized their longjmp/unwinding.</p>",
        "id": 189409249,
        "sender_full_name": "pquux",
        "timestamp": 1583017641
    },
    {
        "content": "<p>Does the pattern I showed represent what your code is doing?</p>",
        "id": 189409292,
        "sender_full_name": "Amanieu",
        "timestamp": 1583017697
    },
    {
        "content": "<p>Yes.</p>\n<p>So basically my options are:</p>\n<ul>\n<li>explore not use longjmp and replace it with a panic/catch, keep it in rustland the entire time</li>\n<li>continue using longjmp, document that the middle skipped frames do not have destructors run<ul>\n<li>this means the linux/windows behavior potentially vary, based on compiler flags</li>\n</ul>\n</li>\n</ul>",
        "id": 189409311,
        "sender_full_name": "pquux",
        "timestamp": 1583017758
    },
    {
        "content": "<p>Option 2 needs to be stronger: you CANNOT have destructors, otherwise behavior is undefined.</p>",
        "id": 189410020,
        "sender_full_name": "Amanieu",
        "timestamp": 1583019133
    },
    {
        "content": "<p>For option 1, you can use C++ exceptions as one possible alternative.</p>",
        "id": 189410036,
        "sender_full_name": "Amanieu",
        "timestamp": 1583019178
    },
    {
        "content": "<p>C++ exceptions and Rust panics would be more or less equivalent for your purposes: they both provide a well-defined way of running destructors while unwinding.</p>",
        "id": 189410048,
        "sender_full_name": "Amanieu",
        "timestamp": 1583019214
    },
    {
        "content": "<p>(FWIW the UB in option 2 would also have applied in the same way if you had used C++ instead of Rust)</p>",
        "id": 189410093,
        "sender_full_name": "Amanieu",
        "timestamp": 1583019274
    },
    {
        "content": "<p>For option 2, it may be conceptually easier to limit the local types used in intermediate frames to <code>Copy</code> types. Non-<code>Drop</code> is a strictly weaker requirement than <code>Copy</code>, but harder to express in code.</p>",
        "id": 189410350,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583019785
    },
    {
        "content": "<p>Yeah, Im in the same boat I'd be in without rust, just more aware of it.</p>\n<p>Alright, I appreciate the details and the assistance :) good luck with your meeting</p>",
        "id": 189411975,
        "sender_full_name": "pquux",
        "timestamp": 1583022844
    },
    {
        "content": "<p>If I can be helpful in any way with an example use case, please feel free to reach out.</p>",
        "id": 189411985,
        "sender_full_name": "pquux",
        "timestamp": 1583022874
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 189416775,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583032290
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 189416776,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583032290
    },
    {
        "content": "<p>There should be some C libraries that can initiate and halt unwinding. I'm having a bit of trouble finding a well-documented one, though.</p>",
        "id": 189416822,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583032374
    },
    {
        "content": "<p>(for option 1)</p>",
        "id": 189416829,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583032397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Blog.20post/near/189410350\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/Blog.20post/near/189410350\">said</a>:</p>\n<blockquote>\n<p>For option 2, it may be conceptually easier to limit the local types used in intermediate frames to <code>Copy</code> types. Non-<code>Drop</code> is a strictly weaker requirement than <code>Copy</code>, but harder to express in code.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252303\">@pquux</span> said above there are user-controlled frames in there, in which case such a limit couldn't be enforced</p>",
        "id": 189442365,
        "sender_full_name": "RalfJ",
        "timestamp": 1583086747
    },
    {
        "content": "<p>under that constraint, I don't think it is possible to have a safe interface -- if someone combines your library with, say, rayon, they could use that to break safety in safe code.</p>",
        "id": 189442379,
        "sender_full_name": "RalfJ",
        "timestamp": 1583086794
    },
    {
        "content": "<p>Yes, that's certainly true. I'm just suggesting that \"only use <code>Copy</code> types\" is a decent way to express the restriction to users.</p>",
        "id": 189442801,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583087474
    },
    {
        "content": "<p>Thanks for approving the PR, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ! I did see the build failure; I expect it's because I didn't put a real date in the date field. Should I set it to today?</p>",
        "id": 223574269,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611265194
    },
    {
        "content": "<p>Or rather, I didn't put a real date in the title.</p>",
        "id": 223574387,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611265237
    },
    {
        "content": "<p>Looking at the nit, I'm not sure the \"infinite loop\" phrase is actually helpful. The point is just that <code>-&gt; !</code> functions still enforce standard RAII resource-cleanup when necessary, so non-POFs can be used.</p>",
        "id": 223575135,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611265624
    },
    {
        "content": "<p>It's possible we should just take the section out entirely. I may be the only person making a mental connection to the \"never\" return type anyway.</p>",
        "id": 223575316,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611265709
    },
    {
        "content": "<p>Yeah, that may be</p>",
        "id": 223578992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611267486
    },
    {
        "content": "<p>Okay, I've fixed the build by setting the date to today and removed that section. Shall I merge if the final CI check passes?</p>",
        "id": 223580102,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611268085
    },
    {
        "content": "<p>Oh, never mind, I can't merge on my own. Anyway, the checks have passed.</p>",
        "id": 223581604,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611268966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> merged!</p>",
        "id": 224042988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611670034
    },
    {
        "content": "<p>sorry for the delay</p>",
        "id": 224042996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611670039
    },
    {
        "content": "<p>No problem; thanks!</p>",
        "id": 224044982,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611670906
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Jel7BWitsVBXphnAwdyUFBrk/Screenshot_20210126-073006.jpg\">Screenshot_20210126-073006.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Jel7BWitsVBXphnAwdyUFBrk/Screenshot_20210126-073006.jpg\" title=\"Screenshot_20210126-073006.jpg\"><img src=\"/user_uploads/4715/Jel7BWitsVBXphnAwdyUFBrk/Screenshot_20210126-073006.jpg\"></a></div>",
        "id": 224046366,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611671448
    },
    {
        "content": "<p>That's weird...</p>",
        "id": 224046380,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611671453
    },
    {
        "content": "<p>hmmm</p>",
        "id": 224056147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611675376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> I didn't notice this, but</p>\n<blockquote>\n<p>author: Kyle Strand on behalf of the FFI-unwind project group </p>\n</blockquote>\n<p>should just be 'Kyle Strand' :)</p>",
        "id": 224056256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611675423
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 224062587,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611677698
    },
    {
        "content": "<p>Does the date in the file name matter?</p>",
        "id": 224062617,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611677709
    },
    {
        "content": "<p>Oh, I see you renamed it before merging! Thanks.</p>",
        "id": 224062815,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611677790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/770\">https://github.com/rust-lang/blog.rust-lang.org/pull/770</a></p>",
        "id": 224063070,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611677903
    },
    {
        "content": "<p>merged</p>",
        "id": 224065898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611679009
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 224071051,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611681089
    }
]