[
    {
        "content": "<p>I know Niko wanted the group to take a break from doing spec-work for a bit, but I do want to start thinking about what the requirements are for making <code>longjmp</code> &amp;co well defined.</p>\n<p>We already have some thoughts about what a specification will eventually look like:</p>\n<ul>\n<li>We should define the behavior in terms of the language features involved so that we do not have different guarantees for different targets. In other words, <code>longjmp</code> on Windows shouldn't have a different specification just because it uses unwinding as an implementation detail.<ul>\n<li>I do <em>not</em> think that it is a requirement to specify that the behavior will be exactly the same on all platforms; in particular, I suspect that WIndows' use of SEH will enable optimizations around <code>longjmp</code> that would be unsafe on other platforms.</li>\n</ul>\n</li>\n<li>We should define all \"<code>longjmp</code>-like\" behavior, i.e. behavior that can be implemented via forced unwinding, in the same way. (I.e. there should be no difference between <code>pthread_cancel</code> traversing a POF versus <code>longjmp</code> traversing a POF.)</li>\n<li>We will require POFs for any safe <code>longjmp</code> behavior. (This is already specified by the RFC we merged.)</li>\n<li>We think it would be valuable to require an annotation in order to make <code>longjmp</code> well-defined. We do not have a name for this annotation yet, but it will be linked to the concept of \"<code>longjmp</code>-like\" behavior. One of the terms we've been using to refer to this annotation is \"cancelable\". Reasons for the annotation are:<ul>\n<li>semantic tractability of <code>longjmp</code>-reliant code (functions that may not return \"normally\" would be required to be annotated)</li>\n<li>optimization potential (I will find our prior discussions on this point and link them... eventually)</li>\n<li>enables better compiler warnings and errors, e.g. for ensuring that \"cancelable\" frames are in fact POFs</li>\n</ul>\n</li>\n</ul>\n<p>The only hard requirements I'm aware of are:</p>\n<ul>\n<li>There must be a sound way to call <code>libc</code> functions that may be terminated by <code>pthread_cancel</code>.</li>\n<li>There must be a sound way for libraries like <code>rlua</code> to <code>longjmp</code> over Rust frames.</li>\n</ul>",
        "id": 205746321,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596406544
    },
    {
        "content": "<p>I don't think supporting <code>pthread_cancel</code> is a hard requirement. We could just say that <code>pthread_cancel</code> is UB if canceling a thread that has a Rust frame on the stack.</p>",
        "id": 205836834,
        "sender_full_name": "Amanieu",
        "timestamp": 1596482856
    },
    {
        "content": "<p>I thought that was the primary reason we have UB in <code>libc</code> calls?</p>",
        "id": 205840617,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596484872
    },
    {
        "content": "<p>We can just punt the safety responsibility to the caller of <code>pthread_cancel</code> (which is FFI an therefore <code>unsafe</code>).</p>",
        "id": 205844530,
        "sender_full_name": "Amanieu",
        "timestamp": 1596487052
    },
    {
        "content": "<p>But if it's UB to have Rust on the stack <em>at all</em>, there's no way to actually uphold that responsibility...right?</p>",
        "id": 205844796,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596487195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Is calling <code>libc</code> functions that may <code>pthread_cancel</code> one of the soundness issues you are concerned about? I thought it was the primary one.</p>",
        "id": 206043920,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596644599
    },
    {
        "content": "<p>pthread_cancel is definitely on the \"horribly unsound\" list of things</p>",
        "id": 206046970,
        "sender_full_name": "RalfJ",
        "timestamp": 1596646010
    },
    {
        "content": "<p>I dont think I have a <em>primary</em> soundness concern about unwinding, I just dont know enough about it. I dont have a big-picture view. I just know some bits and pieces.</p>",
        "id": 206047038,
        "sender_full_name": "RalfJ",
        "timestamp": 1596646047
    },
    {
        "content": "<p>Can we make the personality function abort on forced unwinds? That would solve the whole unsoundness on systems using DWARF unwinding. It should also be possible to detect POF's from the personality function if you only want to abort for non-POF's.</p>",
        "id": 206056729,
        "sender_full_name": "bjorn3",
        "timestamp": 1596650403
    },
    {
        "content": "<p>See my first post:  we don't want to specify different behavior for the same language feature depending on what implementation the platform uses. <code>longjmp</code> should either work if the code is correct, or not.</p>",
        "id": 206063638,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596653686
    },
    {
        "content": "<p><code>longjmp</code> doesn't use forced unwindings on platforms using DWARF unwinding, only on Windows with SEH, right?</p>",
        "id": 206064767,
        "sender_full_name": "bjorn3",
        "timestamp": 1596654266
    },
    {
        "content": "<p>Correct. Sorry, I didn't just mean <code>longjmp</code>; I also mean <code>pthread_exit</code>.</p>",
        "id": 206064852,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596654327
    },
    {
        "content": "<p>Windows doesn't have <code>pthread_exit</code>, right?</p>",
        "id": 206066060,
        "sender_full_name": "bjorn3",
        "timestamp": 1596654996
    },
    {
        "content": "<p>I suspect that it exists as part of MinGW, but no, native MSVC-based runtimes shouldn't.</p>",
        "id": 206066303,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596655151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Forced.20unwinding.2C.20POFs.2C.20and.20.22cancelable.22.20annotation/near/206066060\">said</a>:</p>\n<blockquote>\n<p>Windows doesn't have <code>pthread_exit</code>, right?</p>\n</blockquote>\n<p>It has <code>ExitThread</code> which as far as I can tell does roughly the same thing that <code>pthread_exit</code> does.</p>",
        "id": 206212467,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1596759260
    },
    {
        "content": "<p>Does Windows have a way to detect this kind of forced unwinding and abort when it happens, but not abort on longjmp?</p>",
        "id": 206233373,
        "sender_full_name": "bjorn3",
        "timestamp": 1596788274
    },
    {
        "content": "<p>It's not really unwinding. The thread just terminates, the stack is deallocated, any pending IO is cancelled, and anything with destructors is totally leaked.</p>",
        "id": 206265308,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1596811430
    },
    {
        "content": "<p>My primary point about the cross-platform differences is that from the perspective of Rust's (currently informal) specification, the language features in question (thread termination and <code>longjmp</code>) should not be specified differently depending on the target platform's implementation of the feature.</p>\n<p>In other words, the user should not need to know whether such features are implemented with forced unwinding or simple stack deallocation.</p>",
        "id": 206308975,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1596834114
    }
]