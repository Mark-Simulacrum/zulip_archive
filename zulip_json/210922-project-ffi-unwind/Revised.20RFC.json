[
    {
        "content": "<p>Okay, I've revised the RFC based on the comments and requested re-review from Niko.</p>\n<p>I made one major change: I said we consider forced unwind across frames with destructors to be UB regardless of platform or ABI spec. The rationale is in the comments and the updated text.</p>",
        "id": 195349576,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587930532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> nice! will review</p>",
        "id": 195428180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587998939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do either of you have any issues I can try to address before we sync tomorrow?</p>",
        "id": 195737547,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588178384
    },
    {
        "content": "<p>let me review</p>",
        "id": 195743371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588181246
    },
    {
        "content": "<p>left some thoughts</p>",
        "id": 195746440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588182628
    },
    {
        "content": "<p>I'm generally not a fan of the term \"forced unwinding\" and all the complications around it.</p>",
        "id": 195782286,
        "sender_full_name": "Amanieu",
        "timestamp": 1588202469
    },
    {
        "content": "<p>It is a concept that is originally from the Itanium ABI, and which we extended to include Windows' longjmp as well.</p>",
        "id": 195782394,
        "sender_full_name": "Amanieu",
        "timestamp": 1588202542
    },
    {
        "content": "<p>I feel that it would be clearer if we instead talked in terms of the <em>source</em> of the unwind.</p>",
        "id": 195782468,
        "sender_full_name": "Amanieu",
        "timestamp": 1588202601
    },
    {
        "content": "<p>So first we describe the behavior of unwinding caused by Rust panics <em>only</em>. And how that interacts with <code>extern \"C\"</code>, <code>extern \"Rust\"</code> and <code>extern \"C unwind\"</code> under <code>panic=abort</code> and <code>panic=unwind</code>. This includes describing how such a panic behaves when unwinding through foreign code (\"just like a C++ exception\").</p>",
        "id": 195782654,
        "sender_full_name": "Amanieu",
        "timestamp": 1588202741
    },
    {
        "content": "<p>The base rule is that foreign unwinding (which we define as \"returning to the parent frame without returning from a function normally\") is UB by default unless specifically allowed in this RFC.</p>",
        "id": 195782779,
        "sender_full_name": "Amanieu",
        "timestamp": 1588202847
    },
    {
        "content": "<p>Then we list the exceptions:</p>\n<ul>\n<li>C++ exceptions: UB if it uses a different unwind mechanism than use (e.g. dw2 vs sjlj vs seh). UB if it crosses a <code>catch_unwind</code> frame. Allowed if t enters &amp; exits Rust code via <code>extern \"C unwind\"</code>. </li>\n<li>Normal <code>longjmp</code>: UB if any destructors or <code>catch_unwind</code> are skipped. Allowed otherwise.</li>\n<li>Windows <code>longjmp</code>: Destructors allowed if it enters &amp; exits Rust code via <code>extern \"C unwind\"</code>. Otherwise same as normal <code>longjmp</code>.</li>\n<li>Normal <code>pthread_exit</code>/<code>pthread_cancel</code>: UB if any destructors or <code>catch_unwind</code> are skipped. Allowed otherwise.</li>\n<li>Glibc <code>pthread_exit</code>/<code>pthread_cancel</code>: Destructors allowed if it enters &amp; exits Rust code via <code>extern \"C unwind\"</code>. Otherwise same as normal <code>longjmp</code>.</li>\n</ul>",
        "id": 195783188,
        "sender_full_name": "Amanieu",
        "timestamp": 1588203156
    },
    {
        "content": "<p>Notice how there is no mention of \"forced unwinding\". Just rules for the different types of unwinding. And everything else is UB by default.</p>",
        "id": 195783235,
        "sender_full_name": "Amanieu",
        "timestamp": 1588203191
    },
    {
        "content": "<p>(I was a bit more liberal in the rules than what we originally agreed with, but it's just to show an example).</p>",
        "id": 195783278,
        "sender_full_name": "Amanieu",
        "timestamp": 1588203217
    },
    {
        "content": "<p>Hm. I may be biased by the sunk cost of having written a draft already, but I don't see why that approach would be better.</p>",
        "id": 195786017,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588205494
    },
    {
        "content": "<p>Though admittedly the existing draft does not acknowledge different unwind mechanisms, and I'm not sure what it needs to say about them.</p>",
        "id": 195786200,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588205644
    },
    {
        "content": "<p>I also don't think we should promise correct behavior when unwinding over destructors with longjmp on Windows.</p>",
        "id": 195786350,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588205863
    },
    {
        "content": "<p>hmm, I don't know, I think I agree with <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> -- that seems similar to what I was saying about identifying scenarios --</p>",
        "id": 195849848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588258177
    },
    {
        "content": "<p>I think if I were coming to the RFC I would want to be able to \"pattern match\" the thing I am trying to do and get some idea of the rules around it</p>",
        "id": 195849876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588258192
    },
    {
        "content": "<p>I don't have a strong opinion about \"forced unwind\" vs other things, but there's definitely precedent for citing \"longjmp\" vs that category (I think that's what C++ does...?)</p>",
        "id": 195849988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588258231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Revised.20RFC/near/195849848\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/Revised.20RFC/near/195849848\">said</a>:</p>\n<blockquote>\n<p>hmm, I don't know, I think I agree with <span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> -- that seems similar to what I was saying about identifying scenarios --</p>\n</blockquote>\n<p>that said</p>",
        "id": 195872133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266997
    },
    {
        "content": "<p>I think that what this suggestion could also be 'encoded' into the detailed rule section</p>",
        "id": 195872151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267009
    }
]