[
    {
        "content": "<p>So--- I finally got around to reading <a href=\"https://github.com/rust-lang/rust/issues/86155\">#86155</a>.</p>",
        "id": 247708115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627651977
    },
    {
        "content": "<p>It looks really great.</p>",
        "id": 247708118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627651981
    },
    {
        "content": "<p>I'm trying to figure out, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, if your concerns have been addressed</p>",
        "id": 247708146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627651991
    },
    {
        "content": "<p>As far as I can tell, the new pass:</p>\n<ul>\n<li>Identifies calls that can't unwind and removes their extra edges from the terminator</li>\n<li>For cases that could unwind, but bodies that cannot, we add a terminator that makes the program abort</li>\n</ul>\n<p>So the semantics of a call for miri are:</p>\n<ul>\n<li>When you call a function, it is UB if that terminator indicates that it cannot unwind but it does</li>\n<li>But if the terminator says that it can unwind, then...it can :)</li>\n</ul>\n<p>If you ask for the MIR immediately post build, we'll have plenty of terminators that indicate potential unwinding which will be optimized away later, but it's not really a \"change in the semantics of MIR\".</p>\n<p>Does that sound right?</p>",
        "id": 247708456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627652138
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>)</p>",
        "id": 247708613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627652209
    },
    {
        "content": "<p>I think so yeah, sounds right to me!</p>",
        "id": 247711916,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1627653783
    },
    {
        "content": "<p>I'm going to r+</p>",
        "id": 247722217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627658468
    },
    {
        "content": "<p>not a 1-way door :)</p>",
        "id": 247722230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627658473
    },
    {
        "content": "<p>needs rebase, though</p>",
        "id": 247722324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627658517
    },
    {
        "content": "<p>oh oops done now</p>",
        "id": 247722691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1627658680
    },
    {
        "content": "<blockquote>\n<p>If you ask for the MIR immediately post build, we'll have plenty of terminators that indicate potential unwinding which will be optimized away later, but it's not really a \"change in the semantics of MIR\".</p>\n</blockquote>\n<p>I dont follow. I think there is a shift in the sematnics of MIR: when a \"function that shouldnt be able to unwind\" contains a terminator (from a fn call) that can unwind, this is <em>UB</em> at codegen time. But right after MIR building, this actually occurs in safe code. Ergo there must be a dialect change somewhere.</p>",
        "id": 247738840,
        "sender_full_name": "RalfJ",
        "timestamp": 1627666464
    },
    {
        "content": "<p>This is not blocking the PR (in particular now that this shift happens very early in the pipeline), but needs to be adressed carefully if/when we ever precisely document MIR semantics. Cc <a href=\"https://github.com/rust-lang/rust/issues/86299\">https://github.com/rust-lang/rust/issues/86299</a></p>",
        "id": 247738933,
        "sender_full_name": "RalfJ",
        "timestamp": 1627666531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/PR.20.2386155/near/247738840\">said</a>:</p>\n<blockquote>\n<p>I dont follow. I think there is a shift in the sematnics of MIR: when a \"function that shouldnt be able to unwind\" contains a terminator (from a fn call) that can unwind, this is <em>UB</em> at codegen time. But right after MIR building, this actually occurs in safe code. Ergo there must be a dialect change somewhere.</p>\n</blockquote>\n<p>Hmm, I don't think it's UB at any point in time, unless that function actually unwinds. What am I missing?</p>",
        "id": 247744681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627669436
    },
    {
        "content": "<p>I'm not sure I know what \"UB at codegen time\" even means, actually</p>",
        "id": 247744768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627669470
    },
    {
        "content": "<p>regardless I agree we should note it in <a href=\"https://github.com/rust-lang/rust/issues/86299\">#86299</a> or some other tracking issue</p>",
        "id": 247744845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627669518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/PR.20.2386155/near/247744768\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I know what \"UB at codegen time\" even means, actually</p>\n</blockquote>\n<p>Sounds like it would be equivalent to C++'s IFNDR - The program is ill-formed, and the implementation could diagnose it and terminate compilation (or diagnose it for fun and keep compiling anyways), but it doesn't have to, and the resulting program would be free from the as-if rule period.</p>",
        "id": 247759145,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627677677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/PR.20.2386155/near/247744768\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I know what \"UB at codegen time\" even means, actually</p>\n</blockquote>\n<p>sorry, I meant it is UB in the operational semantics that describe program behavior at codegen time (in the dialect that MIR is written in at codegen time)</p>",
        "id": 247794673,
        "sender_full_name": "RalfJ",
        "timestamp": 1627722224
    },
    {
        "content": "<p>as in, if its not UB, codegen is just wrong</p>",
        "id": 247794677,
        "sender_full_name": "RalfJ",
        "timestamp": 1627722232
    },
    {
        "content": "<p>I am talking about code like this (assume <code>panic=abort</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>extern &quot;C+unwind&quot; { fn can_unwind() }\n\nfn can_not_unwind() {\n  bb0:\n    Call can_unwind() [ ret -&gt; bb1 ] // implicit: unwinding is propagated\n\n  bb1:\n    Return\n}\n</code></pre></div>\n<p>When we have this MIR at codegen time, we generate a <code>nounwind</code> attribute for <code>can_not_unwind</code>. so if <code>can_unwind</code> unwinds, we have UB.</p>\n<p>However, we generate exactly that MIR from safe code. So in the MIR we initially generate, this cannot be UB.</p>\n<p>Ergo the rules for UB changed some time in between.</p>",
        "id": 247794811,
        "sender_full_name": "RalfJ",
        "timestamp": 1627722428
    },
    {
        "content": "<p>Apologies for asking a question with vast ignorance: in that code, where does the landing pad come into play? <code>can_not_unwind</code> really can't undwind, and if <code>can_unwind</code> does unwind, a landing pad in <code>can_not_unwind</code> needs to abort the process.</p>",
        "id": 248424257,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628121662
    },
    {
        "content": "<blockquote>\n<p>and if can_unwind does unwind, a landing pad in can_not_unwind needs to abort the process.</p>\n</blockquote>\n<p>yes it is my understanding that <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>'s PR adds a pass that will add such a landing pad</p>",
        "id": 248606191,
        "sender_full_name": "RalfJ",
        "timestamp": 1628254395
    },
    {
        "content": "<p>so after that pass we know that no function called from a <code>nounwind</code> function can unwind, so we can change the MIR dialect to one where doing so would be UB. this, in turn, allows codegen to emit the code that it does for LLVM (where we would have such UB).</p>",
        "id": 248606324,
        "sender_full_name": "RalfJ",
        "timestamp": 1628254470
    }
]