[
    {
        "content": "<p>I read the RFC again and I'm not sure I understand exactly,<br>\nIs this UB or converted to abort?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_this_from_c</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"message\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(specifically in my case it's rust-&gt;c-&gt;rust and the last/inner rust is panicking).<br>\nI thought it was abort but now that <a href=\"https://github.com/rust-lang/rust/pull/76570\">https://github.com/rust-lang/rust/pull/76570</a> is merged we're getting sefaults: <a href=\"https://github.com/rust-bitcoin/rust-secp256k1/pull/288\">https://github.com/rust-bitcoin/rust-secp256k1/pull/288</a><br>\n(<code>(signal: 4, SIGILL: illegal instruction)</code>)</p>",
        "id": 230112325,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1615589394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> is this part of the behavior change behind the feature flag?</p>",
        "id": 230112907,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615589775
    },
    {
        "content": "<p><code>SIGILL</code> is not a segfault, though; I believe it's considered a \"valid\" means of causing an <code>abort</code>. I think I remember <code>SIGILL</code> intentionally being our means of aborting-on-<code>panic</code>, but I can't remember where I heard this.</p>",
        "id": 230113319,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590035
    },
    {
        "content": "<p>This is crate documentation, not <code>rustc</code> documentation, but it seems to confirm that: <a href=\"https://docs.rs/panic-abort/0.3.2/panic_abort/\">https://docs.rs/panic-abort/0.3.2/panic_abort/</a></p>\n<blockquote>\n<p>On hosted applications (applications running under an OS), the trap instruction usually terminates the whole process with an exit code that corresponds to SIGILL unless a signal handler that handles this particular signal was registered...</p>\n</blockquote>",
        "id": 230113609,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590216
    },
    {
        "content": "<p>Ah, okay, here's something a little more definite: <a href=\"https://github.com/rust-lang/rust/issues/52633\">https://github.com/rust-lang/rust/issues/52633</a></p>",
        "id": 230113789,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590330
    },
    {
        "content": "<p><code>rustc</code> lowers <code>abort</code> to <code>llvm.trap</code>, an intrinsic that is platform-specific: <a href=\"https://llvm.org/docs/LangRef.html#llvm-trap-intrinsic\">https://llvm.org/docs/LangRef.html#llvm-trap-intrinsic</a></p>",
        "id": 230113965,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590453
    },
    {
        "content": "<p>So, yes, what you're seeing is an abort.</p>",
        "id": 230113998,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590478
    },
    {
        "content": "<p>Oh that's a weird abort but cool.<br>\n(why doest rust call libc::abort or prints before aborting here?)</p>\n<p>So is this an intentional change even though c-unwind is feature gated?</p>",
        "id": 230114351,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1615590683
    },
    {
        "content": "<p>Printing when you haven't asked for printing would be...irregular, in a low-level language <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230114655,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590920
    },
    {
        "content": "<p>I was in no way involved w/ implementing <code>rustc</code>, but I would guess the reason for not using <code>libc</code> is that it's not available on all platforms; deferring to the backend (LLVM) for an intrinsic seems more consistent.</p>",
        "id": 230114738,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590970
    },
    {
        "content": "<p>(Also note that <code>abort</code> should only happen in exceptional cases; it's not a \"happy path\" way to halt a program.)</p>",
        "id": 230114760,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615590993
    },
    {
        "content": "<p>And, yes, this is an intentional change (it meets the RFC spec).</p>",
        "id": 230114795,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591018
    },
    {
        "content": "<p>Looking over the code change itself, the <code>abort</code> behavior is untouched; I expect you would get the same exit code for any <code>panic</code> if you compiled with <code>panic=abort</code>.</p>",
        "id": 230114841,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591074
    },
    {
        "content": "<p>If you want the old behavior from <code>extern \"C\"</code>, you should definitely opt into the feature gate.</p>",
        "id": 230114924,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591110
    },
    {
        "content": "<p>(or not use nightly)</p>",
        "id": 230114947,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Is.20unwinding.20through.20extern.20C.20UB.3F/near/230114655\">said</a>:</p>\n<blockquote>\n<p>Printing when you haven't asked for printing would be...irregular, in a low-level language <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>Doesn't C's abort print? maybe I'm misremembering</p>",
        "id": 230115247,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1615591327
    },
    {
        "content": "<p><code>libc</code>? It may.</p>",
        "id": 230115568,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591573
    },
    {
        "content": "<p>I'm not sure either.</p>",
        "id": 230115579,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591578
    },
    {
        "content": "<p>It may also depend on the implementation of <code>libc</code>.</p>",
        "id": 230115999,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615591891
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/47932\">https://github.com/rust-lang/rust/issues/47932</a> related I guess.</p>",
        "id": 230116883,
        "sender_full_name": "nagisa",
        "timestamp": 1615592642
    },
    {
        "content": "<p>also less relatedly <a href=\"https://github.com/rust-lang/rust/issues/81895\">https://github.com/rust-lang/rust/issues/81895</a></p>",
        "id": 230116945,
        "sender_full_name": "nagisa",
        "timestamp": 1615592664
    },
    {
        "content": "<p>Hello! Apologies for the delay. To answer the question posed at the beginning of the thread, an unwinding operation crossing an <code>extern \"C\"</code> boundary prior to this RFC was considered UB. Today, that should now <code>abort</code>.</p>\n<blockquote>\n<p>is this part of the behavior change behind the feature flag?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> Alas. I don't believe that is the case. Because that behavior was previously undefined however, would a patch to preserve that be worthwhile? I'm _inclined_ to guess not, but I have a bit less experience with the day-to-day of <code>rustc</code> maintenance.</p>",
        "id": 230772070,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616017467
    },
    {
        "content": "<p>I think the old behavior should be preserved for as long as <code>extern \"C-unwind\"</code> is unstable.</p>",
        "id": 230780365,
        "sender_full_name": "bjorn3",
        "timestamp": 1616020211
    },
    {
        "content": "<p>I think I agree with that. I was hoping it wouldn't make a difference because we could stabilize near-immediately, but I think stabilization must be blocked by the issue brought up in the \"UB testcase\" discussion.</p>",
        "id": 230787338,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616024562
    }
]