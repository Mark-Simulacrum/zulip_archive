[
    {
        "content": "<blockquote>\n<p>The harm I see is that the WG won't end up fulfilling its goal of offering a way to interface with the platform ABI</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think this statement makes \"interface\" sound like a bit more of an all-or-nothing proposition than it is. \"Propagating\" (without catching) is one way of \"interfacing\" with the exception ABI.</p>",
        "id": 178414854,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341513
    },
    {
        "content": "<p>Also, I think we need to be very cautious about making assumptions about what \"supporting the ABI\" entails (even for a fairly comprehensive definition of \"supporting\") without limiting those assumptions to specific platforms. In particular, for any goals that this WG adopts because they seem desirable and achievable for the Itanium ABI, we need to be careful not to automatically commit ourselves to supporting the same feature on Windows.</p>",
        "id": 178415057,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341651
    },
    {
        "content": "<p>I don't think we should treat it as all or nothing, but on some major platforms, native system software pretty much uses all of the ABI</p>",
        "id": 178415060,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341653
    },
    {
        "content": "<p>so if we want to be able to properly interface with such software from Rust, then we'd need to support whatever parts of the ABI such software requires</p>",
        "id": 178415083,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341678
    },
    {
        "content": "<p>That's reasonable. Josh Triplett is correct that _catching_ foreign exceptions was not originally in scope for this WG, though.</p>",
        "id": 178415137,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341689
    },
    {
        "content": "<p>It definitely seems like a natural extension of the charter</p>",
        "id": 178415153,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341704
    },
    {
        "content": "<p>but it is not something I think we can _currently_ commit to solving.</p>",
        "id": 178415175,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341729
    },
    {
        "content": "<blockquote>\n<p>lso, I think we need to be very cautious about making assumptions about what \"supporting the ABI\" entails (even for a fairly comprehensive definition of \"supporting\") without limiting those assumptions to specific platforms. </p>\n</blockquote>\n<p>That's a good point.</p>",
        "id": 178415177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341731
    },
    {
        "content": "<p>I've been wondering these last days if it wouldn't be better to just expose platform ABIs instead of a generic \"C unwind\" ABI</p>",
        "id": 178415200,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341752
    },
    {
        "content": "<p>But I think that could be always done later</p>",
        "id": 178415226,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341777
    },
    {
        "content": "<p>e.g. adding \"C unwind\" now does not prevent adding \"Itanium\" or \"SEH\" later</p>",
        "id": 178415246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341792
    },
    {
        "content": "<p>For cases where interactions with foreign exceptions are necessary, platform-specific features may indeed be a good approach!</p>",
        "id": 178415250,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341794
    },
    {
        "content": "<p>I do think that <code>\"C unwind\"</code>, without any support for interacting with exception objects, solves enough real-world use cases to be valuable on its own</p>",
        "id": 178415337,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341827
    },
    {
        "content": "<p>But all of the unwindings that we end up supporting, might end up interacting with Rust frames at some point, and therefore with catch_unwind in those frames</p>",
        "id": 178415347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341840
    },
    {
        "content": "<blockquote>\n<p>I do think that \"C unwind\", without any support for interacting with exception objects, solves enough real-world use cases to be valuable on its own</p>\n</blockquote>\n<p>Yes, I think so. I guess that my view is that if it were to support foreign exceptions, it would solve the majority of cases, leaving no room below for other language features.</p>",
        "id": 178415524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571341955
    },
    {
        "content": "<blockquote>\n<p>unwindings ...might end up interacting...with catch_unwind </p>\n</blockquote>\n<p>I think that it's okay to leave that undefined (possibly indefinitely), though. Do you think that would be specifically \"more wrong\" than, e.g., leaving it undefined behavior to <code>longjmp</code> over frames with <code>Drop</code> objects?</p>",
        "id": 178415531,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571341958
    },
    {
        "content": "<blockquote>\n<p>But I think that could be always done later</p>\n</blockquote>\n<p>I think this could be done later and I also think Rust has a strong commitment to making cross-platform portability work and work well. I think that applies here. You should be able to do \"basic stuff\" portably, the concepts are very similar.</p>",
        "id": 178998007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951469
    }
]