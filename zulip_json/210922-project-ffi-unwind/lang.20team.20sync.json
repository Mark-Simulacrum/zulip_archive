[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just submitted a PR with my write-up. (Do you mind this sort of dual-notification when you're already getting a GitHub notification for this?) <a href=\"https://github.com/nikomatsakis/project-ffi-unwind/pull/12/files\" target=\"_blank\" title=\"https://github.com/nikomatsakis/project-ffi-unwind/pull/12/files\">https://github.com/nikomatsakis/project-ffi-unwind/pull/12/files</a></p>",
        "id": 178410154,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571338224
    },
    {
        "content": "<p>Please let me know if there's anything I'm not capturing that you think I should</p>",
        "id": 178410177,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571338240
    },
    {
        "content": "<p>To be clear, I am not expecting that this be merged prior to the meeting</p>",
        "id": 178411321,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571338917
    },
    {
        "content": "<p>I prefer zulip notification to GH</p>",
        "id": 178426014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571349837
    },
    {
        "content": "<p>though I do try to keep up with both</p>",
        "id": 178426058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571349845
    },
    {
        "content": "<p>Well then I shall continue to share!</p>",
        "id": 178426648,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571350374
    },
    {
        "content": "<p>FYI my other PR is now +7 instead of +95 lines</p>",
        "id": 178426696,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571350436
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> -- did you plan to attend lang team meeting and/or have any concise summary? If not, I can prep one</p>",
        "id": 178983970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571942649
    },
    {
        "content": "<p>I don't have a summary, but if you think it would be helpful I can join the meeting for a bit</p>",
        "id": 178984505,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571943030
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 178984513,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571943036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sorry to leave you in the lurch. Do you think it would be better to join or skip this week?</p>",
        "id": 178985607,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571943643
    },
    {
        "content": "<p>No worries -- but the team was fairly skeptical of this change to extern \"C\" permitting unwind by default</p>",
        "id": 178995271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571949613
    },
    {
        "content": "<p>I took some notes and will try to update <a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\">the document</a></p>",
        "id": 178995318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571949649
    },
    {
        "content": "<p>OK, so, I have updated the document. To me, the argument for extern \"C\" making unwinding UB is pretty strong -- it comes down to better alignment between the default and reality (i.e., most FFI calls do <em>not</em> unwind, and so it's better to call out those that do, which means we can have more special treatment at less cost).</p>",
        "id": 178997674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951281
    },
    {
        "content": "<p>It seems to me that technical details (i.e., about what is or is not UB within LLVM) are largely orthogonal from the question of what our default should be -- we have to work them out either way, if we want \"C unwind\".</p>",
        "id": 178997757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951311
    },
    {
        "content": "<p>However, if we <em>can't</em> work them all out, then that is further argument for \"C unwind\"</p>",
        "id": 178997765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951319
    },
    {
        "content": "<p>So TL;DR at this point I feel pretty sure that \"C\" / \"C unwind\" is a better choice than \"C\" / \"C noexcept\"</p>",
        "id": 178997788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951337
    },
    {
        "content": "<p>I'd be curious <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> / <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> if you see any problems with the arguments in <a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw?edit\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw?edit\">the hackmd document</a>.</p>",
        "id": 178997817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571951354
    },
    {
        "content": "<p>I’ll read that later, but “most FFI calls to C do not unwind” matches my experience as well</p>",
        "id": 178998237,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571951608
    },
    {
        "content": "<p>The reason I think the LLVM and other platform details are relevant is that I do think there's some value in matching existing behavior in the \"native ecosystem\"; and, in general, if unwinding can be expected to work safely in the ecosystem at large, then it seems reasonable to expect Rust to support that by default.</p>\n<p>That said, I agree that this isn't the most important consideration, and that there are very good reasons why Rust already diverges substantially from C++ (the de facto \"native ecosystem\" trend setter)</p>",
        "id": 178999545,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571952395
    },
    {
        "content": "<p>For instance, conceptually, I like that mangling is explicitly controlled with <code>no_mangle</code> as opposed to implicit with <code>extern \"C\"</code></p>",
        "id": 178999635,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571952458
    },
    {
        "content": "<p>But, as a data point for my \"existing behavior in the ecosystem\" comment, when I told nlewycky about the unwinding discussion, he was pretty surprised by the idea that Rust would try to \"sandbox\" unwinds</p>",
        "id": 178999860,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571952617
    },
    {
        "content": "<p>His position was that unwinding is part of the ABI, and the \"C\" ABI should be expected to potentially unwind (context: he was an LLVM dev for several years)</p>",
        "id": 178999928,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571952680
    },
    {
        "content": "<p>I think that's fair, but also abstract</p>",
        "id": 179001663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954178
    },
    {
        "content": "<p>In practice, a large number of C++ projects do not use exceptions (and compile with <code>-fno-exceptions</code> or whatever) -- in fact, I think maybe every C++ project I ever worked on? And of course things written in C largely do not unwind either. (Modulo longjmp I guess)</p>",
        "id": 179001720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954227
    },
    {
        "content": "<p>That's very on-brand for me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 179001730,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571954233
    },
    {
        "content": "<p>( I actually don't know whether FF uses <code>-fno-exceptions</code>... I never really hacked on it that much:) )</p>",
        "id": 179001744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954247
    },
    {
        "content": "<p>In any case, the arguments in the doc are fairly specific</p>",
        "id": 179001772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954270
    },
    {
        "content": "<p>That said, I think one of them -- \"code-size savings\" -- is only mildly persuasive. I'd like to see realistic measurements of real projects.</p>",
        "id": 179001830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954294
    },
    {
        "content": "<p>On a more practical note, I feel like a \"180\" of this kind is itself going a bit \"beyond our mandate\" in this group -- I think if we really feel it's best, we should make the case, but it'll require broader exposure, since most of the community has been expecting the opposite default.</p>",
        "id": 179001917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571954369
    },
    {
        "content": "<p>I'll think about it more (and hopefully have some time this weekend to write up summaries of all the discussion that's happened), but I think we can proceed with all of the following more or less in parallel:</p>\n<ul>\n<li>trim Niko's RFC down to just an announcement of the project WG and post it</li>\n<li>continue to design <code>extern \"C unwind\"</code> and (hopefully within the next week) post a minimial RFC</li>\n<li>stabilize the abort-on-unwind-through-<code>extern \"C\"</code> logic [1]</li>\n<li>possibly, design some explicit opt-in syntax for the abort-on-unwind feature</li>\n</ul>\n<p>[1] Centril brought this up in another thread as an argument against merging the remove-<code>nounwind</code> PR. Personally, despite the disagreements about abort-on-unwind-without-recourse in the past, I am currently of the opinion that it's okay to merge, because:</p>\n<ul>\n<li>AFAIK, unlike before, we have no one successfully using the existing behavior who is asking for it to remain in place:<ul>\n<li><code>setjmp</code>/<code>longjmp</code> no longer aborts with this logic, which makes rlua's use-case irrelevant</li>\n<li>My understanding is that mozjpeg-sys doesn't really \"work\" currently anyway, at least in a stable/reliable way</li>\n<li>Lucet is using <code>unwind(allowed)</code> on nightly</li>\n</ul>\n</li>\n<li>We can announce this project group to ensure that everyone is aware we're committed to providing a stable solution</li>\n</ul>\n<p>The main reason <em>not</em> to do this, I think, would be to keep open the possibility of changing the default. I would like to say that we could change it back to permit unwinding in the future as long as we say \"the behavior is still not considered stable, but as of right now, in practice it aborts.\" But I'm not sure this is reasonable: people could rely on not-unwinding for safety, and then there is a risk of crates not adopting any explicit abort-on-unwind feature once we introduce it. I'm a bit torn on this question.</p>",
        "id": 179002351,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571954642
    },
    {
        "content": "<p>I'm a bit confused, is the plan to make \"extern C\" UB on unwind or abort on unwind?</p>",
        "id": 179015558,
        "sender_full_name": "Amanieu",
        "timestamp": 1571968162
    },
    {
        "content": "<p>In any case, I'm not too attached to allowing unwinding in \"extern C\" by default.</p>",
        "id": 179015565,
        "sender_full_name": "Amanieu",
        "timestamp": 1571968195
    },
    {
        "content": "<p>Safe <code>extern \"C\" fn</code>s must abort on unwind; otherwise you have unsoundness</p>",
        "id": 179015624,
        "sender_full_name": "centril",
        "timestamp": 1571968244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> You are talking about <code>extern \"C\"</code> definitions, not declarations, right?</p>",
        "id": 179015766,
        "sender_full_name": "Amanieu",
        "timestamp": 1571968454
    },
    {
        "content": "<p>yep</p>",
        "id": 179015772,
        "sender_full_name": "centril",
        "timestamp": 1571968462
    },
    {
        "content": "<p>Right that clarifies things, thanks.</p>",
        "id": 179015788,
        "sender_full_name": "Amanieu",
        "timestamp": 1571968480
    },
    {
        "content": "<p>not the thing in <code>extern ABIString { ... }</code> blocks (imports)</p>",
        "id": 179015790,
        "sender_full_name": "centril",
        "timestamp": 1571968486
    },
    {
        "content": "<p>Sounds like everyone's in agreement that <code>extern \"C unwind\"</code> is an acceptable path forward, and that we are still leaning toward stabilizing the abort-logic for functions defined with <code>extern \"C\"</code>. I hope to get some time this weekend to write up summaries of these discussions and maybe even get an RFC or two ready to post.</p>",
        "id": 179016356,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1571969392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i read the document, but i was confused in some passages because when the text says \"C function\" it is not clear to me whether that means <code>extern \"C\"</code> with or without unwinding allowed, `extern \"C unwind\", or in some cases, whether it means functions defined in Rust or function declarations.</p>",
        "id": 179032860,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571993871
    },
    {
        "content": "<p>I'll leave some notes</p>",
        "id": 179032866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571993881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I am pretty disheveled today so I'll join by audio :D</p>",
        "id": 179552965,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572541707
    },
    {
        "content": "<p>haven't written anything up yet, but my \"summarizing discussions\" file and the new PR itself might be sufficient anyway</p>",
        "id": 179552998,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572541740
    },
    {
        "content": "<p>Oh, also, project group sync today? Now that we are \"announced\" it might be good to put a link to the meeting somewhere easily-findable</p>",
        "id": 179554176,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572542454
    },
    {
        "content": "<p>The sync went good</p>",
        "id": 179568064,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572550576
    },
    {
        "content": "<p>For some reason muting my zoom didn't really mute it :/</p>",
        "id": 179568081,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572550600
    },
    {
        "content": "<p>So thanks to whoever supermuted me</p>",
        "id": 179568093,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572550613
    }
]