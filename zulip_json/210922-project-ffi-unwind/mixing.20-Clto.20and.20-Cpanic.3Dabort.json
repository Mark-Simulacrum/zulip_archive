[
    {
        "content": "<p>I have questions about LTO and panic=abort that maybe <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> or <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> can answer</p>",
        "id": 251761877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606862
    },
    {
        "content": "<p>Based on reading <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting\">#project-ffi-unwind &gt; weekly meeting</a> ...</p>",
        "id": 251761919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606878
    },
    {
        "content": "<p>I <em>think</em> the problem is that we have some kind of LLVM pass that triggers with <code>-Clto</code></p>",
        "id": 251761954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606894
    },
    {
        "content": "<p>which goes and forcibly converts all invoke calls to not invoke</p>",
        "id": 251761980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606904
    },
    {
        "content": "<p>presumably because we may be mixing code from <code>-Cpanic=unwind</code> which was using <code>invoke</code></p>",
        "id": 251762011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606916
    },
    {
        "content": "<p>and the problem here is that there may be some calls to \"C-unwind\" FFI calls</p>",
        "id": 251762070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606924
    },
    {
        "content": "<p>which may indeed unwind, because we can't stop them</p>",
        "id": 251762080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606930
    },
    {
        "content": "<p>and now the personality function change that <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> proposed doesn't activate</p>",
        "id": 251762104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606940
    },
    {
        "content": "<p>because we are using an LLVM <code>call</code> and not an <code>invoke</code></p>",
        "id": 251762130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606951
    },
    {
        "content": "<p>is that all correct?</p>",
        "id": 251762139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606956
    },
    {
        "content": "<p>if so, is a plausible fix to add some sort of annotation to any call that we generate which is calling a \"C-unwind\" FFI function</p>",
        "id": 251762167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606969
    },
    {
        "content": "<p>and to modify the -Clto pass not to modify invokes with that annotation?</p>",
        "id": 251762191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606977
    },
    {
        "content": "<p>I'm not sure how one adds such annotations :) I'm just assuming it's possible</p>",
        "id": 251762213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606985
    },
    {
        "content": "<p>For this there's not anything baked into LLVM itself, rather rustc manually adds <code>nounwind</code> to all function calls (which will later get optimized from <code>invoke</code> to <code>call</code> by LLVM). The compiler runs the custom pass <a href=\"https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler/rustc_codegen_llvm/src/back/lto.rs#L339-L344\">here</a> which is defined <a href=\"https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp#L1267-L1284\">here</a>. Put another way, this is all custom rustc code, so one fix is \"just delete all that\". This is somewhat nontrivial though in that it's not clear how many, if any, users are relying on the behavior today</p>",
        "id": 251763021,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607287
    },
    {
        "content": "<p>LLVM afaik here has no issues, it's all about what we're giving LLVM</p>",
        "id": 251763059,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607305
    },
    {
        "content": "<p>The problem is that I think, fundamentally, that pass can't be \"updated\" in some way that adjusts for the new <code>C-unwind</code> ABI. We can't differentiate at the LLVM-IR-level what's a Rust function and what isn't. With that, though, we may be able to patch all the IR to do the right thing (by recording which symbols can actually unwind and having them continue to unwind, just going to landing pads that abort)</p>",
        "id": 251763478,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I don't get why the pass can't be adjusted</p>",
        "id": 251763652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630607513
    },
    {
        "content": "<p>this is kind of what I was proposing:</p>",
        "id": 251763670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630607518
    },
    {
        "content": "<p>don't we only have to modify the <em>exact call</em> to a ffi-unwind function?</p>",
        "id": 251763735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630607533
    },
    {
        "content": "<p>(and then it will enter our personality function and abort?)</p>",
        "id": 251763757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630607540
    },
    {
        "content": "<p>as I type this out I think it may be able to get updated, yeah</p>",
        "id": 251763867,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607577
    },
    {
        "content": "<p>I haven't thought much about specifics though</p>",
        "id": 251763911,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607596
    },
    {
        "content": "<p>but in theory there could be a set of symbols that are the <code>extern \"C-unwind\"</code> functions, both defined in Rust and in C), and any calls to those functions, with LTO, would immediately go to a landing pad that aborts.</p>",
        "id": 251763973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630607623
    }
]