[
    {
        "content": "<p>Hello, I've been recently looking into panic behavior in pyo3, with a draft PR (<a href=\"https://github.com/PyO3/pyo3/pull/797\" title=\"https://github.com/PyO3/pyo3/pull/797\">https://github.com/PyO3/pyo3/pull/797</a>) using <code>catch_unwind</code> to guard against current UB (as I understand it) of unwinding through CPython stack frames. (For Rust functions called by the Python interpreter.)</p>\n<p>If I'm reading the ffi-unwind group materials correctly, it sounds like the \"C unwind\" ABI would also make panics well-defined without needing to introduce <code>catch_unwind</code>. Is that correct?</p>\n<p>If you're interested in any details of pyo3 that would be helpful / relevant to this group's work, I'd be happy to offer them. Thanks.</p>",
        "id": 193380026,
        "sender_full_name": "David Hewitt",
        "timestamp": 1586380801
    },
    {
        "content": "<p>Note that the FFI code you are unwinding into also needs to support unwinding by performing the proper cleanups on unwind. So this only really works for C++ code, not C.</p>",
        "id": 193380364,
        "sender_full_name": "Amanieu",
        "timestamp": 1586381019
    },
    {
        "content": "<p>...unless your C code doesn't need any sort of \"cleanup\"; I think it's correct to think of it as being semantically identical to <code>longjmp</code> over the unwound frames.</p>",
        "id": 193381468,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1586381748
    },
    {
        "content": "<p>Your C code does need to be compiled with <code>-fexceptions</code> though.</p>",
        "id": 193381562,
        "sender_full_name": "Amanieu",
        "timestamp": 1586381787
    },
    {
        "content": "<p>Right.</p>",
        "id": 193381582,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1586381798
    },
    {
        "content": "<p>But in the pyo3 case, the cpython frames are the Python interpreter itself, right? It seems unlikely that any Python user would want that.</p>",
        "id": 193381654,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1586381843
    },
    {
        "content": "<p>...and of course it's unlikely that the Python interpreter's stack frames are \"clean-up free\".</p>",
        "id": 193381696,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1586381872
    },
    {
        "content": "<p>So <code>catch_unwind</code> seems very preferable.</p>",
        "id": 193381786,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1586381912
    },
    {
        "content": "<p>Great, that makes sense, thanks. The model we're heading toward is to use <code>catch_unwind</code> convert a Rust panic into a Python exception at the language boundary, and let the interpreter bubble it up through the \"Python\" stack frames.</p>",
        "id": 193382371,
        "sender_full_name": "David Hewitt",
        "timestamp": 1586382268
    },
    {
        "content": "<p>It then seems reasonable that if that Python exception gets returned to Rust code in some higher stack frame we should then restart Rust's unwinding with <code>resume_unwind</code>.</p>",
        "id": 193382521,
        "sender_full_name": "David Hewitt",
        "timestamp": 1586382377
    },
    {
        "content": "<p>If we did this <code>catch / resume</code> unwind dance, would \"C unwind\" simply offer no benefit here then? Or would it actually be actively harmful if the Python interpreter is not compiled with <code>-fexceptions</code></p>",
        "id": 193382656,
        "sender_full_name": "David Hewitt",
        "timestamp": 1586382482
    },
    {
        "content": "<p>\"C unwind\" is probably not useful for your case. You want to turn a Rust panic into a Python exception, but \"C unwind\" turns a Rust panic into a C++ exception.</p>",
        "id": 193382910,
        "sender_full_name": "Amanieu",
        "timestamp": 1586382632
    },
    {
        "content": "<p>Ok great. Thanks! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 193383363,
        "sender_full_name": "David Hewitt",
        "timestamp": 1586382907
    }
]