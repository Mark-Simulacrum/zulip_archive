[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>Would it be appropriate to broaden our charter now that we are considering <code>longjmp</code> et al.?</p>\n<p>Here's our current mission statement:</p>\n<blockquote>\n<p>To extend the language to support unwinding that crosses FFI boundaries.</p>\n</blockquote>\n<p>I think this should be broadened to:</p>\n<blockquote>\n<p>To extend the language to support control-flow constructs that cross between language boundaries without causing undefined behavior.</p>\n</blockquote>",
        "id": 211384546,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601157728
    },
    {
        "content": "<p>I thought <code>longjmp</code> was always part of the charter...</p>",
        "id": 211386162,
        "sender_full_name": "Amanieu",
        "timestamp": 1601160616
    },
    {
        "content": "<p>It's currently mentioned as \"maybe in scope\". The current charter has the mission statement above, followed by a bunch of bullet points that are sort of... speculative.</p>",
        "id": 211386288,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601160856
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-ffi-unwind/blob/master/charter.md\">https://github.com/rust-lang/project-ffi-unwind/blob/master/charter.md</a></p>",
        "id": 211386296,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601160870
    },
    {
        "content": "<p>I think that's appropriate</p>",
        "id": 211498106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302625
    },
    {
        "content": "<p>I feel like my original understanding of the effort was a bit off; there was less \"platform by platform wrangling\" than I expected</p>",
        "id": 211498134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302645
    },
    {
        "content": "<p>I am debating about the new phrasing, it's somewhat broad, but perhaps reasonable</p>",
        "id": 211498204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302680
    },
    {
        "content": "<p>in particular I'm pondering about things like C++-to-rust exception interop, which we initially kind of ruled out of scope</p>",
        "id": 211498280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302694
    },
    {
        "content": "<p>I'm somewhat opposed to \"major additions\" in this direction, at least not without considering as part of an overall prioritization, but targeted efforts (like figuring out the interaction with <code>catch_unwind</code>)</p>",
        "id": 211498350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302732
    },
    {
        "content": "<p><em>may</em> make sense</p>",
        "id": 211498368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302739
    },
    {
        "content": "<p>I'd like to get concrete users involved who are requesting them, though</p>",
        "id": 211498387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302748
    },
    {
        "content": "<p>longjmp has concrete users</p>",
        "id": 211498397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601302753
    },
    {
        "content": "<p>I think my top priority remains \"is it possible to write code without undefined behavior, given unusual legacy APIs?\"</p>",
        "id": 211511874,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601308727
    },
    {
        "content": "<p>It doesn't have to be easy or \"powerful\" or full-featured...just not UB.</p>",
        "id": 211511908,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601308747
    },
    {
        "content": "<p>So the reason we have \"extend the language\" in there is that we thought it was pretty much a certainty that we'd be making cross-language unwinding opt-in.</p>",
        "id": 211512059,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601308823
    },
    {
        "content": "<p>Similarly, for longjmp, we are leaning towards an explicit opt-in.</p>",
        "id": 211512101,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601308850
    },
    {
        "content": "<p>Those are both technically \"extending the language\" even though they're pretty minimal, and the language-level change isn't really the core concern.</p>",
        "id": 211512198,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601308892
    },
    {
        "content": "<p>I'm not sure how (or if) this intent of minimalism should be expressed in the charter, though.</p>",
        "id": 211512510,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601309042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> reviving an old topic: here's a pull request with this as our new mission statement:</p>\n<blockquote>\n<p>To extend the language to avoid undefined behavior when using control-flow constructs that cross between language boundaries.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/34\">https://github.com/rust-lang/project-ffi-unwind/pull/34</a></p>",
        "id": 235721645,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619114416
    }
]