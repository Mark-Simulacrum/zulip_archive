[
    {
        "content": "<p>I was attending the t-lang triage meeting earlier today, which reviewed this project, which I noted included longjmp.<br>\nI was wondering if it may be reasonable to adopt the same rules C++ has with longjmp and leave it at that.<br>\nThe definition in C++ is that if you replace setjmp with try/catch, and longjmp with throw, the throw would execute a non-trivial destructor, the behaviour is undefined. Rust could make a similar requirement with catch_unwind and panic.</p>",
        "id": 211560049,
        "sender_full_name": "Connor Horman",
        "timestamp": 1601333125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> Thanks for asking. We have actually already formally defined the notion of non-trivial cleanup, in preparation for our <code>longjmp</code> specification, in the FFI-unwinding RFC: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#plain-old-frames\">https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#plain-old-frames</a></p>",
        "id": 211562620,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601334955
    },
    {
        "content": "<p>The reason we don't want to simply go ahead and say \"<code>longjmp</code> is well defined across POFs\" is that it actually inhibits an optimization that we are interested in.</p>",
        "id": 211562692,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601334983
    },
    {
        "content": "<p>I thought it would be pretty easy to find our previous discussion about it, but apparently not... sorry! I've been meaning to write a blog post to kick off our <code>longjmp</code>-related work, so when I do, I'll be sure to dig up the conversation and include that information.</p>",
        "id": 211562901,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601335137
    },
    {
        "content": "<p>The gist, if I remember correctly, was that we want to be able to re-order certain calls, and in some cases the re-ordering would cause UB if the function is canceled (e.g. w/ <code>longjmp</code>) in between the re-ordered calls, even if only POFs are involved.</p>",
        "id": 211563024,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601335217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> , my comment above wouldn't happen to ring any bells, would it?</p>",
        "id": 211563228,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601335389
    },
    {
        "content": "<p>You can search for longjmp in Zulip using the button at the top of the screen.</p>",
        "id": 211566436,
        "sender_full_name": "Amanieu",
        "timestamp": 1601337902
    },
    {
        "content": "<p>Maybe you're referring to the \"UB to skip destructors\" thread on zulip?</p>",
        "id": 211566470,
        "sender_full_name": "Amanieu",
        "timestamp": 1601337950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> you're correct, that's the thread! I was misled by looking at the first few posts in that thread; RalfJ brought up the optimization towards the end of the thread.</p>",
        "id": 212720412,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1602176598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> Here is the prior discussion about the optimization that can be enabled by prohibiting <code>longjmp</code> in some contexts: <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20to.20skip.20destructors/near/200759346\">https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/UB.20to.20skip.20destructors/near/200759346</a></p>",
        "id": 212720515,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1602176643
    },
    {
        "content": "<p>The other benefit of having an explicit annotation for cancelable functions is that the compiler can assist with ensuring that an entire stack is cancelable.</p>",
        "id": 212720557,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1602176667
    },
    {
        "content": "<p>By the way, our biweekly check-in is in half an hour, so feel free to drop in!</p>",
        "id": 212720603,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1602176693
    },
    {
        "content": "<p>So apparently now that we emit <code>noalias</code> for <code>&amp;mut</code>, LLVM will actually perform the store sinking optimization that gets broken by <code>longjmp</code>: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=b0ac7b34a5bdc7c703247b8ab5dd6a9c\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=b0ac7b34a5bdc7c703247b8ab5dd6a9c</a></p>",
        "id": 234688340,
        "sender_full_name": "Amanieu",
        "timestamp": 1618497773
    },
    {
        "content": "<p>Interestingly, Clang does this too but GCC doesn't: <a href=\"https://godbolt.org/z/azj3K5zM1\">https://godbolt.org/z/azj3K5zM1</a></p>",
        "id": 234688518,
        "sender_full_name": "Amanieu",
        "timestamp": 1618497842
    },
    {
        "content": "<p>(In all of these examples <code>foo</code> is marked as <code>nounwind</code>)</p>",
        "id": 234688618,
        "sender_full_name": "Amanieu",
        "timestamp": 1618497864
    },
    {
        "content": "<p>That seems like it would be a miscompilation in LLVM, then?</p>",
        "id": 234718448,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618507422
    },
    {
        "content": "<p>Since <code>longjmp</code> from <code>foo</code> to a caller of <code>bar</code> would end up having the wrong value in <code>*x</code>?</p>",
        "id": 234718556,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618507454
    },
    {
        "content": "<p>I would personally be <em>extremely chuffed</em> if LLVM ends up introducing a new function attribute representing \"longjmpable\" or \"non-longjmpable\" that Rust is able to take advantage of</p>",
        "id": 234718933,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618507568
    },
    {
        "content": "<p>This only happens with <code>restrict</code>, which almost nobody uses.</p>",
        "id": 234759278,
        "sender_full_name": "Amanieu",
        "timestamp": 1618523091
    },
    {
        "content": "<p>I <em>think</em> it's a bug in LLVM: the transformation is invalid unless <code>foo</code> is guranteed to return. I think this would require the <code>willreturn</code> attribute, but I'm not 100% sure.</p>",
        "id": 234759755,
        "sender_full_name": "Amanieu",
        "timestamp": 1618523352
    },
    {
        "content": "<p>Hm...I don't think we can use <code>willreturn</code>, though, if <code>foo</code> is not <code>noexcept</code>. If <code>foo</code> can unwind, I think this optimization would only be correct if the drop-glue (right term?) for <code>bar</code> could restore the correct value for <code>x</code> (by subtracting 1).</p>",
        "id": 234764266,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618525687
    },
    {
        "content": "<p>LLVM only performs this optimization if <code>foo</code> is <code>nounwind</code>. It doesn't touch the drop glue at all.</p>",
        "id": 234782108,
        "sender_full_name": "Amanieu",
        "timestamp": 1618537911
    },
    {
        "content": "<p>Hm. Then yes, <code>willreturn</code> sounds appropriate for enabling this optimization.</p>",
        "id": 234785326,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618540754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> would you mind opening a bug report for this? If you're busy I can do it, but I think you probably understand the details better than I do.</p>",
        "id": 235545254,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619024261
    }
]