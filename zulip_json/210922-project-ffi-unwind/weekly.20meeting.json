[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> -- are we going to have a sync this week?</p>",
        "id": 179555807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543397
    },
    {
        "content": "<p>er, I see <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> you wrote a few comments in the \"lang team sync\" topic...</p>",
        "id": 179556019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543520
    },
    {
        "content": "<p>let's use this one for weekly meetings instead? seems like a better name :)</p>",
        "id": 179556031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543527
    },
    {
        "content": "<p>so where are we at</p>",
        "id": 179556045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543532
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I should just merge <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/16\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/16\">https://github.com/rust-lang/project-ffi-unwind/pull/16</a> ?</p>",
        "id": 179556133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543575
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 179556284,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543649
    },
    {
        "content": "<p>I think this is basically the same content as <a href=\"https://github.com/rust-lang/rfcs/pull/2797\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2797\">https://github.com/rust-lang/rfcs/pull/2797</a>, right?</p>",
        "id": 179556402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543722
    },
    {
        "content": "<p>I feel like the PR is close to having agreement, which is nice (I am guessing Centril is holding off on approving until the scope questions are addressed)</p>",
        "id": 179556459,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543738
    },
    {
        "content": "<p>I haven't revisited since my last round of comments</p>",
        "id": 179556477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543750
    },
    {
        "content": "<p>did you modify the text at all in response to those?</p>",
        "id": 179556488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543758
    },
    {
        "content": "<p>I should check</p>",
        "id": 179556492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543761
    },
    {
        "content": "<blockquote>\n<p>I guess <span class=\"user-mention silent\" data-user-id=\"120076\">Kyle Strand</span> I should just merge <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/16\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/16\">https://github.com/rust-lang/project-ffi-unwind/pull/16</a> ?</p>\n</blockquote>\n<p>You should always merge my PRs <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 179556531,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543785
    },
    {
        "content": "<p>No, I haven't made any modifications since then</p>",
        "id": 179556549,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543801
    },
    {
        "content": "<blockquote>\n<p>haven't written anything up yet, but my \"summarizing discussions\" file and the new PR itself might be sufficient anyway</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> which \"summarizing discussions\" file did you mean? oh, the one that summarized all of zulip?</p>",
        "id": 179556555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543808
    },
    {
        "content": "<p>But those were the only two outstanding concerns</p>",
        "id": 179556559,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543809
    },
    {
        "content": "<p>yep</p>",
        "id": 179556565,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543814
    },
    {
        "content": "<p>ok, I feel like there was <em>some</em> discussion I thought would be good to summarize specifically..not sure which it was now :)</p>",
        "id": 179556579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543828
    },
    {
        "content": "<p>\"catching foreign exceptions\", that topic</p>",
        "id": 179556675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543870
    },
    {
        "content": "<p>I guess the other lang team update is that we've extended the set of arguments somewhat around \"C unwind\" vs \"C noexcept\" etc</p>",
        "id": 179556703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543890
    },
    {
        "content": "<p>Yes</p>",
        "id": 179556756,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543920
    },
    {
        "content": "<p>oh I see there have been some new additions as well</p>",
        "id": 179556879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543974
    },
    {
        "content": "<p>I have to read those and see if I find them persuasive</p>",
        "id": 179556912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544002
    },
    {
        "content": "<p>one thing I would like to have is a list of which functions use \"C\" but actually <em>can</em> unwind</p>",
        "id": 179556946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544019
    },
    {
        "content": "<p>I guess <em>longjmp</em> is such an example :)</p>",
        "id": 179556961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544029
    },
    {
        "content": "<p>(at least on MSVC)</p>",
        "id": 179556969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544034
    },
    {
        "content": "<blockquote>\n<p>I have to read those and see if I find them persuasive</p>\n</blockquote>\n<p>FWIW I believe the HackMD updates capture the important bits of the conversation; reading the whole thread is likely not an optimal use of time</p>",
        "id": 179557093,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544113
    },
    {
        "content": "<p>I do not mean to read any threads :)</p>",
        "id": 179557115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544130
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 179557129,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544141
    },
    {
        "content": "<p>which thread are you referring to, \"noexcept-like feature\"? :)</p>",
        "id": 179557137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544143
    },
    {
        "content": "<blockquote>\n<p>Adding the guarantee to the language that extern \"C\" do not unwind has the same expressive power as C++ noexcept keyword, but much worse ergonomics.</p>\n</blockquote>",
        "id": 179557141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544150
    },
    {
        "content": "<p>Yes</p>",
        "id": 179557143,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544152
    },
    {
        "content": "<p>I am struggling with this statement :)</p>",
        "id": 179557149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544156
    },
    {
        "content": "<p>in particular, I'd lke to see examples of the ergonomics?</p>",
        "id": 179557164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544167
    },
    {
        "content": "<p>hey, sorry I'm late. catching up now</p>",
        "id": 179557170,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572544172
    },
    {
        "content": "<p>maybe they're below, but I got lost in the proof..</p>",
        "id": 179557171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544173
    },
    {
        "content": "<p>Oh, for that it might actually be useful to look at the examples gnzlbg gave in the thread</p>",
        "id": 179557189,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544184
    },
    {
        "content": "<p><a href=\"#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179520449\" title=\"#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179520449\">https://rust-lang.zulipchat.com/#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179520449</a></p>",
        "id": 179557256,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544206
    },
    {
        "content": "<p>and</p>\n<p><a href=\"#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179444817\" title=\"#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179444817\">https://rust-lang.zulipchat.com/#narrow/stream/210922-wg-ffi-unwind/topic/noexcept-like.20feature/near/179444817</a></p>",
        "id": 179557270,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544222
    },
    {
        "content": "<p>okI think the argument is:</p>",
        "id": 179557306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544252
    },
    {
        "content": "<p>you might like to guarantee \"no unwinding\" in cases where no C code is involved</p>",
        "id": 179557314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544260
    },
    {
        "content": "<p>Yes</p>",
        "id": 179557339,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544277
    },
    {
        "content": "<p>that's an interesting argument</p>",
        "id": 179557361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544290
    },
    {
        "content": "<p>and the idea is that introducing this feature \"accidentally\" by way of ABI strings would be detrimental</p>",
        "id": 179557382,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544305
    },
    {
        "content": "<p>\"detrimental\" may be too strong</p>",
        "id": 179557396,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544312
    },
    {
        "content": "<p>Generally, I do think that if/when we introduce a feature to cause functions to automatically abort-on-panic, it should be applicable to functions regardless of the ABI</p>",
        "id": 179557585,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544432
    },
    {
        "content": "<p>okay, caught up on this thread at least. I have had even less time than I was expecting given our current demo crunch. I'm excited by <a href=\"https://github.com/rust-lang/rust/issues/16\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/16\">#16</a>!</p>",
        "id": 179557688,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572544481
    },
    {
        "content": "<p>That seems true but it doesn't mean we can't <em>also</em> the ABI</p>",
        "id": 179557689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544483
    },
    {
        "content": "<p>but I see the point</p>",
        "id": 179557727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544500
    },
    {
        "content": "<p>I've summarized here:</p>\n<blockquote>\n<h3>You might like to avoid unwinding of Rust functions, too</h3>\n<p>We discussed how unsafe code in particular must be careful to be \"unwind safe\", but this applies not just to \"C\" functions but really to any Rust function. Therefore, we might like to have a feature that guarantees that some callee cannot unwind. But do we really want to use the ABI string to contrl this in the more general case?</p>\n</blockquote>",
        "id": 179557743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544510
    },
    {
        "content": "<p>I think the quote from Nick L that I added to the HackMD doc captures the concern: \"FFI is not a sandbox\"</p>",
        "id": 179557820,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544552
    },
    {
        "content": "<p>which is to say, the lang team has been planning to <em>make</em> it a sandbox for a long time, but at least one LLVM dev thought that sounded like the wrong approach. Not sure what weight to assign that fact.</p>",
        "id": 179557916,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544590
    },
    {
        "content": "<p>sandbox in what sense, here?</p>",
        "id": 179557981,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572544626
    },
    {
        "content": "<p>Sandboxing unwinding ops to prevent them from escaping</p>",
        "id": 179558009,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544647
    },
    {
        "content": "<p>I mean it doesn't actually \"prevent\", of course, since it would be \"UB\"</p>",
        "id": 179558019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544660
    },
    {
        "content": "<p>by changing the <em>semantics</em> of a function (i.e. inserting a shim that <em>does something</em>)</p>",
        "id": 179558023,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544663
    },
    {
        "content": "<p>I think it's more accurate to say that the ABI is <em>promising</em> not to unwind</p>",
        "id": 179558039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544673
    },
    {
        "content": "<p>it is most definitely not sandboxing it</p>",
        "id": 179558043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544678
    },
    {
        "content": "<p>it doesn't seem that different frm any other type</p>",
        "id": 179558089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544685
    },
    {
        "content": "<p>Oh, there's a misunderstanding here. The \"sandbox\" concern is about the planned behavior of <code>extern \"C\"</code>, which is to insert an abort-on-unwind shim (which is well defined)</p>",
        "id": 179558118,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544711
    },
    {
        "content": "<p>got it. yeah, seems like the best we can do is insert shims for the unwinding mechanisms we're aware of, but that's certainly not a guarantee</p>",
        "id": 179558124,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572544714
    },
    {
        "content": "<blockquote>\n<p>Oh, there's a misunderstanding here. The \"sandbox\" concern is about the planned behavior of <code>extern \"C\"</code>, which is to insert an abort-on-unwind shim (which is well defined)</p>\n</blockquote>\n<p>that is only true for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but not calls to some random <code>extern \"C\" fn</code></p>",
        "id": 179558160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544740
    },
    {
        "content": "<p>it seems like a key point</p>",
        "id": 179558179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544750
    },
    {
        "content": "<p>because the strongest argument <em>against</em> <code>extern \"C\"</code> unwinding has precisely to do with this</p>",
        "id": 179558192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544761
    },
    {
        "content": "<p>True.</p>",
        "id": 179558194,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544763
    },
    {
        "content": "<p>at least what I see as the strongest argument</p>",
        "id": 179558200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544769
    },
    {
        "content": "<p>Hm....I would see that as an argument <em>for</em> <code>extern \"C\"</code> unwinding: since the abort-shim can only be inserted in Rust functions, that would make <code>extern \"C\"</code> inconsistent.</p>",
        "id": 179558314,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544814
    },
    {
        "content": "<p>which is that <code>-Cpanic=abort</code> must <em>either</em> introduce shims on calls to <code>extern \"C\"</code> functions to abort or else it means that <code>-Cpanic=abort</code> can cause UB</p>",
        "id": 179558315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544814
    },
    {
        "content": "<p>for code that otherwise worked</p>",
        "id": 179558325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544821
    },
    {
        "content": "<p>and then there is the question of the cost of said shims in terms of code size (I am not sure what the answer is there)</p>",
        "id": 179558341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544833
    },
    {
        "content": "<p>I'm talking about the non-<code>panic=abort</code> case, i.e., the behavior originally introduced in 1.24.0</p>",
        "id": 179558342,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544834
    },
    {
        "content": "<p>those shims might also depend on platform/library calls that are exactly the kinds of things that, say, embedded would want to avoid</p>",
        "id": 179558390,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572544869
    },
    {
        "content": "<blockquote>\n<p>Hm....I would see that as an argument <em>for</em> <code>extern \"C\"</code> unwinding: since the abort-shim can only be inserted in Rust functions, that would make <code>extern \"C\"</code> inconsistent.</p>\n</blockquote>\n<p>fair, although you could view that as just an argument against adding the shims (to avoid inconsistency)</p>",
        "id": 179558443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544905
    },
    {
        "content": "<blockquote>\n<p>those shims might also depend on platform/library calls that are exactly the kinds of things that, say, embedded would want to avoid</p>\n</blockquote>\n<p>I suppose that if you are on a platform that has no unwinding mechanism, then that's a different scenario</p>",
        "id": 179558532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544935
    },
    {
        "content": "<p>(not sure if that's what you were implying)</p>",
        "id": 179558535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544939
    },
    {
        "content": "<p>Right -- without the shims, <code>extern \"C\"</code> would unwind</p>",
        "id": 179558545,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544943
    },
    {
        "content": "<p>instead of aborting</p>",
        "id": 179558559,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572544956
    },
    {
        "content": "<p>the point is that throws of foreign exceptions are out of our control, ultimately, so <code>-Cpanic=abort</code> can't change them to aborts</p>",
        "id": 179558562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544958
    },
    {
        "content": "<blockquote>\n<p>Right -- without the shims, <code>extern \"C\"</code> would unwind</p>\n</blockquote>\n<p>it would just be UB al the time</p>",
        "id": 179558582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544967
    },
    {
        "content": "<p>(presuming we added \"C unwind\", I mean)</p>",
        "id": 179558600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572544976
    },
    {
        "content": "<p>Re: <code>panic=abort</code> and calling foreign functions that unwind, I'd like to know whether <code>noexcept</code> in LLVM actually causes undefined behavior there. E.g. we already know it doesn't interfere with <code>longjmp</code> on Windows</p>",
        "id": 179558662,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> are you around?</p>",
        "id": 179558769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545053
    },
    {
        "content": "<p>I don't like appealing to the authority of the C/C++ world, but if my <code>-fno-exceptions</code> code called a function in a library that threw an exception, I wouldn't expect anything other than UB</p>",
        "id": 179558786,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572545062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> more or less</p>",
        "id": 179558828,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> yeah but that's the scenario I think we're trying to avoid</p>",
        "id": 179558829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545089
    },
    {
        "content": "<p>That's certainly my default assumption in that world <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 179558837,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545093
    },
    {
        "content": "<p>that is an alternative though</p>",
        "id": 179558843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545095
    },
    {
        "content": "<p>I haven't read this thread</p>",
        "id": 179558859,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> what I specifically wanted to ask you is</p>",
        "id": 179558874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545112
    },
    {
        "content": "<p>do you have a list somewhere of libc functions that might unwind?</p>",
        "id": 179558887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545118
    },
    {
        "content": "<p>yes, I posted it on the other thread, wait a sec</p>",
        "id": 179558911,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545128
    },
    {
        "content": "<p>is it like \"any pthread function\", in the case of cancelation occuring?</p>",
        "id": 179558914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545130
    },
    {
        "content": "<p>aah, sorry</p>",
        "id": 179558917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545132
    },
    {
        "content": "<p><a href=\"http://man7.org/linux/man-pages/man7/pthreads.7.html\" target=\"_blank\" title=\"http://man7.org/linux/man-pages/man7/pthreads.7.html\">http://man7.org/linux/man-pages/man7/pthreads.7.html</a></p>",
        "id": 179558959,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545160
    },
    {
        "content": "<blockquote>\n<p>I don't like appealing to the authority of the C/C++ world, but if my <code>-fno-exceptions</code> code called a function in a library that threw an exception, I wouldn't expect anything other than UB</p>\n</blockquote>\n<p>to expand on this -- the question is basically whether <code>-Cpanic=abort</code> should be the kind of thing that users have to be very careful and knowledge about (like certain details of target-feature), or is it something you can enable casually?</p>",
        "id": 179559022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545173
    },
    {
        "content": "<blockquote>\n<p>s it like \"any pthread function\", in the case of cancelation occuring?</p>\n</blockquote>\n<p>No, its more like any C or POSIX API that can do a system call</p>",
        "id": 179559034,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> presumably longjmp also falls into this category?</p>",
        "id": 179559045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545186
    },
    {
        "content": "<blockquote>\n<p>No, its more like any C or POSIX API that can do a system call</p>\n</blockquote>\n<p>woah wait hold up :)</p>",
        "id": 179559079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545199
    },
    {
        "content": "<p>in that link go for cancellation points, and there is a huge list: poll, open, sleep,</p>",
        "id": 179559083,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545200
    },
    {
        "content": "<p>that's a fairly broad category</p>",
        "id": 179559094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545204
    },
    {
        "content": "<p>ok, <em>that's</em> interesting</p>",
        "id": 179559102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545208
    },
    {
        "content": "<p>yes, there are a lot of APIs that are required to be cancellation points, and many that are allowed to be</p>",
        "id": 179559142,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545226
    },
    {
        "content": "<p>e.g. <code>printf</code> can be a cancellation point</p>",
        "id": 179559170,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545238
    },
    {
        "content": "<p>basically it works like a garbage collector would in say Java</p>",
        "id": 179559205,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545251
    },
    {
        "content": "<p>when you cancel a thread, the threading run-time will do so, once that thread calls a function from the C run-time</p>",
        "id": 179559261,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545281
    },
    {
        "content": "<p>if a thread doesn't do that, the run-time has little options to cancel the thread because the thread is doing other stuff</p>",
        "id": 179559364,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545318
    },
    {
        "content": "<p>so by calling <code>open</code>, you are yielding to the run-time, and might do a context switch, and at that point the runtime might say \"you are cancelled\"</p>",
        "id": 179559408,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545338
    },
    {
        "content": "<p>that makes a lot of sense but the implications are kind of horrifying</p>",
        "id": 179559473,
        "sender_full_name": "acfoltzer",
        "timestamp": 1572545380
    },
    {
        "content": "<p>I mean, the \"anything that can do a context switch is a cancellation point\" is my rule of thumb</p>",
        "id": 179559569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545417
    },
    {
        "content": "<p>There are like ~50 or so POSIX APIs that can be cancellation points</p>",
        "id": 179559597,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545432
    },
    {
        "content": "<p>there are many C APIs that are not. Those 50 APIs are used a lot though.</p>",
        "id": 179559619,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545450
    },
    {
        "content": "<p>Then there is the issue of what happens if the thread doesn't call a cancellation point for too long</p>",
        "id": 179559661,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545468
    },
    {
        "content": "<blockquote>\n<p>I feel like the PR is close to having agreement, which is nice (I am guessing Centril is holding off on approving until the scope questions are addressed)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>  I checked my box 2 days ago but it seems rfcbot didn't record it</p>",
        "id": 179559665,
        "sender_full_name": "centril",
        "timestamp": 1572545471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> thanks I will add those details to the hackmd</p>",
        "id": 179559722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545510
    },
    {
        "content": "<p>so I think i've revised my opinion</p>",
        "id": 179559725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545513
    },
    {
        "content": "<p>I used to think this was open-and-shut</p>",
        "id": 179559732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545516
    },
    {
        "content": "<p>There; the \"RFC\" is in FCP now</p>",
        "id": 179559733,
        "sender_full_name": "centril",
        "timestamp": 1572545517
    },
    {
        "content": "<p>but now I think that it's unclear</p>",
        "id": 179559786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545526
    },
    {
        "content": "<p>there is the question whether we want to support those cancellation points</p>",
        "id": 179559829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545551
    },
    {
        "content": "<p>yes</p>",
        "id": 179559892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545589
    },
    {
        "content": "<p>for example, we could say that using <code>pthread_cancel</code> with libstd threads is UB</p>",
        "id": 179559896,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545593
    },
    {
        "content": "<p>that's kind of the status quo right now</p>",
        "id": 179559904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545603
    },
    {
        "content": "<p>I also used to think that <code>\"C noexcept\"</code> was a \"no brainer\" to include, but now I think <em>that</em> is less clear -- the idea of just having \"C\" (which suppors unwinding in the platform default way) is somewhat appealing, and maybe having some form of no-except that is orthogonal to ABI</p>",
        "id": 179559908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545606
    },
    {
        "content": "<p>right, I think that is one of the options</p>",
        "id": 179559924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545624
    },
    {
        "content": "<p>I mean I think pthread cancelation is a terrible ida anyway :)</p>",
        "id": 179559950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545641
    },
    {
        "content": "<p>but .. maybe that's not for me to decide</p>",
        "id": 179559995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545646
    },
    {
        "content": "<p>I at least didn't appreciate that unwinding was used in this way</p>",
        "id": 179560008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545655
    },
    {
        "content": "<blockquote>\n<p>I also used to think that <code>\"C noexcept\"</code> was a \"no brainer\" to include, but now I think <em>that</em> is less clear -- the idea of just having \"C\" (which suppors unwinding in the platform default way) is somewhat appealing, and maybe having some form of no-except that is orthogonal to ABI</p>\n</blockquote>\n<p>Yes, I don't believe it's a \"no brainer\" either <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 179560012,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545658
    },
    {
        "content": "<p>might be a libs-team issue</p>",
        "id": 179560018,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545661
    },
    {
        "content": "<p>I feel like it merits a more focused discussion</p>",
        "id": 179560033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545674
    },
    {
        "content": "<blockquote>\n<p>but .. maybe that's not for me to decide</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> general point: I think it's fine to have opinionated language design</p>",
        "id": 179560043,
        "sender_full_name": "centril",
        "timestamp": 1572545679
    },
    {
        "content": "<p>note that if a thread doesn't call a C run-time function for a while, the run-time might send a signal and just kill it</p>",
        "id": 179560044,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545680
    },
    {
        "content": "<p>one thing that I think would be highly relevant would be data</p>",
        "id": 179560073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545699
    },
    {
        "content": "<p>(As an also-Haskeller it is predictable for me to say that however)</p>",
        "id": 179560074,
        "sender_full_name": "centril",
        "timestamp": 1572545699
    },
    {
        "content": "<p>I would be interestd -- since <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> cares a lot about this -- to gather data on fuschia builds without <code>-Cpanic=abort</code>, for example</p>",
        "id": 179560121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545732
    },
    {
        "content": "<p>which is kind of a \"worse case' :)</p>",
        "id": 179560129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545736
    },
    {
        "content": "<blockquote>\n<p>might be a libs-team issue</p>\n</blockquote>\n<p>actually it occurs to me that</p>",
        "id": 179560238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545788
    },
    {
        "content": "<p>this is <em>also</em> an argument for <code>#[unwind(allow)]</code></p>",
        "id": 179560262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545797
    },
    {
        "content": "<p>i.e., if we say that <code>\"C\"</code> ABI permits unwinding, but the function must be declared to unwind, and by-pointer calls <em>assume</em> it may unwind</p>",
        "id": 179560284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> huh?</p>",
        "id": 179560285,
        "sender_full_name": "centril",
        "timestamp": 1572545814
    },
    {
        "content": "<p>then the libc functions can become <code>#[unwind(allow)]</code></p>",
        "id": 179560304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545824
    },
    {
        "content": "<p>in a backwards compatible way</p>",
        "id": 179560311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545826
    },
    {
        "content": "<p>yes, that was also another possible design</p>",
        "id": 179560363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572545852
    },
    {
        "content": "<p>libc's backwards compatibility policies are not something I care about</p>",
        "id": 179560378,
        "sender_full_name": "centril",
        "timestamp": 1572545861
    },
    {
        "content": "<p>Niko, do you mean that without the <code>unwind(allow)</code> annotation, <code>extern \"C\" fn ... { /* Rust code */ }</code> <em>would</em> insert the abort-shim?</p>",
        "id": 179560397,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545880
    },
    {
        "content": "<blockquote>\n<p>libc's backwards compatibility policies are not something I care about</p>\n</blockquote>\n<p>Noted, but that's not universal!</p>",
        "id": 179560458,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545901
    },
    {
        "content": "<p>yes but also</p>",
        "id": 179560474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545907
    },
    {
        "content": "<p>it's not just about libc back-compat</p>",
        "id": 179560513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545926
    },
    {
        "content": "<p>Centril, I believe you previously objected to <code>extern \"C\" &lt;Rust fn&gt;</code> inserting the shim, but <code>extern \"C\"</code> being assumed to \"possibly unwind\", being inconsistent?</p>",
        "id": 179560556,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545951
    },
    {
        "content": "<p>I guess it's a variant of the \"it's simpler to have one ABI that supports the things the ABI supports\"</p>",
        "id": 179560558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, 10 min to pre-triage</p>",
        "id": 179560561,
        "sender_full_name": "centril",
        "timestamp": 1572545955
    },
    {
        "content": "<p>i.e., all extern \"C\" functions can unwind (the ABI permits it) -- but if we know the callee, we may know they won't</p>",
        "id": 179560608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545983
    },
    {
        "content": "<p>you could also argue for the opposite default</p>",
        "id": 179560633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545997
    },
    {
        "content": "<p>which is where <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> started</p>",
        "id": 179560695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546005
    },
    {
        "content": "<p>ok, I'm seeing the case for that a bit stronger</p>",
        "id": 179560701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546009
    },
    {
        "content": "<p>I want to spend some time thinking on how to re-organize the hackmd now to better bring these ideas out</p>",
        "id": 179560806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> \"the shim\" ?</p>",
        "id": 179560905,
        "sender_full_name": "centril",
        "timestamp": 1572546132
    },
    {
        "content": "<p>the abort on unwind shim?</p>",
        "id": 179560936,
        "sender_full_name": "centril",
        "timestamp": 1572546137
    },
    {
        "content": "<p>or some other?</p>",
        "id": 179560949,
        "sender_full_name": "centril",
        "timestamp": 1572546141
    },
    {
        "content": "<p>That sentence wasn't clear enough for me to understand &amp; answer</p>",
        "id": 179560995,
        "sender_full_name": "centril",
        "timestamp": 1572546164
    },
    {
        "content": "<p>Sorry, yes, the abort-on-unwind shim.</p>",
        "id": 179561067,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> From a purely compiler &amp; spec POV I think a distinct ABI string is simplest at least; it is using an existing infra rather than inventing a new one</p>",
        "id": 179561089,
        "sender_full_name": "centril",
        "timestamp": 1572546213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>  the abort-on-unwind shim is mandatory if unwinding is not allowed for soundness</p>",
        "id": 179561176,
        "sender_full_name": "centril",
        "timestamp": 1572546250
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> From a purely compiler &amp; spec POV I think a distinct ABI string is simplest at least; it is using an existing infra rather than inventing a new one</p>\n</blockquote>\n<p>Removing <code>nounwind</code> from LLVM code generation for <code>extern \"C\"</code>, and stabilizing the <code>unwind(allowed/abort)</code> attributes, is even simpler, isn't it?</p>",
        "id": 179561235,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546295
    },
    {
        "content": "<p>I don't believe so</p>",
        "id": 179561273,
        "sender_full_name": "centril",
        "timestamp": 1572546321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> when you invoke a function, we already have a unique type that represents known callees</p>",
        "id": 179561446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546396
    },
    {
        "content": "<p>The \"Rust\" ABI already does switch <code>nounwind</code> off, so that logic already exists wrt. pattern matching on ABIs</p>",
        "id": 179561457,
        "sender_full_name": "centril",
        "timestamp": 1572546404
    },
    {
        "content": "<p>so it's not hard to distinguish \"call by pointer\" from \"call to known function\"</p>",
        "id": 179561458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546405
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120076\">Kyle Strand</span>  the abort-on-unwind shim is mandatory if unwinding is not allowed for soundness</p>\n</blockquote>\n<p>I'm talking about the case where unwinding <em>is</em> allowed. I remember you saying that this combination would be inconsistent:</p>\n<ul>\n<li><code>extern \"C\" fn &lt;... Rust code ... &gt;</code> automatically inserts an abort-on-unwind shim, unless there's an opt-out via <code>unwind(allowed)</code></li>\n<li><code>extern \"C\" { fn &lt;imported fn that may be from e.g. C++&gt; }</code> is \"assumed to possibly unwind\", i.e., invocations of a that function can't insert <code>nounwind</code></li>\n</ul>",
        "id": 179561479,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546416
    },
    {
        "content": "<p>...and I believe that's the combination Niko is describing above.</p>",
        "id": 179561531,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546447
    },
    {
        "content": "<blockquote>\n<p>i.e., if we say that <code>\"C\"</code> ABI permits unwinding, but the function must be declared to unwind, and by-pointer calls <em>assume</em> it may unwind</p>\n</blockquote>\n<p>in this message</p>",
        "id": 179561575,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546473
    },
    {
        "content": "<p>that seems inconsistent yes</p>",
        "id": 179561580,
        "sender_full_name": "centril",
        "timestamp": 1572546475
    },
    {
        "content": "<p>Okay, glad I remembered correctly <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 179561644,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546496
    },
    {
        "content": "<p>I thought so, but now i'm not so sure.</p>",
        "id": 179561670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546508
    },
    {
        "content": "<p>It also depends a lot on the defaults.</p>",
        "id": 179561677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> You are talking about the distinction between <code>FnDef</code> and <code>FnPtr</code>?</p>",
        "id": 179561709,
        "sender_full_name": "centril",
        "timestamp": 1572546536
    },
    {
        "content": "<p>But it seems like a big part of this question is also a matter of costs -- like, if the worst part of \"C unwinds\" is the need for an abort shim on call sites, how much does that really cost in actual programs? can we readily measure that?</p>",
        "id": 179561737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546557
    },
    {
        "content": "<p>it seems eminently measurable</p>",
        "id": 179561786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> at any rate, we have pre-triage now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 179561812,
        "sender_full_name": "centril",
        "timestamp": 1572546604
    },
    {
        "content": "<p>yes, I know.</p>",
        "id": 179561861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572546614
    },
    {
        "content": "<p>one open question with the unwind by default, <code>nounwind</code> opt-in, is how to apply <code>#[unwind(aborts)]</code> to function pointers</p>",
        "id": 179562177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572546782
    },
    {
        "content": "<p>but that's more a syntactic issue</p>",
        "id": 179562252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572546825
    },
    {
        "content": "<p>For <code>#[unwind(aborts)]</code>, it is the responsibility of the callee to ensure that it aborts instead of unwinding. From the caller's point of view it's just a <code>nounwind</code> function. So there isn't much to do with function pointers: by default they can unwind and specifying nounwind function pointers probably isn't worth the trouble.</p>",
        "id": 179565730,
        "sender_full_name": "Amanieu",
        "timestamp": 1572548869
    },
    {
        "content": "<p>maybe, that was an unresolved question last time</p>",
        "id": 179566637,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572549443
    },
    {
        "content": "<p>in case we wanted to do that in the future <code>#[unwind(aborts)]</code> can  just be allowed when specifying function pointers, that would be a backward compatible change</p>",
        "id": 179566726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572549495
    },
    {
        "content": "<p>hey folks, I'm going to be a bit late to the sync this week as we have a contractor at the house still</p>",
        "id": 180159883,
        "sender_full_name": "acfoltzer",
        "timestamp": 1573151250
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 180160451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573151618
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> -- quick sync? I'm not sure if anything happened this week, though</p>",
        "id": 180160470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573151626
    },
    {
        "content": "<p>I would be happy to spend a bit of time <em>now</em> on looking over the hackmd</p>",
        "id": 180160561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573151665
    },
    {
        "content": "<p>okay, contractors just finished up. I could take a look at a hackmd—which one?</p>",
        "id": 180161974,
        "sender_full_name": "acfoltzer",
        "timestamp": 1573152555
    },
    {
        "content": "<p><a href=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\" target=\"_blank\" title=\"https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw\">https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw</a></p>",
        "id": 180162265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152715
    },
    {
        "content": "<p>I've not done anything, I got distracted by a million other pings :)</p>",
        "id": 180162318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152727
    },
    {
        "content": "<p>But I was saying last week that I felt like the organization wasn't right anymore</p>",
        "id": 180162337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152737
    },
    {
        "content": "<p>Let me take 10 minutes to see...</p>",
        "id": 180162341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152741
    },
    {
        "content": "<p>gotcha, taking a look now. I likewise have been on other things for the last week, but we're getting close to the end of this demo sprint</p>",
        "id": 180162391,
        "sender_full_name": "acfoltzer",
        "timestamp": 1573152773
    },
    {
        "content": "<p>also the Cranelift PR for eh_frame data is active once again, so this is really going to be occupying my attention again soon</p>",
        "id": 180162448,
        "sender_full_name": "acfoltzer",
        "timestamp": 1573152813
    },
    {
        "content": "<p>what I didn't like about this framing</p>",
        "id": 180162574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152874
    },
    {
        "content": "<p>for one thing I didnj't like the lsit of two options</p>",
        "id": 180162596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152890
    },
    {
        "content": "<p>I thnk i'd like to sort of collapse the list of arguments into broader \"considerations\"</p>",
        "id": 180162615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152904
    },
    {
        "content": "<p>I'm creating a <a href=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\" target=\"_blank\" title=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\">second hackmd to play around</a></p>",
        "id": 180162652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573152931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> -- you mentioned that Fuschia had some numbers regarding the cost of <code>-Cpanic=abort</code> vs <code>-Cpanic=unwind</code> somewhere?</p>",
        "id": 180162979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153113
    },
    {
        "content": "<p>I know that <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> had some smaller measurements</p>",
        "id": 180163015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153135
    },
    {
        "content": "<p>I only had some synthetic examples, where the impact was massive, but it is hard to extrapolate from there to a real application. An App where ~0% of the code does C FFI calls won't probably see any differences, but an FFI wrapper might or might not see some, depending on other factors like whether it uses variables with destructors in the frames doing FFI calls, etc.</p>",
        "id": 180163515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573153355
    },
    {
        "content": "<p>Maybe it would be interesting to benchmark, e.g., <code>mozjpeg</code> or similar with <code>-C panic=abort</code> and <code>-C panic=unwind</code>.</p>",
        "id": 180163552,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573153385
    },
    {
        "content": "<p>I agree</p>",
        "id": 180163618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153428
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> who is the better person to talk with about fuchsia stuff going forwards</p>",
        "id": 180163686,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573153454
    },
    {
        "content": "<p>It's a wrapper over <code>mozjpeg-sys</code>, so the impact there can be big, but if it turns out it is small, it is probably safe to conclude that this won't impact large apps except for maybe pathological cases</p>",
        "id": 180163727,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573153482
    },
    {
        "content": "<p>and is the one who collected the most recent data on this</p>",
        "id": 180163731,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573153484
    },
    {
        "content": "<p>We (fuchsia) also have a decently large amount of FFI, and so would probably be an interesting benchmark for this specific case as well</p>",
        "id": 180163795,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573153526
    },
    {
        "content": "<p>yes, it seems like a perfect case to measure</p>",
        "id": 180163942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153579
    },
    {
        "content": "<p>of course the cost of <code>-Cpanic=unwind</code> is greater than the cost would be to <em>just</em> have abort guards on FFI calls</p>",
        "id": 180163981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153598
    },
    {
        "content": "<p>but it's a good and easy to measure upper bound</p>",
        "id": 180163989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153602
    },
    {
        "content": "<p>(I think it's an upper bound?)</p>",
        "id": 180163997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573153609
    },
    {
        "content": "<p>the addendum in the first hackmd about <code>nounwind fn foo()</code> is really interesting; it hadn't occurred to me but of course makes a lot of sense that people would use a nounwind C ABI to implement targeted no-panic guarantees</p>",
        "id": 180164338,
        "sender_full_name": "acfoltzer",
        "timestamp": 1573153792
    },
    {
        "content": "<p>Hey all, sorry I missed this sync session, and generally haven't been very helpful this week. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you think it would be valuable for me to attend the lang meeting; I believe we don't have a real update since last meeting, though.</p>",
        "id": 180165149,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573154226
    },
    {
        "content": "<p>I think it's ok to say \"no update, we're still working on preparing this core question\"</p>",
        "id": 180165464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154399
    },
    {
        "content": "<p>I mean I also think this is a pretty important question to get right!</p>",
        "id": 180165517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154407
    },
    {
        "content": "<p>\"the rest is details\"</p>",
        "id": 180165525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154410
    },
    {
        "content": "<p>I think we've kind of covered the space</p>",
        "id": 180165552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154422
    },
    {
        "content": "<p>in terms of considerations</p>",
        "id": 180165567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154432
    },
    {
        "content": "<p>ok so I've been working on this <a href=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\" target=\"_blank\" title=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\">alternate form</a></p>",
        "id": 180166465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573154975
    },
    {
        "content": "<p>what I am trying to do is to factor out some of the \"considerations\" that are common, without getting into too much detail about specific approaches</p>",
        "id": 180166548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573155004
    },
    {
        "content": "<p>what I wanted to do next is to create a section where I talk about the various options and try to explain their pros/cons in terms of those considerations</p>",
        "id": 180166576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573155020
    },
    {
        "content": "<p>I'm running out of time to work on that :)</p>",
        "id": 180166582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573155023
    },
    {
        "content": "<p><code>meaning of C</code> == <code>meaning of the \"C\" ABI specifier</code> ?</p>",
        "id": 180168230,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573156013
    },
    {
        "content": "<p>I will try to spend some time looking at that in the next few days</p>",
        "id": 180168297,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573156061
    },
    {
        "content": "<p>I might be late and/or miss a meeting today, <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span></p>",
        "id": 180758990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573756116
    },
    {
        "content": "<p>Shoot, I forgot this was right after the release team meeting.</p>",
        "id": 180760468,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757085
    },
    {
        "content": "<p>Want to sync up now?</p>",
        "id": 180760479,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757100
    },
    {
        "content": "<p>OK, I'm around now -- not sure that there is much to say</p>",
        "id": 180760658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757225
    },
    {
        "content": "<p>At this point I still really want to see some data</p>",
        "id": 180760665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757232
    },
    {
        "content": "<p>It looks like I've gotten \"close\" to implementing the changes needed, I have to incorporate what <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> mentioned</p>",
        "id": 180760699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757252
    },
    {
        "content": "<p>And then probably bug <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> to find out how to replicate their numbers but with a local build?</p>",
        "id": 180760713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757266
    },
    {
        "content": "<p>Not sure how hard that will be</p>",
        "id": 180760719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757272
    },
    {
        "content": "<p>Or I guess it doesn't have to be <em>me</em> who does that</p>",
        "id": 180760724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757276
    },
    {
        "content": "<p>In fact it seems like it would be better if it were someone else :)</p>",
        "id": 180760770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757288
    },
    {
        "content": "<p>Ah one thing I <em>did</em> want to talk to you about <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> was that I think we are ripe for an internals blog post</p>",
        "id": 180760784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757299
    },
    {
        "content": "<p>er, \"Inside Rust\"</p>",
        "id": 180760792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757304
    },
    {
        "content": "<p>Maybe introducing the group with a bit of background, talking about how the first big discussion has to do with \"C\", and encouraging people to check out the hackmd, come to the zulip channel, something like that?</p>",
        "id": 180760834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757339
    },
    {
        "content": "<p>\"All areas of life progressively come to resemble TODO lists\" - me, inside my head, often</p>",
        "id": 180761142,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757504
    },
    {
        "content": "<p>That sounds good. I'm sorry I haven't been active here this week. I need to take some days off work and catch up on the rest of my life.</p>",
        "id": 180761211,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757530
    },
    {
        "content": "<p>:/</p>",
        "id": 180761212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757530
    },
    {
        "content": "<p>Oh please never apologize for that :)</p>",
        "id": 180761228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757542
    },
    {
        "content": "<p>To be clear, I think we're making good progress</p>",
        "id": 180761236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757553
    },
    {
        "content": "<p>I feel like at this point we've really bottomed out the pros/cons around the extern \"C\" thing fairly deeply</p>",
        "id": 180761246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757563
    },
    {
        "content": "<p>We're missing some data and we need to kind of have a chat and try to \"make a call\"</p>",
        "id": 180761262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757577
    },
    {
        "content": "<p>My third sentence was intended to be merely informational, not a continuation of the apology <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 180761274,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757586
    },
    {
        "content": "<p>Are you interested in trying to write said blog post?</p>",
        "id": 180761431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757686
    },
    {
        "content": "<p>Maybe - I think that a higher-priority use of my time, when I have some, would be to get our \"summaries &amp; current status\" documents in a good state.</p>",
        "id": 180761509,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757734
    },
    {
        "content": "<p>Especially if we hope to get new contributors to the discussion via this blog post</p>",
        "id": 180761524,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757742
    },
    {
        "content": "<p>I agree about needing to have a chat to \"make the call.\" I want to talk to Centril more about the \"FFI is not a sandbox\" point - he left a response in the HackMD saying the verbiage there was \"not justified\", but I'm still pretty convinced that it's a valid concern.</p>",
        "id": 180761612,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757784
    },
    {
        "content": "<p>one thing -- we do now have the two documents</p>",
        "id": 180761644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757806
    },
    {
        "content": "<p>I would prefer to deprecate the first one :)</p>",
        "id": 180761653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757813
    },
    {
        "content": "<p>the two HackMDs?</p>",
        "id": 180761661,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757820
    },
    {
        "content": "<p>at least two, but yeah</p>",
        "id": 180761680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757828
    },
    {
        "content": "<p>the one centril commented on is the older one</p>",
        "id": 180761689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757835
    },
    {
        "content": "<p>I'm curious if other people feel the second one is better :)</p>",
        "id": 180761696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757841
    },
    {
        "content": "<p>I don't have the \"FFI is not a sandbox\" thing in there</p>",
        "id": 180761711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757851
    },
    {
        "content": "<p>two documents about <code>extern \"C\"</code> considerations? Yes, at most one should be introduced to the <code>master</code> branch of the Repo.</p>",
        "id": 180761713,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757856
    },
    {
        "content": "<p>at least not \"explicitly\", but I do have the</p>",
        "id": 180761724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757862
    },
    {
        "content": "<p>well I do have a section about exposing the \"full\" ABI</p>",
        "id": 180761745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757880
    },
    {
        "content": "<p>I think that quote could be added, potentially, though I'm not sure how imp't it is</p>",
        "id": 180761798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757894
    },
    {
        "content": "<p>Newer document: <a href=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\" target=\"_blank\" title=\"https://hackmd.io/JIsPlpIPR2yTC051m4Mliw\">\"meaning of the C abi\"</a></p>",
        "id": 180761849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757933
    },
    {
        "content": "<p>I think the \"sandbox\" quote captures something important, but doesn't do so in a clear/unambiguous way (which makes sense because it's just a snippet from a personal email).</p>",
        "id": 180761851,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573757935
    },
    {
        "content": "<p>I think what could be improved in this doc a bit</p>",
        "id": 180761905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757979
    },
    {
        "content": "<p>hmm have to think about it</p>",
        "id": 180761915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573757987
    },
    {
        "content": "<p>well what I find compelling in this structure is reading the options at the end</p>",
        "id": 180761996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758018
    },
    {
        "content": "<p>maybe I should move them to the front :)</p>",
        "id": 180762000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758023
    },
    {
        "content": "<p>and trying to tell different \"stories\"--</p>",
        "id": 180762015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758033
    },
    {
        "content": "<p>anyway</p>",
        "id": 180762042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758050
    },
    {
        "content": "<p>I haven't made up my mind yet, in any case</p>",
        "id": 180762048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758054
    },
    {
        "content": "<p>Though I am much more sympathetic to the \"noexcept is an orthogonal consideration from ABI\" POV that I thought I was</p>",
        "id": 180762080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758073
    },
    {
        "content": "<p>but I think it has to come paired with the more permissive defaults</p>",
        "id": 180762090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758084
    },
    {
        "content": "<p>i.e., if extern \"C\" fns make it UB to unwind by default</p>",
        "id": 180762098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758092
    },
    {
        "content": "<p>I think that combination is strictly worse than \"C unwind\" ABI</p>",
        "id": 180762105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758100
    },
    {
        "content": "<blockquote>\n<p>Though I am much more sympathetic to the \"noexcept is an orthogonal consideration from ABI\" POV that I thought I was</p>\n</blockquote>\n<p>I think that at least partially captures the \"FFI is not a sandbox\" concern.</p>",
        "id": 180762397,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758247
    },
    {
        "content": "<p>They're at least tightly coupled.</p>",
        "id": 180762405,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758256
    },
    {
        "content": "<p>I absolutely agree that UB-by-default is strictly worse than not-UB-by-default.</p>",
        "id": 180762452,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758284
    },
    {
        "content": "<p>And I think in that sense, making ABI boundaries have some \"sandbox\" qualities _is_ in line with Rust's goals and language-values.</p>",
        "id": 180762501,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758312
    },
    {
        "content": "<p>Or, to remove the word \"sandbox\" entirely:</p>\n<ul>\n<li>FFI (in any language) should not protect the user from well-defined parts of the ABI being used, <em>even if</em> those parts of the ABI are \"problematic\" in some way (as exceptions arguably are), <em>but</em>...</li>\n<li>Protecting the user from undefined behavior is part of Rust's core values, and FFI is not <em>inherently</em> an opt-out from that protection.</li>\n</ul>",
        "id": 180762797,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758488
    },
    {
        "content": "<p>In any case, I think this is a reasonable TODO list for me, with a soft deadline of...let's say this time next week:</p>\n<ul>\n<li>\n<p>\"summary and status\" docs</p>\n<p>- Reorganize<br>\n- Capture any important conversations held in Zulip that aren't in the repo yet</p>\n</li>\n<li>\n<p>\"Not a sandbox\" issue</p>\n<p>- Discuss w/ Centril - what is meant by \"not justified\"? Try to clarify my understanding of the concern, confirm that Centril shares this understanding (regardless of agreeing or not)<br>\n- Draft section for \"meaning of the C abi\" doc</p>\n</li>\n<li>\n<p>Draft blog post for \"Inside Rust\"</p>\n</li>\n</ul>",
        "id": 180762952,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758575
    },
    {
        "content": "<blockquote>\n<p>I think that at least partially captures the \"FFI is not a sandbox\" concern.</p>\n</blockquote>\n<p>I agree</p>",
        "id": 180763136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758668
    },
    {
        "content": "<p>That's roughly in order of what I think my priorites ought to be.</p>",
        "id": 180763140,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573758670
    },
    {
        "content": "<p>I don't think I would waste a lot of time scraping zulip</p>",
        "id": 180763189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758711
    },
    {
        "content": "<p>but I do think that updating the repo is maybe good</p>",
        "id": 180763202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758722
    },
    {
        "content": "<p>in particular, our roadmap seems wrong</p>",
        "id": 180763252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758731
    },
    {
        "content": "<p>i.e., we have a \"step 0\" I thought was settled</p>",
        "id": 180763259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758736
    },
    {
        "content": "<p>but it seems is not</p>",
        "id": 180763263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758738
    },
    {
        "content": "<p>and we've not updated that</p>",
        "id": 180763266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758740
    },
    {
        "content": "<p>(\"figuring out the overall direction\")</p>",
        "id": 180763276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758749
    },
    {
        "content": "<p>What I want to try to do vis-a-vis Zulip is maintain a document that we can point to such that anyone who reads it (whether they're newcomers or haven't visited the stream in a while) should feel equipped to participate in the conversation without needing to read too far back in Zulip history.</p>",
        "id": 180763916,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759089
    },
    {
        "content": "<p>I think my original approach of \"summarize each week's Zulip activity\" may not be the most efficient way to do that, but I'd still like to find some way to accomplish the goal.</p>",
        "id": 180763987,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759135
    },
    {
        "content": "<p>Yes.</p>",
        "id": 180764239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759283
    },
    {
        "content": "<p>I do think that's a super good goal</p>",
        "id": 180764246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759289
    },
    {
        "content": "<p>I guess what I'm contending .. hmm, what am I contending</p>",
        "id": 180764261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759298
    },
    {
        "content": "<p>One observation is that while I like the hackmd approach, I do often wish for a \"go deeper\" option</p>",
        "id": 180764273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759307
    },
    {
        "content": "<p>A wiki is a plausible structure here</p>",
        "id": 180764281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759314
    },
    {
        "content": "<p>(We could even use GH's wikis)</p>",
        "id": 180764286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759318
    },
    {
        "content": "<p>i.e., I'd like to start from \"here are the proposals and some pros and cons\"</p>",
        "id": 180764359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759338
    },
    {
        "content": "<p>and be able to click from a given pro to learn more about the thing in question</p>",
        "id": 180764384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759355
    },
    {
        "content": "<p>but I also feel a \"woah diminishing returns\" flag going on</p>",
        "id": 180764392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759361
    },
    {
        "content": "<p>Yes</p>",
        "id": 180764397,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759364
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 180764404,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759368
    },
    {
        "content": "<p>lots of work to organize this information and not obviously worth the effort :)</p>",
        "id": 180764406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759369
    },
    {
        "content": "<p>though if we found a good structure, it might be less work overall</p>",
        "id": 180764439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759389
    },
    {
        "content": "<p>and I am deeply concerned about the way our current practices</p>",
        "id": 180764452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759397
    },
    {
        "content": "<p>Well, to be fair, the topics in the stream are decently well named, so anyone interested in the <em>history</em> of a given question can probably find what they want.</p>",
        "id": 180764454,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759399
    },
    {
        "content": "<p>leave us with a very confusing \"design trail\"</p>",
        "id": 180764458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759401
    },
    {
        "content": "<p>I want to be able to come back to this decision in a year, two years, etc, and clearly lay out what we took into account</p>",
        "id": 180764473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759412
    },
    {
        "content": "<p>Yes!</p>",
        "id": 180764485,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759418
    },
    {
        "content": "<blockquote>\n<p>Well, to be fair, the topics in the stream are decently well named, so anyone interested in the <em>history</em> of a given question can probably find what they want.</p>\n</blockquote>\n<p>well I sort of imagine that</p>",
        "id": 180764486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759419
    },
    {
        "content": "<p>the wiki page would link to zulip topics</p>",
        "id": 180764494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759423
    },
    {
        "content": "<p>i.e., that's the \"deepest\"</p>",
        "id": 180764499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759427
    },
    {
        "content": "<p>so the wiki page might just be roughly what's in the current hackmd, but also have links to zulip topics where you can read more</p>",
        "id": 180764569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759449
    },
    {
        "content": "<p>Agreed. That's what I did in my first \"summary\" doc, but unfortunately that was probably the most time-consuming aspect</p>",
        "id": 180764590,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759460
    },
    {
        "content": "<p>or rather, the \"sections\" of the current hackmd might each be a wiki page</p>",
        "id": 180764597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759464
    },
    {
        "content": "<p>Hm....it would be nice to be able to \"tag\" old Zulip messages.</p>",
        "id": 180764605,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759469
    },
    {
        "content": "<p>well, you could just link to the topics in general</p>",
        "id": 180764610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759477
    },
    {
        "content": "<p>and not try to link to specific messages within</p>",
        "id": 180764615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759482
    },
    {
        "content": "<p>like \"this was discussed here\"</p>",
        "id": 180764620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759484
    },
    {
        "content": "<p>I'm imagining like</p>",
        "id": 180764635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759493
    },
    {
        "content": "<h3>Interaction with <code>-Cpanic=abort</code> and UB</h3>\n<p>Today, the <code>-Cpanic=abort</code> feature works by changing <code>panic!()</code> to cause an immediate abort at the site of panic. This in turn means we can remove all the \"landing pads\" and thus remove the impact of unwinding completely.</p>\n<p>However, <strong>if the source of the unwinding is foreign code that is not possible</strong>. Instead, if we wish to avoid UB, we have to add landing pads to the call sites of any foreign function that may unwind, such that we can abort when the unwinding enters into a Rust frame. Note that all designs include ways to indicate foreign functions that cannot unwind, though they vary in defaults and approach. Inserting these landing pads has a certain cost, though it is less than the full cost of <code>-Cpanic=unwind</code> (since in that case landing pads are required on <strong>all</strong> call sites, not just foreign call sites).</p>\n<p>You might ask \"why not just have it be UB to invoke a foreign function that unwinds with <code>-Cpanic=abort</code>?\" The problem here is that then you can have libraries which compile under both modes but which produce UB when executed with <code>-Cpanic=abort</code>. If we install \"abort guards\", those same libraries would merely abort at runtime, which is much more noticeable.</p>\n<p>If you come from C++, this might not seem like a big deal. After all, mixing <code>-fexceptions</code> code with code with <code>-fno-exceptions</code> code is going to mess everything up. But it's the kind of low-level footgun we'd prefer to avoid in Rust if we can.</p>\n<p>Discussed on:</p>\n<ul>\n<li>Zulip topic A</li>\n<li>Zulip topic B</li>\n</ul>",
        "id": 180764704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759535
    },
    {
        "content": "<p>maybe that's a ton of work to keep up to date too :)</p>",
        "id": 180764716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759541
    },
    {
        "content": "<blockquote>\n<p>I want to be able to come back to this decision in a year, two years, etc, and clearly lay out what we took into account</p>\n</blockquote>\n<p>also, to be clear, I think we're doing way better than ever before here</p>",
        "id": 180764795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573759573
    },
    {
        "content": "<p>Agreed - when discussing my original RFCs, I found several old relevant GitHub threads <em>quite</em> late in the process</p>",
        "id": 180765035,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573759717
    },
    {
        "content": "<p>I think as a first pass, making that map from design questions to Zulip-topics is more important than writing new \"summary\" verbiage for each question.</p>",
        "id": 180766754,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573760643
    },
    {
        "content": "<p>The summarizing effort can then be done by anyone at any time</p>",
        "id": 180766806,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573760662
    },
    {
        "content": "<p>If indeed it's even necessary.</p>",
        "id": 180766830,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573760675
    },
    {
        "content": "<p>Anyway, for now I'll plan on following my \"TODO\" list above, with the caveat that I'll try to keep my time investment into \"Zulip summary/links\" docs minimal.</p>",
        "id": 180767273,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573760900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> \"not justified\" in the sense that a claim is being made like \"this is the way it is\" without the \"why\"</p>",
        "id": 180783166,
        "sender_full_name": "centril",
        "timestamp": 1573770963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Here's my effort to remove the assumption that we'll move forward with <code>\"C unwind\"</code>: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/18\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/18\">https://github.com/rust-lang/project-ffi-unwind/pull/18</a></p>",
        "id": 180978744,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574035735
    },
    {
        "content": "<p>And here is my links-to-Zulip PR: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/19\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/19\">https://github.com/rust-lang/project-ffi-unwind/pull/19</a></p>",
        "id": 180981664,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574041402
    },
    {
        "content": "<p>And one more: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/20\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/20\">https://github.com/rust-lang/project-ffi-unwind/pull/20</a></p>",
        "id": 180981864,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574041792
    },
    {
        "content": "<p>I'm going to leave off w/ PRs for the time being. I am wondering if the <code>project-planning</code> document (with some modifications) could work as the primary \"current status\" document; what do you think?</p>",
        "id": 180981987,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574041972
    },
    {
        "content": "<p>the difference is basically whether to have the table or whether to have the list of checkboxes with specific ongoing tasks?</p>",
        "id": 181005661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574074930
    },
    {
        "content": "<p>I think either could be fine</p>",
        "id": 181005684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574074946
    },
    {
        "content": "<p>I merged <a href=\"https://github.com/rust-lang/project-ffi-unwind/issues/18\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/issues/18\">rust-lang/project-ffi-unwind#18</a>  but I think the others have conflicts, <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span></p>",
        "id": 181005769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574075019
    },
    {
        "content": "<blockquote>\n<p>the difference is basically whether to have the table or whether to have the list of checkboxes with specific ongoing tasks?</p>\n</blockquote>\n<p>As I understood it, they're not really overlapping; the table is for project-scope, while the list is for immediate action items</p>",
        "id": 181134537,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574184521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks; the conflicts are resolved</p>",
        "id": 181134839,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574184679
    },
    {
        "content": "<p>Hey folks, just a heads up that I have an appointment scheduled against our regular meeting time. Just to kick things off asynchronously:</p>\n<ul>\n<li>DWARF unwinding-related PRs are making their way through cranelift, so the time when we _can_ use unwinding information is approaching, however...</li>\n<li>For the initial API of our edge compute product, it's looking like we can get away without having any callbacks, which reduces the timeline pressure we had for getting something stabilized. At its most complicated, our stack will look like <code>Rust -&gt; FFI -&gt; Rust</code>, which is a scenario that can be handled with a single <code>catch_unwind</code>.</li>\n<li>Wasm interface types (<a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\" target=\"_blank\" title=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\">https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md</a>) is likely to be the next thing on our roadmap that's blocked on cross-FFI unwinding, as the current design requires callbacks for <code>malloc</code> and <code>free</code> equivalents. It's not clear what the timeline of this is, though.</li>\n</ul>",
        "id": 181328909,
        "sender_full_name": "acfoltzer",
        "timestamp": 1574358498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> can you elaborate on the connection between malloc/free  and unwinding?</p>",
        "id": 181570436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think you know my status already, but just to be explicit: I did do the \"Zulip summary\" task (my PRs), and I did have my conversation with Centril; I did not yet add anything to the \"meaning of extern 'C'\" doc, nor did I draft a blog post</p>",
        "id": 181570575,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361257
    },
    {
        "content": "<p>Actually I don't know the status :)</p>",
        "id": 181570617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361280
    },
    {
        "content": "<p>I'm quite behind</p>",
        "id": 181570619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361281
    },
    {
        "content": "<p>BTW, I'll be away next week for vacation</p>",
        "id": 181570629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361288
    },
    {
        "content": "<p>But that all sounds pretty good, I guess we should merge some PRs?</p>",
        "id": 181570655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361301
    },
    {
        "content": "<p>In my view the single biggest remaining item is still to improve that branch I started and get some measurements?</p>",
        "id": 181570681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361315
    },
    {
        "content": "<p>I guess one question might be if there were any take-aways from conversation with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you can crystallize :)</p>",
        "id": 181570713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361337
    },
    {
        "content": "<p>or maybe it's in the PRs</p>",
        "id": 181570719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361340
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  -- I think our conversation needs more participation from me</p>",
        "id": 181570797,
        "sender_full_name": "centril",
        "timestamp": 1574361375
    },
    {
        "content": "<p>(but I'm trying to cut down on my unread emails atm... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 181570817,
        "sender_full_name": "centril",
        "timestamp": 1574361396
    },
    {
        "content": "<blockquote>\n<p>In my view the single biggest remaining item is still to improve that branch I started and get some measurements?</p>\n</blockquote>\n<p>The <code>rustc</code> branch?</p>",
        "id": 181570849,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361418
    },
    {
        "content": "<p>I did not summarize the discussion w/ Centril in the PRs I've already submitted. I think the conversation was reasonably short &amp; to the point, but I do still plan to write up a short summary</p>",
        "id": 181570907,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361467
    },
    {
        "content": "<p>Maybe I can even do that today</p>",
        "id": 181570917,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361473
    },
    {
        "content": "<blockquote>\n<p>The <code>rustc</code> branch?</p>\n</blockquote>\n<p>confirm</p>",
        "id": 181570960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361484
    },
    {
        "content": "<p>One thing I could do is try to write out what steps are needed in my view</p>",
        "id": 181571001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361502
    },
    {
        "content": "<blockquote>\n<p>(but I'm trying to cut down on my unread emails atm... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>\n</blockquote>\n<p>I sympathize greatly!</p>",
        "id": 181571002,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361502
    },
    {
        "content": "<p>(I'm actually not entirely sure)</p>",
        "id": 181571082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361558
    },
    {
        "content": "<p>Do you intend your branch to be a possible prototype for an actual recommended <code>rustc</code> change (i.e. as part of a future PR)? Or is it <em>just</em> for measuring?</p>",
        "id": 181571214,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574361642
    },
    {
        "content": "<p>sorry, scarfing down a hasty lunch</p>",
        "id": 181571371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361758
    },
    {
        "content": "<p>uh, I think it would be both, but I'm more interested in the measurement</p>",
        "id": 181571383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361768
    },
    {
        "content": "<p>anyway th eonly work that's left, I think, is to tweak which fns get which attributes</p>",
        "id": 181571407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361786
    },
    {
        "content": "<p>I would like to see an actual execution where a throw from C++ gets intercepted :)</p>",
        "id": 181571637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361925
    },
    {
        "content": "<p>though I guess that this means adding some attributes which can be used to figure out how to unwind</p>",
        "id": 181571660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361941
    },
    {
        "content": "<p>and given that the only purpose to unwinding is so we can abort..</p>",
        "id": 181571674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361949
    },
    {
        "content": "<p>I'm not sure if those attributes actually make that much sense? I guess it depends on the platform, too</p>",
        "id": 181571688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574361960
    },
    {
        "content": "<p>\"how\" to unwind?</p>",
        "id": 181571796,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574362016
    },
    {
        "content": "<p>Maybe I need to just take a look at the branch</p>",
        "id": 181571854,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574362081
    },
    {
        "content": "<p>yes, specifically the <code>uwtable</code> attribute</p>",
        "id": 181571956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574362126
    },
    {
        "content": "<p>anyway maybe I'll open an issue and leave some notes</p>",
        "id": 181571964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574362133
    },
    {
        "content": "<p>I could imagine trying to recruit someone to push on this</p>",
        "id": 181571971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574362137
    },
    {
        "content": "<p>presuming none of us have the time</p>",
        "id": 181571980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574362141
    },
    {
        "content": "<p>I guess I can open an issue on ... rust-lang/rust? maybe project-ffi-unwind? :)</p>",
        "id": 181572006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574362159
    },
    {
        "content": "<p><code>project-ffi-unwind</code> seems appropriate, though low-visibility...</p>",
        "id": 181572089,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574362204
    },
    {
        "content": "<p>though that may be alleviated by posting a blog post when I get around to drafting it</p>",
        "id": 181572141,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574362235
    },
    {
        "content": "<p>Niko, would you like to revise the open RFC to incorporate the changes to the \"scope\" verbiage, or should I?</p>",
        "id": 181572444,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574362458
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> can you elaborate on the connection between malloc/free  and unwinding?</p>\n</blockquote>\n<p>sorry, I had to run shortly after writing this message; malloc and free are the primary use cases for callbacks into a Wasm guest from Rust code, which leave open the possibility that the guest callback could fault and leave Rust frames on the stack.</p>",
        "id": 181587455,
        "sender_full_name": "acfoltzer",
        "timestamp": 1574372608
    },
    {
        "content": "<p>specifically, suppose you want to copy a string into the Wasm linear memory from outside Wasm; you need to know where to put those bytes in memory. either the guest provides a pointer to a buffer and a maximum size, or you can call back into the guest's <code>malloc</code>, and use the pointer it gives back to you</p>",
        "id": 181587554,
        "sender_full_name": "acfoltzer",
        "timestamp": 1574372699
    },
    {
        "content": "<p>currently it's looking like we'll be doing the former approach for the first draft of the API, but the interface-types proposal uses malloc/free as part of the adapter expressions that are used to know how to move complex types between modules</p>",
        "id": 181587708,
        "sender_full_name": "acfoltzer",
        "timestamp": 1574372818
    },
    {
        "content": "<p>oh whoops, the quote feature doesn't ping; cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 181587764,
        "sender_full_name": "acfoltzer",
        "timestamp": 1574372853
    },
    {
        "content": "<p>hey folks, no updates from me again this week; still heads down in building out our product. the outlook on our need for FFI unwinding remains the same as my last update: we won't need it in the short term due to some self-imposed restrictions on our use of Wasm, but will need it in the longer term to keep up with additional Wasm specs like interface-types</p>",
        "id": 182688451,
        "sender_full_name": "acfoltzer",
        "timestamp": 1575570726
    },
    {
        "content": "<p>Hi all =) I didn't really do anything since last week either</p>",
        "id": 182688652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575570874
    },
    {
        "content": "<p>I have been sick, plus the holidays, so no update here either :/</p>",
        "id": 182688672,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1575570892
    },
    {
        "content": "<p>I'm back from travelling</p>",
        "id": 182689584,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575571475
    },
    {
        "content": "<p>Sorry, got pulled into something -- I'd <strong>still</strong> like to get some \"figures\" on what impact these results have on code size.</p>",
        "id": 182690702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575572120
    },
    {
        "content": "<p>I did not find time to write up any kind of instructions on what still needs to be done in that regard</p>",
        "id": 182690722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575572139
    },
    {
        "content": "<p>(To that end, I've spent the last little bit trying to get a new desktop setup to build Rust :)</p>",
        "id": 182693293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575573661
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span></p>",
        "id": 183288135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176110
    },
    {
        "content": "<p>So I've <em>still</em> not had time to do anything</p>",
        "id": 183288142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176116
    },
    {
        "content": "<p>But I did have an interesting chat with <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 183288169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176122
    },
    {
        "content": "<p>I feel like we need to organize a meeting to have an in-depth chat with lang team; maybe we should schedule it for very early January or something</p>",
        "id": 183288218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176148
    },
    {
        "content": "<p>and give ourselves a deadline to get data or just make the decision without data</p>",
        "id": 183288230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176155
    },
    {
        "content": "<p>The main thing I got from my chat with <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was that one use case we should be sure we are <em>able</em> to accommodate is the case where it is UB to unwind and hence we have <strong>zero</strong> extract overhead. I think that if we declared that \"C\" can unwind, the way we would accommodate that is by having every <code>extern \"C\"</code> fn declared with <code>#[unwind(never)]</code> or some such annotation.</p>",
        "id": 183288322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176210
    },
    {
        "content": "<p>This might suffice, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was thinking primarily of cases where people are literally counting bytes, which I imagine can afford a bit of extra annotation, but it's still worth thinking about.</p>",
        "id": 183288353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176232
    },
    {
        "content": "<p>Or maybe there wants to be a <code>-Cpanic=ub</code> flag =)</p>",
        "id": 183288411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176248
    },
    {
        "content": "<p>Or of course the <code>C+unwind</code> design</p>",
        "id": 183288419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176260
    },
    {
        "content": "<p>Sorry, no update from me again. I do want to circle back on RFC <a href=\"https://github.com/rust-lang/rust/issues/2797\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2797\">#2797</a>, the one announcing the project group, and see if we can get it merged soon.</p>",
        "id": 183288489,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576176300
    },
    {
        "content": "<p>sorry to be late, I'm at the Bytecode Alliance meeting (with Josh, incidentally)</p>",
        "id": 183288521,
        "sender_full_name": "acfoltzer",
        "timestamp": 1576176324
    },
    {
        "content": "<p>By \"the case where it is UB to unwind\", do you mean where the user _wants_ it to be UB, or where it's undefined for some other reason?</p>",
        "id": 183288964,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576176597
    },
    {
        "content": "<blockquote>\n<p>Sorry, no update from me again. I do want to circle back on RFC <a href=\"https://github.com/rust-lang/rust/issues/2797\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2797\">#2797</a>, the one announcing the project group, and see if we can get it merged soon.</p>\n</blockquote>\n<p>oh geez :)</p>",
        "id": 183289057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176644
    },
    {
        "content": "<blockquote>\n<p>By \"the case where it is UB to unwind\", do you mean where the user _wants_ it to be UB, or where it's undefined for some other reason?</p>\n</blockquote>\n<p>I mean where the user wants it to be UB, because they want the compiler to optimize everything away</p>",
        "id": 183289080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176662
    },
    {
        "content": "<p>in particular, they do not want the \"shim\" that aborts, no matter how small it is</p>",
        "id": 183289098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176674
    },
    {
        "content": "<p>My belief (yet to be verified with data) is that such a shim will be negligible for the vast majority of use cases</p>",
        "id": 183289115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>'s point is that there will always be cases for which <em>no</em> increase is acceptable, and we should be able to accommodate that</p>",
        "id": 183289152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176705
    },
    {
        "content": "<p>I think that sounds correct, but I also suspect that some add'l effort is ok in such cases</p>",
        "id": 183289172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576176717
    },
    {
        "content": "<p>I think giving users the <em>ability</em> to avoid such shims makes the cost less important. In general, this is a cost that the \"systems programming\" world has already opted into; the idea is that exceptions are \"zero cost unless they're actually used\".</p>",
        "id": 183289331,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576176798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I think the ergonomics and defaults matter a lot there</p>",
        "id": 183290588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576177559
    },
    {
        "content": "<p>I think it's a design failure if people start adding <code>#[unwinds(never)]</code> annotations reflexively because of a concern about cost</p>",
        "id": 183290693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576177608
    },
    {
        "content": "<p>but if people do it because they're literally counting bytes, seems ok</p>",
        "id": 183290720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576177629
    },
    {
        "content": "<p>I'm not sure where e.g. fuchsia would fall on such a spectrum</p>",
        "id": 183290919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576177759
    },
    {
        "content": "<p>anyway I think we should set ourselves some kind of deadline :)</p>",
        "id": 183290933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576177768
    },
    {
        "content": "<p>I think we're in agreement, but I also think the broader \"systems programming ecosystem\" seems to consider landing pads \"zero cost\" already anyway. (E.g. C++ people will say \"exceptions are zero-cost until you actually throw them.\") So I think the risk of people adding <code>unwinds(never)</code> by default is low.</p>",
        "id": 183291426,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178060
    },
    {
        "content": "<p>As for a deadline... I'm slightly concerned that without <a href=\"https://github.com/rust-lang/rust/issues/2797\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2797\">#2797</a> being merged, i.e., without a formal announcement of the project group, people will feel that they didn't have an opportunity to participate, which I get the sense is something you're trying to improve across the Rust project.</p>",
        "id": 183291549,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178151
    },
    {
        "content": "<p>So I am tempted to say we can't set a deadline until, say, a week after formally announcing the group; that way, if new voices chime in, we can take that into account.</p>",
        "id": 183291715,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178232
    },
    {
        "content": "<p>Interesting. Well, that's just busy work. I can try to do it soon</p>",
        "id": 183291757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178267
    },
    {
        "content": "<p>I hadn't considered that people might not realize discussion was active</p>",
        "id": 183291773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178280
    },
    {
        "content": "<p>In any case I think we will want to write up a good blog post</p>",
        "id": 183291829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178290
    },
    {
        "content": "<p>That summaries the arguments</p>",
        "id": 183291832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178293
    },
    {
        "content": "<p>It'd be a good idea to do that <em>before</em> the meeting is scheduled</p>",
        "id": 183291837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178298
    },
    {
        "content": "<p>Yes</p>",
        "id": 183291851,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178307
    },
    {
        "content": "<p>so that people can start to react and we can take some of that into account during lang team discussion</p>",
        "id": 183291853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178309
    },
    {
        "content": "<p>(I guess I can try to update some of the language based on the comment threads, too)</p>",
        "id": 183292001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178415
    },
    {
        "content": "<p>Hm, let's try to have blog ready to post and RFC merged by this time next week, then the first week of January schedule a meeting w/ Lang team</p>",
        "id": 183292002,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178416
    },
    {
        "content": "<p>mm I'm not sure if that's realistic :)</p>",
        "id": 183292009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178425
    },
    {
        "content": "<p>it might be</p>",
        "id": 183292012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178426
    },
    {
        "content": "<p>I also still think data would be really, really great</p>",
        "id": 183292025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178438
    },
    {
        "content": "<p>I think the RFC is close and I can work on the blog post</p>",
        "id": 183292027,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178442
    },
    {
        "content": "<p>This conversion will be much more informed if we can say 1% overhead or something like that</p>",
        "id": 183292033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178447
    },
    {
        "content": "<p>Do you think that needs to be in the blog post?</p>",
        "id": 183292049,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178457
    },
    {
        "content": "<p>I think it would be better, yes</p>",
        "id": 183292061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178465
    },
    {
        "content": "<p>(By \"the RFC\" I just mean the announcement one that's already open)</p>",
        "id": 183292063,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178467
    },
    {
        "content": "<p>Yes, I understood</p>",
        "id": 183292067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178472
    },
    {
        "content": "<p>it probably just takes a few hours of focus to get data</p>",
        "id": 183292088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178488
    },
    {
        "content": "<p>/me ponders</p>",
        "id": 183292096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178496
    },
    {
        "content": "<p>I got stuck the lsat time because my desktop was dead</p>",
        "id": 183292126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178520
    },
    {
        "content": "<p>Okay. Is that few hours mostly for getting your fork of <code>rustc</code> into a state for taking the metrics?</p>",
        "id": 183292128,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178521
    },
    {
        "content": "<p>but I've got an updated one up and going now :)</p>",
        "id": 183292169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178525
    },
    {
        "content": "<blockquote>\n<p>Okay. Is that few hours mostly for getting your fork of <code>rustc</code> into a state for taking the metrics?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 183292172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178530
    },
    {
        "content": "<p>I may be underestimating of course</p>",
        "id": 183292181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178536
    },
    {
        "content": "<p>but I <em>think</em> it's close</p>",
        "id": 183292189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576178540
    },
    {
        "content": "<p>Hm, maybe this is a good time for me to dive in and try to help with that.</p>",
        "id": 183292196,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178543
    },
    {
        "content": "<p>Well, I think we can get the announcement RFC merged, anyway, and I can start drafting a blog post with  &lt;TODO&gt; placeholder for when some data is available.</p>",
        "id": 183292499,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178739
    },
    {
        "content": "<p>Can you expand a bit on why the initial blog post should have data? Your original description sounded more like an announcement and invitation-to-participate; if that's the goal, I think making a note that we could use some help w/ the data-collection effort would actually be better than a final  result from that effort.</p>",
        "id": 183292805,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576178940
    },
    {
        "content": "<p>I guess it depends</p>",
        "id": 183293147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576179167
    },
    {
        "content": "<p>I don't think data is required</p>",
        "id": 183293156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576179176
    },
    {
        "content": "<p>Maybe not worth blocking on</p>",
        "id": 183293160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576179179
    },
    {
        "content": "<p>I'm basically concerned about knee-jerk reactions</p>",
        "id": 183293193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576179199
    },
    {
        "content": "<p>True....</p>",
        "id": 183293206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576179209
    },
    {
        "content": "<p>Well, I'll try to be more available this week, and I'll start w/  getting the RFC comments addressed</p>",
        "id": 183293312,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576179255
    },
    {
        "content": "<p>but I think if we leave a placeholder like \"we really want to measure this\" it is also fine</p>",
        "id": 183293318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576179261
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183322400,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576202789
    },
    {
        "content": "<p>I had some family health issues come up and will not have as much time as I thought I would this week.</p>",
        "id": 183695311,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576619219
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> - nothing to report. I should have time to draft a blog post next week, since I'll be on leave for the holidays. Shall we plan to reconvene next year, on the 2nd?</p>",
        "id": 183872206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576780516
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> -- running slow today myself</p>",
        "id": 183872689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576780874
    },
    {
        "content": "<p>I think reconvening makes sense. My main next step -- which I'll do right now -- was going to be e-mailing to the lang team to make another effort to organize a time for in-depth disussion (both of this but also other topics)</p>",
        "id": 183872712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576780902
    },
    {
        "content": "<p>I feel like I've about given up on an attempt to gather data. I suppose I could try to measure the size of Fuchsia with my existing branch, as it's probably \"pretty close\" to what the cost would be.. maybe an upper bound, even.</p>",
        "id": 183872776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576780941
    },
    {
        "content": "<p>To that end, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, how hard would it be for me to measure the size of a Fuchsia binary?</p>",
        "id": 183872818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576780980
    },
    {
        "content": "<p>(Whatever it was that you measured to get that 10% \"binary size\" figure)</p>",
        "id": 183873387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576781395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can measure one thing if you want, or I can point you to instructions to building a rust toolchain for fuchsia + building fuchsia with it</p>",
        "id": 183876795,
        "sender_full_name": "tmandry",
        "timestamp": 1576783568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is it a pain to build with a custom rust toolchain? I basically wanted to do a build with this branch I made.</p>",
        "id": 183876844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783612
    },
    {
        "content": "<p>well, it's just something that I think I still need to document ;)</p>",
        "id": 183876900,
        "sender_full_name": "tmandry",
        "timestamp": 1576783654
    },
    {
        "content": "<p>it's not a huge pain, though</p>",
        "id": 183876913,
        "sender_full_name": "tmandry",
        "timestamp": 1576783669
    },
    {
        "content": "<p>I'll throw some notes in a doc</p>",
        "id": 183876971,
        "sender_full_name": "tmandry",
        "timestamp": 1576783688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sent you an email, feel free to share any of it</p>",
        "id": 183898520,
        "sender_full_name": "tmandry",
        "timestamp": 1576800925
    },
    {
        "content": "<p>(sorry, I should document it in a more public place, but leaving tomorrow)</p>",
        "id": 183898534,
        "sender_full_name": "tmandry",
        "timestamp": 1576800951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> Nothing much to report. I have started drafting a blog post, for which I've posted a link in <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/Blog.20post\">#project-ffi-unwind &gt; Blog post</a> .</p>",
        "id": 184672666,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577989914
    },
    {
        "content": "<p>Hi :)</p>",
        "id": 184673286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990399
    },
    {
        "content": "<p>I was going to spend some time going over blog post and giving feedback</p>",
        "id": 184673346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990411
    },
    {
        "content": "<p>Sounds reasonable.</p>",
        "id": 184673361,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577990429
    },
    {
        "content": "<p>Do you have outstanding edits, <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> ?</p>",
        "id": 184673379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990446
    },
    {
        "content": "<p>I guess the other thing is to schedule a time to chat w/ lang team</p>",
        "id": 184673414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990465
    },
    {
        "content": "<p>We've now created a Monday \"in depth meeting slot\"</p>",
        "id": 184673424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990473
    },
    {
        "content": "<p>Does Monday at noon EST work for folks? (cc <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span>) -- I should create a doodle to find a good week</p>",
        "id": 184673477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990515
    },
    {
        "content": "<p>I don't have unpushed changes or anything, but the draft isn't complete</p>",
        "id": 184673530,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577990526
    },
    {
        "content": "<p>in particular I was thining I might make edits</p>",
        "id": 184673548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990538
    },
    {
        "content": "<p>noon EST Monday is okay.</p>",
        "id": 184673556,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577990542
    },
    {
        "content": "<p>Pushing edits to my branch would be fine.</p>",
        "id": 184673576,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577990561
    },
    {
        "content": "<p>I've just made you a collaborator on my fork</p>",
        "id": 184673623,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1577990602
    },
    {
        "content": "<p>ok</p>",
        "id": 184673749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577990697
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> -- so -- I was thinking</p>",
        "id": 185241240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578594831
    },
    {
        "content": "<p>I've been wanting to schedule a lang team design meeting to present the details of \"C\" vs \"C unwind\" etc</p>",
        "id": 185241308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578594862
    },
    {
        "content": "<p>it seems to be surprisingly hard for us to prepare a concise summary though :) (complex ..)</p>",
        "id": 185241320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578594875
    },
    {
        "content": "<p>anyway I am wondering if it might hep to schedule like a 1 or 2h block to try to organize the information or plan ahead? not sure what's best.</p>",
        "id": 185241345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578594900
    },
    {
        "content": "<p>(also, sync time :)</p>",
        "id": 185241364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578594911
    },
    {
        "content": "<p>That sounds reasonable to me.</p>",
        "id": 185241959,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578595329
    },
    {
        "content": "<p>I guess the trick is to find a time =)</p>",
        "id": 185243006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578595981
    },
    {
        "content": "<p>I am pretty flexible and can generally make time when others are available.</p>",
        "id": 185244107,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578596621
    },
    {
        "content": "<p>some time next week then? I can setup a doodle I guess</p>",
        "id": 185246411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578598106
    },
    {
        "content": "<p>or maybe you can <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>, if you have a moment</p>",
        "id": 185246424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578598119
    },
    {
        "content": "<p>I do thnk it's worth allocating maybe even 2h for this</p>",
        "id": 185246436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578598129
    },
    {
        "content": "<p>I also think it should be a relatively small group perhaps -- like you and I could just do it</p>",
        "id": 185246454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578598146
    },
    {
        "content": "<p>Okay. Should I exclude weekends?</p>",
        "id": 185246711,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578598296
    },
    {
        "content": "<p>yes :)</p>",
        "id": 185249451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578600024
    },
    {
        "content": "<p>hey folks, sorry I've missed the last few check-ins. vacation + big beginning of year planning meetings. I will be available next week for a meeting to feed into the lang team design</p>",
        "id": 185261279,
        "sender_full_name": "acfoltzer",
        "timestamp": 1578607500
    },
    {
        "content": "<p>oh, that'd be good</p>",
        "id": 185262969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578608713
    },
    {
        "content": "<p>the hope <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> is that we will schedule a sync w/ team on monday Jan 20 at noon Boston time</p>",
        "id": 185263014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578608760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> (you're making doodle for next week?)</p>",
        "id": 185263066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578608772
    },
    {
        "content": "<p>ah, Jan 20 is a holiday for me but I'd be able to make it</p>",
        "id": 185263545,
        "sender_full_name": "acfoltzer",
        "timestamp": 1578609113
    },
    {
        "content": "<p>Yes, making the doodle now</p>",
        "id": 185270623,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578614736
    },
    {
        "content": "<p>Are there any other blocks of time we can immediately veto? What's the latest people can go?</p>",
        "id": 185270828,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578614913
    },
    {
        "content": "<p>Currently I'm just filling in every two-hour block starting on every half-hour from 9:30am MST to 6pm (ending at 8pm) on every day of the week except where I have meetings</p>",
        "id": 185270898,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578614997
    },
    {
        "content": "<p>And also leaving out the lang team and compiler team meeting times</p>",
        "id": 185271109,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578615211
    },
    {
        "content": "<p>'kay, here 'tis: <a href=\"https://doodle.com/poll/x4c9xquauteew7gn\" target=\"_blank\" title=\"https://doodle.com/poll/x4c9xquauteew7gn\">https://doodle.com/poll/x4c9xquauteew7gn</a></p>",
        "id": 185271273,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578615363
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span></p>",
        "id": 185348330,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578688226
    },
    {
        "content": "<p>done; thanks for the ping!</p>",
        "id": 185353227,
        "sender_full_name": "acfoltzer",
        "timestamp": 1578691529
    },
    {
        "content": "<p>whoosh, that was a very fine-grained poll :) looks like monday afternoon is maybe best...</p>",
        "id": 185362047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578699788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> and <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> , do you want to participate in the meeting discussed above, and if so, would 6:30 am UTC work for you?</p>",
        "id": 185446577,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578857061
    },
    {
        "content": "<p>If that time doesn't work, please let us know and fill out the Doodle poll</p>",
        "id": 185446580,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578857077
    },
    {
        "content": "<p>I've updated the doodle.</p>",
        "id": 185446712,
        "sender_full_name": "Amanieu",
        "timestamp": 1578857331
    },
    {
        "content": "<p>Monday evening is looking good</p>",
        "id": 185446730,
        "sender_full_name": "Amanieu",
        "timestamp": 1578857399
    },
    {
        "content": "<p>I've updated the doodle as well</p>",
        "id": 185447379,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578858298
    },
    {
        "content": "<p>Thanks for the quick response! 6am UTC tomorrow it is.</p>",
        "id": 185448559,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578860316
    },
    {
        "content": "<p>I've sent an invite to Niko, but I don't seem to have the rest of you in my email contacts list.</p>",
        "id": 185448643,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578860449
    },
    {
        "content": "<p><a href=\"mailto:amanieu@gmail.com\" title=\"mailto:amanieu@gmail.com\">amanieu@gmail.com</a></p>",
        "id": 185448798,
        "sender_full_name": "Amanieu",
        "timestamp": 1578860743
    },
    {
        "content": "<p>Also, the selected time on doodle is 8pm UTC. Not sure where you got 6am from?</p>",
        "id": 185448843,
        "sender_full_name": "Amanieu",
        "timestamp": 1578860792
    },
    {
        "content": "<p>I was adding instead of subtracting to get UTC from my local time. Oops.</p>",
        "id": 185465934,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578893077
    },
    {
        "content": "<p>I have a meeting 1:30h before this one, and it appears to be of unbounded length. I'll try to make it, but I'm not sure if it will work</p>",
        "id": 185514117,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578935764
    },
    {
        "content": "<p>BTW I don't think the <em>lang-team</em> design meeting will happen until Feb due to MLK Jr Day here in the US</p>",
        "id": 185522015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578940603
    },
    {
        "content": "<p>but I still think we should try to get this done</p>",
        "id": 185522023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578940608
    },
    {
        "content": "<p>Hey folks, I don't really have anything to add since our call. Still pretty underwater working on our product, but unwinding support is making its way into cranelift</p>",
        "id": 185844191,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579199375
    },
    {
        "content": "<p>I also have nothing to add since our call. I have not had time yet to translate our thoughts Monday into a blog post.</p>",
        "id": 185844695,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579199690
    },
    {
        "content": "<p>Tangent about cranelift: <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any insight into Cranelift's future? My impression was that (1) Cranelift was primarily supported by Mozilla, and (2) the recent layoffs affected the Cranelift team pretty hard.</p>",
        "id": 185844833,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579199770
    },
    {
        "content": "<p>I am aware of one layoff from within Cranelift, but there may be more</p>",
        "id": 185844888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199816
    },
    {
        "content": "<p>I don't know more than you do I don't think</p>",
        "id": 185844898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199823
    },
    {
        "content": "<p>the main thing I had hoped to touch base on here was who was going to try and translate the stuff from our call into a blog post :)</p>",
        "id": 185844988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199880
    },
    {
        "content": "<p>is that you, <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> ?</p>",
        "id": 185845035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199884
    },
    {
        "content": "<p>I think it's a good idea to produce a document that avoids <em>too</em> much background -- think of the lang team as audience</p>",
        "id": 185845071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199906
    },
    {
        "content": "<p>The spirit is willing but the flesh is time-constrained</p>",
        "id": 185845095,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579199914
    },
    {
        "content": "<p>I think a explainer with background is probably also good but separately :)</p>",
        "id": 185845102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199917
    },
    {
        "content": "<p>lol fair</p>",
        "id": 185845110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199921
    },
    {
        "content": "<p>I had a few other thoughts after our call</p>",
        "id": 185845133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199934
    },
    {
        "content": "<p>one thing I was thinking of</p>",
        "id": 185845134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199936
    },
    {
        "content": "<p>is that I feel like we have a large number of desiderata</p>",
        "id": 185845144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199943
    },
    {
        "content": "<p>that we often failed to remember</p>",
        "id": 185845153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199946
    },
    {
        "content": "<p>e.g., \"can insert a shim into extern C fn\" or something</p>",
        "id": 185845170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199955
    },
    {
        "content": "<p>maybe a table would make sense</p>",
        "id": 185845175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579199959
    },
    {
        "content": "<p>Since the explainer is basically done, maybe I should just post that separately? On its own, it doesn't really seem like useful content for the Internals blog, and unfortunately I don't have a personal blog myself yet, but it seems like it would be useful to put out there in the world somewhere.</p>",
        "id": 185845206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579199977
    },
    {
        "content": "<p>Function pointers seem like an oft-neglected consideration</p>",
        "id": 185845312,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200005
    },
    {
        "content": "<p>Despite the fact that we're all aware of the complications therein, having previously discussed them!</p>",
        "id": 185845366,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200027
    },
    {
        "content": "<p>I can help with an editing pass and other feedback but unfortunately my time is extremely constrained</p>",
        "id": 185845431,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579200072
    },
    {
        "content": "<p>Re: explainer:</p>",
        "id": 185845476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200104
    },
    {
        "content": "<p>I'm not 100% sure what that refers to :)</p>",
        "id": 185845488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200108
    },
    {
        "content": "<p>background material?</p>",
        "id": 185845491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200109
    },
    {
        "content": "<p>if so, maybe push to the repo and then write a blog post announcing it exists</p>",
        "id": 185845500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200118
    },
    {
        "content": "<p>I think people would be interested</p>",
        "id": 185845548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200125
    },
    {
        "content": "<p>I mean the majority of my original draft in that one PR: <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\" target=\"_blank\" title=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md\">https://github.com/BatmanAoD/project-ffi-unwind/blob/BlogPost-announcement/blogposts/inside-rust/01-announcement.md</a></p>",
        "id": 185845628,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200180
    },
    {
        "content": "<p>yeah that's what I figured you meant</p>",
        "id": 185845640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200188
    },
    {
        "content": "<p>seems great</p>",
        "id": 185845643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200190
    },
    {
        "content": "<p>I'll move the \"should the <code>\"C\"</code> ABI permit unwinding\" section to the bottom and re-cast it as a \"preview\" of a more in-depth summary of the project group's (PG's?) discussions so far.</p>",
        "id": 185845773,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200260
    },
    {
        "content": "<p>+1</p>",
        "id": 185845849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200313
    },
    {
        "content": "<p>I might try my hand at making this table I was talking about</p>",
        "id": 185845854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200319
    },
    {
        "content": "<p>oh and</p>",
        "id": 185845888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200356
    },
    {
        "content": "<p>I plan to schedule a lang team meeting sometime in Feb -- it'll be a design meeting, so monday at noon Eastern time</p>",
        "id": 185845944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200371
    },
    {
        "content": "<p>do y'all have any preferences when it comes to weeks?</p>",
        "id": 185845953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200379
    },
    {
        "content": "<p>Okay. I have no time today but maybe some tomorrow, definitely this weekend, and Monday is a day off for me so... hopefully I'll make some progress on both this and job-search-stuff</p>",
        "id": 185845955,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200380
    },
    {
        "content": "<p>I can make a doodle if needed :)</p>",
        "id": 185845963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200385
    },
    {
        "content": "<p>Looks like I have no prior commitments on any Monday in February.</p>",
        "id": 185846017,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579200428
    },
    {
        "content": "<blockquote>\n<p>I plan to schedule a lang team meeting sometime in Feb -- it'll be a design meeting, so monday at noon Eastern time</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> you seem more likely to have conflicts...</p>",
        "id": 185846253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200572
    },
    {
        "content": "<p>the week of the 10th I'm in the bay area for a bunch of wasm meetings</p>",
        "id": 185846267,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579200583
    },
    {
        "content": "<p>as far as other times go, it's less about having specific conflicts on my calendar, and more about overall number of hours I can devote to non-product things</p>",
        "id": 185846348,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579200617
    },
    {
        "content": "<p>I don't feel you <em>have</em> to attend</p>",
        "id": 185846406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200663
    },
    {
        "content": "<p>which is to say, other than the 10th all of my Mondays are pretty much free</p>",
        "id": 185846415,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579200666
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> your schedule would be pretty relevant too</p>",
        "id": 185846436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579200679
    },
    {
        "content": "<p>I'm away on a ski trip for the 1st week of Feb</p>",
        "id": 185846472,
        "sender_full_name": "Amanieu",
        "timestamp": 1579200709
    },
    {
        "content": "<p>I would like to, because having a concrete commitment helps me actually prioritize paying attention to this issue despite our product managers <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 185846476,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579200712
    },
    {
        "content": "<p>But after that it should be fine</p>",
        "id": 185846535,
        "sender_full_name": "Amanieu",
        "timestamp": 1579200725
    },
    {
        "content": "<p>I am reminded that I will be on vacation Feb 17</p>",
        "id": 185847065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201066
    },
    {
        "content": "<p>So that means:</p>\n<ul>\n<li>Feb 3-- no <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> </li>\n<li>Feb 10 -- No <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> </li>\n<li>Feb 17 -- No me</li>\n<li>Feb 24 -- <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n</ul>",
        "id": 185847130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201095
    },
    {
        "content": "<p>heh</p>",
        "id": 185847135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201098
    },
    {
        "content": "<p>seems far away</p>",
        "id": 185847146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201105
    },
    {
        "content": "<p>but then...</p>",
        "id": 185847148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201107
    },
    {
        "content": "<p>Unless we can fit it in late Jan?</p>",
        "id": 185847179,
        "sender_full_name": "Amanieu",
        "timestamp": 1579201129
    },
    {
        "content": "<p>I'm not avail next 2 weeks</p>",
        "id": 185847195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201139
    },
    {
        "content": "<p>I guess <em>maybe</em> next week</p>",
        "id": 185847209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201146
    },
    {
        "content": "<p>it's a holiday :)</p>",
        "id": 185847211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201148
    },
    {
        "content": "<p>but ..</p>",
        "id": 185847215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201149
    },
    {
        "content": "<p>my partner would kill me :P</p>",
        "id": 185847221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201154
    },
    {
        "content": "<p>could shoot for another day of the week, it's just that it's hard to find those</p>",
        "id": 185847245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201172
    },
    {
        "content": "<p>Let's not then. A dead niko is an unproductive niko.</p>",
        "id": 185847266,
        "sender_full_name": "Amanieu",
        "timestamp": 1579201184
    },
    {
        "content": "<p>scheduling is hard :)</p>",
        "id": 185847267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> any chance of trying to schedule this between your wasm meetings?</p>",
        "id": 185847273,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201191
    },
    {
        "content": "<p>let's do this: try to write it up asap,</p>",
        "id": 185847331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201206
    },
    {
        "content": "<p>plan to talk feb 24, but see if we can find an earlier time, and/or conduct the discussion async</p>",
        "id": 185847352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201218
    },
    {
        "content": "<p>Conduct the discussion w/ the lang team async?</p>",
        "id": 185847379,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201236
    },
    {
        "content": "<p>yeah, maybe hopeless tho</p>",
        "id": 185847400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201250
    },
    {
        "content": "<p>(I thought that was what we were scheduling for Feb)</p>",
        "id": 185847401,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201250
    },
    {
        "content": "<p>it is:)</p>",
        "id": 185847412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201256
    },
    {
        "content": "<p>mm</p>",
        "id": 185847414,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201256
    },
    {
        "content": "<p>I'm mostly thiking that the solution to \"Scheduling hell\" is async, but it only sometimes works</p>",
        "id": 185847436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201275
    },
    {
        "content": "<p>Well, to be fair, I wasn't really hoping for _consensus_ among the team from one meeting, necessarily.</p>",
        "id": 185847453,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201284
    },
    {
        "content": "<p>I definitely think it'd be better if we can start the conversation earlier</p>",
        "id": 185847473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201302
    },
    {
        "content": "<p>regardless</p>",
        "id": 185847478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579201305
    },
    {
        "content": "<p>But I think if we start the discussion async, then it's probably not crucial that all four of us be available for the sync lang team discussion</p>",
        "id": 185847487,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201310
    },
    {
        "content": "<p>team_meeting.await</p>",
        "id": 185847493,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201316
    },
    {
        "content": "<p>All right, I'm heading to lunch now. Sounds like we have, as usual, just enough of a plan to start heading in the right general direction :)</p>",
        "id": 185847773,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579201464
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> any chance of trying to schedule this between your wasm meetings?</p>\n</blockquote>\n<p>sorry, had to step away for a moment. I am at the wasm summit at Google all day on the 10th, but I don't know yet what the agenda is</p>",
        "id": 185847856,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579201523
    },
    {
        "content": "<p>generally speaking though if the 10th works for everyone else, y'all should go for it. my motivations for being there are, as described above, mostly selfish</p>",
        "id": 185847894,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579201556
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Sorry all, I didn't actually make any headway on anything this week.</p>",
        "id": 186414380,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579801279
    },
    {
        "content": "<p>same, at least in terms of direct work on this project. It looks like I'm going to be able to make it to the Rust All-Hands, which will coincidentally give me a good amount of airplane time where I hopefully be temporarily free of product concerns</p>",
        "id": 186419536,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579804263
    },
    {
        "content": "<p>and, of course, the opportunity for high-bandwidth collaboration with anyone else on the team who will be there <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 186419560,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579804287
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> been busy, I didn't get too far either :)</p>",
        "id": 186420312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579804785
    },
    {
        "content": "<p>sorry, had a call come up this week, too</p>",
        "id": 186420321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579804792
    },
    {
        "content": "<p>meant to ping earlier but ..</p>",
        "id": 186420327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579804796
    },
    {
        "content": "<p>I will also be at the Rust All-Hands! In fact, it will be my first time _ever_ outside the states, something I've looked forward to for...well, since I was a kid.</p>",
        "id": 186420457,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579804871
    },
    {
        "content": "<p>oh wow, that's so exciting!</p>",
        "id": 186420570,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579804939
    },
    {
        "content": "<p>looking forward to meeting you :)</p>",
        "id": 186420576,
        "sender_full_name": "acfoltzer",
        "timestamp": 1579804946
    },
    {
        "content": "<p>Same!</p>",
        "id": 186421446,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1579805510
    },
    {
        "content": "<p>I will be interviewing tomorrow, so I will not be able to join our weekly chat.</p>",
        "id": 186914757,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1580322860
    },
    {
        "content": "<p>good luck!</p>",
        "id": 186941209,
        "sender_full_name": "acfoltzer",
        "timestamp": 1580341800
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 186941261,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1580341809
    },
    {
        "content": "<p>hey folks, gotta check in very quickly this week. I haven't been doing anything on the project this week, but am trying to figure out how I can still carve out some time even with the All-Hands being canceled <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 187575169,
        "sender_full_name": "acfoltzer",
        "timestamp": 1581014022
    },
    {
        "content": "<p>our product is starting to get into the hands of some very early alpha testers, so I'm hoping that \"we want backtraces!\" ends up at the top of the feedback pile, which would justify me switching gears</p>",
        "id": 187575280,
        "sender_full_name": "acfoltzer",
        "timestamp": 1581014080
    },
    {
        "content": "<p>Similarly, I need to carve out some time around job-searching, which is... still taking up more of my time than I would like, because I haven't actually gotten an offer yet. :/</p>",
        "id": 187575571,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581014302
    },
    {
        "content": "<p>... and someone just drove into our parked car out front. gotta run I guess</p>",
        "id": 187575692,
        "sender_full_name": "acfoltzer",
        "timestamp": 1581014393
    },
    {
        "content": "<p>okay, everything is fine, just scraped up the car a bit. I suppose I don't have much more to add, but if I can be of assistance reviewing anything please let me know</p>",
        "id": 187577049,
        "sender_full_name": "acfoltzer",
        "timestamp": 1581015289
    },
    {
        "content": "<p>I've not had time to do anything</p>",
        "id": 187594817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581027713
    },
    {
        "content": "<p>I still hope to put in some time to creating a doc or collating our results from before</p>",
        "id": 187594867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581027724
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Starting on the 27th, the Governance group is going to start having its meetings at this time, fornightly. So we should either pick a new time for touching base, or just skip every other week.</p>",
        "id": 188135789,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581618990
    },
    {
        "content": "<p>it seems like our activity has been slow enough that fortnightly should be fine. we can always adjust when things pick up?</p>",
        "id": 188136066,
        "sender_full_name": "acfoltzer",
        "timestamp": 1581619153
    },
    {
        "content": "<p>I agree.</p>",
        "id": 188136120,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581619190
    },
    {
        "content": "<p>In any case, there won't be a conflict next week, which is our last scheduled meeting time before the lang team discussion.</p>",
        "id": 188136210,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581619226
    },
    {
        "content": "<p>On that note: I would like to get one or more blog posts published at least a week before the meeting, so that (1) potential interested parties are aware, and (2) all involved have time to ponder the issue independently prior to the meeting itself.</p>",
        "id": 188136302,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581619293
    },
    {
        "content": "<p>But I have made exactly zero progress towards having something publishable since last we discussed this, and it doesn't look like I'll have time today or tomorrow. I will try to allocate some hours Saturday.</p>",
        "id": 188136438,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581619366
    },
    {
        "content": "<p>Thanks for bringing that up, I meant to</p>",
        "id": 188222846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I was thining I would try to allocate some time next week, so if you are able o work on saturday, that'd be great</p>",
        "id": 188222924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you think we'll be able to post the blog post tomorrow (Tuesday)? I should be able to get Amanieu's suggested changes in this afternoon</p>",
        "id": 188410706,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1581978632
    },
    {
        "content": "<p>I can do a second round of review on the blog post after you make your changes if you want.</p>",
        "id": 188451635,
        "sender_full_name": "Amanieu",
        "timestamp": 1582033861
    },
    {
        "content": "<p>Sorry, I thought I'd have time to make changes yesterday but didn't.</p>",
        "id": 188506885,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582073481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Okay, I've made changes now. It looks like we have different expectations for <code>extern \"C\"</code> in the 2-ABI strategy, but I'm not sure whose understanding is correct. I have revised the table by changing the \"forced exceptions\" row to specify that no destructors are assumed, and the \"unforced with destructors\" row to refer to forced _or_ unforced exceptions. I've revised the table entries themselves, but I am still not sure if my understanding for each of them is correct.</p>",
        "id": 188512379,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582081596
    },
    {
        "content": "<p>I'm taking a look at the blog post now</p>",
        "id": 188534686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582110377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> you're not around now, by any chance?</p>",
        "id": 188535944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582111755
    },
    {
        "content": "<p>I hope you are traveling rather than working at some terrible hour of the night!</p>",
        "id": 188551648,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582124478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I am working very early hours =)</p>",
        "id": 188639641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582207686
    },
    {
        "content": "<p>as I'm traveling</p>",
        "id": 188639647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582207690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> I meant to put in some more time into preparing notes but I'm sort of leaning towards \"we should merge this asap and we can think about adding more and framing before/during meeting\"</p>",
        "id": 188641865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582209127
    },
    {
        "content": "<p>that said, I had some edits that felt productive</p>",
        "id": 188641870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582209132
    },
    {
        "content": "<p>I just got called off on other things</p>",
        "id": 188641878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582209135
    },
    {
        "content": "<p>maybe I'll push a branch to my repo</p>",
        "id": 188641889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582209150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> If you're too busy, I can take over finishing up the blog post.</p>",
        "id": 188644159,
        "sender_full_name": "Amanieu",
        "timestamp": 1582210345
    },
    {
        "content": "<p>hey folks, just saw <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/21\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/21\">https://github.com/rust-lang/project-ffi-unwind/pull/21</a> and am taking a look now</p>",
        "id": 188664252,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582223494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Well, currently it seems like the most important \"work item\" is to resolve the points of confusion brought up in the review.</p>",
        "id": 188664539,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582223658
    },
    {
        "content": "<p>I'm not sure that's a \"who has time\" thing, exactly</p>",
        "id": 188664556,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582223671
    },
    {
        "content": "<p>I suppose putting Niko's bullet-list of pros and cons into blog-prose is something either of us could do. Same with transposing the table. If you have time to take a crack at either of those, that would be very helpful.</p>",
        "id": 188664655,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582223745
    },
    {
        "content": "<p>One concrete question I have:</p>\n<blockquote>\n<p>[if we do not introduce a new <code>\"C unwind\"</code> API, then] panic=abort will not generate landing pads on \"C\" ABI functions. As long as there aren't destructors in those frames, is that sound?</p>\n</blockquote>",
        "id": 188664814,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582223849
    },
    {
        "content": "<p>It should be sound.</p>",
        "id": 188664909,
        "sender_full_name": "Amanieu",
        "timestamp": 1582223897
    },
    {
        "content": "<p>That wasn't the case Niko couldn't get to work in his branch, was it? I seem to remember the runtime aborting even when he didn't want it to</p>",
        "id": 188664941,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582223922
    },
    {
        "content": "<p>I think that may have just been an implementation issue rather than a fundamental one.</p>",
        "id": 188664970,
        "sender_full_name": "Amanieu",
        "timestamp": 1582223955
    },
    {
        "content": "<p>Okay, I'm making some changes in accordance with that.</p>",
        "id": 188668373,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226156
    },
    {
        "content": "<p>Re: this discussion: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/21#discussion_r381232338\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/21#discussion_r381232338\">https://github.com/rust-lang/project-ffi-unwind/pull/21#discussion_r381232338</a></p>",
        "id": 188668385,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226162
    },
    {
        "content": "<p>If we have shims in <code>extern \"C\"</code> function definitions for aborting on <code>panic</code>-unwinding, then shouldn't we also abort on foreign exceptions to avoid UB?</p>",
        "id": 188668441,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226191
    },
    {
        "content": "<p>We don't want to add shims to extern \"C\" in -Cpanic=abort. The whole point of -Cpanic=abort is that you remove all the code size overhead from unwinding.</p>",
        "id": 188668581,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226286
    },
    {
        "content": "<p>The idea with extern \"C unwind\" is that you opt-in to those shims on -C panic=abort.</p>",
        "id": 188668602,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226314
    },
    {
        "content": "<p>Agreed, but that discussion is about <code>-Cpanic=unwind</code>.</p>",
        "id": 188668977,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226578
    },
    {
        "content": "<p>Niko was asking if a <code>panic</code>-unwind reaching an <code>extern \"C\"</code> boundary under <code>panic=unwind</code> should be UB.</p>",
        "id": 188669022,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226624
    },
    {
        "content": "<p>perhaps we could insert a shim there in debug mode only?</p>",
        "id": 188669129,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582226679
    },
    {
        "content": "<p>Oh right. Yes, we do insert a shim there.</p>",
        "id": 188669146,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226696
    },
    {
        "content": "<p>Hmm, the problem is that we want to allow forced exceptions. So the shim would have to differentiate between them.</p>",
        "id": 188669211,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226745
    },
    {
        "content": "<p>Only in proposal 2!</p>",
        "id": 188669278,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226770
    },
    {
        "content": "<p>No, we want to always allow longjmp over extern \"C\" frames.</p>",
        "id": 188669317,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226802
    },
    {
        "content": "<p>er</p>",
        "id": 188669320,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226805
    },
    {
        "content": "<p>At least I think we do, for backward compatibility reasons.</p>",
        "id": 188669348,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226824
    },
    {
        "content": "<p>(rlua)</p>",
        "id": 188669368,
        "sender_full_name": "Amanieu",
        "timestamp": 1582226839
    },
    {
        "content": "<p>.... reconsidering, you're correct</p>",
        "id": 188669381,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226847
    },
    {
        "content": "<p>Sorry</p>",
        "id": 188669384,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226848
    },
    {
        "content": "<p>So the \"minimal spec\" would actually be:</p>\n<div class=\"codehilite\"><pre><span></span>### Proposal 1: Introduce `&quot;C unwind&quot;`, minimal specification\n\n* `&quot;C&quot;` ABI boundary, `panic=&lt;any&gt;`\n  * `panic`-unwind: program aborts\n  * forced unwind, no destructors: unwind behaves normally\n  * forced unwind with destructors: undefined behavior\n  * non-forced foreign unwind: program aborts\n* `&quot;C unwind&quot;` ABI boundary\n  * With `panic=unwind`: all types of unwinding behave normally\n  * With `panic=abort`: all types of unwinding abort the program\n</pre></div>",
        "id": 188669506,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226920
    },
    {
        "content": "<p>Correct?</p>",
        "id": 188669512,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582226925
    },
    {
        "content": "<p>Hmm</p>",
        "id": 188669866,
        "sender_full_name": "Amanieu",
        "timestamp": 1582227172
    },
    {
        "content": "<ul>\n<li>non-forced foreign unwind: program aborts =&gt; except we don't want to insert shims when -Cpanic=abort</li>\n</ul>",
        "id": 188669902,
        "sender_full_name": "Amanieu",
        "timestamp": 1582227209
    },
    {
        "content": "<p>(i need to go re-read the doc, got a link?)</p>",
        "id": 188669945,
        "sender_full_name": "Amanieu",
        "timestamp": 1582227242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>### Proposal 1: Introduce `&quot;C unwind&quot;`, minimal specification\n\n* `&quot;C&quot;` ABI boundary, `panic=&lt;any&gt;`\n  * `panic`-unwind: program aborts\n  * any unwind, no destructors: unwind behaves normally\n  * any unwind, with destructors: undefined behavior\n* `&quot;C unwind&quot;` ABI boundary\n  * With `panic=unwind`: all types of unwinding behave normally\n  * With `panic=abort`: all types of unwinding abort the program\n</pre></div>",
        "id": 188670322,
        "sender_full_name": "Amanieu",
        "timestamp": 1582227517
    },
    {
        "content": "<p>Only proposal 2 treats forced unwinding and other foreign unwinding differently</p>",
        "id": 188670349,
        "sender_full_name": "Amanieu",
        "timestamp": 1582227536
    },
    {
        "content": "<p>The Paper doc?</p>",
        "id": 188670692,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582227749
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/ffi-unwind-2020-01-13-agituL322N0qRsCbcnn7D\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/ffi-unwind-2020-01-13-agituL322N0qRsCbcnn7D\">https://paper.dropbox.com/doc/ffi-unwind-2020-01-13-agituL322N0qRsCbcnn7D</a></p>",
        "id": 188670721,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582227772
    },
    {
        "content": "<p>See my comment about for proposal 1.</p>",
        "id": 188671299,
        "sender_full_name": "Amanieu",
        "timestamp": 1582228194
    },
    {
        "content": "<p>For proposal 2, same as 1 but \"C unwind\" allows forced exceptions in -Cpanic=abort</p>",
        "id": 188671479,
        "sender_full_name": "Amanieu",
        "timestamp": 1582228311
    },
    {
        "content": "<p>Okay, I've fixed it up and transposed the table.</p>",
        "id": 188673239,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582229529
    },
    {
        "content": "<p>Would you mind looking at the table again?</p>",
        "id": 188673263,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582229546
    },
    {
        "content": "<p>I can merge the PR so you can make additional changes in a new PR if youd' like</p>",
        "id": 188673297,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582229571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> row 1 column 3 should be \"unwind\" instead of \"abort\".</p>",
        "id": 188673569,
        "sender_full_name": "Amanieu",
        "timestamp": 1582229783
    },
    {
        "content": "<p>But sure, go ahead and merge. I'll send a PR with extra changes on top of yours.</p>",
        "id": 188673635,
        "sender_full_name": "Amanieu",
        "timestamp": 1582229842
    },
    {
        "content": "<p>In particular I want to add a list of pros/cons for each proposal.</p>",
        "id": 188673646,
        "sender_full_name": "Amanieu",
        "timestamp": 1582229852
    },
    {
        "content": "<p>last row column 3 should also be \"unwind\"</p>",
        "id": 188673720,
        "sender_full_name": "Amanieu",
        "timestamp": 1582229903
    },
    {
        "content": "<p>Okay, I've fixed those, made a few more small fixes based on other PR comments, and merged!</p>",
        "id": 188676154,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582231789
    },
    {
        "content": "<p>Thanks for taking on the additional work</p>",
        "id": 188676219,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582231809
    },
    {
        "content": "<p>As I'm writing the pro/cons, I'm becoming increasingly dubious about the value of proposal 2. You're only ever going to use \"C unwind\" if you are specifically expecting that code to throw a C++ exception. \"C\" is fine in all proposals if you're only expecting forced unwinds and have made sure that you don't have any destructors on the stack.</p>",
        "id": 188717817,
        "sender_full_name": "Amanieu",
        "timestamp": 1582279601
    },
    {
        "content": "<p>So I don't really see a reason why you would care about forced unwinds when using \"C unwind\": you're only ever using that ABI when calling C++ code anyways...</p>",
        "id": 188717851,
        "sender_full_name": "Amanieu",
        "timestamp": 1582279638
    },
    {
        "content": "<p>Or if you have a Rust function that panics that is called from C++, and want panics to propagate through the C++.</p>",
        "id": 188717931,
        "sender_full_name": "Amanieu",
        "timestamp": 1582279693
    },
    {
        "content": "<p>Either way, you don't really care about forced unwinds for those cases...</p>",
        "id": 188717942,
        "sender_full_name": "Amanieu",
        "timestamp": 1582279710
    },
    {
        "content": "<p>If you have any ideas, let me know what you think the main advantages of proposal 2 are over 1&amp;3.</p>",
        "id": 188717977,
        "sender_full_name": "Amanieu",
        "timestamp": 1582279752
    },
    {
        "content": "<p>I suppose just that C++ code can still invoke pthread_exit, so it would be surprising if that had the effect of aborting the program depending on the compile settings.</p>",
        "id": 188741533,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582298715
    },
    {
        "content": "<p>But I think overall that's a good observation.</p>",
        "id": 188741564,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582298736
    },
    {
        "content": "<p>Since forced unwinding is supposed to be \"unstoppable\" per the Itanium spec, is there an issue of \"compliance\" from us? Do you expect people might take issue with us aborting in a scenario where Itanium says the unwind must continue even if caught?</p>",
        "id": 188743140,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582299588
    },
    {
        "content": "<p>There shouldn't be an issue. In C++ <code>noexcept</code> will also cause forced unwinding to abort.</p>",
        "id": 188746270,
        "sender_full_name": "Amanieu",
        "timestamp": 1582301337
    },
    {
        "content": "<p>Oh, that makes sense.</p>",
        "id": 188746718,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582301621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Thanks again for adding to the blog post draft. I'd suggest adding your name to the byline along with me and Niko</p>",
        "id": 188784273,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582327258
    },
    {
        "content": "<p>I'm wondering if we should push back the design meeting, though, if possible... <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're not around to weigh in on that, are you?</p>",
        "id": 188784314,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582327298
    },
    {
        "content": "<p>it seems like we're not really giving anyone else in the community a chance to make time for the meeting if they're interested</p>",
        "id": 188784336,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582327319
    },
    {
        "content": "<p>Yea sorry about that I had a busy day and got to reviewing the blog post quite late.</p>",
        "id": 188784377,
        "sender_full_name": "Amanieu",
        "timestamp": 1582327327
    },
    {
        "content": "<p>I pushed some more fixes. If it looks good you should just merge it and push out the blog post tonight.</p>",
        "id": 188784703,
        "sender_full_name": "Amanieu",
        "timestamp": 1582327617
    },
    {
        "content": "<p>I think it's fine if we get the blog post out tonight, people will still be able to respond via text if they don't make it to the meeting.</p>",
        "id": 188784725,
        "sender_full_name": "Amanieu",
        "timestamp": 1582327650
    },
    {
        "content": "<p>I'm going to sleep now, so if you want to make more changes just merge mine first.</p>",
        "id": 188784807,
        "sender_full_name": "Amanieu",
        "timestamp": 1582327719
    },
    {
        "content": "<p>I've only lightly skimmed the above -- I'm game to push back the design meeting to another week, maybe post in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> about it, <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>? I would like to start getting feedback regardless. I've not had a chance to read the updated blog post yet.</p>",
        "id": 188811736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582368423
    },
    {
        "content": "<p>I probably wont' get one until Monday</p>",
        "id": 188811750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582368461
    },
    {
        "content": "<p>@Amanieu no apology necessary - most of the delay was just because I didn't have time to do much these last few weeks.</p>",
        "id": 188824640,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582390786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let's push the meeting back; perhaps another Doodle would be good?</p>",
        "id": 188824717,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582390884
    },
    {
        "content": "<p>I think the blog post is ready to publish once we put a new date in there.</p>",
        "id": 188825889,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582392693
    },
    {
        "content": "<p>Do we want to have a small discussion on whether to eliminate proposal 2 before publishing the blog post? Or just leave it in?</p>",
        "id": 188826365,
        "sender_full_name": "Amanieu",
        "timestamp": 1582393453
    },
    {
        "content": "<p>Hm... I think I'd prefer to leave it, at least until the lang team has a preliminary opportunity to take a look.</p>",
        "id": 188826553,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582393766
    },
    {
        "content": "<p>But I suppose if we decide it's strictly worse than proposal 1 then there wouldn't be any benefit in making lang team members take it into consideration</p>",
        "id": 188826615,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582393861
    },
    {
        "content": "<p>Here's the weird thing about proposal 1, to me: it's the only one that breaks <code>longjmp</code> when the compile-mode changes from <code>panic=unwind</code> to <code>panic=abort</code>. That seems somewhat surprising.</p>",
        "id": 188826697,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582394000
    },
    {
        "content": "<p>And, worse, it breaks only for <code>\"C unwind\"</code>, and as a user I think I would be surprised to find cases where <code>\"C unwind\"</code> is strictly less \"capable\" than <code>\"C\"</code></p>",
        "id": 188826750,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582394049
    },
    {
        "content": "<p>Fair enough, let's leave it in. We could add a small paragraph for it explaining the pros/cons. Pro: longjmp works with both C and C unwind. Con: it is the only proposal which treats forced unwind differently from other unwinding.</p>",
        "id": 188826827,
        "sender_full_name": "Amanieu",
        "timestamp": 1582394164
    },
    {
        "content": "<p>I g2g now, but I can write something up later.</p>",
        "id": 188826835,
        "sender_full_name": "Amanieu",
        "timestamp": 1582394174
    },
    {
        "content": "<p>That sounds good. I will be away from my computer for a few hours but I can probably also find time to add that if you haven't already by then</p>",
        "id": 188827845,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582395932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/24\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/pull/24\">https://github.com/rust-lang/project-ffi-unwind/pull/24</a></p>",
        "id": 188884509,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582492067
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> The wg-governance meeting ran a bit long, and I stayed to chat about some topics even after it was officially wrapped. I know I brought up moving our meeting time, but we didn't actually come to a conclusion about that, did we?</p>",
        "id": 189243720,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582829445
    },
    {
        "content": "<p>In any case, Erin merged the blog post, and the meeting date is officially set for this coming Monday. I haven't merged a <code>blog.rust-lang.org</code> post before; will the new post show up automatically soon?</p>",
        "id": 189243897,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582829527
    },
    {
        "content": "<p>sorry, I thought we were moving to fortnightly</p>",
        "id": 189255273,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582836534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> Oh, you may be right.</p>",
        "id": 189256785,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582837478
    },
    {
        "content": "<p>In fact checking back over our chat logs, that was indeed the decision. I'll adjust the meeting invite</p>",
        "id": 189258637,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582838544
    },
    {
        "content": "<p>thanks! sorry that you showed up to an empty room though :(</p>",
        "id": 189258668,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582838567
    },
    {
        "content": "<p>Amanieu was around, so it wasn't _too_ lonely!</p>",
        "id": 189258709,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582838617
    },
    {
        "content": "<p>getting my update in a bit early before a conflicting meeting: my end of things this fortnight was mostly getting calendaring mixed up <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 189821449,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583432756
    },
    {
        "content": "<p>I'm really grateful to the work that y'all are doing to get a meeting together, though, and look forward to participating when we have a new time nailed down</p>",
        "id": 189821521,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583432786
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Biweekly (fortnightly) check-in! Given the conversation above, I think pretty much everyone in that Zulip group already knows our status, but:</p>\n<p>The main update is that we need to reschedule the meeting with the lang team.Also, Amanieu and I met and decided to eliminate one of the three proposals, narrowing us down to two.</p>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> you're not part of the <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Zulip group. Would you like to be added? <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> same question.</p>",
        "id": 189822458,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433334
    },
    {
        "content": "<p>Once we've confirmed a date (I'm guessing the 16th) for the meeting with the Lang team, I think it would make sense to post in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> again.</p>",
        "id": 189822550,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583433393
    },
    {
        "content": "<p>hey all</p>",
        "id": 189822642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583433467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> Sure, add me to the group.</p>",
        "id": 189824665,
        "sender_full_name": "Amanieu",
        "timestamp": 1583434778
    },
    {
        "content": "<p>hey folks, I'm on PTO today but just wanted to drop in to say thank you for all the great discussion both synchronously on Monday and on here since. I'll be back at work tomorrow afternoon and will be writing up more of my thoughts about how I'm finding myself leaning</p>",
        "id": 191147865,
        "sender_full_name": "acfoltzer",
        "timestamp": 1584639028
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Weekly check-in! It seems the next order of business is for the lang team to make a decision on the proposals we've set out; I think Niko can provide some guidance on how much (if any) this group is expected to participate in that process.</p>",
        "id": 191148186,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584639161
    },
    {
        "content": "<p>Update from me: I'm working on making <code>catch_unwind</code> catch and rethrow foreign exceptions. It's actually not as complicated as I thought it would be.</p>",
        "id": 191148316,
        "sender_full_name": "Amanieu",
        "timestamp": 1584639218
    },
    {
        "content": "<p>Well, my take is that i'd love to see some the \"current status\" thoughts from each person -- <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> kind of provided their take, but I'm not sure about you, <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>. And I saw <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> wrote something like \"I favor proposal 2\" but I don't know if I know which one that is (I think \"C unwind\") and I'd be curious what their reasoning is.</p>",
        "id": 191148423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191148316\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191148316\">said</a>:</p>\n<blockquote>\n<p>Update from me: I'm working on making <code>catch_unwind</code> catch and rethrow foreign exceptions. It's actually not as complicated as I thought it would be.</p>\n</blockquote>\n<p>interesting!</p>",
        "id": 191148426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639255
    },
    {
        "content": "<p>I'm curious also how you think that should interact with forced exceptions</p>",
        "id": 191148478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639273
    },
    {
        "content": "<p>As long as the exception is rethrown, my understanding is that catching forced exceptions should work just like catching unforced exceptions.</p>",
        "id": 191148606,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584639328
    },
    {
        "content": "<p>(By \"my understanding\" I mean \"I think this is what LLVM/C++/etc expect\".)</p>",
        "id": 191148667,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584639359
    },
    {
        "content": "<p>I guess I don't know what <code>catch_unwind</code> \"catching and rethrowing\" foreign exceptions really means</p>",
        "id": 191148759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639379
    },
    {
        "content": "<p>like, I don't know what interface is being expsed to Rust users</p>",
        "id": 191148784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639392
    },
    {
        "content": "<p>I'm thinking about how C++ lets you catch \"any exception\", but doing so w/o rethrowing seems to be a kind of bug</p>",
        "id": 191148819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639410
    },
    {
        "content": "<p>(because you can intercept forced exceptions and fail to rethrow)</p>",
        "id": 191148848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639422
    },
    {
        "content": "<p>Same. I was actually thinking that there could be a better interface for invoking FFI code and catching foreign exceptions. Perhaps something like:</p>\n<div class=\"codehilite\"><pre><span></span>fn try_ffi(entrypoint: extern &quot;C&quot; fn(), exception_handler: FnOnce(ForeignException) -&gt; ContinueUnwind)\n</pre></div>\n\n\n<p>...where <code>ForeignException</code> is some opaque type, and <code>ContinueUnwind</code> is some type representing what the runtime should do after the handler has been invoked. (This is...sketchy. I haven't thought much about it yet.)</p>",
        "id": 191149360,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584639659
    },
    {
        "content": "<p>Basically <code>catch_unwind</code> returns a <code>Box&lt;ForeignException&gt;</code> and <code>resume_unwind</code> magically turns that back into the original exception.</p>",
        "id": 191149553,
        "sender_full_name": "Amanieu",
        "timestamp": 1584639729
    },
    {
        "content": "<p>Reviewing some older threads: one need, it seems, is the ability to re-throw the foreign exception from a different thread. Correct?</p>",
        "id": 191149653,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584639775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191149553\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191149553\">said</a>:</p>\n<blockquote>\n<p>Basically <code>catch_unwind</code> returns a <code>Box&lt;ForeignException&gt;</code> and <code>resume_unwind</code> magically turns that back into the original exception.</p>\n</blockquote>\n<p>ok, so nothing kind of <em>forces</em> you to do that \"resume\"</p>",
        "id": 191149962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584639907
    },
    {
        "content": "<p>Yes, sending the exception to another thread will work fine.</p>",
        "id": 191150017,
        "sender_full_name": "Amanieu",
        "timestamp": 1584639943
    },
    {
        "content": "<p>There is no special handling for forced exceptions at the moment, but I can easily change <code>catch_unwind</code> to ignore foreign exceptions if necessary.</p>",
        "id": 191150225,
        "sender_full_name": "Amanieu",
        "timestamp": 1584640038
    },
    {
        "content": "<p>I'm not sure if it should ignore them, seems maybe bad</p>",
        "id": 191150269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584640057
    },
    {
        "content": "<p>(But anyway that's something that can be hammered out at some point)</p>",
        "id": 191150376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584640087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> were you ever able to write up a comment?</p>",
        "id": 191932682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585248971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191932682\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/191932682\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> were you ever able to write up a comment?</p>\n</blockquote>\n<p>gah, Zulip signed me out in the background, I missed this <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 192698754,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585848081
    },
    {
        "content": "<p>that's what I get for turning off all the email notifications I can</p>",
        "id": 192698808,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585848112
    },
    {
        "content": "<p>It sounds like the horse is already out of the barn, which I am fine with, but just for posterity's sake I have three reasons for favoring a single <code>\"C\"</code> ABI, perhaps with a <code>#[nounwind]</code> attribute for optimization:</p>\n<ul>\n<li>Ease of explanation: \"by default, <code>extern \"C\"</code> functions support the platform's unwinding mechanism\" is pretty straightforward, and being able to explain the behavior of the ABI with <code>panic=unwind</code> vs <code>panic=abort</code> by direct analogy with <code>-fexceptions</code> vs <code>-fno-exceptions</code> means many folks will be able to reuse their previous knowledge</li>\n<li>Flexibility of existing code: here I'm particularly thinking of the cancellation points in <code>libc</code>, but there are probably other callback-based libraries that are currently UB to use with exception-throwing code that would just become defined</li>\n<li>Dodging the questions of subtyping and variance between <code>\"C\"</code> and <code>\"C unwind\"</code>: I agree that making these invariant is the right call for now since we can always wrap one in the other, but this is going to be a source of friction for callback APIs</li>\n</ul>",
        "id": 192701515,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585849439
    },
    {
        "content": "<p>Hm. I do find those reasons compelling.</p>\n<p>I also wonder about <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s \"Rust values\" point. I agree that we don't want <code>panic=abort</code> to introduce UB, but it's almost stranger to me that we'd have UB with <code>panic=unwind</code> in some cases.</p>",
        "id": 192702224,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585849747
    },
    {
        "content": "<p>I.e., I would generally expect that one of Rust's values is \"do the right thing by default\".</p>",
        "id": 192702283,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585849785
    },
    {
        "content": "<p>And that another is \"UB is usually not 'the right thing'\".</p>",
        "id": 192702367,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585849813
    },
    {
        "content": "<blockquote>\n<p>Dodging the questions of subtyping and variance between \"C\" and \"C unwind\": I agree that making these invariant is the right call for now since we can always wrap one in the other, but this is going to be a source of friction for callback APIs</p>\n</blockquote>\n<p>Adding subtyping between types is <a href=\"https://internals.rust-lang.org/t/minimum-dyn-trait-subtyping-single-inheritance/8805/30?u=centril\" title=\"https://internals.rust-lang.org/t/minimum-dyn-trait-subtyping-single-inheritance/8805/30?u=centril\">*extremely unlikely*</a> as an addition to Rust. Coercions is at most what we would add for convenience, and then shims might be introduced automatically</p>",
        "id": 192702627,
        "sender_full_name": "centril",
        "timestamp": 1585849935
    },
    {
        "content": "<p>But both of those values are, I think, more of my own personal desires than ones espoused by the Rust community at large. It's not clear that they'd be shared more broadly.</p>",
        "id": 192702896,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585850058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> That's why Adam is saying that introducing a new ABI is problematic.</p>",
        "id": 192702940,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585850083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span>  by subtyping do you include coercions?</p>",
        "id": 192703049,
        "sender_full_name": "centril",
        "timestamp": 1585850145
    },
    {
        "content": "<p>I ask because there's regular confusion between the two concepts</p>",
        "id": 192703100,
        "sender_full_name": "centril",
        "timestamp": 1585850172
    },
    {
        "content": "<p>Many don't actually mean subtyping when they use the term</p>",
        "id": 192703129,
        "sender_full_name": "centril",
        "timestamp": 1585850188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>  I don't think the lack of subtyping would add notable friction; most of the time you're dealing with top level coercions and not e.g., <code>Vec&lt;extern \"C\" fn()&gt;</code> where the question of subtyping would come into play</p>",
        "id": 192703686,
        "sender_full_name": "centril",
        "timestamp": 1585850433
    },
    {
        "content": "<p><code>&amp;'lifetime extern \"C\" fn()</code> would also be an example, but that seems like an unusual type</p>",
        "id": 192703779,
        "sender_full_name": "centril",
        "timestamp": 1585850473
    },
    {
        "content": "<p>coercions would suffice as well, but it'd still be complicated to work out which coercions are valid where, because functions are contravariant</p>",
        "id": 192704025,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585850570
    },
    {
        "content": "<p>I say subtyping because that's how I think about it from my academic PL background :)</p>",
        "id": 192704082,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585850599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span>  that's surprising, precisely because from a type theoretic perspective (at least that which I know of) coercions are understood as something else</p>",
        "id": 192704273,
        "sender_full_name": "centril",
        "timestamp": 1585850667
    },
    {
        "content": "<p>for this topic I'm leaning on my knowledge of the multi-language semantics literature, contracts, blame calculus, etc</p>",
        "id": 192704469,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585850753
    },
    {
        "content": "<p>To my knowledge we have generic infrastructure for handling contravariance and such</p>",
        "id": 192704511,
        "sender_full_name": "centril",
        "timestamp": 1585850763
    },
    {
        "content": "<p>I'm less of a type theorist :)</p>",
        "id": 192704534,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585850767
    },
    {
        "content": "<p>(with respect to coercions)</p>",
        "id": 192704537,
        "sender_full_name": "centril",
        "timestamp": 1585850769
    },
    {
        "content": "<p>I should probably re-read <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" title=\"https://doc.rust-lang.org/nomicon/coercions.html\">https://doc.rust-lang.org/nomicon/coercions.html</a></p>",
        "id": 192704790,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585850903
    },
    {
        "content": "<p>In any case: for now, I am drafting a PR for <code>\"C unwind\"</code>. I think we'll have time before submitting it as a PR to re-open discussion with the lang team; <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should Adam share his bullet points above in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> ?</p>",
        "id": 192705184,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585851120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span>  for contravariance we can take <code>unsafe fn</code>'s lead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OK.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// ERROR.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192705343,
        "sender_full_name": "centril",
        "timestamp": 1585851204
    },
    {
        "content": "<p>got it, that makes sense</p>",
        "id": 192705537,
        "sender_full_name": "acfoltzer",
        "timestamp": 1585851308
    },
    {
        "content": "<p>(So the coercion <code>extern \"C\" fn()</code> to <code>extern \"C unwind\" fn()</code> would OK and doesn't need a shim; the reverse coercion would also be OK but would need a shim to abort unless perhaps with <code>-C panic=abort</code>.)</p>",
        "id": 192706400,
        "sender_full_name": "centril",
        "timestamp": 1585851748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192705184\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192705184\">said</a>:</p>\n<blockquote>\n<p>In any case: for now, I am drafting a PR for <code>\"C unwind\"</code>. I think we'll have time before submitting it as a PR to re-open discussion with the lang team; <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> should Adam share his bullet points above in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> ?</p>\n</blockquote>\n<p>I found them informative.</p>",
        "id": 192851702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941325
    },
    {
        "content": "<p>but I don't know that we have to post them in t-lang necessarily</p>",
        "id": 192851737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192701515\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192701515\">said</a>:</p>\n<blockquote>\n<p>It sounds like the horse is already out of the barn, which I am fine with, but just for posterity's sake I have three reasons for favoring a single <code>\"C\"</code> ABI, perhaps with a <code>#[nounwind]</code> attribute for optimization:</p>\n<ul>\n<li>Ease of explanation: \"by default, <code>extern \"C\"</code> functions support the platform's unwinding mechanism\" is pretty straightforward, and being able to explain the behavior of the ABI with <code>panic=unwind</code> vs <code>panic=abort</code> by direct analogy with <code>-fexceptions</code> vs <code>-fno-exceptions</code> means many folks will be able to reuse their previous knowledge</li>\n<li>Flexibility of existing code: here I'm particularly thinking of the cancellation points in <code>libc</code>, but there are probably other callback-based libraries that are currently UB to use with exception-throwing code that would just become defined</li>\n<li>Dodging the questions of subtyping and variance between <code>\"C\"</code> and <code>\"C unwind\"</code>: I agree that making these invariant is the right call for now since we can always wrap one in the other, but this is going to be a source of friction for callback APIs</li>\n</ul>\n</blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- regarding the \"C\" vs \"C unwind\" question, these are the points that <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> submitted <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 192851821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941387
    },
    {
        "content": "<p>Would unifying them lead to a substantial degree of additional code size by default?</p>",
        "id": 192851919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585941476
    },
    {
        "content": "<p>If we unified them, it would mean that:</p>\n<ul>\n<li>with panic=unwind, we emit unwind tables even for foreign calls; today we mark them as no-unwind, so this would have some impact, but not much, since we're emitting unwind tables everywhere else;</li>\n<li>with panic=abort, we would do the same as today, so you would have no code size increase at all, full optimization</li>\n</ul>",
        "id": 192852231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941628
    },
    {
        "content": "<p>However, the downside is that you may have some library that interacts with c++ code where that C++ code throws an exception</p>",
        "id": 192852266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941651
    },
    {
        "content": "<p>This Rust library is UB to use with panic=abort</p>",
        "id": 192852275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941656
    },
    {
        "content": "<p>But you won't really get any kind of \"warning\" about that, we don't really have a way to \"signal that\" now</p>",
        "id": 192852301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941674
    },
    {
        "content": "<p>If otoh that library were using \"C unwind\" as its abi (thus declaring its intention to interact with foreign exceptions), we could at least give you a hard error</p>",
        "id": 192852335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941696
    },
    {
        "content": "<p>On the <em>other other</em> hand, we <em>could</em> catch and abort with unwinding and panic=abort in debug code without any real problem, so maybe you'd notice these problems relatively early.</p>",
        "id": 192852363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941715
    },
    {
        "content": "<p>That's why, to me, this kind of comes down to how much we should be pushing people to write code that interoperates with panic=abort and panic=unwind, which was the thing I emphasized in my earlier comment.</p>",
        "id": 192852471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941770
    },
    {
        "content": "<p>But I think another key question is how hard you think it is to explain to people that they have to use \"C unwind\" if they expect foreign exceptions to propagate across the boundary. That doesn't seem too hard to me, but I may be 'too close' to see the cognitive cost.</p>",
        "id": 192852505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192852335\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/192852335\">said</a>:</p>\n<blockquote>\n<p>If otoh that library were using \"C unwind\" as its abi (thus declaring its intention to interact with foreign exceptions), we could at least give you a hard error</p>\n</blockquote>\n<p>To clarify, this would be a runtime error (<code>abort</code>)</p>",
        "id": 192856742,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1585944029
    },
    {
        "content": "<p>Yes, correct, sorry.</p>",
        "id": 193107004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586209970
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Weekly check-in!</p>",
        "id": 194339656,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058220
    },
    {
        "content": "<p>Niko has written some decently extensive comments on the RFC draft, but I haven't addressed them yet. I should be able to get to them this weekend, I think.</p>",
        "id": 194339705,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058248
    },
    {
        "content": "<p>Nothing else to report at this time.</p>",
        "id": 194339729,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058258
    },
    {
        "content": "<p>At this point the only task left for this WG is writing the RFC. So I don't think there is anything else to report.</p>",
        "id": 194339837,
        "sender_full_name": "Amanieu",
        "timestamp": 1587058315
    },
    {
        "content": "<p>I have the RFC draft on my github review queue, but that queue is currently growing faster than I can get through <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194339841,
        "sender_full_name": "acfoltzer",
        "timestamp": 1587058316
    },
    {
        "content": "<p>I would like to take a look but am turbo-busy at work currently, so don't hold up the merge if I am not able to make the time</p>",
        "id": 194339941,
        "sender_full_name": "acfoltzer",
        "timestamp": 1587058349
    },
    {
        "content": "<p>Okay, understandable.</p>",
        "id": 194339966,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058364
    },
    {
        "content": "<p>Are you okay with moving forward under the assumption that we'll introduce <code>\"C unwind\"</code>?</p>",
        "id": 194339998,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058381
    },
    {
        "content": "<p>That's the main thing we might need your input on</p>",
        "id": 194340037,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058395
    },
    {
        "content": "<p>I feel very comfortable that my perspective has been incorporated so far, and yes, okay with <code>\"C unwind\"</code></p>",
        "id": 194340039,
        "sender_full_name": "acfoltzer",
        "timestamp": 1587058396
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194340055,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058403
    },
    {
        "content": "<p>I still have a preference for <code>\"C\"</code> but not a deeply held one</p>",
        "id": 194340059,
        "sender_full_name": "acfoltzer",
        "timestamp": 1587058408
    },
    {
        "content": "<p>I think I'm in a similar boat</p>",
        "id": 194340078,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058417
    },
    {
        "content": "<p>Fortunately, I think most of the RFC text will be similar regardless of which we pick</p>",
        "id": 194340173,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058450
    },
    {
        "content": "<p>But I think when the RFC is ready to submit, we should maybe discuss one last time, so that when we submit it as a PR to the actual <code>rfcs</code> repo, we are fully committed to <code>\"C unwind\"</code> (or not)</p>",
        "id": 194340222,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058484
    },
    {
        "content": "<p>I should say, my preference for <code>\"C\"</code> is less strong than my desire for things to move forward either way. from a Fastly perspective either solution will meet our needs</p>",
        "id": 194340348,
        "sender_full_name": "acfoltzer",
        "timestamp": 1587058544
    },
    {
        "content": "<p>I think it's probably the case that both solutions will meet everyone's _needs_ but not necessarily everyone's \"ideal case\"</p>",
        "id": 194340454,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058581
    },
    {
        "content": "<p>I do think defaults matter, and overall Rust has done such an impressive job of having good defaults that I'd hate to contribute a new case where the default seems wrong!</p>",
        "id": 194340493,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058605
    },
    {
        "content": "<p>But I also think that \"the default seems wrong\" is probably not something we'll know without the benefit of hindsight from many people using the feature over time</p>",
        "id": 194340567,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058639
    },
    {
        "content": "<p>Well, unless <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has anything to add, I think we can call that a wrap</p>",
        "id": 194340805,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587058740
    },
    {
        "content": "<p>Sorry, I was distracted today</p>",
        "id": 194349094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587062356
    },
    {
        "content": "<p>No problem.</p>",
        "id": 194351154,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1587063310
    },
    {
        "content": "<p>hey y'all, I have a conflict for our usual 10:30 time today, but I was able to offer some (very minor) comments on the RFC just now. I am very impressed by and grateful for the work that y'all have done on this. it really will make a big difference for our work on Lucet</p>",
        "id": 195872740,
        "sender_full_name": "acfoltzer",
        "timestamp": 1588267304
    },
    {
        "content": "<p>I'm around was going to go take a fresh look</p>",
        "id": 195872808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267330
    },
    {
        "content": "<p>I do have a bit of a \"ok let's just do this thing\" feeling</p>",
        "id": 195872993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267431
    },
    {
        "content": "<p>i.e., even if there might be ways to improve the text...not clear how much it's worth it, as long as we all agree unambiguously on the end result</p>",
        "id": 195873072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267454
    },
    {
        "content": "<p>I was going to write up my main higher-level concern, but I see that there's already a discussion underway in <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/Revised.20RFC\">#project-ffi-unwind &gt; Revised RFC</a> on the same topic. I worry that there's a fair amount of prerequisite knowledge required to grasp the distinction between forced and non-forced unwinding. But I also am leaning toward Niko's \"let's just do this thing\" assessment</p>",
        "id": 195873190,
        "sender_full_name": "acfoltzer",
        "timestamp": 1588267508
    },
    {
        "content": "<p>I would like it that people who read it .. yeah .. understand well what it means</p>",
        "id": 195873279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267555
    },
    {
        "content": "<p>but also some of that enery can go into writing up docs for the reference</p>",
        "id": 195873325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588267563
    },
    {
        "content": "<p>I think the specification is going to ultimately be the same; the current RFC already does state that <code>longjmp</code> and <code>pthread_exit</code> are treated the same regardless of whether forced unwinding is involved or not. I am game to change it around, but I think the entire framing would need to change from \"unwinding is now allowed, with 'C unwind'\" to \"non-local control flow involving FFI\".</p>",
        "id": 195874394,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268077
    },
    {
        "content": "<p>The 'unwinding' framing matches the name of the new ABI string pretty well, which I think is a plus.</p>",
        "id": 195874409,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268092
    },
    {
        "content": "<p>To me, it seems like anyone who wants to be doing cross-language unwinding is probably going to know the word \"unwinding\", and also know that \"panic\" in Rust and \"exceptions\" in C++ are both forms of \"unwinding\". They may or may not also know about \"forced unwinding\", but if they click through to see previous discussions and/or the Inside Rust blog post, they'll _definitely_ see \"forced unwinding\". So I think it's good to at least mention it, and then say \"nope, this doesn't count.\"</p>",
        "id": 195874593,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268187
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I think everyone interested in the weekly sync-up may already be here, but just in case, here's your notification!</p>",
        "id": 195874821,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268279
    },
    {
        "content": "<p>I'm checking out your PR locally</p>",
        "id": 195875223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268466
    },
    {
        "content": "<p>I was curious to read it again and experiment a bit</p>",
        "id": 195875454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268561
    },
    {
        "content": "<p>I'm not sure I follow the idea that it will require massive rewrites</p>",
        "id": 195875471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268570
    },
    {
        "content": "<p>I don't mean that the entire thing would need to be thrown out; it's more that the framing in terms of \"unwinding\" seems incorrect if we want to specify the behavior in terms of things-that-cause-non-local-control-flow.</p>",
        "id": 195875828,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268760
    },
    {
        "content": "<p>re-reading it, I think it seems \"pretty ok\",</p>",
        "id": 195876086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268879
    },
    {
        "content": "<p>although I find the phrase \"unforced foreign unwind\" (sometimes we say \"non-forced foreign unwind\"...) kind of confusing</p>",
        "id": 195876147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268897
    },
    {
        "content": "<p>\"nonunforced\"?</p>",
        "id": 195876177,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268914
    },
    {
        "content": "<p>Please tell me I didn't write that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 195876196,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268923
    },
    {
        "content": "<p>no, you wrote unforced and non-forced</p>",
        "id": 195876202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268930
    },
    {
        "content": "<p>ah</p>",
        "id": 195876208,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268934
    },
    {
        "content": "<p>both of which are confounding to me :)</p>",
        "id": 195876212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268937
    },
    {
        "content": "<p>i.e., I know what it means</p>",
        "id": 195876220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268941
    },
    {
        "content": "<p>\"unforced error\"</p>",
        "id": 195876228,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268943
    },
    {
        "content": "<p>but my brain has to sit and decode it</p>",
        "id": 195876229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268944
    },
    {
        "content": "<p>like in Tennis</p>",
        "id": 195876240,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268951
    },
    {
        "content": "<p>I would rather just say \"foreign unwind\"</p>",
        "id": 195876245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268952
    },
    {
        "content": "<p>this is a flaw in the terminology, I guess, which suggested that foreign unwind is the superset of the two</p>",
        "id": 195876276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268969
    },
    {
        "content": "<p>when that is just not a useful concept, since they share nothing in common in terms of our behavior</p>",
        "id": 195876300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268978
    },
    {
        "content": "<p>it'd be better to just call it \"forced unwind\" in this way :)</p>",
        "id": 195876327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268989
    },
    {
        "content": "<p>Yeah, I think we can just say in the \"forced unwinding\" section something like \"throughout this RFC, unwinding does not refer to forced-unwinding, unless otherwise specified\"</p>",
        "id": 195876328,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588268990
    },
    {
        "content": "<p>I'd be in favor of that</p>",
        "id": 195876342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588268997
    },
    {
        "content": "<p>I think we should call it </p>\n<ul>\n<li>Rust panic</li>\n<li>foreign unwind</li>\n<li>forced unwind</li>\n</ul>",
        "id": 195876414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269014
    },
    {
        "content": "<p>The more I think about it, the forced-unwinding section is mostly a disclaimer: \"we don't actually support this in the same way that we support other unwinding\"</p>",
        "id": 195876480,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269048
    },
    {
        "content": "<p>Whereas when I wrote that section originally (and the blog post), I was thinking more \"here's some necessary context for the specification of the new behavior\"</p>",
        "id": 195876518,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269068
    },
    {
        "content": "<p>Not to toot my own horn, but taking the forced-unwind columns out of the table entirely was a good decision, I think.</p>",
        "id": 195876569,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269102
    },
    {
        "content": "<p>I will review, and try to limit discussion of forced-unwinding-as-such to the \"forced unwind\" section, which I will then review with my newfound \"this is a disclaimer\" mindset.</p>",
        "id": 195876733,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269179
    },
    {
        "content": "<p>Wherever else forced unwinding shows up, I'll make sure it's more of a footnote - \"see the force unwind disclaimer\"</p>",
        "id": 195876812,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269212
    },
    {
        "content": "<p>I'm currently editing the motivation a bit</p>",
        "id": 195877369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269471
    },
    {
        "content": "<p>do you mind if I push some commits to your branch?</p>",
        "id": 195877383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269478
    },
    {
        "content": "<p>I'll ping you when I do</p>",
        "id": 195877392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269479
    },
    {
        "content": "<p>I'm trying to address my point about adding in our design constriants</p>",
        "id": 195877458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 195877484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269504
    },
    {
        "content": "<p>I think one remaining interesting point is what to say about foreign exceptions propagating through Rust frames</p>",
        "id": 195877583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588269551
    },
    {
        "content": "<p>I do not mind</p>",
        "id": 195877854,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588269677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> take a look!</p>",
        "id": 195878573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270023
    },
    {
        "content": "<p>Looks good, though shouldn't the 'analysis of key design goals' subsection go in the 'rationale' section?</p>",
        "id": 195879150,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588270265
    },
    {
        "content": "<p>Also, I thought it would be good to call out that this RFC was drafted by the project group, so I added that to the \"header\" material at the top. What do you think?</p>",
        "id": 195879256,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588270322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/195879150\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/195879150\">said</a>:</p>\n<blockquote>\n<p>Looks good, though shouldn't the 'analysis of key design goals' subsection go in the 'rationale' section?</p>\n</blockquote>\n<p>move it to wherever you feel best</p>",
        "id": 195879481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270413
    },
    {
        "content": "<p>one thing though</p>",
        "id": 195879508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270428
    },
    {
        "content": "<p>I think we should a \"key goal\" to be enabling longjmp-based error handling</p>",
        "id": 195879532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270438
    },
    {
        "content": "<p>I forgot that I think</p>",
        "id": 195879574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270445
    },
    {
        "content": "<p>I <em>think</em> that kind of covers the \"three scenarios\" we care about?</p>",
        "id": 195879590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588270453
    },
    {
        "content": "<p>Well, I noticed that I already had a very similar bullet-point list, based on the Inside Rust post's list.</p>",
        "id": 195880807,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588270975
    },
    {
        "content": "<p>One that was missing from your list, which I've now incorporated, is keeping the <code>libc</code> API stable.</p>",
        "id": 195880858,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588270997
    },
    {
        "content": "<p>That's sort of the same requirement, is it? Though it should be rephrased to explain why it's relevant.</p>",
        "id": 195880896,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588271014
    },
    {
        "content": "<p>Hmmmm never mind, sorry, that's b/c of <code>pthread_exit</code>, not <code>longjmp</code></p>",
        "id": 195880928,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588271029
    },
    {
        "content": "<p>regardless it's ok to say twice :)</p>",
        "id": 195881337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588271182
    },
    {
        "content": "<p>but I do feel it's distinct</p>",
        "id": 195881352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588271187
    },
    {
        "content": "<p>Oh, I was thinking that if they were the same issue, it could be rephrased to focus on <code>longjmp</code> instead of <code>libc</code></p>",
        "id": 195881383,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588271204
    },
    {
        "content": "<p>but they are not the same, so I'll introduce a new bullet.</p>",
        "id": 195881397,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588271215
    },
    {
        "content": "<p>I can't find it now, but I left a comment in response to one of yours about the \"inert\" terminology. I am starting to lean towards adopting such a term, though as I mentioned I'm not sold on \"inert\" specifically.</p>",
        "id": 195883381,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588272039
    },
    {
        "content": "<p>I think I suggested \"disposable\"?</p>",
        "id": 195883415,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588272055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/195883381\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/195883381\">said</a>:</p>\n<blockquote>\n<p>I can't find it now, but I left a comment in response to one of yours about the \"inert\" terminology. I am starting to lean towards adopting such a term, though as I mentioned I'm not sold on \"inert\" specifically.</p>\n</blockquote>\n<p>I did feel it was missing, <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span></p>",
        "id": 196008195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366160
    },
    {
        "content": "<p>I refrained from suggesting it, but it felt like a \"concept\" that arose a few times</p>",
        "id": 196008225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366174
    },
    {
        "content": "<p>and sometimes we were consistent with saying \"or catch-unwind\"</p>",
        "id": 196008237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366179
    },
    {
        "content": "<p>and sometimes we just talked about destructors</p>",
        "id": 196008243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366183
    },
    {
        "content": "<p>an option might be to .. steal a term like POD?</p>",
        "id": 196008282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366196
    },
    {
        "content": "<p>that's probably confusing</p>",
        "id": 196008284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588366199
    },
    {
        "content": "<p>I think I'd rather just create a new term, as long as it's somewhat intuitive. Now that I think about it, though, an actual precise definition is a little bit difficult, because there are edge cases where frames with destructors or <code>catch_unwind</code> would still be \"disposable\":</p>\n<ul>\n<li>All <code>Drop</code> objects have been <code>move</code>d out of scope</li>\n<li>All <code>Drop</code> objects have already been <code>drop</code>ped</li>\n<li>The <code>catch_unwind</code> has already executed</li>\n</ul>\n<p>...etc. One way to define it might be to say \"a <code>panic</code> would not cause any non-trivial code to execute\", where \"non-trivial\" means... something about side effects, I guess.</p>",
        "id": 196011592,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588368084
    },
    {
        "content": "<p>I think we can wave our hands and say \"destructors in scope\"</p>",
        "id": 196014297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588369902
    },
    {
        "content": "<p>it's good enough for now</p>",
        "id": 196014302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588369905
    },
    {
        "content": "<p>where \"destructors in scope\" means that there is a live (non-moved) value whose type has a destructor, or something like that (the notion in the compiler is \"drop glue\", but I don't know what term we use in the reference)</p>",
        "id": 196014404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588369972
    },
    {
        "content": "<p>at a high level, catch_unwind is just fancy drop glue :)</p>\n<p>it's a bit unfortunate we don't have a nice term here though I think</p>",
        "id": 196017818,
        "sender_full_name": "simulacrum",
        "timestamp": 1588372763
    },
    {
        "content": "<p>Do either of you know why it's called \"glue\"?</p>",
        "id": 196018991,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588373941
    },
    {
        "content": "<p>hm, not entirely, but probably because it's \"glue code\" related to drop :)<br>\nThere's references to it as early as 2014 in the rfcs repo, for example</p>",
        "id": 196024271,
        "sender_full_name": "simulacrum",
        "timestamp": 1588379697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/196017818\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/196017818\">said</a>:</p>\n<blockquote>\n<p>it's a bit unfortunate we don't have a nice term here though I think</p>\n</blockquote>\n<p>I know</p>",
        "id": 196045155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588415158
    },
    {
        "content": "<p>the term glue code predates me, but it was used for any automatically generated code that walked the type structure</p>",
        "id": 196045197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588415187
    },
    {
        "content": "<p>technically it's \"landing pads\" I think, at least on MSVC? But we could co-opt the term to other platforms. Though that could be confusing in and of itself.</p>",
        "id": 196048042,
        "sender_full_name": "simulacrum",
        "timestamp": 1588420085
    },
    {
        "content": "<p>AIUI, we can't even really say \"code executes during unwinding\", because at least at a high level DWARF unwinding is capable of executing essentially arbitrary code (not machine-level, but DWARF level)</p>",
        "id": 196048059,
        "sender_full_name": "simulacrum",
        "timestamp": 1588420151
    },
    {
        "content": "<p>Also because of drop flags we may still have landing pads while not have any destructors to execute.</p>",
        "id": 196049618,
        "sender_full_name": "Amanieu",
        "timestamp": 1588422689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">longjmp</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196049621,
        "sender_full_name": "Amanieu",
        "timestamp": 1588422700
    },
    {
        "content": "<p>Is this allowed if <code>foo</code> is false? Technically no destructors run, but we still have to run code to check if <code>x</code> has been initialized.</p>",
        "id": 196049693,
        "sender_full_name": "Amanieu",
        "timestamp": 1588422780
    },
    {
        "content": "<p>interesting question, really narrowing down just when it is legal is an interesting question. In practice it seems like it'd be fine to skip the landing pad in that example, but it's probably UB from LLVM's perspective</p>",
        "id": 196184653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588601405
    },
    {
        "content": "<p>Really? I would not expect LLVM to make that UB...</p>",
        "id": 196189179,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588603130
    },
    {
        "content": "<p>I don't think LLVM will make that UB either. And I agree that it's fine to skip the landing pad in this case.</p>",
        "id": 196208873,
        "sender_full_name": "Amanieu",
        "timestamp": 1588611172
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Biweekly check-in!</p>",
        "id": 197590619,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1589477660
    },
    {
        "content": "<p>As I said in <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/posting.20the.20RFc\">#project-ffi-unwind &gt; posting the RFc</a> , there are still a few TODOs left in the RFC. I am probably still the best person to write these up, but the 'TODO' comments in the draft should be sufficient for any interested parties to lend a hand.</p>",
        "id": 197590768,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1589477738
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> hey, no updates from me this week. currently double-booked with the Bytecode Alliance meeting. I don't see any review requests on Github anymore, but let me know if there's more I can do to help</p>",
        "id": 197590778,
        "sender_full_name": "acfoltzer",
        "timestamp": 1589477746
    },
    {
        "content": "<p>No real updates, I'd like to post the RFC</p>",
        "id": 197591071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589477911
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Biweekly check-in. No updates from me, I'm afraid, but I might be able to finish up the RFC and get it ready for submission to <code>rust-lang/rfcs</code> within the next few days.</p>",
        "id": 199054376,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687060
    },
    {
        "content": "<p>no update on my part except that this would be excellent!</p>",
        "id": 199054406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590687075
    },
    {
        "content": "<p>I don't really mind the delay, <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>, but if finishing up the RFC is stressing you in particular let me know and maybe I can take it off your hands</p>",
        "id": 199054442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590687095
    },
    {
        "content": "<p>or maybe <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> can :P</p>",
        "id": 199054480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590687109
    },
    {
        "content": "<p>/me volunteers other people</p>",
        "id": 199054550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590687128
    },
    {
        "content": "<p>aaaaaaa</p>",
        "id": 199054553,
        "sender_full_name": "acfoltzer",
        "timestamp": 1590687131
    },
    {
        "content": "<p>:P</p>",
        "id": 199054567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590687136
    },
    {
        "content": "<p>It's just a lack of time <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 199054577,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687142
    },
    {
        "content": "<p>And energy, I guess. But no, the specific task is no big deal.</p>",
        "id": 199054640,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687170
    },
    {
        "content": "<p>I am willing to help but this week is pretty bad. I have more light in my calendar next week though</p>",
        "id": 199054719,
        "sender_full_name": "acfoltzer",
        "timestamp": 1590687205
    },
    {
        "content": "<p>Oh, and it sounds like we're aligned enough on the \"POF\" terminology to move forward with that. Which removes the only blocker.</p>",
        "id": 199054734,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687211
    },
    {
        "content": "<p>(we're currently onboarding Aaron Turon as our team's new manager, which is a rare experience to be savored)</p>",
        "id": 199054823,
        "sender_full_name": "acfoltzer",
        "timestamp": 1590687250
    },
    {
        "content": "<p>That's awesome!</p>",
        "id": 199054897,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687301
    },
    {
        "content": "<p>actually, that's more than a parenthetical. I'm hoping that once Aaron is more up to speed, that he can help drive things forward in this group as well. he has a little bit more experience than I do at getting RFCs though :)</p>",
        "id": 199054913,
        "sender_full_name": "acfoltzer",
        "timestamp": 1590687310
    },
    {
        "content": "<p>Well, is that a wrap for today?</p>",
        "id": 199055372,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687539
    },
    {
        "content": "<p>Sounds like it. Stay safe and sane, everyone!</p>",
        "id": 199056183,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590687964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"237472\">acfoltzer</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/199054823\">said</a>:</p>\n<blockquote>\n<p>(we're currently onboarding Aaron Turon as our team's new manager, which is a rare experience to be savored)</p>\n</blockquote>\n<p>lol I was considering making some kind of joke about \"I know your manager and can get you assigned to this\" but I couldn't figure out how to make it funny</p>",
        "id": 199057363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590688482
    },
    {
        "content": "<p>Hey folks, early check-in for me since I have a conflict for our usual time. <span class=\"user-mention\" data-user-id=\"301292\">@Aaron Turon</span> has agreed to help represent the Fastly use case here while I am buried in (sadly unrelated, but fun) product work. From our perspective, we are fine with not handling longjmps at first. It really is the panics that we want to be able to propagate</p>",
        "id": 200577353,
        "sender_full_name": "acfoltzer",
        "timestamp": 1591896340
    },
    {
        "content": "<p>I'm a bit concerned about doing anything that would break longjmp, though, because currently it is \"soft-guaranteed\" to work.</p>",
        "id": 200577572,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896430
    },
    {
        "content": "<p>I.e. it's not in the Reference, but there have been numerous assurances that longjmp works as expected</p>",
        "id": 200577624,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896459
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Bi-weekly check-in!</p>",
        "id": 200578119,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896670
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 200578159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896692
    },
    {
        "content": "<p>it's been an interesting week :)</p>",
        "id": 200578164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896695
    },
    {
        "content": "<p>So, there are basically two outstanding points of potential concern, right?</p>",
        "id": 200578202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896721
    },
    {
        "content": "<p>Or maybe three</p>",
        "id": 200578247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896728
    },
    {
        "content": "<p>The RFC draft may be good enough at this point to merge; but we have some items to look into before we open an rfcs repo PR</p>",
        "id": 200578299,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896755
    },
    {
        "content": "<p>^ yes</p>",
        "id": 200578316,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896765
    },
    {
        "content": "<ul>\n<li>Can we be assured that it is not LLVM-UB to have a \"longjmp unwind\" (forgot the term) across a POF, even if there are pending landing pads (which we know to be no-ops) or the function is marked as \"noexcept\"</li>\n</ul>",
        "id": 200578358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896783
    },
    {
        "content": "<ul>\n<li>Can/should we distinguish the idea of \"not executing a dtor\", which we've been calling UB, but perhaps we should use another term -- i.e., you're not allocated to longjmp over frames you don't control because that's a limit we put on what Rust code can do, but it's not in and of itself UB (it could cause UB though, and if it did, it would be your fault)</li>\n</ul>",
        "id": 200578450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896836
    },
    {
        "content": "<ul>\n<li>does guaranteeing longjmp correctness over POFs preclude useful future optimizations</li>\n</ul>",
        "id": 200578557,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591896872
    },
    {
        "content": "<ul>\n<li>Do we care about the fact that we are losing optimization potential here by \"blessing\" the idea of longjmp -- intriguingly, only a problem on linux</li>\n</ul>",
        "id": 200578559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896874
    },
    {
        "content": "<p>(jinx)</p>",
        "id": 200578572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896883
    },
    {
        "content": "<p>and I guess the follow-up is, if we do, what are we doing to do about it ;)</p>",
        "id": 200578634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896914
    },
    {
        "content": "<p>I personally care a little :)</p>",
        "id": 200578640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896917
    },
    {
        "content": "<p>but I'm not sure yet what I think would be a solution</p>",
        "id": 200578702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591896942
    },
    {
        "content": "<p>Q: is this also a problem for pthread exit?</p>",
        "id": 200578837,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897000
    },
    {
        "content": "<p>Seems like it would be...</p>",
        "id": 200578849,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897009
    },
    {
        "content": "<p>but I feel like it would be reasonable to move forward with the RFC but leaving longjmp and \"forced exceptions\" as an unresolved question -- I guess the tl;dr is that we could in principle require some extra annotation to indicate when you are calling a function that may not return</p>",
        "id": 200578866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897015
    },
    {
        "content": "<p>which btw ties in with the UB question</p>",
        "id": 200578876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897020
    },
    {
        "content": "<p>i.e., violating such an annotation would presumably be UB</p>",
        "id": 200578925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897041
    },
    {
        "content": "<p>(and without it, all functions would be assumed to either terminate or return in some \"controlled fashion\" (unwinding or ordinary return))</p>",
        "id": 200578987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/200578837\">said</a>:</p>\n<blockquote>\n<p>Q: is this also a problem for pthread exit?</p>\n</blockquote>\n<p>yes</p>",
        "id": 200579002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897072
    },
    {
        "content": "<p>all the same arguments against annotations apply of course</p>",
        "id": 200579094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897098
    },
    {
        "content": "<p>i.e., you could argue it should be an ABI</p>",
        "id": 200579109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897103
    },
    {
        "content": "<p>though it feels <em>awfully</em> niche to me</p>",
        "id": 200579130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897111
    },
    {
        "content": "<p>still, you could imagine wanting to call a function by pointer etc etc</p>",
        "id": 200579163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/200579094\">said</a>:</p>\n<blockquote>\n<p>all the same arguments against annotations apply of course</p>\n</blockquote>\n<p>I feel like I want to think this through, actually</p>",
        "id": 200579230,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897154
    },
    {
        "content": "<p>of the two, longjmp is probably a lot less niche than pthread_exit</p>",
        "id": 200579241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897161
    },
    {
        "content": "<p>right, but you mentioned <code>libc</code> yesterday, which IIRC is only a problem b/c of <code>pthread_exit</code>, not <code>longjmp</code></p>",
        "id": 200579281,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897181
    },
    {
        "content": "<p>correct</p>",
        "id": 200579295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/200578987\">said</a>:</p>\n<blockquote>\n<p>(and without it, all functions would be assumed to either terminate or return in some \"controlled fashion\" (unwinding or ordinary return))</p>\n</blockquote>\n<p><code>abort</code> should also be legal, correct? B/c even though it doesn't do cleanup, it shouldn't need to</p>",
        "id": 200579436,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897231
    },
    {
        "content": "<p>(though, thinking more on it, I have to wonder if having some variant of <code>read</code> (<code>read_exit</code> or something) that is declared with a distinct UB (but links to the same C function) might be reasonable)</p>",
        "id": 200579440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897234
    },
    {
        "content": "<p>yes, terminate = abort</p>",
        "id": 200579471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897246
    },
    {
        "content": "<p>I don't know how we say that \"more formally\" somehow</p>",
        "id": 200579489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897251
    },
    {
        "content": "<p>well I guess just like that basically</p>",
        "id": 200579524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897268
    },
    {
        "content": "<p>so long as the process continues to exist...</p>",
        "id": 200579537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897276
    },
    {
        "content": "<p>anyway, leaving aside the \"formalities\" of it...</p>",
        "id": 200579563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897284
    },
    {
        "content": "<p>we hvae plenty of mechanisms that abort, so obviously that has to be ok</p>",
        "id": 200579595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897295
    },
    {
        "content": "<p>Basically, destructors are only as \"guaranteed\" as they ever have been in any language <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 200579629,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897310
    },
    {
        "content": "<p>right =) it's most interesting for <code>&amp;mut</code> in shared memory</p>",
        "id": 200579714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897331
    },
    {
        "content": "<p>(I think the answer there is that this concept is incorrect)</p>",
        "id": 200579746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897342
    },
    {
        "content": "<p>sorry, which concept?</p>",
        "id": 200579770,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897352
    },
    {
        "content": "<p>giving an <code>&amp;mut</code> to shared memory</p>",
        "id": 200579791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897361
    },
    {
        "content": "<p>I have to kind of pin down the right way to express it, but there's some bit of the <code>&amp;mut</code> exclusiveness guarantee that you can't uphold</p>",
        "id": 200579843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897388
    },
    {
        "content": "<p>(tied in with this notion of ending a process)</p>",
        "id": 200579890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897409
    },
    {
        "content": "<p>anyway I do feel like this can be left unresolved, though I'm not sure just what that implies for the RFC</p>",
        "id": 200579932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897438
    },
    {
        "content": "<p>and we will want to go on and resolve it :(</p>",
        "id": 200580012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897454
    },
    {
        "content": "<p>I don't actually think the argument for function-pointer annotations applies here, actually. An annotation indicating \"this function might not return normally\" doesn't affect the _call site_, does it?</p>",
        "id": 200580071,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897484
    },
    {
        "content": "<p>it does</p>",
        "id": 200580092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897494
    },
    {
        "content": "<p>as the compiler can't optimize around it in the same way</p>",
        "id": 200580105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897500
    },
    {
        "content": "<p>well, a call to a function that might not return normally due to <code>longjmp</code> must only occur in another such function, unless it's the function with the corresponding <code>setjmp</code></p>",
        "id": 200580447,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897647
    },
    {
        "content": "<p>so my impulse is to say \"it's UB to <code>longjmp</code> over frames that aren't annotated as may-not-return\"</p>",
        "id": 200580577,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897697
    },
    {
        "content": "<p>(for <code>pthread_exit</code>, the entire thread must be comprised of such frames)</p>",
        "id": 200580632,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897720
    },
    {
        "content": "<p>So the optimizations can only occur in the functions that are annotated that way.</p>",
        "id": 200580711,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897758
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 200580727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897764
    },
    {
        "content": "<p>ok, so, that's true</p>",
        "id": 200580735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897767
    },
    {
        "content": "<p>so you're basically saying that if we tagged <code>#[longjmp]</code> (or whatever) on each fn that might be unwound</p>",
        "id": 200580786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897790
    },
    {
        "content": "<p>this also fits with the compiler doing checking</p>",
        "id": 200580796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/200580711\">said</a>:</p>\n<blockquote>\n<p>So the optimizations can only occur in the functions that are annotated that way.</p>\n</blockquote>\n<p>Er, strike that, reverse it</p>",
        "id": 200580858,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897804
    },
    {
        "content": "<p>yes, I think so</p>",
        "id": 200580875,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897815
    },
    {
        "content": "<p>it's not as precise, which is why I didn't like it at first, but</p>",
        "id": 200580888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897817
    },
    {
        "content": "<p>it's also probably just fine in practice</p>",
        "id": 200580901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897823
    },
    {
        "content": "<p>and it is the programmer's responsibility to ensure that use of function pointers doesn't somehow let a non-longjmpable frame get put on the stack...</p>",
        "id": 200580947,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897846
    },
    {
        "content": "<p>i.e., the compiler would basically give you a warning if any function call occurs that has a dtor in scope</p>",
        "id": 200580948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897846
    },
    {
        "content": "<p>that seems ok</p>",
        "id": 200580950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897848
    },
    {
        "content": "<p>and it would have to avoid optimizing because it doesn't know if that fn may longjmp</p>",
        "id": 200580971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897858
    },
    {
        "content": "<p>I forget how setjmp works</p>",
        "id": 200581003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897872
    },
    {
        "content": "<p>^ ah, but not being able to give that warning is why the function pointer question is hairy</p>",
        "id": 200581007,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591897873
    },
    {
        "content": "<p>you can give the warning</p>",
        "id": 200581024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897880
    },
    {
        "content": "<p>it's just a <em>warning</em></p>",
        "id": 200581029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897883
    },
    {
        "content": "<p>or maybe I misunderstood you</p>",
        "id": 200581058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897897
    },
    {
        "content": "<p>there are a few sources of imprecision -- one of them is that you call a fn that will never longjmp</p>",
        "id": 200581082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897908
    },
    {
        "content": "<p>i.e., some helpers or something</p>",
        "id": 200581088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897913
    },
    {
        "content": "<p>that seems ok to me, you get a false warning, but you can allow it</p>",
        "id": 200581161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897935
    },
    {
        "content": "<p>but I still have a bit of trouble understanding how the setjmp part is meant to work -- although in most use cases, the setjmp is in C code anyway</p>",
        "id": 200581199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897949
    },
    {
        "content": "<p>it seems like this frame is a bit special, it's the only one that can call a <code>#[longjmp]</code> function without itself getting a warning</p>",
        "id": 200581288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591897990
    },
    {
        "content": "<p>I think the <code>setjmp</code> itself has to be in C, b/c <code>setjmp</code>/<code>longjmp</code> are part of the C std lib</p>",
        "id": 200581337,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898013
    },
    {
        "content": "<p>and they are platform-defined</p>",
        "id": 200581348,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898019
    },
    {
        "content": "<p>that is, sorry, I left that implicit, but it's presumably also a lint to call a <code>#[longjmp]</code> fn unless your fn is <code>#[longjmp]</code> -- this one is also not a guarantee, because of calls by pointer, which is your point I suppose?</p>",
        "id": 200581350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898019
    },
    {
        "content": "<p>ok, that's a convenient answer :)</p>",
        "id": 200581385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898032
    },
    {
        "content": "<p>Which warning were you describing above? Calling a non-<code>#[longjmp]</code> function from a <code>#[longjmp]</code>?</p>",
        "id": 200581499,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898072
    },
    {
        "content": "<p>I think that's actually always okay!</p>",
        "id": 200581512,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/200581288\">said</a>:</p>\n<blockquote>\n<p>it seems like this frame is a bit special, it's the only one that can call a <code>#[longjmp]</code> function without itself getting a warning</p>\n</blockquote>\n<p>wait -- so -- this doesn't work great for pthread-exit, unless we do the thing I mentioned of having two <code>read</code> calls (one that is compatible with pthread-exit)</p>",
        "id": 200581518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898080
    },
    {
        "content": "<p>It's the reverse that's problematic</p>",
        "id": 200581526,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898083
    },
    {
        "content": "<p>I think there are two warnings</p>",
        "id": 200581545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898092
    },
    {
        "content": "<ul>\n<li>in a <code>#[longjmp]</code> function, making a fn call with a (potential) pending destructor</li>\n<li>in a non-<code>#[longjmp]</code> function, calling a <code>#[longjmp]</code> function</li>\n</ul>",
        "id": 200581591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898112
    },
    {
        "content": "<p>neither is precise, the best we can do are lints</p>",
        "id": 200581601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898116
    },
    {
        "content": "<p>but I suspect in practice we catch everything</p>",
        "id": 200581615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898125
    },
    {
        "content": "<p>btw let's call the annotation <code>#[POF]</code> for now since we've finally got some terminology for this!</p>",
        "id": 200581734,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898169
    },
    {
        "content": "<p>I thought about that. I don't love it because I can't see a reason that invoking a POF fn should warn</p>",
        "id": 200581775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898193
    },
    {
        "content": "<p>i.e., that covers the first half..</p>",
        "id": 200581793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898200
    },
    {
        "content": "<p>The second warning would of course not be possible in the general function-pointer case</p>",
        "id": 200581796,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898203
    },
    {
        "content": "<p>right</p>",
        "id": 200581819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898210
    },
    {
        "content": "<p>that's why I said it's imprecise</p>",
        "id": 200581825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898214
    },
    {
        "content": "<p>the first has false warnings, the second has missed warnings</p>",
        "id": 200581843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898221
    },
    {
        "content": "<p>for the first, it would warn on calls to function pointers and to other <code>#[longjmp]</code> functions, but not to normal functions, correct?</p>",
        "id": 200581988,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898282
    },
    {
        "content": "<p>I suppose</p>",
        "id": 200582151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898346
    },
    {
        "content": "<p>Yeah, I guess that's true</p>",
        "id": 200582175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898356
    },
    {
        "content": "<p>I was thinking it should warn on anything but I guess that's over-approximated</p>",
        "id": 200582198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898364
    },
    {
        "content": "<p>And since they're only warnings, they can be made more precise in the future once we have the ability to add annotations to function pointers</p>",
        "id": 200582403,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898452
    },
    {
        "content": "<p>if/when</p>",
        "id": 200582520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898503
    },
    {
        "content": "<p>yeah, seems reasonable</p>",
        "id": 200582525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898507
    },
    {
        "content": "<p>I geuss we could try to just add this into the RFC</p>",
        "id": 200582543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898518
    },
    {
        "content": "<p>but it also feels like a \"separate thing\" in its own way</p>",
        "id": 200582596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898526
    },
    {
        "content": "<p>(but this feels pretty good to me, all things considered)</p>",
        "id": 200582831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898642
    },
    {
        "content": "<p>I think we can revise the RFC to say that longjmp over POFs is TBD</p>",
        "id": 200582848,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898642
    },
    {
        "content": "<p>and otherwise definitely UB</p>",
        "id": 200582873,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898649
    },
    {
        "content": "<p>yeah, this is I think the right thing to do</p>",
        "id": 200582882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898652
    },
    {
        "content": "<p>I actually really like the idea (if not the name) of the <code>#[longjmp]</code> annotation. It enables us to give a much more precise answer to the question \"when do destructors not execute\", I think.</p>",
        "id": 200583059,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898736
    },
    {
        "content": "<p>Yes. And I think it'd be really great to be able to assist people in constructing POF functions</p>",
        "id": 200583096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591898753
    },
    {
        "content": "<p>Agreed</p>",
        "id": 200583480,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898895
    },
    {
        "content": "<p>So, we now have more action items!</p>",
        "id": 200583582,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591898949
    },
    {
        "content": "<p>returning to the other one, the quesiton is, should we try to start a thread on the LLVM internals?</p>",
        "id": 200583689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899000
    },
    {
        "content": "<p>(I don't know that it's a <em>blocker</em>, that could happen concurrently with the RFC)</p>",
        "id": 200583774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899020
    },
    {
        "content": "<ul>\n<li>Possibly-final RFC draft revision: specify that longjmp/pthread_exit over POFs is not-yet-defined (UB-but-TBD)</li>\n<li>Start drafting new RFC: function annotation for \"cancelable\" functions</li>\n</ul>",
        "id": 200583829,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899041
    },
    {
        "content": "<p>So, that resolves the third bullet-item from our original list, about optimizations that could be broken by <code>longjmp</code></p>",
        "id": 200584437,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899311
    },
    {
        "content": "<p>Want to discuss this one?</p>\n<ul>\n<li>Can/should we distinguish the idea of \"not executing a dtor\", which we've been calling UB, but perhaps we should use another term -- i.e., you're not allocated to longjmp over frames you don't control because that's a limit we put on what Rust code can do, but it's not in and of itself UB (it could cause UB though, and if it did, it would be your fault)</li>\n</ul>",
        "id": 200584454,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899320
    },
    {
        "content": "<p>this is somewhat entangled with the other point</p>",
        "id": 200584725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899468
    },
    {
        "content": "<p>that is, the only way I know of to \"not execute a dtor\" is basically to longjmp</p>",
        "id": 200584783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899483
    },
    {
        "content": "<p>or otherwise deallocate frames</p>",
        "id": 200584808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899492
    },
    {
        "content": "<p>I wrote up the idea of a longjmp fn here btw: <a href=\"https://github.com/rust-lang/project-ffi-unwind/issues/30\">https://github.com/rust-lang/project-ffi-unwind/issues/30</a></p>",
        "id": 200585340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899733
    },
    {
        "content": "<p>Right, so presumably, along with introducing <code>#[longjmp]</code>, we'd formally specify that it is UB to skip destructors in non-<code>#[longjmp]</code> frames</p>",
        "id": 200585355,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899739
    },
    {
        "content": "<p>(btw my current idea for the actual name of the annotation is <code>#[cancelable]</code>)</p>",
        "id": 200585413,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899774
    },
    {
        "content": "<p>I think btw I would be happy to change the \"it is UB to deallocate a frame without running a dtor\" to a more naunced explanation that says how <em>deallocating frames without running destructors can cause UB and is not something you can do unless you control all the frames</em></p>",
        "id": 200585435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899784
    },
    {
        "content": "<p>But I still think we need a pithy term for that kind of behavior</p>",
        "id": 200585477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899801
    },
    {
        "content": "<p>which is basically UB</p>",
        "id": 200585487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899807
    },
    {
        "content": "<p>I guess it is reminiscent of the terms that Ralf introduced of \"language invariant\" vs \"library invariant\"</p>",
        "id": 200585521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899822
    },
    {
        "content": "<p>fair enough, but I think we can also flatly prohibit skipping destructors in frames that aren't annotated \"cancelable\"</p>",
        "id": 200585537,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591899831
    },
    {
        "content": "<p>er, validity</p>",
        "id": 200585548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899835
    },
    {
        "content": "<p>yes, I think we can do that as well</p>",
        "id": 200585588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899842
    },
    {
        "content": "<p>(which is what I meant by they are entangled; presumably if we do that, it's enough)</p>",
        "id": 200585652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899867
    },
    {
        "content": "<p>Okay, it sounds like we've got a plan. Anything else?</p>",
        "id": 200587410,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1591900638
    },
    {
        "content": "<p>(Nope) :)</p>",
        "id": 200590276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591902111
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Biweekly check in!</p>",
        "id": 204116295,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594920778
    },
    {
        "content": "<p>We have one open suggestion on the RFC, which is to use <code>\"C-unwind\"</code> instead of <code>\"C unwind\"</code>. <a href=\"https://github.com/rust-lang/rfcs/pull/2945#discussion_r454644725\">https://github.com/rust-lang/rfcs/pull/2945#discussion_r454644725</a></p>",
        "id": 204117032,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594921117
    },
    {
        "content": "<p>We also have three outstanding lang team members who haven't approved the RFC yet; I'm not sure if they should be pinged at this point.</p>",
        "id": 204117334,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594921272
    },
    {
        "content": "<p>I don't really have an opinion about \"C-unwind\" vs \"C unwind\" vs whatever else</p>",
        "id": 204125430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594925095
    },
    {
        "content": "<p>I think the argument that people <em>may think</em> they can reorder the words in the string is...true but seems like a stretch</p>",
        "id": 204125540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594925142
    },
    {
        "content": "<p>early on there was a proposal <code>C+unwind</code> or something but I guess that was scrapped because it resembled C++?</p>",
        "id": 204125634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594925167
    },
    {
        "content": "<p>also, sorry I missed today's meeting at the proper time, got double schedule :/</p>",
        "id": 204125663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594925181
    },
    {
        "content": "<p>No problem. Yes, I think C++ was the main reason we opted for a space instead of punctuation.</p>",
        "id": 204136441,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1594930295
    },
    {
        "content": "<p>catching up late, apologies; been in meetings for four hours <span aria-label=\"disappointed relieved\" class=\"emoji emoji-1f625\" role=\"img\" title=\"disappointed relieved\">:disappointed_relieved:</span> my main check-in item is to point out this new topic about Fastly providing implementation effort: <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/coordinating.20on.20implementation\">https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/coordinating.20on.20implementation</a></p>",
        "id": 204147385,
        "sender_full_name": "acfoltzer",
        "timestamp": 1594935951
    },
    {
        "content": "<p>I am still neck-deep in other parts of the product, but fortunately the team has grown substantially since we began this unwinding effort, so we have the bandwidth to help out</p>",
        "id": 204147521,
        "sender_full_name": "acfoltzer",
        "timestamp": 1594936008
    },
    {
        "content": "<p>hey folks, I don't have much to add this meeting except a hearty congratulations for the RFC soon being merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 205508189,
        "sender_full_name": "acfoltzer",
        "timestamp": 1596130605
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> </p>\n<p>Weekly meeting! (A few minutes late; just got the calendar notification for some reason.)</p>",
        "id": 206845634,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340213
    },
    {
        "content": "<p>I'll keep it brief again. I know there's a lot going on, and I don't know how much that will impact us. Also, Niko requested that we take something of a break after the RFC merged, so I don't want to do any actual spec-work today.</p>",
        "id": 206845816,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340301
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I don't have much to report this time around. I believe <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> has been heads down in some internal stuff as well. I guess my main contribution is <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> to Niko and the other folks impacted by this week's news</p>",
        "id": 206845824,
        "sender_full_name": "acfoltzer",
        "timestamp": 1597340305
    },
    {
        "content": "<p>Thanks for calling that out. <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span> from me as well.</p>",
        "id": 206845920,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340376
    },
    {
        "content": "<p>Looks like there are two <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> Zulip members? I'm adding  <span class=\"user-mention\" data-user-id=\"257364\">@Katelyn Martin</span> </p>\n<p>I will add both to the FFI group for now, since I am assuming they both belong to the same real-life person.</p>",
        "id": 206846491,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340662
    },
    {
        "content": "<p>(Katelyn, for context: we have a biweekly meeting here in Zulip; I believe Niko can add you to the calendar event if you wish)</p>",
        "id": 206846639,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340736
    },
    {
        "content": "<p>I think that's all I wanted to do/say for today, other than to reiterate that our next \"specification\" effort should be around longjmp/thread-canceling. I think this can happen in parallel with Katelyn's implementation work.</p>",
        "id": 206846896,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1597340845
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 207174451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597686302
    },
    {
        "content": "<p>as y'all probably surmised I was a bit \"under the weather\" last week</p>",
        "id": 207174503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597686321
    },
    {
        "content": "<p>this coming Thursday is RustConf</p>",
        "id": 207174520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597686326
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hello! I've been a bit occupied with things, sorry about that. I would love to be added to the calendar invite! I'll also echo the <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> regarding recent news.</p>",
        "id": 207276572,
        "sender_full_name": "katelyn martin",
        "timestamp": 1597765644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> I can add you to the meeting invite</p>",
        "id": 207460007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597870200
    },
    {
        "content": "<p>but if you want to arrange a separate time to dig in a bit, feel free to privmsg me</p>",
        "id": 207460097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597870236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Invitation received, thank you! I also appreciate the invitation to dig in further as well</p>",
        "id": 207460477,
        "sender_full_name": "katelyn martin",
        "timestamp": 1597870464
    },
    {
        "content": "<p>Hey y'all, we have a meeting now =) I've been quite distracted, but is anyone around?</p>",
        "id": 208249665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549500
    },
    {
        "content": "<p>In particular, <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span>, if you wanted to talk about impl stuff</p>",
        "id": 208249684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549514
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi everybody. I started working on implementing the RFC this week.</p>",
        "id": 208249694,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598549520
    },
    {
        "content": "<p>Great news</p>",
        "id": 208249767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549540
    },
    {
        "content": "<p>Did you wind up with any questions?</p>",
        "id": 208249830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549568
    },
    {
        "content": "<p>I am 100% behind on github notifications, so if you left comments there I for sure didn't see them</p>",
        "id": 208249849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549579
    },
    {
        "content": "<p>Hello! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Oops, just posted over in the <code>weekly meeting</code> topic.</p>\n<p>I started working on the RFC this week. At this point I've been looking around through the code you linked in the tracking issue. Thank you once again, these were all excellent leads!</p>",
        "id": 208249917,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598549616
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Bi-weekly check-in! Sorry I'm a few minutes late.</p>",
        "id": 208249969,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598549642
    },
    {
        "content": "<p>lol, no worries, I actually think this group is just using the \"weekly meeting\" topic</p>",
        "id": 208250018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549655
    },
    {
        "content": "<p>vs separate topics per meeting</p>",
        "id": 208250022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549658
    },
    {
        "content": "<p>so it's really my bad</p>",
        "id": 208250033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549661
    },
    {
        "content": "<p>I'll rename :)</p>",
        "id": 208250051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549665
    },
    {
        "content": "<p>Ah! I'll redirect over there <span aria-label=\"fish\" class=\"emoji emoji-1f41f\" role=\"img\" title=\"fish\">:fish:</span> :)</p>",
        "id": 208250071,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598549676
    },
    {
        "content": "<p>Anyway :) as I was saying, my main thought at the moment was whether I could help in any way with impl effort, but <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> not sure if you had other things you wanted to talk about?</p>",
        "id": 208250283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598549776
    },
    {
        "content": "<p>I think the implementation is the most important thing right now, but I do want to get a read on who's feeling ready to start talking more about stack-cancelation.</p>",
        "id": 208250397,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598549840
    },
    {
        "content": "<p>I.e. <code>longjmp</code>/<code>pthread_exit</code></p>",
        "id": 208250422,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598549854
    },
    {
        "content": "<p>I don't think I'm far enough along for this question to be urgent yet, but you mentioned guiding the <code>nounwind</code> attribute on callsites (see: <a href=\"https://github.com/rust-lang/rust/blob/cfdf9d335501cc0a53ae69c940095cca7d4be0f8/src/librustc_codegen_llvm/abi.rs#L399-L402\">https://github.com/rust-lang/rust/blob/cfdf9d335501cc0a53ae69c940095cca7d4be0f8/src/librustc_codegen_llvm/abi.rs#L399-L402</a>)</p>\n<p>I'm _definitely_ still getting a lay of the land (and trying to get my tools to agree with x.py <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) but that's the part where I feel the most unknown.</p>",
        "id": 208250548,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598549892
    },
    {
        "content": "<p>Talking about impl stuff, did we ever decide what to do about <a href=\"https://github.com/rust-lang/rust/issues/70212\">#70212</a>?</p>",
        "id": 208250598,
        "sender_full_name": "Amanieu",
        "timestamp": 1598549914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327458\">katelyn martin</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/208250548\">said</a>:</p>\n<blockquote>\n<p>I don't think I'm far enough along for this question to be urgent yet, but you mentioned guiding the <code>nounwind</code> attribute on callsites (see: <a href=\"https://github.com/rust-lang/rust/blob/cfdf9d335501cc0a53ae69c940095cca7d4be0f8/src/librustc_codegen_llvm/abi.rs#L399-L402\">https://github.com/rust-lang/rust/blob/cfdf9d335501cc0a53ae69c940095cca7d4be0f8/src/librustc_codegen_llvm/abi.rs#L399-L402</a>)</p>\n<p>I'm _definitely_ still getting a lay of the land (and trying to get my tools to agree with x.py <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) but that's the part where I feel the most unknown.</p>\n</blockquote>\n<p>ok -- so the <code>nounwind</code> attribute is used by LLVM to indicate functions that cannot unwind. We would expect to apply it to Rust functions with the \"C\" ABI (e.g., </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and probably also external functions with C ABI.</p>",
        "id": 208250821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I thought we decided to abort for now</p>",
        "id": 208250855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550052
    },
    {
        "content": "<p>The main thing the RFC guarantees is that the implementation must <em>not</em> place <code>nounwind</code> on a <code>\"C-unwind\"</code> boundary unless there's some way to guarantee that the function actually won't unwind. I think that <code>panic=abort</code> might be sufficient for that guarantee on function definitions written in Rust, but that's not the case for <code>extern</code> declarations.</p>",
        "id": 208251093,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598550175
    },
    {
        "content": "<p>I don't remember, <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span>, did we ever write down like \"what attributes we expect on which functions and when\"</p>",
        "id": 208251245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550250
    },
    {
        "content": "<p>I was thinking that this would be a good exercise at some point</p>",
        "id": 208251258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you mean this table in the RFC by any chance? <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#abi-boundaries-and-unforced-unwinding\">https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#abi-boundaries-and-unforced-unwinding</a></p>",
        "id": 208251355,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598550306
    },
    {
        "content": "<p>well, that is pretty close to what I meant</p>",
        "id": 208251432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550349
    },
    {
        "content": "<p>and maybe it just suffices :)</p>",
        "id": 208251446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550356
    },
    {
        "content": "<p>I was thinking that from an impl POV it'd be good to have test cases for each case basically and a kind of checklist</p>",
        "id": 208251516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550372
    },
    {
        "content": "<p>(and maybe actually creating such tests is a good first step towards implementing)</p>",
        "id": 208251552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550392
    },
    {
        "content": "<p>I agree. The table implies restrictions on when <code>nounwind</code> is appropriate, but I don't think it's quite comprehensive from an implementation standpoint.</p>",
        "id": 208251690,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598550472
    },
    {
        "content": "<p>I think the main difference between that table and what I was imagining is that it describes the <em>behavior</em> we want, and I was thinking more from an impl focused pov -- i.e., what LLVM attributes should be present, etc</p>",
        "id": 208251755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550488
    },
    {
        "content": "<p>let me just go review what we wrote in the issue</p>",
        "id": 208251796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550512
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74990\">https://github.com/rust-lang/rust/issues/74990</a> here's the tracking issue :)</p>",
        "id": 208251813,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598550522
    },
    {
        "content": "<p>Additionally, tests would be valuable so that in the future, if there are improvements to the optimization logic for guaranteeing that an unwind is actually impossible (which makes <code>nounwind</code> appropriate even for <code>\"C-unwind\"</code> functions), the exact behavior of those optimizations can be added to the test suite.</p>",
        "id": 208251830,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598550528
    },
    {
        "content": "<p>I guess that the \"implementation notes\" was my attempt at this</p>",
        "id": 208251871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550550
    },
    {
        "content": "<p>there is <a href=\"https://rustc-dev-guide.rust-lang.org/tests/intro.html\">some documentation on writing tests</a> in the rustc-dev-guide</p>",
        "id": 208251959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550599
    },
    {
        "content": "<p>the idea would be to make <code>ui</code> tests here</p>",
        "id": 208252035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550614
    },
    {
        "content": "<p>and to use some of the <code>//</code> comments to force command-line options like <code>-Cpanic=abort</code> etc</p>",
        "id": 208252055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550630
    },
    {
        "content": "<p>(see the <a href=\"https://rustc-dev-guide.rust-lang.org/tests/adding.html#header-commands-configuring-rustc\">header comments</a> section)</p>",
        "id": 208252107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550661
    },
    {
        "content": "<p>handy, thank you for that!</p>",
        "id": 208252202,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598550710
    },
    {
        "content": "<p>OK, well, if you have any other questions as you go definitely just leave them</p>",
        "id": 208252570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550871
    },
    {
        "content": "<p>and feel free to ping if I don't answer ;)</p>",
        "id": 208252588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598550884
    },
    {
        "content": "<p>definitely! thank you for the guidance, it's much appreciated. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 208252659,
        "sender_full_name": "katelyn martin",
        "timestamp": 1598550922
    },
    {
        "content": "<p>Re: <code>nounwind</code> on callsites: it looks like we don't yet apply <code>nounwind</code> to any callsites; if this is the case, then any change to callsites is purely an optimization.</p>",
        "id": 208252828,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598551010
    },
    {
        "content": "<p>So I think it's not necessary for the initial implementation.</p>",
        "id": 208252864,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1598551038
    },
    {
        "content": "<p>yeah that's true</p>",
        "id": 208252877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598551047
    },
    {
        "content": "<p>Hello again everyone!</p>\n<p>I have been making some more progress on implementing RFC 2945. I have opened a<br>\ndraft PR containing my work so far here: <a href=\"https://github.com/rust-lang/rust/pull/76570\">https://github.com/rust-lang/rust/pull/76570</a></p>\n<p>At this point, I have started working on the changes to codegen. I don't have<br>\nthese changes pushed to that branch quite yet, since that work is still being<br>\ndrafted on my end. I'm currently working on adding more tests to the<br>\n<code>src/tests/codegen</code> suite. To do that, I've been referring to the LLVM<br>\ndocumentation on <code>FileCheck</code> here: <a href=\"https://llvm.org/docs/CommandGuide/FileCheck.html\">https://llvm.org/docs/CommandGuide/FileCheck.html</a></p>\n<p>I've been a bit caught up with some work tasks, so between that and the recent<br>\nU.S. holiday weekend, I don't have too much else to include in my update today.</p>\n<p>I'm making progress though, and don't have further questions at this<br>\ntime. Thanks for the wonderful mentorship and support so far, I appreciate you<br>\nall!</p>",
        "id": 209680963,
        "sender_full_name": "katelyn martin",
        "timestamp": 1599759000
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Thanks Katelyn!</p>\n<p>Does anyone else have anything specific to bring up?</p>",
        "id": 209681781,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1599759379
    },
    {
        "content": "<p>I just fixed an FFI unwinding UB bug in Lucet <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> it was my own dang fault though, rather than something that needs the new ABI <a href=\"https://github.com/bytecodealliance/lucet/pull/584\">https://github.com/bytecodealliance/lucet/pull/584</a></p>",
        "id": 209682395,
        "sender_full_name": "acfoltzer",
        "timestamp": 1599759656
    },
    {
        "content": "<p>I'd like to have a rough plan for moving forward on the POF/cancellation discussion, but I don't really have a sense of how to do that. I think we need to know:</p>\n<ul>\n<li>Can we kick the group back into a more \"active\" mode soon? (It's now been about a month since Niko requested we take a break, but I expect things are still a little chaotic.)</li>\n<li>Do we want to send out another call-to-action in the form of a blog post or other announcement to determine if there are more people who would be interested in hashing out the specifics of <code>longjmp</code> and its ilk? I suspect that this may not be precisely the same group of people who were interested in \"proper\" unwinding.</li>\n<li>What is the first step?</li>\n</ul>\n<p>Over the next two weeks, I think I will start trying to update the project repository to reflect the shift in focus toward POF/cancellation.</p>",
        "id": 209685072,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1599760833
    },
    {
        "content": "<p>Sorry for missing meeting y'all, I was taking a long weekend and forgot to let y'all know</p>",
        "id": 210033318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600102702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> I'm still fairly busy but not opposed to starting to open that discussion</p>",
        "id": 210033383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600102736
    },
    {
        "content": "<p>I think writing a blog post as a way to frame the discussion is a good idea regardless, as editing it may help us to achieve more internal alignment amongst ourselves (and to communicate with lang team)</p>",
        "id": 210033455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600102770
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey folks! I don't have any updates for this weekly meeting. My apologies, work &amp; the general state of the planet have been occupying more than their fair share of brain cycles. <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span> <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span> I'm hoping to set some time aside next week to make further progress, now that I have set up some proper codegen tests for the <code>c_unwind</code> feature gate.</p>\n<p>I'll cede the floor for discussion about the other plans, regarding POF/cancellation &amp; a blog post, that were described above in the previous meeting.</p>",
        "id": 211164052,
        "sender_full_name": "katelyn martin",
        "timestamp": 1600968682
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span></p>",
        "id": 211164270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600968775
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hi all! Apologies, I haven't done anything for the group since the last meeting. I do plan to draft a blog post before our next meeting, though.</p>",
        "id": 211164274,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1600968777
    },
    {
        "content": "<p>I was just thinking I could take a look at your PR</p>",
        "id": 211164296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600968790
    },
    {
        "content": "<p>I've not done anything related to this :)</p>",
        "id": 211164329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600968804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> No worries re: minimal update. You are clearly not alone!</p>",
        "id": 211164362,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1600968825
    },
    {
        "content": "<p>It's open as a draft here: <a href=\"https://github.com/rust-lang/rust/pull/76570\">https://github.com/rust-lang/rust/pull/76570</a></p>\n<p>Right now I've just set up the scaffolding for it, following the instructions from the rustc developer guide. Feature flag, and UI tests to make sure that this is properly gated. The <code>should_abort_on_panic</code> changes and so forth haven't been worked out yet.</p>\n<p>The main changes of note there are the adjustments to the <code>Abi</code> enum. I elected to use a boolean payload rather than add more variants, since the RFC allows for more unwinding ABI's to be added in the future.</p>",
        "id": 211164738,
        "sender_full_name": "katelyn martin",
        "timestamp": 1600968986
    },
    {
        "content": "<p>I'll need to rebase it soon, as some conflicts have popped up, but reviews are certainly welcome!</p>",
        "id": 211164829,
        "sender_full_name": "katelyn martin",
        "timestamp": 1600969024
    },
    {
        "content": "<p>I took a brief look at it and, as far as I understood it (I haven't personally done any work in the compiler before), it looked like a good start. I suspect the implementation of the actual change re: the <code>nounwind</code> attribute will go pretty quickly.</p>",
        "id": 211166330,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1600969660
    },
    {
        "content": "<p>Anyway, I don't have anything else to discuss, and I've been thinking that I should start \"officially\" calling these meetings to a close so that any further discussion can be considered async. Thanks, you two!</p>",
        "id": 211166449,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1600969701
    },
    {
        "content": "<p>Howdy! Nothing too much to report. I'm still working to address the PR review that Niko was kind enough to leave. Wonderful points, and I'm excited to keep plugging away at this.</p>",
        "id": 215754742,
        "sender_full_name": "katelyn martin",
        "timestamp": 1604601039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> great!</p>",
        "id": 215755236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604601245
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 215755256,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1604601256
    },
    {
        "content": "<p>I outlined the blog post but did not turn that outline into prose yet.</p>",
        "id": 215755293,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1604601279
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Bi-weekly check-in! I finally have a draft to share: <a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/33/files\">https://github.com/rust-lang/project-ffi-unwind/pull/33/files</a></p>",
        "id": 217311144,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1605810653
    },
    {
        "content": "<p>There are several TODO/TBD items in there</p>",
        "id": 217311206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1605810686
    },
    {
        "content": "<p>oh, nice</p>",
        "id": 217311557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> one of them is specifically a question for you: there's a link to your in-progress PR, and if you don't mind the publicity, I'd like to name you specifically as the person working on it.</p>",
        "id": 217311560,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1605810856
    },
    {
        "content": "<p>Absolutely! I don't mind that at all <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 217311608,
        "sender_full_name": "katelyn martin",
        "timestamp": 1605810886
    },
    {
        "content": "<p>/me reads</p>",
        "id": 217311613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810891
    },
    {
        "content": "<p>seems I opened the branch on the origin repo again... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 217311696,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1605810928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> left some comments!</p>",
        "id": 217318555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605814174
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 217318597,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1605814191
    },
    {
        "content": "<p>I have revised my draft.</p>",
        "id": 218048357,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1606438067
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Bi-weekly check-in! I have updated my draft, and think it might be ready to open as a PR on the Inside Rust blog.</p>",
        "id": 218735257,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1607020264
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-ffi-unwind/pull/33\">https://github.com/rust-lang/project-ffi-unwind/pull/33</a></p>",
        "id": 218735274,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1607020270
    },
    {
        "content": "<p>I'm working on the rest of my PR today! I'm hoping to have it wrapped up by Friday.</p>\n<p>Thank you everybody for your patience, and apologies for letting this one drag on longer than I wanted it to. <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span></p>",
        "id": 218737192,
        "sender_full_name": "katelyn martin",
        "timestamp": 1607021226
    },
    {
        "content": "<p>/me reads</p>",
        "id": 219141549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607376893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I merge my PR and open it as a PR on the Inside Rust blog?</p>",
        "id": 219515483,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1607625626
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I will not be able to make it next Thursday; feel free to sync without me. I will open a PR on the Rust Insiders blog repo whenever Niko thinks it's ready.</p>",
        "id": 219555475,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1607648884
    },
    {
        "content": "<p>I can't really make it until the end of the year, but I think merging your PR is good</p>",
        "id": 219589339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607683848
    },
    {
        "content": "<p>will do</p>",
        "id": 219589342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607683849
    },
    {
        "content": "<p>In exciting news, I've now marked <a href=\"https://github.com/rust-lang/rust/pull/76570\">https://github.com/rust-lang/rust/pull/76570</a> (Implement RFC 2945: \"C-unwind\" ABI) as ready for review! The git history is all tidied up, and I've addressed all of the initial feedback that was kindly provided. Thank you everybody for the guidance, and for the opportunity to implement this. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 219905829,
        "sender_full_name": "katelyn martin",
        "timestamp": 1607982004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> great!</p>",
        "id": 219979519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608039561
    },
    {
        "content": "<p>Greetings! I don't have any news besides the message above, PR 76570 is ready for review. I'll cede my time to the blog repo, or any other topics people might want to talk about. <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 220283569,
        "sender_full_name": "katelyn martin",
        "timestamp": 1608230178
    },
    {
        "content": "<p>Ack!</p>",
        "id": 220285419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608231050
    },
    {
        "content": "<p>I'm pretty slow today anyway</p>",
        "id": 220285444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608231062
    },
    {
        "content": "<p>I have to merge and prepare that blog post, though I may not get to that until next week</p>",
        "id": 220285457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608231069
    },
    {
        "content": "<blockquote>\n<p>I'm pretty slow today anyway</p>\n</blockquote>\n<p>Very understandable! The holidays are quickly approaching <span aria-label=\"snowflake\" class=\"emoji emoji-2744\" role=\"img\" title=\"snowflake\">:snowflake:</span></p>",
        "id": 220285518,
        "sender_full_name": "katelyn martin",
        "timestamp": 1608231111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the blog post is already merged to our repo; do you mean merge &amp; prepare it in the Inside Rust repo? I haven't opened a PR for that yet but I will do so now.</p>",
        "id": 220289223,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1608232910
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/743\">https://github.com/rust-lang/blog.rust-lang.org/pull/743</a></p>",
        "id": 220289813,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1608233165
    },
    {
        "content": "<p>I put an \"XX\" in the date because I don't know when this will be published, so the CI check is failing.</p>",
        "id": 220290687,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1608233554
    },
    {
        "content": "<p>I'm on vacation and completely forgot about the weekly check-in. Happy Gregorian New-Year's Eve!</p>",
        "id": 221308917,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1609440516
    },
    {
        "content": "<p>Howdy! I don't have any pressing updates. I bumped into a spurious CI problem, but in the meantime another merge conflict has come up. I'll address that, and hopefully CI can do its thing this time around. Pardon the delay <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 222760404,
        "sender_full_name": "katelyn martin",
        "timestamp": 1610648789
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I also don't have any updates. Niko, what is the next step for the blog post PR? <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/743\">https://github.com/rust-lang/blog.rust-lang.org/pull/743</a></p>",
        "id": 222761947,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1610649403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> ugh the status is that I was overloaded and completely forgot. i'm adding to my (newly created) todo list :)</p>",
        "id": 222891087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610730867
    },
    {
        "content": "<p>I understand - I saw your tweet declaring notification bankruptcy! Just let me know if/when there's anything I can do to move things forward.</p>",
        "id": 222891673,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1610731085
    },
    {
        "content": "<p>exciting news; <code>rust-lang/rust#76570</code> (_implementing RFC 2945_) has been approved and is now waiting on Bors! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>I am new to the Rust repo, but as I understand it this means it will be rolled up and merged soon? In any case, thanks to everybody for giving the opportunity to do this. It was a lot of fun <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224340348,
        "sender_full_name": "katelyn martin",
        "timestamp": 1611847128
    },
    {
        "content": "<p>Excellent! Thanks for seeing that through!</p>",
        "id": 224345971,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611849239
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Bi-weekly sync! Sounds like we have two major updates:</p>\n<ul>\n<li>Katelyn's <code>\"C-unwind\"</code> PR is very close to merging <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </li>\n<li>the <code>longjmp</code> blog post has been published</li>\n</ul>",
        "id": 224371981,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611858940
    },
    {
        "content": "<p>I am not sure what the next steps are on <code>longjmp</code> following the blog post. I was hoping we'd get a bit of a response from the community regarding whether the annotations sound like a reasonable limitation on <code>longjmp</code>, but I doubt we'll get much of that.</p>",
        "id": 224372929,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1611859349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> sorry -- I am in a bunch of meetings so not very responsive -- I think the next steps are probably to prepare a draft RFC with \"bullet points\" more than prose</p>",
        "id": 224395241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611869363
    },
    {
        "content": "<p>and maybe we can schedule a lang team design meeting to review it</p>",
        "id": 224395252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611869368
    },
    {
        "content": "<p>it seemed to me that we were pretty close to a design</p>",
        "id": 224395257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611869374
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Sorry all, stopped watching the clock for a bit and got distracted.</p>\n<p>The C-unwind implementation PR has some merge conflicts, but is otherwise looking good (1 approval and CI was green at one point).</p>\n<p>I have to admit that the complete lack of response to the blog post makes me wonder how high a priority <code>longjmp</code> actually is.</p>",
        "id": 226040522,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070015
    },
    {
        "content": "<p>Heh</p>",
        "id": 226040553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613070028
    },
    {
        "content": "<p>I was thinking to myself</p>",
        "id": 226040562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613070032
    },
    {
        "content": "<p>how badly do I want to invest time in this discussion :)</p>",
        "id": 226040582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613070041
    },
    {
        "content": "<p>I'm also wondering how bad it would be if we just specified \"<code>longjmp</code> is guaranteed to work over POFs\" and left it at that. This seems like the \"obvious\" way it should work, and effectively how it works today.</p>",
        "id": 226040755,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070114
    },
    {
        "content": "<p>The benefits of adding a new annotation to the language seem fairly niche: the optimzation we'd previously talked about that could be enabled seems...obscure...and I have no sense of how much (if at all) it would actually improve code quality in any specific case.</p>",
        "id": 226041071,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070223
    },
    {
        "content": "<p>Compiler warnings are always nice, but on the other hand, having explicit support for \"cancelable\" frames seems like taking an unfortunate ecosystem wart and making it seem more like a first-class language feature. I really don't want to inadvertently cause people to use <code>longjmp</code> _more_ because there exists an annotation for it.</p>",
        "id": 226041337,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070326
    },
    {
        "content": "<p>E.g. I can imagine someone recommending <code>longjmp</code> instead of <code>panic</code> for performance in some specific use-case and citing the existence of a \"cancelable\" annotation as evidence that this is a good practice.</p>",
        "id": 226042550,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070767
    },
    {
        "content": "<p>And I don't want that!</p>",
        "id": 226042564,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070773
    },
    {
        "content": "<p>Maybe the annotation should be</p>\n<div class=\"codehilite\"><pre><span></span><code>#[watch-out-some-legacy-C-constructs-are-leaking]\n</code></pre></div>",
        "id": 226042732,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613070841
    },
    {
        "content": "<p>I'm tending towards just allowing <code>longjmp</code>.</p>",
        "id": 226045878,
        "sender_full_name": "Amanieu",
        "timestamp": 1613072080
    },
    {
        "content": "<p>It seems to me that any optimizations that <code>#[pof-longjmp]</code> might enable can already be done using escape analysis.</p>",
        "id": 226046199,
        "sender_full_name": "Amanieu",
        "timestamp": 1613072198
    },
    {
        "content": "<p>The concern, really, is that the compiler wouldn't know about <code>longjmp</code>, isn't it?</p>",
        "id": 226047575,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613072836
    },
    {
        "content": "<p>I suppose that if cross-language LTO is used, it would be able to see <code>longjmp</code>s and <code>cancel</code>s...</p>",
        "id": 226047606,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613072857
    },
    {
        "content": "<p>The compiler should assume a longjmp may happen and optimize accordingly.</p>",
        "id": 226051218,
        "sender_full_name": "Amanieu",
        "timestamp": 1613074526
    },
    {
        "content": "<p>LLVM already assumes this for Clang.</p>",
        "id": 226051250,
        "sender_full_name": "Amanieu",
        "timestamp": 1613074543
    },
    {
        "content": "<p>The question is, what <em>specific</em> optimization would be enabled by assuming <code>longjmp</code> doesn't happen?</p>",
        "id": 226051349,
        "sender_full_name": "Amanieu",
        "timestamp": 1613074570
    },
    {
        "content": "<p>With stacked borrows it may be possible to delay updating the value pointed to by references or speculatively update them across function calls. <code>longjmp</code> would make this impossible.</p>",
        "id": 226051674,
        "sender_full_name": "bjorn3",
        "timestamp": 1613074725
    },
    {
        "content": "<p>AFAIK the only thing that it allows is moving things from before the call to after it. This is only possible if the things that are moved are not externally observable (i.e. escape analysis). However if these things are not externally observable then it doesn't matter if they don't happen when longjmp is called.</p>",
        "id": 226051690,
        "sender_full_name": "Amanieu",
        "timestamp": 1613074733
    },
    {
        "content": "<p>By \"externally\" I mean to the caller of the current function.</p>",
        "id": 226051808,
        "sender_full_name": "Amanieu",
        "timestamp": 1613074793
    },
    {
        "content": "<p>Allowing all calls to <code>longjmp</code> would make the code movement of section 4.2 of <a href=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html\">https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html</a> illegal.</p>",
        "id": 226052162,
        "sender_full_name": "bjorn3",
        "timestamp": 1613074966
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I won't be available during our typical sync-up time this Thursday; would 11am-11:30 work?</p>",
        "id": 227516357,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614119508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/226041337\">said</a>:</p>\n<blockquote>\n<p>Compiler warnings are always nice, but on the other hand, having explicit support for \"cancelable\" frames seems like taking an unfortunate ecosystem wart and making it seem more like a first-class language feature. I really don't want to inadvertently cause people to use <code>longjmp</code> _more_ because there exists an annotation for it.</p>\n</blockquote>\n<p>I disagree mildly with this-- I think this is a first-class interop feature, not a wart.</p>",
        "id": 227581280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164513
    },
    {
        "content": "<p>However, I think it would be ok for it to be enabled via something like an allow-by-default lint</p>",
        "id": 227581346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/226052162\">said</a>:</p>\n<blockquote>\n<p>Allowing all calls to <code>longjmp</code> would make the code movement of section 4.2 of <a href=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html\">https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html</a> illegal.</p>\n</blockquote>\n<p>this</p>",
        "id": 227581398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164566
    },
    {
        "content": "<p>let's fork out this escape analysis discussion</p>",
        "id": 227581413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164579
    },
    {
        "content": "<p>I guess we already have <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations\">#project-ffi-unwind &gt; cost of supporting longjmp without annotations</a></p>",
        "id": 227581522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/227516357\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> I won't be available during our typical sync-up time this Thursday; would 11am-11:30 work?</p>\n</blockquote>\n<p>I am not available tomorrow at all :(</p>",
        "id": 227581885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164780
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Howdy!</p>\n<p>The implementation PR got stuck in rollup last time around. I believe I've now fixed the problems that caused that, and addressed the merge conflicts that had popped up. I've pinged Amanieu in that PR for another review pass, so hopefully we'll be able to land this soon. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>I'll send a follow-up message when that does land, but wanted to go ahead and send a message about this before the weekly meeting.</p>",
        "id": 227658405,
        "sender_full_name": "katelyn martin",
        "timestamp": 1614195325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> good to know! I was wondering if it had landed yet</p>",
        "id": 227666905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198705
    },
    {
        "content": "<p>I'll keep my fingers crossed for no more rollup surprises this time around <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 227667039,
        "sender_full_name": "katelyn martin",
        "timestamp": 1614198745
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Since there's been quite a bit more activity here recently, but Niko can't make it tomorrow, could we possibly reschedule for early next week?</p>",
        "id": 227698284,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614212131
    },
    {
        "content": "<p>Howdy! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span aria-label=\"cowboy\" class=\"emoji emoji-1f920\" role=\"img\" title=\"cowboy\">:cowboy:</span> </p>\n<p>No exciting updates here, really. The implementation PR is waiting for rollup, I fixed a silly mistake surrounding <code>// ignore-*</code> directives in some of the unit tests, so we should be in good shape now. Thanks again to <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> for prompt reviews on this work, I really appreciate it.</p>\n<p>If all goes well, that should be landing very soon. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 227814121,
        "sender_full_name": "katelyn martin",
        "timestamp": 1614277875
    },
    {
        "content": "<p>Hey Katelyn! Thanks again for your work on this. I'm very excited to see it land.</p>\n<p>I don't think we have much else to discuss here at the sync-up; I want to see the async discussions around <code>longjmp</code> and <code>pthread_cancel</code> continue for a bit before we make more decisions on how to proceed.</p>",
        "id": 227816103,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614278714
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76570\">https://github.com/rust-lang/rust/pull/76570</a> has been merged! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 229741804,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615409436
    },
    {
        "content": "<p>I've got nothing to report; as mentioned above the implementation PR has landed. That's probably all from me for the time being, but I want to take a moment to thank you all again for providing the opportunity to work on this RFC! It was a lot of fun contributing to <code>rustc</code> for the first time, and you all made that an excellent experience.</p>\n<p>Feel free to ping me if anything else comes up! <span aria-label=\"black heart\" class=\"emoji emoji-1f5a4\" role=\"img\" title=\"black heart\">:black_heart:</span> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 229900854,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615487222
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hi all! I believe we actually do have a few things to discuss today.</p>\n<p>First off, congratulations and thanks again to Katelyn! I was thrilled to see that PR get merged, and I hope you were too.</p>",
        "id": 229901673,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615487520
    },
    {
        "content": "<p>The other things I think we should discuss briefly are:</p>\n<ul>\n<li>next steps for <code>\"C-unwind\"</code> implementation/stabilization</li>\n<li>Other <code>\"C-unwind\"</code> followup</li>\n<li>next steps for \"longjump/cancelation\" discussion</li>\n</ul>",
        "id": 229901835,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615487573
    },
    {
        "content": "<p>Ah! Here's one other little detail: <a href=\"https://github.com/rust-lang/rust/issues/63943\">https://github.com/rust-lang/rust/issues/63943</a> I believe this issue can now be closed, but I'd cede to what others think about that. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229901921,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615487599
    },
    {
        "content": "<p>We definitely need to resolve the issue; but yes, now that <code>\"C-unwind\"</code> exists, it should be unblocked.</p>",
        "id": 229902151,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615487672
    },
    {
        "content": "<p>I don't actually want to be the one to say \"yes, that's done\" because to be honest I do not feel like an expert in that regard and (confession) I never closely reviewed the PR code.</p>",
        "id": 229902443,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615487775
    },
    {
        "content": "<p>With the new  behavior from the <code>\"C-unwind\"</code> PR, it is now the case that panicking out of a <code>\"C\"</code> function always aborts (when it would previously escape the function boundary), correct?</p>",
        "id": 229903213,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615488043
    },
    {
        "content": "<p>If so, I think that resolves the bug as written.</p>",
        "id": 229903315,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615488081
    },
    {
        "content": "<p>If I'm reading it correctly, the test case in the issue description should have a <code>0</code> exit code if <code>\"C\"</code> is changed to <code>\"C-unwind\"</code> and the <code>unreachable_unchecked</code> is removed.</p>",
        "id": 229903533,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615488167
    },
    {
        "content": "<p>The other follow-up issues I wanted to ask about are:</p>\n<ul>\n<li>What are the next steps for stabilization &amp; feature-gate removal?</li>\n<li>Katelyn, do you have any interest in taking this refactoring on? <a href=\"https://github.com/rust-lang/rust/issues/65303#issuecomment-796566196\">https://github.com/rust-lang/rust/issues/65303#issuecomment-796566196</a></li>\n</ul>",
        "id": 229904079,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615488378
    },
    {
        "content": "<blockquote>\n<p>With the new behavior from the \"C-unwind\" PR, it is now the case that panicking out of a \"C\" function always aborts (when it would previously escape the function boundary), correct?</p>\n</blockquote>\n<p>_Almost_, to be slightly pedantic an <code>extern \"C\"</code> with <code>#[unwind(allowed)]</code> attribute would also unwind. That ought to be functionally equivalent to <code>extern \"C-unwind\"</code>. I responded that yes, that can be closed now AIUI.</p>\n<blockquote>\n<p>Katelyn, do you have any interest in taking this refactoring on? <a href=\"https://github.com/rust-lang/rust/issues/65303#issuecomment-796566196\">https://github.com/rust-lang/rust/issues/65303#issuecomment-796566196</a></p>\n</blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=UneS2Uwc6xw\">Just when i thought i was out... they pull me back in!</a> I'd be happy try and take that on! I certainly found that duplicate logic a smidge confusing myself.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"UneS2Uwc6xw\" href=\"https://www.youtube.com/watch?v=UneS2Uwc6xw\"><img src=\"https://i.ytimg.com/vi/UneS2Uwc6xw/default.jpg\"></a></div>",
        "id": 229905569,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615488962
    },
    {
        "content": "<blockquote>\n<p>That ought to be functionally equivalent to <code>extern \"C-unwind\"</code></p>\n</blockquote>\n<p>I think as long as <code>nounwind</code> is not emitted, there's no unsoundness, correct?</p>",
        "id": 229905713,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615489026
    },
    {
        "content": "<p>So yes, I would agree that the bug can be closed. Though that brings up one of the follow-ups I forgot to mention! We do need to deprecate &amp; remove <code>unwind(allowed|denied)</code>.</p>",
        "id": 229905773,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615489058
    },
    {
        "content": "<p>I am wondering if the code-duplication issue can be combined with removing those annotations.</p>",
        "id": 229905990,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615489128
    },
    {
        "content": "<p>Do you think it would be easier to do as a single effort, or separately?</p>",
        "id": 229906048,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615489149
    },
    {
        "content": "<p>Anyway, sorry,  I need to jump to another meeting. Feel free to continue the discussion here async; I'll check back regularly.</p>",
        "id": 229906459,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615489278
    },
    {
        "content": "<blockquote>\n<p>I am wondering if the code-duplication issue can be combined with removing those annotations.<br>\nDo you think it would be easier to do as a single effort, or separately?</p>\n</blockquote>\n<p>My gut says that doing these separately would probably be most sensible, but I haven't tugged on the relevant strings enough to know for sure. We could operate under the assumption that these are separate efforts until proven wrong.</p>",
        "id": 229907244,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615489572
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 229910429,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615490810
    },
    {
        "content": "<blockquote>\n<p>What are the next steps for stabilization &amp; feature-gate removal?</p>\n</blockquote>\n<p>Oh and _this_ part I have very little idea about. I don't have an answer, and will let someone else with more familiarity around stabilization answer that question. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229912665,
        "sender_full_name": "katelyn martin",
        "timestamp": 1615491667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^ do you have guidance on stabilization &amp; feature-gate removal?</p>",
        "id": 229913699,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1615492074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327458\">katelyn martin</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/229912665\">said</a>:</p>\n<blockquote>\n<p>Oh and _this_ part I have very little idea about. I don't have an answer, and will let someone else with more familiarity around stabilization answer that question. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>So, the next steps from a procedural POV is to write-up a <a href=\"https://rustc-dev-guide.rust-lang.org/stabilization_guide.html\">stabilization report</a> -- but we do need to let the feature bake a bit</p>",
        "id": 231140686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239742
    },
    {
        "content": "<p>we don't have a good process for this right now -- like a clear way to \"set a timer\" sort of thing --</p>",
        "id": 231140695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239756
    },
    {
        "content": "<p>I think it'd be really helpful to collect some experience reports from people adopting it</p>",
        "id": 231140698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239764
    },
    {
        "content": "<p>although of course there is always the challenge that adopting it riquires adopting nightly</p>",
        "id": 231140710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239775
    },
    {
        "content": "<p>one thing we might do is write a blog post encouraging adoption and encouraging people to leave comments on the tracking issue -- what do you think about that, <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> or <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> ?</p>",
        "id": 231140717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616239794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I agree with that, so I've included it in a summary I just wrote up of our next steps</p>",
        "id": 231162708,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616264774
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hi all! (Sorry I'm a few minutes late.)</p>",
        "id": 231844044,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616693727
    },
    {
        "content": "<p>I think the main thing for today is making a decision on how to proceed with the Beta branch issue (the current Beta cut includes the changes from the PR, which changes the behavior of <code>\"C\"</code> without providing an opt-out).</p>",
        "id": 231844401,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616693873
    },
    {
        "content": "<p>The options we've discussed are:</p>\n<ul>\n<li>A new PR that would need to be backported into the beta branch: apply the <code>\"C-unwind\"</code> behavior to <code>\"C\"</code> if the <code>\"C-unwind\"</code> feature flag is not used</li>\n<li>Revert the <code>\"C-unwind\"</code> PR in the beta branch</li>\n</ul>",
        "id": 231844627,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616693958
    },
    {
        "content": "<p>Additionally, I think we need to give the release team a heads up on this.</p>",
        "id": 231844645,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616693966
    },
    {
        "content": "<p>Hello! Apologies, I haven't had much time this week to properly focus on FFI-unwind this week. As I understand it, the steps are to first place the change in behavior of the <code>C</code> ABI behind the feature gate, and then work on addressing the soundness guarantees after that's accomplished.</p>",
        "id": 231844751,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616694006
    },
    {
        "content": "<p>Do you mean without the feature gate? The time-sensitive requirement here is to not land a breaking change on Stable.</p>",
        "id": 231844920,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616694077
    },
    {
        "content": "<p>Pardon. Yes, I meant that the change in behavior would not apply without the feature gate.</p>",
        "id": 231845277,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616694215
    },
    {
        "content": "<p>Time-sensitivity is good to know about; can I ask what the general time scale is? Worst case, reverting that PR in the beta branch might be a fine route forward for now.</p>",
        "id": 231845563,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616694325
    },
    {
        "content": "<p>The stable release should be 6 weeks from the beta cut, which I believe was last weekend. I'll double-check the dates though</p>",
        "id": 231845652,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616694358
    },
    {
        "content": "<p>yeah, that's correct</p>",
        "id": 231846810,
        "sender_full_name": "simulacrum",
        "timestamp": 1616694790
    },
    {
        "content": "<p>...or rather, the stable release should be every 6 weeks, and today is a stable release day. I didn't realize the beta was cut earlier than that.</p>",
        "id": 231847638,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616695077
    },
    {
        "content": "<p>So I think we have 6 weeks from today</p>",
        "id": 231847695,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616695088
    },
    {
        "content": "<p>Gotchya. I think I would be able put together a fix for that in &lt; 2 weeks. Accounting for a bit of buffer time for review / rollup, I think we can have that fixed in time. But, if that ends up taking more than... say 4 weeks? I'd be content to play it safe and revert the PR before the next cut</p>",
        "id": 231848671,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616695424
    },
    {
        "content": "<p>Does that feel like a fair set of deadlines to you?</p>",
        "id": 231848766,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616695449
    },
    {
        "content": "<p>Ideally we want the PR merged into beta branch roughly 2 weeks out from the thursday release day, so that sounds like a reasonable timeline</p>",
        "id": 231849023,
        "sender_full_name": "simulacrum",
        "timestamp": 1616695545
    },
    {
        "content": "<p>I asked for a deadline in the release team channel, so I'll leave it up to them; but yes, I would expect them to agree that that's a reasonable timeline.</p>",
        "id": 231849158,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1616695582
    },
    {
        "content": "<p>Awesome thank you all, and sorry about the trouble! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 231849858,
        "sender_full_name": "katelyn martin",
        "timestamp": 1616695839
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'll be a bit async for this weekly meeting, I have some errands to run today</p>",
        "id": 233688339,
        "sender_full_name": "katelyn martin",
        "timestamp": 1617900941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> were you able to work on a patch for the <code>\"C\"</code> behavior?</p>",
        "id": 233688545,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1617900997
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>!</p>\n<p>Addressing the points you've made <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/.60.22C-unwind.22.60.20next.20steps/near/231162649\">here</a> in the \"_next steps_\" channel is going to be my main focus for the next few days. I spent some time looking into the abort-on-unwind wrapper; that part in particular I'm not entirely sure about yet. I think I have found the right places to look around, but in general I'm a bit new to these corners of rustc.</p>\n<p>As for the patch, I'm going to put that together today. That part in particular ought not to be as involved as the rest of the work, and given the urgency, I don't want to wait any longer on that.</p>\n<p>My sincere apologies for making you wait over the weekend! <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span></p>",
        "id": 234196580,
        "sender_full_name": "katelyn martin",
        "timestamp": 1618247823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327458\">katelyn martin</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/234196580\">said</a>:</p>\n<blockquote>\n<p>I spent some time looking into the abort-on-unwind wrapper; that part in particular I'm not entirely sure about yet.</p>\n</blockquote>\n<p>Yeah, that's one bit of what we spec'd in the RFC that I suspect is unfortunately rather tricky at the implementation level. It may even be introducing a new concept to the compiler (AFAIK there's no existing feature that requires auto-generating shims like that).</p>\n<blockquote>\n<p>As for the patch, I'm going to put that together today.</p>\n</blockquote>\n<p>Excellent! I don't know if I'll be online again today, but please ping <code>@wg-ffi-unwind</code> when you've opened a PR, and tomorrow morning I'll provide an update to the release team. (Or, if you'd like, you can just post a link to the PR in the topic in their stream, <a class=\"stream\" data-stream-id=\"241545\" href=\"/#narrow/stream/241545-t-release\">#t-release</a>.)</p>",
        "id": 234237070,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1618264607
    },
    {
        "content": "<p>Cross posting from <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/.02klzzwxh.3A0000.03.20next.20steps\">#project-ffi-unwind &gt; <code>\"C-unwind\"</code> next steps</a>...</p>\n<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span>! I've opened up <a href=\"https://github.com/rust-lang/rust/pull/84158\">https://github.com/rust-lang/rust/pull/84158</a>, which should address the concerns above.</p>",
        "id": 234335983,
        "sender_full_name": "katelyn martin",
        "timestamp": 1618324385
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Check-in meeting time!</p>",
        "id": 235716932,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619112656
    },
    {
        "content": "<p>I haven't gotten around to opening an issue for the <code>willreturn</code> bug. I've had a pretty hectic week.</p>",
        "id": 235717530,
        "sender_full_name": "Amanieu",
        "timestamp": 1619112855
    },
    {
        "content": "<p>Status updates:</p>\n<ul>\n<li>The compiler team has asked the release team to revert the <code>\"C-unwind\"</code> PR rather than <del>merge</del> backport the fix for the <code>\"C\"</code> behavior. <del>I'm not sure what the rationale for this is or whether this will be done on <code>main</code> (in which case I guess we'd need a new PR introducing <code>\"C-unwind\"</code>) or just on the beta/stable branches (in which case I guess they'd need to do this for every release until the <code>\"C-unwind\"</code> feature is ready for stabilization).</del></li>\n<li>There's some concern that an LLVM bug causes incorrect code-gen when <code>longjmp</code> and strict-aliasing interact; we plan to open a bug report for this. We haven't yet discussed how this impacts the specification of <code>longjmp</code>.</li>\n<li>The language team would like our charter to be updated to include the <code>longjmp</code> work in the scope declaration.</li>\n</ul>",
        "id": 235717930,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619112990
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hiya. I've had a hectic week, and haven't been able to keep abreast of much aside from landing the <code>\"C\"</code> behavior fix. That's unfortunate news to hear <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> Is there anything I should be aware of, or that I can do to help?</p>",
        "id": 235718658,
        "sender_full_name": "katelyn martin",
        "timestamp": 1619113276
    },
    {
        "content": "<p>^ actually I'm mistaken; your patch was already merged to <code>master</code>, so it's only this upcoming release that's affected by the revert.</p>",
        "id": 235719419,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619113574
    },
    {
        "content": "<p><span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> Oh! I suppose that makes a bit more sense. Apologies again for the delay in preparing that patch, and thank you for clarifying.</p>",
        "id": 235720547,
        "sender_full_name": "katelyn martin",
        "timestamp": 1619113990
    },
    {
        "content": "<p>That's okay. Thanks for getting it done!</p>",
        "id": 235721682,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619114430
    },
    {
        "content": "<p>Anyway, I have to jump, but as always, async updates, questions, &amp;c are welcome.</p>",
        "id": 235721899,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1619114508
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> hi all! Biweekly update time. Anything to mention? I don't think we have any impending deadlines, and I think we're all aware of the next steps for <code>\"C-unwind\"</code>.</p>",
        "id": 237698676,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1620322532
    },
    {
        "content": "<ul>\n<li>nodding * That sounds right to me! I've been a little busy with work things the past couple weeks, but I'm excited to pick this up again soon. Once this is again on my radar, I'm hoping to think about those abort-on-unwind wrappers. Nothing else to report on my end <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ul>",
        "id": 237699239,
        "sender_full_name": "katelyn martin",
        "timestamp": 1620322778
    },
    {
        "content": "<p>sounds good to me, too</p>",
        "id": 237710978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620327366
    },
    {
        "content": "<p>Hi! Nothing exciting to report. I do have one question/request: I'd love to implement the abort-on-unwind wrappers. _But_, in previous conversations, I got the sense that this would be a bit of a new concept within the <code>rustc</code> codebase, which I'm frankly rather unfamiliar with in general.</p>\n<p>Do any of you have a good idea who might be a good person to ask for more guidance, or design advice, for how to go about this work? It was especially helpful last time around having some signposts to help send me in the right direction. <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span></p>",
        "id": 239631088,
        "sender_full_name": "katelyn martin",
        "timestamp": 1621532320
    },
    {
        "content": "<p>Hey! Sorry, wasn't watching the clock for a bit.</p>",
        "id": 239631319,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1621532426
    },
    {
        "content": "<p>I...do not know, unfortunately. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 239632013,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1621532747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> I can hep you</p>",
        "id": 239764809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621609317
    },
    {
        "content": "<p>let's open a topic on it</p>",
        "id": 239764880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621609334
    },
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  I come bearing unfortunate news.</p>\n<p>I need to be honest with both myself and you all about my bandwidth at this time, and hand off the responsibilities of designing (_and most likely implementing_) abort-on-unwind wrappers for <code>*-unwind</code> functions. I had hoped I would be able to take this on, but time continues to pass and I do not want to be a blocker for stabilizing this exciting new feature.</p>\n<p>I believe <span class=\"user-mention\" data-user-id=\"254368\">@Till Schneidereit</span> is going to try and find someone that has the cycles to take this on, so I wanted to introduce you all in case you're unfamiliar. My apologies about this, I sincerely wish I had the time to take this work on <span aria-label=\"blue heart\" class=\"emoji emoji-1f499\" role=\"img\" title=\"blue heart\">:blue_heart:</span></p>",
        "id": 241424353,
        "sender_full_name": "katelyn martin",
        "timestamp": 1622741283
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> ! I'm sorry to hear you won't be able to do the work you wanted to on this, but I'm glad to hear that you are narrowing your focus to the things you have the bandwidth for; that's more important than getting a feature stabilized sooner.</p>",
        "id": 241425094,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622741587
    },
    {
        "content": "<p>Thank you for introducing us to Till! I'm sorry we don't have someone ready to take on what you're handing off just yet (and admittedly I myself have only been contributing a minimal amount of time to the project for a while now).</p>",
        "id": 241425472,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1622741746
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"327458\">@katelyn martin</span> -- thanks for all the work you did so far!</p>",
        "id": 241533008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622812625
    },
    {
        "content": "<p>I'm sure we can find someone to pick it up</p>",
        "id": 241533047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622812646
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hi everyone! (Sorry for the late start today.) Big thanks to <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> for taking on the \"next steps\" work. He has a proposed approach in this PR, which has quite a bit of discussion: <a href=\"https://github.com/rust-lang/rust/pull/86155\">https://github.com/rust-lang/rust/pull/86155</a></p>",
        "id": 243055288,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623951595
    },
    {
        "content": "<p>I was reading that PR</p>",
        "id": 243055364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623951618
    },
    {
        "content": "<p>Same; unfortunately I have not yet had time to really digest the conversation there.</p>",
        "id": 243055396,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623951633
    },
    {
        "content": "<p>My personal take is that virtually any approach is fine as long as <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> will see it through and we dn't get stuck half-way through</p>",
        "id": 243055399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623951635
    },
    {
        "content": "<p>I think the big diference now is we know where we are going</p>",
        "id": 243055409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623951642
    },
    {
        "content": "<p>(if it'd help I can give a summary of where that PR is at)</p>",
        "id": 243055457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623951666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> sounds helpful :)</p>",
        "id": 243055765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623951841
    },
    {
        "content": "<p>Apart from fixing some known issues, there's one more major new piece of information worth pointing out, a proposed <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-860278358\">stabilization story</a>, namely:</p>\n<ol>\n<li>Land this PR. This will change the codegen of <code>extern \"C\"</code> functions on <code>panic=unwind</code> to assume they might unwind. In other words we'll stop placing <code>nounwind</code> on things. This is to stem the tide of UB and remove a hole in Rust where the example I listed above is 100% safe code yet UB.</li>\n<li>Stabilize the <code>extern \"C-unwind\"</code> ABI. This allows any program using <code>\"C\"</code> today but wants to use unwinding to move to <code>\"C-unwind\"</code>. At this point in time the <code>\"C\"</code> and <code>\"C-unwind\"</code> ABIs are effectively the same.</li>\n<li>After <code>\"C-unwind\"</code> is available on stable/beta/nightly, change the behavior of <code>\"C\"</code> back to placing <code>nounwind</code> everywhere and catching panics to then abort.</li>\n</ol>",
        "id": 243055888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623951890
    },
    {
        "content": "<p>Otherwise the PR is also having some back and forth with Ralf as I learn MIR and some of the intricacies. I implemented the bug fix as a MIR pass which is a relatively \"destructive\" pass in that it changes the operational semantics of the MIR. Ralf's thoughts are that we ideally don't want to do this (and if it we do we should explicitly list the \"dialect\" of the MIR), although I don't think this is implemented today (and there's other preexisting instances like drop elaboration which change the dialect)</p>",
        "id": 243056078,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623951973
    },
    {
        "content": "<p>I dug in a bit and I found <a href=\"https://github.com/rust-lang/rust/blob/8daad743c4bb941536860b4df20111cb71b8c777/compiler/rustc_middle/src/mir/terminator.rs#L235-L241\">a comment</a> which indicates to me that we probably don't want to change the construction of the MIR (since it could have an affect on the borrowck semantics), so given that I think that we probably want a pass of some form and it's largely just a question of when the pass actually runs.</p>",
        "id": 243056200,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952027
    },
    {
        "content": "<p>I wrote some more specific questions <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-862481768\">here</a> but those are probably best handled later rather than right here</p>",
        "id": 243056264,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952048
    },
    {
        "content": "<p>in terms of discussion here, though, the proposed stabilization story is probably the best to focus on</p>",
        "id": 243056321,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952070
    },
    {
        "content": "<p>oh also this PR removes <code>#[unwind]</code> and all support</p>",
        "id": 243056398,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> what was the bug fix?</p>",
        "id": 243057070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952363
    },
    {
        "content": "<p>I saw some of that back and forth and was surprised that MIR was involved</p>",
        "id": 243057107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952375
    },
    {
        "content": "<p>2 bug fixes:</p>\n<ul>\n<li>With <code>-Cpanic=unwind</code>, this is no longer UB: <code>extern \"C\" fn foo() { panic!() }</code></li>\n<li>With <code>-Cpanic=abort</code>, this now correctly catches panics and aborts: <code>extern \"C\" fn foo() { extern \"C-unwind\" fn bar() {} bar() }</code></li>\n</ul>",
        "id": 243057202,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952419
    },
    {
        "content": "<p>sorry that latter example is not easy to show in one line on zulip heh</p>",
        "id": 243057226,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952432
    },
    {
        "content": "<p>eventually, the plan would be for both of those to abort, right?</p>",
        "id": 243057320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952462
    },
    {
        "content": "<p>and the point is that, for the 1st one, we want to have <em>some</em> UB-free semantics to expose on stable</p>",
        "id": 243057367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952485
    },
    {
        "content": "<p>until we have a transition plan in place (C-unwind)</p>",
        "id": 243057383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952493
    },
    {
        "content": "<p>I don't thnk I undersatnd how the second one aborts....</p>",
        "id": 243057447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952519
    },
    {
        "content": "<p>is the assumpton that <code>bar</code> would actually <code>panic!()</code>?</p>",
        "id": 243057471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952536
    },
    {
        "content": "<p>correct, yeah, on aborting on both</p>",
        "id": 243057499,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952546
    },
    {
        "content": "<p>oh and yeah assume that <code>bar</code> is way more complicated or does a C++ unwind</p>",
        "id": 243057524,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952556
    },
    {
        "content": "<p>the codegen today is incorrect where it adds <code>nounwind</code> to <code>bar</code> which is not true, and now the codegen no longer does that</p>",
        "id": 243057624,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952578
    },
    {
        "content": "<p>I ended up changing the MIR construction for this because I figured it was best to reflect the \"cleanup &amp; abort\" in the MIR</p>",
        "id": 243057708,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952612
    },
    {
        "content": "<p>er, not the actual construction of MIR, just shape of the MIR by the time it makes its way to codegen</p>",
        "id": 243057752,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952632
    },
    {
        "content": "<p>OK, so the idea is that <em>when -Cpanic=abort, we actually manage the unwind case for a call to a C-unwind function and abort</em></p>",
        "id": 243058110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952755
    },
    {
        "content": "<p>that all makes sense to me</p>",
        "id": 243058123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952761
    },
    {
        "content": "<p>is this plan written up?</p>",
        "id": 243058161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952776
    },
    {
        "content": "<p>we should probably get FCP approval from the lang team and then just Get It Done</p>",
        "id": 243058177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952783
    },
    {
        "content": "<p>Well, it's implied by the RFC, though the implementation details of course are not.</p>",
        "id": 243058262,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623952806
    },
    {
        "content": "<p>I don't know that we even <em>need</em> FCP approval</p>",
        "id": 243058280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952815
    },
    {
        "content": "<p>I know that this was mildly contentious before</p>",
        "id": 243058288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952820
    },
    {
        "content": "<p>but it seems like a perfectly reasonable path to me</p>",
        "id": 243058310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952829
    },
    {
        "content": "<p>I just think it should be documented on an issue in very clear terms</p>",
        "id": 243058325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952837
    },
    {
        "content": "<p>I'm happy to do w/e, just lemme know what needs writing up and where</p>",
        "id": 243058334,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952843
    },
    {
        "content": "<p>is there anything controversial about the PR apart from the interim step of having no UB?</p>",
        "id": 243058370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952861
    },
    {
        "content": "<p>(I was under the impression everything here was implied by the RFC as well, but I can write more technical docs for how this is implemented)</p>",
        "id": 243058386,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952866
    },
    {
        "content": "<p>I don't think we need any approval to make this the <code>\"C-unwind\"</code> behavior. The only possibly-contentious part now, I think, is whether we want to temporarily remove the LLVM UB from <code>\"C\"</code>.</p>",
        "id": 243058398,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623952872
    },
    {
        "content": "<p>I don't think we need docs per se</p>",
        "id": 243058414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952880
    },
    {
        "content": "<p>I think having a list on the tracking issue or whatever that is like</p>",
        "id": 243058430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952889
    },
    {
        "content": "<h1>Stages</h1>",
        "id": 243058436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952891
    },
    {
        "content": "<p>I think the \"do it as a MIR pass\" isn't fully resolved? Ralf would know more about his concerns in that respect I think</p>",
        "id": 243058439,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952892
    },
    {
        "content": "<p>Yes, that part seems to imply some wrinkles we weren't previously aware of.</p>",
        "id": 243058485,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623952910
    },
    {
        "content": "<p>Ooh, wait</p>",
        "id": 243058501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/243058439\">said</a>:</p>\n<blockquote>\n<p>I think the \"do it as a MIR pass\" isn't fully resolved? Ralf would know more about his concerns in that respect I think</p>\n</blockquote>\n<p>ah, yes, +1</p>",
        "id": 243058551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952923
    },
    {
        "content": "<p>but that's \"just a review concern\"</p>",
        "id": 243058571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623952929
    },
    {
        "content": "<p>lol ok then yeah I think then that there's no other controversial parts</p>",
        "id": 243058636,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623952957
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>Stage</th>\n<th>Complete?</th>\n<th>Panic from within an extern \"C\" fn</th>\n<th>\"C-unwind\" ABI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Today</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td>LLVM-UB</td>\n<td>nightly</td>\n</tr>\n<tr>\n<td>With PR</td>\n<td></td>\n<td>Rust-UB but not LLVM-UB</td>\n<td>nightly</td>\n</tr>\n<tr>\n<td>With C-unwind stabilized</td>\n<td></td>\n<td>Rust-UB but not LLVM-UB</td>\n<td>beta</td>\n</tr>\n<tr>\n<td>After announcement</td>\n<td></td>\n<td>LLVM-UB</td>\n<td>stable</td>\n</tr>\n</tbody>\n</table>",
        "id": 243058770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953017
    },
    {
        "content": "<p>roughly this</p>",
        "id": 243058781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953021
    },
    {
        "content": "<p>it doesn't quite capture the \"panic=abort\" behavior or something, but that's basically just a bug you are fixing, not a transition point</p>",
        "id": 243058833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953039
    },
    {
        "content": "<p>yeah that looks right to me</p>",
        "id": 243058952,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953077
    },
    {
        "content": "<p><code>unstable</code>/<code>stable</code> referring to whether the behavior change is released on stable?</p>",
        "id": 243058979,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953091
    },
    {
        "content": "<p>er, well, I meant actually whether C-unwind is <em>available</em> on stable</p>",
        "id": 243059020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953109
    },
    {
        "content": "<p>That column header could probably just be <code>\"C-unwind\" availability</code>, and the entries would be <code>nightly</code>, <code>nightly</code>, <code>beta</code>, <code>stable</code></p>",
        "id": 243059074,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953139
    },
    {
        "content": "<p>+!</p>",
        "id": 243059095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953149
    },
    {
        "content": "<p>Maybe there needs to be a row for going from <code>nightly, with feature enabled</code> to <code>nightly, on by default</code> ?</p>",
        "id": 243059224,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953185
    },
    {
        "content": "<p>I don't know what that means...</p>",
        "id": 243059324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953220
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 243059333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953222
    },
    {
        "content": "<p>meh you can add a row if you want :)</p>",
        "id": 243059358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953229
    },
    {
        "content": "<p>I just want that documented somewhere in a tracking issue</p>",
        "id": 243059385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953237
    },
    {
        "content": "<p>so we can point people at where we are</p>",
        "id": 243059401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953241
    },
    {
        "content": "<p>or on the project-group repo</p>",
        "id": 243059419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953247
    },
    {
        "content": "<p>probably a good idea to add the row</p>",
        "id": 243059455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953263
    },
    {
        "content": "<p>eventually the final two rows would be after release numbers</p>",
        "id": 243059472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953270
    },
    {
        "content": "<p>hopefully not too far from now</p>",
        "id": 243059482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953272
    },
    {
        "content": "<p>in fact, we could probably just ... predict them, right/</p>",
        "id": 243059500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953279
    },
    {
        "content": "<p>i.e., we expect to be able to start stabilization proces quite quickly I think?</p>",
        "id": 243059550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953287
    },
    {
        "content": "<p>seems plausible to me we could get C-unwind stabilized before next release</p>",
        "id": 243059602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953307
    },
    {
        "content": "<p>I'm also wondering about the <code>with C-unwind stabilized</code> row: wouldn't we want to turn LLVM-UB back on once the feature hits <code>beta</code>?</p>",
        "id": 243059634,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953320
    },
    {
        "content": "<p>I would need to follow up with a separate PR to split the <code>c_unwind</code> feature into two feature gates, one for the ABI name and one for the behavior change</p>",
        "id": 243059639,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953322
    },
    {
        "content": "<p>(but that won't take long)</p>",
        "id": 243059663,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953330
    },
    {
        "content": "<p>what behavior change? I'm confused :)</p>",
        "id": 243059685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953341
    },
    {
        "content": "<p>but ok</p>",
        "id": 243059687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953341
    },
    {
        "content": "<p>behavior change for <code>\"C\"</code>?</p>",
        "id": 243059719,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953355
    },
    {
        "content": "<p>behavior change == \"catch unwinds and abort\"</p>",
        "id": 243059721,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953356
    },
    {
        "content": "<p>ok</p>",
        "id": 243059762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953372
    },
    {
        "content": "<p>then yes, we should do that</p>",
        "id": 243059775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953376
    },
    {
        "content": "<p>it'd be helpful to have distinct feature names anyway</p>",
        "id": 243059791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953382
    },
    {
        "content": "<p>to talk about the phases</p>",
        "id": 243059794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953385
    },
    {
        "content": "<p>nightly is now 1.55, so <code>\"C-unwind\"</code> could be in 1.55, and then we could make the behavior change in 1.57?</p>",
        "id": 243059801,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953389
    },
    {
        "content": "<p>right so if we have <code>C_unwind_abi</code> and <code>C_unwind_abort</code> (say)</p>",
        "id": 243059876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953413
    },
    {
        "content": "<p>well anyway I was going to make some table but yes</p>",
        "id": 243059928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> would you be up to make a table on the project-ffi-unwind repo README or something showing The Plan?</p>",
        "id": 243059949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953459
    },
    {
        "content": "<p>seems like we're in agreement, just need to document it</p>",
        "id": 243059973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953466
    },
    {
        "content": "<p>I was thinking it'd be good for <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> not to make it but to read somebody else's interpretation to be sure at least 2 people see it the same way :)</p>",
        "id": 243060019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953491
    },
    {
        "content": "<p>Yes, I'll ask follow-up questions if I need it</p>",
        "id": 243060027,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953495
    },
    {
        "content": "<p>(actually <code>c_unwind_abi</code> would never be a feature, we'd probably just have a stabilization PR that didn't gate <code>\"C-unwind\"</code> but continued to gate behavior)</p>",
        "id": 243060178,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953548
    },
    {
        "content": "<p>ok ok</p>",
        "id": 243060503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953701
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 243060510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953702
    },
    {
        "content": "<p>Sorry, I didn't quite follow that; does that mean there will not be separate feature flags after all?</p>",
        "id": 243060757,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953825
    },
    {
        "content": "<p>And I would have thought <code>c_unwind_abi</code> corresponded to the feature flag we already introduced.</p>",
        "id": 243060824,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623953855
    },
    {
        "content": "<p>I think we can probably skip that step by just immediately stabilizing <code>\"C-unwind\"</code></p>",
        "id": 243060973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953910
    },
    {
        "content": "<p><code>feature(c_unwind)</code> gates two things today, the ABI and the behavior change, and we could just stabilize half of that and leave the other half undisturbed</p>",
        "id": 243061019,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953933
    },
    {
        "content": "<p>but that's just a thought, we could also go the full split-the-feature-gates-then-stabilize-one-gate route too</p>",
        "id": 243061050,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623953949
    },
    {
        "content": "<p>Ah, okay, I see what you're saying.</p>",
        "id": 243062331,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1623954475
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hey all, it sounds like Alex's PR is moving along (thanks again, and thanks to Niko for jumping in on review duty). I'll write a quick update for the lang team meeting next week. I don't believe we have any other items to discuss that aren't already being discussed in other channels.</p>",
        "id": 244602232,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625161213
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Hi all, do we have any updates today?</p>",
        "id": 247616432,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1627580305
    },
    {
        "content": "<p>I don't :) I'll be on vacation next 2 weeks</p>",
        "id": 247698400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627646310
    },
    {
        "content": "<p>PR merged! Congrats <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>, and thanks again for taking that bit on!</p>",
        "id": 248424283,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628121682
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>As a reminder this is a change on stable Rust such that <code>nounwind</code> is no longer applied or inferred for <code>extern \"C\"</code> function pointers, pending the stabilization of the <code>C-unwind</code> ABI itself</p>",
        "id": 248424329,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628121722
    },
    {
        "content": "<p>I would consider it pretty unlikely that this entirely flies under the radar</p>",
        "id": 248424381,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628121742
    },
    {
        "content": "<p>Has someone drafted some language for the release notes (and marked the PR relnotes) in terms of what the change is meant to do and what users should do (if anything) to prepare for stabilization?</p>\n<p>Would be great to get that in a comment on the PR or so.</p>",
        "id": 248425866,
        "sender_full_name": "simulacrum",
        "timestamp": 1628123193
    },
    {
        "content": "<p>I'd be happy to write that up and do so, is the PR itself the best location to place that information?</p>",
        "id": 248425917,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628123269
    },
    {
        "content": "<p>I think yeah, just a comment and tagging with relnotes should be quite fine</p>",
        "id": 248426401,
        "sender_full_name": "simulacrum",
        "timestamp": 1628123782
    },
    {
        "content": "<p>it'll go into a not-yet-drafted release notes (for 1.56) so it's a ways off that it's actually needed</p>",
        "id": 248426407,
        "sender_full_name": "simulacrum",
        "timestamp": 1628123797
    },
    {
        "content": "<p>ok! I'll leave a comment tomorrow and make sure the tag is there</p>",
        "id": 248426984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628124485
    },
    {
        "content": "<p>comment written</p>",
        "id": 248483344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628173136
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> biweekly update - Alex's PR has been merged, and it looks like we're at least on the right path toward stabilization. If I understand correctly, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> may have some remaining soundness concerns, which we should continue discussing in <a class=\"stream-topic\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind/topic/PR.20.2386155\">#project-ffi-unwind &gt; PR #86155</a>. I think the next step is to write a blog post encouraging people to try out the feature on nightly; does that sound reasonable?</p>",
        "id": 249268731,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628790621
    },
    {
        "content": "<p>I believe this PR from <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> shows a path for resolving <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s concerns, but it does not yet handle Windows: <a href=\"https://github.com/rust-lang/rust/pull/86801\">https://github.com/rust-lang/rust/pull/86801</a></p>",
        "id": 249271810,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628791982
    },
    {
        "content": "<p>AFAIK there are <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-879990772\">two remaining unsoundness issues</a> with <code>C-unwind</code> which I think prevent stabilization:</p>\n<ul>\n<li>Separate compilation of panic=unwind/panic=abort addressed with <a href=\"https://github.com/rust-lang/rust/pull/86801\">https://github.com/rust-lang/rust/pull/86801</a></li>\n<li>Using <code>-Clto -Cpanic=abort</code> - there is no proposed fix for this yet</li>\n</ul>",
        "id": 249275093,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628793495
    },
    {
        "content": "<p>Thank you; looks like I overlooked that comment.</p>",
        "id": 249275631,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628793816
    },
    {
        "content": "<p>my concerns were mostly around the precise MIR semantics, which is tracked at <a href=\"https://github.com/rust-lang/rust/issues/86299\">#86299</a></p>",
        "id": 249339731,
        "sender_full_name": "RalfJ",
        "timestamp": 1628847040
    },
    {
        "content": "<blockquote>\n<p>Separate compilation of panic=unwind/panic=abort addressed with <a href=\"https://github.com/rust-lang/rust/pull/86801\">https://github.com/rust-lang/rust/pull/86801</a></p>\n</blockquote>\n<p>Once that lands, do parts of what your new pass does become redundant or is it worth keeping them both?</p>",
        "id": 249339779,
        "sender_full_name": "RalfJ",
        "timestamp": 1628847093
    },
    {
        "content": "<blockquote>\n<p>Using -Clto -Cpanic=abort - there is no proposed fix for this yet</p>\n</blockquote>\n<p>I think we have to get rid of that special pass that removes all landing pads -- it's fundamentally based on assumptions that do not hold any more.</p>",
        "id": 249339882,
        "sender_full_name": "RalfJ",
        "timestamp": 1628847158
    },
    {
        "content": "<blockquote>\n<p>I think we have to get rid of that special pass that removes all landing pads -- it's fundamentally based on assumptions that do not hold any more.</p>\n</blockquote>\n<p>Is this an optimization that (in theory) LLVM could do during LTO, if it can prove everything in the call stack is <code>nounwind</code>? Since LLVM handles C++ as well, I think that would be a reasonable place for such an optimization to be implemented (if indeed it gives a significant benefit).</p>",
        "id": 249367175,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628864978
    },
    {
        "content": "<p>Thanks for the explanations.</p>",
        "id": 249367303,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1628865021
    },
    {
        "content": "<p>I think this is something LLVM could/should do on its own when appropriate, yes.</p>",
        "id": 249458698,
        "sender_full_name": "RalfJ",
        "timestamp": 1628945816
    },
    {
        "content": "<p>I think that even if <a href=\"https://github.com/rust-lang/rust/issues/86801\">#86801</a> lands we'll still want the pass I wrote,  that PR is just patching up the case where you mix crates with panic types. While I agree with the theoretical assessment that <code>-Clto -Cpanic=abort</code> specialization just needs to be removed, that has a practical impact with no replacement for anyone relying on it today and I don't know what to do about that. I don't know if anyone actually is relying on it, and to what degree things would be broken if we removed the behavior.</p>\n<p>LLVM already does everything related to removing landing pads, so I don't think there's anything else LLVM can do here. The problem is that there's just so many non-optimizable ways that we generate IR that unless we manually remove all <code>invoke</code> LLVM won't do it for us. One main culprit is indirect function calls which are done with <code>invoke</code> but LLVM can't prove that all input function pointers don't actually unwind, either because inlining doesn't happen enough or something like that</p>",
        "id": 249471211,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628964374
    },
    {
        "content": "<blockquote>\n<p>I think that even if <a href=\"https://github.com/rust-lang/rust/issues/86801\">#86801</a> lands we'll still want the pass I wrote, that PR is just patching up the case where you mix crates with panic types. </p>\n</blockquote>\n<p>Why do you think it is still needed? Would be good to get that documented somewhere.</p>",
        "id": 249508080,
        "sender_full_name": "RalfJ",
        "timestamp": 1629027728
    },
    {
        "content": "<p>for the LTO thing... one way to find out would be to just try to see what happens when you remove it?</p>\n<p>the optimization is simply wrong e.g. for the case where libstd generates a vtable (entries of which might unwind if they call an extern fn that unwinds), and then that vtable is used from a panic=abort crate.</p>",
        "id": 249508169,
        "sender_full_name": "RalfJ",
        "timestamp": 1629027882
    },
    {
        "content": "<p>if we want to keep this optimization correct we have to do something where in a panic=unwind crate, all calls to <code>extern \"C-unwind\"</code> functions go through some layer that is only \"plugged in\" when building a binary crate, and that ensures all unwinding is caught \"at the boundary\" (from FFI to Rust)</p>",
        "id": 249508244,
        "sender_full_name": "RalfJ",
        "timestamp": 1629027994
    },
    {
        "content": "<blockquote>\n<p>the optimization is simply wrong e.g. for the case where libstd generates a vtable (entries of which might unwind if they call an extern fn that unwinds), and then that vtable is used from a panic=abort crate.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/86801\">#86801</a> will cause the function that calls the extern fn to abort when trying to unwind past it.</p>",
        "id": 249513620,
        "sender_full_name": "bjorn3",
        "timestamp": 1629035396
    },
    {
        "content": "<p>When trying to unwind past a function, it's personality function is executed. This PR makes the personality function abort, thus preventing any unwinding past rust functions.</p>",
        "id": 249513703,
        "sender_full_name": "bjorn3",
        "timestamp": 1629035459
    },
    {
        "content": "<p>well that sounds like we don't need the new MIR pass any more then, if we have to rely on this personality function approach anyway</p>",
        "id": 249516779,
        "sender_full_name": "RalfJ",
        "timestamp": 1629039542
    },
    {
        "content": "<p>The MIR pass is still necessary for <code>extern \"C\"</code> with <code>-Cpanic=unwind</code>, as the personality function only aborts with <code>-Cpanic=abort</code>.</p>",
        "id": 249518043,
        "sender_full_name": "bjorn3",
        "timestamp": 1629041199
    },
    {
        "content": "<p><code>extern \"C\"</code> must not unwind</p>",
        "id": 249520339,
        "sender_full_name": "RalfJ",
        "timestamp": 1629044567
    },
    {
        "content": "<p>oh you mean Rust <em>exporting</em> such a function? but still, it must not unwind</p>",
        "id": 249520359,
        "sender_full_name": "RalfJ",
        "timestamp": 1629044615
    },
    {
        "content": "<p>Rust could export an unwinding <code>\"C-unwind\"</code> though, not sure if or how that would make a problem (I dont understand the case you are saying where the pass would still be necessary)</p>",
        "id": 249520407,
        "sender_full_name": "RalfJ",
        "timestamp": 1629044651
    },
    {
        "content": "<p>Ah, right. The MIR pass is just for <code>-Cpanic=abort</code>. I think it is still necessary though as with <code>-Cpanic=abort</code> there would normally be no unwinding information due to the <code>nounwind</code> flag and thus no personality function being called.</p>",
        "id": 249520441,
        "sender_full_name": "bjorn3",
        "timestamp": 1629044736
    },
    {
        "content": "<p>Say you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// rustflags: -Cpanic=abort</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C-unwind\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">may_unwind</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_may_unwind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">may_unwind</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that would result in <code>call_may_unwind</code> having <code>nounwind</code>. This means that in the absence of a landingpad LLVM would be allowed to assume that <code>may_unwind</code> can't unwind either and thus mark it as <code>nounwind</code>. As <code>call_may_unwind</code> is <code>nounwind</code> and all functions called by it are, LLVM will probably skip the unwinding information generation.</p>",
        "id": 249520583,
        "sender_full_name": "bjorn3",
        "timestamp": 1629044927
    },
    {
        "content": "<p>Yup, just confirmed that replacing the <code>invoke</code> with a <code>call</code> in <code>call_may_unwind</code> will result in LLVM omitting the personality function from the unwind info, leaving just enough for backtraces, but not enough for unwinding that doesn't skip <code>call_may_unwind</code> completely.</p>",
        "id": 249520839,
        "sender_full_name": "bjorn3",
        "timestamp": 1629045305
    },
    {
        "content": "<blockquote>\n<p>Ah, right. The MIR pass is just for -Cpanic=abort</p>\n</blockquote>\n<p>It's also for defining <code>extern \"C\" fn</code> in Rust (and ensuring they do not unwind)</p>",
        "id": 249558731,
        "sender_full_name": "RalfJ",
        "timestamp": 1629100313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/249520839\">said</a>:</p>\n<blockquote>\n<p>Yup, just confirmed that replacing the <code>invoke</code> with a <code>call</code> in <code>call_may_unwind</code> will result in LLVM omitting the personality function from the unwind info, leaving just enough for backtraces, but not enough for unwinding that doesn't skip <code>call_may_unwind</code> completely.</p>\n</blockquote>\n<p>but doesn't the LTO pass in question do a similar replacement, and thus cause the same problem?</p>",
        "id": 249558853,
        "sender_full_name": "RalfJ",
        "timestamp": 1629100416
    },
    {
        "content": "<p>Yes, that is my understanding.</p>",
        "id": 249606544,
        "sender_full_name": "bjorn3",
        "timestamp": 1629128921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> now I am confused. First you said your PR (the one with the personalities) fixes the problem with the LTO pass; now you say that the LTO pass also has <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/249520583\">this problem</a>, which would mean that your PR doesn't fix it?</p>",
        "id": 249623722,
        "sender_full_name": "RalfJ",
        "timestamp": 1629136617
    },
    {
        "content": "<p>I got confused about the original problem statement. It does indeed not fix the problem for LTO with the landingpad removal pass. It does fix the problem without LTO or with LTO without the landingpad removal pass.</p>",
        "id": 249626913,
        "sender_full_name": "bjorn3",
        "timestamp": 1629138129
    },
    {
        "content": "<p>okay -- AFAIK the only problem with LTO is the landingpad removal pass, so essentially I think you are saying it doesnt help with our LTO problem</p>",
        "id": 249636600,
        "sender_full_name": "RalfJ",
        "timestamp": 1629142555
    },
    {
        "content": "<p>(but it does help with the \"mixing crates with different -C panic\" problem)</p>",
        "id": 249636671,
        "sender_full_name": "RalfJ",
        "timestamp": 1629142571
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Ah, sorry for not initiating the weekly meeting on time.</p>\n<p>Are these check-ins still helpful/useful?</p>\n<p>It looks like our current need is to figure out how to make <code>-Clto -Cpanic=abort</code> sound. <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , and <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> , do you feel like the conversation here could be more productive in some way?</p>",
        "id": 250812427,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1630000192
    },
    {
        "content": "<p>Would it be possible to have a custom annotation at llvm ir level that indicates that an abort landingpad is necessary for callers of a certain function when -Cpanic=abort is used and then add this annotation for C and C-unwind functions? A custom llvm pass could then remove all landingpads, but introduce new, aborting, ones when such an annotation found.</p>",
        "id": 250819109,
        "sender_full_name": "bjorn3",
        "timestamp": 1630003043
    },
    {
        "content": "<p>FWIW I'm not personally actively working on the <code>-Clto -Cpanic=abort</code>, or the mixed panic/abort issue myself.</p>",
        "id": 250824255,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630005224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> I have to admit I have kind of \"checked out\" from these check-ins, but I do want to talk about converting this effort into a new-fangled lang team initiative, and taking stock of where we are generally</p>",
        "id": 250830087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630007644
    },
    {
        "content": "<p>I've kind of lost the plot :)</p>",
        "id": 250830104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630007646
    },
    {
        "content": "<p>maybe you can schedule some time at <a href=\"https://calendly.com/nikomatsakis\">https://calendly.com/nikomatsakis</a> for us to go over that?</p>",
        "id": 250830148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630007665
    },
    {
        "content": "<blockquote>\n<p>It looks like our current need is to figure out how to make -Clto -Cpanic=abort sound. </p>\n</blockquote>\n<p>that pass relies on a fundamentally incorrect assumption, so... not sure how much we even can do. do we have an assesment of the fallout if we were to remove this pass? I assume its mostly a code size thing.</p>",
        "id": 251486337,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459469
    },
    {
        "content": "<p>the mixed panic/abort issue I think is fixed by <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>'s approach, but only if we can truly do that for <em>all</em> our unwinding-supporting targets. and then I wonder if we even still need the new MIR pass, it seems somewhat redundant with that personality function approach.</p>",
        "id": 251486368,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what pass are you referring to specifically? I feel like I'm missing some context</p>",
        "id": 251759661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/249275093\">said</a>:</p>\n<blockquote>\n<p>AFAIK there are <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-879990772\">two remaining unsoundness issues</a> with <code>C-unwind</code> which I think prevent stabilization:</p>\n<ul>\n<li>Separate compilation of panic=unwind/panic=abort addressed with <a href=\"https://github.com/rust-lang/rust/pull/86801\">https://github.com/rust-lang/rust/pull/86801</a></li>\n<li>Using <code>-Clto -Cpanic=abort</code> - there is no proposed fix for this yet</li>\n</ul>\n</blockquote>\n<p>I see, I guess it's this</p>",
        "id": 251759914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630606208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> and I had a quick meeting to summarize our understanding of the current state, <a href=\"https://hackmd.io/6VtamfowQTK-63t3x1Uj4A\">notes here</a></p>",
        "id": 251763482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630607445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/251759661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> what pass are you referring to specifically? I feel like I'm missing some context</p>\n</blockquote>\n<p>there is a pass enabled with panic=abort LTO builds that indiscriminately removes all landing pads</p>",
        "id": 252032947,
        "sender_full_name": "RalfJ",
        "timestamp": 1630797121
    },
    {
        "content": "<p>I don't have any update for this week; based on the responses from last week, I think Niko and I may need to figure out a different way to facilitate and monitor progress here, as I don't think the check-ins are terribly productive at the moment.</p>",
        "id": 252666714,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1631209802
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Reviving this thread now that we're having bi-weekly check-ins again.</p>",
        "id": 271474514,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518066
    },
    {
        "content": "<p>I think the status here is still accurate: <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/meeting.202022-1-27/near/269618387\">https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/meeting.202022-1-27/near/269618387</a></p>",
        "id": 271474574,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518096
    },
    {
        "content": "<p>the only other update I know of is that <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>'s addition of new <code>&lt;foo&gt;-unwind</code> ABI strings got merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 271474631,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> Anything this team can do to help move <a href=\"https://github.com/rust-lang/rust/pull/92911\">#92911</a> forward?</p>",
        "id": 271474789,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518197
    },
    {
        "content": "<p>There are some perf regression that I don't know how to avoid</p>",
        "id": 271474878,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518246
    },
    {
        "content": "<p>Oh, the other update is that I am now assigned to any GitHub issues in <code>rust-lang</code> that pertain to this project group. I believe we can get a new GH label for the project group and use that instead, though.</p>",
        "id": 271474935,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/271474878\">said</a>:</p>\n<blockquote>\n<p>There are some perf regression that I don't know how to avoid</p>\n</blockquote>\n<p>Compile time, run time, or both?</p>",
        "id": 271474991,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518291
    },
    {
        "content": "<p>I haven't yet got a chance to change it to call panic_no_unwind, I assume regression would be worse for that scenario</p>",
        "id": 271475035,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518312
    },
    {
        "content": "<p>compile time</p>",
        "id": 271475050,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518320
    },
    {
        "content": "<p>I don't see any way to avoid these regressions.</p>",
        "id": 271475092,
        "sender_full_name": "Amanieu",
        "timestamp": 1644518344
    },
    {
        "content": "<p>Would it be helpful to analyze the specific <code>ripgrep</code> regressions called out by the bot?</p>",
        "id": 271475166,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518394
    },
    {
        "content": "<p>And/or to reach out to burntsushi and see if he has an opinion on whether they're acceptable?</p>",
        "id": 271475253,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518426
    },
    {
        "content": "<p>Fundamentally what that PR does is add more code to catch double-unwinds. It's unavoidable that adding more code will regress compilation time.</p>",
        "id": 271475436,
        "sender_full_name": "Amanieu",
        "timestamp": 1644518534
    },
    {
        "content": "<p>I have \"enhance LLVM to support terminating landing pad\" in my backlog but I don't expect myself to have time to work on that anytime soon.</p>",
        "id": 271475564,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> would you mind writing that up as a comment on the PR?</p>",
        "id": 271475968,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518816
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> , is that the only remaining reason to keep the PR marked \"WIP\"?</p>",
        "id": 271476014,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518833
    },
    {
        "content": "<p>I probably will find some time this weekend to change that PR to call panic_no_unwind.</p>",
        "id": 271476032,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518846
    },
    {
        "content": "<p>And fix some tests, then the PR should be ready</p>",
        "id": 271476055,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518859
    },
    {
        "content": "<p>Given ripgrep's intense focus on performance, I'd still like to know whether this is really very detrimental to it</p>",
        "id": 271476069,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518865
    },
    {
        "content": "<p>I'm still hoping to switch on <code>-Z panic-in-drop=abort</code> by default which should eliminate the overhead from the PR since it's only needed if drops actually unwind.</p>",
        "id": 271476199,
        "sender_full_name": "Amanieu",
        "timestamp": 1644518918
    },
    {
        "content": "<p>I think I can start by just running the ripgrep performance benchmark suite against that branch. I haven't done something like that before but it shouldn't be too bad, so I'll try to find time to do that myself</p>",
        "id": 271476202,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518918
    },
    {
        "content": "<p>Did they focus a lot on compile time perf?</p>",
        "id": 271476205,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644518919
    },
    {
        "content": "<p>Oh, this is compile-time only?</p>",
        "id": 271476220,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518930
    },
    {
        "content": "<p>I thought it was run-time checks</p>",
        "id": 271476229,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644518935
    },
    {
        "content": "<p>No it's entirely compile-time. And maybe a bit of code size.</p>",
        "id": 271476321,
        "sender_full_name": "Amanieu",
        "timestamp": 1644518985
    },
    {
        "content": "<p>I could add a <code>-Z</code> to control whether it should call panic_no_unwind, abort or do nothing if needed</p>",
        "id": 271476545,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519075
    },
    {
        "content": "<p>Okay, if it's compile-time, <em>I</em> think that's fine</p>",
        "id": 271476715,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644519143
    },
    {
        "content": "<p>Incidentally do you think your PR would be better placed in the MIR pass compiler/rustc_mir_transform/src/abort_unwinding_calls.rs?</p>",
        "id": 271476718,
        "sender_full_name": "Amanieu",
        "timestamp": 1644519145
    },
    {
        "content": "<p>but my opinion should not count for a lot <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 271476731,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1644519151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/271476718\">said</a>:</p>\n<blockquote>\n<p>Incidentally do you think your PR would be better placed in the MIR pass compiler/rustc_mir_transform/src/abort_unwinding_calls.rs?</p>\n</blockquote>\n<p>Actually that's how I initially attempted</p>",
        "id": 271476790,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519182
    },
    {
        "content": "<p>But it wouldn't work because MIR doesn't like double unwinding.</p>",
        "id": 271476824,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519197
    },
    {
        "content": "<p>Ah fair enough.</p>",
        "id": 271476853,
        "sender_full_name": "Amanieu",
        "timestamp": 1644519211
    },
    {
        "content": "<p>And it's not needed for SEH, because SEH aborts automatically</p>",
        "id": 271476932,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519242
    },
    {
        "content": "<p>I don't understand why SEH would abort. It has to be able to support <code>try {} catch () {}</code> in a C++ destructor.</p>",
        "id": 271477063,
        "sender_full_name": "Amanieu",
        "timestamp": 1644519305
    },
    {
        "content": "<p>You can view SEH as having a fresh chain of stack frames for EH. So because there are no outer \"catch\" blocks, unwinding during EH will abort due to lack of handlers.</p>",
        "id": 271477267,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519377
    },
    {
        "content": "<p>While Itanium unwinding doesn't really know if the outer catch is in the non-unwinding part or unwinding part.</p>",
        "id": 271477416,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644519443
    },
    {
        "content": "<p>I see, that makes sense.</p>",
        "id": 271477993,
        "sender_full_name": "Amanieu",
        "timestamp": 1644519623
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Sorry all, had a bit of trouble logging in. Meeting time.</p>",
        "id": 273131181,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645727841
    },
    {
        "content": "<p>Looks like we merged <a href=\"https://github.com/rust-lang/rust/issues/92911\">#92911</a> ( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  and thanks to <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> and <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> ), which if I recall correctly was our biggest blocker.</p>",
        "id": 273131322,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645727921
    },
    {
        "content": "<p>It looks like there's still some controversy around the <code>panic-in-drop=abort</code> change, but I think that no longer affects this group directly.</p>",
        "id": 273131526,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645728062
    },
    {
        "content": "<p>I thought the biggest blocker is mix of <code>panic=abort</code> and <code>panic=unwind</code>?</p>",
        "id": 273131682,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645728136
    },
    {
        "content": "<p>Yep; in fact, as far as I know, that's now our only blocker. <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>, you mentioned a while back that you were planning to start some work on the \"mixed panic strategy\" case, but I don't remember you saying what you were planning to do. Any update there?</p>",
        "id": 273131754,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645728179
    },
    {
        "content": "<p>With double unwind guard merged we are now safe with double C++ unwind; and I believe in practice this also handles C++ unwind + Rust unwind case. However the C++ Itanium ABI defines this scenario as UB.</p>",
        "id": 273131941,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645728286
    },
    {
        "content": "<p>E.g. if a \"C-unwind\" Rust function is called from C++'s cleanup code and it panics, then from C++ code's perspective we have a foreign exception while a C++ exception is active. The Itanium ABI defines this as UB.</p>",
        "id": 273132680,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645728652
    },
    {
        "content": "<p>Does the panic have to escape back into C++  to make this UB? I.e. is it defined behavior if there's a catch?</p>",
        "id": 273133660,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729111
    },
    {
        "content": "<p>It's fine if it doesn't escape</p>",
        "id": 273133776,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645729176
    },
    {
        "content": "<p>hm</p>",
        "id": 273133805,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729192
    },
    {
        "content": "<p>If a project needs to use C++ exceptions then this could be workarounded by set a Rust panic hook that aborts or throws C++ exception instead of using the normal Rust unwind mechanism.</p>",
        "id": 273134175,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645729312
    },
    {
        "content": "<p>But it's still a shame that this is a de jure UB.</p>",
        "id": 273134277,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645729350
    },
    {
        "content": "<p>Okay, I think the \"fix\" then is probably just to make a brief RFC stating that it's UB for a <code>panic</code> to escape the Rust runtime while another unwind is occurring.</p>",
        "id": 273134820,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729666
    },
    {
        "content": "<p>I have a partial fix, but it's not complete yet.</p>",
        "id": 273134921,
        "sender_full_name": "Amanieu",
        "timestamp": 1645729699
    },
    {
        "content": "<p>If <code>panic-in-drop=abort</code> becomes the default, then that will not be possible anyway, unless there's an opt-out mechanism. Otherwise, we can maybe add a hook to abort in that specific case.</p>",
        "id": 273134972,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729726
    },
    {
        "content": "<p>I'm not too happy about the implementation, I basically need to scan through the entire HIR to find calls to functions which have a *-unwind ABI.</p>",
        "id": 273134977,
        "sender_full_name": "Amanieu",
        "timestamp": 1645729733
    },
    {
        "content": "<p>Yep, sadly that's what I'd expect. Were you thinking there would be something cleaner/\"cleverer\"?</p>",
        "id": 273135032,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729760
    },
    {
        "content": "<p>I'm somewhat concerned about the extra compile-time cost of scanning through the entire HIR.</p>",
        "id": 273135220,
        "sender_full_name": "Amanieu",
        "timestamp": 1645729844
    },
    {
        "content": "<p>But anyways, I'm just going to finish what I have so far so we can see where it ends up.</p>",
        "id": 273135289,
        "sender_full_name": "Amanieu",
        "timestamp": 1645729887
    },
    {
        "content": "<p>Can the locations of those functions in the HIR be cached somehow on a pre-HIR-lowering pass?</p>",
        "id": 273135399,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729932
    },
    {
        "content": "<p>or during the HIR-lowering, rather?</p>",
        "id": 273135419,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645729941
    },
    {
        "content": "<p>I'm caching the result in the crate metadata, so it's only done once per crate.</p>",
        "id": 273135707,
        "sender_full_name": "Amanieu",
        "timestamp": 1645730069
    },
    {
        "content": "<p>And it needs to be done after typeck since I need to know the type of the function for each HIR Call expression.</p>",
        "id": 273135763,
        "sender_full_name": "Amanieu",
        "timestamp": 1645730108
    },
    {
        "content": "<p>(this is me talking in complete ignorance anyway, since I've never once touched actual code in <code>rustc</code> or any other compiler</p>",
        "id": 273135770,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645730113
    },
    {
        "content": "<p>Sorry for letting this discussion trail off without a clear \"ending point\" -- thanks for the updates!</p>",
        "id": 273137567,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1645730974
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> weekly meeting - not sure what, if anything, we need to talk about today.</p>",
        "id": 274876954,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1646937302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/273134820\">said</a>:</p>\n<blockquote>\n<p>Okay, I think the \"fix\" then is probably just to make a brief RFC stating that it's UB for a <code>panic</code> to escape the Rust runtime while another unwind is occurring.</p>\n</blockquote>\n<p>Is this valuable?</p>",
        "id": 274877152,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1646937387
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> do you have an update on the mixed-panic-strategy fix?</p>",
        "id": 274877209,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1646937417
    },
    {
        "content": "<p>No updates, but I will work on it next week. I think we should start stabilization now and not block on it though.</p>",
        "id": 275036524,
        "sender_full_name": "Amanieu",
        "timestamp": 1647034384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the last comment in the <a href=\"https://github.com/rust-lang/rust/issues/74990\">tracking issue</a>, by <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> , mentioned the mixed-panic-strategy issue as a blocker, but since the current status quo is the always-ill-defined <code>extern \"C\"</code>, do you agree with <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>'s comment above that it's appropriate to start the stabilization process anyway?</p>",
        "id": 275047309,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1647040474
    },
    {
        "content": "<p>I don't think we've added any documentation to the Unstable Book or Reference. I can make that my next action item.</p>",
        "id": 275047398,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1647040524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> uh :)</p>",
        "id": 275067579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647046307
    },
    {
        "content": "<p>Sorry, I've been really unable to keep up!</p>",
        "id": 275067585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647046313
    },
    {
        "content": "<p>I don't totally know what that means but it <em>sounds</em> reasonable at first read -- nested panics are kind of an edge case.</p>",
        "id": 275067645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647046349
    },
    {
        "content": "<p>The problem is not nested panics but when a C++ exception unwinds past <code>extern \"C-unwind\"</code>. If the <code>extern \"C-unwind\"</code> is compiled with <code>-Cpanic=abort</code> that will abort. If it is compiled with <code>-Cpanic=unwind</code> it will unwind, however if any other crate is compiled with <code>-Cpanic=abort</code> this may cause unwinding across panic=abort code.</p>\n<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">//- foo.rs</span>\n<span class=\"c1\">// rustflags: -Cpanic=unwind</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C-unwind\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unwinds</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_unwinds</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unwinds</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">//- main.rs deps:foo</span>\n<span class=\"c1\">// rustflags: -Cpanic=abort</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NoisyDrop</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"n\">call_unwinds</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will cause an exception thrown by <code>unwinds</code> to unwind past <code>main</code> despite <code>main</code> being compiled with panic=abort. As such the <code>NoisyDrop</code> destructor will not run which may be necessary for preserving safety.</p>",
        "id": 275087059,
        "sender_full_name": "bjorn3",
        "timestamp": 1647077023
    },
    {
        "content": "<p>I think Amanieu's idea was that mixing <code>panic=abort</code> and <code>panic=unwind</code> crates (except for <code>std</code>) would not be supported (at least not at first) <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/meeting.202022-1-13/near/267916376\">https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/meeting.202022-1-13/near/267916376</a></p>",
        "id": 275181285,
        "sender_full_name": "Vincent Isambart",
        "timestamp": 1647214539
    },
    {
        "content": "<p>why is std excepted?</p>",
        "id": 275288686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647287216
    },
    {
        "content": "<p>is it because it cannot invoke any C code that throws such a callback?</p>",
        "id": 275288705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647287228
    },
    {
        "content": "<p>(in other words, can we more precisely state what is UB, and in that case std is not an exception?)</p>",
        "id": 275288725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647287241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 275288745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647287252
    },
    {
        "content": "<p>Specifically the panic_unwind crate is excepted: it calls \"C-unwind\" functions but only when all the other crates in the crate graph are compiled with panic=unwind.</p>",
        "id": 275288927,
        "sender_full_name": "Amanieu",
        "timestamp": 1647287355
    },
    {
        "content": "<p>The UB occurs when a crate compiled with panic=unwind calls a \"C-unwind\" function when linked to crates compiled with panic=abort.</p>",
        "id": 275289050,
        "sender_full_name": "Amanieu",
        "timestamp": 1647287406
    },
    {
        "content": "<p>The key issue is that the two crates disagree on the meaning of <code>extern \"Rust\"</code>, specifically whether or not it is <code>nounwind</code>.</p>",
        "id": 275289407,
        "sender_full_name": "Amanieu",
        "timestamp": 1647287594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> OK. I think this makes sense, I guess that we ought to do a kind of write-up and submit to the lang team to ratify.</p>",
        "id": 275511208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647437991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/275289407\">said</a>:</p>\n<blockquote>\n<p>The key issue is that the two crates disagree on the meaning of <code>extern \"Rust\"</code>, specifically whether or not it is <code>nounwind</code>.</p>\n</blockquote>\n<p>I think this is a good way to describe it</p>",
        "id": 275511287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647438015
    },
    {
        "content": "<p>I'm wondering how easy it is to combine crates in this way</p>",
        "id": 275511305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647438028
    },
    {
        "content": "<p>You can't do it with Cargo AFAIK. You need to invoke rustc manually.</p>",
        "id": 275511327,
        "sender_full_name": "Amanieu",
        "timestamp": 1647438045
    },
    {
        "content": "<p>cargo won't let you do it (I think unless you use <code>cargo rustc</code>), but you can do it with a different build system.</p>",
        "id": 275511356,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647438062
    },
    {
        "content": "<p>that helps</p>",
        "id": 275511373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647438072
    },
    {
        "content": "<p>I wonder if it could be diagnosed if you link a panic=\"unwind\" crate to panic=\"abort\" (except magic stdlib).</p>",
        "id": 275511618,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647438186
    },
    {
        "content": "<p>We need to allow this for linking the pre-compiled stdlib built with panic=unwind against panic=abort crates.</p>",
        "id": 275512954,
        "sender_full_name": "Amanieu",
        "timestamp": 1647438818
    },
    {
        "content": "<p>And it also applies to dependencies of std like backtrace, gimli, hashbrown, etc.</p>",
        "id": 275512982,
        "sender_full_name": "Amanieu",
        "timestamp": 1647438842
    },
    {
        "content": "<p>Hmmm true. I might explore further, though. Could be a combination of impl doing magic stuff with magic stdlib (and its deps).</p>",
        "id": 275514006,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647439247
    },
    {
        "content": "<p>it's tempting to have an unstable <code>panic=std</code> :)</p>",
        "id": 275514421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647439443
    },
    {
        "content": "<p>Another option would be to compile libstd twice. That would also allow combining -Cpanic=abort with dynamically linking to <a href=\"http://libstd.so\">libstd.so</a>.</p>",
        "id": 275517098,
        "sender_full_name": "bjorn3",
        "timestamp": 1647440528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So what exactly is needed here to start stabilizing <code>c_unwind</code>?</p>",
        "id": 275642427,
        "sender_full_name": "Amanieu",
        "timestamp": 1647519083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/275511327\">said</a>:</p>\n<blockquote>\n<p>You can't do it with Cargo AFAIK. You need to invoke rustc manually.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/275511356\">said</a>:</p>\n<blockquote>\n<p>cargo won't let you do it (I think unless you use <code>cargo rustc</code>), but you can do it with a different build system.</p>\n</blockquote>\n<p>I thought this could happen with any <code>dylib</code> or <code>cdylib</code> library, if the final executable has a different <code>panic</code> strategy.</p>",
        "id": 276511516,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1648142866
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Biweekly meeting; sounds like we should discuss whether and how to proceed with stabilization.</p>",
        "id": 276512201,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1648143121
    },
    {
        "content": "<p>I believe any dylib crate will fix the panic mode of all crates to whichever it was compiled to. Manually trying to override it will give an error.</p>",
        "id": 276512702,
        "sender_full_name": "bjorn3",
        "timestamp": 1648143291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Cargo will fix the dylib's panic strategy when importing the crate?</p>",
        "id": 276513171,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1648143454
    },
    {
        "content": "<p>If you explicitly tell cargo to use a certain panic strategy I believe it will forward it to rustc which then errors if it doesn't match any of the dependent dylibs. If you don't tell cargo to use a certain panic strategy it won't pass anything to rustc in which rustc will attempt to use the default panic stategy for the target. In this case it also errors if any dylib doesn't match the expected strategy. Cargo doesn't allow <code>panic = \"...\"</code> in the package specific<code>[profile.*.package.*]</code>, only in the global <code>[profile.*]</code>.</p>",
        "id": 276513781,
        "sender_full_name": "bjorn3",
        "timestamp": 1648143677
    },
    {
        "content": "<p>This is what happens if you attempt to use a dependency compiled with <code>-Cpanic=abort</code> without specifying any <code>-Cpanic</code> flag yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">link</span><span class=\"w\"> </span><span class=\"n\">together</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"n\">runtimes</span>: <span class=\"nc\">panic_unwind</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">panic_abort</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">linked</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">panic_abort</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"n\">strategy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unwind</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"n\">strategy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">abort</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">strategy</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unwind</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">panic_abort</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"n\">strategy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">abort</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">strategy</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unwind</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276513992,
        "sender_full_name": "bjorn3",
        "timestamp": 1648143755
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 276515209,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1648144271
    },
    {
        "content": "<p>In that case...I feel much more comfortable saying this shouldn't be a blocker for stabilization.</p>",
        "id": 276515242,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1648144288
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1866\">@WG-ffi-unwind</span> Sorry, I forgot to inform this group that I'm on vacation this week; in fact my airplane only just landed. No sync today, then; can we plan to have one next week at the same time to discuss stabilization steps?</p>",
        "id": 278200602,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1649353307
    }
]