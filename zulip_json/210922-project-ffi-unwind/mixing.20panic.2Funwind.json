[
    {
        "content": "<p>hm ok I just realized a much more fundamental issue. We allow mixing <code>-Cpanic=unwind</code> and <code>-Cpanic=abort</code> crates so long as the final panic runtime is <code>-Cpanic=abort</code>. This is what enables us to ship a standard library compiled with <code>-Cpanic=unwind</code> but you can use that to compile and link with <code>-Cpanic=abort</code>. This support, however, can lead to theoretical UB:</p>\n<ul>\n<li>Compile crate A with <code>-Cpanic=unwind</code>. This crate has a Rust function <code>foo</code> that calls a C++ function with the <code>C-unwind</code> ABI</li>\n<li>Compile crate B with <code>-Cpanic=abort</code>. This crate calls <code>A::foo()</code>. The function that calls <code>A::foo</code> is tagged as <code>nounwind</code> but it does in fact unwind because nothing inject a landing pad or similar to catch exceptions and abort. This is a Rust-&gt;Rust function call, and because the crates are compiled differently we the answer of \"can this function unwind\" will change</li>\n</ul>\n<p>I think the only fix for this is to forbid mixing <code>-Cpanic=abort</code> and <code>-Cpanic=unwind</code>.</p>",
        "id": 244491152,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1625088779
    },
    {
        "content": "<p>(updated the above message since I sent the first version too soon)</p>",
        "id": 244491379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1625088911
    },
    {
        "content": "<p>The eh_personality of panic_abort aborts even when it is used by a panic=unwind crate AFAIK, so the moment an exception enters rust code, the process aborts.</p>",
        "id": 244491554,
        "sender_full_name": "bjorn3",
        "timestamp": 1625088992
    },
    {
        "content": "<p>looks like it doesn't: <a href=\"https://github.com/rust-lang/rust/blob/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5/library/panic_abort/src/lib.rs#L121\">https://github.com/rust-lang/rust/blob/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5/library/panic_abort/src/lib.rs#L121</a></p>",
        "id": 244491655,
        "sender_full_name": "bjorn3",
        "timestamp": 1625089069
    },
    {
        "content": "<p>making it abort too, should fix this soundness issue.</p>",
        "id": 244491719,
        "sender_full_name": "bjorn3",
        "timestamp": 1625089089
    },
    {
        "content": "<p>Certainly we want the process to abort in that case if the C++ function does in fact throw an exception.</p>",
        "id": 244504494,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625098228
    },
    {
        "content": "<p>(just to make sure everyone is on the same page w/ the desired behavior)</p>",
        "id": 244504522,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625098268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/next.20steps/near/244491655\">said</a>:</p>\n<blockquote>\n<p>looks like it doesn't: <a href=\"https://github.com/rust-lang/rust/blob/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5/library/panic_abort/src/lib.rs#L121\">https://github.com/rust-lang/rust/blob/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5/library/panic_abort/src/lib.rs#L121</a></p>\n</blockquote>\n<p>I don't fully understand the linking behavior here; are you saying that this function <em>would</em> get called in this case?</p>",
        "id": 244504647,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625098401
    },
    {
        "content": "<p>But I agree that if we can get a function that aborts linked as the <code>eh_personality</code> function in the mixed-panic-mode case, that should result in the desired behavior.</p>",
        "id": 244504738,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625098494
    },
    {
        "content": "<p>When using -Cpanic=abort, you will link against the panic_abort crate and thus use it's eh_personality.</p>",
        "id": 244525001,
        "sender_full_name": "bjorn3",
        "timestamp": 1625121994
    },
    {
        "content": "<blockquote>\n<p>This is a Rust-&gt;Rust function call, and because the crates are compiled differently we the answer of \"can this function unwind\" will change</p>\n</blockquote>\n<p>Couldn't it be the case that the answer to \"can this unwind\" depends on the crate the fn is defined in?</p>",
        "id": 244541450,
        "sender_full_name": "RalfJ",
        "timestamp": 1625132760
    },
    {
        "content": "<p>we presumably already store the panic runtime in the crate metadata. so <code>can_unwind</code> should look up the runtime of the crate the function is in. then that Rust-&gt;Rust call you mention will be recognized as an \"unwinding call in a non-unwinding crate\", right?</p>",
        "id": 244541563,
        "sender_full_name": "RalfJ",
        "timestamp": 1625132833
    },
    {
        "content": "<p>(though that might be a notable perf hit for panic=abort code as now it needs landing pads for libstd calls... unless we have some analysis that shows they are all not needed)</p>",
        "id": 244541642,
        "sender_full_name": "RalfJ",
        "timestamp": 1625132884
    },
    {
        "content": "<p>Aborting in the <code>eh_personality</code> of <code>libpanic_abort</code> should be enough to fix this soundness issue. It is also much easier to implement.</p>",
        "id": 244594484,
        "sender_full_name": "bjorn3",
        "timestamp": 1625157549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/next.20steps/near/244541642\">said</a>:</p>\n<blockquote>\n<p>(though that might be a notable perf hit for panic=abort code as now it needs landing pads for libstd calls... unless we have some analysis that shows they are all not needed)</p>\n</blockquote>\n<p>I believe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did do some profiling around this a year or two ago, but unfortunately I don't remember it being very conclusive; and, also unfortunately, I think this de-optimization for <code>panic=abort</code> was considered something of a nonstarter during previous discussions.</p>",
        "id": 244599972,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1625160117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/next.20steps/near/244594484\">said</a>:</p>\n<blockquote>\n<p>Aborting in the <code>eh_personality</code> of <code>libpanic_abort</code> should be enough to fix this soundness issue. It is also much easier to implement.</p>\n</blockquote>\n<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/86801\">https://github.com/rust-lang/rust/pull/86801</a></p>",
        "id": 244677532,
        "sender_full_name": "bjorn3",
        "timestamp": 1625217373
    }
]