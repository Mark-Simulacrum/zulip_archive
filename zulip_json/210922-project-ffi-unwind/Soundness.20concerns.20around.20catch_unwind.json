[
    {
        "content": "<p>Discussion <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping\">in the UCG</a> raised an interesting unwind-related concern: right now, it is legitimate (or at least, not unreasonable) for code to assume that every (Rust) function either returns or panics. Which means with <code>catch_unwind</code>, it'll definitely panic.<br>\ncrates like <code>take_mut</code> crucially rely on this and become unsound once there is a way for Rust code to unwind that is not caught by <code>catch_unwind</code>. I believe even <code>rayon</code> scoped threads would become unsound.</p>",
        "id": 189294544,
        "sender_full_name": "RalfJ",
        "timestamp": 1582881745
    },
    {
        "content": "<p>oh nvm I see <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> already <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Catching.20and.20resuming.20foreign.20exceptions\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/Catching.20and.20resuming.20foreign.20exceptions\">raised that here</a> <em>oops</em></p>",
        "id": 189294568,
        "sender_full_name": "RalfJ",
        "timestamp": 1582881788
    }
]