[
    {
        "content": "<p>I think it may be valuable to have a better understanding of how cross-language unwinding is understood by other language communities and how the designers of those languages expect it to work. This would help us see perspectives on the issue we might otherwise miss and could even have the more concrete benefit of informing design design decisions that would facilitate interop not just with C but with more modern systems languages.</p>\n<p>I've actually already had a few discussions along these lines, but more outreach might be good. </p>\n<p>Conversations I've started already, organized by language:</p>\n<ul>\n<li><strong>C++</strong> (and <strong>D</strong>)<ul>\n<li>Nick Lewycky: previously worked on LLVM for several years and is now working on Wasmer, which (from the outside) looks somewhat like Lucet. I've quoted him a few times in this project-group, e.g. \"FFI is not a sandbox.\" I've emailed him about this group, but I don't know if he will be interested in participating at all.</li>\n<li>Herb Sutter: chair of the C++ ISO committee member; I believe he also leads development of MSVC or did at one point. I emailed him some specific questions while working on the old RFCs, but I haven't emailed him again since the project group was formed. He told me about the cross-language error-handling proposal in the works for C and C++.</li>\n<li>Andrei Alexandrescu: another well-known C++ expert who currently works full-time on D. My first email to Mr Sutter was also addressed to Mr Alexandrescu, but I did not receive a response.</li>\n</ul>\n</li>\n<li>Zig<ul>\n<li>Andrew Kelley: author of Zig. Zig seems to me like a viable candidate to fully _replace_ C on future platforms; and in fact this can happen incrementally, because I learned the other day that when linking Zig programs against C code, Zig actually _compiles_ the C code rather than relying on a shared object. Andrew said he would be interested in discussing unwinding with us, but won't have time for about two weeks.</li>\n</ul>\n</li>\n</ul>\n<p>Some other languages that might provide good perspectives, and why they would be interesting to us specifically:</p>\n<ul>\n<li>Go: feature-minimalism, \"medium weight\" runtime (not a VM, but also not \"bare metal\")</li>\n<li>Ada: focus on safety</li>\n<li>Pony: capabilities-secure design, but with C FFI. Outside of FFI, \"all exceptions have defined semantics, and they are always handled.\" I think this is the most Rust-like set of design constraints of all the languages listed, and it would be good to know if the designers intend to \"protect\" Pony code from foreign exceptions in some way.</li>\n</ul>",
        "id": 180385809,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573428207
    },
    {
        "content": "<p>Seems useful and relevant to survey what other languages do, agreed</p>",
        "id": 180459796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573506267
    }
]