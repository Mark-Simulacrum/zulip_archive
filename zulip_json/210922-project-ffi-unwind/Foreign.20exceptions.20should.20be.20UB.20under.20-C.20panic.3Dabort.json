[
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s draft he says:</p>\n<blockquote>\n<p>Changing the behavior from <code>-Cpanic=unwind</code> to <code>-Cpanic=abort</code> should not cause Undefined Behavior.</p>\n</blockquote>",
        "id": 184715163,
        "sender_full_name": "Amanieu",
        "timestamp": 1578035758
    },
    {
        "content": "<p>I don't think that it is possible to guarantee this in practice.</p>",
        "id": 184715165,
        "sender_full_name": "Amanieu",
        "timestamp": 1578035760
    },
    {
        "content": "<p>The main issue is the granularity at which we can catch exceptions. We basically have 2 options:</p>\n<ul>\n<li>Catch only Rust panics. This is used by <code>catch_unwind</code>.</li>\n<li>Catch all types of exceptions. This is used by drop cleanups.</li>\n</ul>",
        "id": 184715224,
        "sender_full_name": "Amanieu",
        "timestamp": 1578035845
    },
    {
        "content": "<p>The only way to make foreign exceptions non-UB under -C panic=abort would be to catch all types of foreign exceptions around calls to potentially unwinding FFI functions and then abort.</p>",
        "id": 184715277,
        "sender_full_name": "Amanieu",
        "timestamp": 1578035933
    },
    {
        "content": "<p>However this means that we would abort on functions like <code>pthread_exit</code> and even <code>longjmp</code> (on Windows).</p>",
        "id": 184715289,
        "sender_full_name": "Amanieu",
        "timestamp": 1578035973
    },
    {
        "content": "<p>The current consensus is that unwinding across Rust code is allowed if there is nothing to drop in the unwound frames (i.e. unwinding is equivalent to <code>longjmp</code>). However if we made foreign exceptions abort under -C panic=abort then these cases would no longer work.</p>",
        "id": 184715355,
        "sender_full_name": "Amanieu",
        "timestamp": 1578036080
    },
    {
        "content": "<p>Or to rephrase the question: is unwinding allowed under -C panic=abort if there are no destructors in the unwound frames?</p>",
        "id": 184715401,
        "sender_full_name": "Amanieu",
        "timestamp": 1578036128
    },
    {
        "content": "<p>My position would be to just say that unwinding into code compiled with -C panic=abort is UB if the unwind would have run any destructors. This matches the semantics of C++ code compiled with <code>-fno-exceptions</code>.</p>",
        "id": 184715419,
        "sender_full_name": "Amanieu",
        "timestamp": 1578036211
    },
    {
        "content": "<p>One option that would work is to keep emitting drop code but just replacing the contents with a call to <code>abort</code>. This allows foreign unwinding to work fine through frames with no destructors, but aborts if any destructors are found. However you then lose the code size benefits.</p>",
        "id": 184715671,
        "sender_full_name": "Amanieu",
        "timestamp": 1578036612
    },
    {
        "content": "<p>In summary, the 3 options for -C panic=abort are:</p>\n<ol>\n<li>Foreign exceptions are UB if they would have caused a destructor to run.</li>\n<li>Wrap FFI calls and abort if an exception leaks out of them. This breaks <code>longjmp</code> and <code>pthread_exit</code>.</li>\n<li>Keep emitting destructors but have them simply call <code>abort</code>. This will increase code size.</li>\n</ol>",
        "id": 184715887,
        "sender_full_name": "Amanieu",
        "timestamp": 1578036997
    },
    {
        "content": "<p>For option 3, we might be able to make up the code size in the common case of \"few unknown calls\" by only emitting aborting destructors once for known call stacks (e.g., if you know everything will hit main without getting caught, then you can have the abort on unwind in main, right?)</p>",
        "id": 184723881,
        "sender_full_name": "simulacrum",
        "timestamp": 1578047597
    },
    {
        "content": "<p>you'd need to be a bit more careful -- it's not just call stack, I guess, but more so \"destructor containing stack\"</p>",
        "id": 184723948,
        "sender_full_name": "simulacrum",
        "timestamp": 1578047660
    },
    {
        "content": "<blockquote>\n<p>One option that would work is to keep emitting drop code but just replacing the contents with a call to <code>abort</code>. This allows foreign unwinding to work fine through frames with no destructors, but aborts if any destructors are found. However you then lose the code size benefits.</p>\n</blockquote>\n<p>Well, you keep some, right?</p>",
        "id": 184734133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578058981
    },
    {
        "content": "<p>I think it's not only longjmp but even segfaults that trigger unwinding in Windows (<span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> said something like that to me at one point) -- you are correct that we need to consider that.</p>",
        "id": 184734178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578059039
    },
    {
        "content": "<p>Is it possible to identify those cases (e.g., by checking the type of the exception) and allow them to continue unwinding, while intercepting other things?</p>",
        "id": 184734299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578059135
    },
    {
        "content": "<p>I sort of remember assuming something like this at some point but forgetting about it.</p>",
        "id": 184734432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578059272
    },
    {
        "content": "<p>We don't really have control over that since we are using _CxxFrameHandler3 as our personality function.</p>",
        "id": 184735987,
        "sender_full_name": "Amanieu",
        "timestamp": 1578060510
    },
    {
        "content": "<p>Control over what exceptions we intercept?</p>",
        "id": 184736386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578060875
    },
    {
        "content": "<p>Presumably we could also test in the shim, though obviously that would make it more complex?</p>",
        "id": 184736619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061110
    },
    {
        "content": "<p>I'm pondering how much this wrinkle changes things. </p>\n<p>In particular, one of the advantages of the \"C unwind\" variant is that it identifies the \"possible unwinding\" cases more narrowly (though just <em>how</em> narrow such cases are is less than clear to me, given this annoying wrinkle of pthreads triggering unwinding from functions like <code>read</code>). </p>\n<p>If we decide that foreign exceptions executing dtors if just UB, then this doesn't matter one way or the other.</p>\n<p>If we do insert shims, it might matter, but only if we can put the shim at the <em>call site</em>. If, as you point out, we have to potentially catch the unwinding at any point, that's not helpful at all.</p>",
        "id": 184736736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061207
    },
    {
        "content": "<p>I had a look through LLVM and it seems that it sets a flag on the generated function to make it ignore all SEH exceptions except longjmp.</p>",
        "id": 184736982,
        "sender_full_name": "Amanieu",
        "timestamp": 1578061452
    },
    {
        "content": "<p>So longjmp and C++ exceptions will run destructors, but SEH exceptions from segfaults won't.</p>",
        "id": 184737064,
        "sender_full_name": "Amanieu",
        "timestamp": 1578061545
    },
    {
        "content": "<p>LLVM does this? Or our LLVM backend does this?</p>",
        "id": 184737198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061657
    },
    {
        "content": "<p>Do C++ exceptions not count as SEH exceptions?</p>",
        "id": 184737214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061681
    },
    {
        "content": "<p>(I'm trying to understand what you wrote; it seems like \"ignores all SEH exceptions\" would also mean C++ exceptions are ignored)</p>",
        "id": 184737273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061713
    },
    {
        "content": "<p>Another option, incidentally, would be to say that \"unwinding that may execute dtors is UB\" (as you said) but -- in debug mode -- to make those dtors abort</p>",
        "id": 184737427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061831
    },
    {
        "content": "<p>whereas in release mode they are simply compiled out</p>",
        "id": 184737444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061847
    },
    {
        "content": "<blockquote>\n<p>So longjmp and C++ exceptions will run destructors, but SEH exceptions from segfaults won't.</p>\n</blockquote>\n<p>This isn't true in our code, right? Or at least, with <code>-Cpanic=abort</code>, we strip out all the landing pads and mark everything as \"no unwind\", so presumably our destructors don't run</p>",
        "id": 184737497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578061896
    },
    {
        "content": "<p>Sorry, I mean that when generating EH tables, the LLVM backend sets a flag to indicate that only C++ exception and longjmp are handled. This flag is read by _CxxFrameHandler3 and it indicates that all SEH exceptions except C++ exceptions and longjmp are ignored.</p>",
        "id": 184737709,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062071
    },
    {
        "content": "<p>I see.</p>",
        "id": 184737748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062116
    },
    {
        "content": "<p>Thanks</p>",
        "id": 184737789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062160
    },
    {
        "content": "<p>I'm presuming here that we want longjmp to continue working correctly (i.e. it is well-defined to unwind through frames with no destructors) on both panic=unwind and panic=abort.</p>",
        "id": 184737900,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062228
    },
    {
        "content": "<p>Also, we want the same to apply to pthread_exit (on Linux): it should be able to safely unwind through Rust code as long as that code has no destructors.</p>",
        "id": 184738024,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062321
    },
    {
        "content": "<p>Yes, I think that is correct.</p>",
        "id": 184738230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062471
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> another option would be that the \"abort shim\" inspects the inspection that is thrown</p>",
        "id": 184738237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062485
    },
    {
        "content": "<p>and checks if it originates from longjmp</p>",
        "id": 184738242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062491
    },
    {
        "content": "<p>If so, it is \"re-raised\"</p>",
        "id": 184738244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062495
    },
    {
        "content": "<p>and otherwise, we abort</p>",
        "id": 184738248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062498
    },
    {
        "content": "<p>it makes the shim more complex of course</p>",
        "id": 184738251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062506
    },
    {
        "content": "<p>but it seems \"locallized\" to the call site at least, rather than being infectious?</p>",
        "id": 184738256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062516
    },
    {
        "content": "<blockquote>\n<p>Yes, I think that is correct.</p>\n</blockquote>\n<p>to be clear, I think it's correct that we want <code>longjmp</code> to work</p>",
        "id": 184738302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062527
    },
    {
        "content": "<p><code>pthread_exit</code> is a really interesting wrinkle that I don't know how to think about</p>",
        "id": 184738310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062540
    },
    {
        "content": "<p>I don't think it's all that useful to guarantee that it works \"only if there are no dtors\"</p>",
        "id": 184738326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062551
    },
    {
        "content": "<p>well, I mean, I guess it's potentially useful</p>",
        "id": 184738340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062567
    },
    {
        "content": "<p>Actually what I meant is \"it works <em>under -C panic=abort</em> only if there are no dtors\".</p>",
        "id": 184738368,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062598
    },
    {
        "content": "<p>right</p>",
        "id": 184738372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062605
    },
    {
        "content": "<p>Under -C panic=unwind it would always work, and run destructors while unwinding.</p>",
        "id": 184738393,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062626
    },
    {
        "content": "<p>on windows</p>",
        "id": 184738395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062630
    },
    {
        "content": "<p>pthread_exit is on Linux</p>",
        "id": 184738400,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062638
    },
    {
        "content": "<p>I presume longjmp over a frame with dtors would be UB, as it is in C++</p>",
        "id": 184738440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062644
    },
    {
        "content": "<p>Yes</p>",
        "id": 184738455,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062664
    },
    {
        "content": "<p>(but <em>on windows</em> it would potentially be guaranteed to unwind and execute dtors)</p>",
        "id": 184738461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062669
    },
    {
        "content": "<p>Also true</p>",
        "id": 184738469,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062675
    },
    {
        "content": "<p><code>pthread_exit</code> is kind of different</p>",
        "id": 184738470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062676
    },
    {
        "content": "<p>in that you might want to declare that it executes dtors with <code>-Cpanic=unwind</code> , but is UB with <code>-Cpanic=abort</code> unless there are no dtors</p>",
        "id": 184738488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062704
    },
    {
        "content": "<p>The basic rule is: if you unwind across a Rust frame, you <em>must</em> execute destructors.</p>",
        "id": 184738491,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062705
    },
    {
        "content": "<p>Yes, this rule must be guaranteed for sure.</p>",
        "id": 184738496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062715
    },
    {
        "content": "<p>Incidentally, musl's pthread_exit which doesn't unwind is still UB to use if there are frames with destructors on the stack, since pthread_exit frees the stack which implicitly acts as unwinding the frames without running their destructors.</p>",
        "id": 184738588,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062781
    },
    {
        "content": "<p>Presumably also true in C++</p>",
        "id": 184738663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578062863
    },
    {
        "content": "<p>I don't think it is explicitly said in the C++ standard (since the C++ standard library doesn't have an equivalent of pthread_exit), but probably true.</p>",
        "id": 184738831,
        "sender_full_name": "Amanieu",
        "timestamp": 1578062999
    },
    {
        "content": "<blockquote>\n<p>The basic rule is: if you unwind across a Rust frame, you <em>must</em> execute destructors.</p>\n</blockquote>\n<p>mostly I imagine this same rule applies in C++</p>",
        "id": 184738893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578063019
    },
    {
        "content": "<p>C++ does explicitly say that skipping destructors with longjmp is UB.</p>",
        "id": 184739023,
        "sender_full_name": "Amanieu",
        "timestamp": 1578063123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I updated the <a href=\"https://hackmd.io/PMlTBQS2T1i_a3lBW0348g?view#To-avoid-UB--Cpanicabort-will-require-some-shims-if-we-permit-foreign-exceptions-that-did-not-originate-from-a-Rust-panic\" target=\"_blank\" title=\"https://hackmd.io/PMlTBQS2T1i_a3lBW0348g?view#To-avoid-UB--Cpanicabort-will-require-some-shims-if-we-permit-foreign-exceptions-that-did-not-originate-from-a-Rust-panic\">corresponding hackmd section</a>, take a look</p>",
        "id": 184739940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578063779
    },
    {
        "content": "<p>A few typos: \"land pads\" \"cod\"</p>",
        "id": 184740676,
        "sender_full_name": "Amanieu",
        "timestamp": 1578064326
    },
    {
        "content": "<p>Mostly correct</p>",
        "id": 184740700,
        "sender_full_name": "Amanieu",
        "timestamp": 1578064344
    },
    {
        "content": "<p>thanks</p>",
        "id": 184744223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578066991
    },
    {
        "content": "<p>my bluetooth keyboard is dying a bit I think :)</p>",
        "id": 184744226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578066997
    },
    {
        "content": "<p>some keys I have to press a few times or they don't register... leads to typos like \"cod\" :)</p>",
        "id": 184744246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578067013
    },
    {
        "content": "<p>(although I'm plenty prone to typos with any keyboard...)</p>",
        "id": 184744269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578067030
    },
    {
        "content": "<p>I was surprised <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> to see you talking about <code>pthread_exit</code>; I thought it was <code>pthread_cancel</code> that sometimes used unwinding</p>",
        "id": 184744393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578067105
    },
    {
        "content": "<p>I don't see much discussion of this in <a href=\"http://man7.org/linux/man-pages/man3/pthread_exit.3.html\" target=\"_blank\" title=\"http://man7.org/linux/man-pages/man3/pthread_exit.3.html\">the man page</a></p>",
        "id": 184744422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578067130
    },
    {
        "content": "<blockquote>\n<p>The current consensus is that unwinding across Rust code is allowed if there is nothing to drop in the unwound frames (i.e. unwinding is equivalent to longjmp)</p>\n</blockquote>\n<p>There is consensus about this.</p>",
        "id": 184744639,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067257
    },
    {
        "content": "<p>However, there is also consensus that there are some destructors that it is not incorrect not to call.</p>",
        "id": 184744663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067279
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">longjmp</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 184744758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067340
    },
    {
        "content": "<p>In fact, there are actually very few destructors that must be called for safety.</p>",
        "id": 184744791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067377
    },
    {
        "content": "<p>Some examples would be <code>Pin</code>, <code>crossbeam::scope</code>, etc.</p>",
        "id": 184744805,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067392
    },
    {
        "content": "<p>For example, not calling the destructor of a <code>Vec</code> leaks the vector, but that's something  that we already say its safe.</p>",
        "id": 184744846,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067422
    },
    {
        "content": "<p>This is orthogonal to whether we define not calling those constructors as UB or not. We can artificially say that deallocating a stack variable without calling its destructor is UB, even if, depending on the actual destructor, the operation is actually safe.</p>",
        "id": 184744966,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/pthread_exit.c#L24\" target=\"_blank\" title=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/pthread_exit.c#L24\">pthread_exit</a> calls <a href=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/pthreadP.h#L302\" target=\"_blank\" title=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/pthreadP.h#L302\">__do_cancel</a> which calls <a href=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/unwind.c#L111\" target=\"_blank\" title=\"https://github.com/bminor/glibc/blob/cf4dfd461725b6dbe6f27fbd16913f2c6c5cf7c5/nptl/unwind.c#L111\">__pthread_unwind</a> which calls _Unwind_ForcedUnwind.</p>",
        "id": 184745116,
        "sender_full_name": "Amanieu",
        "timestamp": 1578067617
    },
    {
        "content": "<p>I'm not sure this UB buys us any optimizations, but this would maybe buy us a more simpler specification.</p>",
        "id": 184745125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067627
    },
    {
        "content": "<p>I say maybe because it is, for example, possible to construct a <code>Pin</code> on the heap, and deallocate it without running its destructor using <code>unsafe</code> code. So <code>Pin</code> already documents that running its destructor before the <code>Pin</code> is deallocated is required for safety.</p>",
        "id": 184745181,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067675
    },
    {
        "content": "<p>And crossbeam scope should probably do the same if its API allows that to happen.</p>",
        "id": 184745527,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578067922
    },
    {
        "content": "<blockquote>\n<p>We don't really have control over that since we are using _CxxFrameHandler3 as our personality function.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> </p>\n<p>Is writing our own personality function possible/feasible? Would that simplify the problem at all?</p>",
        "id": 184868779,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578264452
    },
    {
        "content": "<p>Eh, maybe, but difficult. A lot of the SEH stuff is undocumented APIs that LLVM had to reverse engineer.</p>",
        "id": 184869071,
        "sender_full_name": "Amanieu",
        "timestamp": 1578264886
    },
    {
        "content": "<p>On the other hand, we need to decide whether a C++ exception is allowed to unwind across Rust frames that have no destructors.</p>",
        "id": 184869080,
        "sender_full_name": "Amanieu",
        "timestamp": 1578264919
    },
    {
        "content": "<p>(under -C panic=abort)</p>",
        "id": 184869085,
        "sender_full_name": "Amanieu",
        "timestamp": 1578264930
    },
    {
        "content": "<p>We've got some consensus that we should allow this for longjmp and pthread_exit (forced unwind) at least, since those work with C code.</p>",
        "id": 184869133,
        "sender_full_name": "Amanieu",
        "timestamp": 1578264970
    },
    {
        "content": "<p>You've mentioned \"forced unwind\" before (and Alex Crichton mentioned it in the PR preventing <code>-Cpanic=abort</code> from aborting on <code>longjmp</code>). Is that standard ABI nomenclature?</p>",
        "id": 184869650,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578265806
    },
    {
        "content": "<p>My impression (from that PR) was that forced unwinding is reasonably simple to detect</p>",
        "id": 184869661,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578265847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Come to think of it, I have a more fundamental question. Is the <code>-Cpanic=abort</code> issue actually related to the question of whether or not to introduce <code>\"C unwind\"</code>? Isn't it something we'll need to address either way?</p>",
        "id": 184870456,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578267343
    },
    {
        "content": "<p>If the way we handle <code>-Cpanic=abort</code> isn't directly related to the <code>\"C unwind\"</code> question, then I don't think that discussion belongs in the blog post, which should remain focused on <code>\"C/unwind\"</code></p>",
        "id": 184870506,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1578267395
    },
    {
        "content": "<p>It is tangentially related since one of the arguments for \"C unwind\" was that it with panic=abort the compiler would only have to add catch blocks to \"C unwind\" functions instead of all \"C\" functions.</p>",
        "id": 184890246,
        "sender_full_name": "Amanieu",
        "timestamp": 1578302334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> why are we using that particular personality function ?</p>",
        "id": 185006040,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578400476
    },
    {
        "content": "<p>There is, e.g., <code>_CxxFrameHandler4</code></p>",
        "id": 185006072,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578400515
    },
    {
        "content": "<p>Because that's the only one that LLVM currently supports.</p>",
        "id": 185006900,
        "sender_full_name": "Amanieu",
        "timestamp": 1578401316
    },
    {
        "content": "<p>:/</p>",
        "id": 185009352,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578403399
    },
    {
        "content": "<blockquote>\n<p>Come to think of it, I have a more fundamental question. Is the <code>-Cpanic=abort</code> issue actually related to the question of whether or not to introduce <code>\"C unwind\"</code>? Isn't it something we'll need to address either way?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> Yes, I believe it is something we have to address either way, and the blog post tries to emphasize that</p>",
        "id": 185063686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437611
    }
]