[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/UB.20to.20skip.20destructors/near/201472007\">said</a>:</p>\n<blockquote>\n<p>I guess there is a discussion to be had if this is an optimization that we want. I am really proud that Stacked Borrows can provide it, but there's clearly a trade-off. OTOH, this is an optimization that can benefit all code vs a rather niche feature. Still, worth a discussion it seems.</p>\n</blockquote>\n<p>I believe we're ready to have that discussion now. We published a <a href=\"https://blog.rust-lang.org/inside-rust/2021/01/26/ffi-unwind-longjmp.html\">blog post</a> outlining how the annotation-based support for <code>longjmp</code> would work, but did not receive any responses to it over the course of two weeks. So, in the weekly meeting topic, we're wondering whether this optimization is actually worth adding the extra complexity of an annotation.</p>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> may also want to contribute to the discussion.</p>",
        "id": 226054427,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1613076091
    },
    {
        "content": "<p>Everything I know about <code>longjmp</code> I learned in this blog: <a href=\"https://developer.r-project.org/Blog/public/2019/03/28/use-of-c-in-packages/index.html\">https://developer.r-project.org/Blog/public/2019/03/28/use-of-c-in-packages/index.html</a></p>",
        "id": 226063073,
        "sender_full_name": "oliver",
        "timestamp": 1613080257
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/weekly.20meeting/near/226051690\">wrote</a> that the \"only cost\" with longjmp is not being able to move things to after calls -- that seems correct to me, except that I think this is kind of a big deal. We've been working hard to <em>enable</em> those sort of transformations. Now, you could argue that this is unnecessary, especially given that <code>panic!</code> is something we have to contend with!</p>",
        "id": 227581653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164702
    },
    {
        "content": "<p>How can we make this discussion more evidence-based and less assertion-based? :)</p>",
        "id": 227581739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164734
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>)</p>",
        "id": 227581757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164739
    },
    {
        "content": "<p>With my \"works around backend\" hat on, I would quite hate having to keep possibility of longjmp in my head rather than expressed explicitly in code.</p>",
        "id": 227598035,
        "sender_full_name": "nagisa",
        "timestamp": 1614173583
    },
    {
        "content": "<p>I'm not sure that's quite true, unless you consider observable behaviour (IE. volatile access, I/O).<br>\nThe C standard specifies that after a longjmp, any non-volatile object (might also be constrained to automatic storage duration) modified since the corresponding setjmp has an indeterminate value, which translates to uninit in rust. So if you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"p\">{</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)}</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"p\">{</span><span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then in the else branch, x is uninit, so the assignment can be moved, or even removed. </p>\n<p>Of course, this presents a slightly different problem (in that x is now uninit, which is currently UB). Though if indeterminate is taken here as unspecified, it would be fine (but llvm may or may not be ok with that interpretation).</p>",
        "id": 227616973,
        "sender_full_name": "Connor Horman",
        "timestamp": 1614181024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227598035\">said</a>:</p>\n<blockquote>\n<p>With my \"works around backend\" hat on, I would quite hate having to keep possibility of longjmp in my head rather than expressed explicitly in code.</p>\n</blockquote>\n<p>yes</p>",
        "id": 227626714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614183888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> that's interesting; there are I suppose other potential ways to go about specifying that we could do code motion</p>",
        "id": 227626866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614183928
    },
    {
        "content": "<p>it would require, I think, sacrificing some of the \"ease of use\" that stacked borrows is shooting for</p>",
        "id": 227626908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614183941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227598035\">said</a>:</p>\n<blockquote>\n<p>With my \"works around backend\" hat on, I would quite hate having to keep possibility of longjmp in my head rather than expressed explicitly in code.</p>\n</blockquote>\n<p>I agree with this (which is why I called the C status quo of \"<code>longjmp</code> can happen anywhere, any time\" a \"wart\"), but my concern is that it will be one more pain point in the \"playing nice with existing systems software\" domain.</p>",
        "id": 227628098,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614184298
    },
    {
        "content": "<p>(To be clear: this is a fear, not an appraisal. I agree with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that we need to find a way to make this discussion more evidence-based, and I would love to see evidence that my fear is misplaced, but I don't yet see a path toward gaining that confidence.)</p>",
        "id": 227628936,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614184563
    },
    {
        "content": "<p>I suspect that actual usage of longjmp will be sufficiently rare that it seems perfectly reasonable to require either annotation or a compiler flag.</p>",
        "id": 227637725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614187481
    },
    {
        "content": "<p>The programs that need it really need it.</p>",
        "id": 227637758,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614187493
    },
    {
        "content": "<p>But at the same time, the fraction of programs, even systems programs, using it is quite small.</p>",
        "id": 227637818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614187515
    },
    {
        "content": "<p>An alternative definition is that the contents of a <code>&amp;mut</code> are undefined after a <code>longjmp</code>: after all the <code>&amp;mut</code> promised exclusive access for the duration of the function but the <code>longjmp</code> violated that expectation by returning control early.</p>",
        "id": 227660225,
        "sender_full_name": "Amanieu",
        "timestamp": 1614196138
    },
    {
        "content": "<p>I feel like I don't want the contents to be undefined</p>",
        "id": 227667024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198738
    },
    {
        "content": "<p>people will wind up relying on them</p>",
        "id": 227667048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198747
    },
    {
        "content": "<p>I want them to be defined to be what they should be</p>",
        "id": 227667059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198751
    },
    {
        "content": "<p>and I just want the compiler to know when a longjmp happens</p>",
        "id": 227667080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198758
    },
    {
        "content": "<p>since, as you said, it's unusual</p>",
        "id": 227667089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198761
    },
    {
        "content": "<p>maybe the question: what is the case <em>against</em> an annotation?</p>",
        "id": 227667131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198774
    },
    {
        "content": "<p>we should probably make a little doc to collect these things</p>",
        "id": 227667157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614198781
    },
    {
        "content": "<p>The case against, I think, is that there is absolutely nothing the compiler can do to detect when <code>longjmp</code> actually happens, without like... reading C code, or guessing based on function signatures. So if an annotation is required for correctness, then there is ample opportunity for UB with un-annotated functions.</p>",
        "id": 227676946,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614202496
    },
    {
        "content": "<p>Keep in mind that <code>pthread_exit</code> on non-glibc will directly exit the thread, which is equivalent to longjmp. So we would need this annotation for every FFI call which can potentially cause a thread exit. This includes all libc functions which are cancellable.</p>",
        "id": 227698545,
        "sender_full_name": "Amanieu",
        "timestamp": 1614212285
    },
    {
        "content": "<p>I think that's okay, as long as libc functions are typically called via the <code>libc</code> crate and that crate updates to use the annotations.</p>",
        "id": 227699724,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614213059
    },
    {
        "content": "<p>I also tend to think that it may be worthwhile to make any optimizations that would invalidate un-annotated code using <code>longjmp</code> opt-in, at least up until an edition boundary.</p>",
        "id": 227699956,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614213220
    },
    {
        "content": "<p>I.e. I think we would ideally support the annotation itself in all editions, but 2015 and 2018 would have a guarantee that <code>longjmp</code> across POFs wouldn't be UB. (Or maaaaaaybe there could be a compiler flag for it, though that's probably more trouble than it's worth.)</p>",
        "id": 227700071,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614213299
    },
    {
        "content": "<p>That sounds reasonable.</p>",
        "id": 227796778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614271074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227699956\">said</a>:</p>\n<blockquote>\n<p>I also tend to think that it may be worthwhile to make any optimizations that would invalidate un-annotated code using <code>longjmp</code> opt-in, at least up until an edition boundary.</p>\n</blockquote>\n<p>does LLVM perform any such optimizations? If yes, it might be had to make this opt-in.</p>",
        "id": 227817887,
        "sender_full_name": "RalfJ",
        "timestamp": 1614279409
    },
    {
        "content": "<p>I can't imagine it would, since in C++ it's always legal to <code>longjmp</code> over POFs.</p>",
        "id": 227818126,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614279493
    },
    {
        "content": "<p>and C++ doesn't have C-style rules like \"all these values become indeterminate\"? Because if it does, then LLVM would well be in its right to \"invalidate\" such code, at least in the sense that the values it works on become all messed up. I'd be rather surprised if LLVM doesn't do such optimizations.</p>",
        "id": 227818178,
        "sender_full_name": "RalfJ",
        "timestamp": 1614279514
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that rules like \"all values X become indeterminate/uninit/... on longjmp\" are massive footguns. It is really hard to program correctly against those rules, and really easy to miss some variable and accidentally rely on its value. I could imagine implementing something like this in Miri (so making this rule operational is not the main issue), but still it'd be hard to make sure one gets this right (such low-level code often cannot run in Miri since it interacts with things Miri cannot emulate).</p>",
        "id": 227818310,
        "sender_full_name": "RalfJ",
        "timestamp": 1614279560
    },
    {
        "content": "<p>To be honest I don't quite understand the C rule, but I would expect that C++ has at least as much UB as C concerning <code>longjmp</code>.</p>",
        "id": 227818507,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614279616
    },
    {
        "content": "<p>So let me backtrack on that \"can't image\" phrasing a bit <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 227818554,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614279636
    },
    {
        "content": "<p>also FWIW, edition-specific optimization flags are... tricky, since optimizations work on MIR/LLVM IR where code from many editions can be mixed (e.g. after inlining)</p>",
        "id": 227818759,
        "sender_full_name": "RalfJ",
        "timestamp": 1614279713
    },
    {
        "content": "<p>I was imagining that prohibiting such optimizations would be equivalent to marking all functions with the \"cancelable\" annotation. I.e., prior to the 2021 edition, the \"cancelable\" annotation would only be useful for diagnostics and wouldn't impact codegen.</p>",
        "id": 227819275,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614279900
    },
    {
        "content": "<p>ISO C11:</p>\n<blockquote>\n<p>except  that  the  values  ofobjects  of  automatic  storage  duration  that  are  local  to  the  function  containing  theinvocation  of  the  correspondingsetjmpmacro  that  do  not  have  volatile-qualified  typeand  have  been  changed  between  thesetjmpinvocation  andlongjmpcall  areindeterminate.</p>\n</blockquote>",
        "id": 227820783,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614280479
    },
    {
        "content": "<p>(7.13.2.3)</p>",
        "id": 227820820,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614280494
    },
    {
        "content": "<p>oh jeeze, sorry about the formatting there</p>",
        "id": 227820857,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614280508
    },
    {
        "content": "<p>Since <code>setjmp</code> can't be used via something like <code>return setjmp(env)</code>, a Rust invocation of <code>setjmp</code> would, I think, need to pass a callback in order to invoke further Rust code prior to <code>longjmp</code>. So I think the only place where variables are left in an indeterminate state is in the C code itself...?</p>",
        "id": 227822067,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614280965
    },
    {
        "content": "<p>Which would of course be a problem for Rust if the C code passes those variables to the Rust callback, so that should probably be illegal</p>",
        "id": 227822136,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614280991
    },
    {
        "content": "<p>But I think any variables defined by Rust would not be invalidated by the C runtime behavior. At least, I don't see any reason in the C standard for that to happen.</p>",
        "id": 227822218,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614281026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227822067\">said</a>:</p>\n<blockquote>\n<p>Since <code>setjmp</code> can't be used via something like <code>return setjmp(env)</code>, a Rust invocation of <code>setjmp</code> would, I think, need to pass a callback in order to invoke further Rust code prior to <code>longjmp</code>. So I think the only place where variables are left in an indeterminate state is in the C code itself...?</p>\n</blockquote>\n<p>...or the C itself could invoke Rust. That case also seems relatively tame, though.</p>",
        "id": 227822624,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614281157
    },
    {
        "content": "<blockquote>\n<p>and C++ doesn't have C-style rules like \"all these values become indeterminate\"? Because if it does, then LLVM would well be in its right to \"invalidate\" such code, at least in the sense that the values it works on become all messed up. I'd be rather surprised if LLVM doesn't do such optimizations.</p>\n</blockquote>\n<p>According to <a href=\"https://eel.is/c++draft/csetjmp.syn\">https://eel.is/c++draft/csetjmp.syn</a>, it's just C's setjmp.h, but it further restricts longjmp to those that cross \"pof\"s.</p>\n<blockquote>\n<p>Since <code>setjmp</code> can't be used via something like <code>return setjmp(env)</code>, a Rust invocation of <code>setjmp</code> would, I think, need to pass a callback in order to invoke further Rust code prior to <code>longjmp</code>. So I think the only place where variables are left in an indeterminate state is in the C code itself...?</p>\n</blockquote>\n<p>Ah yeah, that's true (unless you grab a compiler builtin version from somewhere, and call it).</p>",
        "id": 227842969,
        "sender_full_name": "Connor Horman",
        "timestamp": 1614288915
    },
    {
        "content": "<p>In C99 and onward, C has essentially the same limitation, because apparently variable-length arrays are heap-allocated and therefore freed by something akin to a destructor. (TIL; I thought C somehow cleverly supported variable-size stack elements.)</p>",
        "id": 227847362,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614290794
    },
    {
        "content": "<p>Actually, that's not quite true.<br>\nJumping into the scope of a VLA after leaving it is UB, but crossing the scopes of other VLAs is not (it's just unspecified whether those get deallocated when you do so). (Also, VLAs can be stack allocated, and they can be heap allocated)</p>",
        "id": 227849729,
        "sender_full_name": "Connor Horman",
        "timestamp": 1614291794
    },
    {
        "content": "<p>Ah. Okay, interesting.</p>",
        "id": 227851001,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614292424
    },
    {
        "content": "<p>You can also register cleanups in GCC with <code>__cleanup__</code> which probably doesn't interact at all well with setjmp/longjmp</p>",
        "id": 227860860,
        "sender_full_name": "nagisa",
        "timestamp": 1614297840
    },
    {
        "content": "<p><code>__cleanup__</code> is basically a C++ destructor. It is ignored by <code>longjmp</code>.</p>",
        "id": 227956637,
        "sender_full_name": "Amanieu",
        "timestamp": 1614358580
    },
    {
        "content": "<p>The <code>setjmp</code> API is a horribly hack that only exists because C doesn't have closures. A safe Rust API for it would be <code>fn setjmp(f: impl FnOnce(JmpBuf&lt;'_, E&gt;) -&gt; T) -&gt; Result&lt;T, E&gt;</code>.</p>",
        "id": 227956947,
        "sender_full_name": "Amanieu",
        "timestamp": 1614358728
    },
    {
        "content": "<p>However this is not the issue here (we're never going to support the <code>setjmp</code> hackery in Rust anyways). The issue is essentially: <code>longjmp</code> skips destructors, so it is equivalent to an unwind if there are no destructors. Is the Rust compiler allowed to insert destructors out of thin air (e.g. by sinking code past a function call into both the unwind and normal paths).</p>",
        "id": 227957258,
        "sender_full_name": "Amanieu",
        "timestamp": 1614358843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227957258\">said</a>:</p>\n<blockquote>\n<p>However this is not the issue here (we're never going to support the <code>setjmp</code> hackery in Rust anyways). The issue is essentially: <code>longjmp</code> skips destructors, so it is equivalent to an unwind if there are no destructors. Is the Rust compiler allowed to insert destructors out of thin air (e.g. by sinking code past a function call into both the unwind and normal paths).</p>\n</blockquote>\n<p>This is equivalent to \"can the compiler turn POFs into non-POFs\", right? Or am I misunderstanding?</p>",
        "id": 227963461,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614361412
    },
    {
        "content": "<p>Yes, essentially</p>",
        "id": 227969700,
        "sender_full_name": "Amanieu",
        "timestamp": 1614363783
    },
    {
        "content": "<p>So, I think the answer I lean toward is: in 2015 and 2018, no. In 2021 and onward, yes, unless a function is annotated \"cancelable\".</p>",
        "id": 227970238,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614364025
    },
    {
        "content": "<p>(and in 2015 and 2018, if the compiler can prove that the function can't be present in a stack where arbitrary C code might be invoked before the function returns, it can go ahead and insert such destructors anyway)</p>",
        "id": 227970553,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614364168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227957258\">said</a>:</p>\n<blockquote>\n<p>However this is not the issue here (we're never going to support the <code>setjmp</code> hackery in Rust anyways). The issue is essentially: <code>longjmp</code> skips destructors, so it is equivalent to an unwind if there are no destructors. Is the Rust compiler allowed to insert destructors out of thin air (e.g. by sinking code past a function call into both the unwind and normal paths).</p>\n</blockquote>\n<p>it's not just this</p>",
        "id": 228045984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614417709
    },
    {
        "content": "<p>because if you have <code>-Cpanic=abort</code>, then it's not about inserting destructors</p>",
        "id": 228046022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614417724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227818759\">said</a>:</p>\n<blockquote>\n<p>also FWIW, edition-specific optimization flags are... tricky, since optimizations work on MIR/LLVM IR where code from many editions can be mixed (e.g. after inlining)</p>\n</blockquote>\n<p>This doesn't seem right, because of what <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> said -- in the MIR, functions require an annotation, but the compiler inserts it on your behalf during MIR lowering.</p>",
        "id": 228046038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614417772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227698545\">said</a>:</p>\n<blockquote>\n<p>Keep in mind that <code>pthread_exit</code> on non-glibc will directly exit the thread, which is equivalent to longjmp. So we would need this annotation for every FFI call which can potentially cause a thread exit. This includes all libc functions which are cancellable.</p>\n</blockquote>\n<p>It feels to me like putting burdens on folks who use <code>pthread_exit</code> is ok. You already have to be very careful on how you use this. I guess, like <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> said, that this can be handled by a central abstraction as well.</p>",
        "id": 228046126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614417880
    },
    {
        "content": "<p>I'm feeling like this discussion has gone long enough that it'd be useful to have a write-up.</p>",
        "id": 228046133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614417897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/cost.20of.20supporting.20longjmp.20without.20annotations/near/227822067\">said</a>:</p>\n<blockquote>\n<p>Since <code>setjmp</code> can't be used via something like <code>return setjmp(env)</code>, a Rust invocation of <code>setjmp</code> would, I think, need to pass a callback in order to invoke further Rust code prior to <code>longjmp</code>. So I think the only place where variables are left in an indeterminate state is in the C code itself...?</p>\n</blockquote>\n<p>So setjmp is only \"toxic\" to local variables in the function that invokes it, but not in other functions? that makes no sense at all to me, why would outlining make any difference here?</p>",
        "id": 228054743,
        "sender_full_name": "RalfJ",
        "timestamp": 1614428143
    },
    {
        "content": "<p>Hm, maybe because they may or may not be captured and restored restored by the jumpbuf? I don't know. I agree it doesn't seem to make much sense.</p>",
        "id": 228060627,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614434994
    },
    {
        "content": "<p>That's all that the standard calls out in that section, at least.</p>",
        "id": 228060823,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1614435169
    }
]