[
    {
        "content": "<p>So I was thinking about how to measure the impact of a proposal where the C ABI permits unwinding but -- if we are <code>-Cpanic=abort</code> -- we abort if unwinding actually occurs (versus UB).</p>\n<p>I think the way to do this would be to modify the <code>no_landing_pads</code> transformation. Right now, it just removes all landing pads. I think what we would actually want is to check if this is a function call and -- in the case where it is -- inspect the ABI and callee. If the ABI is not Rust (or Rust call), and the callee is not known, then we would instead rewrite the unwind to branch to a block with <code>TerminatorKind::Abort</code>.</p>\n<p>We might or might not have such a block today, so we can (lazilly, and at most once) create such a block.</p>",
        "id": 180636576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573658502
    },
    {
        "content": "<p>There might be some other assertions that need to be adjusted.</p>",
        "id": 180636595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573658516
    },
    {
        "content": "<p>I put in some work towards implementing this in the <a href=\"https://github.com/nikomatsakis/rust/tree/abort-on-ffi-call\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/tree/abort-on-ffi-call\">abort-on-ffi-call</a> branch -- not building yet or <em>quite</em> complete, but almost there (I think..?)</p>",
        "id": 180638968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573659822
    },
    {
        "content": "<p>OK I think this is building now, but I really have to stop and do other stuff</p>",
        "id": 180643343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573661996
    },
    {
        "content": "<p>(OK, it builds, but it doesn't work; I don't quite know what's going on, something to do with the <code>remove_noop_landing_pads</code> pass...)</p>",
        "id": 180646173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573663535
    },
    {
        "content": "<p><em>oh</em>, it's cause the landing pad has nothing to do I guess</p>",
        "id": 180646215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573663564
    },
    {
        "content": "<p>ok, I think that is working now -- the MIR looks right, but it's sort of hard to test. I tried hacking up some C++ function that throws even though it's not supposed to, but C++ keeps calling <code>std::terminate</code> since it can't find a catch handler (true even when I put the Rust function sandwiched between two C++ functions, and one of them has a <code>catch</code>)</p>",
        "id": 180692430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573696023
    },
    {
        "content": "<p>Wow, the Rust sandwich breaks <code>catch</code>? I did not expect that at all.</p>",
        "id": 180697354,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1573702758
    },
    {
        "content": "<p>I can only presume it has to do with interrupting the ability to walk up the stack and find the catch handler somehow? This is true on linux, at least.</p>",
        "id": 180718056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573727698
    },
    {
        "content": "<p>Well hey, it does abort... :)</p>",
        "id": 180718066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573727704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What does the LLVM IR look like?</p>",
        "id": 180731689,
        "sender_full_name": "Amanieu",
        "timestamp": 1573739286
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis 2:47 AM   <br>\nok, I think that is working now -- the MIR looks right, but it's sort of hard to test. I tried hacking up some C++ function that throws even though it's not supposed to, but C++ keeps calling std::terminate since it can't find a catch handler (true even when I put the Rust function sandwiched between two C++ functions, and one of them has a catch)</p>\n</blockquote>\n<p><code>noexcept</code> C++ functions have an \"abort-on-panic\" shim that calls <code>std::terminate</code></p>",
        "id": 180731779,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573739365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one needs to create a normal C++ function that throws, and then just use <code>extern \"C\" { ... }</code></p>",
        "id": 180731953,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573739459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I did not declare anything <code>noexcept</code></p>",
        "id": 180731956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739462
    },
    {
        "content": "<p>I did create a normal C++ function</p>",
        "id": 180731984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739479
    },
    {
        "content": "<p>I'll push the project</p>",
        "id": 180731994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I'm not sure :) I have to look how to save the LLVM IR, I forget</p>",
        "id": 180732014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739497
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 180732018,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573739500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I pushed my example <a href=\"https://github.com/nikomatsakis/rust-ffi-examples/tree/abort-on-ffi-call\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust-ffi-examples/tree/abort-on-ffi-call\">to this branch</a> -- it was the rust-to-cpp and cpp-to-rust (sandwich)</p>",
        "id": 180732575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739817
    },
    {
        "content": "<p>in both cases, I get the same error</p>",
        "id": 180732587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739824
    },
    {
        "content": "<p>looking at the c++ referenece manual, it suggested that if there is no <code>catch</code> block then C++ will terminate (which fits what I'm seeing)</p>",
        "id": 180732619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739845
    },
    {
        "content": "<p>it works without Rust in between</p>",
        "id": 180732647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739862
    },
    {
        "content": "<p>(that is, the throw gets caught)</p>",
        "id": 180732658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I think the llvm output is in <a href=\"https://gist.github.com/nikomatsakis/d48b3cea0c46c44e8adc519585c23f95\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/d48b3cea0c46c44e8adc519585c23f95\">this gist</a></p>",
        "id": 180732796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739966
    },
    {
        "content": "<p>I guess it has <code>nounwind</code> and other stuff</p>",
        "id": 180732828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739994
    },
    {
        "content": "<p>oh wait</p>",
        "id": 180732830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739995
    },
    {
        "content": "<p>that wasn't built w/ my branch</p>",
        "id": 180732835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573739998
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/44fb90f7bb97e14735855f7fd3dc3192\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/44fb90f7bb97e14735855f7fd3dc3192\">llvm output from my branch</a></p>",
        "id": 180732939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740043
    },
    {
        "content": "<p>(this is a debug build)</p>",
        "id": 180733095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Your function needs the <code>uwtable</code> attribute, otherwise dwarf tables aren't generated and the unwinder doesn't know how to unwind past your function to find the actual catch block in the caller.</p>",
        "id": 180733327,
        "sender_full_name": "Amanieu",
        "timestamp": 1573740274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> ok -- would it make sense to have that only for the \"leaf functions\" that actually invoke FFI?</p>",
        "id": 180733393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740335
    },
    {
        "content": "<p>(after all, I'm going to catch any unwinding and trap)</p>",
        "id": 180733416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740355
    },
    {
        "content": "<p>Also in optimized builds the landing pad is probably going to be optimized away by LLVM as unreachable since <code>triple_input</code> is <code>nounwind</code>.</p>",
        "id": 180733475,
        "sender_full_name": "Amanieu",
        "timestamp": 1573740376
    },
    {
        "content": "<p>oh yeah, I need to supress that I guess</p>",
        "id": 180733562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740448
    },
    {
        "content": "<p>I think that just having no <code>uwtable</code> is good enough in practice to abort. The shim should only be needed on targets that require <code>uwtable</code> to be present for other reasons</p>",
        "id": 180733583,
        "sender_full_name": "Amanieu",
        "timestamp": 1573740472
    },
    {
        "content": "<p>Hmm, actually this only works for targets that use dwarf unwinding. SjLj unwinding doesn't use unwinding tables and always works. And I have no idea wtf SEH will do here.</p>",
        "id": 180733685,
        "sender_full_name": "Amanieu",
        "timestamp": 1573740537
    },
    {
        "content": "<p>The good news is, the overhead for abort on extern \"C\" unwinding is going to be 0 in most cases since it already aborts :)</p>",
        "id": 180733874,
        "sender_full_name": "Amanieu",
        "timestamp": 1573740645
    },
    {
        "content": "<blockquote>\n<p>looking at the c++ referenece manual, it suggested that if there is no catch block then C++ will terminate (which fits what I'm seeing)</p>\n</blockquote>\n<p>This makes sense. When unwinding hits a thread boundary, C++ calls <code>std::terminate</code>.</p>",
        "id": 180734038,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573740797
    },
    {
        "content": "<blockquote>\n<p>Hmm, actually this only works for targets that use dwarf unwinding. SjLj unwinding doesn't use unwinding tables and always works. And I have no idea wtf SEH will do here.</p>\n</blockquote>\n<p>yeah I  have been meaning to try this on windows -- I'm actually running windows, so that <em>should</em> be easy enough, except I've never tried to build Rust outside of WSL <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 180734064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740829
    },
    {
        "content": "<blockquote>\n<p>I think that just having no <code>uwtable</code> is good enough in practice to abort. The shim should only be needed on targets that require <code>uwtable</code> to be present for other reasons</p>\n</blockquote>\n<p>I don't quite follow-- I think you're saying the current branch status itself is fine, since either (a) the c++ code needs uwtable and it aborts when it doesn't find it (as today) or (b) some other environments may not need uwtable, in which case they will get trapped by the unwinding?</p>",
        "id": 180734138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740882
    },
    {
        "content": "<p>anyway i'd like to see the tra in action so I'll try to add the various attributes (and remove \"nounwind\") later on</p>",
        "id": 180734181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573740920
    },
    {
        "content": "<p>Windows and Android have the <code>requires_uwtable</code> target attribute set, which means that unwinding tables are always generated even with <code>panic=abort</code>. For those platforms we will need to perform extra work to abort on unwind.</p>",
        "id": 180734395,
        "sender_full_name": "Amanieu",
        "timestamp": 1573741083
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I made some more changes here, but i'm still not able to get a C++ exception to actually propagate through Rust code.  <a href=\"https://gist.github.com/nikomatsakis/904278ba6cd3922a1685ace9b979225a\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/904278ba6cd3922a1685ace9b979225a\">Here is the LLVM IR.</a> I still can't get a <code>throw 22</code> to propagate to Rust, I just see:</p>\n<div class=\"codehilite\"><pre><span></span>terminate called after throwing an instance of &#39;int&#39;\n</pre></div>\n\n\n<p>Any idea what's going wrong? </p>\n<p>In any case, I'm not 100% sure what we <em>should</em> be doing here. For example, generating uwtable attributes just so that we can abort later seems a bit silly, but I figured I'd like to see it die in a controlled fashion first.</p>",
        "id": 183316305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576195818
    },
    {
        "content": "<p>I think what's happening here is due to 2 phase unwinding</p>",
        "id": 183316470,
        "sender_full_name": "Amanieu",
        "timestamp": 1576195986
    },
    {
        "content": "<p>The 1st phases searches for a suitable catch, while the second phase unwinds until that catch and calls cleanups.</p>",
        "id": 183316503,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196018
    },
    {
        "content": "<p>However if there is no catch anywhere on the call chain then phase 1 fails and terminates.</p>",
        "id": 183316555,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196047
    },
    {
        "content": "<p>Your landingpad is defined as a cleanup, which means that it is only executed in phase 2.</p>",
        "id": 183316561,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Could you point me to the Rust code for that again?</p>",
        "id": 183316605,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196127
    },
    {
        "content": "<p>Ah nevermind, found it.</p>",
        "id": 183316612,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196145
    },
    {
        "content": "<p>Yea, try defining the landingpad as a catch instead of a cleanup and see if that helps.</p>",
        "id": 183316708,
        "sender_full_name": "Amanieu",
        "timestamp": 1576196244
    },
    {
        "content": "<p>Actually I've just thought of another potential issue: even with panic=abort, we need to make sure longjmp works correctly on Windows. This means that we must allow foreign exceptions to unwind through Rust code even with panic=abort.</p>",
        "id": 183322216,
        "sender_full_name": "Amanieu",
        "timestamp": 1576202556
    },
    {
        "content": "<p>Re: that last, <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> says that already works; I can point you to the PR that fixed it</p>",
        "id": 183322309,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576202678
    },
    {
        "content": "<p>Here: <a href=\"https://github.com/rust-lang/rust/pull/48572\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48572\">https://github.com/rust-lang/rust/pull/48572</a></p>",
        "id": 183322406,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576202808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> scroll up to the top of this thread for the context.</p>",
        "id": 183322424,
        "sender_full_name": "Amanieu",
        "timestamp": 1576202842
    },
    {
        "content": "<blockquote>\n<p>So I was thinking about how to measure the impact of a proposal where the C ABI permits unwinding but -- if we are <code>-Cpanic=abort</code> -- we abort if unwinding actually occurs (versus UB).</p>\n</blockquote>",
        "id": 183322472,
        "sender_full_name": "Amanieu",
        "timestamp": 1576202889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> That PR on aborts if a Rust panic tries to unwind past <code>#[unwind(aborts)]</code>, but it lets foreign exceptions pass through. However if a foreign exception does unwind into code compiled with panic=aborts then we've still got UB.</p>",
        "id": 183322586,
        "sender_full_name": "Amanieu",
        "timestamp": 1576203071
    },
    {
        "content": "<p>Are you saying that the landing pad generated by <code>unwind(aborts)</code> is different from the one generated by <code>-Cpanic=abort</code>?</p>",
        "id": 183322663,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576203216
    },
    {
        "content": "<p>Or, oh, there's no landing pads. My bad.</p>",
        "id": 183322716,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576203267
    },
    {
        "content": "<p>So we'd need to generate them but only if the function directly calls an extern function</p>",
        "id": 183322728,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576203291
    },
    {
        "content": "<p>Except that we want to allow longjmp over Rust code when there are no destructors on the stack, since the current consensus is that is not UB.</p>",
        "id": 183322923,
        "sender_full_name": "Amanieu",
        "timestamp": 1576203598
    },
    {
        "content": "<p>That should be allowed even with panic=abort</p>",
        "id": 183322971,
        "sender_full_name": "Amanieu",
        "timestamp": 1576203618
    },
    {
        "content": "<p>Right; why is that UB?</p>",
        "id": 183324834,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576206307
    },
    {
        "content": "<p>(currently)</p>",
        "id": 183324836,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576206311
    },
    {
        "content": "<p>What effect does LLVM <code>nounwind</code> have in MSVC, anyway?</p>",
        "id": 183325104,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576206745
    },
    {
        "content": "<p><code>nounwind</code> does not mean \"does not unwind\", but rather \"does not unwind in certain ways\"</p>",
        "id": 183340945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576228888
    },
    {
        "content": "<p><code>nounwind</code> functions can unwind with asynchronous exceptions on windows just fine (see the LLVM LangRef)</p>",
        "id": 183340964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576228914
    },
    {
        "content": "<p>on Linux, <code>nounwind</code> functions can unwind with forced unwinds just fine as well</p>",
        "id": 183341022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576228939
    },
    {
        "content": "<p>(e.g. like the ones used by <code>longjmp</code>, or <code>pthread_cancel</code>)</p>",
        "id": 183341039,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576228957
    },
    {
        "content": "<blockquote>\n<p>Right; why is that UB?</p>\n</blockquote>\n<p>Because there is no RFC guaranteeing that it isn't. I wrote one with Kyren for the UCGs to review.</p>",
        "id": 183341151,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576229043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> ok, well, I didn't try to make it a \"catch\" -- in part because in the C++ code I already <em>have</em> a catch in scope, so I'm surprised it's not being found. i.e., my C++ code is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span>\n<span class=\"kt\">int</span> <span class=\"n\">triple_input</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"mi\">22</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">double_input</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">input</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot; * 2 = &quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">output</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;caught &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>where <code>double_input</code> is defined in Rust and invokes <code>triple_input</code>.</p>",
        "id": 183357777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243058
    },
    {
        "content": "<p>I'm also not sure how to do that :P and it sounds like more work</p>",
        "id": 183357785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243067
    },
    {
        "content": "<p>as far as Windows and longjmp, I agree, we'd have to figure out this interaction, I'm mostly just trying to get some kind of rough-n-dirty upper bound on the overall size impact of pursuing a plan where \"C\" unwinds by default, but -Cpanic=abort doesn't just create UB if you happen to have unwinding occur (but rather aborts in a structured way)</p>",
        "id": 183357870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243120
    },
    {
        "content": "<p>presumably it is possible to distinguish a longjmp unwind from other unwinds</p>",
        "id": 183357884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243135
    },
    {
        "content": "<p>anyway I don't quite get why it's not working, there must be <em>some</em> other flag somewhere  that I'm overlooking I guess</p>",
        "id": 183357975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243204
    },
    {
        "content": "<p>triple_input is <code>nounwind</code>, maybe that's the issue?</p>",
        "id": 183358014,
        "sender_full_name": "Amanieu",
        "timestamp": 1576243256
    },
    {
        "content": "<p>ah, maybe it's the nounwind attributes</p>",
        "id": 183358046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243294
    },
    {
        "content": "<p>er, I see we reached similar conclusion together :) yes, I'll disable those</p>",
        "id": 183358205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243427
    },
    {
        "content": "<p>(for some weird reason your msg didn't show up until I refreshed...)</p>",
        "id": 183358256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576243445
    },
    {
        "content": "<p>Hmm, that doesn't seem to have made any difference, but I'm also wondering if I was wrong about that being the LLVM-IR. When I run <code>cargo rustc -- --emit llvm-ir</code> I actually get an error because the <code>rustc</code> command itself includes <code>--emit</code> flags.</p>",
        "id": 183359654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576244632
    },
    {
        "content": "<p>well, pretty sure that <a href=\"https://gist.github.com/0fde1684114f5b86847b4d4fb211c24f\" target=\"_blank\" title=\"https://gist.github.com/0fde1684114f5b86847b4d4fb211c24f\">this is the LLVM IR</a>, but I don't see much</p>",
        "id": 183359798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576244724
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 183359810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576244727
    },
    {
        "content": "<p>OK, I'm about ready to give up :)</p>",
        "id": 183359960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576244826
    },
    {
        "content": "<p>I'd say <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> that we ought to try to write-up a summary and maybe ask for help from somebody who understands this stuff better to suggest (a) how to measure the impact and (b) what the right setup would even <em>look like</em> to enable us to abort when unwinding occurs</p>",
        "id": 183360135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576244964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how is <code>double_input</code> defined ? it just calls <code>triple_input</code> ?</p>",
        "id": 183360439,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245212
    },
    {
        "content": "<p>there is a lot of debug info and formatting going on in that LLVM-IR (using <code>-C debuginfo=0</code> should remove some of it)</p>",
        "id": 183360526,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245271
    },
    {
        "content": "<p>I suppose <code>double_input</code> prints something to the screen, and then calls <code>triple_input</code> ?</p>",
        "id": 183360596,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245326
    },
    {
        "content": "<p>the llvm-ir for that part looks ok to me, since <code>triple_input</code> can throw, it is called with <code>invoke</code>, and if that unwinds it goes to <code>cleanup</code>, which does some stuff i don't understand but then goes to <code>bb5</code> which traps</p>",
        "id": 183360687,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245392
    },
    {
        "content": "<p>ah, I see the problem, that shouldn't trap but continue unwinding</p>",
        "id": 183360721,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245435
    },
    {
        "content": "<p>or should it? are you compiling the Rust with <code>-C panic=abort</code> ? if so, that would be what you want</p>",
        "id": 183360752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245468
    },
    {
        "content": "<p>(to let <code>triple_input</code> unwind without UB, and then abort)</p>",
        "id": 183360763,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576245479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> exactly, the intention was to see what it would take to make <code>-Cpanic=abort</code> <em>abort</em> if unwinding occurred, rather than creating UB. So far, I've been able to get it to abort, but not via the mechanism I expected =) i.e., it aborts because it can't find any in-scope <code>catch</code> handler, versus unwinding and then aborting when it passes into Rust code.</p>",
        "id": 183554540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507337
    },
    {
        "content": "<p>I don't know exactly how C++ specific that is</p>",
        "id": 183554559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507355
    },
    {
        "content": "<p>(e.g., maybe there are libunwind methods I could trigger that would just unwind more indiscriminantely?)</p>",
        "id": 183554597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507380
    },
    {
        "content": "<p>I'm not sure I understand</p>",
        "id": 183554621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507394
    },
    {
        "content": "<p>but I also don't know why it can't find the catch block in scope, since afaik we've setup the function's metadata correctly</p>",
        "id": 183554631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507402
    },
    {
        "content": "<p>what don't you understand?</p>",
        "id": 183554649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507415
    },
    {
        "content": "<p>From looking at the LLVM IR, it appears that if it unwinds, it would run the cleanup, and the cleanup aborts</p>",
        "id": 183554657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507419
    },
    {
        "content": "<p>that is the goal, yes</p>",
        "id": 183554675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507432
    },
    {
        "content": "<p>except that it's not what happens</p>",
        "id": 183554689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507442
    },
    {
        "content": "<p>ah ok  :D, no idea why :/ from looking at the IR, it should work</p>",
        "id": 183554753,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507460
    },
    {
        "content": "<p>maybe the IR is missing something :/</p>",
        "id": 183554777,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507482
    },
    {
        "content": "<p>you might want to ask for help in the wg-llvm, somebody there might \"just see\" what's missing</p>",
        "id": 183555001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507636
    },
    {
        "content": "<p>Yeah, maybe. The specific problem is that C++ terminates because it can't find any catch block for int</p>",
        "id": 183555092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507687
    },
    {
        "content": "<p>Do you have the LLVM-IR produced by C++ ?</p>",
        "id": 183555260,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507809
    },
    {
        "content": "<p>or is there a way to combine them into a single .ll file that reproduces the problem? That would help</p>",
        "id": 183555287,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507825
    },
    {
        "content": "<p>I don't, but as we were typing I was thinking maybe I should look at that</p>",
        "id": 183555314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576507843
    },
    {
        "content": "<p>that might help, I recommend avoiding \"print\" functionality, and setting debug-info to \"off\" to get the simplest IR possible</p>",
        "id": 183555403,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576507904
    }
]