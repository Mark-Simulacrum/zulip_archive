[
    {
        "content": "<p>I would just make it UB unless there's actual demand for people relying on longjmp running destructors.</p>",
        "id": 179231647,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270268
    },
    {
        "content": "<p>What does longjmp do for automatic variables in a frame ?</p>",
        "id": 179231679,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270303
    },
    {
        "content": "<p>Depending on how its implemented, it semantically either calls <code>mem::drop</code>, or it calls <code>mem::forget</code></p>",
        "id": 179231702,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270321
    },
    {
        "content": "<p>both are ok</p>",
        "id": 179231704,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270324
    },
    {
        "content": "<p>and actually safe</p>",
        "id": 179231714,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270331
    },
    {
        "content": "<p>Only if the code that is being jumped over expects this.</p>",
        "id": 179231812,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270372
    },
    {
        "content": "<p>the only real issue is that some types have a \"Safety\" requirement that says \"you can't deallocate this type without calling destructors\", making <code>forget</code> illegal on them</p>",
        "id": 179231826,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270377
    },
    {
        "content": "<p>but that's a safety invariant that unsafe code working with these types must upheld</p>",
        "id": 179231845,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270396
    },
    {
        "content": "<blockquote>\n<p>Only if the code that is being jumped over expects thi</p>\n</blockquote>\n<p>Well yes, but APIs can write arbitrary requirements in the safety clause.</p>",
        "id": 179231888,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270434
    },
    {
        "content": "<p>I don't think this one is very different from any other pre-condition</p>",
        "id": 179231907,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270456
    },
    {
        "content": "<p>So... IMO the rules for <code>longjmp</code> follow from the rules of <code>mem::forget</code></p>",
        "id": 179231977,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270482
    },
    {
        "content": "<p>IMO code should be able to assume that any callbacks either return properly or unwind and run all destructors.</p>",
        "id": 179231982,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270488
    },
    {
        "content": "<p>For this types, you can put them in some memory address on the heap, and if you deallocate them with <code>GlobalAlloc::dealloc</code> without running their destructor the behavior is undefined as well</p>",
        "id": 179232022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270521
    },
    {
        "content": "<p>that's \"library UB\" because the code violates a safety invariant expressed in a library API comment</p>",
        "id": 179232046,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270539
    },
    {
        "content": "<p>Because <code>DropGuard</code>s can be used to maintain safety invariants, and currently a lot of code in the wild does this (even code in libstd).</p>",
        "id": 179232057,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270546
    },
    {
        "content": "<p>one doesn't need <code>longjmp</code> for that</p>",
        "id": 179232059,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270547
    },
    {
        "content": "<p>I don't see a reason to forbid <code>longjmp</code> over frames with destructors that lack safety invariants</p>",
        "id": 179232181,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270622
    },
    {
        "content": "<p>it's a perfectly correct thing to do, we'll just be introducing UB to forbid something that has no issues</p>",
        "id": 179232207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270643
    },
    {
        "content": "<p>Also, <code>DropGuard</code> has no issues in safe Rust</p>",
        "id": 179232352,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270728
    },
    {
        "content": "<p>Here's an example: <code>slice::sort</code> is unsound if <code>Ord::cmp</code> longjmps without running destructors.</p>",
        "id": 179232379,
        "sender_full_name": "Amanieu",
        "timestamp": 1572270746
    },
    {
        "content": "<p>if that frame calls some other unsafe Rust code that violates its safety invariants..</p>",
        "id": 179232380,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270747
    },
    {
        "content": "<p>Sure, but then that <code>Ord::cmp</code> implementation is unsound</p>",
        "id": 179232400,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270759
    },
    {
        "content": "<p>because it is safe code that calls <code>unsafe</code> code that does not properly encapsulate the unsafety</p>",
        "id": 179232421,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270774
    },
    {
        "content": "<p>Maybe i'm miscommunicating: i'm not proposing to make <code>longjmp</code> safe, it would still be <code>unsafe</code> to call,  and the caller needs to make sure that doing that does not result in UB.</p>",
        "id": 179232617,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270868
    },
    {
        "content": "<p>There are many types with destructors that can be longjmp'ed without issues, I'd rather not introduce a completely new different kind of UB just for <code>longjmp</code></p>",
        "id": 179232682,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572270904
    },
    {
        "content": "<p>My point is, <code>slice::sort</code> should be able to assume that <code>Ord::cmp</code> won't longjmp out without running destructors, without having to list it in the safety invariants in the <code>slice::sort</code> docs.</p>",
        "id": 179232859,
        "sender_full_name": "Amanieu",
        "timestamp": 1572271008
    },
    {
        "content": "<p>Sure, it can do that</p>",
        "id": 179232945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271064
    },
    {
        "content": "<p><code>Ord::cmp</code> is a safe Rust function</p>",
        "id": 179232950,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271070
    },
    {
        "content": "<p>those functions cannot <code>longjmp</code></p>",
        "id": 179232958,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271074
    },
    {
        "content": "<p>If we allow safe Rust code to <code>longjmp</code>, we would make safe Rust unsound</p>",
        "id": 179233048,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271100
    },
    {
        "content": "<p>So we can't do that</p>",
        "id": 179233085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271120
    },
    {
        "content": "<p>Anyways, I feel that unless you have a particular use case for allowing <code>longjmp</code> to skip destructors, we should just make it UB.</p>",
        "id": 179233096,
        "sender_full_name": "Amanieu",
        "timestamp": 1572271130
    },
    {
        "content": "<p>The problem is that skipping destructors is ok</p>",
        "id": 179233110,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271145
    },
    {
        "content": "<p>in many cases</p>",
        "id": 179233118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271150
    },
    {
        "content": "<p>and there is no <code>longjmp</code> in the Rust spec</p>",
        "id": 179233132,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271159
    },
    {
        "content": "<p>so we can't talk about it</p>",
        "id": 179233138,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271162
    },
    {
        "content": "<p>So we would be introducing a clause somewhere saying that skipping destructors in safe Rust in certain cases is UB</p>",
        "id": 179233178,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271192
    },
    {
        "content": "<p>which already is</p>",
        "id": 179233183,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271195
    },
    {
        "content": "<p>but that does not ban <code>longjmp</code></p>",
        "id": 179233246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271211
    },
    {
        "content": "<p>it just ban <code>longjmp</code> from those uses</p>",
        "id": 179233260,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271219
    },
    {
        "content": "<p>Best case we maybe we can say that \"Unwinding a frame without invoking destructors is UB\", but that means that <code>longjmp</code> on MSVC is ok, because it does run destructors there</p>",
        "id": 179233518,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271398
    },
    {
        "content": "<p>(assuming you've used <code>#[unwind(allowed)]</code> in all the right places)</p>",
        "id": 179233619,
        "sender_full_name": "Amanieu",
        "timestamp": 1572271454
    },
    {
        "content": "<p>sure</p>",
        "id": 179233630,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271464
    },
    {
        "content": "<p>otherwise destructors might be optimized away</p>",
        "id": 179233657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271484
    },
    {
        "content": "<p>OK that sounds reasonable to me.</p>",
        "id": 179233659,
        "sender_full_name": "Amanieu",
        "timestamp": 1572271485
    },
    {
        "content": "<p>Though I would still prefer outright making skipping destructors UB.</p>",
        "id": 179233692,
        "sender_full_name": "Amanieu",
        "timestamp": 1572271505
    },
    {
        "content": "<p>When one thinks of the stack in terms of miri, you have a <code>Vec&lt;Frame&gt;</code> where <code>Frame { vars..: Box&lt;T&gt; }</code> (each automatic variable is its own allocation)</p>",
        "id": 179233710,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271521
    },
    {
        "content": "<p>A panic <code>drops</code> a frame, and a <code>longjmp</code> <code>mem::forgets</code> a frame</p>",
        "id": 179233723,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271543
    },
    {
        "content": "<p>We already have the rules for both in the language</p>",
        "id": 179233735,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271554
    },
    {
        "content": "<p>and, e.g., if you have a <code>Box&lt;Pin&lt;....&gt;&gt;</code> and  you deallocate the <code>Pin</code> without running destructors, you get the exact same of UB that you get if you <code>longjmp</code> over a Frame containing a Pin</p>",
        "id": 179233831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271612
    },
    {
        "content": "<p>So the rules that there is UB for certain longjmps are already there, and they apply to more cases than just the <code>longjmp</code> themselves</p>",
        "id": 179233873,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271643
    },
    {
        "content": "<p>So to me not adding an extra rule to forbid <code>longjmp</code>s over frames with destructors  even when that is not really UB of another kind complicates the language for little reason</p>",
        "id": 179233951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271691
    },
    {
        "content": "<p>I mean, a <code>longjmp</code> over a <code>Pin</code> isn't \"real UB\"</p>",
        "id": 179233993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271721
    },
    {
        "content": "<p>the UB is when the storage of the <code>Pin</code> is deallocated without running the destructor, and a different thread tries later to do a <code>use-after-free</code></p>",
        "id": 179234033,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271746
    },
    {
        "content": "<p>but if that does not happen, everything is still \"fine\" (your program might be non portable or whatever, but it does not have UB)</p>",
        "id": 179234165,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271831
    },
    {
        "content": "<p>If that does happen, you have a <code>use-after-free</code>, whether that was caused by a <code>longjmp</code>, or a call to <code>Alloc::dealloc</code>, isn't really that different</p>",
        "id": 179234271,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572271912
    },
    {
        "content": "<p>Re: this bit in the PR thread:</p>\n<blockquote>\n<p>Actually <code>longjmp</code> does run destructors (both C++ and Rust) because it uses a SEH exception to unwind. This was already the case before this PR. However <code>_CxxFrameHandler3</code> specifically ignores <code>longjmp</code> exceptions for <code>catch</code> blocks.</p>\n<p>This behavior is documented in MSVC, and is allowed by the C++ standard since it is UB to unwind across frames with destructors.</p>\n</blockquote>\n<p>Maybe you already knew this, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> , but what I have been told is that MSVC does not invoke C++ destructors on <code>longjmp</code> unwind, but Clang-targeting-MSVC does.</p>",
        "id": 179253236,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572282932
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/using-setjmp-longjmp?view=vs-2019\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/cpp/cpp/using-setjmp-longjmp?view=vs-2019\">https://docs.microsoft.com/en-us/cpp/cpp/using-setjmp-longjmp?view=vs-2019</a></p>\n<blockquote>\n<p>If you use an /EH option to compile C++ code, destructors for local objects are called during the stack unwind. However, if you use /EHs or /EHsc to compile, and one of your functions that uses noexcept calls longjmp, then the destructor unwind for that function might not occur, depending on the optimizer state.</p>\n</blockquote>",
        "id": 179253581,
        "sender_full_name": "Amanieu",
        "timestamp": 1572283147
    },
    {
        "content": "<p>Oops. Yes, I've read that, but apparently forgot it.</p>",
        "id": 179253921,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572283376
    },
    {
        "content": "<p>I've (intentionally) withheld from reading this thread</p>",
        "id": 179636066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622516
    },
    {
        "content": "<p>I would like to make a request</p>",
        "id": 179636071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622519
    },
    {
        "content": "<p>could somebody -- <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>, <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> -- open a PR against the ffi-unwind repo that summarizes how longjmp interacts with destructurs on various tier 1 platforms? (i.e., summarizes what was learned from this thread?)</p>",
        "id": 179636111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572622548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I started drafting a document as Niko asked: <a href=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/topic-longjmp-destructors/periodic-summaries/topic-longmp-destructors.md\" target=\"_blank\" title=\"https://github.com/BatmanAoD/project-ffi-unwind/blob/topic-longjmp-destructors/periodic-summaries/topic-longmp-destructors.md\">https://github.com/BatmanAoD/project-ffi-unwind/blob/topic-longjmp-destructors/periodic-summaries/topic-longmp-destructors.md</a></p>\n<p>I didn't follow the discussion closely, so I would appreicate if one or both of you would \"adopt\" that branch, make appropriate changes, and open a PR.</p>",
        "id": 180979690,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1574037710
    },
    {
        "content": "<p>Apologies if this is the wrong venue for this: is there some document or comment somewhere which lists the current best practices and/or pitfalls surrounding ffi and longjmp? I understand the general issues, but Im trying to implement something which will likely require ffi interaction with longjmp and there area dizzying amount of relevant threads and comments.</p>",
        "id": 182309272,
        "sender_full_name": "pquux",
        "timestamp": 1575250565
    },
    {
        "content": "<p>@pquux The short version is that longjmp over frames with destructors should (for now, possibly indefinitely) be considered UB, but otherwise (e.g. if the only local types in the frames being dropped are <code>Copy</code>) the behavior is well defined.</p>",
        "id": 182309933,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1575251795
    },
    {
        "content": "<p>Or rather, the behavior is as well-defined as it is in C (e.g. you can have UB if you do weird things like trying to restore a stack context created in a different thread).</p>",
        "id": 182309955,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1575251878
    },
    {
        "content": "<p>Awesome, thank you very much. I imagine you have plenty of actual examples and use cases already, but please feel free to ping me if you need another.</p>",
        "id": 182310731,
        "sender_full_name": "pquux",
        "timestamp": 1575253225
    },
    {
        "content": "<p>I, personally, do not! But I understand rlua does quite a bit of longjmp-ing.</p>",
        "id": 182311081,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1575253913
    },
    {
        "content": "<p>Yeah, my situation is very similar: rust bindings to a C interpreter, rust frame sandwiched between C setjmp and longjmp calls.</p>",
        "id": 182311530,
        "sender_full_name": "pquux",
        "timestamp": 1575254732
    }
]