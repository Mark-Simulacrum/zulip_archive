[
    {
        "content": "<p>I just learned about this: <a href=\"https://github.com/rust-lang/rust/pull/64010/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64010/\">https://github.com/rust-lang/rust/pull/64010/</a></p>\n<p>Would this resolve our previous concern about stabilizing the <code>unwind(abort)</code> attribute, namely, that it couldn't be used on function pointers? (As long as we add <code>unwind</code> to the list of attributes that can be used in parameter position, of course.)</p>\n<p>As far as I can see, attributes are still not useable on local variables.</p>",
        "id": 179555594,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572543247
    },
    {
        "content": "<p>IIRC the concern is that as implemented the attribute is not part of a function's type.</p>",
        "id": 179555875,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572543447
    },
    {
        "content": "<p>We can revisit that debate but</p>",
        "id": 179555887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543457
    },
    {
        "content": "<p>I think that the ABI version is kind of \"just better\" in most ways</p>",
        "id": 179555893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572543462
    },
    {
        "content": "<p>I think there is consensus that it should be part of the type, whether the syntax is an ABI string or an attribute is more a syntactic issue. There are certainly other cases where attributes as part of the type make sense (e.g. <code>#[target_feature]</code> is part of the function ABI, and we currently forbid creating pointers to target feature functions to work around that).</p>",
        "id": 179556161,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572543592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span>  those attributes only work on formal params; not <em>types</em>. You'd need <a href=\"https://github.com/rust-lang/rfcs/pull/2602\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2602\">https://github.com/rust-lang/rfcs/pull/2602</a> for attributes on types.</p>",
        "id": 179559382,
        "sender_full_name": "centril",
        "timestamp": 1572545327
    },
    {
        "content": "<p>Also, I agree with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> -- I'd also like to see the WG more focused and for it to have less back and forth</p>",
        "id": 179559427,
        "sender_full_name": "centril",
        "timestamp": 1572545350
    },
    {
        "content": "<p>I think that the merit in the \"noexcept-like feature\" is in the idea that we may not <em>want</em> the unwindability of a function to be in the type system, at least not without introducing a real <code>noexcept</code> feature that can be used independently of <code>extern</code>.</p>",
        "id": 179559710,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545501
    },
    {
        "content": "<blockquote>\n<p>Also, I agree with <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> -- I'd also like to see the WG more focused and for it to have less back and forth</p>\n</blockquote>\n<p>I'm not sure how to help with that at this point. It seems to me that we do have some genuinely new information being introduced (e.g. from discussion w/ Amanieu).</p>",
        "id": 179559861,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545571
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> -- I was hoping to get the soundness hole closed in a reasonable timeframe</p>",
        "id": 179559931,
        "sender_full_name": "centril",
        "timestamp": 1572545628
    },
    {
        "content": "<p>So was I. But I am of the opinion that letting <code>extern \"C\"</code> unwind is a perfectly reasonable way to do that.</p>",
        "id": 179560143,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545748
    },
    {
        "content": "<p>I've also said that I personally don't have an objection to stabilizing the abort-on-unwind shim.</p>",
        "id": 179560227,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572545781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> appreciated</p>",
        "id": 179560257,
        "sender_full_name": "centril",
        "timestamp": 1572545796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> See the PR link up above; such attributes can at least be applied to fn pointers in function params, which may be sufficient for now</p>",
        "id": 179562260,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1572546830
    },
    {
        "content": "<p>It isn't sufficient for statics I think.</p>",
        "id": 179562347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572546854
    },
    {
        "content": "<p>e.g. <code>static X: Option&lt;#[unwind(aborts)] fn()&gt; = ...;</code> would need to work</p>",
        "id": 179562395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572546882
    },
    {
        "content": "<p>but I don't see any reasons why we can't make that work</p>",
        "id": 179562421,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572546896
    }
]