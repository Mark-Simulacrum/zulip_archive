[
    {
        "content": "<p>Are there any plans to extend the set of *-unwind ABIs, for example <code>fastcall-unwind</code> and <code>sysv64-unwind</code>? I mention those two specifically since they would be useful for a stack-switching crate that I am writing.</p>",
        "id": 269959221,
        "sender_full_name": "Amanieu",
        "timestamp": 1643578745
    },
    {
        "content": "<p>I would like that, as it would allow me to fix a bug in lccc (host) on all targets (It uses fastcall on win32-ix86 because why the heck would I use <code>extern \"C\"</code> on ix86 if I don't have to).</p>",
        "id": 269961733,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643581729
    },
    {
        "content": "<p>In general, though, I think all ABIs that it isn't implied on <code>extern \"Rust\"</code> should have <code>*-unwind</code> variants</p>",
        "id": 269961821,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643581825
    },
    {
        "content": "<p>I think we talked about this briefly before finalizing the RFC, and the decision was either that this wouldn't be that useful (which it seems probably isn't true) or that it would be easy enough to add them now that the semantics for <code>-unwind</code> are defined.</p>",
        "id": 269963666,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1643584067
    },
    {
        "content": "<p>So yes, I agree we should add them. I would even expect that an RFC probably wouldn't be necessary.</p>",
        "id": 269963990,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1643584460
    },
    {
        "content": "<p>I agree that we should have <code>-unwind</code> variants for any ABI where that makes sense.</p>",
        "id": 269971043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643593592
    },
    {
        "content": "<p>Where that make sense, I'd assume, means all ABIs other than <code>extern \"Rust\"</code>, <code>extern \"rust-call\"</code>, <code>extern \"rust-intrinsic\"</code>, <code>extern \"platform-intrinsic\"</code>, and other implementation-specific unstable ones.</p>",
        "id": 269976111,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643599960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> As well as things like <code>x86-interrupt</code>, or any other target-specific ABI where unwinding past it makes no sense.</p>",
        "id": 269978056,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643602391
    },
    {
        "content": "<p>Ah yeah, true.</p>",
        "id": 269978893,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643603511
    },
    {
        "content": "<p>I'm pretty sure you could unwind across x86-interrupt if you generate the correct dwarf metadata :D</p>",
        "id": 270061991,
        "sender_full_name": "Amanieu",
        "timestamp": 1643647125
    },
    {
        "content": "<p>IDK about that. That means that any instruction can be an unwind source.<br>\nFor w65, I've specified that it's UB to exit an interrupt handler with an exception/panic, so if x86 is anything similar.. heh.</p>",
        "id": 270062265,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643647210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> What would you unwind <em>to</em>? Leaving aside that it might be a privilege boundary, you'd unwind through (say) whatever random instruction triggered a page fault.</p>",
        "id": 270073563,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643651238
    },
    {
        "content": "<p>Or even some random other instruction that the interrupt was raised between.</p>",
        "id": 270078925,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643653152
    },
    {
        "content": "<p>Right.</p>",
        "id": 270086948,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643656016
    }
]