[
    {
        "content": "<p>Hi lovelies - so you know cargo-geiger is migrating to clap as part of de-coupling and it might provide some reference later. Might be helpful for you <span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span>  too :)<br>\n<a href=\"https://github.com/rust-secure-code/cargo-geiger/issues/226\">https://github.com/rust-secure-code/cargo-geiger/issues/226</a><br>\n<a href=\"https://github.com/rust-secure-code/cargo-geiger/discussions/244\">https://github.com/rust-secure-code/cargo-geiger/discussions/244</a></p>",
        "id": 267147775,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641526461
    },
    {
        "content": "<p>Thanks for the heads up!</p>",
        "id": 267148518,
        "sender_full_name": "Ed Page",
        "timestamp": 1641527413
    },
    {
        "content": "<p>I think I'm missing some context. What is the decoupling? Are you removing <code>cargo</code> as a dependency? How can we help?</p>",
        "id": 267148558,
        "sender_full_name": "Ed Page",
        "timestamp": 1641527474
    },
    {
        "content": "<p>yup that's the plan - getting rid of it :) <br>\n<a href=\"https://github.com/rust-secure-code/cargo-geiger/issues/241\">https://github.com/rust-secure-code/cargo-geiger/issues/241</a></p>",
        "id": 267148577,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641527507
    },
    {
        "content": "<p>help would be very welcome - consulting around opts use - I am planning to use clap-cargo, escargot and cla-verbosity - we already use cargo_metadata</p>",
        "id": 267148643,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641527551
    },
    {
        "content": "<p>I am proposing the following pattern for 0.12.0 cargo-geiger</p>\n<p>cargo geiger build -- should do build deps</p>\n<p>cargo geiger test -- should do test deps</p>\n<p>cargo geiger run -- should do runtime deps</p>\n<p>cargo geiger scan -- Scan only</p>\n<p>Cargo opts would be passed on to cargo transparently</p>",
        "id": 267148759,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641527682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> this example doesn't work it is complaining about missing trait impl<br>\n<a href=\"https://github.com/crate-ci/clap-cargo/blob/master/examples/flags.rs\">https://github.com/crate-ci/clap-cargo/blob/master/examples/flags.rs</a></p>\n<p>error[E0277]: the trait bound <code>clap_cargo::Workspace: clap::Args</code> is not satisfied<br>\n  --&gt; cargo-geiger/src/args.rs:25:12<br>\n   |<br>\n25 |     #[clap(flatten)]<br>\n   |            ^^^^^^^ the trait <code>clap::Args</code> is not implemented for <code>clap_cargo::Workspace</code></p>\n<p>If I give it clap::Args then there is conflicting impl</p>\n<p>error[E0119]: conflicting implementations of trait <code>clap::Args</code> for type <code>args::CargoArgs</code><br>\n  --&gt; cargo-geiger/src/args.rs:21:25<br>\n   |<br>\n21 | #[derive(Debug, Parser, clap::Args)]<br>\n   |                 ------  ^^^^^^^^^^ conflicting implementation for <code>args::CargoArgs</code><br>\n   |                 |<br>\n   |                 first implementation here</p>",
        "id": 267150145,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641529408
    },
    {
        "content": "<p>the derive is brilliant...</p>",
        "id": 267154721,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641535461
    },
    {
        "content": "<p>Now it would be nice if I can discover all cargo build etc. options and then transparently (cargo version relevant) mirror them without writing a piece of line and then intercept opportunistically (try_fetch_opt) from generated opts.... hmm?</p>",
        "id": 267154859,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641535616
    },
    {
        "content": "<p><code>test</code> sounds similar to <code>--tests</code><br>\n<code>run</code> sounds similar to <code>--lib</code> and <code>--bins</code></p>\n<p>What about using those and inventing a <code>--build</code>?</p>",
        "id": 267189482,
        "sender_full_name": "Ed Page",
        "timestamp": 1641562670
    },
    {
        "content": "<blockquote>\n<p>Now it would be nice if I can discover all cargo build etc. options and then transparently (cargo version relevant) mirror them without writing a piece of line and then intercept opportunistically (try_fetch_opt) from generated opts.... hmm?</p>\n</blockquote>\n<p>You want to automatically forward arguments to some underlying cargo command?  Something like <a href=\"https://github.com/clap-rs/clap/issues/1404\">partial parsing</a> would help once implemented.  Until then, I don't think there is a good way to do it.  Even then, it can be questionable unless the underlying command fits perfectly to your purpose.  You also wouldn't get <code>--help</code> for it.</p>",
        "id": 267189871,
        "sender_full_name": "Ed Page",
        "timestamp": 1641562911
    },
    {
        "content": "<p>Well I could get --help if the cargo arg/opts are \"discoverable\" and there is a mapping template off them - e.g. an utility that digs the supported arguments from current rustup/cargo on $PATH</p>",
        "id": 267243190,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641589757
    },
    {
        "content": "<p>I still have to build the target if the user hasn't supplied thigns so I want to mirror cargo args/opts as-is and passthru them and behaving like cargo whilst injecting analyzer on top</p>",
        "id": 267243321,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641589824
    },
    {
        "content": "<p>I could even in worst case passthru cargo error if the flags on cargo don't match f.ex. if I need to invoke build leading the argument parsing completely to cargo and then do a naive and dumb regular expression at top replacing the binary name :D</p>",
        "id": 267243443,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641589920
    },
    {
        "content": "<p>I would have thought there was some functionality on last where you can pass -- &lt;EVERYTHING&gt; or even worst case wrap it -cargo \"cargo_flags\"</p>",
        "id": 267244203,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641590396
    },
    {
        "content": "<p>on derive's what is the preferred way to reduce duplication of clap-cargo items on Subcommand derive e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Subcommand)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[clap(setting(AppSettings::DeriveDisplayOrder))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">GeigerCommands</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Geiger with build tree</span>\n<span class=\"w\">    </span><span class=\"n\">Build</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[clap(flatten)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">workspace</span>: <span class=\"nc\">clap_cargo</span>::<span class=\"n\">Workspace</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Geiger with test tree</span>\n<span class=\"w\">    </span><span class=\"n\">Test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[clap(flatten)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">workspace</span>: <span class=\"nc\">clap_cargo</span>::<span class=\"n\">Workspace</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How do I use global() with clap-cargo items under subcomand enum? I can use them with regular arguments but flatten can't use it with clap(global(true)) due to:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: methods are not allowed for flattened entry\n  --&gt; cargo-geiger/src/args.rs:62:16\n   |\n62 |         #[clap(flatten, global(true))]\n   |                ^^^^^^^\n</code></pre></div>\n<p>If I try to use em without flatten - I tried to search doc for flatten which obviously provides FromStr?</p>\n<div class=\"codehilite\"><pre><span></span><code>62  |         #[clap(global(true))]\n    |         ^ the trait `FromStr` is not implemented for `clap_cargo::Features`\n</code></pre></div>",
        "id": 267261005,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641600505
    }
]