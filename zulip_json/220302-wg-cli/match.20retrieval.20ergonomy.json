[
    {
        "content": "<p>hello there!<br>\nI am always puzzled when I need to do:</p>\n<div class=\"codehilite\"><pre><span></span><code>matches.value_of(&quot;arg_name&quot;).unwrap()\n</code></pre></div>\n\n\n<p>when I could just do (if clap supported it)</p>\n<div class=\"codehilite\"><pre><span></span><code>matches[&quot;arg_name&quot;]\n</code></pre></div>\n\n\n<p>I heard clap is going to make a release soon, if there's no opposition to this change, I'll try make a PR!</p>\n<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> <span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span></p>",
        "id": 203914668,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594785704
    },
    {
        "content": "<p>Since value_of can be used but also, values_of, which doesnt return the same type, I wonder if it's possible to generically return either of them</p>",
        "id": 203915054,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594786211
    },
    {
        "content": "<p>which would be either &amp;str or an iterator on &amp;str</p>",
        "id": 203915138,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594786339
    },
    {
        "content": "<p>Or we could just say that the ergonomic subscript access is always value_of</p>",
        "id": 203915156,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594786375
    },
    {
        "content": "<p>Generic return values tend to result in less ergonomic code, requiring either type signatures or turbofish.</p>",
        "id": 203919905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594793523
    },
    {
        "content": "<p>too bad, would it be acceptable to assume value_of when using array indexing?</p>",
        "id": 203919936,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594793612
    },
    {
        "content": "<p>Ideally, if moving to a less stringly typed argument handling, the argument type would determine that.</p>",
        "id": 203920253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594794079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I see you've got \"deserialize into struct\" thing now</p>",
        "id": 203920626,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594794606
    },
    {
        "content": "<p>I think the biggest problem with the index operator is failability - lack thereof. <code>value[s]_of</code> can fail (return None) if the arg is not required and user (or default value) didn't provide it.</p>",
        "id": 204219104,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999322
    },
    {
        "content": "<p>Come to think of it, a generic returning value might be `Box&lt;dyn Iterator&lt;Item = &amp;str&gt;, I guess.</p>",
        "id": 204219708,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999631
    },
    {
        "content": "<p>Although it won't help you much</p>",
        "id": 204219734,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999650
    },
    {
        "content": "<blockquote>\n<p>moving to a less stringly typed argument handling</p>\n</blockquote>\n<p>This topic pops up every so often, but nobody was able to even remotely guess something that could possibly work.</p>",
        "id": 204219992,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999771
    },
    {
        "content": "<p>What we're talking about here is heterogeneous container</p>",
        "id": 204220135,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999841
    },
    {
        "content": "<p>Clap is, simply speaking, a dictionary (map)</p>",
        "id": 204220201,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999884
    },
    {
        "content": "<p>It maps _argument identifier_ to a list of _values_ (&amp;[Os]str)</p>",
        "id": 204220321,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999935
    },
    {
        "content": "<p>Identifier is also <code>&amp;str</code></p>",
        "id": 204220340,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1594999946
    },
    {
        "content": "<p>What users want is to convert the values to the respective types, but types can be anything</p>",
        "id": 204220635,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595000079
    },
    {
        "content": "<p>There's already <code>value_of_t</code> that encapsulates this logic</p>",
        "id": 204220699,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595000113
    },
    {
        "content": "<p>I think this is about as far as we can go without any sort of macros. You can't just have a methods with the signature of <code>&amp;self -&gt; SomeType</code> because <code>SomeType</code> will be different for different arguments.</p>",
        "id": 204220947,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595000215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> most of the time, I provide default values for my arguments, so in that case, index is fine, but of course, that's the inconvenient of it</p>",
        "id": 204227698,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595003119
    },
    {
        "content": "<p>I see it's not written in the README, but can't clap also serve as a configuration management library? wouldnt there be interest in also allowing something like yaml configurations to be passed and the yaml config fills the command line arguments?</p>",
        "id": 204228296,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595003421
    },
    {
        "content": "<p>like a special switch, e.g. <code>--file-arguments /etc/example/example.yaml</code></p>",
        "id": 204228516,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595003545
    },
    {
        "content": "<p>There were some discussions about it, but it's not a high priority for us. You could take a look around and contribute to the discussions.</p>",
        "id": 204343299,
        "sender_full_name": "pksunkara",
        "timestamp": 1595155206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> <code>ArgMatches</code> doesn't <em>know</em> whether <code>\"cfg\"</code>for example has default value or not. Most importantly, we would need this kind in information to be encoded in type system so the index op could distinguish and return either option or the value itself, depending.</p>",
        "id": 204362061,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595180612
    },
    {
        "content": "<p>But identifiers don't have this kind of type system info attached, it's just <code>&amp;str</code></p>",
        "id": 204362125,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595180655
    },
    {
        "content": "<p>Yes, we <em>could</em> add such an impl in addition to <code>value_of</code></p>",
        "id": 204362129,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595180683
    },
    {
        "content": "<p>But how to encode the difference between <code>value_of</code> and <code>value_of_os</code> in it?</p>",
        "id": 204362145,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595180710
    },
    {
        "content": "<p>It's vital when it comes to file paths</p>",
        "id": 204362151,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595180727
    },
    {
        "content": "<p>Actually, when trait impl specialization <em>finally</em> lands, we could do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// The traits are mutually exclusive</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ClapFromStr</span>: <span class=\"o\">!</span><span class=\"n\">ClapFromOsStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ClapFromOsStr</span>: <span class=\"o\">!</span><span class=\"n\">ClapFromStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_os_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">OsStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// everything that requires the argument to be valid utf-8</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ClapFromStr</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"c1\">// everything that doesn&#39;t have to be valid UTF-8</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ClapFromOsStr</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl that uses value_of</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">ClapFromStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Index</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl that uses value_of_os</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">ClapFromOsStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Index</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But we need to be able to mark the traits as mutually exclusive.</p>",
        "id": 204363296,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595181899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> Cool! Glad to know it's trait impl specialization that helps it!</p>",
        "id": 204369571,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190645
    },
    {
        "content": "<p>No wait, we don't need it!</p>",
        "id": 204369598,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190719
    },
    {
        "content": "<p>o.o!</p>",
        "id": 204369635,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190731
    },
    {
        "content": "<p>ALl we ned is to impl it for the interesting types one by one</p>",
        "id": 204369646,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190746
    },
    {
        "content": "<p>like impl for String, u64, Path, etc</p>",
        "id": 204369647,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190761
    },
    {
        "content": "<p>But there's another problem</p>",
        "id": 204369650,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190772
    },
    {
        "content": "<p>Guess what?</p>",
        "id": 204369651,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190778
    },
    {
        "content": "<p>and then matches[\"test\"] returns what?</p>",
        "id": 204369653,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190781
    },
    {
        "content": "<p>It returns <code>R</code></p>",
        "id": 204369657,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190795
    },
    {
        "content": "<p>Which should be inferred from context in most cases</p>",
        "id": 204369665,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190809
    },
    {
        "content": "<p>okay, interesting</p>",
        "id": 204369666,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190821
    },
    {
        "content": "<p>The real problem is that conversion themself can fail</p>",
        "id": 204369670,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190835
    },
    {
        "content": "<p>didnt know you could actually return generics from indexing</p>",
        "id": 204369707,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190844
    },
    {
        "content": "<p>For example, what if you're trying to convert it to <code>u64</code> but the value is \"foo\"?</p>",
        "id": 204369714,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> then macro to the rescue?</p>",
        "id": 204369715,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190882
    },
    {
        "content": "<p>???</p>",
        "id": 204369724,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> I mean no indexing, just a macro</p>",
        "id": 204369729,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595190919
    },
    {
        "content": "<p>We already have that</p>",
        "id": 204369733,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190932
    },
    {
        "content": "<p>it's called <code>value_of_t</code></p>",
        "id": 204369737,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190940
    },
    {
        "content": "<p>and it's not a macro</p>",
        "id": 204369740,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190944
    },
    {
        "content": "<p>*Will have in 3.0</p>",
        "id": 204369742,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190957
    },
    {
        "content": "<p>I... I actually feel enlighten</p>",
        "id": 204369785,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595190992
    },
    {
        "content": "<p>What if <code>App::arg</code> took not <code>Arg</code> but some generic <code>R</code> that implements <code>ArgTrait</code></p>",
        "id": 204369804,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595191051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> Is it possible to check all accesses of the indexing and do checks at the start of the program for correct types?</p>",
        "id": 204369811,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191080
    },
    {
        "content": "<p>with the type system?</p>",
        "id": 204369853,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191089
    },
    {
        "content": "<p>or encode the type in the declaration of arguments</p>",
        "id": 204369861,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191123
    },
    {
        "content": "<p>I think it might be possible for some number of select types, but not in general</p>",
        "id": 204369869,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595191153
    },
    {
        "content": "<blockquote>\n<p>or encode the type in the declaration of arguments</p>\n</blockquote>\n<p>That's what I'm thinking</p>",
        "id": 204369874,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595191175
    },
    {
        "content": "<p>I need to fork clap and publish my clap-killer arg parser at this point, muhaha!</p>",
        "id": 204369921,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595191225
    },
    {
        "content": "<p>aha I'm glad!</p>",
        "id": 204369926,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244816\">@CreepySkeleton</span> I would really like a shorthand for .unwrap() on Option</p>",
        "id": 204370053,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191499
    },
    {
        "content": "<p>could the <code>*</code> operator be used as such?</p>",
        "id": 204370109,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191563
    },
    {
        "content": "<p><code>*matches.value_of(\"test\")</code>?</p>",
        "id": 204370113,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191585
    },
    {
        "content": "<p>panics if invalid?</p>",
        "id": 204370121,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191599
    },
    {
        "content": "<p>value_of is too long too</p>",
        "id": 204370136,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191630
    },
    {
        "content": "<p><code>val</code> could be ok</p>",
        "id": 204370183,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191684
    },
    {
        "content": "<p>or <code>get</code></p>",
        "id": 204370194,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191715
    },
    {
        "content": "<p>The problem is that it can fail because of two unrelated reasons - the argument wasn't provided and the argument couldn't be parsed as the resulted type.</p>",
        "id": 204370588,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595192456
    },
    {
        "content": "<p>Should it panic in <em>both</em> cases?</p>",
        "id": 204370594,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595192469
    },
    {
        "content": "<p>The problem with <code>get</code> is that the famous <code>slice::get</code> return Option</p>",
        "id": 204370600,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595192509
    },
    {
        "content": "<p>I would prefer to follow the example</p>",
        "id": 204370642,
        "sender_full_name": "CreepySkeleton",
        "timestamp": 1595192524
    }
]