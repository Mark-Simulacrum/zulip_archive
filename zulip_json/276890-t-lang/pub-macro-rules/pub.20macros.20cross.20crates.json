[
    {
        "content": "<p>was doing a test that checks how cross crates pub macros fail</p>",
        "id": 227011496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761457
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago pub-macro (pubrules)]$ tree\n.\n├── auxiliary\n│   └── cross-crates.rs\n└── cross-crates.rs\n</code></pre></div>",
        "id": 227011653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// auxiliary/cross-crates.rs</span>\n<span class=\"cp\">#![feature(pub_macro_rules)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227011746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// cross-crates.rs</span>\n<span class=\"c1\">// check-pass</span>\n<span class=\"c1\">// aux-build:cross-crates.rs</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">cross_crates</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cross_crates</span>::<span class=\"n\">m</span>::<span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227011837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761611
    },
    {
        "content": "<p>and getting ...</p>",
        "id": 227011846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761615
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;Missing span for DefIndex(4)&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:718:32\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.52.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z threads=1 -Z ui-testing -Z deduplicate-diagnostics=no -Z emit-future-incompat-report -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n\nquery stack during panic:\nend of query stack\n</code></pre></div>",
        "id": 227011899,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761634
    },
    {
        "content": "<p>which I guess it is exactly what is expected to happen</p>",
        "id": 227011918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761645
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 227011929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613761649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> interesting. ok</p>",
        "id": 227020680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613765156
    },
    {
        "content": "<p>have you looked at this panic location?</p>",
        "id": 227020758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613765176
    },
    {
        "content": "<p>yep</p>",
        "id": 227021336,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613765463
    },
    {
        "content": "<p>I guess we need to add the visibility information when we compile and encode the macro</p>",
        "id": 227021441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613765510
    },
    {
        "content": "<p>and then also add the ability to decode it and then properly handle that</p>",
        "id": 227021518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613765538
    }
]