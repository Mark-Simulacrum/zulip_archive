[
    {
        "content": "<p>This seems to be the major unknown, so I'm opening this topic to discuss. I'd like to at least have an alternative pattern to recommend for people. I'm not sure we need to supply an automatic migration.</p>",
        "id": 226140787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613139020
    },
    {
        "content": "<p>One option might be having some way to shadow items or have like an \"anonymous scope\" you can create.</p>",
        "id": 226140811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613139035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just to be clear are you talking about recursive macros (i.e., macros that call themselves) or \"private\" macros (macros that are defined inside of another macro?</p>",
        "id": 226790041,
        "sender_full_name": "rylev",
        "timestamp": 1613643763
    },
    {
        "content": "<p>I <em>think</em> these are two separate questions. I've opened a topic on on \"private\" macros, and I'd like to use this to discuss recursive macros in the sense of macros that call themselves.</p>",
        "id": 226790362,
        "sender_full_name": "rylev",
        "timestamp": 1613643939
    },
    {
        "content": "<p>I see</p>",
        "id": 226790593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613644051
    },
    {
        "content": "<p>I meant the pattern of a macro defining multiple versions of a helper, which I guess is the other topic</p>",
        "id": 226790629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613644068
    },
    {
        "content": "<p>I'm not aware of any problems with \"recursive\" macros</p>",
        "id": 226790638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613644074
    },
    {
        "content": "<p>Are there problems?</p>",
        "id": 226790660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613644082
    },
    {
        "content": "<p>I've been a bit sloppy in my terminology...</p>",
        "id": 226790707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613644087
    },
    {
        "content": "<p>I don't believe there's a problem with the transition but writing recursive macros might be harder - Macros usually assume that when they are called they are available in scope with an unqualified name or available at $crate::macro. That might no longer be true as macros can be called through paths (i.e., <code>foo::bar::macro!</code>). If <code>foo::bar::macro!</code> recursively calls itself by calling just <code>macro!</code> without the modules, it won't be in scope.</p>",
        "id": 226791353,
        "sender_full_name": "rylev",
        "timestamp": 1613644433
    },
    {
        "content": "<p>This would kind of require that suggestion of <code>$self</code> paths in macros, or the <code>match_module_path!</code> workaround I posted on GH</p>",
        "id": 226811938,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613656235
    },
    {
        "content": "<p>So I just confirmed that this is the case in the current implementation.</p>",
        "id": 227465181,
        "sender_full_name": "rylev",
        "timestamp": 1614099648
    },
    {
        "content": "<p>I think adding a $self path makes the most sense. Not having support for this severely limits the usability of macros.</p>",
        "id": 227465273,
        "sender_full_name": "rylev",
        "timestamp": 1614099681
    },
    {
        "content": "<p>I'm not familiar with expansion code, but a quick look makes me think that implementing <code>$self</code> won't be trivial.</p>",
        "id": 227470065,
        "sender_full_name": "rylev",
        "timestamp": 1614101505
    },
    {
        "content": "<p>Hmm, this feels like a problem :)</p>",
        "id": 227473345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614102644
    },
    {
        "content": "<p>It is, though I don't think of <code>$self</code> as being necessarily a terrible solution</p>",
        "id": 227473450,
        "sender_full_name": "rylev",
        "timestamp": 1614102684
    },
    {
        "content": "<p>It's directly analogous to <code>$crate</code>.</p>",
        "id": 227473489,
        "sender_full_name": "rylev",
        "timestamp": 1614102705
    },
    {
        "content": "<p>it's not .. hmm .. terrible</p>",
        "id": 227474234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614102968
    },
    {
        "content": "<p>it's just .. more complex</p>",
        "id": 227474268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614102981
    },
    {
        "content": "<p>Certainly. But path based scoping is more complicated than crate based global namespaces.</p>",
        "id": 227474439,
        "sender_full_name": "rylev",
        "timestamp": 1614103060
    },
    {
        "content": "<p><code>$self</code> has its own problems - it would magically have to allow access to the module where the macro is defined but that macro may not be directly available to the caller.</p>",
        "id": 227474686,
        "sender_full_name": "rylev",
        "timestamp": 1614103149
    },
    {
        "content": "<p>as we said in the meeting, definitely starts to feel like hygiene</p>",
        "id": 227494317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614110585
    },
    {
        "content": "<p>I thought the goal was to simplify things, not introduce new features.<br>\nIf some code is difficult to migrate and you think it can be addressed by a new feature, then it is always simpler to provide an option to use <code>macro_rules</code> scoped in the old way instead, because they already implemented and their support won't go away from the compiler any time soon.</p>",
        "id": 227561837,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614153876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> This seemed to be the feeling in the lang team meeting yesterday (i.e., your old plan of just providing an opt-in way to path based scoping). I do think it's a shame there isn't a way to easily do recursive macros in the new system as this is an extremely common pattern.</p>",
        "id": 227569322,
        "sender_full_name": "rylev",
        "timestamp": 1614158245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/276890-t-lang.2Fpub-macro-rules/topic/recursive.20macros.20and.20shadowing/near/227561837\">said</a>:</p>\n<blockquote>\n<p>I thought the goal was to simplify things, not introduce new features.</p>\n</blockquote>\n<p>I agree with this, but I mildly disagree that having some way to \"opt back in\" to the old system is simpler</p>",
        "id": 227584734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166288
    },
    {
        "content": "<p>In particular, an attribute feels very wrong to me</p>",
        "id": 227584746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166303
    },
    {
        "content": "<p>It's like now we are saying: we invented a new system, but it has this weird escape hatch that you have to use sometimes that puts you in a whole new world</p>",
        "id": 227584811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166328
    },
    {
        "content": "<p>there is a difference to me between an attribute and having pub \"opt-in\" to a more normal system-- I think I prefer the latter. It's still \"macros are different\" but it's not \"they're the same; but not always\"</p>",
        "id": 227584924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166398
    },
    {
        "content": "<p>I realize this is squishy though :)</p>",
        "id": 227584942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166408
    },
    {
        "content": "<p>I think perhaps we're using \"simple\" for two different things. There's simple to implement and there's simple to use/explain in the language. Obviously not introducing new concepts like <code>$self</code> is simpler to implement (it's strictly less work), but this doesn't mean it's simpler to use. \"Use path based scoping for macros unless your macro is recursive in which case use <code>#[macro_export]</code> is not as simple as \"always use path based scoping unless you have some very complex use case\"</p>",
        "id": 227589292,
        "sender_full_name": "rylev",
        "timestamp": 1614169148
    },
    {
        "content": "<p>I still think we need to discuss recursive macros and the idea of <code>$self</code>. Ideally almost everything should be expressible in the path based system.</p>",
        "id": 227589309,
        "sender_full_name": "rylev",
        "timestamp": 1614169159
    },
    {
        "content": "<p>Yes, that is a trick. I am definitely think of \"simple\" for end-users, but even there I feel there are various dimensions.</p>",
        "id": 227639305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614188017
    },
    {
        "content": "<p>Seems like I confused this case with the \"private macro\" case from the other thread.</p>",
        "id": 227672813,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614200818
    },
    {
        "content": "<p><code>macro</code> macros can just use def-site hygiene to refer to themselves - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=752b6922a8326de84ee9d0697bcaf56f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=752b6922a8326de84ee9d0697bcaf56f</a><br>\nSo this is more of a \"migration problem\" rather than a \"macro 2.0 problem\".</p>",
        "id": 227673365,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614201068
    },
    {
        "content": "<p>For <code>pub macro_rules!</code> <code>$self</code> can always be replaced with <code>$crate::full::path</code>  when necessary - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ca18d12267289e0d58865ee0f6f82f58\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ca18d12267289e0d58865ee0f6f82f58</a></p>",
        "id": 227674116,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614201365
    },
    {
        "content": "<p>I think the case <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> had in mind was of somebody defining a recursive macro that gets re-exported out of the private module it was defined in: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=82276ba137cf3fcd7f532bab756a8307\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=82276ba137cf3fcd7f532bab756a8307</a></p>\n<p>But the fact that <code>macro</code> macros def_site hygiene already handles this well does suggest that implementing <code>$self</code> may be easier than expected</p>",
        "id": 227684902,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614205357
    },
    {
        "content": "<p>Indeed the case I meant was when the <code>$crate::full::path</code> is not visible to the caller as could be the case when reexporting. </p>\n<p>I looked into implementing $self but I would need <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>’s help to understand how to reuse the logic from <code>macro</code> def site hygiene</p>",
        "id": 227688832,
        "sender_full_name": "rylev",
        "timestamp": 1614207162
    },
    {
        "content": "<p>Here was my attempt at doing it with library code. Oh well <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=68238880b110b50a5c757d6de96d900d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=68238880b110b50a5c757d6de96d900d</a></p>",
        "id": 227689350,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614207454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/276890-t-lang.2Fpub-macro-rules/topic/recursive.20macros.20and.20shadowing/near/227688832\">said</a>:</p>\n<blockquote>\n<p>Indeed the case I meant was when the <code>$crate::full::path</code> is not visible to the caller as could be the case when reexporting. </p>\n</blockquote>\n<p>If the macro is public, then there's at lest one fully visible path to it (possibly involving reexports), which can be used as a <code>$crate::full::path</code>.</p>",
        "id": 227690261,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614207835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/276890-t-lang.2Fpub-macro-rules/topic/recursive.20macros.20and.20shadowing/near/227684902\">said</a>:</p>\n<blockquote>\n<p>But the fact that <code>macro</code> macros def_site hygiene already handles this well does suggest that implementing <code>$self</code> may be easier than expected</p>\n</blockquote>\n<p>Def-site hygiene is unstable (for multiple reasons), I doubt <code>$self</code> will be useful for migration if it's going to be unstable.<br>\n<em>If</em> <code>$self</code> is going to be implemented, which I would prefer to not happen, then it should use stable \"mixed-site\" hygiene like <code>$crate</code>.</p>",
        "id": 227690661,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614208028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/276890-t-lang.2Fpub-macro-rules/topic/recursive.20macros.20and.20shadowing/near/227690261\">said</a>:</p>\n<blockquote>\n<p>If the macro is public, then there's at lest one fully visible path to it (possibly involving reexports), which can be used as a <code>$crate::full::path</code>.</p>\n</blockquote>\n<p>one problem is that the <em>macro</em> may not know the path</p>",
        "id": 227741576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246351
    },
    {
        "content": "<p>but perhaps you meant something like <code>$self</code> where the macro uses a shorthand that is expanded at the point of use, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ?</p>",
        "id": 227741675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246376
    },
    {
        "content": "<blockquote>\n<p>one problem is that the macro may not know the path</p>\n</blockquote>\n<p>The person who writes the macro certainly knows the path.</p>",
        "id": 227742785,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614246962
    },
    {
        "content": "<p>I don't think that's true in a cross-crate re-export scenario</p>",
        "id": 227742938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247047
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// What happens here?</span>\n\n<span class=\"c1\">// crate A</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$crate</span>::<span class=\"n\">foo</span>::<span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate B</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">crate_a</span>::<span class=\"n\">foo</span>::<span class=\"n\">m</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate C</span>\n<span class=\"n\">crate_b</span>::<span class=\"n\">m</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227743025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247087
    },
    {
        "content": "<p>(from <a href=\"https://hackmd.io/WkFGXS8GTxCYcv9MylYBRA?view#%E2%80%9CChange-visibility-scoping-rules-for-macro_rules-macros%E2%80%9D-rfcs3067\">lang team minutes</a>, which I just realized I never published)</p>",
        "id": 227743059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247101
    },
    {
        "content": "<p>does that work?</p>",
        "id": 227743093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247122
    },
    {
        "content": "<p>it depends on what <code>$crate</code> does, we weren't sure</p>",
        "id": 227743107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247130
    },
    {
        "content": "<p>and in particular whether <code>$crate</code> acts \"hygienically\" -- i.e., maybe crate C doesn't <em>directly</em> depend on crate A</p>",
        "id": 227743167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247159
    },
    {
        "content": "<p>Just tested <code>$crate</code> and it can \"peak through\" visibility.</p>",
        "id": 227743965,
        "sender_full_name": "rylev",
        "timestamp": 1614247556
    },
    {
        "content": "<p>you tested it with <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s PR, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> ?</p>",
        "id": 227744043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247581
    },
    {
        "content": "<p>what exactly did you test, I guess is my question :)</p>",
        "id": 227744062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247596
    },
    {
        "content": "<p>No I tested using <code>$crate</code> on the stable compiler</p>",
        "id": 227744090,
        "sender_full_name": "rylev",
        "timestamp": 1614247613
    },
    {
        "content": "<p>how does visibility play in then?</p>",
        "id": 227744104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247622
    },
    {
        "content": "<p>$crate can see through visbility. I.e., Your example above works even though crate C does not have access to cratea::foo</p>",
        "id": 227744163,
        "sender_full_name": "rylev",
        "timestamp": 1614247668
    },
    {
        "content": "<p>Which means <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> is correct that there is always a public path that the macro can refer to (using $crate) that will work no matter who is calling the macro</p>",
        "id": 227744317,
        "sender_full_name": "rylev",
        "timestamp": 1614247729
    },
    {
        "content": "<p>my example above, but translated into <code>#[macro_export]</code> ?</p>",
        "id": 227744318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247730
    },
    {
        "content": "<p>Ah yes sorry</p>",
        "id": 227744335,
        "sender_full_name": "rylev",
        "timestamp": 1614247739
    },
    {
        "content": "<p>ok, so <code>$crate</code> expands to \"the crate where the macro was defined, even if the user couldn't name it\", in other words</p>",
        "id": 227744402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247784
    },
    {
        "content": "<p>We can't yet test it against <code>pub</code> since this doesn't yet work across crates. <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is looking into fixing this (there's a problem with metadata currently)</p>",
        "id": 227744417,
        "sender_full_name": "rylev",
        "timestamp": 1614247794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/276890-t-lang.2Fpub-macro-rules/topic/recursive.20macros.20and.20shadowing/near/227744402\">said</a>:</p>\n<blockquote>\n<p>ok, so <code>$crate</code> expands to \"the crate where the macro was defined, even if the user couldn't name it\", in other words</p>\n</blockquote>\n<p>Yes it seems so</p>",
        "id": 227744427,
        "sender_full_name": "rylev",
        "timestamp": 1614247801
    },
    {
        "content": "<p>yes, this is why I was trying to figure out what you meant</p>",
        "id": 227744472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247805
    },
    {
        "content": "<p>but if you kept the <em>definition of the macro</em> the same--</p>",
        "id": 227744495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247816
    },
    {
        "content": "<p>i.e., it still used <code>$crate::foo::m!</code>...</p>",
        "id": 227744515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247826
    },
    {
        "content": "<p>...I don't think I realized that was stable</p>",
        "id": 227744531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247834
    },
    {
        "content": "<p>can you just paste exactly what you tested? :)</p>",
        "id": 227744554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614247846
    },
    {
        "content": "<p>crate <code>foo</code> (depends on crate <code>bar</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"n\">my_macro</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>crate <code>bar</code> (depends on crate <code>baz</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">baz</span>::<span class=\"n\">my_macro</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>crate <code>baz</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">my_macro</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"cp\">$crate</span>::<span class=\"n\">foo</span>::<span class=\"n\">bar</span>::<span class=\"n\">CONST</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONST</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227744950,
        "sender_full_name": "rylev",
        "timestamp": 1614248046
    },
    {
        "content": "<p>The above compiles without error ^^</p>",
        "id": 227745018,
        "sender_full_name": "rylev",
        "timestamp": 1614248081
    },
    {
        "content": "<p>even though <code>foo</code> cannot directly name <code>baz::foo::bar::CONST</code></p>",
        "id": 227745052,
        "sender_full_name": "rylev",
        "timestamp": 1614248107
    },
    {
        "content": "<p>I'm slightly surprised by this, but it does seem consistent, and means (most likely) that we can create recursive macros in the new system.</p>",
        "id": 227745382,
        "sender_full_name": "rylev",
        "timestamp": 1614248289
    },
    {
        "content": "<p>Of course, this doesn't help with local only recursive macros that are not available from the crate root.</p>",
        "id": 227746842,
        "sender_full_name": "rylev",
        "timestamp": 1614249094
    },
    {
        "content": "<p>cool</p>",
        "id": 227747775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614249633
    },
    {
        "content": "<p>So we have a way of allowing cross crate recursive macros but still need to think about the fact that crate private macros cannot be used in locations where the macro cannot be directly accessed from the crate root.</p>",
        "id": 227757970,
        "sender_full_name": "rylev",
        "timestamp": 1614255695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I've not been able to think of a way that allows crate local macros to always work (outside of a theoretical <code>$self</code>). Do you have any thoughts here?</p>",
        "id": 227783604,
        "sender_full_name": "rylev",
        "timestamp": 1614266447
    },
    {
        "content": "<p>I think this shouldn't be a problem in practice because in a local crate everything is under control of the macro's author and modules/imports can always be restructured to make the macro's full path (or full path of one of its imports/reexports) accessible from all points in which the macro is used.</p>",
        "id": 227825111,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614281969
    }
]